{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/119.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nJudge whether the above metal_generic_dev_dma_map code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "A caller provides sg_in pointing to an array of nents_in elements but passes sg_out that points to a smaller buffer (fewer than nents_in elements). The function unconditionally calls memcpy(sg_out, sg_in, nents_in * sizeof(struct metal_sg)) when sg_out != sg_in, causing a write beyond the bounds of the object referenced by sg_out (heap/stack overflow). Example: nents_in = 4, sg_out points to an array of 2 struct metal_sg elements -> memcpy copies 4 elements into space for 2, overflow occurs.",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\nstruct metal_bus { int dummy; };\nstruct metal_device { int dummy; };\n\nstruct metal_sg {\n    void *virt;\n    size_t len;\n};\n\nenum { METAL_DMA_DEV_W = 1 };\n\n/* External cache functions (declared, not defined here). */\nextern void metal_cache_flush(void *addr, size_t len);\nextern void metal_cache_invalidate(void *addr, size_t len);\n\n/* Helper probe: append a log entry describing the current state. */\nstatic void metal_log_state(const char *stage,\n                            const struct metal_sg *sg_in,\n                            const struct metal_sg *sg_out,\n                            int nents_in,\n                            uint32_t dir)\n{\n    FILE *f = fopen(\"/tmp/logs/119.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"Stage: %s\\n\", stage);\n        fprintf(f, \"  sg_in = %p, sg_out = %p, nents_in = %d, dir = %u\\n\",\n                (const void *)sg_in, (const void *)sg_out, nents_in, (unsigned)dir);\n        if (sg_in != NULL) {\n            int i;\n            for (i = 0; i < nents_in; ++i) {\n                /* Log each entry reported by caller (may read out-of-bounds if caller passed wrong nents_in) */\n                fprintf(f, \"    in[%d]: virt=%p, len=%zu\\n\",\n                        i, sg_in[i].virt, sg_in[i].len);\n            }\n        }\n        if (sg_out != NULL) {\n            int i;\n            for (i = 0; i < nents_in; ++i) {\n                /* Note: reading sg_out entries here mirrors the control path and may show corrupted values\n                 * if the caller provided a too-small buffer (this is intentional for probing). */\n                fprintf(f, \"    out[%d]: virt=%p, len=%zu\\n\",\n                        i, sg_out[i].virt, sg_out[i].len);\n            }\n        }\n        fprintf(f, \"---\\n\");\n        fclose(f);\n    }\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    /* Log state before potential copy */\n    metal_log_state(\"before_copy\", sg_in, sg_out, nents_in, dir);\n\n    if (sg_out != sg_in) {\n        /* Log intention to copy and the byte count */\n        FILE *f = fopen(\"/tmp/logs/119.txt\", \"a\");\n        if (f != NULL) {\n            size_t bytes = (size_t)nents_in * sizeof(struct metal_sg);\n            fprintf(f, \"memcpy will copy %zu bytes from %p to %p\\n\",\n                    bytes, (const void *)sg_in, (const void *)sg_out);\n            fclose(f);\n        }\n        memcpy(sg_out, sg_in, (size_t)nents_in * sizeof(struct metal_sg));\n\n        /* Log state after copy */\n        metal_log_state(\"after_copy\", sg_in, sg_out, nents_in, dir);\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        /* Log each iteration and action */\n        FILE *f = fopen(\"/tmp/logs/119.txt\", \"a\");\n        if (f != NULL) {\n            fprintf(f, \"loop idx=%d: virt=%p, len=%zu\\n\",\n                    i, sg_out[i].virt, sg_out[i].len);\n            fclose(f);\n        }\n\n        if (dir == METAL_DMA_DEV_W) {\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    /* Final state log */\n    metal_log_state(\"done\", sg_in, sg_out, nents_in, dir);\n\n    return nents_in;\n}\n"
}