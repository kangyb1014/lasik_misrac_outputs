{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstruct metal_device { int dummy; };\nstruct metal_sg {\n    void *virt;\n    size_t len;\n};\nstatic void metal_cache_flush(void *addr, size_t len);\nstatic void metal_cache_invalidate(void *addr, size_t len);\nstatic void log_to_file(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void metal_cache_flush(void *addr, size_t len)\n{\n    /* Preserve original intention: perform cache flush. In this test\n       harness we only log the action to demonstrate the control path. */\n    log_to_file(\"metal_cache_flush: addr=%p len=%zu\", addr, len);\n}\nstatic void metal_cache_invalidate(void *addr, size_t len)\n{\n    /* Preserve original intention: perform cache invalidate. In this test\n       harness we only log the action to demonstrate the control path. */\n    log_to_file(\"metal_cache_invalidate: addr=%p len=%zu\", addr, len);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n\n    /* The following two casts are no-ops used to silence unused\n       parameter warnings. They have no side effects and are therefore\n       dead code according to MISRA C 2023 Rule 2.2. */\n    log_to_file(\"enter: bus=%p device=%p dir=%u sg_in=%p sg_out=%p nents_in=%d\",\n                (void *)bus, (void *)device, (unsigned)dir,\n                (void *)sg_in, (void *)sg_out, nents_in);\n\n    (void)bus;\n    (void)device;\n\n    /* Log whether the copy will be performed. */\n    if (sg_out != sg_in) {\n        log_to_file(\"memcpy: copying %d entries from %p to %p (entry_size=%zu)\",\n                    nents_in, (void *)sg_in, (void *)sg_out, sizeof(struct metal_sg));\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n    } else {\n        log_to_file(\"memcpy: skipped because sg_out == sg_in (%p)\", (void *)sg_in);\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        log_to_file(\"loop: i=%d dir=%u virt=%p len=%zu\",\n                    i, (unsigned)dir, sg_out[i].virt, sg_out[i].len);\n        if (dir == METAL_DMA_DEV_W) {\n            log_to_file(\"action: flushing entry %d\", i);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n        log_to_file(\"action: invalidating entry %d\", i);\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    log_to_file(\"exit: returning %d\", nents_in);\n    return nents_in;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n-- Build type:  \n-- Host:    Linux/x86_64\n-- Target:  Linux/x86_64\n-- Machine: Generic\n-- Vendor: none\n/tmp/tmpgyfyrj6v/src/lib/device.c:127:8: error: redefinition of 'struct metal_device'\n  127 | struct metal_device { int dummy; };\n      |        ^~~~~~~~~~~~\nIn file included from /tmp/tmpgyfyrj6v/src/lib/device.c:19:\n/tmp/tmpgyfyrj6v/build/lib/include/metal/device.h:72:8: note: originally defined here\n   72 | struct metal_device {\n      |        ^~~~~~~~~~~~\n/tmp/tmpgyfyrj6v/src/lib/device.c:128:8: error: redefinition of 'struct metal_sg'\n  128 | struct metal_sg {\n      |        ^~~~~~~~\nIn file included from /tmp/tmpgyfyrj6v/build/lib/include/metal/device.h:18,\n                 from /tmp/tmpgyfyrj6v/src/lib/device.c:19:\n/tmp/tmpgyfyrj6v/build/lib/include/metal/dma.h:33:8: note: originally defined here\n   33 | struct metal_sg {\n      |        ^~~~~~~~\n/tmp/tmpgyfyrj6v/src/lib/device.c:132:13: error: conflicting types for 'metal_cache_flush'; have 'void(void *, size_t)' {aka 'void(void *, long unsigned int)'}\n  132 | static void metal_cache_flush(void *addr, size_t len);\n      |             ^~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpgyfyrj6v/src/lib/device.c:26:\n/tmp/tmpgyfyrj6v/build/lib/include/metal/cache.h:33:20: note: previous definition of 'metal_cache_flush' with type 'void(void *, unsigned int)'\n   33 | static inline void metal_cache_flush(void *addr, unsigned int len)\n      |                    ^~~~~~~~~~~~~~~~~\n/tmp/tmpgyfyrj6v/src/lib/device.c:133:13: error: conflicting types for 'metal_cache_invalidate'; have 'void(void *, size_t)' {aka 'void(void *, long unsigned int)'}\n  133 | static void metal_cache_invalidate(void *addr, size_t len);\n      |             ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpgyfyrj6v/src/lib/device.c:26:\n/tmp/tmpgyfyrj6v/build/lib/include/metal/cache.h:46:20: note: previous definition of 'metal_cache_invalidate' with type 'void(void *, unsigned int)'\n   46 | static inline void metal_cache_invalidate(void *addr, unsigned int len)\n      |                    ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgyfyrj6v/src/lib/device.c:160:5: error: conflicting types for 'metal_generic_dev_dma_map'; have 'int(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int,  struct metal_sg *)' {aka 'int(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int,  struct metal_sg *)'}\n  160 | int metal_generic_dev_dma_map(struct metal_bus *bus,\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpgyfyrj6v/src/lib/device.c:19:\n/tmp/tmpgyfyrj6v/build/lib/include/metal/device.h:160:5: note: previous declaration of 'metal_generic_dev_dma_map' with type 'int(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int,  struct metal_sg *)' {aka 'int(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int,  struct metal_sg *)'}\n  160 | int metal_generic_dev_dma_map(struct metal_bus *bus,\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgyfyrj6v/src/lib/device.c:204:6: error: conflicting types for 'metal_generic_dev_dma_unmap'; have 'void(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int)' {aka 'void(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int)'}\n  204 | void metal_generic_dev_dma_unmap(struct metal_bus *bus,\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpgyfyrj6v/src/lib/device.c:19:\n/tmp/tmpgyfyrj6v/build/lib/include/metal/device.h:164:6: note: previous declaration of 'metal_generic_dev_dma_unmap' with type 'void(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int)' {aka 'void(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int)'}\n  164 | void metal_generic_dev_dma_unmap(struct metal_bus *bus,\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [lib/CMakeFiles/metal-shared.dir/build.make:90: lib/CMakeFiles/metal-shared.dir/device.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:291: lib/CMakeFiles/metal-shared.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n#include <metal/device.h>\n\nstatic void log_to_file(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                              struct metal_device *device,\n                              uint32_t dir,\n                              struct metal_sg *sg_in,\n                              int nents_in,\n                              struct metal_sg *sg_out)\n{\n    int i;\n\n    /* Log entry and silence unused-parameter warnings via the log call. */\n    log_to_file(\"enter: bus=%p device=%p dir=%u sg_in=%p sg_out=%p nents_in=%d\",\n                (void *)bus, (void *)device, (unsigned)dir,\n                (void *)sg_in, (void *)sg_out, nents_in);\n\n    (void)bus;\n    (void)device;\n\n    /* Copy scatter-gather list if requested. */\n    if (sg_out != sg_in) {\n        log_to_file(\"memcpy: copying %d entries from %p to %p (entry_size=%zu)\",\n                    nents_in, (void *)sg_in, (void *)sg_out, sizeof(struct metal_sg));\n        memcpy(sg_out, sg_in, (size_t)nents_in * sizeof(struct metal_sg));\n    } else {\n        log_to_file(\"memcpy: skipped because sg_out == sg_in (%p)\", (void *)sg_in);\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        log_to_file(\"loop: i=%d dir=%u virt=%p len=%zu\",\n                    i, (unsigned)dir, sg_out[i].virt, sg_out[i].len);\n\n        /* Use the cache helpers provided by the included headers. The\n           header versions expect an unsigned int length, so cast accordingly. */\n        if (dir == METAL_DMA_DEV_W) {\n            log_to_file(\"action: flushing entry %d\", i);\n            metal_cache_flush(sg_out[i].virt, (unsigned int)sg_out[i].len);\n        }\n        log_to_file(\"action: invalidating entry %d\", i);\n        metal_cache_invalidate(sg_out[i].virt, (unsigned int)sg_out[i].len);\n    }\n\n    log_to_file(\"exit: returning %d\", nents_in);\n    return nents_in;\n}\n\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n                                 struct metal_device *device,\n                                 uint32_t dir,\n                                 struct metal_sg *sg,\n                                 int nents)\n{\n    int i;\n\n    log_to_file(\"unmap: bus=%p device=%p dir=%u sg=%p nents=%d\",\n                (void *)bus, (void *)device, (unsigned)dir, (void *)sg, nents);\n\n    (void)bus;\n    (void)device;\n\n    for (i = 0; i < nents; i++) {\n        log_to_file(\"unmap-loop: i=%d dir=%u virt=%p len=%zu\",\n                    i, (unsigned)dir, sg[i].virt, sg[i].len);\n        /* Mirror reasonable unmap behavior: ensure caches are coherent\n           for CPU after DMA completes. Cast length to unsigned int as\n           the header cache helpers expect. */\n        metal_cache_invalidate(sg[i].virt, (unsigned int)sg[i].len);\n    }\n}\n",
  "explanation": "I removed the duplicate struct and cache function declarations that conflicted with the project's headers and instead included the project's header (<metal/device.h>) so the existing types and cache helpers are used. I adjusted calls to metal_cache_flush/metal_cache_invalidate to cast the length to unsigned int (matching the header prototypes). I preserved the original metal_generic_dev_dma_map logic (copying SG entries, logging, flushing/invalidation) and added a matching metal_generic_dev_dma_unmap implementation to satisfy the header declaration and avoid conflicting types. I also kept the log_to_file helper and necessary standard includes."
}