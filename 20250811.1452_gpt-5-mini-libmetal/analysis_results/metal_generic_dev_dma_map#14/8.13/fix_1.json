{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstruct metal_device { int dummy; };\nenum { METAL_DMA_DEV_W = 1 };\nstruct metal_sg {\n    void *virt;\n    size_t len;\n};\nstatic void metal_cache_flush(void *addr, size_t len)\n{\n    (void)addr;\n    (void)len;\n}\nstatic void metal_cache_invalidate(void *addr, size_t len)\n{\n    (void)addr;\n    (void)len;\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    FILE *log = fopen(\"/tmp/logs/115.txt\", \"w\");\n\n    /* Preserve unused parameter casts from original code */\n    (void)bus;\n    (void)device;\n\n    if (log != NULL) {\n        fprintf(log, \"metal_generic_dev_dma_map called\\n\");\n        fprintf(log, \"  this=%p, bus=%p, device=%p\\n\", (void *)metal_generic_dev_dma_map, (void *)bus, (void *)device);\n        fprintf(log, \"  dir=%u, nents_in=%d, sg_in=%p, sg_out=%p\\n\", (unsigned)dir, nents_in, (void *)sg_in, (void *)sg_out);\n    }\n\n    if (sg_out != sg_in) {\n        if (log != NULL) {\n            fprintf(log, \"  sg_out != sg_in: performing memcpy of %d entries (size=%zu)\\n\",\n                    nents_in, (size_t)nents_in * sizeof(struct metal_sg));\n        }\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n    } else {\n        if (log != NULL) {\n            fprintf(log, \"  sg_out == sg_in: skipping memcpy\\n\");\n        }\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        if (log != NULL) {\n            fprintf(log, \"  entry[%d]: virt=%p, len=%zu\\n\", i, sg_out[i].virt, sg_out[i].len);\n        }\n\n        if (dir == METAL_DMA_DEV_W) {\n            if (log != NULL) {\n                fprintf(log, \"    dir == METAL_DMA_DEV_W: calling metal_cache_flush on entry %d\\n\", i);\n            }\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n\n        if (log != NULL) {\n            fprintf(log, \"    calling metal_cache_invalidate on entry %d\\n\", i);\n        }\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    if (log != NULL) {\n        fprintf(log, \"  returning %d\\n\", nents_in);\n        fclose(log);\n    }\n\n    return nents_in;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n-- Build type:  \n-- Host:    Linux/x86_64\n-- Target:  Linux/x86_64\n-- Machine: Generic\n-- Vendor: none\n/tmp/tmpnkx5fsis/src/lib/device.c:126:8: error: redefinition of 'struct metal_device'\n  126 | struct metal_device { int dummy; };\n      |        ^~~~~~~~~~~~\nIn file included from /tmp/tmpnkx5fsis/src/lib/device.c:18:\n/tmp/tmpnkx5fsis/build/lib/include/metal/device.h:72:8: note: originally defined here\n   72 | struct metal_device {\n      |        ^~~~~~~~~~~~\nIn file included from /tmp/tmpnkx5fsis/build/lib/include/metal/device.h:18,\n                 from /tmp/tmpnkx5fsis/src/lib/device.c:18:\n/tmp/tmpnkx5fsis/build/lib/include/metal/dma.h:27:26: error: expected identifier before numeric constant\n   27 | #define METAL_DMA_DEV_W  2 /**< DMA direction, device write */\n      |                          ^\n/tmp/tmpnkx5fsis/src/lib/device.c:127:8: note: in expansion of macro 'METAL_DMA_DEV_W'\n  127 | enum { METAL_DMA_DEV_W = 1 };\n      |        ^~~~~~~~~~~~~~~\n/tmp/tmpnkx5fsis/src/lib/device.c:128:8: error: redefinition of 'struct metal_sg'\n  128 | struct metal_sg {\n      |        ^~~~~~~~\nIn file included from /tmp/tmpnkx5fsis/build/lib/include/metal/device.h:18,\n                 from /tmp/tmpnkx5fsis/src/lib/device.c:18:\n/tmp/tmpnkx5fsis/build/lib/include/metal/dma.h:33:8: note: originally defined here\n   33 | struct metal_sg {\n      |        ^~~~~~~~\n/tmp/tmpnkx5fsis/src/lib/device.c:132:13: error: conflicting types for 'metal_cache_flush'; have 'void(void *, size_t)' {aka 'void(void *, long unsigned int)'}\n  132 | static void metal_cache_flush(void *addr, size_t len)\n      |             ^~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpnkx5fsis/src/lib/device.c:25:\n/tmp/tmpnkx5fsis/build/lib/include/metal/cache.h:33:20: note: previous definition of 'metal_cache_flush' with type 'void(void *, unsigned int)'\n   33 | static inline void metal_cache_flush(void *addr, unsigned int len)\n      |                    ^~~~~~~~~~~~~~~~~\n/tmp/tmpnkx5fsis/src/lib/device.c:137:13: error: conflicting types for 'metal_cache_invalidate'; have 'void(void *, size_t)' {aka 'void(void *, long unsigned int)'}\n  137 | static void metal_cache_invalidate(void *addr, size_t len)\n      |             ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpnkx5fsis/src/lib/device.c:25:\n/tmp/tmpnkx5fsis/build/lib/include/metal/cache.h:46:20: note: previous definition of 'metal_cache_invalidate' with type 'void(void *, unsigned int)'\n   46 | static inline void metal_cache_invalidate(void *addr, unsigned int len)\n      |                    ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnkx5fsis/src/lib/device.c:143:5: error: conflicting types for 'metal_generic_dev_dma_map'; have 'int(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int,  struct metal_sg *)' {aka 'int(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int,  struct metal_sg *)'}\n  143 | int metal_generic_dev_dma_map(struct metal_bus *bus,\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpnkx5fsis/src/lib/device.c:18:\n/tmp/tmpnkx5fsis/build/lib/include/metal/device.h:160:5: note: previous declaration of 'metal_generic_dev_dma_map' with type 'int(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int,  struct metal_sg *)' {aka 'int(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int,  struct metal_sg *)'}\n  160 | int metal_generic_dev_dma_map(struct metal_bus *bus,\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnkx5fsis/src/lib/device.c:202:6: error: conflicting types for 'metal_generic_dev_dma_unmap'; have 'void(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int)' {aka 'void(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int)'}\n  202 | void metal_generic_dev_dma_unmap(struct metal_bus *bus,\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpnkx5fsis/src/lib/device.c:18:\n/tmp/tmpnkx5fsis/build/lib/include/metal/device.h:164:6: note: previous declaration of 'metal_generic_dev_dma_unmap' with type 'void(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int)' {aka 'void(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int)'}\n  164 | void metal_generic_dev_dma_unmap(struct metal_bus *bus,\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [lib/CMakeFiles/metal-shared.dir/build.make:90: lib/CMakeFiles/metal-shared.dir/device.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:291: lib/CMakeFiles/metal-shared.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Use the project's headers for the metal types and helpers. */\n#include \"metal/device.h\"\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    FILE *log = fopen(\"/tmp/logs/115.txt\", \"w\");\n\n    /* Preserve unused parameter casts from original code */\n    (void)bus;\n    (void)device;\n\n    if (log != NULL) {\n        fprintf(log, \"metal_generic_dev_dma_map called\\n\");\n        fprintf(log, \"  this=%p, bus=%p, device=%p\\n\", (void *)metal_generic_dev_dma_map, (void *)bus, (void *)device);\n        fprintf(log, \"  dir=%u, nents_in=%d, sg_in=%p, sg_out=%p\\n\", (unsigned)dir, nents_in, (void *)sg_in, (void *)sg_out);\n    }\n\n    if (sg_out != sg_in) {\n        if (log != NULL) {\n            fprintf(log, \"  sg_out != sg_in: performing memcpy of %d entries (size=%zu)\\n\",\n                    nents_in, (size_t)nents_in * sizeof(struct metal_sg));\n        }\n        if (nents_in > 0) {\n            memcpy(sg_out, sg_in, (size_t)nents_in * sizeof(struct metal_sg));\n        }\n    } else {\n        if (log != NULL) {\n            fprintf(log, \"  sg_out == sg_in: skipping memcpy\\n\");\n        }\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        if (log != NULL) {\n            fprintf(log, \"  entry[%d]: virt=%p, len=%zu\\n\", i, sg_out[i].virt, sg_out[i].len);\n        }\n\n        if (dir == METAL_DMA_DEV_W) {\n            if (log != NULL) {\n                fprintf(log, \"    dir == METAL_DMA_DEV_W: calling metal_cache_flush on entry %d\\n\", i);\n            }\n            /* Use project's cache helpers; cast length as header expects unsigned int */\n            metal_cache_flush(sg_out[i].virt, (unsigned int)sg_out[i].len);\n        }\n\n        if (log != NULL) {\n            fprintf(log, \"    calling metal_cache_invalidate on entry %d\\n\", i);\n        }\n        metal_cache_invalidate(sg_out[i].virt, (unsigned int)sg_out[i].len);\n    }\n\n    if (log != NULL) {\n        fprintf(log, \"  returning %d\\n\", nents_in);\n        fclose(log);\n    }\n\n    return nents_in;\n}\n",
  "explanation": "I removed the duplicate type and function definitions that conflicted with the project's headers (struct metal_device, struct metal_sg, METAL_DMA_DEV_W, metal_cache_flush, metal_cache_invalidate). Instead the code now includes the project's header (metal/device.h) and implements only metal_generic_dev_dma_map, matching the existing declaration. Calls to the cache helpers cast the length to unsigned int to match the header signatures. This preserves the original logic while avoiding redefinitions that caused the build errors."
}