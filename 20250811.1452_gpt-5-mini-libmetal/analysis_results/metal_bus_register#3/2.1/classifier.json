{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/25.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_register:\nstruct metal_bus {\n\tconst char\t\t*name;\n\tstruct metal_bus_ops\tops;\n\tstruct metal_list\tdevices;\n\tstruct metal_list\tnode;\n}\n...\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\nJudge whether the above metal_bus_register code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The call metal_bus_find(bus->name, NULL) passes a NULL result pointer. In the metal_bus_find implementation it only returns 0 when a match is found AND the result pointer is non-NULL (the condition is strcmp(...) == 0 && result). Therefore metal_bus_find(...) can never return 0 when called with result == NULL, making the branch that returns -EEXIST in metal_bus_register unreachable.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    FILE *logf = fopen(\"/tmp/logs/25.txt\", \"a\");\n    int find_ret = 0;\n\n    if (logf != NULL) {\n        fprintf(logf, \"metal_bus_register: entered with bus=%p\\n\", (void *)bus);\n    }\n\n    if (!bus || !bus->name || !strlen(bus->name))\n    {\n        if (logf != NULL) {\n            fprintf(logf, \"metal_bus_register: invalid argument: bus=%p, name=%p\\n\",\n                    (void *)bus, (void *)(bus ? bus->name : NULL));\n            fclose(logf);\n        }\n        return -EINVAL;\n    }\n\n    /* Probe: call metal_bus_find with NULL result pointer and log the return value.\n       In the provided metal_bus_find implementation the function only returns 0 when\n       result is non-NULL (it checks strcmp(...) == 0 && result). Thus this call\n       can never return 0, making the subsequent -EEXIST path unreachable. */\n    find_ret = metal_bus_find(bus->name, NULL);\n    if (logf != NULL) {\n        fprintf(logf, \"metal_bus_register: metal_bus_find(\\\"%s\\\", NULL) returned %d\\n\",\n                bus->name, find_ret);\n    }\n\n    if (find_ret == 0)\n    {\n        if (logf != NULL) {\n            fprintf(logf, \"metal_bus_register: existing bus detected, returning -EEXIST\\n\");\n            fclose(logf);\n        }\n        return -EEXIST;\n    }\n\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    if (logf != NULL) {\n        fprintf(logf, \"metal_bus_register: registered bus \\\"%s\\\" successfully\\n\", bus->name);\n        fclose(logf);\n    }\n\n    return 0;\n}\n"
}