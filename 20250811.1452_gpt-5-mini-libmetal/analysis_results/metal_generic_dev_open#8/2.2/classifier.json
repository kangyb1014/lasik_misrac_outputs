{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/66.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_generic_dev_open:\nint metal_generic_dev_sys_open(struct metal_device *dev)\n{\n\t(void)dev;\n\treturn 0;\n}\n...\nextern struct metal_state _metal\n</additional code>\nJudge whether the above metal_generic_dev_open code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The void cast of the unused parameter 'bus' is executed but has no effect on program behaviour. Removing the statement '(void)bus;' would not change the observable behaviour of the function, so that statement constitutes dead code under MISRA C 2023 Rule 2.2.",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n#include <errno.h>\n\nstruct metal_list {\n    struct metal_list *next;\n};\n\nstruct metal_bus {\n    int dummy;\n};\n\nstruct metal_device {\n    struct metal_list node;\n    const char *name;\n};\n\nstruct metal_state {\n    struct {\n        struct metal_list generic_device_list; /* head (may be NULL.next if empty) */\n    } common;\n};\n\n/* global state - defined here so this translation unit is self-contained */\nstruct metal_state _metal = { { { NULL } } };\n\nstatic inline struct metal_device *metal_container_of(struct metal_list *node)\n{\n    return (struct metal_device *)((char *)node - offsetof(struct metal_device, node));\n}\n\nint metal_generic_dev_sys_open(struct metal_device *dev)\n{\n    (void)dev;\n    return 0;\n}\n\n/* Probe helper: append log lines describing control flow and state. */\nstatic void probe_log(const char *phase, const void *bus_ptr, const char *dev_name, const char *current)\n{\n    FILE *f = fopen(\"/tmp/logs/66.txt\", \"a\");\n    if (f != NULL) {\n        /* print essential control path and state info */\n        fprintf(f, \"phase=%s bus=%p target_dev=\\\"%s\\\" current=%s\\n\",\n                phase, bus_ptr, (dev_name != NULL) ? dev_name : \"(null)\",\n                (current != NULL) ? current : \"(none)\");\n        fclose(f);\n    }\n}\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n                           struct metal_device **device)\n{\n    struct metal_list *node;\n    struct metal_device *dev;\n\n    /* The following cast-to-void is the operation under examination: it is executed\n       but has no effect on program behaviour. Its presence constitutes dead code. */\n    (void)bus;\n\n    /* Log after the cast to make it observable in the trace */\n    probe_log(\"after_void_cast\", bus, dev_name, NULL);\n\n    /* Iterate the simple singly-linked list of devices starting from the head.next */\n    node = _metal.common.generic_device_list.next;\n    while (node != NULL) {\n        dev = metal_container_of(node);\n\n        /* Log each inspected device name for the control path */\n        probe_log(\"inspect_node\", bus, dev_name, dev->name);\n\n        if (strcmp(dev->name, dev_name) == 0) {\n            *device = dev;\n            probe_log(\"match_found\", bus, dev_name, dev->name);\n            return metal_generic_dev_sys_open(dev);\n        }\n\n        node = node->next;\n    }\n\n    probe_log(\"not_found\", bus, dev_name, NULL);\n    return -ENODEV;\n}\n"
}