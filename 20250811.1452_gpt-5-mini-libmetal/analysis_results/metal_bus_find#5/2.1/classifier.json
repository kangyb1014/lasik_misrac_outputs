{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/41.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\n#define metal_list_for_each(list, node) for((node)=(list)->next;(node)!=(list);(node)=(node)->next)\n...\n#define metal_container_of(ptr, structure, member) (void*)((uintptr_t)(ptr)-metal_offset_of(structure,member))\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\nJudge whether the above metal_bus_find code violates the rule 2.1 or not.",
  "is_rule_violated": false,
  "scenario": "No violation: every statement in metal_bus_find is reachable during normal execution. The for loop iterates over the list nodes; for each node the strcmp and the conditional check (strcmp(...) == 0 && result) can both evaluate to true or false depending on runtime inputs (list contents and the result pointer). If a matching bus is found and result is non-NULL the function returns 0; if result is NULL or no match is found the loop continues and the final return -ENOENT executes. There is no statically unreachable code (no dead code paths, no constants that make branches always false), so Rule 2.1 is not violated.",
  "test_code": ""
}