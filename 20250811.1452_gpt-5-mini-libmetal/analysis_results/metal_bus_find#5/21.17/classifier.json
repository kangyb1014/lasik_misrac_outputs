{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nJudge whether the above metal_bus_find code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "Violation occurs when strcmp(bus->name, name) reads past the end of bus->name (or past the end of name) because one of the strings is not NUL-terminated or the pointer is invalid/NULL. For example, if struct metal_bus contains a fixed-size name array that is completely filled (no terminating '\\0'), strcmp will continue reading memory beyond the array bounds, causing an out-of-bounds access and undefined behavior.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append diagnostic records to the log file. */\nstatic void metal_bus_find_probe(const char *stage, const char *name, const void *bus_ptr, const void *bus_name_ptr, int cmp_result)\n{\n    FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n    if (f != NULL) {\n        /* Record control stage, pointer identities and comparison outcome. */\n        (void) fprintf(f, \"stage=%s name_ptr=%p bus_ptr=%p bus->name_ptr=%p cmp_result=%d\\n\",\n                       stage, (const void *) name, bus_ptr, bus_name_ptr, cmp_result);\n        (void) fclose(f);\n    }\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n\n        /* Log pointer state before calling strcmp. Do not attempt to read string contents here\n           to avoid introducing additional out-of-bounds accesses beyond those already present\n           in the original strcmp usage. */\n        metal_bus_find_probe(\"before_cmp\", name, bus, (bus != NULL) ? (const void *) bus->name : NULL, 0);\n\n        /* Original behavior retained: this strcmp can access beyond the provided buffers if\n           either 'bus->name' or 'name' is not a NUL-terminated string. That is the potential\n           MISRA Rule 21.17 violation this probe is intended to observe. */\n        int cmp = strcmp(bus->name, name);\n\n        if (cmp == 0 && result) {\n            metal_bus_find_probe(\"match\", name, bus, (const void *) bus->name, cmp);\n            *result = bus;\n            return 0;\n        }\n\n        metal_bus_find_probe(\"after_cmp_no_match\", name, bus, (const void *) bus->name, cmp);\n    }\n\n    metal_bus_find_probe(\"not_found\", name, NULL, NULL, 0);\n    return -ENOENT;\n}\n"
}