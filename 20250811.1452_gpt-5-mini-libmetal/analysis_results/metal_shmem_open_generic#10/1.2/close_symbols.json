{
  "user_message": "Target function code is:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'metal_shmem_open_generic': {'callees': ['metal_io_region_size'], 'callers': ['metal_shmem_open']}, 'metal_io_region_size': {'callees': [], 'callers': ['metal_shmem_open_generic']}, 'metal_shmem_open': {'callees': ['metal_shmem_open_generic', 'metal_open', 'metal_shmem_try_map'], 'callers': ['shmem_child']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "metal_container_of (macro definition)",
    "metal_list_for_each (macro definition)",
    "_metal (global variable) and its type (struct that contains common.generic_shmem_list)",
    "struct metal_generic_shmem (type definition; must show members: name, io, node)",
    "struct metal_list (type definition)",
    "struct metal_io_region (type definition)",
    "metal_io_region_size (function prototype/definition)",
    "strcmp (declaration from <string.h>)",
    "ENOENT (macro from <errno.h>)",
    "offsetof (macro from <stddef.h>)"
  ],
  "explanation": "For checking use of language extensions you must inspect all macros, types and globals referenced/expanded by the function so you can see whether any non-standard compiler features are used. Specifically:\n\n- metal_container_of (macro definition): container_of macros frequently use GCC extensions (typeof/__typeof__ or statement-expressions '({ ... })'). You must examine its exact definition to determine if a compiler extension is used.\n- metal_list_for_each (macro definition): the loop macro may hide non-standard constructs (e.g., use of typeof or unusual for-loop variable declarations). Inspect its expansion.\n- _metal (global variable) and its type (the struct that contains common.generic_shmem_list): the code accesses _metal.common.generic_shmem_list. You need the definition of _metal and its type to see whether anonymous structures/unions or other extensions are used in that declaration.\n- struct metal_generic_shmem (type definition; members name, io, node): the function accesses shmem->name, shmem->io and uses metal_container_of to obtain shmem from node. The struct layout and member declarations must be checked for extensions (anonymous members, bitfields with unusual types, etc.).\n- struct metal_list (type definition): used as the list node type and loop variable; inspect for any non-standard member declarations or macros controlling its definition.\n- struct metal_io_region (type definition): metal_io_region_size is called with &shmem->io; the type definition may contain extensions or use macros that expand to extensions.\n- metal_io_region_size (function prototype/definition): include to confirm it is a standard C function and to see if its declaration uses any extension-specific attributes or macros.\n- strcmp (declaration from <string.h>): include its declaration to ensure no non-standard redefinition or macro overrides are present in the project headers.\n- ENOENT (macro from <errno.h>): included because the function returns -ENOENT; verify its definition is standard and not redefined via extensions.\n- offsetof (macro from <stddef.h>): frequently used inside container_of implementations; inspect its use or any alternative implementation that might rely on extensions.\n\nProviding these symbols (their definitions/declarations) lets the analyzer expand macros and inspect type and global declarations to detect any usage of compiler language extensions (e.g., typeof/__typeof__, statement-expressions, anonymous structs/unions as extensions in some compilers, or other non-standard constructs)."
}