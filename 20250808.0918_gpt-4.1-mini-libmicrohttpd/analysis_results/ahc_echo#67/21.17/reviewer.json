{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation occurs if the string handling functions like strcmp or strlen access memory beyond the bounds of their pointer parameters. In the ahc_echo function, strcmp and strlen are used on the method, BUSYPAGE, and param->response_page pointers. If any of these pointers do not point to properly null-terminated strings or point outside allocated buffers, it could cause out-of-bounds access violating MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  FILE *log_file = fopen(\"/tmp/logs/543.txt\", \"a\");\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"ahc_echo called with method: %s\\n\", method);\n  }\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    if (log_file != NULL)\n    {\n      fprintf(log_file, \"Unexpected method: %s\\n\", method);\n      fclose(log_file);\n    }\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always too busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      if (log_file != NULL)\n      {\n        fprintf(log_file, \"Busy page response triggered for POST\\n\");\n      }\n      /* BUSYPAGE should be defined or handle this accordingly */\n      extern const char BUSYPAGE[];\n      response =\n        MHD_create_response_from_buffer (strlen (BUSYPAGE),\n                                         (void *) BUSYPAGE,\n                                         MHD_RESPMEM_PERSISTENT);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      if (log_file != NULL)\n      {\n        fprintf(log_file, \"Response queued, returning %d\\n\", (int)ret);\n        fclose(log_file);\n      }\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Normal response with param->response_page length: %zu\\n\", strlen(param->response_page));\n  }\n\n  response =\n    MHD_create_response_from_buffer (strlen (param->response_page),\n                                     (void *) param->response_page,\n                                     MHD_RESPMEM_PERSISTENT);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Final response queued, returning %d\\n\", (int)ret);\n    fclose(log_file);\n  }\n\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 21.17 forbids accesses beyond the bounds of objects when using string handling functions from <string.h>. The agent A correctly identifies that if the pointers passed to strcmp or strlen (such as method, BUSYPAGE, or param->response_page) are not null-terminated strings or are invalid, this could lead to out-of-bounds access, violating Rule 21.17. However, MISRA rules generally require that the code ensure validity and proper termination of string arguments when calling these functions. The ahc_echo function does not itself guarantee that these pointers are valid and properly nul-terminated, nor does it check them. Hence, without such guarantees, the usage of strcmp and strlen could violate Rule 21.17. This is a genuine potential violation unless the code's context guarantees valid strings. The test code that attempted to log these string usages failed to compile, so it offers no evidence but does not invalidate the fundamental concern. Therefore, the agent A's report of a possible Rule 21.17 violation due to potential out-of-bounds access by string functions is correct."
}