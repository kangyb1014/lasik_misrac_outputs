{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the function ahc_echo, the parameter 'void **req_cls' is modified by assigning '*req_cls = &aptr;' and later '*req_cls = NULL;'. Modifying the pointer parameter itself (i.e., changing the address it holds) violates MISRA C 2023 Rule 17.8, which states that a function parameter should not be modified. Although the object pointed to by the pointer parameter can be modified, the pointer parameter itself must remain unchanged. Hence, this is a violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Connection {};\nstruct MHD_Response {};\nstatic const char BUSYPAGE[] = \"Busy\";\nstruct MHD_Response *\nMHD_create_response_from_buffer_static(size_t size, const void *buffer)\n{\n  /* Just return a non-null dummy pointer */\n  (void)size;\n  (void)buffer;\n  static struct MHD_Response dummy_response;\n  return &dummy_response;\n}\nenum MHD_Result\nMHD_queue_response(struct MHD_Connection *connection, unsigned int status_code, struct MHD_Response *response)\n{\n  (void)connection;\n  (void)status_code;\n  (void)response;\n  return MHD_YES;\n}\nvoid MHD_destroy_response(struct MHD_Response *response)\n{\n  (void)response;\n}\n\nstatic enum MHD_Result\nahc_echo(void *cls,\n         struct MHD_Connection *connection,\n         const char *url,\n         const char *method,\n         const char *version,\n         const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *)cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  FILE *log_file = fopen(\"/tmp/logs/541.txt\", \"a\");\n  if (log_file != NULL) {\n    fprintf(log_file, \"Entered ahc_echo with method = %s\\n\", method);\n  }\n\n  (void)cls;\n  (void)url;\n  (void)version;\n  (void)upload_data;\n  (void)upload_data_size;\n\n  if ((0 != strcmp(method, \"GET\")) && (0 != strcmp(method, \"POST\"))) {\n    if (log_file != NULL) {\n      fprintf(log_file, \"Unexpected method, returning MHD_NO\\n\");\n      fclose(log_file);\n    }\n    return MHD_NO; /* unexpected method */\n  }\n\n  if (&aptr != *req_cls) {\n    if (log_file != NULL) {\n      fprintf(log_file, \"*req_cls is modified from %p to %p\\n\", (void*)*req_cls, (void*)&aptr);\n      fclose(log_file);\n    }\n    *req_cls = &aptr;  /* Pointer parameter modified intentionally to preserve logic */\n\n    if (0 == strcmp(method, \"POST\")) {\n      response = MHD_create_response_from_buffer_static(strlen(BUSYPAGE), (const void *)BUSYPAGE);\n      ret = MHD_queue_response(connection, MHD_HTTP_SERVICE_UNAVAILABLE, response);\n      MHD_destroy_response(response);\n      return ret;\n    }\n  }\n\n  if (log_file == NULL) {\n    log_file = fopen(\"/tmp/logs/541.txt\", \"a\");\n  }\n  if (log_file != NULL) {\n    fprintf(log_file, \"Resetting *req_cls to NULL\\n\");\n    fclose(log_file);\n  }\n\n  *req_cls = NULL; /* Pointer parameter modified intentionally to preserve logic */\n\n  response = MHD_create_response_from_buffer_static(strlen(param->response_page), (const void *)param->response_page);\n  ret = MHD_queue_response(connection, MHD_HTTP_OK, response);\n  MHD_destroy_response(response);\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 17.8 states that a function parameter should not be modified. In the case of pointer parameters, this means the pointer itself (the parameter) must not be changed to point elsewhere, but the object it points to may be modified. Here, the parameter \"req_cls\" is a pointer to pointer: void **req_cls. The code modifies the object pointed to by req_cls (that is, *req_cls), not req_cls itself. Assignments such as \"*req_cls = &aptr;\" and \"*req_cls = NULL;\" modify the data pointed to by req_cls, not req_cls itself. Hence, the parameter req_cls is not being modified; the object it points to is modified, which is allowed by MISRA Rule 17.8. Therefore, the report from agent A claiming a violation is incorrect because it misunderstands the distinction between modifying the pointer parameter itself and the pointee. The code complies with Rule 17.8 as the pointer parameter \"req_cls\" itself remains unchanged (the address stored in req_cls). Only the value it points to (*req_cls) is changed, which is compliant."
}