{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/27.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ws_receive_frame:\n#define WS_FIN 128\n...\n#define WS_OPCODE_TEXT_FRAME 1\n...\n#define WS_OPCODE_CON_CLOSE_FRAME 8\n</additional code>\nJudge whether the above ws_receive_frame code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The pointer parameter 'unsigned char *frame' points to non-const data, even though the function 'ws_receive_frame' does not modify the data pointed to by 'frame'. Therefore, 'frame' should be a pointer to const-qualified type ('const unsigned char *frame') to comply with MISRA C 2023 Rule 8.13.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n\nstatic unsigned char *\nws_receive_frame(unsigned char *frame, ssize_t *length, int *type)\n{\n  FILE *log = fopen(\"/tmp/logs/27.txt\", \"a\");\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if(frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    fprintf(log, \"Entered text frame processing. flength= %u\\n\", flength);\n    if(flength == 126)\n    {\n      idx_first_mask = 4;\n      fprintf(log, \"Extended payload length indicator 126 detected. idx_first_mask= %u\\n\", idx_first_mask);\n    }\n    else if(flength == 127)\n    {\n      idx_first_mask = 10;\n      fprintf(log, \"Extended payload length indicator 127 detected. idx_first_mask= %u\\n\", idx_first_mask);\n    }\n    idx_first_data = (unsigned char)(idx_first_mask + 4);\n    data_length = (size_t)*length - idx_first_data;\n    fprintf(log, \"Data length calculated as %zu\\n\", data_length);\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc(data_length + 1);\n    if(NULL != msg)\n    {\n      for(i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t)data_length;\n      msg[j] = '\\0';\n      fprintf(log, \"Message extracted and unmasked. Length= %zd\\n\", *length);\n    }\n    else\n    {\n      fprintf(log, \"Memory allocation failed for message.\\n\");\n    }\n  }\n  else if(frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n    fprintf(log, \"Close frame received.\\n\");\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    fprintf(log, \"Other frame received with type= %d\\n\", *type);\n  }\n\n  fclose(log);\n  return msg;\n}\n\n/* Definitions as given */\n#define WS_FIN 128\n#define WS_OPCODE_TEXT_FRAME 1\n#define WS_OPCODE_CON_CLOSE_FRAME 8\n"
}