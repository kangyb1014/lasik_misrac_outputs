{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/26.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ws_receive_frame:\n#define WS_FIN 128\n...\n#define WS_OPCODE_TEXT_FRAME 1\n...\n#define WS_OPCODE_CON_CLOSE_FRAME 8\n</additional code>\nJudge whether the above ws_receive_frame code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The variable 'mask' is assigned the value 'frame[1]' but is never used afterwards. This is an example of dead code, as the assignment operation does not affect the program behavior and could be removed without any change.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#define WS_FIN 128\n#define WS_OPCODE_TEXT_FRAME 1\n#define WS_OPCODE_CON_CLOSE_FRAME 8\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  FILE *log = fopen(\"/tmp/logs/26.txt\", \"a\");\n  if (log != NULL) {\n    fprintf(log, \"Entering ws_receive_frame\\n\");\n  }\n\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    if (log != NULL) {\n      fprintf(log, \"mask assigned with frame[1]=%u at line %d\\n\", mask, __LINE__);\n    }\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n      if (log != NULL) {\n        fprintf(log, \"flength==126, idx_first_mask set to 4 at line %d\\n\", __LINE__);\n      }\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n      if (log != NULL) {\n        fprintf(log, \"flength==127, idx_first_mask set to 10 at line %d\\n\", __LINE__);\n      }\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    if (log != NULL) {\n      fprintf(log, \"idx_first_data calculated as %u at line %d\\n\", idx_first_data, __LINE__);\n    }\n    data_length = (size_t) *length - idx_first_data;\n    if (log != NULL) {\n      fprintf(log, \"data_length computed as %zu at line %d\\n\", data_length, __LINE__);\n    }\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (msg != NULL)\n    {\n      if (log != NULL) {\n        fprintf(log, \"Allocated message buffer of size %zu at line %d\\n\", data_length+1, __LINE__);\n      }\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n        if (log != NULL) {\n          fprintf(log, \"msg[%d] decoded as %u at index frame[%d] ^ masks[%d] at line %d\\n\", j, msg[j], i, j % 4, __LINE__);\n        }\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n      if (log != NULL) {\n        fprintf(log, \"Final message length set to %zd at line %d\\n\", *length, __LINE__);\n        fprintf(log, \"Message null-terminated at position %d at line %d\\n\", j, __LINE__);\n      }\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n    if (log != NULL) {\n      fprintf(log, \"Received CON_CLOSE_FRAME at line %d\\n\", __LINE__);\n    }\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    if (log != NULL) {\n      fprintf(log, \"Other frame type received: %d at line %d\\n\", *type, __LINE__);\n    }\n  }\n\n  if (log != NULL) {\n    fprintf(log, \"Exiting ws_receive_frame\\n\");\n    fclose(log);\n  }\n\n  return msg;\n}\n"
}