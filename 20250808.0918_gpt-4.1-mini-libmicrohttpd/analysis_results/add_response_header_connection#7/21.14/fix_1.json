{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len;\n  size_t old_value_len;\n  size_t buf_size;\n  size_t norm_len;\n  char *buf;\n  struct MHD_HTTP_Res_Header *hdr;\n  bool value_has_close;\n  bool already_has_close;\n  size_t pos = 0;\n\n  FILE *log = fopen(\"/tmp/logs/62.txt\", \"a\");\n  if (log != NULL) fprintf(log, \"add_response_header_connection called\\n\");\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n  {\n    if (log != NULL) fprintf(log, \"Input value contains CR or LF, returning MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    int cmp_res = memcmp (hdr->value, \"close\", 5);\n    if (log != NULL) fprintf(log, \"memcmp result: %%d\\n\", cmp_res);\n    mhd_assert (already_has_close == (0 == cmp_res));\n    mhd_assert (NULL != hdr);\n    if (log != NULL) fprintf(log, \"already_has_close: %%d\\n\", already_has_close);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    if (log != NULL) fprintf(log, \"No existing connection header\\n\");\n  }\n\n  // Rest of the function remains unchanged\n\n  if (log) fclose(log);\n  // Placeholder: return to avoid incomplete code\n  return MHD_NO;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nresponse.c: In function 'add_response_header_connection':\nresponse.c:368:35: warning: too many arguments for format [-Wformat-extra-args]\n  368 |     if (log != NULL) fprintf(log, \"memcmp result: %%d\\n\", cmp_res);\n      |                                   ^~~~~~~~~~~~~~~~~~~~~~\nresponse.c:371:35: warning: too many arguments for format [-Wformat-extra-args]\n  371 |     if (log != NULL) fprintf(log, \"already_has_close: %%d\\n\", already_has_close);\n      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf4lcgqh4/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of add_response_header_connection as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len;\n  size_t old_value_len;\n  size_t buf_size;\n  size_t norm_len;\n  char *buf;\n  struct MHD_HTTP_Res_Header *hdr;\n  bool value_has_close;\n  bool already_has_close;\n  size_t pos = 0;\n\n  FILE *log = fopen(\"/tmp/logs/62.txt\", \"a\");\n  if (log != NULL) fprintf(log, \"add_response_header_connection called\\n\");\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n  {\n    if (log != NULL) fprintf(log, \"Input value contains CR or LF, returning MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    int cmp_res = memcmp (hdr->value, \"close\", 5);\n    if (log != NULL) fprintf(log, \"memcmp result: %d\\n\", cmp_res);\n    mhd_assert (already_has_close == (0 == cmp_res));\n    mhd_assert (NULL != hdr);\n    if (log != NULL) fprintf(log, \"already_has_close: %d\\n\", already_has_close);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    if (log != NULL) fprintf(log, \"No existing connection header\\n\");\n  }\n\n  // Rest of the function remains unchanged\n\n  if (log) fclose(log);\n  // Placeholder: return to avoid incomplete code\n  return MHD_NO;\n}\n",
  "explanation": "The build errors were caused by incorrect format specifiers in the fprintf calls. Specifically, the format string used \"%%d\" instead of \"%d\". In C, \"%%\" prints a percent sign, not a format specifier. Thus, the extra argument to fprintf caused warnings about too many arguments for format. I fixed this by replacing \"%%d\" with \"%d\" in both fprintf calls to correctly print the integer variables cmp_res and already_has_close. This change ensures the code compiles without warnings and preserves the original logic."
}