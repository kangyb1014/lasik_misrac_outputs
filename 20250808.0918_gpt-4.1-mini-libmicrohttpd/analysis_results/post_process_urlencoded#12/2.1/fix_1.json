{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nnstatic FILE *log_file = NULL;\nvoid abort(void)\n{\n    if (!log_file) log_file = fopen(\"/tmp/logs/97.txt\", \"a\");\n    if (log_file) {\n        fprintf(log_file, \"abort() called - unreachable code reached!\\n\");\n        fflush(log_file);\n    }\n    exit(1);\n}\nsize_t MHD_http_unescape(char *val) { (void)val; return 0; }\n\nstatic void process_value(struct MHD_PostProcessor *pp,\n                          const char *value_start,\n                          const char *value_end,\n                          const char *last_escape) {\n    (void)pp; (void)value_start; (void)value_end; (void)last_escape;\n}\nstatic enum MHD_Result\npost_process_urlencoded(struct MHD_PostProcessor *pp,\n                        const char *post_data,\n                        size_t post_data_len)\n{\n  char *kbuf = (char *) &pp[1];\n  size_t poff;\n  const char *start_key = NULL;\n  const char *end_key = NULL;\n  const char *start_value = NULL;\n  const char *end_value = NULL;\n  const char *last_escape = NULL;\n\n  mhd_assert (PP_Callback != pp->state);\n\n  poff = 0;\n  while (((poff < post_data_len) || (pp->state == PP_Callback)) && (pp->state != PP_Error))\n  {\n    switch (pp->state)\n    {\n    case PP_Error:\n      /* clearly impossible as per while loop invariant */\n      abort();\n      break; /* Unreachable */\n    case PP_Init:\n      /* Normal logic omitted for brevity, unchanged */\n      pp->state = PP_Done; poff++; break;\n    case PP_ProcessKey:\n      /* Normal logic omitted for brevity, unchanged */\n      poff++; break;\n    case PP_ProcessValue:\n      /* Normal logic omitted for brevity, unchanged */\n      poff++; break;\n    case PP_Done:\n      pp->state = PP_Error; /* forces next iteration to abort */\n      break;\n    case PP_Callback:\n      /* Normal logic omitted for brevity, unchanged */\n      pp->state = PP_Init;\n      break;\n    default:\n      abort();\n    }\n  }\n  mhd_assert (PP_Callback != pp->state);\n  if (PP_Error == pp->state)\n  {\n    /* State in error, returning failure */\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\npostprocessor.c:145:1: error: unknown type name 'nstatic'\n  145 | nstatic FILE *log_file = NULL;\n      | ^~~~~~~\npostprocessor.c:145:14: error: expected '=', ',', ';', 'asm' or '__attribute__' before '*' token\n  145 | nstatic FILE *log_file = NULL;\n      |              ^\npostprocessor.c: In function 'abort':\npostprocessor.c:148:10: error: 'log_file' undeclared (first use in this function); did you mean 'flockfile'?\n  148 |     if (!log_file) log_file = fopen(\"/tmp/logs/97.txt\", \"a\");\n      |          ^~~~~~~~\n      |          flockfile\npostprocessor.c:148:10: note: each undeclared identifier is reported only once for each function it appears in\nmake[3]: *** [Makefile:2210: libmicrohttpd_la-postprocessor.lo] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of post_process_urlencoded as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static FILE *log_file = NULL;\nvoid abort(void)\n{\n    if (!log_file) log_file = fopen(\"/tmp/logs/97.txt\", \"a\");\n    if (log_file) {\n        fprintf(log_file, \"abort() called - unreachable code reached!\\n\");\n        fflush(log_file);\n    }\n    exit(1);\n}\n\nsize_t MHD_http_unescape(char *val) { (void)val; return 0; }\n\nstatic void process_value(struct MHD_PostProcessor *pp,\n                          const char *value_start,\n                          const char *value_end,\n                          const char *last_escape) {\n    (void)pp; (void)value_start; (void)value_end; (void)last_escape;\n}\n\nstatic enum MHD_Result\npost_process_urlencoded(struct MHD_PostProcessor *pp,\n                        const char *post_data,\n                        size_t post_data_len)\n{\n  char *kbuf = (char *) &pp[1];\n  size_t poff;\n  const char *start_key = NULL;\n  const char *end_key = NULL;\n  const char *start_value = NULL;\n  const char *end_value = NULL;\n  const char *last_escape = NULL;\n\n  mhd_assert (PP_Callback != pp->state);\n\n  poff = 0;\n  while (((poff < post_data_len) || (pp->state == PP_Callback)) && (pp->state != PP_Error))\n  {\n    switch (pp->state)\n    {\n    case PP_Error:\n      /* clearly impossible as per while loop invariant */\n      abort();\n      break; /* Unreachable */\n    case PP_Init:\n      /* Normal logic omitted for brevity, unchanged */\n      pp->state = PP_Done; poff++; break;\n    case PP_ProcessKey:\n      /* Normal logic omitted for brevity, unchanged */\n      poff++; break;\n    case PP_ProcessValue:\n      /* Normal logic omitted for brevity, unchanged */\n      poff++; break;\n    case PP_Done:\n      pp->state = PP_Error; /* forces next iteration to abort */\n      break;\n    case PP_Callback:\n      /* Normal logic omitted for brevity, unchanged */\n      pp->state = PP_Init;\n      break;\n    default:\n      abort();\n    }\n  }\n  mhd_assert (PP_Callback != pp->state);\n  if (PP_Error == pp->state)\n  {\n    /* State in error, returning failure */\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n",
  "explanation": "The compilation error was caused by the incorrect token 'nstatic' instead of 'static' at the beginning of the first line. I fixed the typo by removing the 'n' so that the declaration reads 'static FILE *log_file = NULL;'. This allows the compiler to correctly parse the declaration and recognize the 'log_file' variable. No other changes were necessary since the rest of the code logic and symbols were correct. This fixes all the errors related to the unknown type and undeclared identifiers, enabling successful compilation while preserving the original logic."
}