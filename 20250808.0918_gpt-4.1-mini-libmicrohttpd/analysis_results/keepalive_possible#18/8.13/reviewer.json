{
  "user_message": "An agent A claimed that the following keepalive_possible code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer..\n</misra_rule>\n<target_code>\nHere is the original code of keepalive_possible.\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the function keepalive_possible, pointers 'c' and 'r' alias to structures from which data is read but not modified, and they are not declared as pointers to const-qualified types. Since the function does not modify the objects pointed to by these pointers, the pointers should be declared to point to const-qualified types to adhere to MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible(const struct MHD_Connection *const connection)\n{\n  /* Removed logging to file to avoid dependency on stdio and potential issues during compilation/build */\n\n  const struct MHD_Connection *const c = connection; /**< a short alias */\n  const struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  if (r == NULL) {\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive) {\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  if (NULL != r->upgrade_handler)\n  {\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif\n\n  if ((c->read_closed) || (c->discard_request))\n  {\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (!MHD_IS_HTTP_VER_SUPPORTED(c->rq.http_ver))\n  {\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_lookup_header_s_token_ci(c, MHD_HTTP_HEADER_CONNECTION, \"close\"))\n  {\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci(connection, MHD_HTTP_HEADER_CONNECTION, \"Keep-Alive\"))\n    {\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT(c->rq.http_ver))\n  {\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  return MHD_CONN_MUST_CLOSE;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The rule 8.13 of MISRA C 2023 suggests that pointers should point to const-qualified types whenever possible, meaning if the function does not modify the data pointed to, the pointer should be to const-qualified data. In the original code, pointers 'c' and 'r' are aliases to the objects passed in through the 'connection' pointer or its members. The function keepalive_possible reads from these objects but does not modify them, so ideally these pointers should be to const-qualified types (i.e., const struct MHD_Connection *const c and const struct MHD_Response *const r).\n\nHowever, the original function's parameter is 'struct MHD_Connection *connection' (non-const pointer). Changing this to 'const struct MHD_Connection *connection' as per the test code would be the proper fix, but that depends on whether the function or other parts of code actually modify the object. If no modification is performed, changing the parameter and internal aliases to const-qualified pointers is appropriate.\n\nThe test code attempts this change but fails to compile, likely because either other code or the function\u2019s interface expects a non-const pointer, or because other code paths modify the pointed-to data (which would violate the const).\n\nIn summary, the report by agent A that the pointers should point to const-qualified types because the function does not modify the data is correct with respect to the intent of Rule 8.13. However, practical issues with the function interface or usage may prevent adjusting the parameter to const pointer, which is recognized by the failed compilation of the test code. Yet, the original code does violate the spirit of Rule 8.13 because it does not use const-qualified pointers when the data are not modified.\n\nTherefore, the report is correct."
}