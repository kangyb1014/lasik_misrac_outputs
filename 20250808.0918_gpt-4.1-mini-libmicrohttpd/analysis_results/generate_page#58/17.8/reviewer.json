{
  "user_message": "An agent A claimed that the following generate_page code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of generate_page.\n```c\nstatic enum MHD_Result\ngenerate_page (void *cls,\n               struct MHD_Connection *connection,\n               const char *url,\n               const char *method,\n               const char *version,\n               const char *upload_data,\n               size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (url, \"/\"))\n  {\n    /* should be file download */\n#ifdef MHD_HAVE_LIBMAGIC\n    char file_data[MAGIC_HEADER_SIZE];\n    ssize_t got;\n#endif /* MHD_HAVE_LIBMAGIC */\n    const char *mime;\n\n    if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n         (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n      return MHD_NO;    /* unexpected method (we're not polite...) */\n    fd = -1;\n    if ( (NULL == strstr (&url[1], \"..\")) &&\n         ('/' != url[1]) )\n    {\n      fd = open (&url[1], O_RDONLY);\n      if ( (-1 != fd) &&\n           ( (0 != fstat (fd, &buf)) ||\n             (! S_ISREG (buf.st_mode)) ) )\n      {\n        (void) close (fd);\n        fd = -1;\n      }\n    }\n    if (-1 == fd)\n      return MHD_queue_response (connection,\n                                 MHD_HTTP_NOT_FOUND,\n                                 file_not_found_response);\n#ifdef MHD_HAVE_LIBMAGIC\n    /* read beginning of the file to determine mime type  */\n    got = read (fd, file_data, sizeof (file_data));\n    (void) lseek (fd, 0, SEEK_SET);\n    if (0 < got)\n      mime = magic_buffer (magic, file_data, (size_t) got);\n    else\n#endif /* MHD_HAVE_LIBMAGIC */\n    mime = NULL;\n    {\n      /* Set mime-type by file-extension in some cases */\n      const char *ldot = strrchr (&url[1], '.');\n\n      if (NULL != ldot)\n      {\n        if (0 == strcasecmp (ldot,\n                             \".html\"))\n          mime = \"text/html\";\n        if (0 == strcasecmp (ldot,\n                             \".css\"))\n          mime = \"text/css\";\n        if (0 == strcasecmp (ldot,\n                             \".css3\"))\n          mime = \"text/css\";\n        if (0 == strcasecmp (ldot,\n                             \".js\"))\n          mime = \"application/javascript\";\n      }\n\n    }\n\n    if (NULL == (response = MHD_create_response_from_fd ((size_t) buf.st_size,\n                                                         fd)))\n    {\n      /* internal error (i.e. out of memory) */\n      (void) close (fd);\n      return MHD_NO;\n    }\n\n    /* add mime type if we had one */\n    if (NULL != mime)\n      (void) MHD_add_response_header (response,\n                                      MHD_HTTP_HEADER_CONTENT_TYPE,\n                                      mime);\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    return ret;\n  }\n\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* upload! */\n    struct UploadContext *uc = *req_cls;\n\n    if (NULL == uc)\n    {\n      if (NULL == (uc = malloc (sizeof (struct UploadContext))))\n        return MHD_NO; /* out of memory, close connection */\n      memset (uc, 0, sizeof (struct UploadContext));\n      uc->fd = -1;\n      uc->connection = connection;\n      uc->pp = MHD_create_post_processor (connection,\n                                          64 * 1024 /* buffer size */,\n                                          &process_upload_data, uc);\n      if (NULL == uc->pp)\n      {\n        /* out of memory, close connection */\n        free (uc);\n        return MHD_NO;\n      }\n      *req_cls = uc;\n      return MHD_YES;\n    }\n    if (0 != *upload_data_size)\n    {\n      if (NULL == uc->response)\n        (void) MHD_post_process (uc->pp,\n                                 upload_data,\n                                 *upload_data_size);\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* end of upload, finish it! */\n    MHD_destroy_post_processor (uc->pp);\n    uc->pp = NULL;\n    if (-1 != uc->fd)\n    {\n      close (uc->fd);\n      uc->fd = -1;\n    }\n    if (NULL != uc->response)\n    {\n      return MHD_queue_response (connection,\n                                 MHD_HTTP_FORBIDDEN,\n                                 uc->response);\n    }\n    else\n    {\n      update_directory ();\n      return return_directory_response (connection);\n    }\n  }\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    return return_directory_response (connection);\n  }\n\n  /* unexpected request, refuse */\n  return MHD_queue_response (connection,\n                             MHD_HTTP_FORBIDDEN,\n                             request_refused_response);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the function generate_page, the pointer parameter upload_data_size is modified by assigning '*upload_data_size = 0;' in the block handling the POST method when processing upload data.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nenum MHD_ValueKind {};\nstruct MHD_Connection {};\nstruct MHD_PostProcessor {};\nenum MHD_Result\nMHD_queue_response(struct MHD_Connection *connection, unsigned int status_code, struct MHD_Response *response) {\n    (void)connection; (void)status_code; (void)response;\n    return MHD_YES;\n}\nstruct MHD_PostProcessor *\nMHD_create_post_processor(struct MHD_Connection *connection, size_t buffer_size,\n                           enum MHD_Result (*iter)(void *, enum MHD_ValueKind, const char *, const char *, const char *, const char *, const char *, uint64_t, size_t),\n                           void *iter_cls) {\n    (void)connection; (void)buffer_size; (void)iter; (void)iter_cls;\n    return malloc(sizeof(struct MHD_PostProcessor));\n}\nenum MHD_Result\nMHD_destroy_post_processor(struct MHD_PostProcessor *pp) {\n    free(pp);\n    return MHD_YES;\n}\nenum MHD_Result\nMHD_post_process(struct MHD_PostProcessor *pp, const char *post_data, size_t post_data_len) {\n    (void)pp; (void)post_data; (void)post_data_len;\n    return MHD_YES;\n}\nvoid\nMHD_destroy_response(struct MHD_Response *response) {\n    (void)response;\n}\n\nenum MHD_Result\nprocess_upload_data(void *cls, enum MHD_ValueKind kind,\n                    const char *key, const char *filename, const char *content_type,\n                    const char *transfer_encoding, const char *data, uint64_t off, size_t size) {\n    /* Stub function for post processor callback */\n    (void)cls; (void)kind; (void)key; (void)filename; (void)content_type;\n    (void)transfer_encoding; (void)data; (void)off; (void)size;\n    return MHD_YES;\n}\nenum MHD_Result\ngenerate_page(void *cls,\n              struct MHD_Connection *connection,\n              const char *url,\n              const char *method,\n              const char *version,\n              const char *upload_data,\n              size_t *upload_data_size, void **req_cls) {\n    FILE *log = fopen(\"/tmp/logs/469.txt\", \"a\");\n    if (NULL == log) return MHD_NO;\n\n    (void)cls; (void)version; (void)url;\n\n    fprintf(log, \"Entered generate_page\\n\");\n\n    if (0 == strcmp(method, MHD_HTTP_METHOD_POST)) {\n        struct UploadContext *uc = *req_cls;\n        fprintf(log, \"Handling POST method\\n\");\n\n        if (NULL == uc) {\n            fprintf(log, \"UploadContext is NULL, allocating\\n\");\n            uc = malloc(sizeof(struct UploadContext));\n            if (NULL == uc) {\n                fprintf(log, \"Memory allocation failed\\n\");\n                fclose(log);\n                return MHD_NO; /* out of memory, close connection */\n            }\n            memset(uc, 0, sizeof(struct UploadContext));\n            uc->fd = -1;\n            uc->connection = connection;\n            uc->pp = MHD_create_post_processor(connection, 64 * 1024 /* buffer size */, &process_upload_data, uc);\n            if (NULL == uc->pp) {\n                fprintf(log, \"Post processor creation failed\\n\");\n                free(uc);\n                fclose(log);\n                return MHD_NO;\n            }\n            *req_cls = uc;\n            fprintf(log, \"UploadContext created and assigned to req_cls\\n\");\n            fclose(log);\n            return MHD_YES;\n        }\n        if (0 != *upload_data_size) {\n            fprintf(log, \"Processing upload data of size: %zu\\n\", *upload_data_size);\n            if (NULL == uc->response) {\n                (void)MHD_post_process(uc->pp, upload_data, *upload_data_size);\n                fprintf(log, \"Post data processed\\n\");\n            }\n            *upload_data_size = 0; /* This modifies the pointer parameter */\n            fprintf(log, \"Modified upload_data_size to zero\\n\");\n            fclose(log);\n            return MHD_YES;\n        }\n\n        fprintf(log, \"Finalizing upload\\n\");\n        MHD_destroy_post_processor(uc->pp);\n        uc->pp = NULL;\n        if (-1 != uc->fd) {\n            close(uc->fd);\n            uc->fd = -1;\n            fprintf(log, \"Closed file descriptor\\n\");\n        }\n        /* Omitting response handling for brevity */\n        fclose(log);\n        return MHD_NO;\n    }\n\n    fprintf(log, \"Method is not POST, no upload handling\\n\");\n    fclose(log);\n    return MHD_NO;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 17.8 states that function parameters themselves should not be modified; however, the objects they point to may be modified if the pointer parameter allows it. In the provided code, the parameter 'upload_data_size' is of type 'size_t *', i.e., a pointer to size_t. The assignment '*upload_data_size = 0;' modifies the object pointed to by 'upload_data_size', not the pointer parameter itself. Therefore, this does not violate Rule 17.8. The pointer 'upload_data_size' (the parameter itself) is not reassigned anywhere in the function; only the data it points to is changed, which is allowed."
}