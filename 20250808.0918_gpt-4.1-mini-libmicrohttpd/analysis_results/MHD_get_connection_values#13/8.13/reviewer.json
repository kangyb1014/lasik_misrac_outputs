{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function MHD_get_connection_values takes a pointer to struct MHD_Connection which is not const-qualified, even though the function only reads data from it and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Hence, the function should receive a pointer to const struct MHD_Connection to reflect that it does not modify the connection object. The current code violates this rule because the pointer is not const-qualified despite the function being a read-only operation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           enum MHD_Result (*iterator)(void *iterator_cls,\n                                                      enum MHD_ValueKind kind,\n                                                      const char *key,\n                                                      const char *value),\n                           void *iterator_cls)\n{\n  FILE *log_file = fopen(\"/tmp/logs/107.txt\", \"a\");\n  int ret;\n  const struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n  {\n    if (log_file != NULL)\n    {\n      fprintf(log_file, \"Connection is NULL - returning -1\\n\");\n      fclose(log_file);\n    }\n    return -1;\n  }\n\n  ret = 0;\n  if (log_file != NULL)\n    fprintf(log_file, \"Starting header iteration - kind mask: %d\\n\", kind);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if (log_file != NULL)\n        fprintf(log_file, \"Header matched: kind=%d, header=%s, value=%s\\n\", pos->kind, pos->header, pos->value);\n\n      if ((NULL != iterator) && (MHD_NO == iterator(iterator_cls, pos->kind, pos->header, pos->value)))\n      {\n        if (log_file != NULL)\n          fprintf(log_file, \"Iterator requested stop - returning count: %d\\n\", ret);\n        fclose(log_file);\n        return ret;\n      }\n    }\n  }\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Completed header iteration - total count: %d\\n\", ret);\n    fclose(log_file);\n  }\n\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A's claim is that the function MHD_get_connection_values should accept a pointer to a const-qualified struct MHD_Connection because the function only reads from the connection and does not modify it. Given the code, MHD_get_connection_values iterates over connection->rq.headers_received but does not change the connection or any data it points to. According to MISRA C 2023 Rule 8.13, pointers should be const-qualified if the pointed-to data is not modified by the function, to enhance safety and clarity. Therefore, the parameter should be declared as const struct MHD_Connection *connection. The current absence of the const qualifier means the code does not comply with this rule, so the rule is violated as claimed. The compilation failure in the test code is not relevant to the violation itself\u2014changing the pointer to const when the data is not modified is correct and required by the rule. Hence, the agent A's report is correct."
}