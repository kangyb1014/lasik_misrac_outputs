{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified process_upload_data code that contains useful probe functions that print useful logs to a file \"/tmp/logs/423.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of process_upload_data as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of process_upload_data:\n```c\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n  if (0 != strcmp (key, \"upload\"))\n  {\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  if (NULL == filename)\n  {\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function process_upload_data:\nstatic enum MHD_Result\ndo_append (char **ret,\n           const char *data,\n           size_t size)\n{\n  char *buf;\n  size_t old_len;\n\n  if (NULL == *ret)\n    old_len = 0;\n  else\n    old_len = strlen (*ret);\n  if (NULL == (buf = malloc (old_len + size + 1)))\n    return MHD_NO;\n  if (NULL != *ret)\n  {\n    memcpy (buf,\n            *ret,\n            old_len);\n    free (*ret);\n  }\n  memcpy (&buf[old_len],\n          data,\n          size);\n  buf[old_len + size] = '\\0';\n  *ret = buf;\n  return MHD_YES;\n}\n</additional code>\nJudge whether the above process_upload_data code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "The violation occurs in the do_append function called by process_upload_data. It uses memcpy with 'size' bytes from 'data' without ensuring that 'data' actually points to at least 'size' bytes. If 'data' is shorter than 'size', this leads to out-of-bounds memory access, violating Rule 21.17. Since process_upload_data passes 'data' and 'size' to do_append without additional validation, the risk of out-of-bounds access exists if the caller parameters are not well-formed.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <unistd.h>\n#include <ctype.h>\n#include <sys/stat.h>\n#include <stdint.h>\n#include <limits.h>\n\nstatic enum MHD_Result\n do_append (char **ret, const char *data, size_t size)\n{\n  char *buf;\n  size_t old_len;\n\n  FILE *log = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"do_append called with size=%zu\\n\", size);\n  }\n\n  if (NULL == *ret)\n    old_len = 0;\n  else\n    old_len = strlen (*ret);\n\n  if (log) {\n    fprintf(log, \"old_len=%zu\\n\", old_len);\n  }\n\n  if (NULL == (buf = malloc (old_len + size + 1))) {\n    if (log) {\n      fprintf(log, \"malloc failed\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  if (NULL != *ret) {\n    memcpy (buf, *ret, old_len);\n    free (*ret);\n  }\n\n  if (log) {\n    fprintf(log, \"Copying %zu bytes from data (pointer %p)\\n\", size, (const void *)data);\n  }\n\n  /* Potential violation here: no guarantee data[size-1] is valid */\n  memcpy (&buf[old_len], data, size);\n  buf[old_len + size] = '\\0';\n  *ret = buf;\n\n  if (log) {\n    fprintf(log, \"do_append completed, new string length %zu\\n\", strlen(buf));\n    fclose(log);\n  }\n\n  return MHD_YES;\n}\n\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n\n  FILE *log = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"Entering process_upload_data with key=%s, size=%zu, off=%llu\\n\", key, size, (unsigned long long)off);\n  }\n\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"category\")) {\n    if (log) fprintf(log, \"Calling do_append for category\\n\");\n    enum MHD_Result r = do_append (&uc->category, data, size);\n    if (log) fprintf(log, \"do_append for category returned %d\\n\", r);\n    if (log) fclose(log);\n    return r;\n  }\n  if (0 == strcmp (key, \"language\")) {\n    if (log) fprintf(log, \"Calling do_append for language\\n\");\n    enum MHD_Result r = do_append (&uc->language, data, size);\n    if (log) fprintf(log, \"do_append for language returned %d\\n\", r);\n    if (log) fclose(log);\n    return r;\n  }\n\n  if (log) fclose(log);\n\n  /* Rest of function unchanged and no string.h calls on data beyond its bounds */\n\n  if (0 != strcmp(key, \"upload\")) {\n    fprintf(stderr, \"Ignoring unexpected form value `%s'\\n\", key);\n    return MHD_YES;   /* ignore */\n  }\n\n  if (NULL == filename) {\n    fprintf(stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n\n  if ((NULL == uc->category) || (NULL == uc->language)) {\n    fprintf(stderr, \"Missing form data for upload `%s'\\n\", filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n\n  if (-1 == uc->fd) {\n    char fn[PATH_MAX];\n\n    if ((NULL != strstr(filename, \"..\")) || (NULL != strchr(filename, '/')) || (NULL != strchr(filename, '\\\\'))) {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n\n    snprintf(fn, sizeof(fn), \"%s/%s\", uc->language, uc->category);\n\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n\n    res = snprintf(fn, sizeof(fn), \"%s/%s/%s\", uc->language, uc->category, filename);\n    if ((0 >= res) || (sizeof(fn) <= (size_t) res)) {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n\n    for (i = 0; i < (size_t) res; i++)\n      if (!isprint((unsigned char)fn[i]))\n        fn[i] = '_';\n    uc->fd = open(fn, O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                 | O_LARGEFILE\n#endif\n                 | O_WRONLY,\n                 S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd) {\n      fprintf(stderr, \"Error opening file `%s' for upload: %s\\n\", fn, strerror(errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup(fn);\n  }\n\n  if ((0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n      (size != (size_t) write(uc->fd, data, size))\n#else  /* Native W32 */\n      (size != (size_t) write(uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n      ) {\n    fprintf(stderr, \"Error writing to file `%s': %s\\n\", uc->filename, strerror(errno));\n    uc->response = internal_error_response;\n    (void) close(uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename) {\n      unlink(uc->filename);\n      free(uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n"
}