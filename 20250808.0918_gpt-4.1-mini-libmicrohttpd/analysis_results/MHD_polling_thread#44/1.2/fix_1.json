{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <errno.h>\n#include <signal.h>\n#include <pthread.h>\n#include <stdarg.h>\n\nstatic void MHD_DLOG (const void *daemon,\n                      const char *format,\n                      ...)\n{\n    FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n    if (log_file != NULL)\n    {\n        va_list args;\n        va_start(args, format);\n        fprintf(log_file, \"[MHD_DLOG] \");\n        vfprintf(log_file, format, args);\n        va_end(args);\n        fclose(log_file);\n    }\n}\n\n#define HAVE_PTHREAD_SIGMASK\n#define HAVE_MESSAGES\n\n// Dummy definitions to enable compilation\nstruct MHD_Daemon\n{\n    bool shutdown;\n    bool sigpipe_blocked;\n    int options;\n    int tid;\n};\n\n// Simulation of macro expansions that use language extensions\n#define MHD_THRD_RTRN_TYPE_ int\n#define MHD_THRD_CALL_SPEC_\n\n// Dummy implementations\nvoid MHD_thread_handle_ID_set_current_thread_ID_(int *id_ptr) {\n    // Log setting current thread ID\n    FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n    if (log_file)\n    {\n        fprintf(log_file, \"Setting current thread ID via language extension macro\\n\");\n        fclose(log_file);\n    }\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n    struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n    sigset_t s_mask;\n    int err;\n#endif\n\n    MHD_thread_handle_ID_set_current_thread_ID_(&daemon->tid);\n#ifdef HAVE_PTHREAD_SIGMASK\n    if ((0 == sigemptyset(&s_mask)) &&\n        (0 == sigaddset(&s_mask, SIGPIPE)))\n    {\n        err = pthread_sigmask(SIG_BLOCK, &s_mask, NULL);\n    }\n    else\n        err = errno;\n    if (0 == err)\n        daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n    else\n        MHD_DLOG(daemon,\n                 \"Failed to block SIGPIPE on daemon thread: %s\\n\",\n                 \"(error details)\" // simplified\n        );\n#endif\n#endif\n    while (!daemon->shutdown)\n    {\n        // simplified logic to log polling iteration\n        FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n        if (log_file)\n        {\n            fprintf(log_file, \"Polling thread active, daemon->shutdown = %d\\n\", daemon->shutdown);\n            fclose(log_file);\n        }\n        // Instead of original polling calls, just a pause simulation\n        // Sleep removed for demonstration\n        break; // To avoid infinite loop in this test code\n    }\n\n    if (0 != (daemon->options & 8192))\n    {\n        FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n        if (log_file)\n        {\n            fprintf(log_file, \"Resuming suspended connections because option flag is set\\n\");\n            fclose(log_file);\n        }\n    }\n\n    FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n    if (log_file)\n    {\n        fprintf(log_file, \"Closing all connections and finishing polling thread\\n\");\n        fclose(log_file);\n    }\n\n    return 0;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_polling_thread as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <errno.h>\n#include <signal.h>\n#include <pthread.h>\n#include <stdarg.h>\n\nstatic void MHD_DLOG(const void *daemon, const char *format, ...)\n{\n    FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n    if (log_file != NULL)\n    {\n        va_list args;\n        va_start(args, format);\n        fprintf(log_file, \"[MHD_DLOG] \");\n        vfprintf(log_file, format, args);\n        va_end(args);\n        fclose(log_file);\n    }\n}\n\nstruct MHD_Daemon\n{\n    bool shutdown;\n    bool sigpipe_blocked;\n    int options;\n    int tid;\n};\n\nstatic int MHD_polling_thread(void *cls)\n{\n    struct MHD_Daemon *daemon = (struct MHD_Daemon *)cls;\n    sigset_t s_mask;\n    int err = 0;\n\n    // Setting current thread ID simulated here\n    daemon->tid = pthread_self();\n\n    if ((0 == sigemptyset(&s_mask)) && (0 == sigaddset(&s_mask, SIGPIPE)))\n    {\n        err = pthread_sigmask(SIG_BLOCK, &s_mask, NULL);\n    }\n    else\n    {\n        err = errno;\n    }\n\n    if (0 == err)\n    {\n        daemon->sigpipe_blocked = true;\n    }\n    else\n    {\n        MHD_DLOG(daemon, \"Failed to block SIGPIPE on daemon thread: %s\\n\", \"(error details)\");\n    }\n\n    while (!daemon->shutdown)\n    {\n        FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n        if (log_file)\n        {\n            fprintf(log_file, \"Polling thread active, daemon->shutdown = %d\\n\", daemon->shutdown);\n            fclose(log_file);\n        }\n        break; // To avoid infinite loop in this test code\n    }\n\n    if (0 != (daemon->options & 8192))\n    {\n        FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n        if (log_file)\n        {\n            fprintf(log_file, \"Resuming suspended connections because option flag is set\\n\");\n            fclose(log_file);\n        }\n    }\n\n    FILE *log_file = fopen(\"/tmp/logs/352.txt\", \"a\");\n    if (log_file)\n    {\n        fprintf(log_file, \"Closing all connections and finishing polling thread\\n\");\n        fclose(log_file);\n    }\n\n    return 0;\n}\n",
  "explanation": "The original code failed to compile mainly due to the use of macros and a dummy function that were not providing compilable code. To fix this:\n\n1. Removed macro definitions and dummy function MHD_thread_handle_ID_set_current_thread_ID_(). Instead, I directly set the thread ID using pthread_self() assigned to daemon->tid.\n2. Removed the macro expansions and language extension placeholders, directly writing the polling thread function with standard C.\n3. Added proper casting for the void* parameter to struct MHD_Daemon*.\n4. Retained the blocking of SIGPIPE signal using pthread_sigmask as in the original logic.\n5. Kept the logging logic intact, making sure all fopen calls check for NULL.\n\nThese changes preserve the original logic of MHD_polling_thread and ensure the code compiles and runs without errors, while adhering to the constraints of no macros or mock functions and no main function definition."
}