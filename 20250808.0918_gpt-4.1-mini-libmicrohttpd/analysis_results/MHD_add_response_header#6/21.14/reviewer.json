{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation occurs in the function add_response_header_connection, which is called by MHD_add_response_header when the header matches \"Connection\". Inside add_response_header_connection, memcmp is used to compare the hdr->value with the string \"close\" to check if the \"close\" token is already present (line: mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));). This violates MISRA C 2023 Rule 21.14 because memcmp is used to compare null terminated strings.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *log_file = fopen(\"/tmp/logs/54.txt\", \"a\");\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Entered MHD_add_response_header: header=\\\"%s\\\", content=\\\"%s\\\"\\n\", header, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (log_file != NULL)\n      fprintf(log_file, \"Calling add_response_header_connection\\n\");\n    enum MHD_Result res = add_response_header_connection (response, content);\n    if (log_file != NULL)\n      fprintf(log_file, \"Returned from add_response_header_connection: %d\\n\", res);\n    if (log_file != NULL)\n      fclose(log_file);\n    return res;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Transfer-Encoding content not chunked: reject\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Transfer-Encoding chunked already set: accept\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Has Content-Length header without insanity flag: reject\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (log_file != NULL)\n        fprintf(log_file, \"Added Transfer-Encoding chunked header\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Transfer-Encoding chunked header\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ (\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (log_file != NULL)\n        fprintf(log_file, \"Added Date header\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Date header\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (log_file != NULL)\n          fprintf(log_file, \"Added Content-Length header\\n\");\n        if (log_file != NULL)\n          fclose(log_file);\n        return MHD_YES;\n      }\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Content-Length header or not allowed\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (log_file != NULL)\n    fprintf(log_file, \"Adding general response entry header\\n\");\n  enum MHD_Result res = add_response_entry (response,\n                                           MHD_HEADER_KIND,\n                                           header,\n                                           content);\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Returned from add_response_entry: %d\\n\", res);\n    fclose(log_file);\n  }\n  return res;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The reported violation is about the use of memcmp to compare null-terminated strings inside the function add_response_header_connection, which is called by MHD_add_response_header. The target code shown for MHD_add_response_header does not itself use memcmp to compare strings. The scenario explains that inside add_response_header_connection, which was not provided in the target code, memcmp is used to compare hdr->value with \"close\" as a null-terminated string. According to MISRA C 2023 Rule 21.14, the standard library function memcmp shall not be used to compare null terminated strings; instead, functions like strcmp or strncmp should be used for null-terminated strings. The scenario matches the rule violation because memcmp is used in that forbidden way inside add_response_header_connection.\n\nAlthough the provided test code instrumenting MHD_add_response_header failed to compile, the scenario's description of the violation is specific and plausible based on the stated line and use of memcmp. Therefore, the report by agent A about the violation of MISRA C 2023 Rule 21.14 is correct as it applies to add_response_header_connection, which is logically traced from MHD_add_response_header when the \"Connection\" header is processed."
}