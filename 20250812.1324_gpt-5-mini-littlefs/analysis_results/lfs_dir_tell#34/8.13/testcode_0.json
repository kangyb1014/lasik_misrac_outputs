{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameters lfs_t *lfs and lfs_dir_t *dir are only read (lfs_dir_tell_ does not modify them), so they could be declared const (const lfs_t * and const lfs_dir_t *). In the fragment the pointers are cast to (void*) for tracing, which discards/omits const qualification. This use shows that pointer types are not const-qualified where possible and the cast further removes const, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/275.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper functions to log control flow and state for debugging\n * Writes to /tmp/logs/275.txt. Designed to avoid changing original logic.\n * Uses only pointer addresses and raw byte dumps (up to a small limit).\n */\nstatic void probe_dump_bytes(FILE *f, const void *ptr, size_t maxbytes) {\n    if (ptr == NULL) {\n        fprintf(f, \" NULL\\n\");\n        return;\n    }\n    const unsigned char *p = (const unsigned char *)(const void *)ptr;\n    fprintf(f, \" \");\n    for (size_t i = 0; i < maxbytes; i++) {\n        /* print in hex, but stop if we've hit a probable zero terminator\n         * to avoid dumping large uninitialized areas. This is conservative. */\n        fprintf(f, \"%02X\", p[i]);\n        if (i + 1 < maxbytes) {\n            fprintf(f, \" \");\n        }\n    }\n    fprintf(f, \"\\n\");\n}\n\nstatic void probe_log(const char *stage, const void *lfs, const void *dir, int lock_err, lfs_soff_t res) {\n    FILE *f = fopen(\"/tmp/logs/275.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_dir_tell] stage=%s\\n\", stage);\n    fprintf(f, \"  lock_err=%d\\n\", lock_err);\n    fprintf(f, \"  lfs_ptr=%p\\n\", lfs);\n    fprintf(f, \"  dir_ptr=%p\\n\", dir);\n\n    /* Dump up to 16 bytes from each object to provide evidence of read-only usage. */\n    fprintf(f, \"  lfs_first16_bytes:\");\n    probe_dump_bytes(f, lfs, 16);\n    fprintf(f, \"  dir_first16_bytes:\");\n    probe_dump_bytes(f, dir, 16);\n\n    fprintf(f, \"  result=%\" PRId32 \"\\n\", (int32_t)res);\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the early-exit path so callers can see lock failures. */\n        probe_log(\"lock_failed\", (const void *)lfs, (const void *)dir, err, (lfs_soff_t)err);\n        return err;\n    }\n\n    /* Original trace (kept as-is to preserve existing behavior). */\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Additional probe before calling the internal function. */\n    probe_log(\"before_call\", (const void *)lfs, (const void *)dir, 0, (lfs_soff_t)0);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    /* Probe after the internal call to capture result and state. */\n    probe_log(\"after_call\", (const void *)lfs, (const void *)dir, 0, res);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}