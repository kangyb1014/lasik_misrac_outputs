{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro expands to ((void)cfg, 0). When used e.g. in lfs_dir_tell as int err = LFS_LOCK(lfs->cfg); the expression evaluates (void)lfs->cfg solely to suppress unused-variable warnings and then yields 0. If the member access lfs->cfg has no side effects (typical for a plain struct member), that evaluation does not affect program behaviour and can be removed without changing the program. Therefore the operation executed by the macro is dead code (an executed operation whose removal would not change behaviour).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/274.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe: append control-flow and state information to /tmp/logs/274.txt\n   This preserves the original logic of lfs_dir_tell while recording\n   the value of lfs->cfg before and after the LFS_LOCK invocation so\n   other agents can reproduce the reported \"dead code\" scenario. */\nstatic void lfs_dir_tell_log_probe(const char *msg, lfs_t *lfs, lfs_dir_t *dir, int err, lfs_soff_t res) {\n    FILE *f = fopen(\"/tmp/logs/274.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log basic control and state. Use %p for pointers and integers for values. */\n    if (msg) {\n        fprintf(f, \"%s\\n\", msg);\n    }\n    fprintf(f, \"  lfs=%p, dir=%p, cfg=%p, err=%d, res=%\" PRId32 \"\\n\",\n            (void*)lfs, (void*)dir, (void*)(lfs ? lfs->cfg : NULL), err, (int32_t)res);\n    fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Log state before invoking LFS_LOCK. This records the fact that\n       accessing lfs->cfg is a simple read of the struct member. */\n    lfs_dir_tell_log_probe(\"ENTER lfs_dir_tell (before LFS_LOCK)\", lfs, dir, 0, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of LFS_LOCK and the value of lfs->cfg after its evaluation.\n       This provides evidence whether the (void)cfg expression had any observable\n       effect beyond suppressing unused-variable warnings. */\n    lfs_dir_tell_log_probe(\"AFTER LFS_LOCK\", lfs, dir, err, 0);\n\n    if (err) {\n        lfs_dir_tell_log_probe(\"lfs_dir_tell returning due to err\", lfs, dir, err, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\" PRId32, res);\n\n    /* Log just before unlocking to show control flow reaching this point. */\n    lfs_dir_tell_log_probe(\"BEFORE LFS_UNLOCK\", lfs, dir, 0, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_dir_tell_log_probe(\"EXIT lfs_dir_tell\", lfs, dir, 0, res);\n    return res;\n}\n"
}