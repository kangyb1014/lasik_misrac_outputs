{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_find the code uses memcmp(name, \"..\", 2) and memcmp(name, \".\", 1) to test path components against the string literals \"..\" and \".\". These are comparisons against null-terminated string literals, so memcmp is being used to compare null\u2011terminated strings (the string literals).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/230.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: logs path components and raw bytes to /tmp/logs/230.txt\n   Preserves behavior of lfs_mkdir and does not alter any return values.\n*/\nstatic void lfs_mkdir_probe_log_path(const char *path) {\n    FILE *f = fopen(\"/tmp/logs/230.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"lfs_mkdir_probe: path=%s\\n\", (path != NULL) ? path : \"(null)\");\n    if (path == NULL) {\n        fclose(f);\n        return;\n    }\n\n    const char *p = path;\n    int idx = 0;\n    /* fixed-size buffer to avoid dynamic allocation and VLAs */\n    enum { COMP_BUF_SIZE = 1024 };\n    char comp[COMP_BUF_SIZE];\n\n    while (*p != '\\0') {\n        /* skip leading '/' separators */\n        if (*p == '/') {\n            p++;\n            continue;\n        }\n\n        const char *start = p;\n        size_t len = 0u;\n        while (*p != '\\0' && *p != '/') {\n            p++;\n            len++;\n        }\n\n        size_t copy_len = len;\n        if (copy_len >= COMP_BUF_SIZE) {\n            copy_len = COMP_BUF_SIZE - 1u; /* leave room for null terminator */\n        }\n\n        if (copy_len > 0u) {\n            memcpy(comp, start, copy_len);\n        }\n        comp[copy_len] = '\\0';\n\n        fprintf(f, \"component %d: original_len=%zu, logged_len=%zu, str=\\\"%s\\\"\\n\",\n                idx, len, copy_len, comp);\n\n        /* log raw bytes including the null terminator we added */\n        fprintf(f, \"bytes:\");\n        size_t i;\n        for (i = 0u; i <= copy_len; i++) {\n            unsigned char b = (unsigned char)comp[i];\n            fprintf(f, \" %02X\", (unsigned) b);\n        }\n        if (copy_len != len) {\n            fprintf(f, \"  (truncated from %zu to %zu)\", len, copy_len);\n        }\n        fprintf(f, \"\\n\");\n\n        /* use strcmp to detect \".\" and \"..\" (avoid using memcmp on null-terminated strings) */\n        if (strcmp(comp, \".\") == 0) {\n            fprintf(f, \"component %d identified as \\\".\\\"\\n\", idx);\n        }\n        if (strcmp(comp, \"..\") == 0) {\n            fprintf(f, \"component %d identified as \\\"..\\\"\\n\", idx);\n        }\n\n        idx++;\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Probe: capture the path and its components to help reproduce the\n       memcmp-vs-null-terminated-strings scenario reported in lfs_dir_find. */\n    lfs_mkdir_probe_log_path(path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}