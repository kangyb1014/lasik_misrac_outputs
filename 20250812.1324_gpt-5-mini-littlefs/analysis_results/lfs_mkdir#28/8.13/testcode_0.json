{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code takes the address of a non-const compound literal &(struct lfs_dir_find_match){ lfs, name, namelen } and passes it to lfs_dir_fetchmatch. If lfs_dir_fetchmatch (and the callback lfs_dir_find_match) only read that data, the parameter ought to be a pointer to a const-qualified type (e.g. const struct lfs_dir_find_match * or const void *). Passing a non-const pointer where a const-qualified pointer would suffice violates MISRA C 2023 Rule 8.13. (If, however, the callee actually modifies the struct, or the prototype already requires a const-qualified pointer, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/227.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a line to /tmp/logs/227.txt describing the stage,\n   the lfs pointer, the path, and the error code (if any). This preserves the\n   original logic and only adds side-effect logging useful for reproducing\n   the reported violation scenario. */\nstatic void lfs_log_probe(const char *stage, lfs_t *lfs, const char *path, int err) {\n    FILE *f = fopen(\"/tmp/logs/227.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: lfs=%p, path=\\\"%s\\\", err=%d\\n\",\n                stage, (void*)lfs, (path != NULL) ? path : \"(null)\", err);\n        fclose(f);\n    }\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log state immediately after attempting to acquire the lock. */\n    lfs_log_probe(\"after_lock\", lfs, path, err);\n    if (err) {\n        /* Log the early return due to lock failure for reproduction. */\n        lfs_log_probe(\"lock_failed_return\", lfs, path, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Log just before calling the internal mkdir implementation. */\n    lfs_log_probe(\"before_lfs_mkdir_\", lfs, path, 0);\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Log result from the internal mkdir implementation. */\n    lfs_log_probe(\"after_lfs_mkdir_\", lfs, path, err);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlocking to capture the full control path. */\n    lfs_log_probe(\"after_unlock\", lfs, path, err);\n    return err;\n}\n"
}