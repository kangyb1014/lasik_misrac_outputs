{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro expands to '((void)cfg, 0)'. The '(void)cfg' sub-expression is evaluated but has no effect (no side-effects) in this build, so the operation is an executed no-op whose removal would not change program behaviour. This constitutes dead code (the no-op cast/evaluation inside LFS_LOCK), violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/266.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a short log entry about the lock and cfg pointer */\nstatic void lfs_probe_log_lock(const char *when, lfs_t *lfs, int err) {\n    FILE *fp = fopen(\"/tmp/logs/266.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log the stage, lfs pointer, cfg pointer (as seen from lfs), and lock return */\n    fprintf(fp, \"lfs_dir_seek: %s | lfs=%p cfg=%p err=%d\\n\",\n            when, (void*)lfs, (void*)(lfs ? lfs->cfg : NULL), err);\n    fclose(fp);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    /* Log state just before attempting the lock. This will show the cfg pointer\n       value that is passed into LFS_LOCK. If LFS_LOCK expands to '((void)cfg,0)'\n       the cast will be evaluated but have no effect; the cfg pointer will remain\n       unchanged and the lock return value will be 0. */\n    lfs_probe_log_lock(\"before_lock\", lfs, -1);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of LFS_LOCK and the cfg pointer again to evidence no side-effects. */\n    lfs_probe_log_lock(\"after_lock\", lfs, err);\n\n    if (err) {\n        /* Log the early return caused by a non-zero lock result. */\n        lfs_probe_log_lock(\"early_return\", lfs, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n\n    /* Log the result of the seek and that we're about to unlock. */\n    lfs_probe_log_lock(\"before_unlock\", lfs, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log entry after unlocking. */\n    lfs_probe_log_lock(\"after_unlock\", lfs, err);\n\n    return err;\n}\n"
}