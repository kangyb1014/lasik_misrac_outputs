{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg). In lfs_dir_seek it is used as LFS_UNLOCK(lfs->cfg), which expands to ((void)lfs->cfg). This evaluates (and discards) the cfg expression but performs no observable action. Removing that expression (or the macro call) would not change program behaviour (given that lfs->cfg is not volatile and has no side-effects on read), so the operation is dead code and violates MISRA C 2023 Rule 2.2. Note: if the cfg expression had side-effects or involved volatile objects, the evaluation could be significant; however in the presented codebase it appears to be a plain pointer read, making this a dead operation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/266.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n\n    /*\n     * Probe logging to capture the evaluation and effect (or lack thereof)\n     * of the expression passed to LFS_UNLOCK(lfs->cfg).\n     * Logs appended to /tmp/logs/266.txt. If the file cannot be opened,\n     * logging is skipped but normal logic proceeds unchanged.\n     */\n    {\n        FILE *logf = fopen(\"/tmp/logs/266.txt\", \"a\");\n        void *cfg_before = NULL;\n        if (logf != NULL) {\n            cfg_before = (void*)lfs->cfg; /* read the cfg value before unlock */\n            fprintf(logf, \"lfs_dir_seek: start probe - lfs=%p dir=%p off=%\"PRIu32\" err=%d\\n\",\n                    (void*)lfs, (void*)dir, off, err);\n            fprintf(logf, \"lfs_dir_seek: cfg_before=%p\\n\", cfg_before);\n            fflush(logf);\n        }\n\n        /* Keep original unlock call exactly as in the original code. */\n        LFS_UNLOCK(lfs->cfg);\n\n        if (logf != NULL) {\n            void *cfg_after = (void*)lfs->cfg; /* read the cfg value after unlock */\n            fprintf(logf, \"lfs_dir_seek: cfg_after=%p\\n\", cfg_after);\n            fprintf(logf, \"lfs_dir_seek: cfg_before==cfg_after => %s\\n\",\n                    (cfg_before == cfg_after) ? \"true\" : \"false\");\n            fprintf(logf, \"lfs_dir_seek: end probe\\n\\n\");\n            fclose(logf);\n        }\n    }\n\n    return err;\n}\n"
}