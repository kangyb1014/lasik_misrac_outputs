{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), which performs no side-effects. The statement LFS_UNLOCK(lfs->cfg); is executed but only evaluates to a void-cast of lfs->cfg; removing this statement would not change program behaviour. Therefore this statement is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/266.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "static void lfs_dir_seek_log_probe(const char *stage, lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off, int err) {\n    /* Append a concise runtime probe to the log file for reproducibility. */\n    FILE *f = fopen(\"/tmp/logs/266.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Record control point, pointers, offset, error code and cfg pointer value. */\n    fprintf(f, \"%s: lfs=%p dir=%p off=%llu err=%d cfg=%p\\n\",\n            stage, (void*)lfs, (void*)dir,\n            (unsigned long long)off, err, (void*)lfs->cfg);\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that lock failed and early return took place */\n        lfs_dir_seek_log_probe(\"entry:lock-failed\", lfs, dir, off, err);\n        return err;\n    }\n\n    /* Log immediately after successful lock */\n    lfs_dir_seek_log_probe(\"after-lock\", lfs, dir, off, err);\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n\n    /* Log state just before unlock (captures cfg pointer value) */\n    lfs_dir_seek_log_probe(\"before-unlock\", lfs, dir, off, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log state just after unlock to demonstrate that cfg was unchanged by the call.\n       This helps reproduce evidence that LFS_UNLOCK is a no-op in practice. */\n    lfs_dir_seek_log_probe(\"after-unlock\", lfs, dir, off, err);\n\n    return err;\n}"
}