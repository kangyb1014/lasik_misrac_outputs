{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the scalar parameter 'off' (type lfs_off_t) is modified inside lfs_dir_seek_ (e.g. 'off -= dir->pos;' before the loop and 'off -= diff;' inside the while loop starting at 'while (off > 0)'). Modifying the parameter 'off' violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/269.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <inttypes.h>\n\n/* Probe logging helper. Keeps original behavior; only appends diagnostics to /tmp/logs/269.txt. */\nstatic void lfs_debug_log(const char *stage, lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off, int err) {\n    FILE *fp = fopen(\"/tmp/logs/269.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n    time_t now = time(NULL);\n    /* Print a simple timestamp, stage (ENTRY/EXIT), pointers and the off parameter and return value. */\n    fprintf(fp, \"[%ld] %s: lfs=%p dir=%p off=%\" PRIu32 \" err=%d\\n\",\n            (long)now, stage, (void*)lfs, (void*)dir, off, err);\n    fclose(fp);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Log entry-state before delegating to lfs_dir_seek_. This records the original\n       value of the scalar parameter 'off' so that any modification inside\n       lfs_dir_seek_ can be observed by comparing logs. */\n    lfs_debug_log(\"ENTRY\", lfs, dir, off, -1);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Log exit-state after the call. The recorded sequence (ENTRY then EXIT)\n       lets other agents correlate the initial parameter value and the observed\n       behavior/return code to reproduce the reported modification scenario. */\n    lfs_debug_log(\"EXIT\", lfs, dir, off, err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}