{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) the value parameter 'off' is modified (e.g. off -= dir->pos; off -= diff;). MISRA C 2023 Rule 17.8 prohibits modifying function parameters. (Pointer parameters lfs and dir are not reassigned; modifying the object pointed-to is permitted.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/269.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: append a single log entry to /tmp/logs/269.txt */\nstatic void lfs_dir_seek_log(const char *phase, void *lfs_ptr, void *dir_ptr,\n        uint32_t off_val, uint32_t dir_pos_val, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_dir_seek] %s: lfs=%p dir=%p off=%\" PRIu32 \" dir->pos=%\" PRIu32 \" err=%d\\n\",\n            phase, lfs_ptr, dir_ptr, off_val, dir_pos_val, err);\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    /* Preserve original locking logic */\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the lock failure and return early */\n        lfs_dir_seek_log(\"lock-failed\", (void*)lfs, (void*)dir,\n                (uint32_t)off, (uint32_t)(dir ? dir->pos : 0), err);\n        return err;\n    }\n\n    /* Log entry state before calling the inner function. We do not modify 'off' here. */\n    lfs_dir_seek_log(\"enter\", (void*)lfs, (void*)dir,\n            (uint32_t)off, (uint32_t)(dir ? dir->pos : 0), 0);\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Call the original implementation. We intentionally keep the call unchanged. */\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Log state after the call so callers can observe any changes to 'dir' or other visible state. */\n    lfs_dir_seek_log(\"after-call\", (void*)lfs, (void*)dir,\n            (uint32_t)off, (uint32_t)(dir ? dir->pos : 0), err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}