{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_seek_ the value parameter 'off' (type lfs_off_t) is modified (e.g. 'off -= dir->pos;' and 'off -= diff;'). Modifying a function parameter variable itself violates MISRA C 2023 Rule 17.8. (Note: pointer parameters 'lfs' and 'dir' are not reassigned; modifying the object pointed-to by 'dir' is allowed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/269.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helper: append a single log line to the probe file. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    /* Log entry and parameter addresses/values so callers can correlate\n       changes made inside lfs_dir_seek_ (violating Rule 17.8) with the\n       callsite. */\n    lfs_probe_log(\"ENTER lfs_dir_seek: lfs=%p dir=%p off=%\" PRIu32,\n                  (void*)lfs, (void*)dir, off);\n    lfs_probe_log(\"CALLER PARAM ADDRS: &lfs=%p &dir=%p &off=%p\",\n                  (void*)&lfs, (void*)&dir, (void*)&off);\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_probe_log(\"lfs_dir_seek: LFS_LOCK failed -> %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Log just before calling the internal function so that a subsequent\n       log from here (after return) can be compared to see if the callee\n       modified its parameter (the callee's parameter is a separate\n       instance, but this logging helps produce a reproducible trace). */\n    lfs_probe_log(\"BEFORE lfs_dir_seek_: off=%\" PRIu32 \" (&off=%p)\",\n                  off, (void*)&off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Log return and current caller-side parameter value/address. */\n    lfs_probe_log(\"AFTER lfs_dir_seek_: ret=%d\", err);\n    lfs_probe_log(\"AFTER CALL: off=%\" PRIu32 \" (&off=%p)\",\n                  off, (void*)&off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}