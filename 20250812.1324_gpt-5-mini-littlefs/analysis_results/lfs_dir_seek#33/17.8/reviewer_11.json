{
  "user_message": "An agent A claimed that the following lfs_dir_seek code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of lfs_dir_seek.\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In lfs_dir_seek_ the value parameter 'off' (type lfs_off_t) is modified: dir->pos = lfs_min(2, off); off -= dir->pos; \u2014 this assigns to the parameter 'off', violating MISRA C 2023 Rule 17.8. (The pointer parameter 'dir' itself is not reassigned; modifying the object it points to, e.g. dir->pos, is allowed.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic int LFS_LOCK(void *cfg)\n{\n    /* For test purposes, always succeed. */\n    probe_log(\"LFS_LOCK(cfg=%p)\", cfg);\n    return 0;\n}\nstatic void LFS_UNLOCK(void *cfg)\n{\n    probe_log(\"LFS_UNLOCK(cfg=%p)\", cfg);\n}\nstatic void LFS_TRACE(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    /* Write trace info to the same log file for reproducibility. */\n    FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n    if (f) {\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n    va_end(ap);\n}\n\nint lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off)\n{\n    /* Log entry and incoming parameter values */\n    probe_log(\"ENTER lfs_dir_seek_: lfs=%p, dir=%p, off(before)=%\" PRIu32, (void*)lfs, (void*)dir, off);\n\n    /* Reproduce reported behavior: dir->pos = lfs_min(2, off); off -= dir->pos; */\n    dir->pos = (off < 2u) ? off : 2u;\n    probe_log(\"lfs_dir_seek_ sets dir->pos=%\" PRIu32, dir->pos);\n\n    off -= dir->pos; /* <-- modification of the value parameter (violation to be evidenced) */\n    probe_log(\"lfs_dir_seek_ modified parameter off(after)=%\" PRIu32, off);\n\n    probe_log(\"EXIT lfs_dir_seek_\");\n    return 0;\n}\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        probe_log(\"lfs_dir_seek: LFS_LOCK failed err=%d\", err);\n        return err;\n    }\n\n    /* Trace entry with the original off value (do not modify 'off' here). */\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\" PRIu32 \")\", (void*)lfs, (void*)dir, off);\n\n    /* Additional probe: record the state just before calling the underscored function. */\n    probe_log(\"BEFORE calling lfs_dir_seek_: lfs=%p, dir=%p, off=%\" PRIu32, (void*)lfs, (void*)dir, off);\n\n    /* Call the underlying function (which in this test harness reproduces the violation). */\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Probe after call: record return value and observed dir state. */\n    probe_log(\"AFTER calling lfs_dir_seek_: err=%d, dir=%p, dir->pos=%\" PRIu32, err, (void*)dir, dir->pos);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct in substance. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In the provided reproduction of lfs_dir_seek_ the statement \"off -= dir->pos;\" assigns to the value parameter off, which is a direct violation of Rule 17.8. (The wrapper lfs_dir_seek shown in the target_code does not itself modify off, but the underscored implementation lfs_dir_seek_ does \u2014 so the violation is present in the codebase.) Note that modifying dir->pos (the object pointed to by the pointer parameter dir) is permitted by the rule; modifying the non-pointer value parameter off is not. A simple remedy is to copy off into a local variable (e.g. lfs_off_t rem = off;) and modify that local instead, or change the API to use an output parameter if mutation is intended."
}