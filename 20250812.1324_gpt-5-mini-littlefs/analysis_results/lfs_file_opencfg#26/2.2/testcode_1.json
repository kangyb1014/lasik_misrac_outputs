{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the supplied build configuration LFS_UNLOCK is defined as #define LFS_UNLOCK(cfg) ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); simply evaluates and discards lfs->cfg and performs no observable action. Removing that statement would not alter program behaviour in this project configuration, therefore it is dead code and violates MISRA C 2023 Rule 2.2. (Note: if LFS_UNLOCK is redefined to perform a real unlock in other build configurations, it would not be dead there, but given the provided macro definition this occurrence is dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/210.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: append a log entry describing control flow and key state. */\nstatic void lfs_log_probe(const char *tag, lfs_t *lfs, lfs_file_t *file,\n        const struct lfs_file_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/210.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Safely print cfg fields only if cfg is non-NULL. */\n    fprintf(f, \"%s: lfs=%p file=%p cfg=%p cfg->buffer=%p cfg->attrs=%p cfg->attr_count=%\" PRIu32 \" err=%d\\n\",\n            tag,\n            (const void*)lfs,\n            (const void*)file,\n            (const void*)cfg,\n            (const void*)(cfg ? cfg->buffer : NULL),\n            (const void*)(cfg ? cfg->attrs : NULL),\n            (cfg ? cfg->attr_count : 0u),\n            err);\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log immediately after attempting the lock to capture lock result. */\n    lfs_log_probe(\"lfs_file_opencfg:after_lock\", lfs, file, cfg, err);\n\n    if (err) {\n        /* Record that we are returning early due to lock error. */\n        lfs_log_probe(\"lfs_file_opencfg:return_on_lock_err\", lfs, file, cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n\n    /* Log state before calling LFS_UNLOCK so we can detect if it is a no-op. */\n    lfs_log_probe(\"lfs_file_opencfg:before_unlock\", lfs, file, cfg, err);\n\n    /* Capture lfs->cfg pointer value before and after unlock to provide\n       evidence whether the unlock performed any observable change. */\n    const void *cfg_before = (const void*)lfs->cfg;\n\n    LFS_UNLOCK(lfs->cfg);\n\n    const void *cfg_after = (const void*)lfs->cfg;\n\n    /* Append a dedicated record about the unlock call and the pointer values. */\n    {\n        FILE *f = fopen(\"/tmp/logs/210.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_file_opencfg: LFS_UNLOCK invoked: lfs->cfg before=%p after=%p err=%d\\n\",\n                    cfg_before, cfg_after, err);\n            fclose(f);\n        }\n    }\n\n    return err;\n}\n"
}