{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function passes the address of the parameter 'path' to lfs_dir_find via &path. That allows lfs_dir_find to modify the pointer variable 'path' (advance/change which string is pointed to). MISRA C 2023 Rule 17.8 forbids modifying a function parameter itself (the pointer variable); only the object it points to may be modified. Therefore this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/213.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function to log relevant state to /tmp/logs/213.txt. */\nstatic void lfs_dbg_log_state(const char *stage, lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags, const struct lfs_file_config *cfg, int err) {\n    FILE *fp = fopen(\"/tmp/logs/213.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log pointer values, the actual path string if available, the address of the\n       parameter 'path' (so callers can see if the pointer variable itself was\n       modified by callee), and configuration related pointers/count. */\n    fprintf(fp, \"%s: enter\\n\", stage);\n    fprintf(fp, \"  lfs=%p\\n\", (void*)lfs);\n    fprintf(fp, \"  file=%p\\n\", (void*)file);\n    fprintf(fp, \"  path_value=%p\\n\", (void*)path);\n    fprintf(fp, \"  path_string=\\\"%s\\\"\\n\", path ? path : \"(null)\");\n    fprintf(fp, \"  &path(address of parameter)=%p\\n\", (void*)&path);\n    fprintf(fp, \"  flags=0x%x\\n\", flags);\n    fprintf(fp, \"  cfg=%p\\n\", (void*)cfg);\n    if (cfg) {\n        fprintf(fp, \"    cfg->buffer=%p\\n\", cfg->buffer);\n        fprintf(fp, \"    cfg->attrs=%p\\n\", (void*)cfg->attrs);\n        fprintf(fp, \"    cfg->attr_count=%llu\\n\", (unsigned long long)cfg->attr_count);\n    }\n    fprintf(fp, \"  err=%d\\n\", err);\n    fprintf(fp, \"%s: exit\\n\\n\", stage);\n    fclose(fp);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_dbg_log_state(\"lfs_file_opencfg:lock_failed\", lfs, file, path, flags, cfg, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log state before calling the internal implementation. This captures the\n       address of the parameter 'path' so downstream modifications of the\n       pointer variable (via a pointer to it) can be detected by comparing\n       pre/post values. */\n    lfs_dbg_log_state(\"lfs_file_opencfg:before_lfs_file_opencfg_\", lfs, file, path, flags, cfg, 0);\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log state after the internal call to observe any changes to 'path' or\n       related state (this will provide evidence if the pointer parameter was\n       modified by a callee). */\n    lfs_dbg_log_state(\"lfs_file_opencfg:after_lfs_file_opencfg_\", lfs, file, path, flags, cfg, err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}