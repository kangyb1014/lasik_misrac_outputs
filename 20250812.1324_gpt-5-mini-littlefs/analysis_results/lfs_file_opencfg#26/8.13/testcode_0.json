{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a pointer declared as const struct lfs_file_config *cfg to lfs_file_opencfg_. If the prototype of lfs_file_opencfg_ is lfs_file_opencfg_(lfs_t *, lfs_file_t *, const char *, int, struct lfs_file_config *) (i.e. its last parameter is a non-const pointer), this discards the const qualifier and violates MISRA C 2023 Rule 8.13. To comply, the callee should be declared to take const struct lfs_file_config * (or the caller must only pass a non-const pointer when mutation is intended).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/211.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helper: logs to /tmp/logs/211.txt that a const-config pointer was observed. */\nstatic void lfs_probe_log_const_cfg(const struct lfs_file_config *cfg, lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    FILE *f = fopen(\"/tmp/logs/211.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"PROBE: enter lfs_file_opencfg\\n\");\n    fprintf(f, \"PROBE: lfs=%p, file=%p, path=\\\"%s\\\", flags=0x%x\\n\",\n            (void*)lfs, (void*)file, path ? path : \"(null)\", flags);\n    fprintf(f, \"PROBE: cfg (const)=%p\\n\", (void*)cfg);\n    if (cfg) {\n        /* Log fields assumed from struct lfs_file_config (preserve original usage) */\n        fprintf(f, \"PROBE: cfg->buffer=%p, cfg->attrs=%p, cfg->attr_count=%\" PRIu32 \"\\n\",\n                cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    }\n    fprintf(f, \"PROBE: about to call lfs_file_opencfg_ with cfg (const)\\n\");\n    fclose(f);\n}\n\n/* Additional probe that would accept a non-const config pointer.\n   We DO NOT call this with the const cfg; it's provided to demonstrate\n   that the caller's cfg can be accepted by a const-taking probe. */\nstatic void lfs_probe_log_nonconst_cfg(struct lfs_file_config *cfg) {\n    FILE *f = fopen(\"/tmp/logs/211.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"PROBE: non-const probe signature exists at %p (not called)\\n\", (void*)cfg);\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure */\n        FILE *f = fopen(\"/tmp/logs/211.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"PROBE: LFS_LOCK failed with err=%d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* Original trace preserved */\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe: log that we have a const-config pointer at the call site. */\n    lfs_probe_log_const_cfg(cfg, lfs, file, path, flags);\n\n    /* Call the original helper (potentially declared with a non-const parameter).\n       We keep this call unchanged to preserve original behavior. */\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log the result of the call */\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n\n    /* Also append probe log with the return value so timeline is clear */\n    {\n        FILE *f = fopen(\"/tmp/logs/211.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"PROBE: lfs_file_opencfg_ returned %d\\n\", err);\n            fclose(f);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}