{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a pointer-to-const (cfg) and members of a const-qualified struct to plain void*, removing const qualification. Specifically (void*)cfg and (void*)cfg->attrs (and passing cfg->buffer as a non-const pointer) discard const on the pointer(s) when calling LFS_TRACE, which violates the intent of MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/211.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe functions to log entry/exit and state without discarding const qualifiers. */\nstatic void lfs_file_opencfg_log_enter(\n        const void *lfs, const void *file,\n        const char *path, int flags,\n        const void *cfg, const void *cfg_buffer,\n        const void *cfg_attrs, uint32_t cfg_attr_count) {\n    FILE *fp = fopen(\"/tmp/logs/211.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    fprintf(fp, \"ENTER lfs_file_opencfg: lfs=%p file=%p path=\\\"%s\\\" flags=0x%X cfg=%p\\n\",\n            (const void*)lfs, (const void*)file, (path != NULL) ? path : \"(null)\", (unsigned)flags, (const void*)cfg);\n    if (cfg != NULL) {\n        fprintf(fp, \"  cfg.buffer=%p cfg.attrs=%p cfg.attr_count=%\" PRIu32 \"\\n\",\n                (const void*)cfg_buffer, (const void*)cfg_attrs, cfg_attr_count);\n    } else {\n        fprintf(fp, \"  cfg=NULL\\n\");\n    }\n    fclose(fp);\n}\n\nstatic void lfs_file_opencfg_log_exit(const void *lfs, const void *file,\n        const char *path, int flags, const void *cfg, int err) {\n    FILE *fp = fopen(\"/tmp/logs/211.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    fprintf(fp, \"EXIT  lfs_file_opencfg: lfs=%p file=%p path=\\\"%s\\\" flags=0x%X cfg=%p -> err=%d\\n\",\n            (const void*)lfs, (const void*)file, (path != NULL) ? path : \"(null)\", (unsigned)flags, (const void*)cfg, err);\n    fclose(fp);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    /* Original trace retained (left unmodified to preserve original behavior) */\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n    /* Additional probes that do not discard const qualifications. */\n    if (cfg != NULL) {\n        lfs_file_opencfg_log_enter(\n                (const void*)lfs, (const void*)file, path, flags,\n                (const void*)cfg, (const void*)cfg->buffer,\n                (const void*)cfg->attrs, cfg->attr_count);\n    } else {\n        lfs_file_opencfg_log_enter(\n                (const void*)lfs, (const void*)file, path, flags,\n                NULL, NULL, NULL, 0);\n    }\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log exit with the same const-preserving approach. */\n    lfs_file_opencfg_log_exit((const void*)lfs, (const void*)file, path, flags, (const void*)cfg, err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}