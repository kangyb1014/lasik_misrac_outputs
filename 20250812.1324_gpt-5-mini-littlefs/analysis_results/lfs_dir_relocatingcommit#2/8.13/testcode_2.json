{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts attrs[i].buffer (declared as const void *) to a non-const pointer type: (lfs_block_t *)attrs[i].buffer and then indexes it to read values. This discards the const qualifier. Rule 8.13 requires pointers to point to const-qualified types whenever possible; the correct form would be to use a const-qualified pointer, e.g. ((const lfs_block_t *)attrs[i].buffer)[0].\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/19.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Probe logging helpers: append human-readable logs to /tmp/logs/19.txt\n * These helpers are intentionally lightweight so they can be dropped into\n * the existing source without changing the logic of lfs_dir_relocatingcommit.\n */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/19.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void probe_log_enter(const lfs_block_t pair[2], int attrcount, lfs_mdir_t *dir) {\n    probe_log(\"ENTER lfs_dir_relocatingcommit: pair=[%llu,%llu], attrcount=%d, dir_count=%llu, dir_off=%llu, dir_etag=%u, dir_erased=%d\",\n            (unsigned long long)pair[0], (unsigned long long)pair[1], attrcount,\n            (unsigned long long)dir->count, (unsigned long long)dir->off,\n            (unsigned)dir->etag, (int)dir->erased);\n}\n\nstatic void probe_log_attr(int i, const struct lfs_mattr *a) {\n    probe_log(\"attr[%d]: tag=0x%08x, type3=%d, type1=%d, chunk=%d, id=%d, buffer=%p, size=%d\",\n            i, (unsigned)a->tag,\n            (int)lfs_tag_type3(a->tag), (int)lfs_tag_type1(a->tag),\n            (int)lfs_tag_chunk(a->tag), (int)lfs_tag_id(a->tag), a->buffer, a->size);\n}\n\nstatic void probe_log_tail_contents(int i, const struct lfs_mattr *a) {\n    /* Use a const-qualified pointer for logging to avoid discarding const */\n    const lfs_block_t *tailp = (const lfs_block_t *)a->buffer;\n    /* Guard in case buffer is NULL (defensive) */\n    if (tailp) {\n        probe_log(\"attr[%d] TAIL contents (const read): tail[0]=%llu, tail[1]=%llu\",\n                i, (unsigned long long)tailp[0], (unsigned long long)tailp[1]);\n    } else {\n        probe_log(\"attr[%d] TAIL contents: buffer is NULL\", i);\n    }\n}\n\nstatic void probe_log_after_loop(lfs_mdir_t *dir) {\n    probe_log(\"AFTER attr loop: dir_count=%llu, dir_tail=[%llu,%llu], dir_split=%d\",\n            (unsigned long long)dir->count,\n            (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1],\n            (int)dir->split);\n}\n\n/* Modified lfs_dir_relocatingcommit with inserted probes. Original logic preserved. */\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    /* Log entry state */\n    probe_log_enter(pair, attrcount, dir);\n\n    /* calculate changes to the directory */\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        probe_log_attr(i, &attrs[i]);\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n            probe_log(\"attr[%d] CREATE: incremented dir->count to %llu\", i,\n                    (unsigned long long)dir->count);\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n            probe_log(\"attr[%d] DELETE: decremented dir->count to %llu\", i,\n                    (unsigned long long)dir->count);\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            /* Log the contents using a const-qualified pointer to avoid discarding const */\n            probe_log_tail_contents(i, &attrs[i]);\n\n            /* Preserve original behavior (the reported violation originates here) */\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n\n            probe_log(\"attr[%d] TAIL applied (original assignment): dir->tail=[%llu,%llu], split=%d\",\n                    i, (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1], (int)dir->split);\n        }\n    }\n\n    probe_log_after_loop(dir);\n\n    /* should we actually drop the directory block? */\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        probe_log(\"hasdelete && dir->count==0: lfs_fs_pred returned %d, pdir->split=%d\",\n                err, (int)pdir->split);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            probe_log(\"Dropping directory: state set to LFS_OK_DROPPED, goto fixmlist\");\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        /* try to commit */\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        probe_log(\"dir->erased: attempting commit: commit.block=%llu, commit.off=%llu, commit.ptag=%u\",\n                (unsigned long long)commit.block, (unsigned long long)commit.off, (unsigned)commit.ptag);\n\n        /* traverse attrs that need to be written out */\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        probe_log(\"lfs_dir_traverse returned %d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                probe_log(\"lfs_dir_traverse returned NOSPC or CORRUPT, goto compact\");\n                goto compact;\n            }\n            return err;\n        }\n\n        /* commit any global diffs if we have any */\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        probe_log(\"computed delta.tag=0x%08x (after mask)\", (unsigned)delta.tag);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            probe_log(\"lfs_dir_getgstate returned %d\", err);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            probe_log(\"lfs_dir_commitattr (MOVESTATE) returned %d\", err);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    probe_log(\"lfs_dir_commitattr returned NOSPC or CORRUPT, goto compact\");\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        /* finalize commit with the crc */\n        err = lfs_dir_commitcrc(lfs, &commit);\n        probe_log(\"lfs_dir_commitcrc returned %d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                probe_log(\"lfs_dir_commitcrc returned NOSPC or CORRUPT, goto compact\");\n                goto compact;\n            }\n            return err;\n        }\n\n        /* successful commit, update dir */\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        /* and update gstate */\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        probe_log(\"commit successful: dir->off=%llu, dir->etag=%u\", (unsigned long long)dir->off, (unsigned)dir->etag);\n\n        goto fixmlist;\n    }\n\ncompact:\n    /* fall back to compaction */\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    probe_log(\"falling back to splitting compact\");\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    probe_log(\"lfs_dir_splittingcompact returned %d\", state);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    /* this complicated bit of logic is for fixing up any active\n     * metadata-pairs that we may have affected\n     */\n    /*\n     * note we have to make two passes since the mdir passed to\n     * lfs_dir_commit could also be in this list, and even then\n     * we need to copy the pair so they don't get clobbered if we refetch\n     * our mdir.\n     */\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    probe_log(\"Entering fixmlist: oldpair=[%llu,%llu]\", (unsigned long long)oldpair[0], (unsigned long long)oldpair[1]);\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            probe_log(\"fixmlist: matched mlist entry with id=%d, type=%d, m.count=%llu, m.split=%d\", d->id, d->type, (unsigned long long)d->m.count, (int)d->m.split);\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        probe_log(\"fixmlist: attr[%d] DELETE affecting non-dir, setting d->m.pair to NULL\", i);\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        probe_log(\"fixmlist: attr[%d] DELETE shifting id down (was %d)\", i, d->id);\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                            probe_log(\"fixmlist: decremented dir pos to %llu\", (unsigned long long)((lfs_dir_t*)d)->pos);\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        probe_log(\"fixmlist: attr[%d] CREATE shifting id up (was %d)\", i, d->id);\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                            probe_log(\"fixmlist: incremented dir pos to %llu\", (unsigned long long)((lfs_dir_t*)d)->pos);\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                /* we split and id is on tail now */\n                probe_log(\"fixmlist: id >= m.count and m.split, id=%d, m.count=%llu\", d->id, (unsigned long long)d->m.count);\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                    probe_log(\"fixmlist: adjusted id for tail to %d\", d->id);\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                probe_log(\"lfs_dir_fetch returned %d while fetching tail\", err);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    probe_log(\"EXIT lfs_dir_relocatingcommit: returning state=%d\", state);\n    return state;\n}\n"
}