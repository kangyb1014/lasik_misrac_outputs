{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); passes non-const pointers to lfs_mlist_isopen even though that function only reads the list and node. lfs_mlist_isopen could and should take const-qualified parameters (e.g. const struct lfs_mlist *head, const struct lfs_mlist *node). Casting file to a non-const struct lfs_mlist* hides the missing const qualification. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/67.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probe logging helpers. Use const-qualified pointers to avoid introducing\n * additional const-correctness violations. These functions append useful\n * runtime information to /tmp/logs/67.txt so other agents can reproduce\n * and get evidence of the scenario where a non-const cast is used.\n */\nstatic void lfs_log_probe(const char *stage, const void *lfs, const void *file) {\n    FILE *fp = fopen(\"/tmp/logs/67.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    fprintf(fp, \"[lfs_file_sync] stage=%s, lfs=%p, file=%p\\n\", stage, lfs, file);\n\n    if (file != NULL) {\n        /* dump first 32 bytes of the file structure to give state information */\n        const unsigned char *p = (const unsigned char *)file;\n        fprintf(fp, \"[lfs_file_sync] file bytes:\");\n        for (size_t i = 0; i < 32; i++) {\n            /* Print hex bytes; do not assume any particular structure layout */\n            fprintf(fp, \" %02x\", (unsigned)p[i]);\n        }\n        fprintf(fp, \"\\n\");\n    } else {\n        fprintf(fp, \"[lfs_file_sync] file is NULL\\n\");\n    }\n\n    fclose(fp);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Preserve original trace call */\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Log state before the call that casts away const-qualification. */\n    lfs_log_probe(\"before_mlist_isopen_cast\", lfs, file);\n\n    /* Original assertion left intact to preserve logic. */\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log that assertion passed and we're about to enter the internal sync. */\n    lfs_log_probe(\"after_mlist_isopen_cast\", lfs, file);\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    /* Log final state and result before unlock to capture return path. */\n    lfs_log_probe(\"before_unlock\", lfs, file);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}