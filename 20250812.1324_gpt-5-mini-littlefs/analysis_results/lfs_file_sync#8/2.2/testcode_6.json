{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined empty (#define LFS_TRACE(__VA_ARGS__)). Calls like LFS_TRACE(\"lfs_file_sync(%p, %p)\", ...) in the code thus expand to a null statement (a standalone ';') that executes but has no effect; removing these statements would not change program behaviour. Therefore with the provided definition this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/66.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function: append formatted logs to /tmp/logs/66.txt */\nstatic void lfs_probe_printf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/66.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log after attempting lock to capture control-flow and state */\n    lfs_probe_printf(\"lfs_file_sync: entered -- lfs=%p file=%p after LFS_LOCK err=%d\",\n                     (void*)lfs, (void*)file, err);\n\n    if (err) {\n        lfs_probe_printf(\"lfs_file_sync: early return due to lock error=%d\", err);\n        return err;\n    }\n\n    /* Preserve original trace call (may be a no-op) */\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    /* Additional probe to record that the trace site was reached */\n    lfs_probe_printf(\"lfs_file_sync: TRACE site reached -- lfs=%p file=%p\",\n                     (void*)lfs, (void*)file);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n    lfs_probe_printf(\"lfs_file_sync: assertion checked for file=%p\", (void*)file);\n\n    err = lfs_file_sync_(lfs, file);\n    lfs_probe_printf(\"lfs_file_sync: after lfs_file_sync_ returned err=%d\", err);\n\n    /* Preserve original trace call (may be a no-op) */\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    /* Probe the trace return site */\n    lfs_probe_printf(\"lfs_file_sync: TRACE return site reached with err=%d\", err);\n\n    lfs_probe_printf(\"lfs_file_sync: about to unlock cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_printf(\"lfs_file_sync: unlocked cfg=%p and returning err=%d\",\n                     (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}