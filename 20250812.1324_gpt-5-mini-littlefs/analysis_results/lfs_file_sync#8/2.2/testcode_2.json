{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to lfs_mlist_isopen is only used inside LFS_ASSERT (which is defined as assert(test)). lfs_mlist_isopen has no observable side-effects (it only returns a bool). When assertions are disabled (e.g. NDEBUG defined) the assert (and thus the call) is removed, and even when enabled the call only checks a condition and produces no effect when the condition is true. Therefore the executed operation (the call inside the assert) can be removed without affecting normal program behaviour, which constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/66.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/66.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/66.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_log_probe(\"lfs_file_sync: LFS_LOCK failed, err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n\n#ifdef NDEBUG\n    /* When NDEBUG is defined, asserts are removed and the call inside\n       LFS_ASSERT is not executed. Record this fact for evidence. */\n    lfs_log_probe(\"lfs_file_sync: NDEBUG defined -> assertions disabled;\"\n                  \" lfs_mlist_isopen call inside LFS_ASSERT will be omitted\");\n#else\n    /* When assertions are enabled, call lfs_mlist_isopen and log the result.\n       This mirrors the call that LFS_ASSERT will make, providing visibility\n       into the condition checked by the assertion. */\n    {\n        int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n        lfs_log_probe(\"lfs_file_sync: assertion check -> lfs_mlist_isopen returned %d\", isopen);\n    }\n#endif\n\n    /* Keep original assertion (preserve logic). When assertions are disabled\n       the call below will be removed by the preprocessor; our logging above\n       documents which case was compiled. */\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    lfs_log_probe(\"lfs_file_sync: lfs_file_sync_ returned %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"lfs_file_sync: LFS_UNLOCK called, returning %d\", err);\n    return err;\n}\n"
}