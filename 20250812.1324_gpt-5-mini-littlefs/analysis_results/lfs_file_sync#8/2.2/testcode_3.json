{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); evaluates lfs->cfg (which has no side effects) and then discards the result. Removing this statement would not change program behaviour in the given project configuration, therefore it is an executed no-op and constitutes dead code. (If the macro were defined differently in other build configurations to perform actual unlocking, it would not be dead; but with the provided definition it violates Rule 2.2.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/66.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append logs to /tmp/logs/66.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/66.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure and state */\n        lfs_probe_log(\"lfs_file_sync: LFS_LOCK failed -> %d; lfs=%p, file=%p, cfg=%p\",\n                      err, (void*)lfs, (void*)file, (void*)lfs->cfg);\n        return err;\n    }\n\n    /* Entry probe: log pointers so callers can observe the evaluated cfg pointer */\n    lfs_probe_log(\"lfs_file_sync: ENTRY; lfs=%p, file=%p, cfg=%p\",\n                  (void*)lfs, (void*)file, (void*)lfs->cfg);\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    /* Log result of internal sync */\n    lfs_probe_log(\"lfs_file_sync: lfs_file_sync_ returned %d; lfs=%p, file=%p, cfg=%p\",\n                  err, (void*)lfs, (void*)file, (void*)lfs->cfg);\n\n    /* Capture state immediately before and after the unlock call so reviewers can\n       see that evaluating lfs->cfg and calling LFS_UNLOCK produces no observable\n       change in the logged state for the provided configuration. */\n    lfs_probe_log(\"lfs_file_sync: before LFS_UNLOCK; cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_file_sync: after  LFS_UNLOCK; cfg=%p\", (void*)lfs->cfg);\n\n    return err;\n}\n"
}