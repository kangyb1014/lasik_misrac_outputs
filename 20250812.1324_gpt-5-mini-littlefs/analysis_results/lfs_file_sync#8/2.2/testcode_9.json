{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement int err = LFS_LOCK(lfs->cfg); invokes the macro LFS_LOCK which is defined as ((void)cfg, 0). This always yields 0, so the subsequent if (err) check can never be true and the call has no effect on program behaviour in the given build. Therefore the operation is executed but its removal would not change behaviour (aside from timing), which meets the definition of dead code in MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/66.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state to /tmp/logs/66.txt. */\nstatic void lfs_probe_log_lock(const void *lfs, const void *file, const char *point, int err) {\n    FILE *f = fopen(\"/tmp/logs/66.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log the probe point, pointers involved, and the lock result. */\n    fprintf(f, \"%s: lfs=%p file=%p LFS_LOCK_result=%d\\n\", point, lfs, file, err);\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original logic: evaluate LFS_LOCK exactly as before. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe right after the lock evaluation to capture the value returned by LFS_LOCK. */\n    lfs_probe_log_lock(lfs, file, \"after_LFS_LOCK\", err);\n\n    if (err) {\n        /* Log that we are taking the early return path due to lock error. */\n        lfs_probe_log_lock(lfs, file, \"early_return_due_to_lock\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    /* Probe before unlocking to capture the result of the sync operation. */\n    lfs_probe_log_lock(lfs, file, \"before_LFS_UNLOCK\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe after unlock to capture final state just before return. */\n    lfs_probe_log_lock(lfs, file, \"after_LFS_UNLOCK\", err);\n\n    return err;\n}\n"
}