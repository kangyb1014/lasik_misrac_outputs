{
  "user_message": "An agent A claimed that the following lfs_fs_grow code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of lfs_fs_grow.\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In lfs_fs_grow_ the parameter 'block_count' is passed by address (&block_count) to lfs_fs_traverse_ (err = lfs_fs_traverse_(lfs, lfs_shrink_checkblock, &block_count, true);). That allows the called function (or the callback lfs_shrink_checkblock) to modify the object referred to by the parameter, which results in modifying the function parameter 'block_count' itself. This constitutes a violation of MISRA C 2023 Rule 17.8.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/197.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Trace entry as original code */\n    LFS_TRACE(\"lfs_fs_grow(%p, %\" PRIu32 \")\", (void*)lfs, block_count);\n\n    /* Probe: record incoming value and address of the parameter so callers\n       / other agents can observe whether the object referred to by this\n       parameter gets modified by callees. We do not modify block_count. */\n    lfs_probe_log(\"[probe] enter lfs_fs_grow: lfs=%p, block_count=%\" PRIu32 \", addr=%p\",\n                  (void*)lfs, block_count, (void*)&block_count);\n\n    /* Call the underlying implementation (preserve original logic) */\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Probe: record return value and the post-call value/address of the\n       parameter to capture any changes to the object referred to (if any).\n       This helps reproduce scenarios where a callee takes the address of\n       its own parameter and that object is modified further down the call\n       chain. */\n    lfs_probe_log(\"[probe] exit lfs_fs_grow: err=%d, block_count=%\" PRIu32 \", addr=%p\",\n                  err, block_count, (void*)&block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for lfs_fs_grow. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A is incorrect as stated. The shown lfs_fs_grow function does not modify its parameter block_count and does not take its address, so lfs_fs_grow itself does not violate MISRA C 2023 Rule 17.8. The scenario described by Agent A refers to lfs_fs_grow_ taking the address of its own parameter and passing it to another function which may modify the pointee. If lfs_fs_grow_ actually does take &block_count and that object is modified by a callee, then lfs_fs_grow_ would violate Rule 17.8 (the rule forbids modifying a function parameter \u2014 modifying it indirectly through a pointer to the parameter is still a modification). Note also the pointer-parameter exception in the rule does not apply here because the parameter in question is a non\u2011pointer scalar. To fix such a violation the callee should operate on a local copy (e.g. lfs_size_t bc_copy = block_count; pass &bc_copy) or the code should be refactored so that the function parameter itself is not modified."
}