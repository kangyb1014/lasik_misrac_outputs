{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_fs_grow the statement `int err = LFS_LOCK(lfs->cfg);` becomes `int err = ((void)lfs->cfg, 0);` so err is always 0. Therefore the subsequent branch `if (err) { return err; }` can never be taken and is unreachable code in this project configuration (LFS_LOCK always yields 0).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/193.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append control-flow and state information to /tmp/logs/193.txt */\nstatic void lfs_grow_probe(const char *event, const void *lfs_ptr, unsigned long block_count, int err) {\n    FILE *f = fopen(\"/tmp/logs/193.txt\", \"a\");\n    if (f) {\n        /* log event, pointer, block_count and err (if known) */\n        fprintf(f, \"%s: lfs=%p block_count=%lu err=%d\\n\", event, lfs_ptr, block_count, err);\n        fclose(f);\n    }\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* Log just before attempting to lock */\n    lfs_grow_probe(\"entering_lfs_fs_grow_before_lock\", (void*)lfs, (unsigned long)block_count, -1);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock call */\n    lfs_grow_probe(\"after_LFS_LOCK\", (void*)lfs, (unsigned long)block_count, err);\n\n    if (err) {\n        /* If this branch is ever taken, record it (evidence of non-zero lock) */\n        lfs_grow_probe(\"LFS_LOCK_returned_error\", (void*)lfs, (unsigned long)block_count, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    /* Log just before calling the internal grow implementation */\n    lfs_grow_probe(\"before_lfs_fs_grow_\", (void*)lfs, (unsigned long)block_count, 0);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Log result from internal grow function */\n    lfs_grow_probe(\"after_lfs_fs_grow_\", (void*)lfs, (unsigned long)block_count, err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlock and before returning */\n    lfs_grow_probe(\"exiting_lfs_fs_grow\", (void*)lfs, (unsigned long)block_count, err);\n    return err;\n}\n"
}