{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg). Calls such as LFS_UNLOCK(lfs->cfg); in lfs_dir_close expand to a no-op cast that has no effect at runtime; removing the call does not change program behaviour. Therefore the executed operation is dead code (it is an operation whose removal would not affect program behaviour).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/26.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helpers: append textual logs to /tmp/logs/26.txt */\nstatic void lfs_probe_logf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void lfs_probe_dump_cfg(const char *label, const void *cfg) {\n    FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s cfg=%p\", label, cfg);\n    if (cfg == NULL) {\n        fprintf(f, \"\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Dump up to first 16 bytes of cfg to observe any changes before/after LFS_UNLOCK */\n    const unsigned char *p = (const unsigned char *)cfg;\n    fprintf(f, \" bytes=\");\n    for (size_t i = 0; i < 16; i++) {\n        /* print even if reading past some intended object layout; this is for observational logging only */\n        fprintf(f, \" %02x\", (unsigned int)p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with probes inserted to capture control flow and state around LFS_UNLOCK */\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Perform the original lock first to preserve original behavior/order of side-effects */\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the failed lock and return as original would */\n        lfs_probe_logf(\"lfs_dir_close: LFS_LOCK failed err=%d lfs=%p cfg=%p\", err, (void*)lfs, (void*)(lfs ? lfs->cfg : NULL));\n        return err;\n    }\n\n    /* Log that lock succeeded and capture a snapshot of cfg bytes before further operations */\n    lfs_probe_logf(\"lfs_dir_close: LFS_LOCK succeeded lfs=%p cfg=%p\", (void*)lfs, (void*)(lfs ? lfs->cfg : NULL));\n    lfs_probe_dump_cfg(\"lfs_dir_close: cfg_before_dir_close_\", (lfs ? (void*)lfs->cfg : NULL));\n\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    lfs_probe_logf(\"lfs_dir_close: lfs_dir_close_ returned %d\", err);\n\n    /* Capture the cfg state immediately before the unlock call */\n    lfs_probe_dump_cfg(\"lfs_dir_close: cfg_before_unlock\", (lfs ? (void*)lfs->cfg : NULL));\n\n    /* The call below is the reported no-op in the violation scenario. Keep it to preserve logic. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Capture the cfg state immediately after the unlock call to demonstrate no change */\n    lfs_probe_dump_cfg(\"lfs_dir_close: cfg_after_unlock\", (lfs ? (void*)lfs->cfg : NULL));\n\n    return err;\n}\n"
}