{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK is defined as #define LFS_UNLOCK(cfg) ((void)cfg). In the function, the statement LFS_UNLOCK(lfs->cfg); therefore expands to a no-op that only casts lfs->cfg to void and has no side-effects. Removing this statement would not change program behaviour in the provided configuration, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/26.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Probe: log early return due to lock failure */\n        FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_close: early return (LFS_LOCK failed) err=%d lfs=%p dir=%p cfg=%p\\n\",\n                    err, (void*)lfs, (void*)dir, (void*)lfs->cfg);\n            fclose(f);\n        }\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n\n    /* Probe: log state immediately before calling LFS_UNLOCK */\n    {\n        FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_close: before LFS_UNLOCK err=%d lfs=%p dir=%p cfg=%p\\n\",\n                    err, (void*)lfs, (void*)dir, (void*)lfs->cfg);\n            fclose(f);\n        }\n    }\n\n    /* Original call preserved exactly to maintain behaviour */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: log state immediately after calling LFS_UNLOCK to show any change (or lack thereof) */\n    {\n        FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_close: after  LFS_UNLOCK err=%d lfs=%p dir=%p cfg=%p\\n\",\n                    err, (void*)lfs, (void*)dir, (void*)lfs->cfg);\n            fclose(f);\n        }\n    }\n\n    return err;\n}\n"
}