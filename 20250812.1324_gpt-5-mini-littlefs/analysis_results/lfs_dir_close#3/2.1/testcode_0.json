{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nGiven the project definitions, LFS_LOCK(cfg) is a macro that expands to the constant expression ((void)cfg, 0). Thus err is always 0 and the condition if (err) is always false. The statement 'return err;' inside that if-block is therefore unreachable in this project configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/25.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Helper probe that appends diagnostic messages to /tmp/logs/25.txt.\n   Attempts to create the directory if necessary. Keeps behavior separate\n   from original logic; does not change program control flow. */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    /* best-effort create directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/25.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry state: pointers and returned lock value. This will show\n       that err is 0 when LFS_LOCK expands to ((void)cfg, 0). */\n    lfs_log_probe(\"ENTRY lfs_dir_close: lfs=%p, dir=%p, cfg=%p, LFS_LOCK->%d\",\n                  (void*)lfs, (void*)dir, (void*)lfs->cfg, err);\n\n    if (err) {\n        /* If this branch is ever taken, we record it before returning. */\n        lfs_log_probe(\"BRANCH_TAKEN lfs_dir_close: err=%d -> returning\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    /* Log result of inner close and state before unlock. */\n    lfs_log_probe(\"AFTER_CALL lfs_dir_close_: err=%d, lfs=%p, dir=%p\",\n                  err, (void*)lfs, (void*)dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_probe(\"EXIT lfs_dir_close: returning %d\", err);\n    return err;\n}\n"
}