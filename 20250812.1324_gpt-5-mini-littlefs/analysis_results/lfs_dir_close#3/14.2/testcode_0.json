{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop defines the loop counter as 'p' (struct lfs_mlist **p). However the second clause uses '*p' (the pointed-to list node) rather than the loop counter identifier 'p', and the loop body assigns to '*p' when removing the node. The third clause also evaluates '(*p)->next' (dereferencing *p). Both the second and third clauses therefore use an object that is modified in the loop body (the object denoted by *p), which violates the requirement that the second clause must not use objects modified in the loop body and that the third clause must not use objects modified in the loop body. Consequently Rule 14.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/28.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Helper probe: append structured logs to /tmp/logs/28.txt. Keep very small and\n       safe: log pointer values, timestamps, a small hexdump of the start of 'dir'\n       (if non-NULL), and frame/return addresses to help reproduce control flow. */\n    static void lfs_dir_close_log(const char *phase, lfs_t *lfs_arg, lfs_dir_t *dir_arg, int errval) {\n        FILE *f = fopen(\"/tmp/logs/28.txt\", \"a\");\n        if (!f) {\n            return;\n        }\n        time_t t = time(NULL);\n        void *frame = __builtin_frame_address(0);\n        void *ret  = __builtin_return_address(0);\n\n        fprintf(f, \"[%ld] lfs_dir_close %s: lfs=%p dir=%p err=%d frame=%p ret=%p\\n\",\n                (long)t, phase, (void*)lfs_arg, (void*)dir_arg, errval, frame, ret);\n\n        if (dir_arg != NULL) {\n            /* Safe small hexdump of the first 16 bytes of the dir structure\n               to provide some evidence about the pointed-to object without\n               depending on its type layout. */\n            unsigned char *bytes = (unsigned char*)dir_arg;\n            fprintf(f, \"  dir[0..15]:\");\n            for (int i = 0; i < 16; i++) {\n                /* Protect against potential invalid reads by using a simple\n                   volatile access to avoid some optimizer reorderings. */\n                volatile unsigned char v = bytes[i];\n                fprintf(f, \" %02x\", (unsigned)v);\n            }\n            fprintf(f, \"\\n\");\n        }\n\n        fflush(f);\n        fclose(f);\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to acquire lock */\n        lfs_dir_close_log(\"lock-failed\", lfs, dir, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Log just before calling the underlying implementation. This will give\n       callers and analysts a snapshot of the 'dir' pointer and nearby bytes\n       so they can correlate with any internal for-loop behaviour observed\n       later (e.g. list node addresses). */\n    lfs_dir_close_log(\"before-call\", lfs, dir, 0);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    /* Log immediately after the call with returned error code. */\n    lfs_dir_close_log(\"after-call\", lfs, dir, err);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}