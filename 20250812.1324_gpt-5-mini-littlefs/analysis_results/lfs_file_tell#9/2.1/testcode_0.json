{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided build, LFS_LOCK(cfg) is defined as ((void)cfg, 0), so err is always 0. Consequently the condition if (err) is always false and the branch return err; can never be executed (unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: append logs to /tmp/logs/73.txt. Keeps side-effects minimal. */\nstatic void lfs_probe_log(const char *label, void *lfs_ptr, void *file_ptr, int err, int32_t res32) {\n    FILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log label, pointers, lock error value and result (as 32-bit value). */\n    fprintf(f, \"%s: lfs=%p file=%p err=%d res=%\" PRId32 \"\\n\",\n            label, lfs_ptr, file_ptr, err, res32);\n    fclose(f);\n}\n\n/* Modified lfs_file_tell with injected probes. Original logic preserved. */\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Record the value returned by LFS_LOCK and the pointers involved. */\n    lfs_probe_log(\"lfs_file_tell: after LFS_LOCK\", (void*)lfs, (void*)file, err, 0);\n\n    if (err) {\n        /* If the lock indicated an error, log and return the error as before. */\n        lfs_probe_log(\"lfs_file_tell: lock error, returning\", (void*)lfs, (void*)file, err, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n\n    lfs_probe_log(\"lfs_file_tell: lock ok, before assert/tell_\", (void*)lfs, (void*)file, err, 0);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    /* Cast res to int32_t for consistent logging with PRId32 used elsewhere. */\n    lfs_probe_log(\"lfs_file_tell: after lfs_file_tell_\", (void*)lfs, (void*)file, 0, (int32_t)res);\n\n    LFS_TRACE(\"lfs_file_tell -> %\" PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"lfs_file_tell: after LFS_UNLOCK, returning\", (void*)lfs, (void*)file, 0, (int32_t)res);\n    return res;\n}\n"
}