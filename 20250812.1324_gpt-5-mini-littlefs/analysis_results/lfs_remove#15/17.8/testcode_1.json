{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_remove_(lfs_t *lfs, const char *path) passes the address of the pointer parameter (&path) to lfs_dir_find:\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\nThis allows lfs_dir_find to modify the pointer variable 'path' itself (reassign it), not just the object it points to. Modifying the pointer parameter violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/125.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\n/*\n * Probe function to append diagnostic logs to /tmp/logs/125.txt.\n * This does not change the logic of lfs_remove and does not modify\n * any of its parameters. It only reads values and writes them to a file\n * so other agents can inspect addresses and values involved in the call.\n */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/125.txt\", \"a\");\n    if (!f) {\n        /* try to create directory and reopen */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/125.txt\", \"a\");\n    }\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the lock failure and the parameter state before returning */\n        lfs_log_probe(\"lfs_remove: LFS_LOCK failed -> %d (lfs=%p, path=%p, &path=%p, path_str=%s)\",\n            err, (void*)lfs, (void*)path, (const void *)&path, (path ? path : \"(null)\"));\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Log the incoming parameter state and the address of the local parameter\n       so that other agents can correlate any modifications observed in deeper\n       stack frames (e.g. inside lfs_remove_ or helpers) to this frame. */\n    lfs_log_probe(\"lfs_remove: before lfs_remove_ (lfs=%p, path=%p, &path=%p, path_str=%s)\",\n        (void*)lfs, (void*)path, (const void *)&path, (path ? path : \"(null)\"));\n\n    err = lfs_remove_(lfs, path);\n\n    /* Log the return value and the same parameter state after the call */\n    lfs_log_probe(\"lfs_remove: after lfs_remove_ -> err=%d (lfs=%p, path=%p, &path=%p, path_str=%s)\",\n        err, (void*)lfs, (void*)path, (const void *)&path, (path ? path : \"(null)\"));\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}