{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the code passes &path (the address of the function parameter 'path') to lfs_dir_find, allowing the callee to write through that pointer (e.g. *path = new_ptr), which would modify the parameter variable itself. MISRA C 2023 Rule 17.8 forbids modifying function parameters (the pointer object itself), so this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/125.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: logs the address of the parameter variable, its value, and\n   a short prefix of the pointed-to string to /tmp/logs/125.txt.  The helper\n   will not modify the parameter or the pointed-to object. */\nstatic void probe_log_path_state(const char *stage, const char * const *pathp) {\n    if (stage == NULL || pathp == NULL) {\n        return;\n    }\n\n    /* Ensure the directory exists (best-effort). Ignore errors other than\n       the case where it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/125.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    const char *p = *pathp; /* read-only view of the parameter's value */\n\n    /* Write stage and pointer information */\n    fprintf(f, \"%s: address_of_path_var=%p, path_value=%p\", stage,\n            (void *)pathp, (void *)p);\n\n    /* Safely copy a short prefix of the pointed-to string for context */\n    if (p == NULL) {\n        fprintf(f, \", path_contents=NULL\\n\");\n    } else {\n        size_t maxlen = 96;\n        size_t i = 0;\n        /* manual safe length calculation to avoid non-portable functions */\n        while (i < maxlen && p[i] != '\\0') {\n            ++i;\n        }\n        if (i == 0) {\n            fprintf(f, \", path_contents=\\\"\\\"\\n\");\n        } else {\n            char buf[97];\n            memcpy(buf, p, i);\n            buf[i] = '\\0';\n            /* Replace newlines to keep log lines single-line */\n            for (size_t j = 0; j < i; ++j) {\n                if (buf[j] == '\\n' || buf[j] == '\\r') {\n                    buf[j] = '?';\n                }\n            }\n            fprintf(f, \", path_contents=\\\"%s\\\"\\n\", buf);\n        }\n    }\n\n    fclose(f);\n}\n\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early-return scenario and state of the parameter 'path' */\n        probe_log_path_state(\"lfs_remove: early return (LFS_LOCK failed)\", &path);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Log the state of the 'path' parameter right before delegating. This\n       will capture the address of the parameter variable and the value it\n       holds so that any modification to the parameter itself (e.g. via\n       passing &path into a callee that writes through it) can be detected\n       by comparing pre/post logs. */\n    probe_log_path_state(\"lfs_remove: before lfs_remove_\", &path);\n\n    err = lfs_remove_(lfs, path);\n\n    /* Log the state immediately after the delegated call to detect if the\n       parameter variable 'path' was modified by the callee (evidence of the\n       scenario described). */\n    probe_log_path_state(\"lfs_remove: after lfs_remove_\", &path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}