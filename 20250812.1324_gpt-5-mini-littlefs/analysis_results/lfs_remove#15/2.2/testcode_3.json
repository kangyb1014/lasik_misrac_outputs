{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to '((void)cfg)', which performs no observable action. In lfs_remove the call LFS_UNLOCK(lfs->cfg); therefore executes an operation that has no effect on program behaviour \u2014 removing that call (or replacing the macro with nothing) would not change program semantics. This is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/122.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Minimal stubs of the filesystem structures used by lfs_remove. */\ntypedef struct lfs_cfg {\n    int locked;    /* represents whether the cfg is logically locked */\n    int state;     /* arbitrary state to demonstrate no change */\n} lfs_cfg;\n\ntypedef struct lfs {\n    lfs_cfg *cfg;\n} lfs_t;\n\n/* Utility: append a formatted log line to /tmp/logs/122.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = NULL;\n\n    /* Ensure the directory exists. Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/122.txt\", \"a\");\n    if (f == NULL) {\n        /* If we cannot open the file, fail silently (so this probe doesn't\n           introduce additional program failure modes). */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Minimal tracing function used in the original code. */\nstatic void LFS_TRACE(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Reuse probe_log to write trace messages. */\n    {\n        char buf[512];\n        vsnprintf(buf, sizeof(buf), fmt, ap);\n        probe_log(\"TRACE: %s\", buf);\n    }\n\n    va_end(ap);\n}\n\n/* Simulated lock function. Returns 0 on success, non-zero on error. */\nstatic int LFS_LOCK(lfs_cfg *cfg)\n{\n    if (cfg == NULL) {\n        probe_log(\"LFS_LOCK: cfg is NULL -> error\");\n        return -1;\n    }\n    cfg->locked = 1;\n    probe_log(\"LFS_LOCK: cfg=%p locked=%d state=%d\", (void*)cfg, cfg->locked, cfg->state);\n    return 0;\n}\n\n/* Simulate the problematic unlock macro which in the target expands to '((void)cfg)'.\n   Here we implement it as a function that performs no state change. We still log the\n   call and, crucially for the violation scenario, we log the state before and after\n   the call in lfs_remove to demonstrate that no observable state changed. */\nstatic void LFS_UNLOCK(lfs_cfg *cfg)\n{\n    /* Intentionally do not modify cfg->locked or any state to simulate a no-op. */\n    probe_log(\"LFS_UNLOCK called with cfg=%p (no-op)\", (void*)cfg);\n    (void)cfg;\n}\n\n/* Minimal implementation of the internal remove function. Keep behaviour simple. */\nstatic int lfs_remove_(lfs_t *lfs, const char *path)\n{\n    /* For the purpose of this test stub, simulate success. */\n    LFS_TRACE(\"lfs_remove_: performing remove on '%s' (simulated)\", path);\n    /* We might inspect the cfg here in a real implementation; leave it unchanged. */\n    return 0;\n}\n\n/* Modified lfs_remove with inserted probes around LFS_UNLOCK to capture the control\n   path and state information relevant to the violation scenario. The original logic\n   is preserved: locking, calling the internal remove, tracing, unlocking, and\n   returning the error code. */\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n\n    /* Probe: record state immediately before the unlock call. */\n    if (lfs && lfs->cfg) {\n        probe_log(\"BEFORE_UNLOCK: cfg=%p locked=%d state=%d\", (void*)lfs->cfg, lfs->cfg->locked, lfs->cfg->state);\n    } else {\n        probe_log(\"BEFORE_UNLOCK: lfs or cfg is NULL (lfs=%p, cfg=%p)\", (void*)lfs, lfs ? (void*)lfs->cfg : NULL);\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: record state immediately after the unlock call to demonstrate no change. */\n    if (lfs && lfs->cfg) {\n        probe_log(\"AFTER_UNLOCK: cfg=%p locked=%d state=%d\", (void*)lfs->cfg, lfs->cfg->locked, lfs->cfg->state);\n    } else {\n        probe_log(\"AFTER_UNLOCK: lfs or cfg is NULL (lfs=%p, cfg=%p)\", (void*)lfs, lfs ? (void*)lfs->cfg : NULL);\n    }\n\n    return err;\n}\n"
}