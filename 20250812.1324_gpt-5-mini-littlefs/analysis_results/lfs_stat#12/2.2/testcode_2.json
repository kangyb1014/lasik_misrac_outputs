{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(lfs->cfg); macro expands to ((void)lfs->cfg); which only evaluates and discards lfs->cfg. This is a no-op (no state change or observable effect for non-volatile objects), so removing that statement would not affect program behaviour \u2014 it is therefore dead code and violates Rule 2.2. (Caveat: if the evaluated expression had observable side-effects, e.g. reading a volatile object, then its evaluation would be observable and it would not be dead; in the shown code lfs->cfg is a plain member access, so the no-op stands.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/98.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helper: append a log entry with useful state information to /tmp/logs/98.txt */\nstatic void lfs_probe_log(const char *event, lfs_t *lfs, const char *path,\n                          struct lfs_info *info, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/98.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    /* Note: print pointer values and simple scalars only to avoid assumptions about structure layout. */\n    fprintf(f, \"[%ld] lfs_stat probe: event=%s, lfs=%p, path=%s, info=%p, err=%d, cfg=%p\\n\",\n            (long)t, event, (void*)lfs, (path?path:\"(null)\"), (void*)info, err,\n            (void*)(lfs ? lfs->cfg : NULL));\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to acquire lock */\n        lfs_probe_log(\"lock_failed\", lfs, path, info, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log state just before performing the core stat operation */\n    lfs_probe_log(\"before_stat\", lfs, path, info, 0);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n\n    /* Log state immediately before unlocking to capture the cfg pointer and other context. */\n    lfs_probe_log(\"before_unlock\", lfs, path, info, err);\n\n    /* The unlock is the debated statement. We keep it to preserve original logic but\n       add a probe immediately after to demonstrate whether any observable effect occurs. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log state immediately after unlocking to show there is no observable change to cfg (if any). */\n    lfs_probe_log(\"after_unlock\", lfs, path, info, err);\n\n    return err;\n}\n"
}