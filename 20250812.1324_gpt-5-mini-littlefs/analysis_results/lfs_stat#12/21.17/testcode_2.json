{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strspn(name, \"/\") where name is derived from the caller-supplied const char *path without any explicit bounds/length check. If path does not point to a null-terminated string wholly contained within the accessible object (for example, path points to a buffer whose terminating '\\0' lies beyond the allocated object, or path points into the last byte of an object that is not NUL-terminated), strspn will read bytes past the object boundary searching for '\\0'. This can result in out-of-bounds accesses (undefined behavior). The code does not validate the maximum length of path, so this use can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Probe log helper: append a line to the log file. Keep minimal operations to avoid\n       introducing new undefined behaviour (do not dereference 'path'). */\n    FILE *log = NULL;\n    time_t now = time(NULL);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    log = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"[%ld] ENTER lfs_stat: lfs=%p, path=%p, info=%p, lock_err=%d\\n\",\n                (long)now, (void*)lfs, (void*)path, (void*)info, err);\n        if (path == NULL) {\n            fprintf(log, \"[%ld] path is NULL\\n\", (long)now);\n        } else {\n            /* We deliberately do NOT dereference 'path' here to avoid introducing a new\n               out-of-bounds read. We only log that the pointer is non-NULL so callers\n               can correlate pointer values with any later findings. */\n            fprintf(log, \"[%ld] path is non-NULL (pointer value logged), not dereferenced\\n\", (long)now);\n        }\n        fclose(log);\n        log = NULL;\n    }\n\n    if (err) {\n        return err;\n    }\n\n    /* Preserve original trace call (may already exist in the codebase). */\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log just before calling the underlying implementation. */\n    log = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"[%ld] Calling lfs_stat_ with lfs=%p, path=%p, info=%p\\n\",\n                (long)time(NULL), (void*)lfs, (void*)path, (void*)info);\n        fclose(log);\n        log = NULL;\n    }\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log return from underlying implementation. */\n    log = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"[%ld] lfs_stat_ returned %d for lfs=%p, path=%p, info=%p\\n\",\n                (long)time(NULL), err, (void*)lfs, (void*)path, (void*)info);\n        fclose(log);\n        log = NULL;\n    }\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    log = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"[%ld] EXIT lfs_stat: unlocked, return=%d\\n\", (long)time(NULL), err);\n        fclose(log);\n    }\n\n    return err;\n}\n"
}