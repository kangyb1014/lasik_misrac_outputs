{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes info->name (size LFS_NAME_MAX+1) as the destination buffer and requests a copy length of lfs->name_max+1. If lfs->name_max > LFS_NAME_MAX (i.e. the runtime/configured maximum name length exceeds the compile-time buffer LFS_NAME_MAX), the copy performed inside lfs_dir_get (which will use string/memory routines) can write more bytes than info->name can hold, causing out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe helper: append useful logs to /tmp/logs/103.txt */\nstatic void lfs_log_probe(lfs_t *lfs, const char *path, struct lfs_info *info, const char *phase) {\n    FILE *fp = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    fprintf(fp, \"--- lfs_stat probe: %s ---\\n\", phase);\n    fprintf(fp, \"lfs ptr: %p\\n\", (void*)lfs);\n    fprintf(fp, \"path ptr: %p\\n\", (void*)path);\n    fprintf(fp, \"path string: %s\\n\", (path ? path : \"(null)\"));\n    fprintf(fp, \"info ptr: %p\\n\", (void*)info);\n\n    if (lfs) {\n        /* log runtime/configured max name size if available on struct */\n        /* cast to unsigned long for safe printing of integral types */\n        fprintf(fp, \"lfs->name_max: %lu\\n\", (unsigned long)lfs->name_max);\n    }\n\n#ifdef LFS_NAME_MAX\n    /* compile-time configured name max */\n    fprintf(fp, \"LFS_NAME_MAX (compile-time): %d\\n\", LFS_NAME_MAX);\n#endif\n\n    if (info) {\n        /* Attempt to log the size of the destination buffer if visible here. */\n        /* If the struct definition is available in this translation unit, sizeof will work. */\n        /* Otherwise the sizeof expression may fail at compile time; in typical usage the\n           struct lfs_info is defined in the same include area as lfs_stat and this will succeed. */\n        fprintf(fp, \"sizeof(info->name) (bytes): %zu\\n\", sizeof(info->name));\n\n        /* Also log the current contents/length of the name buffer to help reproduce overflow */\n        /* Use strnlen to avoid scanning beyond the buffer if sizeof is available. */\n        size_t bufsize = sizeof(info->name);\n        size_t content_len = 0;\n        if (bufsize > 0) {\n            content_len = strnlen(info->name, bufsize);\n        }\n        fprintf(fp, \"info->name (first %zu bytes): '%.*s'\\n\", bufsize,\n                (int)((content_len < 256) ? content_len : 256), info->name);\n        fprintf(fp, \"strlen(info->name) (capped to buffer): %zu\\n\", content_len);\n    }\n\n    fprintf(fp, \"------------------------------\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Probe: before acquiring the lock */\n    lfs_log_probe(lfs, path, info, \"enter-before-lock\");\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the error path for reproduction */\n        lfs_log_probe(lfs, path, info, \"lock-failed-return\");\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Probe: after acquiring the lock, before calling lfs_stat_ */\n    lfs_log_probe(lfs, path, info, \"after-lock-before-call\");\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Probe: after calling lfs_stat_ to capture returned state */\n    lfs_log_probe(lfs, path, info, \"after-call\");\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: after unlocking, final state */\n    lfs_log_probe(lfs, path, info, \"exit-after-unlock\");\n\n    return err;\n}\n"
}