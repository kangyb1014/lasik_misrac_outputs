{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member uint8_t *buffer in struct lfs_lookahead is not const-qualified. If this buffer is only read by the implementation (i.e. the lookahead code treats it as a read-only bitmap provided from elsewhere and never writes through the pointer), it should be declared as const uint8_t *buffer to satisfy MISRA C 2023 Rule 8.13. In that usage the current declaration violates the rule. (If, instead, the implementation writes into the buffer, the non-const pointer is appropriate and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Probe log file path (append) */\n    FILE *probe = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (probe) {\n        fprintf(probe, \"[probe] ENTER lfs_stat: lfs=%p, path=%s, info=%p\\n\",\n                (void*)lfs, (path != NULL) ? path : \"(null)\", (void*)info);\n        fclose(probe);\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log lock result */\n    probe = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (probe) {\n        fprintf(probe, \"[probe] after LFS_LOCK: err=%d\\n\", err);\n        fclose(probe);\n    }\n\n    if (err) {\n        /* Log early return due to lock failure */\n        probe = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (probe) {\n            fprintf(probe, \"[probe] lfs_stat returning early due to lock error: %d\\n\", err);\n            fclose(probe);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log before calling lfs_stat_ */\n    probe = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (probe) {\n        fprintf(probe, \"[probe] calling lfs_stat_: lfs=%p, path=%s, info=%p\\n\",\n                (void*)lfs, (path != NULL) ? path : \"(null)\", (void*)info);\n        fclose(probe);\n    }\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log result from lfs_stat_ and snapshot of info struct pointer (caller-provided) */\n    probe = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (probe) {\n        fprintf(probe, \"[probe] lfs_stat_ returned: %d; info_ptr=%p\\n\",\n                err, (void*)info);\n        /* If info is available, attempt to log a small, safe snapshot of its memory\n         * without assuming structure layout. Log the first up-to-16 bytes pointed\n         * by the info pointer (if any) to provide data for post-mortem inspection.\n         * This keeps original logic intact and does not modify program state. */\n        if (info != NULL) {\n            const unsigned char *raw = (const unsigned char *)info;\n            size_t i;\n            fprintf(probe, \"[probe] info raw bytes:\");\n            for (i = 0u; i < 16u; i++) {\n                /* Safely print bytes; note this reads from info memory but does not write */\n                fprintf(probe, \" %02x\", (unsigned)raw[i]);\n            }\n            fprintf(probe, \"\\n\");\n        }\n        fclose(probe);\n    }\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}