{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the expression ((void)cfg). In lfs_fs_traverse this yields an executed statement LFS_UNLOCK(lfs->cfg); that evaluates the cfg expression but has no side\u2011effects and no observable effect on program behaviour. Removing that statement would not change program behaviour (given the provided definitions), so it is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/82.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_traverse:\n```c\nint lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_traverse(%p, %p, %p)\",\n            (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    err = lfs_fs_traverse_(lfs, cb, data, true);\n\n    LFS_TRACE(\"lfs_fs_traverse -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_traverse code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging helper that appends messages to /tmp/logs/82.txt.\n   Keeps behavior of lfs_fs_traverse unchanged; only records state.\n*/\nstatic void lfs_probe_logf(const char *fmt, ...)\n{\n    static int dir_created = 0;\n    if (!dir_created) {\n        /* best-effort create directory; ignore errors */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        dir_created = 1;\n    }\n\n    FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* log early return and the cfg pointer value */\n        lfs_probe_logf(\"lfs_fs_traverse: lock failed err=%d lfs=%p cfg=%p cb=%p data=%p\",\n                err, (void*)lfs, (void*)lfs->cfg, (void*)(uintptr_t)cb, data);\n        return err;\n    }\n\n    lfs_probe_logf(\"lfs_fs_traverse: entered lfs=%p cfg=%p cb=%p data=%p\",\n            (void*)lfs, (void*)lfs->cfg, (void*)(uintptr_t)cb, data);\n\n    LFS_TRACE(\"lfs_fs_traverse(%p, %p, %p)\",\n            (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    err = lfs_fs_traverse_(lfs, cb, data, true);\n\n    LFS_TRACE(\"lfs_fs_traverse -> %d\", err);\n\n    /* Record the cfg pointer before the unlock expression is evaluated. */\n    lfs_probe_logf(\"lfs_fs_traverse: before LFS_UNLOCK cfg=%p err=%d\",\n            (void*)lfs->cfg, err);\n\n    /* This is the statement reported as dead code: it expands to ((void)cfg)\n       and has no observable side-effects with the provided definitions. We\n       call it unchanged to preserve original behaviour while logging state\n       around it so other agents can observe that no state changed. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Re-read and log the cfg pointer after the unlock expression to show no\n       observable change (with the current macro definition). */\n    lfs_probe_logf(\"lfs_fs_traverse: after  LFS_UNLOCK cfg=%p err=%d\",\n            (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}