{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as empty (#define LFS_TRACE(__VA_ARGS__)), so the statement LFS_TRACE(\"lfs_fs_traverse -> %d\", err); expands to a null statement (no-op). This executed no-op can be removed without affecting program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/82.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_traverse:\n```c\nint lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_traverse(%p, %p, %p)\",\n            (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    err = lfs_fs_traverse_(lfs, cb, data, true);\n\n    LFS_TRACE(\"lfs_fs_traverse -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_traverse code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Probe helpers that log control flow/state to a file for reproduction\n   of the reported violation scenario. These preserve original logic and\n   only add observable side-effects (file logging). */\nstatic void lfs_probe_log_entry(const char *tag, void *lfs, void *cb, void *data) {\n    FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: lfs=%p cb=%p data=%p\\n\", tag, lfs, cb, data);\n        fclose(f);\n    }\n}\n\nstatic void lfs_probe_log_result(int err) {\n    FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_fs_traverse result: %d\\n\", err);\n        fclose(f);\n    }\n}\n\nint lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the failed lock and returned error so the no-op trace can be\n           compared to these real logs. */\n        lfs_probe_log_entry(\"lfs_fs_traverse: lock failed\", (void*)lfs, (void*)(uintptr_t)cb, data);\n        lfs_probe_log_result(err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_traverse(%p, %p, %p)\",\n            (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    /* Explicit probe that records entry even if LFS_TRACE is a no-op. */\n    lfs_probe_log_entry(\"lfs_fs_traverse: enter\", (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    err = lfs_fs_traverse_(lfs, cb, data, true);\n\n    LFS_TRACE(\"lfs_fs_traverse -> %d\", err);\n\n    /* Record the traversal result so the presence/absence of the LFS_TRACE\n       expansion can be validated against this file evidence. */\n    lfs_probe_log_result(err);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}