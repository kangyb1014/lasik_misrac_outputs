{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), which evaluates cfg only to discard it and has no runtime effect. In lfs_setattr this is executed as LFS_UNLOCK(lfs->cfg); removing that call would not change program behaviour (no state is modified and no side-effects occur). Therefore this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/170.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: log state before unlocking and after unlocking to reproduce\n   whether LFS_UNLOCK(cfg) has any observable effect. Logs appended to\n   /tmp/logs/170.txt. */\nstatic void lfs_probe_log_before_unlock(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    FILE *f = fopen(\"/tmp/logs/170.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[probe] entering lfs_setattr\\n\");\n        fprintf(f, \"[probe] lfs=%p path=\\\"%s\\\" type=%\" PRIu8 \" buffer=%p size=%\" PRIu32 \"\\n\",\n                (void*)lfs, (path != NULL) ? path : \"(null)\", type, buffer, (uint32_t)size);\n        /* Log the cfg pointer address observed before unlock */\n        fprintf(f, \"[probe] before LFS_UNLOCK: cfg=%p\\n\", (void*)lfs->cfg);\n        fclose(f);\n    }\n}\n\nstatic void lfs_probe_log_after_unlock(lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/170.txt\", \"a\");\n    if (f) {\n        /* Log the return value and cfg pointer observed after unlock */\n        fprintf(f, \"[probe] lfs_setattr -> %d\\n\", err);\n        fprintf(f, \"[probe] after LFS_UNLOCK: cfg=%p\\n\", (void*)lfs->cfg);\n        fprintf(f, \"[probe] exiting lfs_setattr\\n\");\n        fclose(f);\n    }\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Probe: log state before calling lfs_setattr_ */\n    lfs_probe_log_before_unlock(lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    /* Keep original trace of result */\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n\n    /* Probe: log state immediately before the LFS_UNLOCK call so that any\n       change (or lack thereof) caused by LFS_UNLOCK can be observed. */\n    {\n        FILE *f = fopen(\"/tmp/logs/170.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[probe] about to call LFS_UNLOCK(lfs->cfg)\\n\");\n            fprintf(f, \"[probe] cfg pointer just before unlock: %p\\n\", (void*)lfs->cfg);\n            fclose(f);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: log state after unlock and before returning */\n    lfs_probe_log_after_unlock(lfs, err);\n\n    return err;\n}\n"
}