{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro invocation LFS_UNLOCK(lfs->cfg) expands to ((void)cfg), which performs no observable action at runtime. Removing this statement would not change program behaviour (it only suppresses unused-parameter warnings / serves as a no-op placeholder), so it is an executed operation whose removal would not affect program behaviour \u2014 i.e. dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/170.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <inttypes.h>\n\n/* Lightweight probe logger used to record control flow and state\n * information for reproducing the reported violation scenario.\n * Appends human-readable entries to /tmp/logs/170.txt. */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/170.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and lock result. This captures the control path when\n     * entering lfs_setattr and whether locking succeeded. */\n    lfs_log_probe(\n        \"ENTER lfs_setattr: lfs=%p path=\\\"%s\\\" type=%\" PRIu8 \" buffer=%p size=%\" PRIu32 \" LFS_LOCK->%d\",\n        (void*)lfs, (path != NULL) ? path : \"(null)\", type, buffer, (uint32_t)size, err);\n\n    if (err) {\n        lfs_log_probe(\"lfs_setattr: early return due to LFS_LOCK failure err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_log_probe(\"Calling lfs_setattr_ with same parameters\");\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    lfs_log_probe(\"lfs_setattr_: returned %d\", err);\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n\n    /* Probe immediately before and after LFS_UNLOCK to capture the\n     * invocation and the state surrounding it. The reported violation\n     * claims that LFS_UNLOCK expands to ((void)cfg) (a no-op). Logging\n     * these events provides evidence that the unlock invocation was\n     * executed and records the cfg pointer used. */\n    lfs_log_probe(\"About to call LFS_UNLOCK with cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"Returned from LFS_UNLOCK; err=%d (if LFS_UNLOCK is a no-op, removing it would not change behavior)\", err);\n\n    return err;\n}\n"
}