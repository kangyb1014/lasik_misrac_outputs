{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE invocation is a no-op in this project: with #define LFS_TRACE(__VA_ARGS__) (empty), the line expands to an empty statement and performs no action (the argument 'err' is not evaluated). Removing this statement would not affect program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/138.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/*\n * Probe logging helper. Writes an appended line describing control flow\n * and key state to /tmp/logs/138.txt. Kept separate so it does not\n * change the original control flow or return values of lfs_file_truncate.\n */\nstatic void lfs_probe_log(const char *label, const void *lfs_p, const void *file_p,\n        uint32_t size, int err, const char *note) {\n    FILE *fp = fopen(\"/tmp/logs/138.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    fprintf(fp, \"%s: lfs=%p file=%p size=%\" PRIu32 \" err=%d note=%s\\n\",\n            label, lfs_p, file_p, size, err, note ? note : \"(null)\");\n    fclose(fp);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Preserve original logic: lock and early return if error. */\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the early-return path for tracing. */\n        lfs_probe_log(\"lfs_file_truncate:early_return\", (void*)lfs, (void*)file,\n                (uint32_t)size, err, \"lock failed\");\n        return err;\n    }\n\n    /* Log entry after successful lock. This is independent of LFS_TRACE.\n     * It captures the parameters and current err value (0 at this point).\n     */\n    lfs_probe_log(\"lfs_file_truncate:enter\", (void*)lfs, (void*)file,\n            (uint32_t)size, err, \"after lock\");\n\n    /* Original trace call retained for behaviour parity. In projects where\n     * LFS_TRACE is defined as an empty macro this will produce no code.\n     */\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Call the underlying truncate implementation and capture its result. */\n    err = lfs_file_truncate_(lfs, file, size);\n\n    /* Immediately log the result of the internal truncate regardless of\n     * whether LFS_TRACE expands to anything. This ensures the value of\n     * 'err' is observed and recorded for reproducing the reported scenario.\n     */\n    lfs_probe_log(\"lfs_file_truncate:after_inner\", (void*)lfs, (void*)file,\n            (uint32_t)size, err, \"after lfs_file_truncate_ returned\");\n\n    /* Original trace kept to preserve behaviour. If LFS_TRACE is a no-op,\n     * removing it would not change program behaviour, which is what the\n     * reported violation claims. Our probe above provides evidence of the\n     * value that would have been printed here.\n     */\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log before returning to record unlock and final return value. */\n    lfs_probe_log(\"lfs_file_truncate:exit\", (void*)lfs, (void*)file,\n            (uint32_t)size, err, \"before return\");\n\n    return err;\n}\n"
}