{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'head = heads[count-1];' writes to the function parameter 'head' (declared as lfs_block_t head in lfs_ctz_traverse). Modifying a function parameter (even a non-pointer scalar) violates MISRA C 2023 Rule 17.8. Use a local variable initialized from head and update that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/13.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_traverse:\n```c\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n\n    while (true) {\n        int err = cb(data, head);\n        if (err) {\n            return err;\n        }\n\n        if (index == 0) {\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (err) {\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            err = cb(data, heads[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        index -= count;\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_traverse code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic void log_close(FILE **pf) {\n    if (pf && *pf) {\n        fflush(*pf);\n        fclose(*pf);\n        *pf = NULL;\n    }\n}\n\nstatic void log_open_and_header(FILE **pf) {\n    if (!pf) {\n        return;\n    }\n    *pf = fopen(\"/tmp/logs/13.txt\", \"a\");\n    if (*pf) {\n        fprintf(*pf, \"--- lfs_ctz_traverse entry ---\\n\");\n    }\n}\n\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    FILE *logf = NULL;\n    log_open_and_header(&logf);\n    if (logf) {\n        fprintf(logf, \"initial: head=%llu, size=%llu\\n\",\n                (unsigned long long)head, (unsigned long long)size);\n    }\n\n    if (size == 0) {\n        if (logf) {\n            fprintf(logf, \"early return: size == 0\\n\");\n        }\n        log_close(&logf);\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    if (logf) {\n        fprintf(logf, \"computed index=%lld\\n\", (long long)index);\n    }\n\n    while (true) {\n        if (logf) {\n            fprintf(logf, \"loop start: head=%llu, index=%lld\\n\",\n                    (unsigned long long)head, (long long)index);\n        }\n\n        int err = cb(data, head);\n        if (logf) {\n            fprintf(logf, \"cb returned err=%d for head=%llu\\n\",\n                    err, (unsigned long long)head);\n        }\n        if (err) {\n            if (logf) {\n                fprintf(logf, \"returning err from cb: %d\\n\", err);\n            }\n            log_close(&logf);\n            return err;\n        }\n\n        if (index == 0) {\n            if (logf) {\n                fprintf(logf, \"index == 0, terminating traversal\\n\");\n            }\n            log_close(&logf);\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        if (logf) {\n            fprintf(logf, \"about to read heads: count=%d, head=%llu\\n\",\n                    count, (unsigned long long)head);\n        }\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (logf) {\n            fprintf(logf, \"lfs_bd_read returned err=%d, heads[0]=%llu, heads[1]=%llu\\n\",\n                    err, (unsigned long long)heads[0], (unsigned long long)heads[1]);\n        }\n        if (err) {\n            if (logf) {\n                fprintf(logf, \"returning err from lfs_bd_read: %d\\n\", err);\n            }\n            log_close(&logf);\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            if (logf) {\n                fprintf(logf, \"calling cb for heads[%d]=%llu\\n\", i, (unsigned long long)heads[i]);\n            }\n            err = cb(data, heads[i]);\n            if (logf) {\n                fprintf(logf, \"cb returned err=%d for heads[%d]=%llu\\n\",\n                        err, i, (unsigned long long)heads[i]);\n            }\n            if (err) {\n                if (logf) {\n                    fprintf(logf, \"returning err from cb on heads[%d]: %d\\n\", i, err);\n                }\n                log_close(&logf);\n                return err;\n            }\n        }\n\n        if (logf) {\n            fprintf(logf, \"about to assign head = heads[%d] (this modifies the function parameter)\\n\",\n                    count-1);\n            fprintf(logf, \"before assign: head=%llu, heads[%d]=%llu\\n\",\n                    (unsigned long long)head, count-1, (unsigned long long)heads[count-1]);\n        }\n\n        head = heads[count-1];\n\n        if (logf) {\n            fprintf(logf, \"after assign: head=%llu\\n\", (unsigned long long)head);\n        }\n\n        index -= count;\n        if (logf) {\n            fprintf(logf, \"index updated to %lld\\n\", (long long)index);\n        }\n    }\n}\n"
}