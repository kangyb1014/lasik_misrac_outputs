{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code takes the address of a non-const compound literal and passes it to lfs_ctz_index. If lfs_ctz_index is declared to accept a non-const pointer (e.g. lfs_off_t *), and the function does not need to modify the pointed value, then Rule 8.13 is violated because the pointer should point to a const-qualified type (const lfs_off_t *) whenever possible. (If, however, lfs_ctz_index is already declared to accept const lfs_off_t *, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/11.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_traverse:\n```c\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n\n    while (true) {\n        int err = cb(data, head);\n        if (err) {\n            return err;\n        }\n\n        if (index == 0) {\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (err) {\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            err = cb(data, heads[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        index -= count;\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_traverse code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe logging function: append control-flow and state info to /tmp/logs/11.txt */\nstatic void lfs_ctz_log(const char *stage, lfs_off_t v, const void *p, lfs_block_t head, lfs_off_t index, int err) {\n    FILE *f = fopen(\"/tmp/logs/11.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Print a compact record: stage, value, pointer, head, index, err */\n    fprintf(f, \"%s: value=%lld ptr=%p head=%llu index=%lld err=%d\\n\",\n            stage,\n            (long long)v,\n            p,\n            (unsigned long long)head,\n            (long long)index,\n            err);\n    fclose(f);\n}\n\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        lfs_ctz_log(\"early_return_size0\", 0, NULL, head, 0, 0);\n        return 0;\n    }\n\n    /* Log the compound literal and the pointer passed to lfs_ctz_index. */\n    lfs_ctz_log(\"before_lfs_ctz_index\", (lfs_off_t)(size - 1), &(lfs_off_t){size - 1}, head, -1, 0);\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_ctz_log(\"after_lfs_ctz_index\", (lfs_off_t)(size - 1), &(lfs_off_t){size - 1}, head, index, 0);\n\n    while (true) {\n        lfs_ctz_log(\"loop_start\", (lfs_off_t)(size - 1), NULL, head, index, 0);\n\n        int err = cb(data, head);\n        lfs_ctz_log(\"after_cb\", (lfs_off_t)(size - 1), NULL, head, index, err);\n        if (err) {\n            return err;\n        }\n\n        if (index == 0) {\n            lfs_ctz_log(\"index_zero_return\", (lfs_off_t)(size - 1), NULL, head, index, 0);\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        lfs_ctz_log(\"before_bd_read\", (lfs_off_t)(size - 1), NULL, head, index, count);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n\n        /* Convert to native endian as original code did */\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        lfs_ctz_log(\"after_bd_read\", (lfs_off_t)(size - 1), NULL, head, index, err);\n        if (err) {\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            lfs_ctz_log(\"before_cb_on_head\", (lfs_off_t)(size - 1), NULL, heads[i], index - (count - 1 - i), 0);\n            err = cb(data, heads[i]);\n            lfs_ctz_log(\"after_cb_on_head\", (lfs_off_t)(size - 1), NULL, heads[i], index - (count - 1 - i), err);\n            if (err) {\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        lfs_ctz_log(\"advance_head\", (lfs_off_t)(size - 1), NULL, head, index, 0);\n        index -= count;\n    }\n}\n"
}