{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCannot be proven safe from the supplied code. The call lfs_cache_zero(lfs, &file->cache) may violate Rule 21.17 if the implementation of lfs_cache_zero uses a string.h function (e.g. memset) with a length argument larger than the actual size of the object referenced by &file->cache. A concrete violation scenario: if lfs_cache_zero does something like memset(cache, 0, lfs->cfg->block_size) or memset(&file->cache, 0, some_block_size) while sizeof(lfs_cache_t) (or the actual buffer inside it) is smaller than that block_size, the memset will write beyond the bounds of file->cache and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/151.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/151.txt. */\nstatic void lfs_probe_logf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/151.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure and return. */\n        lfs_probe_logf(\"lfs_file_write: LFS_LOCK failed, err=%d, lfs=%p\", err, (void*)lfs);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n\n    /* We keep the original assertion but log after it so we can safely\n       probe fields that are expected to exist when the file is open. */\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe: record entry state that is relevant to the reported violation.\n       We intentionally do not dereference unknown pointers unsafely; we\n       only access members that are present in the original code (e.g.\n       lfs->cfg is used by LFS_LOCK/LFS_UNLOCK). */\n    {\n        /* Log basic parameter info. */\n        lfs_probe_logf(\"ENTRY lfs_file_write: lfs=%p file=%p buffer=%p size=%\"PRIu32,\n                (void*)lfs, (void*)file, buffer, size);\n\n        /* Attempt to log configuration block size if available. */\n        if (lfs && lfs->cfg) {\n            /* Many LittleFS configs expose block_size; log it if present. */\n            /* Cast to size_t for printing; if cfg->block_size does not exist\n               in this build, this line will fail to compile \u2014 it is expected\n               that the surrounding project defines this field. */\n            lfs_probe_logf(\"cfg ptr: %p\", (void*)lfs->cfg);\n#if 1\n            /* Guarded attempt to print block_size: we access it only if the\n               symbol exists in the build. This mirrors the likely structure\n               used by the implementation and helps reproduce the scenario. */\n            lfs_probe_logf(\"cfg->block_size: %zu\", (size_t)lfs->cfg->block_size);\n#endif\n        } else {\n            lfs_probe_logf(\"cfg is NULL or unavailable: lfs=%p\", (void*)lfs);\n        }\n\n        /* Log file cache address and size. The reported violation mentioned\n           lfs_cache_zero(lfs, &file->cache). We record the address of\n           file->cache and the compile-time sizeof(file->cache) to help\n           reproduce mismatches between expected block sizes and actual\n           cache buffer size. */\n        if (file) {\n            /* Note: accessing file->cache requires that the struct defines\n               a member named 'cache'. This mirrors the code path under\n               inspection; if this field does not exist in the build, the\n               compilation will fail and should be adjusted in the test\n               environment accordingly. */\n            lfs_probe_logf(\"file ptr: %p\", (void*)file);\n            lfs_probe_logf(\"&file->cache = %p\", (void*)&file->cache);\n            lfs_probe_logf(\"sizeof(file->cache) = %zu\", (size_t)sizeof(file->cache));\n        } else {\n            lfs_probe_logf(\"file is NULL\");\n        }\n    }\n\n    /* Call through to the original implementation and capture the result. */\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    /* Log return value and post-call state to help detect overrun effects. */\n    lfs_probe_logf(\"EXIT lfs_file_write -> %"
}