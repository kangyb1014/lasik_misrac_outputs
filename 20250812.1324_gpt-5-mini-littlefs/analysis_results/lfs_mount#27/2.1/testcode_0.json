{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn this translation unit LFS_LOCK(cfg) is defined as ((void)cfg, 0), so calls like 'int err = LFS_LOCK(cfg); if (err) { return err; }' in lfs_mount will always set err to 0 and the 'if (err)' branch (the 'return err;' statement) is statically unreachable. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/217.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helpers to log control flow and state for lfs_mount. */\nstatic void lfs_mount_probe(const char *stage, int err, void *lfs, const void *cfg) {\n    FILE *f = fopen(\"/tmp/logs/217.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_mount probe] stage=%s\\n\", stage);\n    fprintf(f, \"  lfs=%p cfg=%p err=%d\\n\", lfs, cfg, err);\n    /* Attempt to log a few cfg fields if available (best-effort). */\n    if (cfg) {\n        /* The real struct lfs_config is defined elsewhere; the following\n         * accesses mirror the fields used in the original lfs_mount trace\n         * and are safe here because the original code also accesses them.\n         */\n        const struct lfs_config *c = (const struct lfs_config *)cfg;\n        fprintf(f, \"  cfg->context=%p\\n\", c->context);\n        fprintf(f, \"  cfg->read=%p cfg->prog=%p cfg->erase=%p cfg->sync=%p\\n\",\n                (void*)(uintptr_t)c->read, (void*)(uintptr_t)c->prog,\n                (void*)(uintptr_t)c->erase, (void*)(uintptr_t)c->sync);\n        fprintf(f, \"  cfg->read_size=%\" PRIu32 \" cfg->prog_size=%\" PRIu32 \"\\n\",\n                c->read_size, c->prog_size);\n    }\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Probe before taking lock */\n    lfs_mount_probe(\"before_lock\", -1, (void*)lfs, (const void*)cfg);\n\n    int err = LFS_LOCK(cfg);\n\n    /* Log the immediate result of LFS_LOCK to demonstrate the value used\n       by the following if-statement. This will show e.g. err == 0 when\n       LFS_LOCK is defined as ((void)cfg, 0). */\n    lfs_mount_probe(\"after_lock\", err, (void*)lfs, (const void*)cfg);\n\n    if (err) {\n        /* If this branch is ever taken, record it. In the reported\n           scenario this branch is statically unreachable because\n           LFS_LOCK(cfg) expands to 0; therefore this block should\n           never execute at runtime. */\n        lfs_mount_probe(\"if_branch_taken_returning\", err, (void*)lfs, (const void*)cfg);\n        return err;\n    }\n\n    /* Record that execution continued past the lock-check. This log will\n       provide evidence that the if(err) branch was not taken. */\n    lfs_mount_probe(\"after_if\", err, (void*)lfs, (const void*)cfg);\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    /* Final probe before returning to record the returned error value. */\n    lfs_mount_probe(\"return\", err, (void*)lfs, (const void*)cfg);\n\n    return err;\n}\n"
}