{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment accesses cfg->lookahead_buffer where cfg is declared as const struct lfs_config *cfg. If the struct member is declared as a non-const pointer (for example: uint8_t *lookahead_buffer), then the pointer\u2019s target is not const-qualified even though the configuration object is treated read-only. In that case Rule 8.13 is violated: the pointer should be declared to point to a const-qualified type (e.g. const uint8_t *lookahead_buffer) if the function does not (and must not) modify the pointed-to data. If, however, the member is already declared as a pointer-to-const (e.g. const uint8_t *), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper that logs control flow and state to /tmp/logs/219.txt.\n   Keeps all reads const-qualified (no modification of pointed-to data).\n*/\nstatic void lfs_mount_probe(const struct lfs_config *cfg, const char *when) {\n    FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"---- lfs_mount probe: %s ----\\n\", when);\n    fprintf(f, \"cfg pointer=%p\\n\", (void*)cfg);\n    if (cfg == NULL) {\n        fprintf(f, \"cfg is NULL\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Log a selection of configuration state that is relevant to the\n       lookahead_buffer / const-pointer scenario. We do not modify any\n       pointed-to data. */\n    fprintf(f, \"  context=%p\\n\", (void*)cfg->context);\n    fprintf(f, \"  read=%p, prog=%p, erase=%p, sync=%p\\n\",\n            (void*)(uintptr_t)cfg->read,\n            (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase,\n            (void*)(uintptr_t)cfg->sync);\n\n    /* Sizes and counts (printed as unsigned long for portability in this probe).\n       These mirror the values LFS_TRACE prints in the original function. */\n    fprintf(f, \"  read_size=%lu, prog_size=%lu, block_size=%lu, block_count=%lu\\n\",\n            (unsigned long)cfg->read_size,\n            (unsigned long)cfg->prog_size,\n            (unsigned long)cfg->block_size,\n            (unsigned long)cfg->block_count);\n    fprintf(f, \"  block_cycles=%ld, cache_size=%lu, lookahead_size=%lu\\n\",\n            (long)cfg->block_cycles,\n            (unsigned long)cfg->cache_size,\n            (unsigned long)cfg->lookahead_size);\n\n    /* Log the buffer pointers. This is the focus of the Rule 8.13 scenario:\n       whether lookahead_buffer points to mutable data even though cfg is const. */\n    fprintf(f, \"  read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n            (void*)cfg->read_buffer,\n            (void*)cfg->prog_buffer,\n            (void*)cfg->lookahead_buffer);\n    fprintf(f, \"  name_max=%lu, file_max=%lu, attr_max=%lu\\n\",\n            (unsigned long)cfg->name_max,\n            (unsigned long)cfg->file_max,\n            (unsigned long)cfg->attr_max);\n\n    /* If lookahead_buffer is present and lookahead_size > 0, log the first\n       up to 16 bytes read-only (do not modify). This provides evidence of\n       the buffer contents without attempting writes that could violate\n       const-correctness or produce side-effects. */\n    if (cfg->lookahead_buffer != NULL && cfg->lookahead_size > 0) {\n        size_t to_dump = (cfg->lookahead_size < 16u) ? (size_t)cfg->lookahead_size : 16u;\n        const unsigned char *p = (const unsigned char *)cfg->lookahead_buffer;\n        fprintf(f, \"  lookahead first %zu bytes:\", to_dump);\n        for (size_t i = 0; i < to_dump; i++) {\n            /* Print each byte as hex. Safe because we cast to const and only read. */\n            fprintf(f, \" %02x\", (unsigned int)p[i]);\n        }\n        fprintf(f, \"\\n\");\n    } else {\n        fprintf(f, \"  lookahead_buffer is NULL or lookahead_size is 0\\n\");\n    }\n\n    fprintf(f, \"---- end probe (%s) ----\\n\", when);\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Initial trace preserved from original implementation */\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Probe before calling the internal mount to capture initial state. */\n    lfs_mount_probe(cfg, \"before lfs_mount_\");\n\n    err = lfs_mount_(lfs, cfg);\n\n    /* Probe after calling the internal mount to capture resulting state. */\n    lfs_mount_probe(cfg, \"after lfs_mount_\");\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}