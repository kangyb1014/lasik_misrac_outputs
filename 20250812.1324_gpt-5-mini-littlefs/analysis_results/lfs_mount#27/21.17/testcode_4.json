{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_cache_zero(lfs, &lfs->rcache) likely uses memset to zero lfs->rcache.buffer for lfs->cfg->cache_size bytes. In lfs_init rcache.buffer is set to cfg->read_buffer when provided, but the code does not validate that the user-supplied buffer is at least cfg->cache_size bytes. If a caller passes a read_buffer smaller than cfg->cache_size, the internal memset (or similar <string.h> call) will write past the end of the supplied buffer, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helpers to log state to /tmp/logs/223.txt. These functions only\n   record pointer values and size fields \u2014 they do NOT dereference user\n   buffers to avoid introducing additional out-of-bounds reads. */\nstatic void lfs_log_lock_failed(const struct lfs_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/223.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_mount] LFS_LOCK failed -> %d\\n\", err);\n    if (cfg) {\n        fprintf(f, \"[lfs_mount] cfg=%p, context=%p, read=%p, prog=%p, erase=%p, sync=%p\\n\",\n                (void*)cfg, cfg->context,\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"[lfs_mount] read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", block_count=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n        fprintf(f, \"[lfs_mount] cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->cache_size, cfg->lookahead_size);\n        fprintf(f, \"[lfs_mount] read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n    }\n    fclose(f);\n}\n\nstatic void lfs_log_pre_mount(const lfs_t *lfs, const struct lfs_config *cfg) {\n    FILE *f = fopen(\"/tmp/logs/223.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_mount] ENTER lfs=%p cfg=%p\\n\", (void*)lfs, (void*)cfg);\n    if (cfg) {\n        fprintf(f, \"[lfs_mount] context=%p read=%p prog=%p erase=%p sync=%p\\n\",\n                cfg->context,\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"[lfs_mount] read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", block_count=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n        fprintf(f, \"[lfs_mount] block_cycles=%\" PRId32 \", cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->block_cycles, cfg->cache_size, cfg->lookahead_size);\n        fprintf(f, \"[lfs_mount] read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n        fprintf(f, \"[lfs_mount] name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n        /* Explicitly note the potential risk surface relevant to MISRA 21.17 */\n        fprintf(f, \"[lfs_mount] NOTE: cache_size=%\" PRIu32 \" may be used to memset rcache.buffer.\\n\",\n                cfg->cache_size);\n        fprintf(f, \"[lfs_mount] NOTE: read_buffer pointer (user-supplied) = %p.\\n\",\n                cfg->read_buffer);\n        fprintf(f, \"[lfs_mount] WARNING: No runtime check here guarantees read_buffer >= cache_size.\\n\");\n    }\n    fclose(f);\n}\n\nstatic void lfs_log_post_mount(const lfs_t *lfs, const struct lfs_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/223.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_mount] EXIT lfs=%p cfg=%p -> err=%d\\n\", (void*)lfs, (void*)cfg, err);\n    if (cfg) {\n        fprintf(f, \"[lfs_mount] Final state: cache_size=%\" PRIu32 \", read_buffer=%p\\n\",\n                cfg->cache_size, cfg->read_buffer);\n    }\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log lock failure and configuration snapshot for reproduction */\n        lfs_log_lock_failed(cfg, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Insert probe immediately before calling into lfs_mount_ so the\n       captured state reflects what the internal functions (which may call\n       memset on rcache.buffer) will see. */\n    lfs_log_pre_mount(lfs, cfg);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n\n    /* Log final state and the return value so reproducer can correlate\n       the inputs with the outcome. */\n    lfs_log_post_mount(lfs, cfg, err);\n\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}