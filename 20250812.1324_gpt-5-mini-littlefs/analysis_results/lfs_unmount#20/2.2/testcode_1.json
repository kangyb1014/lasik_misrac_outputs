{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); becomes an expression statement that performs no side effects. It is executed but its removal would not change the program behaviour (given the provided macro definitions), therefore it is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/162.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_unmount:\n```c\nint lfs_unmount(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_unmount(%p)\", (void*)lfs);\n\n    err = lfs_unmount_(lfs);\n\n    LFS_TRACE(\"lfs_unmount -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_unmount code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper: append human-readable trace info to /tmp/logs/162.txt */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, int err, const void *cfgptr) {\n    FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n    if (f) {\n        /* Print basic control-flow and state: which stage, lfs pointer, cfg pointer and error code */\n        fprintf(f, \"lfs_probe: stage=%s, lfs=%p, cfg=%p, err=%d\\n\", stage, (void*)lfs, cfgptr, err);\n        fclose(f);\n    }\n}\n\nint lfs_unmount(lfs_t *lfs) {\n    /* Log entry and cfg state before attempting lock */\n    lfs_probe_log(\"entry_before_lock\", lfs, 0, (void*)(lfs ? lfs->cfg : NULL));\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock operation */\n    lfs_probe_log(\"after_lock\", lfs, err, (void*)(lfs ? lfs->cfg : NULL));\n    if (err) {\n        /* Preserve original behaviour: return immediately on lock error, but log it first */\n        lfs_probe_log(\"return_error_from_lock\", lfs, err, (void*)(lfs ? lfs->cfg : NULL));\n        return err;\n    }\n    LFS_TRACE(\"lfs_unmount(%p)\", (void*)lfs);\n\n    err = lfs_unmount_(lfs);\n\n    /* Log result of internal unmount operation */\n    lfs_probe_log(\"after_lfs_unmount_\", lfs, err, (void*)(lfs ? lfs->cfg : NULL));\n\n    LFS_TRACE(\"lfs_unmount -> %d\", err);\n\n    /* Log immediately before and after the LFS_UNLOCK call so callers can observe whether\n       the unlock call causes any observable change in cfg or error state. With the\n       provided macro definitions LFS_UNLOCK(cfg) expands to ((void)cfg) and performs no\n       side effects \u2014 these logs provide evidence for that behaviour at runtime. */\n    lfs_probe_log(\"before_LFS_UNLOCK\", lfs, err, (void*)(lfs ? lfs->cfg : NULL));\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"after_LFS_UNLOCK\", lfs, err, (void*)(lfs ? lfs->cfg : NULL));\n\n    return err;\n}\n"
}