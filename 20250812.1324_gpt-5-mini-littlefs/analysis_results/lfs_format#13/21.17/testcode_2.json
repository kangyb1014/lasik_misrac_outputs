{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the user supplies cfg->lookahead_buffer that is smaller than cfg->lookahead_size (or otherwise not at least cfg->lookahead_size bytes), the call memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size) will write past the end of that buffer. lfs_init merely assigns the user buffer without verifying its allocated size, so a configuration with e.g. cfg->lookahead_size == 128 but cfg->lookahead_buffer pointing to a 16-byte array will cause an out\u2011of\u2011bounds write.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/111.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/111.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/111.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Log entry and basic config pointers/sizes without dereferencing user buffers. */\n    lfs_probe_log(\"ENTER lfs_format: lfs=%p cfg=%p\", (void*)lfs, (void*)cfg);\n    if (cfg) {\n        lfs_probe_log(\n            \"cfg->context=%p read=%p prog=%p erase=%p sync=%p\",\n            cfg->context,\n            (void*)(uintptr_t)cfg->read,\n            (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase,\n            (void*)(uintptr_t)cfg->sync\n        );\n        lfs_probe_log(\n            \"sizes: read_size=%\" PRIu32 \" prog_size=%\" PRIu32 \" block_size=%\" PRIu32 \" block_count=%\" PRIu32 \" block_cycles=%\" PRId32 \" cache_size=%\" PRIu32 \" lookahead_size=%\" PRIu32,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size\n        );\n        lfs_probe_log(\n            \"buffers: read_buffer=%p prog_buffer=%p lookahead_buffer=%p name_max=%\" PRIu32 \" file_max=%\" PRIu32 \" attr_max=%\" PRIu32,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max\n        );\n    } else {\n        lfs_probe_log(\"cfg is NULL\");\n    }\n\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        lfs_probe_log(\"LFS_LOCK failed: %d\", err);\n        return err;\n    }\n\n    /* Keep original trace call intact to preserve behavior. */\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Additional probe before calling into formatting internals. This captures the\n       critical fields that relate to the reported violation (lookahead buffer pointer\n       and declared lookahead_size). We do not dereference the buffer to avoid\n       introducing additional undefined behavior. */\n    if (cfg) {\n        lfs_probe_log(\"ABOUT_TO_CALL lfs_format_: cfg=%p lookahead_buffer=%p lookahead_size=%\" PRIu32,\n                      (void*)cfg, cfg->lookahead_buffer, cfg->lookahead_size);\n    } else {\n        lfs_probe_log(\"ABOUT_TO_CALL lfs_format_: cfg is NULL\");\n    }\n\n    err = lfs_format_(lfs, cfg);\n\n    lfs_probe_log(\"lfs_format_ returned: %d\", err);\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    lfs_probe_log(\"EXIT lfs_format: err=%d\", err);\n    return err;\n}\n"
}