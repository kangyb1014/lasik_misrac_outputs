{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg). In functions such as lfs_format this expands to an expression statement that evaluates the pointer and discards the result (a no-op). Removing that statement would not change program state or behaviour (cfg is just a parameter pointer with no side-effects), so the expression is an executed operation whose removal would not affect program behaviour \u2014 i.e. dead code. (It appears present only to suppress unused-parameter warnings when threading is disabled.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/106.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/106.txt.\n   These are best-effort and do not change program logic or return values.\n*/\nstatic void lfs_format_probe_before(void *lfs, const struct lfs_config *cfg) {\n    FILE *f = fopen(\"/tmp/logs/106.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    if (cfg) {\n        fprintf(f, \"[LFS_PROBE] entering LFS_UNLOCK probe (before)\\n\");\n        fprintf(f, \"  lfs=%p cfg=%p context=%p\\n\", lfs, (void*)cfg, cfg->context);\n        fprintf(f, \"  read=%p prog=%p erase=%p sync=%p\\n\",\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"  read_size=%\" PRIu32 \" prog_size=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size);\n        fprintf(f, \"  block_size=%\" PRIu32 \" block_count=%\" PRIu32 \"\\n\",\n                cfg->block_size, cfg->block_count);\n        fprintf(f, \"  cache_size=%\" PRIu32 \" lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->cache_size, cfg->lookahead_size);\n    } else {\n        fprintf(f, \"[LFS_PROBE] entering LFS_UNLOCK probe (before) with NULL cfg\\n\");\n    }\n    fclose(f);\n}\n\nstatic void lfs_format_probe_after(void *lfs, const struct lfs_config *cfg) {\n    FILE *f = fopen(\"/tmp/logs/106.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    if (cfg) {\n        fprintf(f, \"[LFS_PROBE] exiting LFS_UNLOCK probe (after)\\n\");\n        fprintf(f, \"  lfs=%p cfg=%p context=%p\\n\", lfs, (void*)cfg, cfg->context);\n        fprintf(f, \"  read=%p prog=%p erase=%p sync=%p\\n\",\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"  read_size=%\" PRIu32 \" prog_size=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size);\n        fprintf(f, \"  block_size=%\" PRIu32 \" block_count=%\" PRIu32 \"\\n\",\n                cfg->block_size, cfg->block_count);\n        fprintf(f, \"  cache_size=%\" PRIu32 \" lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->cache_size, cfg->lookahead_size);\n    } else {\n        fprintf(f, \"[LFS_PROBE] exiting LFS_UNLOCK probe (after) with NULL cfg\\n\");\n    }\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n\n    /* Probe state before and after the LFS_UNLOCK(cfg) call to demonstrate\n       that LFS_UNLOCK(cfg) as defined ((void)cfg) performs no observable\n       change to the cfg or lfs state (i.e. it's effectively dead code).\n       These probes write to /tmp/logs/106.txt and are best-effort only. */\n    lfs_format_probe_before((void*)lfs, cfg);\n\n    LFS_UNLOCK(cfg);\n\n    lfs_format_probe_after((void*)lfs, cfg);\n\n    return err;\n}\n"
}