{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn this build LFS_UNLOCK(cfg) is defined as the no-op macro ((void)cfg), so the call performs no action; removing the statement would not change program behaviour. Therefore the executed statement is dead code (reachable but effect-free).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/106.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Probe logging added to help reproduce the reported dead-code scenario\n * Logs are appended to /tmp/logs/106.txt. This preserves the original\n * lfs_format control flow and semantics while writing state snapshots\n * before and after the LFS_UNLOCK(cfg) call.\n */\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n\n    /* --- Begin probe instrumentation --- */\n    {\n        /* capture snapshot of fields we will observe for changes */\n        void *snap_context = cfg->context;\n        void *snap_read = (void*)(uintptr_t)cfg->read;\n        void *snap_prog = (void*)(uintptr_t)cfg->prog;\n        void *snap_erase = (void*)(uintptr_t)cfg->erase;\n        void *snap_sync = (void*)(uintptr_t)cfg->sync;\n        uint32_t snap_read_size = cfg->read_size;\n        uint32_t snap_prog_size = cfg->prog_size;\n        uint32_t snap_block_size = cfg->block_size;\n        uint32_t snap_block_count = cfg->block_count;\n        int32_t  snap_block_cycles = cfg->block_cycles;\n        uint32_t snap_cache_size = cfg->cache_size;\n        uint32_t snap_lookahead_size = cfg->lookahead_size;\n        void *snap_read_buffer = cfg->read_buffer;\n        void *snap_prog_buffer = cfg->prog_buffer;\n        void *snap_lookahead_buffer = cfg->lookahead_buffer;\n        uint32_t snap_name_max = cfg->name_max;\n        uint32_t snap_file_max = cfg->file_max;\n        uint32_t snap_attr_max = cfg->attr_max;\n\n        /* Log before unlock */\n        FILE *f = fopen(\"/tmp/logs/106.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[lfs_format] before LFS_UNLOCK: cfg=%p\\n\", (void*)cfg);\n            fprintf(f, \"  .context=%p, .read=%p, .prog=%p, .erase=%p, .sync=%p\\n\",\n                    snap_context, snap_read, snap_prog, snap_erase, snap_sync);\n            fprintf(f, \"  .read_size=%\" PRIu32 \", .prog_size=%\" PRIu32 \", .block_size=%\" PRIu32 \", .block_count=%\" PRIu32 \", .block_cycles=%\" PRId32 \"\\n\",\n                    snap_read_size, snap_prog_size, snap_block_size, snap_block_count, snap_block_cycles);\n            fprintf(f, \"  .cache_size=%\" PRIu32 \", .lookahead_size=%\" PRIu32 \"\\n\",\n                    snap_cache_size, snap_lookahead_size);\n            fprintf(f, \"  .read_buffer=%p, .prog_buffer=%p, .lookahead_buffer=%p\\n\",\n                    snap_read_buffer, snap_prog_buffer, snap_lookahead_buffer);\n            fprintf(f, \"  .name_max=%\" PRIu32 \", .file_max=%\" PRIu32 \", .attr_max=%\" PRIu32 \"\\n\",\n                    snap_name_max, snap_file_max, snap_attr_max);\n            fclose(f);\n        }\n\n        /* Call the unlock (may be a no-op in some builds) */\n        LFS_UNLOCK(cfg);\n\n        /* Log after unlock and compare */\n        void *aft_context = cfg->context;\n        void *aft_read = (void*)(uintptr_t)cfg->read;\n        void *aft_prog = (void*)(uintptr_t)cfg->prog;\n        void *aft_erase = (void*)(uintptr_t)cfg->erase;\n        void *aft_sync = (void*)(uintptr_t)cfg->sync;\n        uint32_t aft_read_size = cfg->read_size;\n        uint32_t aft_prog_size = cfg->prog_size;\n        uint32_t aft_block_size = cfg->block_size;\n        uint32_t aft_block_count = cfg->block_count;\n        int32_t  aft_block_cycles = cfg->block_cycles;\n        uint32_t aft_cache_size = cfg->cache_size;\n        uint32_t aft_lookahead_size = cfg->lookahead_size;\n        void *aft_read_buffer = cfg->read_buffer;\n        void *aft_prog_buffer = cfg->prog_buffer;\n        void *aft_lookahead_buffer = cfg->lookahead_buffer;\n        uint32_t aft_name_max = cfg->name_max;\n        uint32_t aft_file_max = cfg->file_max;\n        uint32_t aft_attr_max = cfg->attr_max;\n\n        f = fopen(\"/tmp/logs/106.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[lfs_format] after LFS_UNLOCK: cfg=%p\\n\", (void*)cfg);\n            fprintf(f, \"  .context=%p, .read=%p, .prog=%p, .erase=%p, .sync=%p\\n\",\n                    aft_context, aft_read, aft_prog, aft_erase, aft_sync);\n            fprintf(f, \"  .read_size=%\" PRIu32 \", .prog_size=%\" PRIu32 \", .block_size=%\" PRIu32 \", .block_count=%\" PRIu32 \", .block_cycles=%\" PRId32 \"\\n\",\n                    aft_read_size, aft_prog_size, aft_block_size, aft_block_count, aft_block_cycles);\n            fprintf(f, \"  .cache_size=%\" PRIu32 \", .lookahead_size=%\" PRIu32 \"\\n\",\n                    aft_cache_size, aft_lookahead_size);\n            fprintf(f, \"  .read_buffer=%p, .prog_buffer=%p, .lookahead_buffer=%p\\n\",\n                    aft_read_buffer, aft_prog_buffer, aft_lookahead_buffer);\n            fprintf(f, \"  .name_max=%\" PRIu32 \", .file_max=%\" PRIu32 \", .attr_max=%\" PRIu32 \"\\n\",\n                    aft_name_max, aft_file_max, aft_attr_max);\n\n            /* Compare and report any differences */\n            int diffs = 0;\n            if (snap_context != aft_context) { fprintf(f, \"    CHANGED: context %p -> %p\\n\", snap_context, aft_context); diffs++; }\n            if (snap_read != aft_read) { fprintf(f, \"    CHANGED: read %p -> %p\\n\", snap_read, aft_read); diffs++; }\n            if (snap_prog != aft_prog) { fprintf(f, \"    CHANGED: prog %p -> %p\\n\", snap_prog, aft_prog); diffs++; }\n            if (snap_erase != aft_erase) { fprintf(f, \"    CHANGED: erase %p -> %p\\n\", snap_erase, aft_erase); diffs++; }\n            if (snap_sync != aft_sync) { fprintf(f, \"    CHANGED: sync %p -> %p\\n\", snap_sync, aft_sync); diffs++; }\n            if (snap_read_size != aft_read_size) { fprintf(f, \"    CHANGED: read_size %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_read_size, aft_read_size); diffs++; }\n            if (snap_prog_size != aft_prog_size) { fprintf(f, \"    CHANGED: prog_size %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_prog_size, aft_prog_size); diffs++; }\n            if (snap_block_size != aft_block_size) { fprintf(f, \"    CHANGED: block_size %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_block_size, aft_block_size); diffs++; }\n            if (snap_block_count != aft_block_count) { fprintf(f, \"    CHANGED: block_count %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_block_count, aft_block_count); diffs++; }\n            if (snap_block_cycles != aft_block_cycles) { fprintf(f, \"    CHANGED: block_cycles %\" PRId32 \" -> %\" PRId32 \"\\n\", snap_block_cycles, aft_block_cycles); diffs++; }\n            if (snap_cache_size != aft_cache_size) { fprintf(f, \"    CHANGED: cache_size %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_cache_size, aft_cache_size); diffs++; }\n            if (snap_lookahead_size != aft_lookahead_size) { fprintf(f, \"    CHANGED: lookahead_size %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_lookahead_size, aft_lookahead_size); diffs++; }\n            if (snap_read_buffer != aft_read_buffer) { fprintf(f, \"    CHANGED: read_buffer %p -> %p\\n\", snap_read_buffer, aft_read_buffer); diffs++; }\n            if (snap_prog_buffer != aft_prog_buffer) { fprintf(f, \"    CHANGED: prog_buffer %p -> %p\\n\", snap_prog_buffer, aft_prog_buffer); diffs++; }\n            if (snap_lookahead_buffer != aft_lookahead_buffer) { fprintf(f, \"    CHANGED: lookahead_buffer %p -> %p\\n\", snap_lookahead_buffer, aft_lookahead_buffer); diffs++; }\n            if (snap_name_max != aft_name_max) { fprintf(f, \"    CHANGED: name_max %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_name_max, aft_name_max); diffs++; }\n            if (snap_file_max != aft_file_max) { fprintf(f, \"    CHANGED: file_max %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_file_max, aft_file_max); diffs++; }\n            if (snap_attr_max != aft_attr_max) { fprintf(f, \"    CHANGED: attr_max %\" PRIu32 \" -> %\" PRIu32 \"\\n\", snap_attr_max, aft_attr_max); diffs++; }\n\n            if (diffs == 0) {\n                fprintf(f, \"    RESULT: no observable changes after LFS_UNLOCK (possible no-op)\\n\");\n            } else {\n                fprintf(f, \"    RESULT: %d fields changed after LFS_UNLOCK\\n\", diffs);\n            }\n\n            fclose(f);\n        }\n    }\n    /* --- End probe instrumentation --- */\n\n    return err;\n}\n"
}