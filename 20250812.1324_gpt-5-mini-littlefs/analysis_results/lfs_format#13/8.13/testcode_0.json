{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression (void*)cfg casts a pointer of type 'const struct lfs_config *' to 'void *', discarding the const qualifier. This occurs in the LFS_TRACE call where cfg is printed. Casting away const like this violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). A compliant fix is to preserve const (e.g. cast to 'const void *' and/or adjust LFS_TRACE to accept const pointers, or pass an integer-sized representation such as (uintptr_t)cfg for printing).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe function to log control flow and state relevant to the reported\n   MISRA Rule 8.13 violation. Appends logs to /tmp/logs/107.txt. */\nstatic void lfs_format_log_probe(const lfs_t *lfs, const struct lfs_config *cfg, const char *stage) {\n    FILE *fp = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    /* Log stage and pointer identities. Use const-correct pointer casts to\n       avoid introducing new const-discarding operations. */\n    fprintf(fp, \"[lfs_format] stage=%s\\n\", stage);\n    fprintf(fp, \"  lfs=%p\\n\", (void *)lfs);\n    fprintf(fp, \"  cfg=%p (printed as const void*)\\n\", (const void *)cfg);\n\n    /* Log commonly-used configuration state that is safe to print without\n       casting-away-const. Avoid casting function pointers to integers or\n       void* to prevent introducing new violations. */\n    if (cfg != NULL) {\n        fprintf(fp, \"  cfg->context=%p\\n\", (void *)cfg->context);\n        fprintf(fp, \"  read_size=%\" PRIu32 \"\\n\", cfg->read_size);\n        fprintf(fp, \"  prog_size=%\" PRIu32 \"\\n\", cfg->prog_size);\n        fprintf(fp, \"  block_size=%\" PRIu32 \"\\n\", cfg->block_size);\n        fprintf(fp, \"  block_count=%\" PRIu32 \"\\n\", cfg->block_count);\n        fprintf(fp, \"  block_cycles=%\" PRId32 \"\\n\", cfg->block_cycles);\n        fprintf(fp, \"  cache_size=%\" PRIu32 \"\\n\", cfg->cache_size);\n        fprintf(fp, \"  lookahead_size=%\" PRIu32 \"\\n\", cfg->lookahead_size);\n        fprintf(fp, \"  read_buffer=%p\\n\", (const void *)cfg->read_buffer);\n        fprintf(fp, \"  prog_buffer=%p\\n\", (const void *)cfg->prog_buffer);\n        fprintf(fp, \"  lookahead_buffer=%p\\n\", (const void *)cfg->lookahead_buffer);\n        fprintf(fp, \"  name_max=%\" PRIu32 \"\\n\", cfg->name_max);\n        fprintf(fp, \"  file_max=%\" PRIu32 \"\\n\", cfg->file_max);\n        fprintf(fp, \"  attr_max=%\" PRIu32 \"\\n\", cfg->attr_max);\n\n        /* Explicit note about the problematic cast in the original trace\n           call. This records the fact of the cast for reproduction and\n           investigation purposes without performing a const-discarding cast\n           in the probe itself. */\n        fprintf(fp, \"  NOTE: original code calls LFS_TRACE with (void*)cfg,\\n\");\n        fprintf(fp, \"        which discards the const qualifier on cfg.\\n\");\n    }\n\n    fprintf(fp, \"---\\n\");\n    fclose(fp);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log the early-return path */\n        lfs_format_log_probe(lfs, cfg, \"lock_failed\");\n        return err;\n    }\n\n    /* Log entry after successful lock but before original trace call. */\n    lfs_format_log_probe(lfs, cfg, \"before_LFS_TRACE\");\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log that we have just executed the trace that contains the const-discarding cast. */\n    lfs_format_log_probe(lfs, cfg, \"after_LFS_TRACE_called\");\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Log result of the internal formatting operation. */\n    lfs_format_log_probe(lfs, cfg, \"after_lfs_format_\");\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}