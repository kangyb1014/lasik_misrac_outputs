{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as '((void)cfg,0)', so 'int err = LFS_LOCK(lfs->cfg);' always yields err == 0. Therefore the branch 'if (err) { return err; }' can never be taken at runtime; removing that return would not change program behaviour given the current definitions, so this constitutes dead code in lfs_file_seek.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/58.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helper: append logs about control flow and key state to /tmp/logs/58.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/58.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock and the pointers involved to make it\n       possible to reproduce whether the error branch is ever taken. */\n    lfs_probe_log(\"lfs_file_seek: after LFS_LOCK -> err=%d, lfs=%p, file=%p, cfg=%p\",\n            err, (void*)lfs, (void*)file, (void*)lfs->cfg);\n\n    if (err) {\n        /* Log entering the error branch (this is the reported dead code).\n           Keeping the original behavior: still return the error. */\n        lfs_probe_log(\"lfs_file_seek: err branch taken, returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\" PRId32 \", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log just before delegating to the internal seek implementation. */\n    lfs_probe_log(\"lfs_file_seek: calling lfs_file_seek_ with off=%\" PRId32 \", whence=%d\",\n            off, whence);\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\" PRId32, res);\n\n    /* Log the result and that we will unlock. */\n    lfs_probe_log(\"lfs_file_seek: returned res=%\" PRId32 \", now unlocking cfg=%p\",\n            res, (void*)lfs->cfg);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"lfs_file_seek: completed, final res=%\" PRId32, res);\n    return res;\n}\n"
}