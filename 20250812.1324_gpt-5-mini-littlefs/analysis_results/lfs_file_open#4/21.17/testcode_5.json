{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential overflow when a caller provides a custom file config buffer that is smaller than the filesystem cache size. In the fragment file->cache.size is set to lfs->cfg->cache_size and file->cache.buffer is either the user-supplied file->cfg->buffer or a freshly allocated buffer of that size. The code calls lfs_cache_zero (which will zero file->cache.size bytes) and later calls lfs_dir_get(..., lfs_min(file->cache.size, 0x3fe), file->cache.buffer). If file->cfg->buffer points to an object smaller than file->cache.size, these operations (likely implemented with memset/memcpy from <string.h>) can write beyond the bounds of the provided buffer. The implementation does not validate the length of a user-supplied buffer, so out-of-bounds accesses are possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/39.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append diagnostic information to /tmp/logs/39.txt\n   This function intentionally does not change program state. */\nstatic void lfs_file_open_probe(lfs_t *lfs, lfs_file_t *file, const char *path,\n        int flags, const char *stage, int err)\n{\n    FILE *fp = fopen(\"/tmp/logs/39.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    fprintf(fp, \"--- lfs_file_open PROBE: %s ---\\n\", stage);\n    fprintf(fp, \"  lfs=%p, file=%p, path=%p\", (void*)lfs, (void*)file, (void*)path);\n    if (path) {\n        /* print a safe, null-terminated view of the path */\n        fprintf(fp, \" (\\\"%s\\\")\", path);\n    }\n    fprintf(fp, \", flags=0x%x, err=%d\\n\", flags, err);\n\n    if (lfs) {\n        /* lfs->cfg might be NULL in some implementations; guard access */\n        fprintf(fp, \"  lfs->cfg=%p\", (void*)lfs->cfg);\n        if (lfs->cfg) {\n            /* cache_size is expected to be an integer type; cast to unsigned long long for portability */\n            fprintf(fp, \", lfs->cfg->cache_size=%llu\", (unsigned long long)lfs->cfg->cache_size);\n        }\n        fprintf(fp, \"\\n\");\n    }\n\n    if (file) {\n        /* Log cache-related fields that are relevant to the reported violation scenario. */\n        fprintf(fp, \"  file (addr)=%p\\n\", (void*)file);\n\n        /* Guard access to file->cache if present */\n        /* The probe assumes file->cache has members 'buffer' and 'size' as in the scenario. */\n        fprintf(fp, \"    file->cache (addr)=%p\", (void*)&file->cache);\n        /* Some builds may not have these members; we access them as in the target codebase */\n        fprintf(fp, \", file->cache.buffer=%p, file->cache.size=%llu\\n\",\n                (void*)file->cache.buffer,\n                (unsigned long long)file->cache.size);\n\n        /* If caller supplied a buffer via file->cfg, log that pointer too */\n        fprintf(fp, \"    file->cfg=%p\", (void*)file->cfg);\n        if (file->cfg) {\n            fprintf(fp, \", file->cfg->buffer=%p\", (void*)file->cfg->buffer);\n            /* If there is a field describing user buffer size it may have different names in implementations;\n               we do not attempt to access unknown names to avoid altering logic. */\n        }\n        fprintf(fp, \"\\n\");\n\n        /* Helpful derived info: whether file->cache.buffer points to the user buffer */\n        if (file->cfg) {\n            int uses_user_buffer = (file->cache.buffer == file->cfg->buffer);\n            fprintf(fp, \"    uses_user_buffer=%d\\n\", uses_user_buffer);\n        }\n    }\n\n    fprintf(fp, \"--- end probe (%s) ---\\n\\n\", stage);\n    fclose(fp);\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_file_open_probe(lfs, file, path, flags, \"lock_failed\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n\n    /* Probe the state after acquiring the lock and before opening */\n    lfs_file_open_probe(lfs, file, path, flags, \"before_open_\", -1);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    /* Probe the state after lfs_file_open_ returns, capturing the return value */\n    lfs_file_open_probe(lfs, file, path, flags, \"after_open_\", err);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}