{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), which merely evaluates and discards cfg. In lfs_dir_rewind the call LFS_UNLOCK(lfs->cfg) has no effect on program behaviour (LFS_LOCK is a no-op returning 0 and LFS_UNLOCK performs no unlock actions). Removing the LFS_UNLOCK call would not change the behaviour of lfs_dir_rewind in this codebase, so the operation is dead code under MISRA C 2023 Rule 2.2. (Note: if cfg evaluation had observable side effects or involved volatile objects, the cast-to-void would be meaningful; that is not the case here.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append control-flow and state information to /tmp/logs/282.txt */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/282.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"ENTER lfs_dir_rewind: lfs=%p, dir=%p, LFS_LOCK returned=%d\", (void*)lfs, (void*)dir, err);\n    if (err) {\n        probe_log(\"lfs_dir_rewind: early return due to LFS_LOCK error=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    probe_log(\"lfs_dir_rewind: calling lfs_dir_rewind_(lfs=%p, dir=%p)\", (void*)lfs, (void*)dir);\n    err = lfs_dir_rewind_(lfs, dir);\n    probe_log(\"lfs_dir_rewind_: returned err=%d\", err);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n\n    /* Log immediately before and after the unlock to capture that the\n       LFS_UNLOCK(lfs->cfg) call is executed but performs no observable action\n       in this codebase (the macro expands to ((void)cfg)). These logs provide\n       evidence of the control path and timing of the call. */\n    probe_log(\"lfs_dir_rewind: about to call LFS_UNLOCK(lfs->cfg) -- err=%d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"lfs_dir_rewind: returned from LFS_UNLOCK(lfs->cfg) -- err=%d\", err);\n\n    probe_log(\"EXIT lfs_dir_rewind: returning %d\", err);\n    return err;\n}\n"
}