{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), which is an expression statement that evaluates cfg and discards the result. In lfs_fs_size it appears as LFS_UNLOCK(lfs->cfg); \u2014 this produces no observable effect at runtime (no state change, no side-effects). Removing that statement would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2. (LFS_LOCK similarly expands to a no-op when locks are disabled, but the specific offending fragment is LFS_UNLOCK.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/178.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends human-readable logs to /tmp/logs/178.txt */\nstatic void lfs_fs_size_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/178.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    lfs_fs_size_log(\"ENTRY: lfs_fs_size called with lfs=%p\", (void*)lfs);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_fs_size_log(\"AFTER LFS_LOCK: err=%d\", err);\n    if (err) {\n        lfs_fs_size_log(\"LOCK failed, returning err=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_fs_size_log(\"Calling internal lfs_fs_size_ with lfs=%p, cfg=%p\", (void*)lfs, (void*)lfs->cfg);\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    lfs_fs_size_log(\"Internal lfs_fs_size_ returned res=%lld\", (long long)res);\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n\n    lfs_fs_size_log(\"About to call LFS_UNLOCK with cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_fs_size_log(\"After LFS_UNLOCK (call completed). cfg=%p\", (void*)lfs->cfg);\n\n    lfs_fs_size_log(\"EXIT: returning res=%lld\", (long long)res);\n    return res;\n}\n"
}