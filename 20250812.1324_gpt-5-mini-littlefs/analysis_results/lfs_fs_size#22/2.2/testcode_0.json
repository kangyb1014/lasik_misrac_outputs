{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). In calls like int err = LFS_LOCK(lfs->cfg); the sub-expression (void)cfg is evaluated but has no observable effect (no side-effects and not used); removing the (void)cfg (or replacing the whole macro with 0) does not change program behaviour. Therefore the (void)cfg operation is dead code and violates MISRA C 2023 Rule 2.2. Note: this would not be a violation if the cfg expression had side-effects or was volatile, but in the shown usage it is not.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/178.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: append logs to /tmp/logs/178.txt. */\nstatic void lfs_log_probe(const char *stage, lfs_t *lfs, uintptr_t cfg_before, uintptr_t cfg_after, int err) {\n    FILE *f = fopen(\"/tmp/logs/178.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: lfs=%p cfg_before=0x%\" PRIxPTR \" cfg_after=0x%\" PRIxPTR \" err=%d\\n\",\n            stage, (void*)lfs, cfg_before, cfg_after, err);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    /* Capture cfg value before the lock call. This records the evaluated\n       sub-expression (lfs->cfg) so callers can see its runtime value. */\n    uintptr_t cfg_before = (lfs != NULL) ? (uintptr_t)lfs->cfg : (uintptr_t)0;\n    lfs_log_probe(\"lfs_fs_size: before LFS_LOCK\", lfs, cfg_before, (uintptr_t)0, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Capture cfg value after the lock call to show whether evaluating the\n       (void)cfg in the macro had any observable effect on the value. */\n    uintptr_t cfg_after = (lfs != NULL) ? (uintptr_t)lfs->cfg : (uintptr_t)0;\n    lfs_log_probe(\"lfs_fs_size: after LFS_LOCK\", lfs, cfg_before, cfg_after, err);\n\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}