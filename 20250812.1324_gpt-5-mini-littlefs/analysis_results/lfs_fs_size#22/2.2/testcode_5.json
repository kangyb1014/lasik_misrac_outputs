{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined to nothing (#define LFS_TRACE(__VA_ARGS__)), so every call like LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs); and LFS_TRACE(\"lfs_fs_size -> ...\", res); preprocesses to a null statement (effectively a no-op). These no-op statements are executed but have no effect on program behaviour and could be removed without changing behaviour, which meets the definition of dead code in MISRA C 2023 Rule 2.2. Therefore the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/178.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/*\n * Probe logging helper: append a simple message to /tmp/logs/178.txt.\n * Keep usage minimal so original logic is preserved.\n */\nstatic void lfs_probe_log_fmt(const char *fmt, void *p, long long v)\n{\n    FILE *f = fopen(\"/tmp/logs/178.txt\", \"a\");\n    if (f) {\n        /* We expect either p or v to be meaningful depending on the call site. */\n        if (p != NULL) {\n            fprintf(f, fmt, p, v);\n        } else {\n            /* If no pointer, print only numeric value. */\n            fprintf(f, fmt, v);\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that the lock failed and return as original code does. */\n        lfs_probe_log_fmt(\"lfs_fs_size: LFS_LOCK failed err=%lld lfs=%p\", (void*)lfs, (long long)err);\n        return err;\n    }\n\n    /* Record entry (this makes the previously-empty LFS_TRACE calls redundant for logging) */\n    lfs_probe_log_fmt(\"lfs_fs_size: ENTRY lfs=%p\", (void*)lfs, 0);\n\n    /* Keep original trace call (may be a no-op macro in build) */\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    /* Record the result so the control path and state are observable externally. */\n    lfs_probe_log_fmt(\"lfs_fs_size: RETURN res=%lld lfs=%p\", (void*)lfs, (long long)res);\n\n    /* Preserve original trace and unlock behavior. */\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}