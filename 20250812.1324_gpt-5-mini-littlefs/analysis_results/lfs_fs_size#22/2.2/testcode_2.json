{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); is executed but has no effect. Removing this statement would not alter program behaviour in the current build, thus it constitutes dead code (a no-op), violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/178.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append a short record about cfg and stage to /tmp/logs/178.txt */\nstatic void lfs_probe_log_cfg(const void *cfg, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/178.txt\", \"a\");\n    if (!f) {\n        /* try to create the directory and retry once */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/178.txt\", \"a\");\n    }\n    if (f) {\n        fprintf(f, \"%s: cfg=%p\\n\", stage, cfg);\n        fclose(f);\n    }\n}\n\n/* Modified lfs_fs_size with probes. Original logic preserved. */\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* probe: log that lock failed and the cfg pointer at failure */\n        lfs_probe_log_cfg(lfs->cfg, \"lfs_fs_size: LFS_LOCK failed\");\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    /* probe: log cfg before computing size */\n    lfs_probe_log_cfg(lfs->cfg, \"lfs_fs_size: before lfs_fs_size_\");\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    /* probe: log the result of lfs_fs_size_ */\n    {\n        FILE *f = fopen(\"/tmp/logs/178.txt\", \"a\");\n        if (!f) {\n            (void)mkdir(\"/tmp/logs\", 0777);\n            f = fopen(\"/tmp/logs/178.txt\", \"a\");\n        }\n        if (f) {\n            fprintf(f, \"lfs_fs_size_: result=%lld\\n\", (long long)res);\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n\n    /* probe: log immediately before calling LFS_UNLOCK */\n    lfs_probe_log_cfg(lfs->cfg, \"lfs_fs_size: before LFS_UNLOCK\");\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* probe: log immediately after calling LFS_UNLOCK\n       This will allow observers to see that cfg pointer/value did not change\n       as a result of the unlock call (evidence that the call may be a no-op).\n    */\n    lfs_probe_log_cfg(lfs->cfg, \"lfs_fs_size: after LFS_UNLOCK\");\n\n    return res;\n}\n"
}