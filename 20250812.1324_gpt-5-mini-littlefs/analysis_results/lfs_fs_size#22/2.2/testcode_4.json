{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. In this project LFS_LOCK(cfg) is defined as ((void)cfg,0), so `int err = LFS_LOCK(lfs->cfg);` always yields 0 and the `if (err) { return err; }` branch is never taken. The assignment and conditional test are executed but have no effect on program behaviour (they can be removed without changing behaviour), which meets the definition of dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/178.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "lfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    /* Probe: capture the lock return and control flow to /tmp/logs/178.txt */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Attempt to open log file; if it fails, continue silently so behaviour is preserved */\n    FILE *probe_f = fopen(\"/tmp/logs/178.txt\", \"a\");\n    if (probe_f) {\n        /* Log the immediate result of the lock attempt and relevant pointers/state */\n        fprintf(probe_f, \"lfs_fs_size: entered, lfs=%p, cfg=%p, LFS_LOCK returned=%d\\n\",\n                (void*)lfs, (void*)lfs->cfg, err);\n        fflush(probe_f);\n    }\n\n    if (err) {\n        /* Log the early-return branch taken due to lock error */\n        if (probe_f) {\n            fprintf(probe_f, \"lfs_fs_size: early return due to lock error: %d\\n\", err);\n            fclose(probe_f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    /* Log the result of the underlying size computation */\n    if (probe_f) {\n        fprintf(probe_f, \"lfs_fs_size: lfs_fs_size_ returned=%lld\\n\", (long long)res);\n        fflush(probe_f);\n    }\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    if (probe_f) {\n        fprintf(probe_f, \"lfs_fs_size: unlocked cfg=%p, returning=%lld\\n\",\n                (void*)lfs->cfg, (long long)res);\n        fclose(probe_f);\n    }\n\n    return res;\n}\n"
}