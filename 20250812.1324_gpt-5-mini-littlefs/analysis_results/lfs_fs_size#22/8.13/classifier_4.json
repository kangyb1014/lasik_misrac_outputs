{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nint err = LFS_LOCK(lfs->cfg);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment passes lfs->cfg to LFS_LOCK. This by itself is not a proven violation of Rule 8.13: a pointer should be to a const-qualified type whenever possible. Whether it is a violation depends on the declaration and use of cfg/LFS_LOCK. If LFS_LOCK (and the underlying lock implementation) genuinely modifies the object pointed to by cfg (e.g. updates lock state), then cfg must be non-const and no violation occurs. Only if LFS_LOCK only reads from cfg and never modifies it would the non-const pointer be avoidable \u2014 in that case the cfg member and LFS_LOCK parameter should be const-qualified, and the current code would violate Rule 8.13."
}