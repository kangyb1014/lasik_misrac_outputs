{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes &path (the address of the parameter 'const char *path') to lfs_dir_find, which gives the callee the ability to modify the parameter variable 'path' itself. Rule 17.8 forbids modifying function parameters (the pointer variable), even though the pointed-to object may be modified. Taking &path therefore constitutes a violation if lfs_dir_find writes to that pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    /* Probe: record pointer value and address of the parameter 'path' before call */\n    {\n        FILE *f = fopen(\"/tmp/logs/253.txt\", \"a\");\n        if (!f) {\n            /* Try to create directory and reopen */\n            (void)mkdir(\"/tmp/logs\", 0755);\n            f = fopen(\"/tmp/logs/253.txt\", \"a\");\n        }\n        if (f) {\n            fprintf(f, \"ENTRY lfs_dir_open: lfs=%p dir=%p path_addr=%p path_ptr=%p path_str=\\\"%s\\\"\\n\",\n                    (void*)lfs, (void*)dir, (void*)&path, (void*)path, path ? path : \"(null)\");\n            fclose(f);\n        }\n    }\n\n    /* Capture the pointer value before calling the underlying implementation.  */\n    const char *path_before = path;\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Probe: record pointer value and address of the parameter 'path' after call */\n    {\n        FILE *f = fopen(\"/tmp/logs/253.txt\", \"a\");\n        if (!f) {\n            (void)mkdir(\"/tmp/logs\", 0755);\n            f = fopen(\"/tmp/logs/253.txt\", \"a\");\n        }\n        if (f) {\n            const char *path_after = path;\n            fprintf(f, \"EXIT  lfs_dir_open -> %d; path_addr=%p path_before=%p path_after=%p path_before_str=\\\"%s\\\" path_after_str=\\\"%s\\\" changed=%s\\n\",\n                    err, (void*)&path, (void*)path_before, (void*)path_after,\n                    path_before ? path_before : \"(null)\", path_after ? path_after : \"(null)\",\n                    (path_before != path_after) ? \"YES\" : \"NO\");\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}