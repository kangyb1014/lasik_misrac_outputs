{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(name, \".\", 1) and memcmp(name, \"..\", 2) to compare path components against string literals. These are comparisons against null\u2011terminated string literals (\".\" and \"..\") and thus constitute using memcmp to compare null\u2011terminated strings. Use of memcmp for string comparisons is disallowed by MISRA C 2023 Rule 21.14; functions like strncmp or direct character checks should be used instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/254.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe function to log control flow and state for reproducing the reported scenario.\n   Writes to /tmp/logs/254.txt. Kept separate so original logic is preserved. */\nstatic void lfs_probe_log(const char *stage, const void *lfs, const void *dir, const char *path, int err) {\n    FILE *f = fopen(\"/tmp/logs/254.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_dir_open] stage=%s lfs=%p dir=%p err=%d\\n\", stage, lfs, dir, err);\n    if (path) {\n        fprintf(f, \"  path=\\\"%s\\\"\\n\", path);\n        fprintf(f, \"  path_len=%zu\\n\", strlen(path));\n        /* Use strcmp (not memcmp) to check for the dot and dot-dot cases. */\n        fprintf(f, \"  is_dot=%d is_dotdot=%d\\n\", (strcmp(path, \".\") == 0), (strcmp(path, \"..\") == 0));\n    } else {\n        fprintf(f, \"  path=(null)\\n\");\n    }\n\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log after attempting the lock so callers can see whether locking failed. */\n    lfs_probe_log(\"after_lock\", (void*)lfs, (void*)dir, path, err);\n\n    if (err) {\n        /* Log the early return caused by lock failure for reproducibility. */\n        lfs_probe_log(\"return_on_lock_fail\", (void*)lfs, (void*)dir, path, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    /* Log right before calling the underlying implementation. */\n    lfs_probe_log(\"before_lfs_dir_open_\", (void*)lfs, (void*)dir, path, 0);\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Log the result of the underlying call to help trace the control flow. */\n    lfs_probe_log(\"after_lfs_dir_open_\", (void*)lfs, (void*)dir, path, err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlocking to capture full function exit path. */\n    lfs_probe_log(\"after_unlock\", (void*)lfs, (void*)dir, path, err);\n    return err;\n}\n"
}