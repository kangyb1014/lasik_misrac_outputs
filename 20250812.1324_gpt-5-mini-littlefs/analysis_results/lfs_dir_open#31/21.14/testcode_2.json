{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn the fragment if (namelen == 2 && memcmp(name, \"..\", 2) == 0) { ... } the code uses memcmp to compare the path component pointed to by name with the null-terminated string literal \"..\". This is a use of memcmp to compare (or match against) a null-terminated string literal and therefore violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/254.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper to log control flow and state for reproducing the violation scenario.\n   Appends logs to /tmp/logs/254.txt. Preserves original lfs_dir_open logic. */\nstatic void lfs_dir_open_probe(const char *stage, lfs_t *lfs, lfs_dir_t *dir, const char *path, int err)\n{\n    FILE *fp = fopen(\"/tmp/logs/254.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n    /* Safely print pointers and path information. */\n    fprintf(fp, \"%s: lfs=%p dir=%p path=%s path_len=%zu err=%d\\n\",\n            stage,\n            (void *)lfs,\n            (void *)dir,\n            (path != NULL) ? path : \"(null)\",\n            (path != NULL) ? strlen(path) : 0u,\n            err);\n    fclose(fp);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the lock failure and return as original. */\n        lfs_dir_open_probe(\"lfs_dir_open:lock_failed\", lfs, dir, path, err);\n        return err;\n    }\n\n    /* Log entry into the function with the provided path. */\n    lfs_dir_open_probe(\"lfs_dir_open:entered\", lfs, dir, path, 0);\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Log result from the internal open call so callers can observe the state\n       that leads to the violation reported elsewhere (e.g. comparisons of\n       path components). */\n    lfs_dir_open_probe(\"lfs_dir_open:after_open_\", lfs, dir, path, err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}