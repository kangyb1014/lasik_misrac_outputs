{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a path pointer that is NULL or points to a character array that is not NUL-terminated within its allocated bounds, the call lfs_size_t namelen = strcspn(name, \"/\"); can read past the end of the object. The code does not validate that 'path' (and thus 'name') is non-NULL and NUL-terminated, so strcspn may access memory beyond the object's bounds and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logger to record control flow and state relevant to the violation scenario.\n * Writes to /tmp/logs/255.txt. Does not attempt to read the contents of `path`\n * to avoid introducing additional out-of-bounds reads. */\nstatic void lfs_probe_log(const lfs_t *lfs, const lfs_dir_t *dir, const char *path, const char *stage, int err) {\n    FILE *f = NULL;\n\n    /* Try to create the directory if it doesn't exist. Ignore errors other than EEXIST. */\n    if (mkdir(\"/tmp/logs\", 0777) != 0) {\n        if (errno != EEXIST) {\n            /* Couldn't create directory; continue and let fopen fail if needed. */\n        }\n    }\n\n    f = fopen(\"/tmp/logs/255.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Basic pointer and stage information. We deliberately do NOT dereference `path`.\n     * This avoids performing any additional reads that might go beyond the object's bounds. */\n    fprintf(f, \"stage=%s lfs=%p dir=%p path_ptr=%p\", stage, (const void*)lfs, (const void*)dir, (const void*)path);\n\n    if (path == NULL) {\n        fprintf(f, \" path=NULL\\n\");\n    } else {\n        fprintf(f, \" path!=NULL\\n\");\n        fprintf(f, \"  NOTE: Not printing path contents to avoid potential out-of-bounds reads or crashes.\\n\");\n    }\n\n    /* If this is the post-call probe, record the returned error value. */\n    if (stage && strcmp(stage, \"after\") == 0) {\n        fprintf(f, \"  err=%d\\n\", err);\n    }\n\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Probe before performing the potentially unsafe string operations in downstream code. */\n    lfs_probe_log(lfs, dir, path, \"before\", -1);\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Probe after the operation to capture the return state. */\n    lfs_probe_log(lfs, dir, path, \"after\", err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}