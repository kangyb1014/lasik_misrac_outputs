{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg). In lfs_dir_open the call LFS_UNLOCK(lfs->cfg) therefore expands to ((void)lfs->cfg); this expression has no side\u2011effects (it merely discards the value) so its execution can be removed without changing program behaviour. That constitutes dead code under MISRA C 2023 Rule 2.2. (Only if the cfg expression had side\u2011effects would removing the call change behaviour; in the provided code it does not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/250.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Lightweight probe logger that appends control-flow/state info to /tmp/logs/250.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/250.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    /* Log entry and key pointers/state */\n    lfs_log_probe(\"ENTER lfs_dir_open: lfs=%p dir=%p path=\\\"%s\\\"\", (void*)lfs, (void*)dir, path);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_log_probe(\"AFTER LFS_LOCK: err=%d cfg=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_log_probe(\"EXIT lfs_dir_open (lock failed): err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    lfs_log_probe(\"CALL lfs_dir_open_: lfs=%p dir=%p path=\\\"%s\\\"\", (void*)lfs, (void*)dir, path);\n    err = lfs_dir_open_(lfs, dir, path);\n    lfs_log_probe(\"RETURNED from lfs_dir_open_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n\n    /* Capture state immediately before and after the LFS_UNLOCK call so observers can\n       determine whether the call has any observable effect. This helps reproduce the\n       scenario where LFS_UNLOCK(cfg) is a no-op (e.g. defined as ((void)cfg)). */\n    lfs_log_probe(\"BEFORE LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"AFTER LFS_UNLOCK: cfg=%p (expected no observable change if LFS_UNLOCK is a no-op)\", (void*)lfs->cfg);\n\n    lfs_log_probe(\"EXIT lfs_dir_open: returning %d\", err);\n    return err;\n}\n"
}