{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg); is executed but expands to ((void)lfs->cfg) (a no-op). Removing this statement would not change program behaviour for the given project configuration, so it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/250.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe logging: append control-flow and state info to /tmp/logs/250.txt */\n    FILE *lfs_log = fopen(\"/tmp/logs/250.txt\", \"a\");\n    if (lfs_log) {\n        fprintf(lfs_log, \"ENTER: lfs_dir_open(lfs=%p, dir=%p, path=\\\"%s\\\")\\n\",\n                (void*)lfs, (void*)dir, (path ? path : \"(null)\"));\n        fprintf(lfs_log, \"AFTER LFS_LOCK: err=%d, cfg=%p\\n\", err, (void*)lfs->cfg);\n        fflush(lfs_log);\n    }\n\n    if (err) {\n        if (lfs_log) {\n            fprintf(lfs_log, \"EXIT EARLY: lfs_dir_open returning err=%d (lock failed)\\n\", err);\n            fclose(lfs_log);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    if (lfs_log) {\n        fprintf(lfs_log, \"CALL: lfs_dir_open_(lfs=%p, dir=%p, path=\\\"%s\\\")\\n\",\n                (void*)lfs, (void*)dir, (path ? path : \"(null)\"));\n        fflush(lfs_log);\n    }\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n\n    if (lfs_log) {\n        fprintf(lfs_log, \"RETURNED FROM lfs_dir_open_: err=%d\\n\", err);\n        fprintf(lfs_log, \"ABOUT TO CALL LFS_UNLOCK with cfg=%p\\n\", (void*)lfs->cfg);\n        fflush(lfs_log);\n    }\n\n    /* The call below is the subject of the reported violation scenario. It may expand\n       to a no-op in some configurations. We keep the call to preserve original logic,\n       but log before and after so evidence of an executed no-op can be collected. */\n    LFS_UNLOCK(lfs->cfg);\n\n    if (lfs_log) {\n        fprintf(lfs_log, \"RETURNED FROM LFS_UNLOCK; cfg=%p\\n\", (void*)lfs->cfg);\n        fprintf(lfs_log, \"EXIT: lfs_dir_open returning err=%d\\n\", err);\n        fclose(lfs_log);\n    }\n\n    return err;\n}\n"
}