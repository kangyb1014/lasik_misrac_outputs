{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). The sub-expression (void)cfg is executed but has no effect on program state or behaviour (it merely discards the value to suppress warnings). Removing the (void)cfg expression (leaving just 0) would not change program behaviour, so the executed no-op constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/90.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe functions to log control-flow and state to /tmp/logs/90.txt. */\nstatic void lfs_log_probe_before_lock(const void *cfg) {\n    FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_fs_mkconsistent: BEFORE LFS_LOCK, cfg=%p\\n\", cfg);\n        fclose(f);\n    }\n}\n\nstatic void lfs_log_probe_after_lock(const void *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_fs_mkconsistent: AFTER LFS_LOCK, cfg=%p, err=%d\\n\", cfg, err);\n        fclose(f);\n    }\n}\n\nstatic void lfs_log_probe_after_unlock(const void *cfg, int final_err) {\n    FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_fs_mkconsistent: AFTER LFS_UNLOCK, cfg=%p, final_err=%d\\n\", cfg, final_err);\n        fclose(f);\n    }\n}\n\nstatic void lfs_log_probe_return(int err, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_fs_mkconsistent: RETURN at %s, err=%d\\n\", stage, err);\n        fclose(f);\n    }\n}\n\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    /* Log the cfg pointer prior to invoking LFS_LOCK so we can observe\n       that cfg is evaluated as part of the expression expansion. */\n    lfs_log_probe_before_lock(lfs->cfg);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock attempt and the cfg pointer again. This will\n       produce evidence that (void)cfg (if present in the macro expansion)\n       had no observable effect on program state other than being evaluated. */\n    lfs_log_probe_after_lock(lfs->cfg, err);\n\n    if (err) {\n        lfs_log_probe_return(err, \"lock_failed\");\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlock and final return value. */\n    lfs_log_probe_after_unlock(lfs->cfg, err);\n    lfs_log_probe_return(err, \"complete\");\n    return err;\n}\n"
}