{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call int err = LFS_LOCK(lfs->cfg); is dead. LFS_LOCK is defined as ((void)cfg,0) which has no side-effects and always yields 0. Thus the assignment and the subsequent if (err) { return err; } can never observe a non-zero value and removing the LFS_LOCK call (or replacing it with err = 0) would not change program behaviour. Therefore this is a violation of MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/90.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logger that appends to /tmp/logs/90.txt. Attempts to create /tmp/logs\n   directory if necessary. Keeps logic separate from original function. */\nstatic void lfs_log_probe_90(const char *fmt, ...)\n{\n    FILE *f;\n    /* best-effort create directory, ignore if it already exists */\n    if (mkdir(\"/tmp/logs\", 0777) && errno != EEXIST) {\n        /* continue even if mkdir fails; we'll still try to open the file */\n    }\n\n    f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    /* log entry and key pointers/state without changing behavior */\n    void *cfgptr = NULL;\n    if (lfs) {\n        /* avoid dereferencing lfs when NULL; original code assumes valid lfs */\n        cfgptr = (void*)lfs->cfg;\n    }\n    lfs_log_probe_90(\"ENTER lfs_fs_mkconsistent: lfs=%p cfg=%p\", (void*)lfs, cfgptr);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_log_probe_90(\"AFTER LFS_LOCK: err=%d lfs=%p cfg=%p\", err, (void*)lfs, (void*)cfgptr);\n\n    if (err) {\n        lfs_log_probe_90(\"LFS_LOCK indicated error -> returning %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    lfs_log_probe_90(\"CALL lfs_fs_mkconsistent_: lfs=%p\", (void*)lfs);\n    err = lfs_fs_mkconsistent_(lfs);\n    lfs_log_probe_90(\"RETURNED lfs_fs_mkconsistent_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n\n    lfs_log_probe_90(\"BEFORE LFS_UNLOCK: lfs=%p cfg=%p\", (void*)lfs, cfgptr);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe_90(\"AFTER LFS_UNLOCK: lfs=%p\", (void*)lfs);\n\n    lfs_log_probe_90(\"EXIT lfs_fs_mkconsistent -> %d\", err);\n    return err;\n}"
}