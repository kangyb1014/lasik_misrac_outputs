{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes lfs->root (type lfs_block_t[2] decaying to lfs_block_t *). If the prototype of lfs_dir_fetch is declared as int lfs_dir_fetch(lfs_t *lfs, lfs_mdir_t *dir, lfs_block_t *block) (i.e. the third parameter is a non-const pointer), then Rule 8.13 is violated because that pointer should be to a const-qualified type (const lfs_block_t * or const lfs_block_t[2]) if the function only reads the block identifier. If instead lfs_dir_fetch already declares the parameter as const (e.g. const lfs_block_t *block), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/91.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging function: append control-flow and state info to /tmp/logs/91.txt */\nstatic void lfs_probe_log(const char *phase, lfs_t *lfs) {\n    FILE *f = fopen(\"/tmp/logs/91.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log basic control information */\n    fprintf(f, \"--- lfs_probe: %s ---\\n\", phase ? phase : \"(null)\");\n    fprintf(f, \"lfs pointer: %p\\n\", (void*)lfs);\n\n    if (lfs) {\n        /* Log cfg pointer if available (preserves original logic - just observing) */\n        fprintf(f, \"lfs->cfg: %p\\n\", (void*)lfs->cfg);\n\n        /* If lfs->root exists as an array (typical layout: lfs_block_t root[2]),\n           log its address, size, and raw bytes. This avoids depending on the\n           exact typedef of lfs_block_t and preserves const-correctness. */\n        /* Note: use of sizeof on lfs->root requires that lfs->root is visible in this translation unit. */\n        fprintf(f, \"lfs->root address (if present): %p\\n\",\n                (void*)( (void*)(&lfs->root) ));\n\n        /* Print raw bytes of lfs->root to show the block identifier being passed */\n        size_t root_size = sizeof(lfs->root);\n        fprintf(f, \"lfs->root size: %zu bytes\\n\", root_size);\n        if (root_size > 0) {\n            const unsigned char *bytes = (const unsigned char*)&lfs->root;\n            fprintf(f, \"lfs->root bytes: \");\n            for (size_t i = 0; i < root_size; i++) {\n                fprintf(f, \"%02x\", (unsigned)bytes[i]);\n                if (i + 1 < root_size) {\n                    fprintf(f, \" \");\n                }\n            }\n            fprintf(f, \"\\n\");\n        }\n    }\n\n    fprintf(f, \"--- end probe ---\\n\\n\");\n    fclose(f);\n}\n\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    /* Probe before invoking the internal consistency-maker. This captures\n       the lfs->root data (the array that decays to a pointer when passed)\n       so other agents can inspect whether a non-const pointer is being\n       passed and with what contents. */\n    lfs_probe_log(\"before_lfs_fs_mkconsistent_underscore\", lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    /* Probe after the call to observe any state changes. */\n    lfs_probe_log(\"after_lfs_fs_mkconsistent_underscore\", lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}