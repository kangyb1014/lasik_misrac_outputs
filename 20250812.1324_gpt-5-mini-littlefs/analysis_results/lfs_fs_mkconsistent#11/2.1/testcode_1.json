{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0), so calls like int err = LFS_LOCK(lfs->cfg); always set err to 0. Consequently the subsequent check if (err) { return err; } can never be true and the return inside that block is unreachable. This constitutes unreachable code in the project and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/89.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper. Appends a textual log line to /tmp/logs/89.txt.\n * Kept small and defensive to avoid changing function semantics.\n */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/89.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\n/*\n * Modified lfs_fs_mkconsistent with probes that record control flow and\n * state to /tmp/logs/89.txt. The original logic is preserved.\n */\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and lock result to help detect unreachable branches. */\n    lfs_probe_log(\"lfs_fs_mkconsistent: entered with lfs=%p, cfg=%p\",\n                  (void*)lfs,\n                  (void*)(lfs ? lfs->cfg : NULL));\n    lfs_probe_log(\"lfs_fs_mkconsistent: after LFS_LOCK, err=%d\", err);\n\n    if (err) {\n        /* This block is expected to be unreachable when LFS_LOCK expands to ((void)cfg,0).\n         * We still preserve the original return semantics and record that the branch was taken. */\n        lfs_probe_log(\"lfs_fs_mkconsistent: error branch taken, returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    lfs_probe_log(\"lfs_fs_mkconsistent: calling lfs_fs_mkconsistent_(%p)\", (void*)lfs);\n    err = lfs_fs_mkconsistent_(lfs);\n    lfs_probe_log(\"lfs_fs_mkconsistent: lfs_fs_mkconsistent_ returned err=%d\", err);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"lfs_fs_mkconsistent: unlocked cfg=%p, returning err=%d\",\n                  (void*)(lfs ? lfs->cfg : NULL), err);\n\n    return err;\n}\n"
}