{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_fs_disk_version takes a non-const pointer (lfs_t *lfs) but only performs read-only access (it reads lfs->cfg->disk_version). Under LFS_MULTIVERSION it uses lfs for read-only access; when LFS_MULTIVERSION is not defined the parameter is unused (hence the (void)lfs). The pointer parameter could and should be declared as const lfs_t *lfs to express immutability and avoid accidental modification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/187.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logger: append control-flow and relevant state to /tmp/logs/187.txt */\nstatic void lfs_probe_log(const char *stage, const void *lfs_ptr, const void *fsinfo_ptr, int err)\n{\n    FILE *fp = fopen(\"/tmp/logs/187.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    /* Basic information always available */\n    fprintf(fp, \"%s: lfs=%p fsinfo=%p err=%d\\n\", stage, lfs_ptr, fsinfo_ptr, err);\n\n    /* If available at compile-time, log cfg and disk_version under the multiversion build.\n       Use runtime checks for pointers to avoid dereferencing NULL. */\n#ifdef LFS_MULTIVERSION\n    if (lfs_ptr != NULL) {\n        /* lfs_t is expected to have a member 'cfg' and cfg to have 'disk_version'.\n           These are only inspected for logging and not modified. */\n        const char *sep = \"\";\n        /* Print cfg pointer if layout is present in the translation unit. */\n        /* Cast through void* to keep format consistent. */\n        /* The following access assumes the same structure definitions as the target file. */\n        const void *cfgptr = ((const lfs_t *)lfs_ptr)->cfg;\n        fprintf(fp, \"  cfg=%p\", cfgptr);\n\n        if (cfgptr != NULL) {\n            int dv = ((const lfs_t *)lfs_ptr)->cfg->disk_version;\n            fprintf(fp, \" disk_version=%d\", dv);\n        }\n        fprintf(fp, \"\\n\");\n    }\n#endif\n\n    fclose(fp);\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    /* Log entry with initial pointers */\n    lfs_probe_log(\"enter\", (void*)lfs, (void*)fsinfo, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt */\n    lfs_probe_log(\"after_lock\", (void*)lfs, (void*)fsinfo, err);\n\n    if (err) {\n        /* If lock failed, record and return the error (preserve original logic) */\n        LFS_TRACE(\"lfs_fs_stat(%p, %p) lock failed -> %d\", (void*)lfs, (void*)fsinfo, err);\n        lfs_probe_log(\"return_on_lock_failure\", (void*)lfs, (void*)fsinfo, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n\n    /* Log before unlocking (capture state returned by lfs_fs_stat_) */\n    lfs_probe_log(\"before_unlock\", (void*)lfs, (void*)fsinfo, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log after unlock */\n    lfs_probe_log(\"exit\", (void*)lfs, (void*)fsinfo, err);\n    return err;\n}\n"
}