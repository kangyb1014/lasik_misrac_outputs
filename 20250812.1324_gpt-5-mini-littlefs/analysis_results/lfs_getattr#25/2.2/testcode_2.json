{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(lfs->cfg) call resolves to the macro expansion ((void)cfg), which performs no observable action or side-effect. With the provided macros (LFS_UNLOCK((void)cfg) and LFS_LOCK returning 0), removing the LFS_UNLOCK invocation would not change program behaviour. Therefore this executed no-op statement constitutes dead code in the given build configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/202.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <inttypes.h>\n\n/* Probe logging function: append human-readable logs to /tmp/logs/202.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/202.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm = localtime_r(&t, &tm_buf);\n    if (tm) {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec);\n    } else {\n        fprintf(f, \"[time-unknown] \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/* Modified lfs_getattr with probes around lock/unlock to demonstrate the no-op unlock scenario. */\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and lock result, including the cfg pointer value that is passed to LOCK/UNLOCK. */\n    lfs_probe_log(\"enter lfs_getattr: lfs=%p path=\\\"%s\\\" type=%\"PRIu8\" buffer=%p size=%\"PRIu32\" LFS_LOCK_ret=%d cfg=%p\",\n            (void*)lfs, (path ? path : \"(null)\"), type, buffer, size, err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_probe_log(\"lfs_getattr: early return due to LFS_LOCK error=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n\n    /* Log just before calling LFS_UNLOCK so callers can see that it was invoked with this cfg pointer. */\n    lfs_probe_log(\"lfs_getattr: before LFS_UNLOCK cfg=%p res=%\"PRId32, (void*)lfs->cfg, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log immediately after the unlock call. If the macro is a no-op (e.g. ((void)cfg)),\n       these logs will show the call site was reached but no observable state changes occurred\n       as a result of the unlock in this build configuration. */\n    lfs_probe_log(\"lfs_getattr: after LFS_UNLOCK cfg=%p res=%\"PRId32, (void*)lfs->cfg, res);\n\n    return res;\n}\n"
}