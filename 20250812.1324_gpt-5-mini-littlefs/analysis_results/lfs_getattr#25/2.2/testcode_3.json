{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the expression-statement ((void)cfg), which is executed in functions such as lfs_getattr via LFS_UNLOCK(lfs->cfg); that statement performs no observable action (it only casts to void to suppress unused-parameter warnings). Removing the call would not change program behaviour, so the executed no-op constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/202.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: appends human-readable records to /tmp/logs/202.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/202.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_probe_log(\"lfs_getattr: LFS_LOCK failed err=%d (lfs=%p, path=\\\"%s\\\")\",\n                err, (void*)lfs, path ? path : \"(null)\");\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_probe_log(\"lfs_getattr: entered (lfs=%p, path=\\\"%s\\\", type=%u, buffer=%p, size=%llu)\",\n            (void*)lfs, path ? path : \"(null)\", (unsigned)type, buffer, (unsigned long long)size);\n\n    lfs_probe_log(\"lfs_getattr: calling lfs_getattr_(lfs=%p, path=\\\"%s\\\")\",\n            (void*)lfs, path ? path : \"(null)\");\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    lfs_probe_log(\"lfs_getattr: lfs_getattr_ returned res=%lld\", (long long)res);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n\n    /* Probe around the LFS_UNLOCK to capture that the call is executed and\n       to record the cfg pointer value. This shows the executed no-op in the\n       violation scenario: the unlock macro expands to ((void)cfg). */\n    lfs_probe_log(\"lfs_getattr: about to call LFS_UNLOCK with cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_getattr: after LFS_UNLOCK with cfg=%p\", (void*)lfs->cfg);\n\n    return res;\n}\n"
}