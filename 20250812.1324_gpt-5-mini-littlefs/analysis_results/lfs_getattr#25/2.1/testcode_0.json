{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg, 0), so int err = LFS_LOCK(lfs->cfg) will always set err to 0. The subsequent if (err) { return err; } can never be true, making the return statement unreachable in this configuration. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1 (unless LFS_LOCK can be configured differently across the project, in which case the unreachable-ness would be conditional).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/201.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helpers to log control flow and state for lfs_getattr. */\nstatic FILE* lfs_open_log(void) {\n    FILE *f = fopen(\"/tmp/logs/201.txt\", \"a\");\n    if (f) return f;\n    /* Try create directory if it doesn't exist, then try again. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    return fopen(\"/tmp/logs/201.txt\", \"a\");\n}\n\nstatic void lfs_log_msg(const char *fmt, ...) {\n    FILE *f = lfs_open_log();\n    if (!f) return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Keep the original function signature and logic, only add probes. */\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    /* Log entry with parameters */\n    lfs_log_msg(\"[ENTRY] lfs_getattr: lfs=%p path=\\\"%s\\\" type=%u buffer=%p size=%llu\",\n            (void*)lfs, path ? path : \"(null)\", (unsigned)type, buffer, (unsigned long long)size);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of LFS_LOCK so the value that makes the branch decision is recorded. */\n    lfs_log_msg(\"[PROBE] After LFS_LOCK: err=%d\", err);\n\n    if (err) {\n        /* Log that we are taking the early return path and the exact error. */\n        lfs_log_msg(\"[BRANCH] if (err) taken: returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_log_msg(\"[ACTION] calling lfs_getattr_ with same args\");\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    /* Log the return value from the underlying implementation. */\n    lfs_log_msg(\"[RETURN_VAL] lfs_getattr_ returned res=%lld\", (long long)res);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    lfs_log_msg(\"[ACTION] calling LFS_UNLOCK\");\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_msg(\"[EXIT] lfs_getattr returning res=%lld\", (long long)res);\n    return res;\n}\n"
}