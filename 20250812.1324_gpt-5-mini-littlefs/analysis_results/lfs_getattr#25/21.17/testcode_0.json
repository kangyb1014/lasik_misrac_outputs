{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcspn(name, \"/\") can read bytes up to the terminating NUL. lfs_dir_find does not check that the incoming path pointer is non-NULL or that the string is NUL-terminated within a bounded buffer. Therefore if a caller passes a NULL pointer or a char buffer that is not NUL-terminated (for example: char buf[4] = {'a','b','c','d'} passed as path), strcspn will scan past the buffer and access memory beyond the object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/207.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers to record control flow and state for debugging.\n * Logs are appended to /tmp/logs/207.txt. These helpers do NOT\n * dereference the 'path' pointer to avoid introducing further\n * out-of-bounds reads; they only record the pointer value and whether\n * it is NULL. This preserves the original logic of lfs_getattr.\n */\nstatic void lfs_log_probe_before(const void *lfs, const char *path,\n        unsigned type, void *buffer, unsigned long long size) {\n    FILE *f = fopen(\"/tmp/logs/207.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[BEFORE] lfs_getattr: lfs=%p path=%p type=%u buffer=%p size=%llu\\n\",\n            lfs, (void*)path, type, buffer, size);\n    if (path == NULL) {\n        fprintf(f, \"  path == NULL\\n\");\n    } else {\n        /* Do NOT dereference path here. Just note that it is non-NULL. */\n        fprintf(f, \"  path != NULL (not dereferenced here)\\n\");\n    }\n    fflush(f);\n    fclose(f);\n}\n\nstatic void lfs_log_probe_after(const void *lfs, const char *path,\n        unsigned type, void *buffer, unsigned long long size, long res) {\n    FILE *f = fopen(\"/tmp/logs/207.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[AFTER]  lfs_getattr: lfs=%p path=%p type=%u buffer=%p size=%llu -> res=%ld\\n\",\n            lfs, (void*)path, type, buffer, size, res);\n    if (res < 0) {\n        fprintf(f, \"  result indicates error (res=%ld)\\n\", res);\n    }\n    fflush(f);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Probe before delegating to implementation. Cast sizes/types to\n     * portable unsigned long long / unsigned for logging. Do NOT read\n     * the contents of 'path' to avoid creating new out-of-bounds accesses. */\n    lfs_log_probe_before((void*)lfs, path, (unsigned)type,\n            buffer, (unsigned long long)size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    /* Probe after call to capture return value and context. */\n    lfs_log_probe_after((void*)lfs, path, (unsigned)type,\n            buffer, (unsigned long long)size, (long)res);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}