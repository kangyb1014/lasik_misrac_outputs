{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses a non\u2011standard form of variadic macro parameter list: '#define LFS_TRACE(__VA_ARGS__)'. Using '__VA_ARGS__' as the explicit parameter name in the macro parameter list is a compiler extension (non\u2011standard). Replace with the standard C99 form '#define LFS_TRACE(...)' (and use __VA_ARGS__ in the replacement list) to avoid the extension.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/128.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal type stubs so this file is compilable on its own. */\ntypedef struct lfs { void *cfg; } lfs_t;\ntypedef struct lfs_file { int dummy; } lfs_file_t;\n\n/* Helper: append formatted messages to the probe log. */\nstatic void lfs_probe_logf(const char *fmt, ...) {\n    va_list ap;\n    va_start(ap, fmt);\n    FILE *f = fopen(\"/tmp/logs/128.txt\", \"a\");\n    if (f) {\n        vfprintf(f, fmt, ap);\n        fputs(\"\\n\", f);\n        fflush(f);\n        fclose(f);\n    }\n    va_end(ap);\n}\n\n/* Provide LFS_TRACE as a function (avoids using/defining macros here).\n   This captures the formatted trace messages into the probe log so the\n   control flow and the exact parameters passed to LFS_TRACE are recorded. */\nvoid LFS_TRACE(const char *fmt, ...) {\n    va_list ap;\n    va_start(ap, fmt);\n    FILE *f = fopen(\"/tmp/logs/128.txt\", \"a\");\n    if (f) {\n        fputs(\"[LFS_TRACE] \", f);\n        vfprintf(f, fmt, ap);\n        fputs(\"\\n\", f);\n        fflush(f);\n        fclose(f);\n    }\n    va_end(ap);\n}\n\n/* Minimal stubs for lock/unlock and the underlying rewind function so the\n   code is self-contained and executable. These stubs also log actions so\n   the probe file contains the full control path. */\nint LFS_LOCK(void *cfg) {\n    lfs_probe_logf(\"LFS_LOCK(cfg=%p) called\", cfg);\n    /* Simulate success (0). In real system this may return an error. */\n    return 0;\n}\n\nvoid LFS_UNLOCK(void *cfg) {\n    lfs_probe_logf(\"LFS_UNLOCK(cfg=%p) called\", cfg);\n}\n\nint lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {\n    lfs_probe_logf(\"lfs_file_rewind_ called with lfs=%p file=%p\", (void*)lfs, (void*)file);\n    /* Preserve original behavior: return 0 (success) by default. */\n    return 0;\n}\n\n/* Modified lfs_file_rewind with inserted probe logging to /tmp/logs/128.txt.\n   The original logic is preserved: lock, trace, call underlying function,\n   trace result, unlock, and return error code. Additional probes record\n   the control path and state to help reproduce the violation scenario. */\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_logf(\"ENTER lfs_file_rewind: LFS_LOCK returned %d\", err);\n    if (err) {\n        lfs_probe_logf(\"EXIT lfs_file_rewind early due to lock error=%d\", err);\n        return err;\n    }\n\n    /* Original trace call preserved. This will also be recorded by the\n       LFS_TRACE function above (which writes into the same probe file). */\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n    lfs_probe_logf(\"After entry LFS_TRACE: lfs=%p file=%p\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n    lfs_probe_logf(\"Returned from lfs_file_rewind_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    lfs_probe_logf(\"Before unlocking: err=%d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_logf(\"EXIT lfs_file_rewind: returning %d\", err);\n    return err;\n}\n"
}