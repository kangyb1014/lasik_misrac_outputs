{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(lfs->cfg) expands to ((void)cfg, 0), so the call always yields 0. Thus 'int err = LFS_LOCK(lfs->cfg);' assigns a constant 0 and the following 'if (err) { return err; }' will never be taken. The assignment and the conditional are executed but their removal would not affect program behaviour in this project configuration, so this constitutes dead code and violates MISRA C 2023 Rule 2.2. (Caveat: if LFS_LOCK is nontrivial in other build configurations, then it would not be dead in those builds.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/130.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/130.txt\n   Kept static to avoid external symbol collisions and preserve original logic. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/130.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record the value returned by LFS_LOCK and the pointers */\n    lfs_probe_log(\"lfs_file_rewind: after LFS_LOCK -> err=%d, lfs=%p, file=%p\",\n                  err, (void*)lfs, (void*)file);\n\n    if (err) {\n        /* Probe: record that the error branch is taken and the returned error */\n        lfs_probe_log(\"lfs_file_rewind: LFS_LOCK error branch taken -> returning %d\", err);\n        return err;\n    }\n\n    /* Probe: record that the LFS_LOCK did not return an error and execution continues */\n    lfs_probe_log(\"lfs_file_rewind: LFS_LOCK returned 0, continuing to lfs_file_rewind_\");\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Probe: record result from lfs_file_rewind_ */\n    lfs_probe_log(\"lfs_file_rewind: after lfs_file_rewind_ -> err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n\n    /* Probe: record before unlocking */\n    lfs_probe_log(\"lfs_file_rewind: about to call LFS_UNLOCK(lfs->cfg)\");\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_file_rewind: after LFS_UNLOCK, returning %d\", err);\n\n    return err;\n}\n"
}