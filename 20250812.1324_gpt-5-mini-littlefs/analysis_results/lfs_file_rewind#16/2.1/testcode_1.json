{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0), so the assignment int err = LFS_LOCK(lfs->cfg); always yields 0. Therefore the conditional if (err) { return err; } can never be true and the 'return err;' statement is unreachable in this project configuration, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/129.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state to /tmp/logs/129.txt. */\nstatic void lfs_probe_log_state(const char *evt, const void *lfs, const void *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/129.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[lfs_probe] %s lfs=%p file=%p err=%d\\n\", evt, lfs, file, err);\n        fclose(f);\n    }\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock attempt so callers can observe the value\n       that leads to the conditional below. */\n    lfs_probe_log_state(\"after_lock\", (const void *)lfs, (const void *)file, err);\n\n    if (err) {\n        /* Log entering the error branch (should be absent if LFS_LOCK always returns 0). */\n        lfs_probe_log_state(\"enter_if_err\", (const void *)lfs, (const void *)file, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Log the result of the internal rewind operation. */\n    lfs_probe_log_state(\"after_rewind_\", (const void *)lfs, (const void *)file, err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log just before returning to capture final state. */\n    lfs_probe_log_state(\"before_return\", (const void *)lfs, (const void *)file, err);\n\n    return err;\n}\n"
}