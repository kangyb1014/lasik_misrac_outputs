{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_file_rewind, err is initialized from LFS_LOCK(lfs->cfg), and the macro is defined as ((void)cfg,0) which always yields 0. Therefore the branch if (err) { return err; } can never be taken (the body is unreachable). This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/129.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Probe function to log control flow and state to /tmp/logs/129.txt.\n * Keeps logging best-effort (ignores errors creating the directory or opening the file).\n * This function is non-intrusive and preserves the original behavior of lfs_file_rewind.\n */\nstatic void lfs_file_rewind_log(const char *stage, lfs_t *lfs, lfs_file_t *file, int err) {\n    /* try to create directory if it doesn't exist; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/129.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log the stage, pointers and err value. Keep message succinct. */\n    (void)fprintf(f, \"%s: lfs=%p file=%p err=%d\\n\", stage, (void*)lfs, (void*)file, err);\n    (void)fclose(f);\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    /* entry probe */\n    lfs_file_rewind_log(\"enter\", lfs, file, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* log result of lock to capture the value that determines the branch */\n    lfs_file_rewind_log(\"after_lock\", lfs, file, err);\n\n    if (err) {\n        /* if this ever runs, it provides direct evidence in the log */\n        lfs_file_rewind_log(\"return_due_to_lock_error\", lfs, file, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n\n    /* log state before unlocking */\n    lfs_file_rewind_log(\"before_unlock\", lfs, file, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* final log after unlock and before return */\n    lfs_file_rewind_log(\"after_unlock_returning\", lfs, file, err);\n\n    return err;\n}\n"
}