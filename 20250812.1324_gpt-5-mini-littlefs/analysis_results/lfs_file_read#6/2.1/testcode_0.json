{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0), so err is always 0 and the condition if (err) is never true. Therefore the branch body (return err;) is unreachable with the given macro definition.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/49.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    /* Probe log: record entry and inputs */\n    {\n        FILE *log = fopen(\"/tmp/logs/49.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ENTER lfs_file_read: lfs=%p file=%p buffer=%p size=%\" PRIu32 \"\\n\",\n                    (void*)lfs, (void*)file, buffer, size);\n            fclose(log);\n        }\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe log: value returned by LFS_LOCK and cfg pointer */\n    {\n        FILE *log = fopen(\"/tmp/logs/49.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_file_read: LFS_LOCK(lfs->cfg=%p) -> %d\\n\",\n                    (void*)lfs->cfg, err);\n            fclose(log);\n        }\n    }\n\n    if (err) {\n        /* Probe log: branch taken for non-zero err */\n        FILE *log = fopen(\"/tmp/logs/49.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_file_read: err != 0 (err=%d), returning err\\n\", err);\n            fclose(log);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe log: about to call lfs_file_read_ */\n    {\n        FILE *log = fopen(\"/tmp/logs/49.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_file_read: calling lfs_file_read_(lfs=%p, file=%p, size=%\" PRIu32 \")\\n\",\n                    (void*)lfs, (void*)file, size);\n            fclose(log);\n        }\n    }\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    /* Probe log: result of lfs_file_read_ */\n    {\n        FILE *log = fopen(\"/tmp/logs/49.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_file_read: lfs_file_read_ -> %\" PRId32 \"\\n\", res);\n            fclose(log);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe log: exit */\n    {\n        FILE *log = fopen(\"/tmp/logs/49.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"EXIT lfs_file_read: returning %\" PRId32 \"\\n\", res);\n            fclose(log);\n        }\n    }\n\n    return res;\n}\n"
}