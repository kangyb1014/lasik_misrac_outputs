{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe check for an error is dead: LFS_LOCK is defined as ((void)cfg, 0) so err is always 0. Therefore the conditional block if (err) { return err; } can never be taken and its removal would not change program behaviour in the given project configuration, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/50.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper probe: append a formatted message to the probe log. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* Probe that logs the key state around lfs_file_read entry. */\nstatic void lfs_probe_log_entry(void *lfs_ptr, void *file_ptr, unsigned long long size, int err_before)\n{\n    lfs_probe_log(\"ENTER lfs_file_read: lfs=%p, file=%p, size=%llu, err_before_lock=%d\",\n            lfs_ptr, file_ptr, size, err_before);\n}\n\n/* Probe that logs the branch decision for the err check. */\nstatic void lfs_probe_log_err_branch(int err)\n{\n    if (err) {\n        lfs_probe_log(\"ERR BRANCH: err=%d -> branch TAKEN (will return err)\", err);\n    } else {\n        lfs_probe_log(\"ERR BRANCH: err=%d -> branch NOT TAKEN (continue)\", err);\n    }\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    /* Log the call and state prior to locking */\n    lfs_probe_log_entry((void*)lfs, (void*)file, (unsigned long long)size, /*err_before*/ -1);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock and the value of err */\n    lfs_probe_log(\"AFTER LFS_LOCK: lfs=%p, cfg=%p, err=%d\", (void*)lfs, (void*)lfs->cfg, err);\n\n    /* Log the err branch decision so it is easy to reproduce the scenario where err is always 0 */\n    lfs_probe_log_err_branch(err);\n\n    if (err) {\n        /* If this branch is ever taken, record that fact before returning */\n        lfs_probe_log(\"RETURNING EARLY FROM lfs_file_read: err=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n\n    /* Log the result before unlocking */\n    lfs_probe_log(\"BEFORE UNLOCK: lfs=%p, file=%p, result=%lld\", (void*)lfs, (void*)file, (long long)res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log after unlocking */\n    lfs_probe_log(\"EXIT lfs_file_read: lfs=%p, file=%p, result=%lld\", (void*)lfs, (void*)file, (long long)res);\n\n    return res;\n}\n"
}