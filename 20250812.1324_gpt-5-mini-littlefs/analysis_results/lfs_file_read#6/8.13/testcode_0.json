{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_mlist_isopen takes non-const pointers (struct lfs_mlist *head, struct lfs_mlist *node) but only reads the list and does not modify any list nodes. According to MISRA C 2023 Rule 8.13, these should be const-qualified (e.g. const struct lfs_mlist *head, const struct lfs_mlist *node). The current implementation also uses a pointer-to-pointer (struct lfs_mlist **p = &head) which is unnecessary for read-only traversal and prevents straightforward const-correctness. A compliant fix is to change the prototype to use const pointers and iterate with a const pointer (const struct lfs_mlist *p = head; p != NULL; p = p->next).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/51.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append logs to /tmp/logs/51.txt. Keeps original logic unchanged. */\nstatic void lfs_probe_log_entry(const lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size) {\n    FILE *fp = fopen(\"/tmp/logs/51.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    fprintf(fp, \"[probe] lfs_file_read ENTRY: lfs=%p, file=%p, buffer=%p, size=%llu\\n\",\n            (const void*)lfs, (void*)file, buffer, (unsigned long long)size);\n\n    /* Log the mlist pointer stored in lfs (if available) for evidence */\n    fprintf(fp, \"[probe] lfs->mlist = %p\\n\", (void*)(lfs ? lfs->mlist : NULL));\n\n    /* Call lfs_mlist_isopen and log its return value. We use the same cast as the\n       original code to reproduce the invocation that is the subject of the\n       violation report (non-const pointers). This call is read-only in the\n       reported scenario, and calling it here only records its result; it does\n       not change program logic. */\n    int isopen = 0;\n    /* Protect call with a check in case lfs or its mlist is NULL to avoid UB */\n    if (lfs && lfs->mlist) {\n        isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n        fprintf(fp, \"[probe] lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file) -> %d\\n\", isopen);\n    } else {\n        fprintf(fp, \"[probe] lfs_mlist_isopen not called (lfs or lfs->mlist is NULL)\\n\");\n    }\n\n    /* Provide explicit note about the const-qualification concern for auditors */\n    fprintf(fp, \"[probe] NOTE: lfs_mlist_isopen was invoked with non-const pointer types (cast present).\\n\");\n\n    fclose(fp);\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Probe: record entry and state before assertions and read */\n    lfs_probe_log_entry(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n\n    /* Probe: record outcome as well */\n    {\n        FILE *fp = fopen(\"/tmp/logs/51.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"[probe] lfs_file_read EXIT: result=%\" PRId32 \"\\n\", res);\n            fclose(fp);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}