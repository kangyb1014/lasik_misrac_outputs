{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)lfs;' is an executed no-op (a cast-to-void expression statement) that has no side-effects; removing it does not change program behaviour. It exists solely to silence an \"unused parameter\" warning, so it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logger: append human-readable control-flow/state logs to /tmp/logs/42.txt.\n   Implemented as a small helper so it can be linked into the existing project without\n   changing the original lfs_file_size logic. */\nstatic void lfs_probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"%s: \", tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\n/* Modified lfs_file_size with probes inserted. The original logic is preserved;\n   probes only log control flow and state to /tmp/logs/42.txt for evidence gathering. */\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Log function entry and parameters */\n    lfs_probe_log(\"ENTRY\", \"lfs_file_size(lfs=%p, file=%p)\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"LOCK_RESULT\", \"err=%d\", err);\n    if (err) {\n        lfs_probe_log(\"EARLY_RETURN\", \"lock failed, returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"BEFORE_INTERNAL_CALL\", \"calling lfs_file_size_(lfs=%p, file=%p)\", (void*)lfs, (void*)file);\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n    lfs_probe_log(\"AFTER_INTERNAL_CALL\", \"returned res=%\" PRIu32, res);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"EXIT\", \"unlock done, returning res=%\" PRIu32, res);\n    return res;\n}\n"
}