{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the presented build LFS_UNLOCK(cfg) is defined as ((void)cfg), which is an expression statement with no side-effects. The statement LFS_UNLOCK(lfs->cfg); is executed but performs no observable action; removing it would not change program behaviour. Therefore this is dead code (e.g. together with the no-op LFS_LOCK, the lock/unlock pair has no effect).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Probe: log lock invocation and result */\n    {\n        FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[probe] lfs_file_size: after LFS_LOCK: cfg=%p, file=%p, err=%d\\n\",\n                    (void*)lfs->cfg, (void*)file, err);\n            fclose(f);\n        }\n    }\n\n    if (err) {\n        /* Probe: log early return due to lock error */\n        FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[probe] lfs_file_size: lock failed, returning err=%d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n\n    /* Probe: log state just before unlock. This will demonstrate whether\n       the unlock call performs any observable action (if the unlock is a no-op,\n       the before/after logs will be identical apart from timestamps). */\n    {\n        FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[probe] before LFS_UNLOCK: cfg=%p, file=%p, res=%\"PRIu32\"\\n\",\n                    (void*)lfs->cfg, (void*)file, res);\n            fclose(f);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: log state immediately after unlock */\n    {\n        FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[probe] after LFS_UNLOCK: cfg=%p, file=%p, res=%\"PRIu32\"\\n\",\n                    (void*)lfs->cfg, (void*)file, res);\n            fclose(f);\n        }\n    }\n\n    return res;\n}\n"
}