{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0). The sub-expression (void)cfg is evaluated at runtime but has no effect; removing that expression (or replacing the macro with just 0) would not change program behaviour. Thus the macro introduces an executed, side\u2011effect\u2011free operation (a no\u2011op) that meets the definition of dead code. (Note: the subsequent if (err) { return err; } body is never taken with this macro, but unreachable code is distinct from dead code \u2014 the actual violation is the executed no\u2011op produced by the macro.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends formatted logs to /tmp/logs/42.txt */\nstatic void lfs_logf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe wrapper around LFS_LOCK to capture that the macro is invoked and\n   to record its returned value. We intentionally keep its behavior the\n   same as calling LFS_LOCK(cfg) so program logic is preserved. */\nstatic int lfs_probe_lock(void *cfg) {\n    lfs_logf(\"PROBE: before LFS_LOCK(cfg=%p)\", cfg);\n    int err = LFS_LOCK(cfg);\n    lfs_logf(\"PROBE: after  LFS_LOCK -> err=%d\", err);\n    return err;\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Use the probe wrapper so we record the execution of the LFS_LOCK\n       macro and its returned value into /tmp/logs/42.txt. */\n    int err = lfs_probe_lock(lfs->cfg);\n    lfs_logf(\"PROBE: evaluated err from LFS_LOCK => %d\", err);\n    if (err) {\n        lfs_logf(\"PROBE: if(err) branch taken, returning err=%d\", err);\n        return err;\n    }\n    lfs_logf(\"PROBE: if(err) branch NOT taken (err=%d)\", err);\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_logf(\"PROBE: final result res=%\" PRIu32 \", returning res\", (unsigned)res);\n    return res;\n}\n"
}