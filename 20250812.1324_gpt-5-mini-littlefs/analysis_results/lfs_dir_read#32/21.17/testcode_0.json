{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcpy(info->name, \"/\") without checking the size of info->name. If LFS_NAME_MAX is defined as 0 (so info->name is char[1]) or otherwise the buffer length is < 2, copying the two bytes '/' and '\\0' will write past the end of the array, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure and input pointers */\n        FILE *f = fopen(\"/tmp/logs/263.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_read: LFS_LOCK failed: err=%d lfs=%p dir=%p info=%p\\n\",\n                    err, (void*)lfs, (void*)dir, (void*)info);\n            fclose(f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Probe log before delegating to lfs_dir_read_()\n       We log compile-time size of info->name (sizeof does not evaluate its operand),\n       and we safely dump that many bytes. This helps reproduce the violation\n       scenario where copying \"/\" (2 bytes including NUL) into a buffer with\n       size < 2 would overflow. */\n    {\n        FILE *f = fopen(\"/tmp/logs/263.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_dir_read: lfs=%p dir=%p info=%p\\n\",\n                    (void*)lfs, (void*)dir, (void*)info);\n\n            /* sizeof(info->name) is evaluated at compile time and is safe\n               as long as struct lfs_info is visible to the compilation unit. */\n            size_t name_size = sizeof(info->name);\n            fprintf(f, \"info->name (compile-time) size=%zu\\n\", name_size);\n\n            /* Dump raw bytes up to name_size. This reads the array elements\n               within their declared bounds (no out-of-bounds access). */\n            fprintf(f, \"info->name bytes:\");\n            for (size_t i = 0; i < name_size; i++) {\n                unsigned char c = (unsigned char)info->name[i];\n                fprintf(f, \" %02x\", c);\n            }\n            fprintf(f, \"\\n\");\n\n            /* Print as a string up to name_size (may not be NUL-terminated). */\n            fprintf(f, \"info->name as string (up to size): '%.*s'\\n\", (int)name_size, info->name);\n\n            if (name_size < 2) {\n                fprintf(f, \"POTENTIAL VIOLATION: info->name size < 2; copying '/' (2 bytes including NUL) would overflow this buffer.\\n\");\n            }\n\n            fclose(f);\n        }\n    }\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Probe log after call to capture resulting state */\n    {\n        FILE *f = fopen(\"/tmp/logs/263.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_dir_read: err=%d lfs=%p dir=%p info=%p\\n\",\n                    err, (void*)lfs, (void*)dir, (void*)info);\n\n            size_t name_size = sizeof(info->name);\n            fprintf(f, \"info->name (compile-time) size=%zu\\n\", name_size);\n            fprintf(f, \"info->name bytes after call:\");\n            for (size_t i = 0; i < name_size; i++) {\n                unsigned char c = (unsigned char)info->name[i];\n                fprintf(f, \" %02x\", c);\n            }\n            fprintf(f, \"\\n\");\n            fprintf(f, \"info->name as string after call (up to size): '%.*s'\\n\", (int)name_size, info->name);\n\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}