{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe branch 'if (err) { return err; }' is unreachable because LFS_LOCK(cfg) is defined as '((void)cfg,0)', so err is always 0 and the conditional never true. This creates unreachable code (the return inside the if).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/113.txt */\nstatic void lfs_probe_printf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/113.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n#else\n    /* Fallback for platforms without localtime_r */\n    struct tm *tm_ptr = localtime(&t);\n    char timestr[64] = \"unknown-time\";\n    if (tm_ptr) {\n        strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm_ptr);\n    }\n#endif\n\n    fprintf(f, \"[%s] \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_rename with probes. Original logic is preserved; probes only log state. */\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock and the relevant state so other agents can reproduce the scenario. */\n    lfs_probe_printf(\n        \"lfs_rename: after LFS_LOCK -> err=%d, lfs=%p, cfg=%p, oldpath=\\\"%s\\\", newpath=\\\"%s\\\"\",\n        err, (void*)lfs, (void*)lfs->cfg, (oldpath ? oldpath : \"(null)\"), (newpath ? newpath : \"(null)\"));\n\n    if (err) {\n        /* This branch is reported as unreachable when LFS_LOCK is defined to always return 0.\n           Keep the probe here so logs capture whether this branch is ever taken. */\n        lfs_probe_printf(\"lfs_rename: entering err-branch: err=%d (will return)\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    /* Log the result of the internal rename operation before unlocking. */\n    lfs_probe_printf(\"lfs_rename: lfs_rename_ returned %d; about to LFS_UNLOCK(cfg)\", err);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_printf(\"lfs_rename: completed, returning %d\", err);\n    return err;\n}\n"
}