{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"(void)lfs;\" is executed but has no effect on program behaviour; therefore it is dead code. Removing that cast-to-void does not change runtime behaviour (it only affects compiler warnings). This violates MISRA C 2023 Rule 2.2. For example, when LFS_MULTIVERSION is defined the parameter lfs is used later, making the explicit discard redundant; when LFS_MULTIVERSION is not defined lfs is unused and the cast merely suppresses a warning \u2014 in both cases the operation could be removed without affecting behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_forceconsistency code that contains useful probe functions that print useful logs to a file \"/tmp/logs/762.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_forceconsistency as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_forceconsistency:\n```c\nstatic int lfs_fs_forceconsistency(lfs_t *lfs) {\n    int err = lfs_fs_desuperblock(lfs);\n    if (err) {\n        return err;\n    }\n\n    err = lfs_fs_demove(lfs);\n    if (err) {\n        return err;\n    }\n\n    err = lfs_fs_deorphan(lfs, true);\n    if (err) {\n        return err;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_forceconsistency code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe helper: append a single-line log entry to /tmp/logs/762.txt. */\nstatic void lfs_probe_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/762.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified lfs_fs_forceconsistency that preserves original logic but\n * emits logs to help reproduce and evidence the reported Rule 2.2 scenario.\n * Logs include control-flow decisions and the incoming lfs pointer value.\n */\nstatic int lfs_fs_forceconsistency(lfs_t *lfs) {\n    /* Log entry and pointer value so callers can see whether the parameter\n       is actually observed or merely suppressed by a (void) cast. */\n    lfs_probe_write(\"ENTER lfs_fs_forceconsistency: lfs=%p\", (void *)lfs);\n\n    int err = lfs_fs_desuperblock(lfs);\n    lfs_probe_write(\"after lfs_fs_desuperblock: err=%d\", err);\n    if (err) {\n        lfs_probe_write(\"EXIT lfs_fs_forceconsistency early (desuperblock): err=%d\", err);\n        return err;\n    }\n\n    err = lfs_fs_demove(lfs);\n    lfs_probe_write(\"after lfs_fs_demove: err=%d\", err);\n    if (err) {\n        lfs_probe_write(\"EXIT lfs_fs_forceconsistency early (demove): err=%d\", err);\n        return err;\n    }\n\n    err = lfs_fs_deorphan(lfs, true);\n    lfs_probe_write(\"after lfs_fs_deorphan: err=%d\", err);\n    if (err) {\n        lfs_probe_write(\"EXIT lfs_fs_forceconsistency early (deorphan): err=%d\", err);\n        return err;\n    }\n\n    lfs_probe_write(\"EXIT lfs_fs_forceconsistency: success\");\n    return 0;\n}\n"
}