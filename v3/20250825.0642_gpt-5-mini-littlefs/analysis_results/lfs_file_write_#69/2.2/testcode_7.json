{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \u201c(void)lfs;\u201d in lfs_cache_drop is an executed expression statement with no side effects whose removal would not change program behaviour. It is executed every time lfs_cache_drop is called solely to suppress an unused-parameter warning, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/692.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write_:\n```c\nstatic lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (file->flags & LFS_F_READING) {\n        // drop any reads\n        int err = lfs_file_flush(lfs, file);\n        if (err) {\n            return err;\n        }\n    }\n\n    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {\n        file->pos = file->ctz.size;\n    }\n\n    if (file->pos + size > lfs->file_max) {\n        // Larger than file limit?\n        return LFS_ERR_FBIG;\n    }\n\n    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {\n        // fill with zeros\n        lfs_off_t pos = file->pos;\n        file->pos = file->ctz.size;\n\n        while (file->pos < pos) {\n            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return res;\n            }\n        }\n    }\n\n    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);\n    if (nsize < 0) {\n        return nsize;\n    }\n\n    file->flags &= ~LFS_F_ERRED;\n    return nsize;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Helper logging function that appends control-flow and state information\n   to /tmp/logs/692.txt. This function tries to be non-intrusive: it only\n   opens the file for append, writes the message, and closes the file. */\nstatic void lfs_debug_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/692.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    /* Log entry and initial state */\n    lfs_debug_log(\"ENTER lfs_file_write_: lfs=%p file=%p flags=0x%08x pos=%lld ctz.size=%lld size=%llu file_max=%lld\",\n            (void*)lfs, (void*)file, (unsigned)file->flags,\n            (long long)file->pos, (long long)file->ctz.size,\n            (unsigned long long)size, (long long)lfs->file_max);\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (file->flags & LFS_F_READING) {\n        /* drop any reads */\n        lfs_debug_log(\"BRANCH: file->flags has LFS_F_READING set, flushing reads\");\n        int err = lfs_file_flush(lfs, file);\n        lfs_debug_log(\"lfs_file_flush returned: %d\", err);\n        if (err) {\n            lfs_debug_log(\"EXIT lfs_file_write_: returning err=%d due to flush failure\", err);\n            return err;\n        }\n    } else {\n        lfs_debug_log(\"BRANCH: file->flags does not have LFS_F_READING (flags=0x%08x)\", (unsigned)file->flags);\n    }\n\n    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {\n        lfs_debug_log(\"BRANCH: append mode and pos < ctz.size (pos=%lld ctz.size=%lld): setting pos to ctz.size\",\n                (long long)file->pos, (long long)file->ctz.size);\n        file->pos = file->ctz.size;\n        lfs_debug_log(\"UPDATED pos=%lld\", (long long)file->pos);\n    } else {\n        lfs_debug_log(\"SKIP append adjustment (flags=0x%08x pos=%lld ctz.size=%lld)\",\n                (unsigned)file->flags, (long long)file->pos, (long long)file->ctz.size);\n    }\n\n    if (file->pos + size > lfs->file_max) {\n        /* Larger than file limit? */\n        lfs_debug_log(\"ERROR: requested write (pos=%lld + size=%llu) exceeds file_max=%lld, returning LFS_ERR_FBIG\",\n                (long long)file->pos, (unsigned long long)size, (long long)lfs->file_max);\n        return LFS_ERR_FBIG;\n    }\n\n    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {\n        /* fill with zeros */\n        lfs_off_t pos = file->pos;\n        lfs_debug_log(\"BRANCH: need to fill with zeros from pos=%lld down to ctz.size=%lld\",\n                (long long)pos, (long long)file->ctz.size);\n        file->pos = file->ctz.size;\n\n        lfs_ssize_t fill_count = 0;\n        while (file->pos < pos) {\n            lfs_debug_log(\"ZERO_FILL iteration: current pos=%lld target pos=%lld\", (long long)file->pos, (long long)pos);\n            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);\n            lfs_debug_log(\"lfs_file_flushedwrite for zero returned: %lld\", (long long)res);\n            if (res < 0) {\n                lfs_debug_log(\"EXIT lfs_file_write_: zero-fill failed with res=%lld\", (long long)res);\n                return res;\n            }\n            fill_count++;\n        }\n        lfs_debug_log(\"ZERO_FILL completed, iterations=%lld, new pos=%lld\", (long long)fill_count, (long long)file->pos);\n    } else {\n        lfs_debug_log(\"SKIP zero-fill (flags=0x%08x pos=%lld ctz.size=%lld)\",\n                (unsigned)file->flags, (long long)file->pos, (long long)file->ctz.size);\n    }\n\n    lfs_debug_log(\"CALLING lfs_file_flushedwrite with size=%llu buffer=%p current pos=%lld\",\n            (unsigned long long)size, buffer, (long long)file->pos);\n    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);\n    lfs_debug_log(\"lfs_file_flushedwrite returned: %lld\", (long long)nsize);\n    if (nsize < 0) {\n        lfs_debug_log(\"EXIT lfs_file_write_: returning error nsize=%lld\", (long long)nsize);\n        return nsize;\n    }\n\n    file->flags &= ~LFS_F_ERRED;\n    lfs_debug_log(\"EXIT lfs_file_write_: success returning nsize=%lld updated flags=0x%08x\",\n            (long long)nsize, (unsigned)file->flags);\n    return nsize;\n}\n"
}