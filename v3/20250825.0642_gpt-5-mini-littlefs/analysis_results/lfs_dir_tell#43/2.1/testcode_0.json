{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWith the macro LFS_LOCK(cfg) defined as ((void)cfg,0) it always evaluates to 0. In lfs_dir_tell the code 'int err = LFS_LOCK(lfs->cfg); if (err) { return err; }' can never take the true branch, so the 'return err;' statement (and the entire error-handling branch) is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/431.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: appends control-flow and state information to /tmp/logs/431.txt */\nstatic void lfs_dir_tell_probe(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/431.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock attempt and relevant pointers/state */\n    lfs_dir_tell_probe(\"[probe] lfs_dir_tell: after LFS_LOCK -> err=%d, lfs=%p, dir=%p, cfg=%p\",\n            err, (void*)lfs, (void*)dir, (void*)lfs->cfg);\n\n    if (err) {\n        /* Log that the error branch is taken and the error value returned */\n        lfs_dir_tell_probe(\"[probe] lfs_dir_tell: taking error branch, returning err=%d\", err);\n        return err;\n    }\n\n    lfs_dir_tell_probe(\"[probe] lfs_dir_tell: lock succeeded (err==0), continuing\");\n\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    /* Log the result from the underlying implementation before unlocking */\n    lfs_dir_tell_probe(\"[probe] lfs_dir_tell: lfs_dir_tell_ returned res=%\" PRId32 \", about to unlock\",\n            (int32_t)res);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_dir_tell_probe(\"[probe] lfs_dir_tell: unlocked, returning res=%\" PRId32, (int32_t)res);\n    return res;\n}\n"
}