{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0), so the assignment int err = LFS_LOCK(lfs->cfg); sets err to the constant 0. Therefore the controlling expression if (err) is invariant (always false). This is a direct violation of MISRA C 2023 Rule 14.3 \u2014 the condition cannot be an invariant. The listed exceptions (infinite-loop invariants or the special do-while constant-false exception) do not apply here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/435.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe/log helper: append control-flow and state info to /tmp/logs/435.txt.\n   Keeps behaviour of lfs_dir_tell unchanged; only observes state. */\nstatic void lfs_probe_log(const char *tag, const void *lfs, const void *dir,\n    int have_err, int err, int have_res, long long res)\n{\n    const char *logdir = \"/tmp/logs\";\n    const char *logfile = \"/tmp/logs/435.txt\";\n    /* try to create directory if it doesn't exist; ignore errors */\n    (void)mkdir(logdir, 0777);\n\n    FILE *f = fopen(logfile, \"a\");\n    if (!f) {\n        /* best-effort failure suppression: do not change program flow */\n        return;\n    }\n\n    fprintf(f, \"%s: lfs=%p dir=%p\", tag, lfs, dir);\n    if (have_err) {\n        fprintf(f, \" err=%d\", err);\n    }\n    if (have_res) {\n        fprintf(f, \" res=%lld\", res);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with probes inserted. */\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Probe just before taking the lock would duplicate the record of intent;\n       keep probe after lock evaluation to avoid changing evaluation order. */\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"after_lock\", (void*)lfs, (void*)dir, 1, err, 0, 0);\n    if (err) {\n        lfs_probe_log(\"early_return_lock_failed\", (void*)lfs, (void*)dir, 1, err, 0, 0);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_probe_log(\"before_dir_tell_\", (void*)lfs, (void*)dir, 0, 0, 0, 0);\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    lfs_probe_log(\"after_dir_tell_\", (void*)lfs, (void*)dir, 0, 0, 1, (long long)res);\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"before_return\", (void*)lfs, (void*)dir, 0, 0, 1, (long long)res);\n    return res;\n}\n"
}