{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement '(void)lfs;' in lfs_dir_tell_ merely evaluates and discards the parameter 'lfs' and has no side-effects. It is executed whenever lfs_dir_tell_ is called and removing it would not change program behaviour (the function returns dir->pos and does not use lfs). Therefore this statement meets the definition of dead code in MISRA C 2023 Rule 2.2 and violates the rule. (Note: if 'lfs' were volatile or its evaluation had observable side-effects, it would not be dead; in the given code it is a non-volatile pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/432.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logger: appends human-readable traces to /tmp/logs/432.txt\n   This helper preserves the original logic of lfs_dir_tell and only\n   records inputs, outputs and key control flow events to aid\n   reproduction/evidence gathering for the reported dead-code scenario. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/432.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_dir_tell with probes. Original logic is preserved; probes\n   only record the entry parameters, branch decisions and the returned\n   result so other agents can reproduce and gather evidence. */\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the locking failure and the pointers involved. */\n        probe_log(\"lfs_dir_tell: LFS_LOCK failed: err=%d, lfs=%p, dir=%p\",\n                  err, (void*)lfs, (void*)dir);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Record state immediately before delegating to lfs_dir_tell_. This\n       is intended to help show that the returned value is solely from\n       dir (and thus that discarding 'lfs' inside lfs_dir_tell_ would\n       have no observable effect). */\n    probe_log(\"lfs_dir_tell: pre-call: lfs=%p, dir=%p\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    /* Record the result and the same input pointers again to provide a\n       complete trace of the call. */\n    probe_log(\"lfs_dir_tell: post-call: res=%\" PRId32 \", lfs=%p, dir=%p\",\n              res, (void*)lfs, (void*)dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    probe_log(\"lfs_dir_tell: unlocking lfs=%p\", (void*)lfs);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}