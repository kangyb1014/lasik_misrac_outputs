{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression 'if (err)' is invariant because 'err' is initialized from LFS_LOCK(cfg), and in the provided configuration LFS_LOCK(cfg) is defined as ((void)cfg, 0) \u2014 a constant 0. Hence the condition is always false (dead code) and does not meet the allowed exceptions (it is not an intentional infinite loop), so this violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/705.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function to log control flow and key state to /tmp/logs/705.txt */\nstatic void lfs_format_probe(const char *event, void *lfs, const struct lfs_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/705.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Basic event, pointers and err */\n    fprintf(f, \"[lfs_format] event=%s lfs=%p cfg=%p err=%d\\n\", event, lfs, (const void*)cfg, err);\n\n    /* If cfg is present, log a few representative fields to help reproduce the scenario.\n       Cast to unsigned long long to avoid depending on PRIu32/PRId32 macros here. */\n    if (cfg) {\n        fprintf(f, \"  cfg->context=%p read=%p prog=%p erase=%p sync=%p\\n\",\n                cfg->context,\n                (void*)(uintptr_t)cfg->read,\n                (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase,\n                (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"  sizes: read_size=%llu prog_size=%llu block_size=%llu block_count=%llu\\n\",\n                (unsigned long long)cfg->read_size,\n                (unsigned long long)cfg->prog_size,\n                (unsigned long long)cfg->block_size,\n                (unsigned long long)cfg->block_count);\n        fprintf(f, \"  name_max=%llu file_max=%llu attr_max=%llu\\n\",\n                (unsigned long long)cfg->name_max,\n                (unsigned long long)cfg->file_max,\n                (unsigned long long)cfg->attr_max);\n    }\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Preserve original call to LFS_LOCK and capture its return for logging. */\n    int err = LFS_LOCK(cfg);\n\n    /* Log lock result and key cfg state immediately after the lock attempt. */\n    lfs_format_probe(\"after_lock\", lfs, cfg, err);\n\n    if (err) {\n        /* Log the early return path so the logs show the control flow when err != 0. */\n        lfs_format_probe(\"return_on_lock_error\", lfs, cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Before invoking the internal formatter, log the imminent call. */\n    lfs_format_probe(\"before_lfs_format_\", lfs, cfg, 0);\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Log the result returned by lfs_format_. */\n    lfs_format_probe(\"after_lfs_format_\", lfs, cfg, err);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    /* Log final return and that unlock has been performed. */\n    lfs_format_probe(\"final_return\", lfs, cfg, err);\n\n    return err;\n}\n"
}