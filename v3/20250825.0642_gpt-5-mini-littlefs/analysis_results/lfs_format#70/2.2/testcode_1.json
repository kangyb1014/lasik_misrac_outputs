{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(cfg); statement expands to the no-op ((void)cfg) given the supplied macro definition. As written (with LFS_THREADSAFE not enabled), the statement is executed but has no effect \u2014 removing it would not change program behaviour, so it is dead code. (Note: if LFS_THREADSAFE is defined, the macro would call a real unlock function and then would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logging helpers for lfs_format, writing to /tmp/logs/702.txt */\nstatic void lfs_format_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/702.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void lfs_format_probe_cfg(const struct lfs_config *cfg, const char *tag) {\n    if (!cfg) {\n        lfs_format_probe_log(\"%s cfg=NULL\", tag);\n        return;\n    }\n    /* Log key fields that reflect state and are safe to read */\n    lfs_format_probe_log(\n        \"%s cfg=%p {.context=%p, .read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n        \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", .block_size=%\"PRIu32\", .block_count=%\"PRIu32\"}\",\n        tag,\n        (void*)cfg, cfg->context,\n        (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n        (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n        cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    lfs_format_probe_log(\"lfs_format: after LFS_LOCK -> err=%d, lfs=%p, cfg=%p\", err, (void*)lfs, (void*)cfg);\n    if (err) {\n        lfs_format_probe_log(\"lfs_format: returning early due to lock error %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log configuration state before format operation */\n    lfs_format_probe_cfg(cfg, \"BEFORE_FORMAT\");\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n\n    /* Log state immediately before unlock to capture any changes made by lfs_format_ */\n    lfs_format_probe_cfg(cfg, \"BEFORE_UNLOCK\");\n\n    /* Execute unlock as in original code. We log before/after to capture if it had any observable effect. */\n    lfs_format_probe_log(\"CALLING LFS_UNLOCK(cfg) with cfg=%p\", (void*)cfg);\n    LFS_UNLOCK(cfg);\n    lfs_format_probe_log(\"RETURNED FROM LFS_UNLOCK(cfg) with cfg=%p\", (void*)cfg);\n\n    /* Log state after unlock to provide evidence whether unlock changed observable fields */\n    lfs_format_probe_cfg(cfg, \"AFTER_UNLOCK\");\n\n    lfs_format_probe_log(\"lfs_format: returning err=%d\", err);\n    return err;\n}\n"
}