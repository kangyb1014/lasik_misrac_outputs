{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe logging invocation LFS_TRACE(\"lfs_format -> %d\", err); is a no-op because LFS_TRACE is defined as an empty macro (#define LFS_TRACE(__VA_ARGS__)). After preprocessing this yields an empty statement (a standalone \u2018;\u2019) which is executed but has no effect; removing that statement would not change program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logger: appends human-readable traces to /tmp/logs/702.txt.\n   This helper preserves program logic (only side-effect: logging) and\n   allows reproduction/evidence collection for the reported no-op LFS_TRACE\n   macro scenario. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    /* Ensure directory exists. Ignore errors (e.g. EEXIST). */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/702.txt\", \"a\");\n    if (f == NULL) {\n        /* If we cannot open the file, fail silently to avoid changing\n           behaviour of the original code path. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Log entry and incoming state */\n    lfs_probe_log(\"ENTER lfs_format: lfs=%p cfg=%p\", (void*)lfs, (void*)cfg);\n\n    int err = LFS_LOCK(cfg);\n    lfs_probe_log(\"lfs_format: LFS_LOCK returned %d\", err);\n    if (err) {\n        /* Log the early return path (useful to reproduce the control flow). */\n        lfs_probe_log(\"lfs_format: returning early due to lock error %d\", err);\n        return err;\n    }\n\n    /* Preserve original trace call (may be a no-op macro). */\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Explicit probe that records the same detailed state regardless of\n       whether LFS_TRACE is a no-op. This is the evidence-producing log. */\n    lfs_probe_log(\n        \"lfs_format: cfg state: context=%p read=%p prog=%p erase=%p sync=%p \"\n        \"read_size=%\" PRIu32 \" prog_size=%\" PRIu32 \" block_size=%\" PRIu32\n        \" block_count=%\" PRIu32 \" block_cycles=%\" PRId32 \" cache_size=%\" PRIu32\n        \" lookahead_size=%\" PRIu32 \" read_buffer=%p prog_buffer=%p lookahead_buffer=%p \"\n        \"name_max=%\" PRIu32 \" file_max=%\" PRIu32 \" attr_max=%\" PRIu32,\n        cfg->context,\n        (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n        (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n        cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n        cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n        cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n        cfg->name_max, cfg->file_max, cfg->attr_max\n    );\n\n    err = lfs_format_(lfs, cfg);\n    lfs_probe_log(\"lfs_format: lfs_format_ returned %d\", err);\n\n    /* Preserve original trace call (may be a no-op macro). */\n    LFS_TRACE(\"lfs_format -> %d\", err);\n\n    /* Additional probe before unlocking to capture final state. */\n    lfs_probe_log(\"lfs_format: about to unlock and return %d\", err);\n\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}