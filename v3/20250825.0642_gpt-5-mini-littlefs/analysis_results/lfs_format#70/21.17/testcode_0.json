{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_cache_zero(lfs, &lfs->pcache) likely uses a string.h routine such as memset to zero the program cache buffer (e.g. memset(lfs->pcache.buffer, 0, lfs->cfg->cache_size)). If the user supplies cfg->prog_buffer that is smaller than cfg->cache_size (violating the documented precondition) or the size is otherwise incorrect, this will write beyond the bounds of the provided buffer. The code does not perform a runtime check of the actual buffer size (only assertions and a contractual comment), so this call can result in out-of-bounds access and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/709.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging helper for lfs_format.  This function appends human-readable\n   state and control-flow information to /tmp/logs/709.txt so that external\n   agents can reproduce and gather evidence for the reported violation\n   scenario.  It is intentionally lightweight and does not alter program\n   behavior. */\nstatic void lfs_format_log_probe(void *lfs, const struct lfs_config *cfg,\n                                 const char *stage, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/709.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"=== lfs_format probe ===\\n\");\n    fprintf(f, \"stage=%s\\n\", stage);\n    fprintf(f, \"lfs=%p, cfg=%p\\n\", lfs, (const void*)cfg);\n\n    if (cfg != NULL) {\n        fprintf(f, \"cfg->context=%p\\n\", cfg->context);\n        fprintf(f, \"cfg->read=%p, cfg->prog=%p, cfg->erase=%p, cfg->sync=%p\\n\",\n                (void*)(uintptr_t)cfg->read,\n                (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase,\n                (void*)(uintptr_t)cfg->sync);\n\n        /* Print numeric fields in a portable way by casting to unsigned long\n           or long as appropriate. These casts are only for logging and do\n           not affect program logic. */\n        fprintf(f, \"read_size=%lu, prog_size=%lu, block_size=%lu, block_count=%lu\\n\",\n                (unsigned long)cfg->read_size,\n                (unsigned long)cfg->prog_size,\n                (unsigned long)cfg->block_size,\n                (unsigned long)cfg->block_count);\n        fprintf(f, \"block_cycles=%ld, cache_size=%lu, lookahead_size=%lu\\n\",\n                (long)cfg->block_cycles,\n                (unsigned long)cfg->cache_size,\n                (unsigned long)cfg->lookahead_size);\n\n        fprintf(f, \"read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n        fprintf(f, \"name_max=%lu, file_max=%lu, attr_max=%lu\\n\",\n                (unsigned long)cfg->name_max,\n                (unsigned long)cfg->file_max,\n                (unsigned long)cfg->attr_max);\n\n        /* Helpful checks for reproduction: record whether key pointers are\n           NULL and the values of sizes related to the reported violation. */\n        fprintf(f, \"prog_buffer_is_null=%d\\n\", (cfg->prog_buffer == NULL));\n        fprintf(f, \"cache_size_value=%lu\\n\", (unsigned long)cfg->cache_size);\n    }\n\n    fprintf(f, \"err=%d\\n\", err);\n    fprintf(f, \"========================\\n\\n\");\n\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log lock failure for diagnostics */\n        lfs_format_log_probe(lfs, cfg, \"lock_failed\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log state right after acquiring lock and before calling the\n       implementation so that any mismatch between cfg->cache_size and the\n       actual buffer supplied by the user (cfg->prog_buffer) can be observed\n       in the logs. This provides control flow and state evidence for the\n       reported violation scenario. */\n    lfs_format_log_probe(lfs, cfg, \"before_format_call\", 0);\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Log the result of the format operation and state after the call. */\n    lfs_format_log_probe(lfs, cfg, \"after_format_call\", err);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}