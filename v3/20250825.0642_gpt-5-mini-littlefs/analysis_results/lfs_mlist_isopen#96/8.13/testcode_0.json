{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop declares p as \"struct lfs_mlist **p = &head;\" even though p is only used to read the pointer values (it never modifies *p or the pointed-to struct). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Here p could be declared as a pointer to a const pointer (for example: \"struct lfs_mlist * const *p = &head\") \u2014 or, if the listed nodes themselves are immutable, as \"const struct lfs_mlist * const *p\". Example corrected fragment: for (struct lfs_mlist * const *p = &head; *p; p = &(*p)->next) { ... }\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mlist_isopen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mlist_isopen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mlist_isopen:\n```c\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```\n</target_code>\nPlease provide the modified lfs_mlist_isopen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe function: logs control flow and state to /tmp/logs/963.txt */\nstatic void lfs_mlist_log_state(const char *label,\n        struct lfs_mlist **p, struct lfs_mlist *node, int iter) {\n    FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    struct lfs_mlist *cur = (p && *p) ? *p : NULL;\n    void *next = (cur) ? (void*)cur->next : NULL;\n\n    /* Write iteration, pointers and a label describing the location */\n    (void)fprintf(f, \"%s iter=%d p=%p *p=%p node=%p next=%p\\n\",\n            label, iter, (void*)p, (void*)cur, (void*)node, next);\n    (void)fclose(f);\n}\n\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    int iter = 0;\n    /* Log initial state */\n    lfs_mlist_log_state(\"start\", &head, node, iter);\n\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        /* Log each loop iteration and current pointers */\n        iter++;\n        lfs_mlist_log_state(\"loop_entry\", p, node, iter);\n\n        if (*p == (struct lfs_mlist*)node) {\n            lfs_mlist_log_state(\"match\", p, node, iter);\n            return true;\n        }\n    }\n\n    /* Log not-found outcome */\n    lfs_mlist_log_state(\"not_found\", &head, node, iter);\n    return false;\n}\n"
}