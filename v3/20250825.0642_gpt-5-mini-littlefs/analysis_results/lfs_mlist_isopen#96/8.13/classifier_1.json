{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_mlist_isopen:\n```c\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function parameters are not const-qualified even though they are only read (the function only traverses and compares pointers). According to MISRA C 2023 Rule 8.13, these pointers should point to const-qualified types whenever possible. For example the signature could be changed to:\nstatic bool lfs_mlist_isopen(const struct lfs_mlist *head, const struct lfs_mlist *node)\nand the loop rewritten as for (const struct lfs_mlist *p = head; p; p = p->next) { if (p == node) return true; }\n(The current implementation using a struct lfs_mlist ** and &head prevents directly adding const without also changing the loop; however the loop can be rewritten to allow const, so the omission of const on the parameters is a violation.),"
}