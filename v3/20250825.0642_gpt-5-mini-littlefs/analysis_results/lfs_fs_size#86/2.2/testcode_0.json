{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0), which performs no side-effects and always evaluates to 0. In lfs_fs_size the statement int err = LFS_LOCK(lfs->cfg); therefore only sets err to 0 and its removal (or replacing with err = 0) would not change program behaviour. This constitutes dead code. (Note: although the macro may be a placeholder for a real lock implementation in other builds, in the given project configuration the LFS_LOCK invocation is a no-op and thus violates MISRA C 2023 Rule 2.2.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/862.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends human-readable traces to /tmp/logs/862.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/862.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    lfs_probe_log(\"ENTER lfs_fs_size: lfs=%p\", (void*)lfs);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Probe the result of the lock call to capture whether it is a no-op */\n    lfs_probe_log(\"After LFS_LOCK(lfs->cfg): err=%d\", err);\n\n    if (err) {\n        lfs_probe_log(\"LFS_LOCK returned non-zero err=%d -> early return\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n    lfs_probe_log(\"Calling lfs_fs_size_ (internal) for lfs=%p\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    lfs_probe_log(\"lfs_fs_size_ returned res=%lld (cast from lfs_ssize_t)\", (long long)res);\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n\n    lfs_probe_log(\"About to call LFS_UNLOCK(lfs->cfg) for lfs=%p\", (void*)lfs);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"Called LFS_UNLOCK(lfs->cfg) for lfs=%p\", (void*)lfs);\n\n    lfs_probe_log(\"EXIT lfs_fs_size: returning res=%lld\", (long long)res);\n    return res;\n}\n"
}