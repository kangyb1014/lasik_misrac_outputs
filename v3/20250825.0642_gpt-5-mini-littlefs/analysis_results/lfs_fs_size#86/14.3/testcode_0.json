{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression is if (err). err is initialized with LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as ((void)cfg,0), so err is always 0. Thus the controlling expression is an invariant false (if (0)), not an allowed infinite-loop or do-while exception. This violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/865.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe logging helper: append control-flow and state info to /tmp/logs/865.txt */\nstatic void lfs_log_probe(const char *label, lfs_t *lfs, int err, lfs_ssize_t res, int have_res)\n{\n    FILE *f = fopen(\"/tmp/logs/865.txt\", \"a\");\n    if (f) {\n        /* Log label, pointers, err and optional result. Keep output simple and robust. */\n        if (have_res) {\n            fprintf(f, \"%s: lfs=%p, cfg=%p, err=%d, res=%\" PRId32 \"\\n\",\n                    label, (void*)lfs, (void*)lfs->cfg, err, res);\n        } else {\n            fprintf(f, \"%s: lfs=%p, cfg=%p, err=%d\\n\",\n                    label, (void*)lfs, (void*)lfs->cfg, err);\n        }\n        fclose(f);\n    }\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe after attempting to take the lock to capture the value of err and pointers. */\n    lfs_log_probe(\"after_lock\", lfs, err, 0, 0);\n\n    if (err) {\n        /* Log the early-return path when lock acquisition reports an error. */\n        lfs_log_probe(\"returning_error\", lfs, err, 0, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    /* Log the result of the size computation before unlocking. */\n    lfs_log_probe(\"after_size\", lfs, err, res, 1);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log just before returning to capture final state. */\n    lfs_log_probe(\"final_return\", lfs, err, res, 1);\n\n    return res;\n}\n"
}