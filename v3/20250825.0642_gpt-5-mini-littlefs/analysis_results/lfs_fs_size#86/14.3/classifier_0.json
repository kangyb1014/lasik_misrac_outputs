{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_fs_size:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {\n    lfs_size_t size = 0;\n    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);\n    if (err) {\n        return err;\n    }\n\n    return size;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nint err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The controlling expression is if (err). err is initialized with LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as ((void)cfg,0), so err is always 0. Thus the controlling expression is an invariant false (if (0)), not an allowed infinite-loop or do-while exception. This violates MISRA C 2023 Rule 14.3."
}