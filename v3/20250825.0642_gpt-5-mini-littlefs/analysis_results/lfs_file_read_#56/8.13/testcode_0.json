{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'lfs_t *lfs' to lfs_bd_read is not const-qualified even though the function only reads from the lfs object (accesses lfs->cfg, lfs->block_count, etc.) and does not modify any lfs fields. It could be declared 'const lfs_t *lfs'. pcache is already const and rcache must be non-const because it is modified, but the non-const lfs parameter is unnecessary \u2014 violating Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read_:\n```c\nstatic lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        // flush out any writes\n        int err = lfs_file_flush(lfs, file);\n        if (err) {\n            return err;\n        }\n    }\n#endif\n\n    return lfs_file_flushedread(lfs, file, buffer, size);\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging utility: append human-readable traces to /tmp/logs/563.txt\n   Keeps original logic intact; used only to capture control flow and state\n   relevant to lfs_file_read_ without modifying program behaviour. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/563.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);\n\n    /* Log entry and basic state */\n    lfs_probe_log(\"ENTRY: lfs_file_read_ lfs=%p file=%p buffer=%p size=%llu file->flags=0x%02x\",\n            (void *)lfs, (void *)file, buffer, (unsigned long long)size,\n            (unsigned)file->flags);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        /* flush out any writes */\n        lfs_probe_log(\"INFO: detected LFS_F_WRITING; calling lfs_file_flush(lfs=%p, file=%p)\",\n                (void *)lfs, (void *)file);\n        int err = lfs_file_flush(lfs, file);\n        lfs_probe_log(\"FLUSH_RESULT: err=%d\", err);\n        if (err) {\n            lfs_probe_log(\"EXIT: lfs_file_read_ returning err=%d (flush failed)\", err);\n            return err;\n        }\n    } else {\n        lfs_probe_log(\"INFO: no LFS_F_WRITING flag set; skipping flush\");\n    }\n#endif\n\n    lfs_probe_log(\"CALL: lfs_file_flushedread(lfs=%p, file=%p, buffer=%p, size=%llu)\",\n            (void *)lfs, (void *)file, buffer, (unsigned long long)size);\n    lfs_ssize_t res = lfs_file_flushedread(lfs, file, buffer, size);\n    lfs_probe_log(\"EXIT: lfs_file_read_ returned res=%lld\", (long long)res);\n    return res;\n}\n"
}