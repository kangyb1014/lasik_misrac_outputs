{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to LFS_LOCK(lfs->cfg) is a no-op in this project: LFS_LOCK is defined as ((void)cfg,0), so the expression has no side-effects and always yields 0. The assignment int err = LFS_LOCK(lfs->cfg); only stores 0 into err (which is immediately tested), and removing the LFS_LOCK evaluation (or replacing it with err = 0) would not change program behaviour. Therefore the executed operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/992.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n\nint lfs_remove(lfs_t *lfs, const char *path) {\n    /* Preserve original locking call and capture its result */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log the lock result and call context so we can reproduce the dead-code scenario\n       The log file is appended to so repeated runs accumulate evidence. */\n    FILE *log = fopen(\"/tmp/logs/992.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"lfs_remove ENTER: lfs=%p path=\\\"%s\\\" LFS_LOCK_result=%d\\n\",\n                (void*)lfs, (path ? path : \"(null)\"), err);\n        fclose(log);\n    }\n\n    /* Preserve original early-return behavior */\n    if (err) {\n        log = fopen(\"/tmp/logs/992.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_remove EARLY RETURN: err=%d (from LFS_LOCK)\\n\", err);\n            fclose(log);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Call the underlying implementation and log its return value */\n    err = lfs_remove_(lfs, path);\n\n    log = fopen(\"/tmp/logs/992.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"lfs_remove after lfs_remove_: err=%d\\n\", err);\n        fclose(log);\n    }\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    log = fopen(\"/tmp/logs/992.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"lfs_remove EXIT: LFS_UNLOCK called, returning %d\\n\", err);\n        fclose(log);\n    }\n\n    return err;\n}\n"
}