{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_TRACE is defined as an empty replacement (#define LFS_TRACE(__VA_ARGS__)), so the statement LFS_TRACE(\"lfs_remove -> %d\", err); compiles to a null statement (no-op). This statement is executed but has no effect and could be removed without changing program behaviour in the given project configuration, so it constitutes dead code and violates MISRA C 2023 Rule 2.2. (If LFS_TRACE is enabled in other build configurations it would not be dead, but in the provided configuration it is.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/992.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe functions to log control flow and state for lfs_remove.  \n   These functions write to /tmp/logs/992.txt so external agents can\n   observe the execution path even when LFS_TRACE is a no-op.  */\nstatic void lfs_log_probe_enter(const void *lfs_ptr, const char *path)\n{\n    FILE *f = fopen(\"/tmp/logs/992.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"[probe] lfs_remove ENTER: lfs=%p path=\\\"%s\\\"\\n\",\n                lfs_ptr, (path != NULL) ? path : \"(null)\");\n        fclose(f);\n    }\n}\n\nstatic void lfs_log_probe_exit(const void *lfs_ptr, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/992.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"[probe] lfs_remove EXIT : lfs=%p err=%d\\n\",\n                lfs_ptr, err);\n        fclose(f);\n    }\n}\n\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    /* Original trace left intact so behavior is preserved. */\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Probe log to ensure the enter event is recorded regardless of LFS_TRACE. */\n    lfs_log_probe_enter((void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    /* Original trace left intact. In configurations where LFS_TRACE is a no-op,\n       the probe below will still record the exit and the returned error. */\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n\n    lfs_log_probe_exit((void*)lfs, err);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}