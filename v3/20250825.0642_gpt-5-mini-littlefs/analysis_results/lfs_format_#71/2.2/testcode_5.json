{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)lfs;' in function lfs_fs_disk_version(lfs_t *lfs) is an executed no-op used to suppress an unused-parameter warning. Its removal would not affect program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/712.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format_:\n```c\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n    {\n        err = lfs_init(lfs, cfg);\n        if (err) {\n            return err;\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        // create free lookahead\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        // create root dir\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        if (err) {\n            goto cleanup;\n        }\n\n        // write one superblock\n        lfs_superblock_t superblock = {\n            .version     = lfs_fs_disk_version(lfs),\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        if (err) {\n            goto cleanup;\n        }\n\n        // force compaction to prevent accidentally mounting any\n        // older version of littlefs that may live on disk\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        if (err) {\n            goto cleanup;\n        }\n\n        // sanity check that fetch works\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        if (err) {\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_deinit(lfs);\n    return err;\n\n}\n```\n</target_code>\nPlease provide the modified lfs_format_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/712.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n    {\n        err = lfs_init(lfs, cfg);\n        if (err) {\n            lfs_probe_log(\"lfs_format_: lfs_init failed: err=%d\", err);\n            return err;\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        // create free lookahead\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        // create root dir\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        if (err) {\n            lfs_probe_log(\"lfs_format_: lfs_dir_alloc failed: err=%d\", err);\n            goto cleanup;\n        }\n\n        /*\n         * Probe logs to capture the control path and state around the\n         * call to lfs_fs_disk_version(lfs). The reported MISRA violation\n         * concerns a no-op '(void)lfs;' inside lfs_fs_disk_version. By\n         * logging relevant lfs state before and after the call, agents can\n         * observe that the call does not mutate lfs state (evidence that a\n         * no-op may be present).\n         */\n        lfs_probe_log(\"lfs_format_: about to call lfs_fs_disk_version(lfs=%p)\", (void*)lfs);\n        lfs_probe_log(\"lfs_format_: pre-call snapshot: cfg=%p, cfg->block_size=%u, lfs->block_count=%llu, lfs->name_max=%llu, lfs->file_max=%llu, lfs->attr_max=%llu\",\n                (void*)cfg,\n                (unsigned)lfs->cfg->block_size,\n                (unsigned long long)lfs->block_count,\n                (unsigned long long)lfs->name_max,\n                (unsigned long long)lfs->file_max,\n                (unsigned long long)lfs->attr_max);\n\n        /* Call separately so we can log before/after */\n        uint32_t disk_version = lfs_fs_disk_version(lfs);\n\n        lfs_probe_log(\"lfs_format_: lfs_fs_disk_version returned: version=%u\", (unsigned)disk_version);\n        lfs_probe_log(\"lfs_format_: post-call snapshot: cfg=%p, cfg->block_size=%u, lfs->block_count=%llu, lfs->name_max=%llu, lfs->file_max=%llu, lfs->attr_max=%llu\",\n                (void*)cfg,\n                (unsigned)lfs->cfg->block_size,\n                (unsigned long long)lfs->block_count,\n                (unsigned long long)lfs->name_max,\n                (unsigned long long)lfs->file_max,\n                (unsigned long long)lfs->attr_max);\n\n        // write one superblock\n        lfs_superblock_t superblock = {\n            .version     = disk_version,\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        if (err) {\n            lfs_probe_log(\"lfs_format_: lfs_dir_commit(superblock) failed: err=%d\", err);\n            goto cleanup;\n        }\n\n        // force compaction to prevent accidentally mounting any\n        // older version of littlefs that may live on disk\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        if (err) {\n            lfs_probe_log(\"lfs_format_: lfs_dir_commit(compaction) failed: err=%d\", err);\n            goto cleanup;\n        }\n\n        // sanity check that fetch works\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        if (err) {\n            lfs_probe_log(\"lfs_format_: lfs_dir_fetch failed: err=%d\", err);\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_deinit(lfs);\n    lfs_probe_log(\"lfs_format_: exit with err=%d\", err);\n    return err;\n\n}\n"
}