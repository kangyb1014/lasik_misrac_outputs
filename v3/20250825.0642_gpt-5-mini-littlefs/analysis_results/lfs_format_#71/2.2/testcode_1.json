{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement LFS_ASSERT((bool)0x80000000); performs a pure check of a constant expression with no side effects. LFS_ASSERT is defined as assert(), which either evaluates a side\u2011effect\u2011free boolean expression or expands to a no\u2011op when NDEBUG is defined. Removing this statement (or compiling with NDEBUG) does not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/712.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format_:\n```c\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n    {\n        err = lfs_init(lfs, cfg);\n        if (err) {\n            return err;\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        // create free lookahead\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        // create root dir\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        if (err) {\n            goto cleanup;\n        }\n\n        // write one superblock\n        lfs_superblock_t superblock = {\n            .version     = lfs_fs_disk_version(lfs),\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        if (err) {\n            goto cleanup;\n        }\n\n        // force compaction to prevent accidentally mounting any\n        // older version of littlefs that may live on disk\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        if (err) {\n            goto cleanup;\n        }\n\n        // sanity check that fetch works\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        if (err) {\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_deinit(lfs);\n    return err;\n\n}\n```\n</target_code>\nPlease provide the modified lfs_format_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/*\n * Lightweight logging probe helper. Appends logs to /tmp/logs/712.txt.\n * Designed to be low-impact and preserve original behaviour of lfs_format_.\n */\nstatic void lfs_logf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n\n    lfs_logf(\"lfs_format_: entry: lfs=%p, cfg=%p\", (void*)lfs, (void*)cfg);\n    {\n        err = lfs_init(lfs, cfg);\n        lfs_logf(\"lfs_format_: lfs_init returned %d\", err);\n        if (err) {\n            lfs_logf(\"lfs_format_: early return from lfs_init with err=%d\", err);\n            return err;\n        }\n\n        /* Log value used in assertion to capture the state around the check */\n        if (cfg != NULL) {\n            lfs_logf(\"lfs_format_: cfg->block_count = %u\", (unsigned)cfg->block_count);\n        } else {\n            lfs_logf(\"lfs_format_: cfg is NULL (unexpected)\");\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n        lfs_logf(\"lfs_format_: passed LFS_ASSERT(cfg->block_count != 0)\");\n\n        // create free lookahead\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs_logf(\"lfs_format_: cleared lookahead.buffer (size=%u)\", (unsigned)lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_logf(\"lfs_format_: lookahead start=%u size=%u next=%u\",\n                (unsigned)lfs->lookahead.start,\n                (unsigned)lfs->lookahead.size,\n                (unsigned)lfs->lookahead.next);\n\n        lfs_alloc_ckpoint(lfs);\n        lfs_logf(\"lfs_format_: called lfs_alloc_ckpoint\");\n\n        // create root dir\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        lfs_logf(\"lfs_format_: lfs_dir_alloc returned %d\", err);\n        if (err) {\n            lfs_logf(\"lfs_format_: goto cleanup due to lfs_dir_alloc err=%d\", err);\n            goto cleanup;\n        }\n\n        // write one superblock\n        lfs_superblock_t superblock = {\n            .version     = lfs_fs_disk_version(lfs),\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_logf(\"lfs_format_: superblock before tole32: version=%u block_size=%u block_count=%u name_max=%u file_max=%u attr_max=%u\",\n                (unsigned)superblock.version,\n                (unsigned)superblock.block_size,\n                (unsigned)superblock.block_count,\n                (unsigned)superblock.name_max,\n                (unsigned)superblock.file_max,\n                (unsigned)superblock.attr_max);\n\n        lfs_superblock_tole32(&superblock);\n        lfs_logf(\"lfs_format_: converted superblock to little-endian (tole32)\");\n\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        lfs_logf(\"lfs_format_: first lfs_dir_commit (superblock) returned %d\", err);\n        if (err) {\n            lfs_logf(\"lfs_format_: goto cleanup due to superblock commit err=%d\", err);\n            goto cleanup;\n        }\n\n        // force compaction to prevent accidentally mounting any\n        // older version of littlefs that may live on disk\n        root.erased = false;\n        lfs_logf(\"lfs_format_: root.erased set to false\");\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        lfs_logf(\"lfs_format_: second lfs_dir_commit (force compaction) returned %d\", err);\n        if (err) {\n            lfs_logf(\"lfs_format_: goto cleanup due to compaction commit err=%d\", err);\n            goto cleanup;\n        }\n\n        // sanity check that fetch works\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        lfs_logf(\"lfs_format_: lfs_dir_fetch returned %d\", err);\n        if (err) {\n            lfs_logf(\"lfs_format_: goto cleanup due to dir_fetch err=%d\", err);\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_logf(\"lfs_format_: cleanup: calling lfs_deinit(lfs) and returning err=%d\", err);\n    lfs_deinit(lfs);\n    return err;\n\n}\n"
}