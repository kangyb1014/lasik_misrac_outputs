{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment passes lfs->cfg (a non-const pointer member) to LFS_LOCK. If LFS_LOCK (or the underlying function/macro it expands to) does not need to modify the pointed-to configuration object, then the pointer should be to a const-qualified type (e.g. const cfg_t *). In that case this use violates MISRA C 2023 Rule 8.13. Concretely: if lfs->cfg is declared as cfg_t *cfg; and LFS_LOCK only reads from cfg, it should instead take const cfg_t * and lfs->cfg should be const-qualified, so the current code would be a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/373.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper: append control flow and state info to /tmp/logs/373.txt */\nstatic void lfs_log_probe(const char *phase, lfs_t *lfs, lfs_dir_t *dir, int err)\n{\n    FILE *fp = fopen(\"/tmp/logs/373.txt\", \"a\");\n    if (fp == NULL) {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    (void)fprintf(fp, \"[%ld] %s: lfs=%p, dir=%p, err=%d\", (long)t, phase, (void *)lfs, (void *)dir, err);\n\n    /* Safely log lfs->cfg pointer only if lfs is not NULL. Do not dereference deeper. */\n    if (lfs != NULL) {\n        /* lfs->cfg is accessed for pointer value only; guard against NULL lfs. */\n        (void)fprintf(fp, \", cfg=%p\", (void *)lfs->cfg);\n    } else {\n        (void)fprintf(fp, \", cfg=(lfs==NULL)\");\n    }\n\n    (void)fprintf(fp, \"\\n\");\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Log entry */\n    lfs_log_probe(\"entry\", lfs, dir, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of attempting lock and the immediate state */\n    lfs_log_probe(\"after_lock_call\", lfs, dir, err);\n\n    if (err) {\n        /* If lock failed, record and return as original logic */\n        lfs_log_probe(\"lock_failed_return\", lfs, dir, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n    lfs_log_probe(\"before_lfs_dir_rewind_\", lfs, dir, 0);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    /* Log the result of the internal rewind operation */\n    lfs_log_probe(\"after_lfs_dir_rewind_\", lfs, dir, err);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n\n    /* Log just before unlocking */\n    lfs_log_probe(\"before_unlock\", lfs, dir, err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"after_unlock\", lfs, dir, err);\n\n    return err;\n}\n"
}