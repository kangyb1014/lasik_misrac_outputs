{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression if (err) is invariant because err is initialized from LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as ((void)cfg,0). This makes err always 0 and the if condition always false (an invariant controlling expression). None of the allowed exceptions (infinite loop or a do-while constant-false idiom) apply, so this violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/375.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log initial state after evaluating LFS_LOCK */\n    {\n        FILE *f = fopen(\"/tmp/logs/375.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_rewind ENTRY: lfs=%p dir=%p LFS_LOCK returned err=%d\\n\",\n                    (void*)lfs, (void*)dir, err);\n            fclose(f);\n        }\n    }\n\n    if (err) {\n        /* Probe: log early-return path when lock failed */\n        FILE *f = fopen(\"/tmp/logs/375.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_rewind EARLY RETURN: err=%d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    /* Probe: log result of internal rewind */\n    {\n        FILE *f = fopen(\"/tmp/logs/375.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_rewind AFTER lfs_dir_rewind_: result=%d\\n\", err);\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: log unlock and final return */\n    {\n        FILE *f = fopen(\"/tmp/logs/375.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_rewind EXIT: unlocked, returning %d\\n\", err);\n            fclose(f);\n        }\n    }\n\n    return err;\n}\n"
}