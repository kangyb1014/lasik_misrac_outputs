{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg, 0). In lfs_dir_rewind this makes 'int err = LFS_LOCK(lfs->cfg);' always set err to 0, so the subsequent conditional 'if (err) { return err; }' can never be true \u2014 the 'return err;' branch is unreachable. Thus the macro (as used here) causes unreachable code in the project.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helpers: write control-flow and state to /tmp/logs/371.txt */\nstatic void probe_log_init(void) {\n    static int inited = 0;\n    if (inited) return;\n    /* Try to create directory if it doesn't exist; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    inited = 1;\n}\n\nstatic void probe_log_printf(const char *fmt, ...) {\n    probe_log_init();\n    FILE *f = fopen(\"/tmp/logs/371.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n Preserve original function logic as much as possible, but insert probes to\n capture the value of `err` after the LFS_LOCK macro, and to record whether\n the `if (err) { return err; }` branch is taken. Also log before/after\n calling the internal rewind and before returning.\n*/\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of LFS_LOCK and pointers for context */\n    probe_log_printf(\"lfs_dir_rewind: after LFS_LOCK -> err=%d, lfs=%p, dir=%p\", err, (void*)lfs, (void*)dir);\n\n    if (err) {\n        /* Log that the error branch would be taken and the returned value */\n        probe_log_printf(\"lfs_dir_rewind: entering error branch, returning %d\", err);\n        return err;\n    }\n\n    probe_log_printf(\"lfs_dir_rewind: skipped error branch (err==0)\");\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    probe_log_printf(\"lfs_dir_rewind: after lfs_dir_rewind_ -> err=%d\", err);\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    probe_log_printf(\"lfs_dir_rewind: unlocked, returning %d\", err);\n    return err;\n}\n"
}