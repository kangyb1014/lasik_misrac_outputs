{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). The (void)cfg sub-expression is evaluated but has no effect (it only discards the value of cfg). Removing the (void)cfg part (leaving just 0) would not change program behaviour in the presented code, so this operation is dead code and violates MISRA C 2023 Rule 2.2. (Note: if the cfg expression involved volatile accesses or other side-effects, the evaluation could matter; in the provided context cfg is a plain config pointer so the cast has no effect.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/372.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: write a simple log line to /tmp/logs/372.txt. */\nstatic void lfs_probe_log(const char *stage, void *lfs_ptr, void *dir_ptr, const void *cfg_ptr, int err) {\n    FILE *f = fopen(\"/tmp/logs/372.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    /* Log stage, pointers, cfg value and error code. */\n    (void)fprintf(f, \"%s: lfs=%p dir=%p cfg=%p err=%d\\n\",\n                  stage, lfs_ptr, dir_ptr, cfg_ptr, err);\n    fclose(f);\n}\n\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Capture cfg pointer value for logging without changing the original\n       logic of the LFS_LOCK invocation. Note: this reads lfs->cfg once here\n       and LFS_LOCK(cfg_val) will evaluate cfg_val (a local), so we do not\n       change the evaluation of the original expression lfs->cfg inside the\n       LFS_LOCK macro (we still pass a value to it). */\n    const void *cfg_val = (const void *)lfs->cfg;\n\n    lfs_probe_log(\"enter_lfs_dir_rewind_before_lock\", (void*)lfs, (void*)dir, cfg_val, 0);\n\n    int err = LFS_LOCK(cfg_val);\n\n    lfs_probe_log(\"after_LFS_LOCK\", (void*)lfs, (void*)dir, cfg_val, err);\n    if (err) {\n        lfs_probe_log(\"return_on_lock_error\", (void*)lfs, (void*)dir, cfg_val, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_probe_log(\"before_lfs_dir_rewind_\", (void*)lfs, (void*)dir, cfg_val, 0);\n    err = lfs_dir_rewind_(lfs, dir);\n    lfs_probe_log(\"after_lfs_dir_rewind_\", (void*)lfs, (void*)dir, cfg_val, err);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    /* Keep original unlock call as written to avoid changing evaluation\n       behaviour of LFS_UNLOCK. */\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"exit_lfs_dir_rewind_after_unlock\", (void*)lfs, (void*)dir, cfg_val, err);\n    return err;\n}\n"
}