{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'file' (an lfs_file_t*) cast to 'struct lfs_mlist *' to lfs_mlist_isopen. The implementation of lfs_mlist_isopen only reads the pointed objects (it only compares pointers) and does not modify *head or *node, so both parameters could and should be qualified as const: 'const struct lfs_mlist *head, const struct lfs_mlist *node'. Also the call should cast to 'const struct lfs_mlist *' (or not cast if types allow). As written, the function and this call fail to use const where possible, violating MISRA C 2023 Rule 8.13. Recommendation: change the signature to 'static bool lfs_mlist_isopen(const struct lfs_mlist *head, const struct lfs_mlist *node)' and call 'lfs_mlist_isopen(lfs->mlist, (const struct lfs_mlist *)file);'\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe helper: log calls to lfs_mlist_isopen and relevant pointers to file */\nextern bool lfs_mlist_isopen(struct lfs_mlist *head, struct lfs_mlist *node);\n\nstatic void lfs_probe_log_isopen(lfs_t *lfs, lfs_file_t *file) {\n    FILE *fp = fopen(\"/tmp/logs/633.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    /* Log entry and pointer state */\n    fprintf(fp, \"[probe] lfs_file_sync entry: lfs=%p, file=%p, lfs->mlist=%p\\n\",\n            (void*)lfs, (void*)file, (void*)lfs->mlist);\n\n    /* Call the same check as the original assertion to capture its result */\n    bool isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    fprintf(fp, \"[probe] lfs_mlist_isopen(head=%p, node=(struct lfs_mlist*)%p) -> %d\\n\",\n            (void*)lfs->mlist, (void*)file, (int)isopen);\n\n    /* Signal that this probe demonstrates the cast from lfs_file_t* to struct lfs_mlist* */\n    fprintf(fp, \"[probe] Note: file was cast to (struct lfs_mlist*) when calling lfs_mlist_isopen\\n\\n\");\n\n    fclose(fp);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* probe log inserted to capture the control flow and state leading to the\n       lfs_mlist_isopen call (including the cast of 'file' to struct lfs_mlist*) */\n    lfs_probe_log_isopen(lfs, file);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}