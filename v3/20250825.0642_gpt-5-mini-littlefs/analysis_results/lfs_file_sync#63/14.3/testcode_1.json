{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'err' is initialized with LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as '((void)cfg,0)', so err is always 0 at the point of the test. The controlling expression 'if (err)' is therefore invariant (always false). This is not one of the permitted exceptions (not an infinite loop nor a do-while constant false), so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/635.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state to /tmp/logs/635.txt */\nstatic void lfs_log_probe(const char *stage, const void *lfs, const void *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/635.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, pointers and error value. Do not change program state. */\n    fprintf(f, \"[lfs_file_sync] stage=%s lfs=%p file=%p err=%d\\n\",\n            stage, lfs, file, err);\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after acquiring lock (or calling LFS_LOCK). This\n       captures the value that determines the controlling expression below. */\n    lfs_log_probe(\"after_LFS_LOCK\", (void*)lfs, (void*)file, err);\n\n    if (err) {\n        /* Log branch taken (should not happen if LFS_LOCK expands to 0).\n           Preserve original behavior by returning the same err. */\n        lfs_log_probe(\"if_err_true_before_return\", (void*)lfs, (void*)file, err);\n        return err;\n    }\n\n    lfs_log_probe(\"passed_err_check_before_actions\", (void*)lfs, (void*)file, err);\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    /* Log result of the internal sync call. */\n    lfs_log_probe(\"after_lfs_file_sync_\", (void*)lfs, (void*)file, err);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_probe(\"before_return\", (void*)lfs, (void*)file, err);\n    return err;\n}\n"
}