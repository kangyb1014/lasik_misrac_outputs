{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'err' is assigned from LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as '((void)cfg,0)', so err is always 0. Therefore the branch body 'return err;' will never be taken; removing the 'if (err) { return err; }' check would not change program behaviour in this project configuration, so this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a simple log line with key state to /tmp/logs/632.txt */\nstatic void lfs_log_probe_state(const char *label, int err, const void *lfs, const void *file) {\n    FILE *f = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (f != NULL) {\n        /* Print label, error value and pointers involved in this call */\n        fprintf(f, \"%s: err=%d, lfs=%p, file=%p\\n\", label, err, lfs, file);\n        fclose(f);\n    }\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log value returned by LFS_LOCK and pointers for reproduction */\n    lfs_log_probe_state(\"after_LFS_LOCK\", err, (void*)lfs, (void*)file);\n\n    if (err) {\n        /* Probe: log that we are returning early due to lock error */\n        lfs_log_probe_state(\"returning_due_to_lock_err\", err, (void*)lfs, (void*)file);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe: log just before calling internal sync implementation */\n    lfs_log_probe_state(\"before_lfs_file_sync_\", 0, (void*)lfs, (void*)file);\n\n    err = lfs_file_sync_(lfs, file);\n\n    /* Probe: log result of lfs_file_sync_ before unlocking */\n    lfs_log_probe_state(\"after_lfs_file_sync_\", err, (void*)lfs, (void*)file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    /* Probe: log immediately before unlocking to capture control flow */\n    lfs_log_probe_state(\"before_LFS_UNLOCK\", err, (void*)lfs, (void*)file);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe: indicate completion and returned error code */\n    lfs_log_probe_state(\"returning_final\", err, (void*)lfs, (void*)file);\n\n    return err;\n}\n"
}