{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as an empty replacement. The statement LFS_TRACE(\"lfs_file_sync -> %d\", err); therefore expands to a null statement (';') which is an executed no-op. Because removing that statement would not affect program behaviour, it constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logger: appends compact timestamped records to /tmp/logs/632.txt\n * Keeps original program logic untouched; only observes state. */\nstatic void lfs_log_probe(const char *stage, void *lfs, void *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (f) {\n        time_t t = time(NULL);\n        fprintf(f, \"%ld %s: lfs=%p file=%p err=%d\\n\", (long)t, stage, lfs, file, err);\n        fclose(f);\n    }\n}\n\n/* Original function with probes inserted. Keep the original control flow and\n * behavior; probes only log to /tmp/logs/632.txt. */\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt */\n    lfs_log_probe(\"after_LFS_LOCK\", (void*)lfs, (void*)file, err);\n\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_log_probe(\"return_before_sync_due_to_lock_err\", (void*)lfs, (void*)file, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    /* Log that we passed the lock and are about to assert/open-check */\n    lfs_log_probe(\"before_assert_and_sync_call\", (void*)lfs, (void*)file, 0);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    /* Log return value from the internal sync helper */\n    lfs_log_probe(\"after_lfs_file_sync_\", (void*)lfs, (void*)file, err);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    /* Log that we've unlocked and will return */\n    lfs_log_probe(\"after_LFS_UNLOCK_before_return\", (void*)lfs, (void*)file, err);\n\n    return err;\n}\n"
}