{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_ASSERT(test) expands to the standard assert(test). When the project is built with NDEBUG (the usual release configuration), assert is defined as ((void)0) so all LFS_ASSERT(...) statements become no-ops. Those statements are therefore operations whose removal would not affect program behaviour in that build configuration, i.e. they are dead code. This violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/632.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_file_sync: acquired lock result=%d, lfs=%p, file=%p\", err, (void*)lfs, (void*)file);\n    if (err) {\n        lfs_probe_log(\"lfs_file_sync: early return due to lock error=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n\n    /*\n     * Probe around the assertion. We must avoid changing behavior in builds\n     * where the assert macro is disabled (NDEBUG). When NDEBUG is defined,\n     * the expression inside LFS_ASSERT is not evaluated; therefore we must\n     * not evaluate lfs_mlist_isopen here either. Detect NDEBUG at compile\n     * time so the probe does not introduce side-effects in release builds.\n     */\n#ifdef NDEBUG\n    lfs_probe_log(\"lfs_file_sync: NDEBUG defined -> assertion skipped; lfs_mlist_isopen not evaluated\");\n    /* Keep the original assertion call so source remains unchanged; it will be a no-op. */\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n#else\n    /* Evaluate once, log the result, and assert that value. */\n    int __lfs_assert_val = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_probe_log(\"lfs_file_sync: assertion evaluated -> lfs_mlist_isopen=%d\", __lfs_assert_val);\n    LFS_ASSERT(__lfs_assert_val);\n#endif\n\n    err = lfs_file_sync_(lfs, file);\n    lfs_probe_log(\"lfs_file_sync: lfs_file_sync_ returned err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_file_sync: unlocked and returning err=%d\", err);\n    return err;\n}\n"
}