{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \u201c(void)lfs;\u201d is an executed operation that has no effect on program behaviour (it only suppresses an unused-parameter warning). Removing it would not change behaviour, so it constitutes dead code in this context.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/642.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync_:\n```c\nstatic int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {\n    if (file->flags & LFS_F_ERRED) {\n        // it's not safe to do anything if our file errored\n        return 0;\n    }\n\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        file->flags |= LFS_F_ERRED;\n        return err;\n    }\n\n\n    if ((file->flags & LFS_F_DIRTY) &&\n            !lfs_pair_isnull(file->m.pair)) {\n        // before we commit metadata, we need sync the disk to make sure\n        // data writes don't complete after metadata writes\n        if (!(file->flags & LFS_F_INLINE)) {\n            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);\n            if (err) {\n                return err;\n            }\n        }\n\n        // update dir entry\n        uint16_t type;\n        const void *buffer;\n        lfs_size_t size;\n        struct lfs_ctz ctz;\n        if (file->flags & LFS_F_INLINE) {\n            // inline the whole file\n            type = LFS_TYPE_INLINESTRUCT;\n            buffer = file->cache.buffer;\n            size = file->ctz.size;\n        } else {\n            // update the ctz reference\n            type = LFS_TYPE_CTZSTRUCT;\n            // copy ctz so alloc will work during a relocate\n            ctz = file->ctz;\n            lfs_ctz_tole32(&ctz);\n            buffer = &ctz;\n            size = sizeof(ctz);\n        }\n\n        // commit file data and attributes\n        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(\n                {LFS_MKTAG(type, file->id, size), buffer},\n                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,\n                    file->cfg->attr_count), file->cfg->attrs}));\n        if (err) {\n            file->flags |= LFS_F_ERRED;\n            return err;\n        }\n\n        file->flags &= ~LFS_F_DIRTY;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: append logs to /tmp/logs/642.txt. Keeps behavior unchanged. */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/642.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry and basic state */\n    lfs_log_probe(\"ENTER lfs_file_sync_: lfs=%p file=%p flags=0x%08x id=%u\",\n            (void*)lfs, (void*)file, (unsigned)file->flags, (unsigned)file->id);\n\n    if (file->flags & LFS_F_ERRED) {\n        /* it's not safe to do anything if our file errored */\n        lfs_log_probe(\"EARLY EXIT: file has LFS_F_ERRED set (flags=0x%08x)\", (unsigned)file->flags);\n        return 0;\n    }\n\n    int err = lfs_file_flush(lfs, file);\n    lfs_log_probe(\"after lfs_file_flush: err=%d\", err);\n    if (err) {\n        file->flags |= LFS_F_ERRED;\n        lfs_log_probe(\"lfs_file_flush failed: set LFS_F_ERRED and returning err=%d\", err);\n        return err;\n    }\n\n\n    if ((file->flags & LFS_F_DIRTY) &&\n            !lfs_pair_isnull(file->m.pair)) {\n        lfs_log_probe(\"DIRTY path: flags=0x%08x pair=%p inline=%d\",\n                (unsigned)file->flags, (void*)file->m.pair, (int)!!(file->flags & LFS_F_INLINE));\n        /* before we commit metadata, we need sync the disk to make sure\n         * data writes don't complete after metadata writes */\n        if (!(file->flags & LFS_F_INLINE)) {\n            lfs_log_probe(\"calling lfs_bd_sync: pcache=%p rcache=%p sync_fast=false\",\n                    (void*)&lfs->pcache, (void*)&lfs->rcache);\n            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);\n            lfs_log_probe(\"after lfs_bd_sync: err=%d\", err);\n            if (err) {\n                lfs_log_probe(\"lfs_bd_sync failed: returning err=%d\", err);\n                return err;\n            }\n        }\n\n        /* update dir entry */\n        uint16_t type;\n        const void *buffer;\n        lfs_size_t size;\n        struct lfs_ctz ctz;\n        if (file->flags & LFS_F_INLINE) {\n            /* inline the whole file */\n            type = LFS_TYPE_INLINESTRUCT;\n            buffer = file->cache.buffer;\n            size = file->ctz.size;\n            lfs_log_probe(\"INLINE file: type=%u buffer=%p size=%llu\",\n                    (unsigned)type, (void*)buffer, (unsigned long long)size);\n        } else {\n            /* update the ctz reference */\n            type = LFS_TYPE_CTZSTRUCT;\n            /* copy ctz so alloc will work during a relocate */\n            ctz = file->ctz;\n            lfs_ctz_tole32(&ctz);\n            buffer = &ctz;\n            size = sizeof(ctz);\n            lfs_log_probe(\"NON-INLINE file: type=%u ctz.size=%llu buffer=%p size_of_ctz=%llu\",\n                    (unsigned)type, (unsigned long long)file->ctz.size, (void*)buffer, (unsigned long long)size);\n        }\n\n        /* commit file data and attributes */\n        lfs_log_probe(\"calling lfs_dir_commit: m=%p id=%u attr_count=%u\",\n                (void*)&file->m, (unsigned)file->id,\n                (unsigned)file->cfg->attr_count);\n        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(\n                {LFS_MKTAG(type, file->id, size), buffer},\n                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,\n                    file->cfg->attr_count), file->cfg->attrs}));\n        lfs_log_probe(\"after lfs_dir_commit: err=%d\", err);\n        if (err) {\n            file->flags |= LFS_F_ERRED;\n            lfs_log_probe(\"lfs_dir_commit failed: set LFS_F_ERRED and returning err=%d\", err);\n            return err;\n        }\n\n        lfs_log_probe(\"clearing LFS_F_DIRTY (was 0x%08x)\", (unsigned)file->flags);\n        file->flags &= ~LFS_F_DIRTY;\n    }\n\n    lfs_log_probe(\"EXIT lfs_file_sync_: returning 0 (flags=0x%08x)\", (unsigned)file->flags);\n    return 0;\n}\n"
}