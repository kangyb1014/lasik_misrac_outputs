{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as '((void)cfg,0)', so err is assigned the constant 0. Therefore the branch 'if (err) { return err; }' can never be taken and the return statement inside it is unreachable in the given project configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/661.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <inttypes.h>\n\n/* Probe function to log control flow and state to /tmp/logs/661.txt.\n * This preserves original function behavior and only records information.\n */\nstatic void lfs_probe_log(const char *point, int err, void *lfs, void *file, uint64_t size_u64) {\n    FILE *f = fopen(\"/tmp/logs/661.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t now = time(NULL);\n    fprintf(f, \"%ld %s: err=%d lfs=%p file=%p size=%\" PRIu64 \"\\n\",\n            (long)now, point, err, lfs, file, (uint64_t)size_u64);\n    fclose(f);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Capture result of LFS_LOCK and log it immediately so callers can\n     * reproduce whether the 'if (err)' branch is ever taken.\n     */\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log after lock attempt */\n    lfs_probe_log(\"after LFS_LOCK\", err, (void*)lfs, (void*)file, (uint64_t)size);\n\n    if (err) {\n        /* Log entering the error branch and the return value.\n         * In the reported scenario this branch should never be taken because\n         * LFS_LOCK expands to '((void)cfg,0)'. The presence of this log line\n         * allows verification that the branch was not executed.\n         */\n        lfs_probe_log(\"enter if(err) before return\", err, (void*)lfs, (void*)file, (uint64_t)size);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    /* Log after calling the internal truncate implementation */\n    lfs_probe_log(\"after lfs_file_truncate_\", err, (void*)lfs, (void*)file, (uint64_t)size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlocking and before returning */\n    lfs_probe_log(\"after LFS_UNLOCK before return\", err, (void*)lfs, (void*)file, (uint64_t)size);\n    return err;\n}\n"
}