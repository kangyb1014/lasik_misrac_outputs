{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so LFS_LOCK(lfs->cfg) always evaluates to 0. As a result, err is always 0 and the subsequent if (err) { return err; } can never take the true branch. The executed assignment int err = LFS_LOCK(lfs->cfg); (and the following conditional check) therefore have no effect on program behaviour in this project configuration and can be removed without changing behaviour (they are dead code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/662.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: append an entry describing the control point and key state\n   to /tmp/logs/662.txt. Kept static to limit scope and avoid exposing symbols. */\nstatic void lfs_probe_log_state(const char *stage, lfs_t *lfs, lfs_file_t *file,\n        lfs_off_t size, int err) {\n    /* Ensure log directory exists (best-effort). Ignore errors silently. */\n    (void)mkdir(\"/tmp/logs\", 0700);\n\n    FILE *f = fopen(\"/tmp/logs/662.txt\", \"a\");\n    if (!f) {\n        /* If opening the dedicated log fails, try a fallback in /tmp. */\n        f = fopen(\"/tmp/662.txt\", \"a\");\n        if (!f) {\n            /* Nothing we can do without introducing further side-effects. */\n            return;\n        }\n    }\n\n    /* Log the stage, pointers, size and the last observed error/return value. */\n    fprintf(f, \"%s: lfs=%p file=%p size=%\" PRIu32 \" err=%d\\n\",\n            stage, (void*)lfs, (void*)file, (uint32_t)size, err);\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Probe: before attempting lock */\n    lfs_probe_log_state(\"before_lock\", lfs, file, size, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: after attempting lock, capture the returned value */\n    lfs_probe_log_state(\"after_lock\", lfs, file, size, err);\n\n    if (err) {\n        /* Probe: lock failed and function will return early */\n        lfs_probe_log_state(\"lock_failed_return\", lfs, file, size, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe: before calling internal truncate implementation */\n    lfs_probe_log_state(\"before_truncate_\", lfs, file, size, err);\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    /* Probe: after internal truncate returns */\n    lfs_probe_log_state(\"after_truncate_\", lfs, file, size, err);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: exiting function, final return value */\n    lfs_probe_log_state(\"end_return\", lfs, file, size, err);\n\n    return err;\n}\n"
}