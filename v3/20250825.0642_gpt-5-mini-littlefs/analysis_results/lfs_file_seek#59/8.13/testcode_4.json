{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_mlist_isopen takes non-const pointer parameters (struct lfs_mlist *head, struct lfs_mlist *node) but does not modify the pointed-to objects. According to MISRA C 2023 Rule 8.13, these should be const-qualified. The current implementation also takes the address of the parameter (&head) into a struct lfs_mlist **, which prevents simply making head const; the loop should instead iterate with a (const) pointer to the nodes. Example fix: change the signature to 'static bool lfs_mlist_isopen(const struct lfs_mlist *head, const struct lfs_mlist *node)' and loop with 'for (const struct lfs_mlist *p = head; p; p = p->next) { if (p == node) return true; }'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe wrapper to log calls to lfs_mlist_isopen. This preserves original logic\n   but records the pointers and stack addresses involved to /tmp/logs/593.txt. */\nstatic int lfs_mlist_isopen_probe(struct lfs_mlist *head, struct lfs_mlist *node) {\n    FILE *f = fopen(\"/tmp/logs/593.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"probe: entering lfs_mlist_isopen_probe\\n\");\n        fprintf(f, \"probe: head=%p, node=%p, &head=%p, &node=%p\\n\",\n                (void*)head, (void*)node, (void*)&head, (void*)&node);\n        fflush(f);\n    }\n\n    /* Call the original function to preserve behavior. Capture the result. */\n    int res = !!lfs_mlist_isopen(head, node);\n\n    if (f) {\n        fprintf(f, \"probe: lfs_mlist_isopen returned %d\\n\", res);\n        fprintf(f, \"probe: leaving lfs_mlist_isopen_probe\\n\");\n        fclose(f);\n    }\n\n    return res;\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n\n    /* Use probe wrapper so we log the call and the pointer/stack information\n       relevant to the MISRA Rule 8.13 violation scenario, while preserving\n       original assertion behavior. */\n    LFS_ASSERT(lfs_mlist_isopen_probe(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}