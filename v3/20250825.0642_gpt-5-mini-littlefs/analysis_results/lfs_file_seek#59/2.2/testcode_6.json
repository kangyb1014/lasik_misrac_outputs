{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); only evaluates and discards the expression and has no effect on program state. Removing that statement would not change program behaviour in this build/configuration, therefore it is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/592.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <inttypes.h>\n\n/* Probe helper: append logs to /tmp/logs/592.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/592.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    /* fallback (not ideal for multithreaded use) */\n    struct tm *tmp = localtime(&t);\n    if (tmp) {\n        tm_buf = *tmp;\n    } else {\n        tm_buf.tm_year = tm_buf.tm_mon = tm_buf.tm_mday = 0;\n        tm_buf.tm_hour = tm_buf.tm_min = tm_buf.tm_sec = 0;\n    }\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_file_seek with probes that capture control flow and state. */\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return from lock failure */\n        lfs_probe_log(\"lfs_file_seek: LFS_LOCK failed err=%d, lfs=%p, file=%p, off=%\" PRId32 \", whence=%d\",\n                err, (void*)lfs, (void*)file, off, whence);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"lfs_file_seek: entered, lfs=%p, file=%p, off=%\" PRId32 \", whence=%d, cfg=%p\",\n            (void*)lfs, (void*)file, off, whence, (void*)lfs->cfg);\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n\n    /* Probe immediately before unlock to capture state that would be present\n       if the unlock call is a no-op (e.g. ((void)cfg)). */\n    lfs_probe_log(\"lfs_file_seek: before LFS_UNLOCK, res=%\" PRId32 \", cfg=%p\",\n            res, (void*)lfs->cfg);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe immediately after unlock. If LFS_UNLOCK is a no-op, the state\n       captured here should be identical to the state captured just before it. */\n    lfs_probe_log(\"lfs_file_seek: after LFS_UNLOCK, res=%\" PRId32 \", cfg=%p\",\n            res, (void*)lfs->cfg);\n\n    return res;\n}\n"
}