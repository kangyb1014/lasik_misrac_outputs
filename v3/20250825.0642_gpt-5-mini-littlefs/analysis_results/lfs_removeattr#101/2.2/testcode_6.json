{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK is defined as ((void)cfg,0), so the expression always evaluates to 0. The statement 'int err = LFS_LOCK(lfs->cfg);' therefore only performs a no\u2011op cast and assigns a constant zero; removing this operation would not change program behaviour (the subsequent 'if (err) { return err; }' can never be true). Given the provided definitions, this constitutes dead code and thus violates Rule 2.2. (Note: if LFS_LOCK is redefined to perform real locking in other build configurations, it would not be dead there.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_removeattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1012.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_removeattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_removeattr:\n```c\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    err = lfs_removeattr_(lfs, path, type);\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_removeattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1012.txt.\n   This function preserves program logic (no interrupts, no returns on failure).\n*/\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/1012.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock call and the input state so callers can\n       observe whether LFS_LOCK is a no-op (returns 0) in this build.\n    */\n    lfs_probe_log(\"lfs_removeattr: entry lfs=%p path=\\\"%s\\\" type=%\" PRIu8, (void*)lfs, path, type);\n    lfs_probe_log(\"lfs_removeattr: LFS_LOCK returned %d\", err);\n\n    if (err) {\n        lfs_probe_log(\"lfs_removeattr: LFS_LOCK indicated error, returning %d\", err);\n        return err;\n    }\n    lfs_probe_log(\"lfs_removeattr: proceeding after LFS_LOCK (err=%d)\", err);\n\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    lfs_probe_log(\"lfs_removeattr: calling lfs_removeattr_\");\n    err = lfs_removeattr_(lfs, path, type);\n    lfs_probe_log(\"lfs_removeattr: lfs_removeattr_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n    lfs_probe_log(\"lfs_removeattr: calling LFS_UNLOCK\");\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_removeattr: exited with %d\", err);\n    return err;\n}"
}