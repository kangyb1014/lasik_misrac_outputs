{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(suffix, \".\", 1) and memcmp(suffix, \"..\", 2) to compare against the string literals \".\" and \"..\". Those literals are null\u2011terminated strings, and memcmp is being used to compare string content. This is a direct breach of MISRA C 2023 Rule 21.14 (memcmp shall not be used to compare null\u2011terminated strings). Use an appropriate string function (e.g. strncmp) or explicit character comparisons (suffix[0] == '.') instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/328.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open_:\n```c\nstatic int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n        return LFS_ERR_NOTDIR;\n    }\n\n    lfs_block_t pair[2];\n    if (lfs_tag_id(tag) == 0x3ff) {\n        // handle root dir separately\n        pair[0] = lfs->root[0];\n        pair[1] = lfs->root[1];\n    } else {\n        // get dir pair from parent\n        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            return res;\n        }\n        lfs_pair_fromle32(pair);\n    }\n\n    // fetch first pair\n    int err = lfs_dir_fetch(lfs, &dir->m, pair);\n    if (err) {\n        return err;\n    }\n\n    // setup entry\n    dir->head[0] = dir->m.pair[0];\n    dir->head[1] = dir->m.pair[1];\n    dir->id = 0;\n    dir->pos = 0;\n\n    // add to list of mdirs\n    dir->type = LFS_TYPE_DIR;\n    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    FILE *f = fopen(\"/tmp/logs/328.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"ENTER lfs_dir_open_: path=%p (%s)\\n\", (const void*)path, (path?path:\"(null)\"));\n        fclose(f);\n    }\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);\n\n    f = fopen(\"/tmp/logs/328.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"after lfs_dir_find: tag=%lld\\n\", (long long)tag);\n        fclose(f);\n    }\n\n    if (tag < 0) {\n        f = fopen(\"/tmp/logs/328.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"RETURN (tag<0): %lld\\n\", (long long)tag);\n            fclose(f);\n        }\n        return tag;\n    }\n\n    {\n        int tag_type = lfs_tag_type3(tag);\n        f = fopen(\"/tmp/logs/328.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"tag type = %d, expected LFS_TYPE_DIR = %d\\n\", tag_type, LFS_TYPE_DIR);\n            fclose(f);\n        }\n        if (tag_type != LFS_TYPE_DIR) {\n            f = fopen(\"/tmp/logs/328.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"RETURN (not dir): LFS_ERR_NOTDIR=%d\\n\", LFS_ERR_NOTDIR);\n                fclose(f);\n            }\n            return LFS_ERR_NOTDIR;\n        }\n    }\n\n    lfs_block_t pair[2];\n    if (lfs_tag_id(tag) == 0x3ff) {\n        // handle root dir separately\n        pair[0] = lfs->root[0];\n        pair[1] = lfs->root[1];\n\n        f = fopen(\"/tmp/logs/328.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"root dir: pair[0]=%llu, pair[1]=%llu (raw)\\n\",\n                    (unsigned long long)pair[0], (unsigned long long)pair[1]);\n            fclose(f);\n        }\n    } else {\n        // get dir pair from parent\n        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n\n        f = fopen(\"/tmp/logs/328.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_get returned res=%lld\\n\", (long long)res);\n            fprintf(f, \"pair before le32 conversion: pair[0]=%llu, pair[1]=%llu\\n\",\n                    (unsigned long long)pair[0], (unsigned long long)pair[1]);\n            fclose(f);\n        }\n\n        if (res < 0) {\n            f = fopen(\"/tmp/logs/328.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"RETURN (res<0) from lfs_dir_get: %lld\\n\", (long long)res);\n                fclose(f);\n            }\n            return res;\n        }\n        lfs_pair_fromle32(pair);\n\n        f = fopen(\"/tmp/logs/328.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"pair after le32 conversion: pair[0]=%llu, pair[1]=%llu\\n\",\n                    (unsigned long long)pair[0], (unsigned long long)pair[1]);\n            fclose(f);\n        }\n    }\n\n    // fetch first pair\n    int err = lfs_dir_fetch(lfs, &dir->m, pair);\n\n    f = fopen(\"/tmp/logs/328.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_dir_fetch returned err=%d\\n\", err);\n        fclose(f);\n    }\n    if (err) {\n        f = fopen(\"/tmp/logs/328.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"RETURN (err): %d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    // setup entry\n    dir->head[0] = dir->m.pair[0];\n    dir->head[1] = dir->m.pair[1];\n    dir->id = 0;\n    dir->pos = 0;\n\n    f = fopen(\"/tmp/logs/328.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"dir head set: head[0]=%llu, head[1]=%llu, id=%llu, pos=%llu\\n\",\n                (unsigned long long)dir->head[0], (unsigned long long)dir->head[1],\n                (unsigned long long)dir->id, (unsigned long long)dir->pos);\n        fclose(f);\n    }\n\n    // add to list of mdirs\n    dir->type = LFS_TYPE_DIR;\n    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);\n\n    f = fopen(\"/tmp/logs/328.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"appended to mlist: dir->type=%d, returning 0\\n\", dir->type);\n        fclose(f);\n    }\n\n    return 0;\n}\n"
}