{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis is a potential violation when the callee does not modify the pcache object. The fragment &lfs->pcache produces a pointer to a non-const-qualified member. If lfs_bd_prog's prototype does not modify the pcache (i.e. it only reads from it), then the pointer should be to a const-qualified type (e.g. const typeof(lfs->pcache)*) and passing a non-const pointer violates MISRA C 2023 Rule 8.13. If, however, lfs_bd_prog legitimately modifies pcache, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_commitprog code that contains useful probe functions that print useful logs to a file \"/tmp/logs/203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_commitprog as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_commitprog:\n```c\nstatic int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,\n        const void *buffer, lfs_size_t size) {\n    int err = lfs_bd_prog(lfs,\n            &lfs->pcache, &lfs->rcache, false,\n            commit->block, commit->off ,\n            (const uint8_t*)buffer, size);\n    if (err) {\n        return err;\n    }\n\n    commit->crc = lfs_crc(commit->crc, buffer, size);\n    commit->off += size;\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_commitprog code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helpers: write structured logs to /tmp/logs/203.txt. */\nstatic void lfs_probe_dump_bytes(FILE *f, const void *addr, size_t n) {\n    const unsigned char *b = (const unsigned char *)addr;\n    if (f == NULL || addr == NULL || n == 0) {\n        return;\n    }\n    for (size_t i = 0; i < n; i++) {\n        fprintf(f, \"%02X\", (unsigned)b[i]);\n        if (i + 1 < n) {\n            fprintf(f, \" \");\n        }\n    }\n}\n\nstatic void lfs_probe_dump_pcache(FILE *f, const void *pcache_addr, size_t pcache_size) {\n    if (f == NULL || pcache_addr == NULL) {\n        fprintf(f, \"pcache: NULL\\n\");\n        return;\n    }\n    size_t dump_n = pcache_size < 64u ? pcache_size : 64u;\n    unsigned char buf[64];\n    /* copy only up to dump_n bytes to avoid overrunning unknown type */\n    memcpy(buf, pcache_addr, dump_n);\n    fprintf(f, \"pcache addr=%p size=%zu dump_n=%zu bytes:\\n\", pcache_addr, pcache_size, dump_n);\n    lfs_probe_dump_bytes(f, buf, dump_n);\n    fprintf(f, \"\\n\");\n}\n\nstatic void lfs_probe_dump_rcache(FILE *f, const void *rcache_addr, size_t rcache_size) {\n    if (f == NULL || rcache_addr == NULL) {\n        fprintf(f, \"rcache: NULL\\n\");\n        return;\n    }\n    size_t dump_n = rcache_size < 64u ? rcache_size : 64u;\n    unsigned char buf[64];\n    memcpy(buf, rcache_addr, dump_n);\n    fprintf(f, \"rcache addr=%p size=%zu dump_n=%zu bytes:\\n\", rcache_addr, rcache_size, dump_n);\n    lfs_probe_dump_bytes(f, buf, dump_n);\n    fprintf(f, \"\\n\");\n}\n\nstatic int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,\n        const void *buffer, lfs_size_t size) {\n    /* Probe: open log and snapshot relevant state before call */\n    FILE *f = fopen(\"/tmp/logs/203.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"--- lfs_dir_commitprog ENTER ---\\n\");\n        fprintf(f, \"lfs=%p, commit=%p, buffer=%p, size=%llu\\n\",\n                (void *)lfs, (void *)commit, buffer, (unsigned long long)size);\n        if (commit != NULL) {\n            fprintf(f, \"commit before: block=%llu, off=%llu, crc=%llu\\n\",\n                    (unsigned long long)commit->block,\n                    (unsigned long long)commit->off,\n                    (unsigned long long)commit->crc);\n        }\n\n        /* Dump a conservative amount of the pcache and rcache memory to detect modifications. */\n        if (lfs != NULL) {\n            size_t pcache_size = sizeof(lfs->pcache);\n            size_t rcache_size = sizeof(lfs->rcache);\n            lfs_probe_dump_pcache(f, (const void *)&lfs->pcache, pcache_size);\n            lfs_probe_dump_rcache(f, (const void *)&lfs->rcache, rcache_size);\n        }\n\n        /* Dump first up to 64 bytes of the provided buffer to see what was programmed. */\n        if (buffer != NULL && size > 0) {\n            size_t dump_n = (size < 64u) ? (size_t)size : 64u;\n            fprintf(f, \"buffer ptr=%p dump_n=%zu bytes:\\n\", buffer, dump_n);\n            lfs_probe_dump_bytes(f, buffer, dump_n);\n            fprintf(f, \"\\n\");\n        }\n\n        fclose(f);\n    }\n\n    /* Original call retained exactly as before */\n    int err = lfs_bd_prog(lfs,\n            &lfs->pcache, &lfs->rcache, false,\n            commit->block, commit->off ,\n            (const uint8_t*)buffer, size);\n\n    /* Probe: open log and snapshot state after call to detect changes. */\n    f = fopen(\"/tmp/logs/203.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_bd_prog returned err=%d\\n\", err);\n\n        if (lfs != NULL) {\n            size_t pcache_size = sizeof(lfs->pcache);\n            size_t rcache_size = sizeof(lfs->rcache);\n            lfs_probe_dump_pcache(f, (const void *)&lfs->pcache, pcache_size);\n            lfs_probe_dump_rcache(f, (const void *)&lfs->rcache, rcache_size);\n        }\n\n        if (commit != NULL) {\n            fprintf(f, \"commit after: block=%llu, off=%llu, crc=%llu\\n\",\n                    (unsigned long long)commit->block,\n                    (unsigned long long)commit->off,\n                    (unsigned long long)commit->crc);\n        }\n\n        fprintf(f, \"--- lfs_dir_commitprog EXIT ---\\n\\n\");\n        fclose(f);\n    }\n\n    if (err) {\n        return err;\n    }\n\n    commit->crc = lfs_crc(commit->crc, buffer, size);\n    commit->off += size;\n    return 0;\n}\n"
}