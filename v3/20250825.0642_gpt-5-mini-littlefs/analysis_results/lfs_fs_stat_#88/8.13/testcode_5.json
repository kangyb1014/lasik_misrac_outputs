{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &dir (type lfs_mdir_t *) to lfs_dir_get. If lfs_dir_get only reads the directory (does not modify it), the pointer should be to a const-qualified type (const lfs_mdir_t *). In that case the non-const pointer argument violates MISRA C 2023 Rule 8.13. (The &superblock argument is an output buffer and correctly remains non-const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat_:\n```c\nstatic int lfs_fs_stat_(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    // if the superblock is up-to-date, we must be on the most recent\n    // minor version of littlefs\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        fsinfo->disk_version = lfs_fs_disk_version(lfs);\n\n    // otherwise we need to read the minor version on disk\n    } else {\n        // fetch the superblock\n        lfs_mdir_t dir;\n        int err = lfs_dir_fetch(lfs, &dir, lfs->root);\n        if (err) {\n            return err;\n        }\n\n        lfs_superblock_t superblock;\n        lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock);\n        if (tag < 0) {\n            return tag;\n        }\n        lfs_superblock_fromle32(&superblock);\n\n        // read the on-disk version\n        fsinfo->disk_version = superblock.version;\n    }\n\n    // filesystem geometry\n    fsinfo->block_size = lfs->cfg->block_size;\n    fsinfo->block_count = lfs->block_count;\n\n    // other on-disk configuration, we cache all of these for internal use\n    fsinfo->name_max = lfs->name_max;\n    fsinfo->file_max = lfs->file_max;\n    fsinfo->attr_max = lfs->attr_max;\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/883.txt */\nstatic void probe_log(const char *fmt, ...) {\n    /* ensure target directory exists (best-effort) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *fp = fopen(\"/tmp/logs/883.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic int lfs_fs_stat_(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    probe_log(\"ENTER lfs_fs_stat_: lfs=%p, fsinfo=%p\", (void *)lfs, (void *)fsinfo);\n\n    // if the superblock is up-to-date, we must be on the most recent\n    // minor version of littlefs\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        probe_log(\"Branch: superblock NOT needed (gstate=%p)\", (void *)&lfs->gstate);\n        fsinfo->disk_version = lfs_fs_disk_version(lfs);\n        probe_log(\"disk_version set from lfs_fs_disk_version: %d\", (int)fsinfo->disk_version);\n\n    // otherwise we need to read the minor version on disk\n    } else {\n        probe_log(\"Branch: superblock needed (gstate=%p)\", (void *)&lfs->gstate);\n        /*\n         * fetch the superblock\n         */\n        lfs_mdir_t dir;\n        probe_log(\"Calling lfs_dir_fetch: lfs=%p, &dir=%p, root=%p\", (void *)lfs, (void *)&dir, (void *)lfs->root);\n        int err = lfs_dir_fetch(lfs, &dir, lfs->root);\n        probe_log(\"lfs_dir_fetch returned: %d\", err);\n        if (err) {\n            probe_log(\"EXIT lfs_fs_stat_ early with err=%d (from lfs_dir_fetch)\", err);\n            return err;\n        }\n\n        lfs_superblock_t superblock;\n        probe_log(\n            \"About to call lfs_dir_get: lfs=%p, &dir=%p, tag_lookup=(0x7ff,0x3ff,0), inline_tag=(LFS_TYPE_INLINESTRUCT,0,%zu)\",\n            (void *)lfs, (void *)&dir, sizeof(superblock)\n        );\n\n        lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock);\n        probe_log(\"lfs_dir_get returned tag: %ld\", (long)tag);\n        if (tag < 0) {\n            probe_log(\"EXIT lfs_fs_stat_ early with tag=%ld (error)\", (long)tag);\n            return tag;\n        }\n        probe_log(\"Calling lfs_superblock_fromle32 on superblock at %p\", (void *)&superblock);\n        lfs_superblock_fromle32(&superblock);\n\n        /*\n         * read the on-disk version\n         */\n        fsinfo->disk_version = superblock.version;\n        probe_log(\"disk_version set from on-disk superblock: %d\", (int)fsinfo->disk_version);\n    }\n\n    /*\n     * filesystem geometry\n     */\n    fsinfo->block_size = lfs->cfg->block_size;\n    fsinfo->block_count = lfs->block_count;\n    probe_log(\"block_size=%u, block_count=%u\", (unsigned)fsinfo->block_size, (unsigned)fsinfo->block_count);\n\n    /*\n     * other on-disk configuration, we cache all of these for internal use\n     */\n    fsinfo->name_max = lfs->name_max;\n    fsinfo->file_max = lfs->file_max;\n    fsinfo->attr_max = lfs->attr_max;\n    probe_log(\"name_max=%u, file_max=%u, attr_max=%u\", (unsigned)fsinfo->name_max, (unsigned)fsinfo->file_max, (unsigned)fsinfo->attr_max);\n\n    probe_log(\"EXIT lfs_fs_stat_ returning 0\");\n    return 0;\n}\n"
}