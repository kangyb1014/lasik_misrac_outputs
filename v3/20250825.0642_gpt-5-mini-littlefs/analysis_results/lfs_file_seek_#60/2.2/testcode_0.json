{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe cast-to-void statement \"(void)lfs;\" (used e.g. in lfs_file_size_) is an executed no-op whose removal would not affect program behaviour (it only suppresses an unused-parameter warning). This is an operation executed but without effect, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/602.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek_:\n```c\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    // find new pos\n    //\n    // fortunately for us, littlefs is limited to 31-bit file sizes, so we\n    // don't have to worry too much about integer overflow\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n    }\n\n    if (npos > lfs->file_max) {\n        // file position out of range\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        // noop - position has not changed\n        return npos;\n    }\n\n    // if we're only reading and our new offset is still in the file's cache\n    // we can avoid flushing and needing to reread the data\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            return npos;\n        }\n    }\n\n    // write out everything beforehand, may be noop if rdonly\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        return err;\n    }\n\n    // update pos\n    file->pos = npos;\n    return npos;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek_ code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state to /tmp/logs/602.txt.\n   Uses existing types from the compilation unit (lfs_t, lfs_file_t, lfs_off_t, lfs_soff_t).\n   This function is exercised from lfs_file_seek_ so it will not be dead code. */\nstatic void lfs_log_probe(const char *label, lfs_t *lfs, lfs_file_t *file,\n        lfs_off_t npos, int whence, int err, lfs_soff_t fsize) {\n    FILE *fp = fopen(\"/tmp/logs/602.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log pointer identities, key numeric state, and an optional error code. */\n    fprintf(fp, \"%s: lfs=%p file=%p whence=%d npos=%lld file_pos=%lld file_off=%lld file_flags=0x%X file_max=%lld fsize=%lld err=%d\\n\",\n            label,\n            (void*)lfs,\n            (void*)file,\n            whence,\n            (long long)npos,\n            (long long)(file ? file->pos : 0),\n            (long long)(file ? file->off : 0),\n            (unsigned)(file ? file->flags : 0U),\n            (long long)(lfs ? lfs->file_max : 0),\n            (long long)fsize,\n            err);\n    fclose(fp);\n}\n\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    /* find new pos\n     *\n     * fortunately for us, littlefs is limited to 31-bit file sizes, so we\n     * don't have to worry too much about integer overflow\n     */\n    lfs_off_t npos = file->pos;\n    lfs_soff_t fsize = 0; /* record file size if LFS_SEEK_END branch taken */\n\n    lfs_log_probe(\"enter\", lfs, file, npos, whence, 0, fsize);\n\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n        lfs_log_probe(\"seek_set\", lfs, file, npos, whence, 0, fsize);\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n        lfs_log_probe(\"seek_cur\", lfs, file, npos, whence, 0, fsize);\n    } else if (whence == LFS_SEEK_END) {\n        /* call lfs_file_size_ separately so we can log that it was invoked and\n           capture its return value. This preserves original behaviour. */\n        fsize = lfs_file_size_(lfs, file);\n        lfs_log_probe(\"seek_end_before_calc\", lfs, file, npos, whence, 0, fsize);\n        npos = (lfs_off_t)fsize + (lfs_off_t)off;\n        lfs_log_probe(\"seek_end_after_calc\", lfs, file, npos, whence, 0, fsize);\n    }\n\n    if (npos > lfs->file_max) {\n        /* file position out of range */\n        lfs_log_probe(\"npos_out_of_range\", lfs, file, npos, whence, LFS_ERR_INVAL, fsize);\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        /* noop - position has not changed */\n        lfs_log_probe(\"noop_same_pos\", lfs, file, npos, whence, 0, fsize);\n        return npos;\n    }\n\n    /* if we're only reading and our new offset is still in the file's cache\n     * we can avoid flushing and needing to reread the data */\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n        lfs_log_probe(\"cache_check\", lfs, file, npos, whence, 0, fsize);\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            lfs_log_probe(\"cache_hit_return\", lfs, file, npos, whence, 0, fsize);\n            return npos;\n        }\n    }\n\n    /* write out everything beforehand, may be noop if rdonly */\n    lfs_log_probe(\"before_flush\", lfs, file, npos, whence, 0, fsize);\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        lfs_log_probe(\"flush_err\", lfs, file, npos, whence, err, fsize);\n        return err;\n    }\n\n    /* update pos */\n    file->pos = npos;\n    lfs_log_probe(\"exit_update_pos\", lfs, file, npos, whence, 0, fsize);\n    return npos;\n}\n"
}