{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_file_flushedread the statement 'lfs_size_t nsize = size;' is redundant: nsize is immediately overwritten by 'nsize = size;' after 'size = lfs_min(...)' before any use. The initial assignment is executed but its value is never used, so removing it would not change program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_flushedread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/492.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_flushedread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_flushedread:\n```c\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if (file->pos >= file->ctz.size) {\n        // eof if past end\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n        }\n\n        // read as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n    }\n\n    return size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_flushedread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe function to log control flow and state for debugging. Appends to /tmp/logs/492.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/492.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    /* Log initial entry state */\n    lfs_log_probe(\"ENTRY: lfs_file_flushedread: this=%p file=%p buffer=%p initial_size=%llu pos=%llu ctz_size=%llu\",\n            (void*)lfs, (void*)file, buffer,\n            (unsigned long long)size,\n            (unsigned long long)file->pos,\n            (unsigned long long)file->ctz.size);\n\n    if (file->pos >= file->ctz.size) {\n        /* eof if past end */\n        lfs_log_probe(\"EARLY_RETURN_EOF: pos=%llu >= ctz.size=%llu\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->ctz.size);\n        return 0;\n    }\n\n    /* Log before computing bounded size */\n    lfs_log_probe(\"BEFORE_MIN: size=%llu nsize(initial)=%llu\",\n            (unsigned long long)size, (unsigned long long)nsize);\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n\n    /* Log after size is bounded and before nsize overwrite */\n    lfs_log_probe(\"AFTER_MIN: bounded_size=%llu nsize(before_overwrite)=%llu\",\n            (unsigned long long)size, (unsigned long long)nsize);\n\n    /* The potential redundant assignment reported: capture evidence */\n    nsize = size;\n    lfs_log_probe(\"ASSIGN: nsize overwritten to=%llu\",\n            (unsigned long long)nsize);\n\n    while (nsize > 0) {\n        /* check if we need a new block */\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                lfs_log_probe(\"FIND_BLOCK: calling lfs_ctz_find pos=%llu\",\n                        (unsigned long long)file->pos);\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    lfs_log_probe(\"ERROR: lfs_ctz_find returned %d block=%llu off=%llu\",\n                            err,\n                            (unsigned long long)file->block,\n                            (unsigned long long)file->off);\n                    return err;\n                }\n                lfs_log_probe(\"FOUND_BLOCK: block=%llu off=%llu\",\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->off);\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n                lfs_log_probe(\"INLINE_BLOCK: block=INLINE off set to pos=%llu\",\n                        (unsigned long long)file->off);\n            }\n\n            file->flags |= LFS_F_READING;\n            lfs_log_probe(\"FLAGS: now reading, flags=0x%08x\",\n                    (unsigned int)file->flags);\n        }\n\n        /* read as much as we can in current block */\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        lfs_log_probe(\"READ_PRE: nsize=%llu off=%llu block=%llu diff=%llu inline=%d\",\n                (unsigned long long)nsize,\n                (unsigned long long)file->off,\n                (unsigned long long)file->block,\n                (unsigned long long)diff,\n                (int)((file->flags & LFS_F_INLINE) != 0));\n\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                lfs_log_probe(\"ERROR: lfs_dir_getread returned %d\", err);\n                return err;\n            }\n            lfs_log_probe(\"READ_INLINE_DONE: read %llu bytes at off=%llu\",\n                    (unsigned long long)diff,\n                    (unsigned long long)file->off);\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                lfs_log_probe(\"ERROR: lfs_bd_read returned %d\", err);\n                return err;\n            }\n            lfs_log_probe(\"READ_BD_DONE: read %llu bytes at block=%llu off=%llu\",\n                    (unsigned long long)diff,\n                    (unsigned long long)file->block,\n                    (unsigned long long)file->off);\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        lfs_log_probe(\"UPDATE: pos=%llu off=%llu remaining_nsize=%llu\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (unsigned long long)nsize);\n    }\n\n    lfs_log_probe(\"EXIT: returning size=%llu (requested bounded size)\",\n            (unsigned long long)size);\n    return size;\n}"
}