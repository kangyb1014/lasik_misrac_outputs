{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read and lfs_dir_getread the scalar parameters 'off' and 'size' are modified inside the function (e.g. off += diff; size -= diff;). The shown fragment shows memcpy(data, ...); data += diff; off += diff; size -= diff; \u2014 where 'data' is a local pointer (initialized from the parameter 'buffer') but 'off' and 'size' are function parameters being changed. This violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_flushedread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/497.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_flushedread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_flushedread:\n```c\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if (file->pos >= file->ctz.size) {\n        // eof if past end\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n        }\n\n        // read as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n    }\n\n    return size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_flushedread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper: append a formatted message to /tmp/logs/497.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/497.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    /* Log entry state: function parameters and initial file state */\n    lfs_log_probe(\"ENTER lfs_file_flushedread: buffer=%p, size=%llu, file->pos=%llu, file->off=%llu, file->ctz.size=%llu, flags=0x%02x, block=%llu\",\n            (void*)buffer, (unsigned long long)size,\n            (unsigned long long)file->pos, (unsigned long long)file->off,\n            (unsigned long long)file->ctz.size, (unsigned)file->flags,\n            (unsigned long long)file->block);\n\n    if (file->pos >= file->ctz.size) {\n        /* eof if past end */\n        lfs_log_probe(\"EXIT lfs_file_flushedread: EOF (file->pos=%llu >= file->ctz.size=%llu)\",\n                (unsigned long long)file->pos, (unsigned long long)file->ctz.size);\n        return 0;\n    }\n\n    /* NOTE: This assignment modifies the function parameter 'size'. Log before and after\n       to provide evidence of the modification. */\n    lfs_log_probe(\"Before clamp: size=%llu, file->ctz.size-file->pos=%llu\",\n            (unsigned long long)size,\n            (unsigned long long)(file->ctz.size - file->pos));\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    lfs_log_probe(\"After clamp: size=%llu, nsize=%llu\", (unsigned long long)size, (unsigned long long)nsize);\n\n    while (nsize > 0) {\n        /* check if we need a new block */\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                lfs_log_probe(\"Calling lfs_ctz_find: pos=%llu, ctz.size=%llu, ctz.head=%llu\",\n                        (unsigned long long)file->pos,\n                        (unsigned long long)file->ctz.size,\n                        (unsigned long long)file->ctz.head);\n\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    lfs_log_probe(\"lfs_ctz_find returned err=%d\", err);\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n\n            lfs_log_probe(\"Post-block-setup: block=%llu, off=%llu, flags=0x%02x\",\n                    (unsigned long long)file->block,\n                    (unsigned long long)file->off,\n                    (unsigned)file->flags);\n        }\n\n        /* read as much as we can in current block */\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n\n        lfs_log_probe(\"About to read: inline=%d, block=%llu, off(before)=%llu, diff=%llu, data=%p\",\n                (int)((file->flags & LFS_F_INLINE) != 0),\n                (unsigned long long)file->block,\n                (unsigned long long)file->off,\n                (unsigned long long)diff,\n                (void*)data);\n\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                lfs_log_probe(\"lfs_dir_getread returned err=%d (block=%llu, off=%llu, diff=%llu)\",\n                        err, (unsigned long long)file->block,\n                        (unsigned long long)file->off,\n                        (unsigned long long)diff);\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                lfs_log_probe(\"lfs_bd_read returned err=%d (block=%llu, off=%llu, diff=%llu)\",\n                        err, (unsigned long long)file->block,\n                        (unsigned long long)file->off,\n                        (unsigned long long)diff);\n                return err;\n            }\n        }\n\n        /* Log state right after the read call and before local updates */\n        lfs_log_probe(\"After read call: file->pos(before)=%llu, file->off(before)=%llu, data=%p, nsize(before)=%llu\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (void*)data,\n                (unsigned long long)nsize);\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        /* Log state after local updates to show control flow and state transitions */\n        lfs_log_probe(\"After local update: file->pos=%llu, file->off=%llu, data=%p, nsize=%llu, remaining size parameter=%llu\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (void*)data,\n                (unsigned long long)nsize,\n                (unsigned long long)size);\n    }\n\n    lfs_log_probe(\"EXIT lfs_file_flushedread: returning size=%llu\", (unsigned long long)size);\n    return size;\n}\n"
}