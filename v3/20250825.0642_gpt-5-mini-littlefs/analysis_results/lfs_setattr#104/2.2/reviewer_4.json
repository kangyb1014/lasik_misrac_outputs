{
  "user_message": "An agent A claimed that the following lfs_setattr code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_setattr.\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn the provided build configuration LFS_LOCK is defined as ((void)cfg,0), so LFS_LOCK(lfs->cfg) always yields 0. The statement int err = LFS_LOCK(lfs->cfg); (and the subsequent if (err) { return err; } check) is executed but has no effect \u2014 removing the call and the check would not change program behaviour. Therefore this is dead code in the given project configuration and violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter_lfs_setattr_before_lock: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x5615bf5c8462, size=4, err=-1\nafter_LFS_LOCK: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x5615bf5c8462, size=4, err=0\nbefore_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x5615bf5c8462, size=4, err=0\nafter_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x5615bf5c8462, size=4, err=0\nexit_lfs_setattr: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x5615bf5c8462, size=4, err=0\nenter_lfs_setattr_before_lock: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8467, size=6, err=-1\nafter_LFS_LOCK: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8467, size=6, err=0\nbefore_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8467, size=6, err=0\nafter_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8467, size=6, err=0\nexit_lfs_setattr: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8467, size=6, err=0\nenter_lfs_setattr_before_lock: lfs=0x7fff0e3e5428, path=\"hello\", type=67, buffer=0x5615bf5c846e, size=5, err=-1\nafter_LFS_LOCK: lfs=0x7fff0e3e5428, path=\"hello\", type=67, buffer=0x5615bf5c846e, size=5, err=0\nbefore_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=67, buffer=0x5615bf5c846e, size=5, err=0\nafter_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=67, buffer=0x5615bf5c846e, size=5, err=0\nexit_lfs_setattr: lfs=0x7fff0e3e5428, path=\"hello\", type=67, buffer=0x5615bf5c846e, size=5, err=0\nenter_lfs_setattr_before_lock: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5cbfe1, size=0, err=-1\nafter_LFS_LOCK: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5cbfe1, size=0, err=0\nbefore_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5cbfe1, size=0, err=0\nafter_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5cbfe1, size=0, err=0\nexit_lfs_setattr: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5cbfe1, size=0, err=0\nenter_lfs_setattr_before_lock: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8474, size=6, err=-1\nafter_LFS_LOCK: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8474, size=6, err=0\nbefore_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8474, size=6, err=0\nafter_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8474, size=6, err=0\nexit_lfs_setattr: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c8474, size=6, err=0\nenter_lfs_setattr_before_lock: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5ccba4, size=3, err=-1\nafter_LFS_LOCK: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5ccba4, size=3, err=0\nbefore_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5ccba4, size=3, err=0\nafter_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5ccba4, size=3, err=0\nexit_lfs_setattr: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5ccba4, size=3, err=0\nenter_lfs_setattr_before_lock: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x7fff0e3e54c8, size=1023, err=-1\nafter_LFS_LOCK: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x7fff0e3e54c8, size=1023, err=0\nbefore_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x7fff0e3e54c8, size=1023, err=0\nafter_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x7fff0e3e54c8, size=1023, err=-28\nexit_lfs_setattr: lfs=0x7fff0e3e5428, path=\"hello\", type=65, buffer=0x7fff0e3e54c8, size=1023, err=-28\nenter_lfs_setattr_before_lock: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c847b, size=9, err=-1\nafter_LFS_LOCK: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c847b, size=9, err=0\nbefore_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c847b, size=9, err=0\nafter_lfs_setattr_: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c847b, size=9, err=0\nexit_lfs_setattr: lfs=0x7fff0e3e5428, path=\"hello\", type=66, buffer=0x5615bf5c847b, size=9, err=0\nenter_lfs_setattr_bef\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_setattr:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_setattr_(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    if (size > lfs->attr_max) {\n        return LFS_ERR_NOSPC;\n    }\n\n    return lfs_commitattr(lfs, path, type, buffer, size);\n}\n...\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n...\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the supplied project configuration LFS_LOCK(cfg) expands to ((void)cfg, 0), which always evaluates to 0 and has no side-effects. Therefore the statement\n    int err = LFS_LOCK(lfs->cfg);\nfollowed by\n    if (err) { return err; }\nis executed but cannot change program behaviour: the condition is always false and the assignment has no effect that influences subsequent behaviour (err is overwritten later by lfs_setattr_). That meets the MISRA C 2023 Rule 2.2 definition of dead code. (The same observation applies to LFS_UNLOCK and the empty LFS_TRACE macros: as defined they are no-ops and may also produce executed code that has no effect.) If LFS_LOCK is intended to be a no-op in some builds, the source should be written (or conditional compilation used) so that no executed no-op remains in the project, or a documented MISRA deviation should be used."
}