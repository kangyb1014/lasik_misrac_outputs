{
  "user_message": "An agent A claimed that the following lfs_setattr code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_setattr.\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg). In lfs_setattr the call LFS_UNLOCK(lfs->cfg); therefore executes only the cast-to-void expression which has no effect at runtime. Removing that expression (or the macro expansion) would not change program behaviour, so this operation meets the definition of dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=65, buffer=0x5567a12b5462, size=4, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=66, buffer=0x5567a12b5467, size=6, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=67, buffer=0x5567a12b546e, size=5, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=66, buffer=0x5567a12b8fe1, size=0, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=66, buffer=0x5567a12b5474, size=6, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=66, buffer=0x5567a12b9ba4, size=3, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=65, buffer=0x7fff0d3829d8, size=1023, cfg=0x7fff0d382ec0\nlfs_setattr result: err=-28, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=66, buffer=0x5567a12b547b, size=9, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=65, buffer=0x5567a12b5462, size=4, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=66, buffer=0x5567a12b5467, size=6, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=67, buffer=0x5567a12b546e, size=5, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=66, buffer=0x5567a12b8fe1, size=0, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs=0x7fff0d382938, path=\"hello\", type=66, buffer=0x5567a12b5474, size=6, cfg=0x7fff0d382ec0\nlfs_setattr result: err=0, lfs=0x7fff0d382938, cfg(before_unlock)=0x7fff0d382ec0\nlfs_setattr: about to call LFS_UNLOCK with cfg=0x7fff0d382ec0\nlfs_setattr: returned from LFS_UNLOCK, cfg=0x7fff0d382ec0\nlfs_setattr entry: lfs\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_setattr:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_setattr_(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    if (size > lfs->attr_max) {\n        return LFS_ERR_NOSPC;\n    }\n\n    return lfs_commitattr(lfs, path, type, buffer, size);\n}\n...\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n...\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. The LFS_UNLOCK(lfs->cfg); invocation is a portability/abstraction macro that is sometimes a no-op in the current build, but it is not \u2018\u2018dead code\u2019\u2019 in the sense MISRA 2.2 intends. Reasons:\n\n- The macro is deliberately present to provide unlock behaviour on configurations where locking is enabled. In other builds the same source will expand to non\u2011trivial code; removing the call from the source would change behaviour in those builds. MISRA Rule 2.2 applies at the project/source level, not only to a single particular macro expansion.\n\n- Even in the present expansion ((void)cfg) the statement can matter: it evaluates its operand (which could be volatile or have other side effects in a different build), and removing the statement can change timing/ordering of operations (MISRA Note 1 points out timing can change behaviour). Thus removal is not guaranteed behaviour\u2011preserving.\n\n- The cast\u2011to\u2011void is also commonly used to suppress unused\u2011parameter warnings; that is a legitimate use and not an instance of redundant executable code.\n\nTherefore the agent A report (that this is a violation of MISRA C 2023 Rule 2.2) is a false positive."
}