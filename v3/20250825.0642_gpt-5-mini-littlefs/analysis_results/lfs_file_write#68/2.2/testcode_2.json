{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), a no-op that only evaluates and discards cfg. In lfs_file_write the call LFS_UNLOCK(lfs->cfg); therefore executes an operation that has no effect on program behaviour (the expression has no side-effects), so removing that call would not change behaviour. This is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/682.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n\n/* Probe logging helper - preserves original behavior while recording control flow\n * and state to /tmp/logs/682.txt. This function is intentionally lightweight\n * to minimize interference with program logic. */\nstatic void lfs_probe_log(const char *event, void *lfs, void *file,\n        const void *buffer, unsigned long size, long res, int err, const void *cfg) {\n    /* try to create directory if it doesn't exist; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    FILE *f = fopen(\"/tmp/logs/682.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log a single line with key values that help reproduce the scenario */\n    (void)fprintf(f,\n        \"event=%s lfs=%p file=%p buffer=%p size=%lu res=%ld err=%d cfg=%p\\n\",\n        event, lfs, file, buffer, size, res, err, cfg);\n    (void)fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to acquire lock */\n        lfs_probe_log(\"lock_failed\", (void*)lfs, (void*)file, buffer,\n                (unsigned long)size, (long)err, err, (void*)lfs->cfg);\n        return err;\n    }\n\n    /* Log after successful lock acquisition */\n    lfs_probe_log(\"after_lock\", (void*)lfs, (void*)file, buffer,\n            (unsigned long)size, 0L, err, (void*)lfs->cfg);\n\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    /* Capture state immediately before the unlock call */\n    lfs_probe_log(\"before_unlock\", (void*)lfs, (void*)file, buffer,\n            (unsigned long)size, (long)res, err, (void*)lfs->cfg);\n\n    /* Original call retained to preserve logic; macro may be a no-op */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Capture state immediately after the unlock call to demonstrate that\n     * the call had no observable effect on the logged state (cfg pointer,\n     * res, etc.). This helps provide evidence that LFS_UNLOCK is a no-op. */\n    lfs_probe_log(\"after_unlock\", (void*)lfs, (void*)file, buffer,\n            (unsigned long)size, (long)res, err, (void*)lfs->cfg);\n\n    return res;\n}\n"
}