{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_file_write the statement LFS_UNLOCK(lfs->cfg) expands (via #define) to ((void)lfs->cfg); which is an executed no\u2011op (no side effects). Removing this statement would not affect program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/682.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append plain-text logs to /tmp/logs/682.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/682.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log lock invocation and result */\n    lfs_probe_log(\"[probe] lfs_file_write: called LFS_LOCK -> err=%d, lfs=%p, file=%p, buffer=%p, size=%lu\",\n            err, (void*)lfs, (void*)file, buffer, (unsigned long)size);\n    if (err) {\n        /* Log early return on lock failure */\n        lfs_probe_log(\"[probe] lfs_file_write: lock failed, returning err=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"[probe] lfs_file_write: about to call lfs_file_write_\");\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    /* Capture state immediately before calling LFS_UNLOCK\n       (the reported violation is that LFS_UNLOCK expands to ((void)lfs->cfg); ) */\n    lfs_probe_log(\"[probe] before LFS_UNLOCK: lfs->cfg=%p, res=%ld\", (void*)lfs->cfg, (long)res);\n    LFS_UNLOCK(lfs->cfg);\n    /* Log after unlock to show the unlock was executed (even if it's a no-op) */\n    lfs_probe_log(\"[probe] after LFS_UNLOCK: lfs->cfg=%p, res=%ld\", (void*)lfs->cfg, (long)res);\n\n    lfs_probe_log(\"[probe] lfs_file_write: returning res=%ld\", (long)res);\n    return res;\n}\n"
}