{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0), so int err = LFS_LOCK(lfs->cfg); always initializes err to 0. The controlling expression if (err) is therefore an invariant false expression (never true). This is not an allowed exception (not an intentional infinite loop or the permitted do-while constant), so Rule 14.3 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/585.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper: append formatted messages to /tmp/logs/585.txt.\n * Implemented as a small function so we do not change the logic of\n * lfs_file_rewind and can capture control flow/state information.\n */\nstatic void probe_log_fmt(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/585.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original logic: call LFS_LOCK exactly as before. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock attempt and the cfg pointer used. */\n    probe_log_fmt(\"[probe] LFS_LOCK called with cfg=%p -> err=%d\", (void*)lfs->cfg, err);\n\n    /* Log evaluation of the controlling expression without changing behavior. */\n    if (err) {\n        probe_log_fmt(\"[probe] if (err) evaluated true (err=%d): returning err\", err);\n        return err;\n    }\n    probe_log_fmt(\"[probe] if (err) evaluated false (err=%d): continuing\", err);\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n    probe_log_fmt(\"[probe] calling lfs_file_rewind_(lfs=%p, file=%p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Log the result of the internal rewind operation. */\n    probe_log_fmt(\"[probe] lfs_file_rewind_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n\n    /* Unlock and log that we performed the unlock. */\n    LFS_UNLOCK(lfs->cfg);\n    probe_log_fmt(\"[probe] LFS_UNLOCK called with cfg=%p\", (void*)lfs->cfg);\n\n    return err;\n}\n"
}