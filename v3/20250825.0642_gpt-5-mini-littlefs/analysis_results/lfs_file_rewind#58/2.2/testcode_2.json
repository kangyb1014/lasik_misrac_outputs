{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. The LFS_TRACE macro is defined as empty, so the trace calls in lfs_file_rewind expand to no-op (empty) statements. Those statements are executed but have no effect, and their removal would not change program behaviour (given the provided arguments have no side-effects), which meets the definition of dead code in MISRA C 2023 Rule 2.2. (Caveat: if trace calls produced timing effects or their arguments had side-effects, removal could change behaviour; in the provided code neither applies.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logger: appends timestamped messages to /tmp/logs/582.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (!f) {\n        /* Try to create directory and reopen. If that fails, give up silently. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/582.txt\", \"a\");\n        if (!f) {\n            return;\n        }\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm = localtime_r(&t, &tm_buf);\n    if (tm) {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_file_rewind: entered with lfs=%p, file=%p; LFS_LOCK returned %d\",\n                  (void*)lfs, (void*)file, err);\n    if (err) {\n        lfs_probe_log(\"lfs_file_rewind: early return due to lock error: %d\", err);\n        return err;\n    }\n\n    /* Log around the LFS_TRACE call so that absence of trace output can be observed. */\n    lfs_probe_log(\"lfs_file_rewind: about to invoke LFS_TRACE (call site 1)\");\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n    lfs_probe_log(\"lfs_file_rewind: returned from LFS_TRACE (call site 1)\");\n\n    err = lfs_file_rewind_(lfs, file);\n    lfs_probe_log(\"lfs_file_rewind: lfs_file_rewind_ returned %d\", err);\n\n    lfs_probe_log(\"lfs_file_rewind: about to invoke LFS_TRACE (call site 2) with err=%d\", err);\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    lfs_probe_log(\"lfs_file_rewind: returned from LFS_TRACE (call site 2)\");\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_file_rewind: LFS_UNLOCK called; returning %d\", err);\n    return err;\n}\n"
}