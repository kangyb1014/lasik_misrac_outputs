{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). In lfs_file_rewind this becomes int err = ((void)lfs->cfg, 0); the sub-expression (void)lfs->cfg is evaluated but has no effect on program behaviour (it only suppresses unused-variable warnings). Removing the (void)lfs->cfg sub-expression leaves the behaviour unchanged (err still 0). Therefore the executed cast to void is dead code under the shown usage (similarly LFS_UNLOCK(cfg) expands to ((void)cfg) and is a no-op).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Forward declarations to keep this translation unit compilable within a larger project. */\ntypedef struct lfs lfs_t;\ntypedef struct lfs_file lfs_file_t;\n\n/*\n * Probe helper: append a small structured message to /tmp/logs/582.txt.\n * Keep this as a small, self-contained function so we do not change\n * the original control flow of lfs_file_rewind.\n */\nstatic void lfs_rewind_log_probe(const char *stage,\n                                 const void *lfs_ptr,\n                                 const void *file_ptr,\n                                 const void *cfg_ptr,\n                                 int err)\n{\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_file_rewind] stage=%s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  lfs=%p\\n\", lfs_ptr);\n    fprintf(f, \"  file=%p\\n\", file_ptr);\n    fprintf(f, \"  cfg(evaluated)=%p\\n\", cfg_ptr);\n    fprintf(f, \"  err=%d\\n\", err);\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\n/*\n * Modified lfs_file_rewind: preserves original logic but inserts probes\n * that explicitly evaluate lfs->cfg and log its value and the control path.\n * This provides evidence that the expression used in LFS_LOCK/LFS_UNLOCK\n * is evaluated (even when it has no observable effect), reproducing the\n * reported dead-code/unused-evaluation scenario for inspection.\n */\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    /* Probe: explicitly evaluate cfg expression for logging. This mirrors\n     * the side-effect-free evaluation performed by the LFS_LOCK macro\n     * (which is reported to expand to ((void)cfg,0)). By evaluating here\n     * and logging, we capture that the expression is computed at runtime. */\n    const void *evaluated_cfg = NULL;\n    if (lfs != NULL) {\n        /* Access the cfg member for logging. Do not modify it. */\n        /* We cast through void* to avoid depending on type details. */\n        /* Note: this read should be side-effect free in normal usage. */\n        evaluated_cfg = (const void*)lfs->cfg;\n    }\n    lfs_rewind_log_probe(\"before_LFS_LOCK_evaluate\", (void*)lfs, (void*)file, evaluated_cfg, -1);\n\n    /* Preserve original locking call and semantics. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result and the fact that LFS_LOCK was invoked. */\n    lfs_rewind_log_probe(\"after_LFS_LOCK\", (void*)lfs, (void*)file, (const void*)lfs->cfg, err);\n\n    if (err) {\n        lfs_rewind_log_probe(\"LFS_LOCK_error_return\", (void*)lfs, (void*)file, (const void*)lfs->cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n\n    lfs_rewind_log_probe(\"before_LFS_UNLOCK\", (void*)lfs, (void*)file, (const void*)lfs->cfg, err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_rewind_log_probe(\"after_LFS_UNLOCK\", (void*)lfs, (void*)file, (const void*)lfs->cfg, err);\n\n    return err;\n}\n"
}