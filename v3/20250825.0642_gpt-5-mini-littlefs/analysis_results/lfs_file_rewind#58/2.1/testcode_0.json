{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_file_rewind, err is assigned from LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as ((void)cfg,0), so err is always 0. Therefore the condition if (err) { return err; } can never be true and the return statement inside that branch is unreachable. This constitutes unreachable code in the project (violation of MISRA C 2023 Rule 2.1).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/581.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/581.txt */\nstatic void lfs_probe_ensure_dir(void) {\n    /* Try to create the directory if it doesn't exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *fp = NULL;\n    va_list ap;\n    time_t t;\n    char buf[64];\n\n    lfs_probe_ensure_dir();\n\n    fp = fopen(\"/tmp/logs/581.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    t = time(NULL);\n    if (t != (time_t)-1) {\n        struct tm tmv;\n        if (localtime_r(&t, &tmv) != NULL) {\n            if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tmv) == 0) {\n                buf[0] = '\\0';\n            }\n        } else {\n            buf[0] = '\\0';\n        }\n    } else {\n        buf[0] = '\\0';\n    }\n\n    if (buf[0] != '\\0') {\n        fprintf(fp, \"%s - \", buf);\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* Modified lfs_file_rewind with probes. Original logic preserved. */\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry */\n    lfs_probe_log(\"ENTER lfs_file_rewind: lfs=%p file=%p\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock attempt to provide evidence that LFS_LOCK returned 0 */\n    lfs_probe_log(\"After LFS_LOCK: err=%d\", err);\n\n    if (err) {\n        /* If this ever runs, log that the unreachable branch was taken and the return value. */\n        lfs_probe_log(\"IF branch taken in lfs_file_rewind: returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    lfs_probe_log(\"Calling lfs_file_rewind_ (delegating to internal implementation)\");\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    lfs_probe_log(\"lfs_file_rewind_ returned: %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"Exiting lfs_file_rewind: returning %d\", err);\n    return err;\n}\n"
}