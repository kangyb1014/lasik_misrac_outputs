{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe 'if (err) { return err; }' branch in lfs_fs_mkconsistent is unreachable because LFS_LOCK(cfg) is defined as ((void)cfg, 0), so err is always 0 and the conditional can never be true. The return inside the if can never be executed, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/811.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends diagnostic messages to /tmp/logs/811.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/811.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\n/* Modified function: original logic preserved, with probe logs inserted. */\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of LFS_LOCK and pointers for reproducible evidence. */\n    lfs_probe_log(\"lfs_fs_mkconsistent: entered, lfs=%p, cfg=%p, err(after LFS_LOCK)=%d\",\n                  (void*)lfs, (void*)lfs->cfg, err);\n\n    if (err) {\n        /* Log branch taken and reason before returning. */\n        lfs_probe_log(\"lfs_fs_mkconsistent: early return due to err=%d\", err);\n        return err;\n    }\n\n    lfs_probe_log(\"lfs_fs_mkconsistent: continuing, err is zero\");\n\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    lfs_probe_log(\"lfs_fs_mkconsistent: after lfs_fs_mkconsistent_(), err=%d\", err);\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_fs_mkconsistent: called LFS_UNLOCK on cfg=%p, returning err=%d\", (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}