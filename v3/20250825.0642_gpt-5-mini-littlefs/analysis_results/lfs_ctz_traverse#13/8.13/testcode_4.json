{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter lfs is a non-const pointer but the function only reads from *lfs (accesses lfs->cfg->block_size, etc.) and does not modify the object. According to MISRA C 2023 Rule 8.13, lfs should be declared as const lfs_t *lfs. Note: the off parameter is intentionally non-const because the function updates *off, so it need not be const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_traverse:\n```c\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n\n    while (true) {\n        int err = cb(data, head);\n        if (err) {\n            return err;\n        }\n\n        if (index == 0) {\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (err) {\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            err = cb(data, heads[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        index -= count;\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_traverse code.\n",
  "test_code": "#include <stdio.h>\n\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    /* Open log file for appending control-flow and state traces. */\n    FILE *log = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_ctz_traverse: lfs=%p head=%llu size=%llu\\n\",\n                (void *)lfs, (unsigned long long)head, (unsigned long long)size);\n    }\n\n    if (size == 0) {\n        if (log) {\n            fprintf(log, \"EARLY RETURN: size == 0 -> 0\\n\");\n            fclose(log);\n        }\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    if (log) {\n        fprintf(log, \"computed index=%llu (from size-1=%llu)\\n\",\n                (unsigned long long)index, (unsigned long long)(size - 1));\n    }\n\n    while (true) {\n        if (log) {\n            fprintf(log, \"CALL cb for head=%llu\\n\", (unsigned long long)head);\n        }\n        int err = cb(data, head);\n        if (log) {\n            fprintf(log, \"cb returned %d for head=%llu\\n\", err, (unsigned long long)head);\n        }\n        if (err) {\n            if (log) {\n                fprintf(log, \"RETURN on cb error: %d\\n\", err);\n                fclose(log);\n            }\n            return err;\n        }\n\n        if (index == 0) {\n            if (log) {\n                fprintf(log, \"index == 0 -> finished, returning 0\\n\");\n                fclose(log);\n            }\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        if (log) {\n            fprintf(log, \"about to read %d head(s) from block %llu\\n\", count, (unsigned long long)head);\n        }\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        /* convert from little-endian as original */\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (log) {\n            fprintf(log, \"lfs_bd_read returned %d; heads[0]=%llu heads[1]=%llu\\n\",\n                    err, (unsigned long long)heads[0], (unsigned long long)heads[1]);\n        }\n        if (err) {\n            if (log) {\n                fprintf(log, \"RETURN on bd_read error: %d\\n\", err);\n                fclose(log);\n            }\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            if (log) {\n                fprintf(log, \"CALL cb for heads[%d]=%llu\\n\", i, (unsigned long long)heads[i]);\n            }\n            err = cb(data, heads[i]);\n            if (log) {\n                fprintf(log, \"cb returned %d for heads[%d]=%llu\\n\", err, i, (unsigned long long)heads[i]);\n            }\n            if (err) {\n                if (log) {\n                    fprintf(log, \"RETURN on cb error in loop: %d\\n\", err);\n                    fclose(log);\n                }\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        if (log) {\n            fprintf(log, \"advance: new head=%llu, decrement index by %d (old index=%llu)\\n\",\n                    (unsigned long long)head, count, (unsigned long long)index);\n        }\n        index -= count;\n    }\n}\n"
}