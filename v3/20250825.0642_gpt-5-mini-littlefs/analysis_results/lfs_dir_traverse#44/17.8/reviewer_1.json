{
  "user_message": "An agent A claimed that the following lfs_dir_traverse code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_dir_traverse.\n```c\nstatic int lfs_dir_traverse(lfs_t *lfs,\n        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_tag_t tmask, lfs_tag_t ttag,\n        uint16_t begin, uint16_t end, int16_t diff,\n        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {\n    // This function in inherently recursive, but bounded. To allow tool-based\n    // analysis without unnecessary code-cost we use an explicit stack\n    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];\n    unsigned sp = 0;\n    int res;\n\n    // iterate over directory and attrs\n    lfs_tag_t tag;\n    const void *buffer;\n    struct lfs_diskoff disk = {0};\n    while (true) {\n        {\n            if (off+lfs_tag_dsize(ptag) < dir->off) {\n                off += lfs_tag_dsize(ptag);\n                int err = lfs_bd_read(lfs,\n                        NULL, &lfs->rcache, sizeof(tag),\n                        dir->pair[0], off, &tag, sizeof(tag));\n                if (err) {\n                    return err;\n                }\n\n                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;\n                disk.block = dir->pair[0];\n                disk.off = off+sizeof(lfs_tag_t);\n                buffer = &disk;\n                ptag = tag;\n            } else if (attrcount > 0) {\n                tag = attrs[0].tag;\n                buffer = attrs[0].buffer;\n                attrs += 1;\n                attrcount -= 1;\n            } else {\n                // finished traversal, pop from stack?\n                res = 0;\n                break;\n            }\n\n            // do we need to filter?\n            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);\n            if ((mask & tmask & tag) != (mask & tmask & ttag)) {\n                continue;\n            }\n\n            if (lfs_tag_id(tmask) != 0) {\n                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);\n                // recurse, scan for duplicates, and update tag based on\n                // creates/deletes\n                stack[sp] = (struct lfs_dir_traverse){\n                    .dir        = dir,\n                    .off        = off,\n                    .ptag       = ptag,\n                    .attrs      = attrs,\n                    .attrcount  = attrcount,\n                    .tmask      = tmask,\n                    .ttag       = ttag,\n                    .begin      = begin,\n                    .end        = end,\n                    .diff       = diff,\n                    .cb         = cb,\n                    .data       = data,\n                    .tag        = tag,\n                    .buffer     = buffer,\n                    .disk       = disk,\n                };\n                sp += 1;\n\n                tmask = 0;\n                ttag = 0;\n                begin = 0;\n                end = 0;\n                diff = 0;\n                cb = lfs_dir_traverse_filter;\n                data = &stack[sp-1].tag;\n                continue;\n            }\n        }\n\npopped:\n        // in filter range?\n        if (lfs_tag_id(tmask) != 0 &&\n                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {\n            continue;\n        }\n\n        // handle special cases for mcu-side operations\n        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {\n            // do nothing\n        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {\n            // Without this condition, lfs_dir_traverse can exhibit an\n            // extremely expensive O(n^3) of nested loops when renaming.\n            // This happens because lfs_dir_traverse tries to filter tags by\n            // the tags in the source directory, triggering a second\n            // lfs_dir_traverse with its own filter operation.\n            //\n            // traverse with commit\n            // '-> traverse with filter\n            //     '-> traverse with move\n            //         '-> traverse with filter\n            //\n            // However we don't actually care about filtering the second set of\n            // tags, since duplicate tags have no effect when filtering.\n            //\n            // This check skips this unnecessary recursive filtering explicitly,\n            // reducing this runtime from O(n^3) to O(n^2).\n            if (cb == lfs_dir_traverse_filter) {\n                continue;\n            }\n\n            // recurse into move\n            stack[sp] = (struct lfs_dir_traverse){\n                .dir        = dir,\n                .off        = off,\n                .ptag       = ptag,\n                .attrs      = attrs,\n                .attrcount  = attrcount,\n                .tmask      = tmask,\n                .ttag       = ttag,\n                .begin      = begin,\n                .end        = end,\n                .diff       = diff,\n                .cb         = cb,\n                .data       = data,\n                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),\n            };\n            sp += 1;\n\n            uint16_t fromid = lfs_tag_size(tag);\n            uint16_t toid = lfs_tag_id(tag);\n            dir = buffer;\n            off = 0;\n            ptag = 0xffffffff;\n            attrs = NULL;\n            attrcount = 0;\n            tmask = LFS_MKTAG(0x600, 0x3ff, 0);\n            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);\n            begin = fromid;\n            end = fromid+1;\n            diff = toid-fromid+diff;\n        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {\n            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {\n                const struct lfs_attr *a = buffer;\n                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,\n                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);\n                if (res < 0) {\n                    return res;\n                }\n\n                if (res) {\n                    break;\n                }\n            }\n        } else {\n            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);\n            if (res < 0) {\n                return res;\n            }\n\n            if (res) {\n                break;\n            }\n        }\n    }\n\n    if (sp > 0) {\n        // pop from the stack and return, fortunately all pops share\n        // a destination\n        dir         = stack[sp-1].dir;\n        off         = stack[sp-1].off;\n        ptag        = stack[sp-1].ptag;\n        attrs       = stack[sp-1].attrs;\n        attrcount   = stack[sp-1].attrcount;\n        tmask       = stack[sp-1].tmask;\n        ttag        = stack[sp-1].ttag;\n        begin       = stack[sp-1].begin;\n        end         = stack[sp-1].end;\n        diff        = stack[sp-1].diff;\n        cb          = stack[sp-1].cb;\n        data        = stack[sp-1].data;\n        tag         = stack[sp-1].tag;\n        buffer      = stack[sp-1].buffer;\n        disk        = stack[sp-1].disk;\n        sp -= 1;\n        goto popped;\n    } else {\n        return res;\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function assigns to multiple parameters (e.g. dir = buffer; off = 0; ptag = 0xffffffff; attrs = NULL; attrcount = 0; tmask = ...; ttag = ...; begin = fromid; end = fromid+1; diff = toid-fromid+diff;). These are direct modifications of function parameters (including pointer parameters dir and attrs). This violates MISRA C 2023 Rule 17.8, which forbids modifying parameters (the pointer object pointed-to may be modified, but the pointer itself shall not be).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER lfs_dir_traverse: dir=0x7ffffea70f68 off=0 ptag=0xffffffff attrs=0x7ffffea71060 attrcount=3 tmask=0x400ffc00 ttag=0x00000000 begin=0 end=1 diff=0 cb=0x563d9b8ce67f data=0x7ffffea70d80\nBRANCH: consume attr (attrcount=3 attrs=0x7ffffea71060)\nAFTER ATTR CONSUME: attrs=0x7ffffea71070 attrcount=2 tag=0x40100000 buffer=(nil)\nFILTER: skipping tag=0x40100000 (mask&tmask&tag mismatch)\nBRANCH: consume attr (attrcount=2 attrs=0x7ffffea71070)\nAFTER ATTR CONSUME: attrs=0x7ffffea71080 attrcount=1 tag=0x0ff00008 buffer=0x563d9b8fdbd9\nPUSH STACK: sp=0 stored dir=0x7ffffea70f68 off=0 ptag=0xffffffff attrs=0x7ffffea71080 attrcount=1 tmask=0x400ffc00 ttag=0x00000000 begin=0 end=1 diff=0 cb=0x563d9b8ce67f data=0x7ffffea70d80 tag=0x0ff00008 buffer=0x563d9b8fdbd9\nAFTER PUSH: sp=1 tmask=0x00000000 ttag=0x00000000 begin=0 end=0 diff=0 cb=0x563d9b8ca5e4 data=0x7ffffea70c58\nBRANCH: consume attr (attrcount=1 attrs=0x7ffffea71080)\nAFTER ATTR CONSUME: attrs=0x7ffffea71090 attrcount=0 tag=0x20100018 buffer=0x7ffffea71020\nCALL CALLBACK: tag=0x20100018 adjusted-tag=0x20100018 buffer=0x7ffffea71020\nCALLBACK RESULT: res=0\nFINISHED TRAVERSAL: no more entries, res=0\nPOP: sp=1 popping state\nPOP AFTER: dir=0x7ffffea70f68 off=0 ptag=0xffffffff attrs=0x7ffffea71080 attrcount=1 tmask=0x400ffc00 ttag=0x00000000 begin=0 end=1 diff=0 cb=0x563d9b8ce67f data=0x7ffffea70d80 tag=0x0ff00008 buffer=0x563d9b8fdbd9\nCALL CALLBACK: tag=0x0ff00008 adjusted-tag=0x0ff00008 buffer=0x563d9b8fdbd9\nCALLBACK RESULT: res=0\nBRANCH: consume attr (attrcount=1 attrs=0x7ffffea71080)\nAFTER ATTR CONSUME: attrs=0x7ffffea71090 attrcount=0 tag=0x20100018 buffer=0x7ffffea71020\nPUSH STACK: sp=0 stored dir=0x7ffffea70f68 off=0 ptag=0xffffffff attrs=0x7ffffea71090 attrcount=0 tmask=0x400ffc00 ttag=0x00000000 begin=0 end=1 diff=0 cb=0x563d9b8ce67f data=0x7ffffea70d80 tag=0x20100018 buffer=0x7ffffea71020\nAFTER PUSH: sp=1 tmask=0x00000000 ttag=0x00000000 begin=0 end=0 diff=0 cb=0x563d9b8ca5e4 data=0x7ffffea70c58\nFINISHED TRAVERSAL: no more entries, res=0\nPOP: sp=1 popping state\nPOP AFTER: dir=0x7ffffea70f68 off=0 ptag=0xffffffff attrs=0x7ffffea71090 attrcount=0 tmask=0x400ffc00 ttag=0x00000000 begin=0 end=1 diff=0 cb=0x563d9b8ce67f data=0x7ffffea70d80 tag=0x20100018 buffer=0x7ffffea71020\nCALL CALLBACK: tag=0x20100018 adjusted-tag=0x20100018 buffer=0x7ffffea71020\nCALLBACK RESULT: res=0\nFINISHED TRAVERSAL: no more entries, res=0\nRETURN: res=0 sp=0\nENTER lfs_dir_traverse: dir=0x7ffffea70f68 off=0 ptag=0xffffffff attrs=(nil) attrcount=0 tmask=0x400ffc00 ttag=0x00000000 begin=0 end=1 diff=0 cb=0x563d9b8ce67f data=0x7ffffea70d80\nBRANCH: read tag from block pair[0]=0 at off=0 (ptag=0xffffffff)\nAFTER READ: off=4 ptag=0x8ff00008 disk.block=0 disk.off=8 buffer=0x7ffffea70c10\nPUSH STACK: sp=0 stored dir=0x7ffffea70f68 off=4 ptag=0x8ff00008 attrs=(nil) attrcount=0 tmask=0x400ffc00 ttag=0x00000000 begin=0 end=1 diff=0 cb=0x563d9b8ce67f data=0x7ffffea70d80 tag=0x8ff00008 buffer=0x7ffffea70c10\nAFTER PUSH: sp=1 tmask=0x00000000 ttag=0x00000000 begin=0 end=0 diff=0 cb=0x563d9b8ca5e4 data=0x7ffffea70c58\nBRANCH: read tag from block pair[0]=0 at off=4 (ptag=0x8ff00008)\nAFTER READ: off=16 ptag=0xa0100018 disk.block=0 disk.off=20 buffer=0x7ffffea70c10\nCALL CALLBACK: tag=0xa0100018 adjusted-tag=0xa0100018 buffer=0x7ffffea70c10\nCALLBACK RESULT: res=0\nBRANCH: read tag from block pair[0]=0 at off=16 (ptag=0xa0100018)\nAFTER READ: off=44 ptag=0xdffffc08 disk.block=0 disk.off=48 buffer=0x7ffffea70c10\nCALL CALLBACK: tag=0xdffffc08 adjusted-tag=0xdffffc08 buffer=0x7ffffea70c10\nCALLBACK RESULT: res=0\nBRANCH: read tag from block pair[0]=0 at off=44 (ptag=0xdffffc08)\nAFTER READ: off=56 ptag=0xd00ffc04 disk.block=0 disk.off=60 buffer=0x7ffffea70c10\nCALL CALLBACK: tag=0xd00ffc04 adjusted-tag=0xd00ffc04 buffer=0x7ffffea70c10\nCALLBACK RESULT: res=0\nFINISHED TRAVERSAL: no more entries, res=0\nPOP: sp=1 popping state\nPOP AFTER: dir=0x7ffffea70f68 off=4 ptag=0x8ff00008 attrs=(nil) attrcount=0 tmask=0x400ffc00 ttag=0x00000000 begin=0 end=1 diff=0 cb=0x563d9b8ce67f data=0x7ffffea70d80 tag=0x8ff00008 buffer=0x7ffffea70c10\nCALL CALLBACK: \n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_traverse:\nstatic int lfs_dir_traverse_filter(void *p,\n        lfs_tag_t tag, const void *buffer) {\n    lfs_tag_t *filtertag = p;\n    (void)buffer;\n\n    // which mask depends on unique bit in tag structure\n    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))\n            ? LFS_MKTAG(0x7ff, 0x3ff, 0)\n            : LFS_MKTAG(0x700, 0x3ff, 0);\n\n    // check for redundancy\n    if ((mask & tag) == (mask & *filtertag) ||\n            lfs_tag_isdelete(*filtertag) ||\n            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (\n                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {\n        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);\n        return true;\n    }\n\n    // check if we need to adjust for created/deleted tags\n    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {\n        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n    }\n\n    return false;\n}\n...\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n...\ntypedef struct lfs_mdir {\n    lfs_block_t pair[2];\n    uint32_t rev;\n    lfs_off_t off;\n    uint32_t etag;\n    uint16_t count;\n    bool erased;\n    bool split;\n    lfs_block_t tail[2];\n} lfs_mdir_t\n...\nstruct lfs_mattr {\n    lfs_tag_t tag;\n    const void *buffer;\n}\n...\nstruct lfs_attr {\n    // 8-bit type of attribute, provided by user and used to\n    // identify the attribute\n    uint8_t type;\n\n    // Pointer to buffer containing the attribute\n    void *buffer;\n\n    // Size of attribute in bytes, limited to LFS_ATTR_MAX\n    lfs_size_t size;\n}\n...\ntypedef uint32_t lfs_tag_t\n...\ntypedef uint32_t lfs_off_t\n...\nstruct lfs_diskoff {\n    lfs_block_t block;\n    lfs_off_t off;\n}\n...\n#define LFS_DIR_TRAVERSE_DEPTH 3\n...\n#define LFS_MKTAG(type, id, size) (((lfs_tag_t)(type)<<20)|((lfs_tag_t)(id)<<10)|(lfs_tag_t)(size))\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified (the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified). In lfs_dir_traverse many of the formal parameters are assigned to or updated (examples: attrs += 1; attrcount -= 1; dir = buffer; off = 0; ptag = 0xffffffff; attrs = NULL; attrcount = 0; tmask = ...; ttag = ...; begin = fromid; end = fromid+1; diff = toid - fromid + diff; cb = lfs_dir_traverse_filter; data = &stack[sp-1].tag; and later the pops that assign back to parameters). Those are direct modifications of parameter variables (including pointer parameters like dir and attrs), which violates Rule 17.8. A typical MISRA-compliant fix is to copy parameters into local non-parameter variables and modify those locals instead."
}