{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_mkdir_ the parameter is declared as const char *path, but the call lfs_dir_find(lfs, &cwd.m, &path, &id) passes &path so the callee can update the local parameter (change the pointer value). Modifying the pointer parameter (even via its address) violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/947.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/947.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/947.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    /* Log entry and state before attempting to lock */\n    lfs_probe_log(\"ENTER lfs_mkdir: lfs=%p, path_ptr=%p, path_str=\\\"%s\\\", &path=%p\",\n                  (void*)lfs, (const void*)path, (path != NULL) ? path : \"(null)\", (void*)&path);\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_probe_log(\"lfs_mkdir: LFS_LOCK failed -> %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Log state immediately before calling the helper that reportedly violates Rule 17.8 */\n    lfs_probe_log(\"lfs_mkdir: calling lfs_mkdir_ with lfs=%p, path_ptr=%p, path_str=\\\"%s\\\", &path=%p\",\n                  (void*)lfs, (const void*)path, (path != NULL) ? path : \"(null)\", (void*)&path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Log state immediately after the call so agents can compare pointer/value snapshots. */\n    lfs_probe_log(\"lfs_mkdir: returned from lfs_mkdir_ -> %d ; lfs=%p, path_ptr=%p, path_str=\\\"%s\\\", &path=%p\",\n                  err, (void*)lfs, (const void*)path, (path != NULL) ? path : \"(null)\", (void*)&path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"EXIT lfs_mkdir: returning %d\", err);\n    return err;\n}\n"
}