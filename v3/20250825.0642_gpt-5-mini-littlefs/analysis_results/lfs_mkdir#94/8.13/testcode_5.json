{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe attribute entry {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path} passes the const char *path into the attribute/value slot used by LFS_MKATTRS/LFS_DIR_COMMIT. If the attribute structure or lfs_dir_commit prototype uses a non-const pointer (e.g. void *value) for attribute data, this discards the const qualifier of path. That is a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type (e.g. const void *) when the data is not modified by the callee.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/943.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Forward declaration of lfs_mkdir_ to preserve original linkage. */\nint lfs_mkdir_(lfs_t *lfs, const char *path);\n\n/*\n * Probe logging function: append structured logs into /tmp/logs/943.txt.\n * Accepts only const-qualified string pointers and does not cast away const.\n */\nstatic void lfs_probe_log(const char *event, const char *path, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/943.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) == NULL) {\n        /* fallback to time_t if localtime_r fails */\n        fprintf(f, \"[time=%ld] \", (long)t);\n    } else {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf)) {\n            fprintf(f, \"[time=%s] \", timestr);\n        } else {\n            fprintf(f, \"[time=%ld] \", (long)t);\n        }\n    }\n\n    /* Safe printing of pointer address without casting away const-qualified pointer\n       by using uintptr_t and PRIxPTR formatting. */\n    uintptr_t addr = (uintptr_t)path;\n    size_t nlen = (path != NULL) ? strlen(path) : 0u;\n\n    fprintf(f, \"event=%s path_addr=0x%\" PRIxPTR \" path_len=%zu\", event, addr, nlen);\n\n    if (path != NULL) {\n        /* Print a bounded prefix of the path to avoid overly long logs. */\n        static const size_t MAX_SNIPPET = 256u;\n        size_t snippet_len = (nlen < MAX_SNIPPET) ? nlen : MAX_SNIPPET;\n        fprintf(f, \" path_snippet=\\\"\");\n        if (snippet_len > 0u) {\n            fwrite(path, 1u, snippet_len, f);\n            if (snippet_len < nlen) {\n                fprintf(f, \"...\\\"\");\n            } else {\n                fprintf(f, \"\\\"\");\n            }\n        } else {\n            fprintf(f, \"\\\"\");\n        }\n    } else {\n        fprintf(f, \" path_snippet=\\\"(null)\\\"\");\n    }\n\n    /* Record error code when provided (useful for post-call logging). */\n    fprintf(f, \" err=%d\\n\", err);\n\n    fclose(f);\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early exit due to lock failure. */\n        lfs_probe_log(\"lock_failed\", path, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /*\n     * Probe before calling the real implementation. This captures the\n     * pointer value and the path contents so other agents can inspect\n     * whether a const-qualified pointer is being forwarded into places\n     * that may discard const (e.g. an attribute value slot typed as void*).\n     */\n    lfs_probe_log(\"enter_lfs_mkdir\", path, 0);\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Log the result and the same path information for correlation. */\n    lfs_probe_log(\"exit_lfs_mkdir\", path, err);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}