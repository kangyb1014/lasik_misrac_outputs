{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(suffix, \".\", 1) (and elsewhere memcmp(suffix, \"..\", 2)) to test path components against the string literals \".\" and \"..\". These are null\u2011terminated string literals and the intention is to compare string tokens, so memcmp is being used to compare null\u2011terminated strings (even though a byte count is supplied). This violates MISRA C 2023 Rule 21.14. Replace with a character comparison (e.g. sufflen==1 && suffix[0]=='.') or a proper string function such as strncmp if justified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/948.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe logging helper - writes formatted records to /tmp/logs/948.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/948.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    if (t != (time_t)-1) {\n        struct tm tmbuf;\n        if (localtime_r(&t, &tmbuf) != NULL) {\n            char timestr[32];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmbuf) > 0) {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Probe that inspects path components and logs any occurrences of \".\" or \"..\" tokens.\n   This intentionally uses explicit character/length comparisons rather than memcmp/strcmp\n   to avoid introducing the very violation we're trying to capture evidence of. */\nstatic void lfs_probe_path_components(const char *path)\n{\n    if (path == NULL) {\n        lfs_probe_log(\"path: (null)\");\n        return;\n    }\n\n    lfs_probe_log(\"path: \\\"%s\\\"\", path);\n\n    const char *p = path;\n    const char *start = p;\n    size_t idx = 0u;\n\n    /* Skip leading slashes and treat empty components consistently */\n    while (*p != '\\0') {\n        /* Skip any number of consecutive '/' characters */\n        while (*p == '/') {\n            p++;\n            idx++;\n            start = p;\n        }\n        if (*p == '\\0') {\n            break;\n        }\n\n        /* Find end of component */\n        const char *q = p;\n        size_t comp_len = 0u;\n        while (*q != '\\0' && *q != '/') {\n            q++; comp_len++; idx++;\n        }\n\n        /* Log the component and check for \".\" and \"..\" */\n        if (comp_len == 0u) {\n            /* Shouldn't happen because of leading slash skip, but be robust */\n            lfs_probe_log(\"component at offset %zu: <empty>\", (size_t)(p - path));\n        } else {\n            /* Print component as a bounded string */\n            char buf[64];\n            size_t copy_len = (comp_len < (sizeof(buf) - 1u)) ? comp_len : (sizeof(buf) - 1u);\n            for (size_t i = 0u; i < copy_len; i++) {\n                buf[i] = p[i];\n            }\n            buf[copy_len] = '\\0';\n\n            lfs_probe_log(\"component at offset %zu: \\\"%s\\\" (len=%zu)\", (size_t)(p - path), buf, comp_len);\n\n            /* Compare safely to \".\" and \"..\" using length and character checks */\n            if (comp_len == 1u && p[0] == '.') {\n                lfs_probe_log(\"  -> component is DOT (\\\".\\\") at offset %zu\", (size_t)(p - path));\n            } else if (comp_len == 2u && p[0] == '.' && p[1] == '.') {\n                lfs_probe_log(\"  -> component is DOTDOT (\\\"..\\\") at offset %zu\", (size_t)(p - path));\n            }\n        }\n\n        /* Advance to next component */\n        p = q;\n    }\n}\n\n/* Modified lfs_mkdir that preserves original control flow but adds probes to capture\n   the path and the call/return of the internal operation. */\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_probe_log(\"lfs_mkdir: LFS_LOCK returned err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Probe: log entry and inspect path components for \".\" / \"..\" tokens */\n    lfs_probe_log(\"ENTER lfs_mkdir: lfs=%p, path=\\\"%s\\\"\", (void *)lfs, (path != NULL) ? path : \"(null)\");\n    lfs_probe_path_components(path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Probe: log result */\n    lfs_probe_log(\"EXIT lfs_mkdir: result=%d for path=\\\"%s\\\"\", err, (path != NULL) ? path : \"(null)\");\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}