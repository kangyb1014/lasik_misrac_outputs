{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_path_namelen calls strcspn(path, \"/\") without validating that 'path' is a non-NULL, null-terminated C string. If a caller passes a pointer to a buffer that is not NUL-terminated within its allocated bounds (or passes NULL), strcspn will read past the end of the object, causing an out-of-bounds access. For example, if 'path' points to a char array of length N that contains no '\\0' in those N bytes, strcspn will continue reading beyond that buffer and violate the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/949.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper for lfs_mkdir. Writes lightweight info only (no dereference of 'path'). */\nstatic void lfs_mkdir_probe_log(const char *stage, void *lfs_ptr, const char *path, int err) {\n    FILE *f = fopen(\"/tmp/logs/949.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"---- lfs_mkdir probe: %s ----\\n\", stage);\n    fprintf(f, \"  lfs_ptr=%p\\n\", lfs_ptr);\n    fprintf(f, \"  path_ptr=%p\\n\", (const void*)path);\n    if (path == NULL) {\n        fprintf(f, \"  path_is_NULL=1\\n\");\n    } else {\n        /* IMPORTANT: do NOT attempt to print or read the contents of 'path' here.\n           The purpose of this probe is to record the pointer and control flow only.\n           Dereferencing or printing the string when it is not NUL-terminated may\n           itself cause out-of-bounds reads. */\n        fprintf(f, \"  path_is_NULL=0 (null-termination NOT validated)\\n\");\n    }\n    fprintf(f, \"  err_snapshot=%d\\n\", err);\n    fprintf(f, \"-------------------------------\\n\");\n    fclose(f);\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return due to lock failure. */\n        lfs_mkdir_probe_log(\"lock_failed\", (void*)lfs, path, err);\n        return err;\n    }\n\n    /* Original trace retained. Be aware this trace may attempt to print the\n       contents of 'path' (via \"%s\") which will read memory; we do not change\n       that original behaviour here, only add a safe probe that avoids\n       dereferencing 'path'. */\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Probe before calling the lower-level implementation. Do not dereference\n       'path' here; record pointer and state only so later analysis can compare\n       the pointer with outcomes and reproduction steps. */\n    lfs_mkdir_probe_log(\"before_lfs_mkdir_\", (void*)lfs, path, err);\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Probe after the call to capture the returned error and the same pointer\n       state so that one can correlate the call with any observed out-of-bounds\n       behaviour in downstream functions (for example strcspn called without\n       prior validation of 'path'). */\n    lfs_mkdir_probe_log(\"after_lfs_mkdir_\", (void*)lfs, path, err);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}