{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg, 0). In lfs_mkdir this value is assigned to err and then used in the controlling expression if (err) which is therefore always false (an invariant controlling expression). This is a violation of MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/945.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Minimal type and helper stubs so this translation unit is compilable.\n   These are intentionally simple and preserve behavior used in the target\n   code (LFS_LOCK returns 0 as per the reported expansion ((void)cfg, 0)). */\n\ntypedef struct lfs {\n    void *cfg;\n} lfs_t;\n\n/* Stubs for functions/macros used by lfs_mkdir. These are simple\n   functions, not macros, to keep the test file self-contained. */\n\nint LFS_LOCK(void *cfg) {\n    (void)cfg; /* mimic ((void)cfg, 0) */\n    return 0;\n}\n\nvoid LFS_UNLOCK(void *cfg) {\n    (void)cfg;\n}\n\n/* Lightweight tracing stub used in the original code. */\nvoid LFS_TRACE(const char *fmt, ...) {\n    (void)fmt; /* no-op for this test harness */\n}\n\n/* Minimal implementation so lfs_mkdir can call it. */\nint lfs_mkdir_(lfs_t *lfs, const char *path) {\n    (void)lfs;\n    (void)path;\n    return 0;\n}\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/945.txt.\n   Each entry is timestamped to help reconstruct control flow. */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *fp = fopen(\"/tmp/logs/945.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tmv;\n#if defined(_MSC_VER)\n    localtime_s(&tmv, &t);\n#else\n    localtime_r(&t, &tmv);\n#endif\n\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n\n    fprintf(fp, \"%s - \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* Modified lfs_mkdir with inserted probes that log control flow and state.\n   The original logic is preserved; probes only record information. */\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    /* Log entry and parameters. */\n    probe_log(\"ENTER lfs_mkdir: lfs=%p, path=\\\"%s\\\"\", (void*)lfs, path ? path : \"(null)\");\n\n    /* Preserve original call to LFS_LOCK and assignment. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock attempt and the exact value assigned to err. */\n    probe_log(\"after LFS_LOCK: err=%d\", err);\n\n    /* Log the evaluation of the controlling expression before branching. */\n    probe_log(\"evaluating if (err): value=%d\", err);\n\n    if (err) {\n        probe_log(\"branch taken: returning early with err=%d\", err);\n        return err;\n    }\n\n    /* Continue original behavior and log the call into the internal function. */\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n    probe_log(\"calling lfs_mkdir_ with path=\\\"%s\\\"\", path ? path : \"(null)\");\n\n    err = lfs_mkdir_(lfs, path);\n\n    probe_log(\"lfs_mkdir_ returned: err=%d\", err);\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n\n    /* Log unlock and final return value. */\n    probe_log(\"calling LFS_UNLOCK and returning err=%d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    return err;\n}\n"
}