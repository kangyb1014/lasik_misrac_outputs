{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(lfs->cfg) call is dead code in this build: the macro is defined as #define LFS_UNLOCK(cfg) ((void)cfg), which has no effect when executed. Removing that statement would not change program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/942.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs for control flow and state. */\nstatic void lfs_mkdir_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/942.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and LFS_LOCK result and cfg pointer for evidence */\n    lfs_mkdir_probe_log(\"ENTER lfs_mkdir: lfs=%p path=\\\"%s\\\" LFS_LOCK_ret=%d cfg=%p\",\n        (void*)lfs, (path ? path : \"(null)\"), err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_mkdir_probe_log(\"lfs_mkdir early return due to LFS_LOCK error=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    lfs_mkdir_probe_log(\"after lfs_mkdir_: err=%d\", err);\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n\n    /* Log before and after calling LFS_UNLOCK so callers can observe whether it has\n       any runtime effect in this build (evidence for dead-code claim). */\n    lfs_mkdir_probe_log(\"about to call LFS_UNLOCK on cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_mkdir_probe_log(\"after LFS_UNLOCK on cfg=%p (note: macro may be no-op)\", (void*)lfs->cfg);\n\n    lfs_mkdir_probe_log(\"returning err=%d\", err);\n    return err;\n}\n"
}