{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_traverse the identifier ttag is a function parameter (lfs_tag_t ttag). The assignment ttag = stack[sp-1].ttag; writes to that parameter, i.e. modifies a function parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    probe_log(\"ENTER: lfs_dir_relocatingcommit: lfs=%p dir=%p pair=[%llu,%llu] attrcount=%d dir->off=%llu dir->etag=%llu dir->count=%d dir->erased=%d\",\n            (void*)lfs, (void*)dir,\n            (unsigned long long)pair[0], (unsigned long long)pair[1],\n            attrcount,\n            (unsigned long long)dir->off, (unsigned long long)dir->etag,\n            (int)dir->count, (int)dir->erased);\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        probe_log(\"ATTR[%d]: tag=%llu type1=%d type3=%d chunk=%d id=%d\",\n                i,\n                (unsigned long long)attrs[i].tag,\n                (int)lfs_tag_type1(attrs[i].tag),\n                (int)lfs_tag_type3(attrs[i].tag),\n                (int)lfs_tag_chunk(attrs[i].tag),\n                (int)lfs_tag_id(attrs[i].tag));\n\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n            probe_log(\"ATTR[%d] CREATE: new dir->count=%d\", i, (int)dir->count);\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n            probe_log(\"ATTR[%d] DELETE: new dir->count=%d\", i, (int)dir->count);\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n            probe_log(\"ATTR[%d] TAIL: tail=[%llu,%llu] split=%d\", i,\n                    (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1], (int)dir->split);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        probe_log(\"HASDELETE and count==0: calling lfs_fs_pred for dir->pair=[%llu,%llu]\", (unsigned long long)dir->pair[0], (unsigned long long)dir->pair[1]);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        probe_log(\"lfs_fs_pred returned %d pdir->split=%d\", err, (int)pdir->split);\n        if (err && err != LFS_ERR_NOENT) {\n            probe_log(\"EARLY RETURN from lfs_dir_relocatingcommit with err=%d (from lfs_fs_pred)\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            probe_log(\"STATE set to LFS_OK_DROPPED, jumping to fixmlist\");\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        probe_log(\"dir->erased == true: preparing commit: block=%llu off=%llu etag=%llu\",\n                (unsigned long long)dir->pair[0], (unsigned long long)dir->off, (unsigned long long)dir->etag);\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        probe_log(\"BEFORE lfs_dir_traverse: dir->off=%llu dir->etag=%llu dir->tail=[%llu,%llu] commit.block=%llu commit.off=%llu commit.ptag=%llu\",\n                (unsigned long long)dir->off,\n                (unsigned long long)dir->etag,\n                (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1],\n                (unsigned long long)commit.block, (unsigned long long)commit.off, (unsigned long long)commit.ptag);\n\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n\n        probe_log(\"AFTER lfs_dir_traverse: err=%d dir->off=%llu dir->etag=%llu commit.off=%llu commit.ptag=%llu\",\n                err,\n                (unsigned long long)dir->off,\n                (unsigned long long)dir->etag,\n                (unsigned long long)commit.off,\n                (unsigned long long)commit.ptag);\n\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            probe_log(\"lfs_dir_traverse returned err=%d\", err);\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                probe_log(\"lfs_dir_traverse signaled NOSPC/CORRUPT, going to compact\");\n                goto compact;\n            }\n            probe_log(\"RETURNING err=%d (from lfs_dir_traverse)\", err);\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            probe_log(\"Non-zero global delta detected, committing gstate change\");\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                probe_log(\"lfs_dir_getgstate returned err=%d\", err);\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                probe_log(\"lfs_dir_commitattr returned err=%d\", err);\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    probe_log(\"lfs_dir_commitattr signaled NOSPC/CORRUPT, going to compact\");\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            probe_log(\"lfs_dir_commitcrc returned err=%d\", err);\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                probe_log(\"lfs_dir_commitcrc signaled NOSPC/CORRUPT, going to compact\");\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        probe_log(\"COMMIT SUCCESS: updated dir->off=%llu dir->etag=%llu\",\n                (unsigned long long)dir->off, (unsigned long long)dir->etag);\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    probe_log(\"COMPACT: dropping pcache and calling lfs_dir_splittingcompact\");\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    probe_log(\"lfs_dir_splittingcompact returned state=%d\", state);\n    if (state < 0) {\n        probe_log(\"RETURNING state=%d (from splittingcompact)\", state);\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    probe_log(\"FIXMLIST: starting fixup for active metadata-pairs oldpair=[%llu,%llu]\",\n            (unsigned long long)pair[0], (unsigned long long)pair[1]);\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            probe_log(\"FIXMLIST: matched mlist entry d=%p id=%d type=%d\", (void*)d, (int)d->id, (int)d->type);\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        probe_log(\"FIXMLIST: clearing pair for d->id=%d (DELETE matching)\", (int)d->id);\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        probe_log(\"FIXMLIST: decremented d->id to %d due to DELETE before it\", (int)d->id);\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                            probe_log(\"FIXMLIST: decremented dir pos to %d\", (int)((lfs_dir_t*)d)->pos);\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        probe_log(\"FIXMLIST: incremented d->id to %d due to CREATE at id %d\", (int)d->id, (int)lfs_tag_id(attrs[i].tag));\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                            probe_log(\"FIXMLIST: incremented dir pos to %d\", (int)((lfs_dir_t*)d)->pos);\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                probe_log(\"FIXMLIST: d->id=%d >= d->m.count=%d and split=%d, fetching tail\", (int)d->id, (int)d->m.count, (int)d->m.split);\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                    probe_log(\"FIXMLIST: adjusted d->id to %d after tail adjustment\", (int)d->id);\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                probe_log(\"lfs_dir_fetch returned %d while fixing mlist entry d=%p\", err, (void*)d);\n                if (err) {\n                    probe_log(\"RETURNING err=%d (from lfs_dir_fetch during fixmlist)\", err);\n                    return err;\n                }\n            }\n        }\n    }\n\n    probe_log(\"EXIT: lfs_dir_relocatingcommit returning state=%d\", state);\n    return state;\n}\n"
}