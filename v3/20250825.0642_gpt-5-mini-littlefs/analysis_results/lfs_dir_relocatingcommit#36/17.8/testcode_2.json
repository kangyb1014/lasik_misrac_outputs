{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn function lfs_dir_traverse the by-value parameter 'tmask' (type lfs_tag_t) is assigned to 0 (statement: tmask = 0;) when preparing a recursive traversal. This modifies the function parameter variable itself rather than an object referred to by a pointer, which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append logs to /tmp/logs/367.txt */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nstatic void probe_log_attrs(const struct lfs_mattr *attrs, int attrcount) {\n    for (int i = 0; i < attrcount; i++) {\n        /* Log raw tag for later inspection */\n        probe_log(\"  attr[%d]: tag=0x%08x, id=%d, buffer=%p\", i, (unsigned)attrs[i].tag,\n                (int)lfs_tag_id(attrs[i].tag), attrs[i].buffer);\n    }\n}\n\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    probe_log(\"ENTER lfs_dir_relocatingcommit: pair=[%lu,%lu], dir=%p, dir->pair=[%lu,%lu], off=%lu, etag=0x%08x, count=%d, erased=%d, split=%d, attrcount=%d\", \n            (unsigned long)pair[0], (unsigned long)pair[1], (void*)dir,\n            (unsigned long)dir->pair[0], (unsigned long)dir->pair[1],\n            (unsigned long)dir->off, (unsigned)dir->etag, (int)dir->count,\n            (int)dir->erased, (int)dir->split, attrcount);\n\n    /* calculate changes to the directory */\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        probe_log(\"Inspecting attr %d: raw tag=0x%08x\", i, (unsigned)attrs[i].tag);\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n            probe_log(\"  CREATE: incremented dir->count to %d\", dir->count);\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n            probe_log(\"  DELETE: decremented dir->count to %d, hasdelete=%d\", dir->count, (int)hasdelete);\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n            probe_log(\"  TAIL: tail=[%lu,%lu], split=%d\", (unsigned long)dir->tail[0], (unsigned long)dir->tail[1], (int)dir->split);\n        }\n    }\n\n    probe_log(\"After attr processing: dir->count=%d, hasdelete=%d, dir->split=%d\", dir->count, (int)hasdelete, (int)dir->split);\n\n    /* should we actually drop the directory block? */\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        probe_log(\"Considering dropping directory: calling lfs_fs_pred with dir->pair=[%lu,%lu]\", (unsigned long)dir->pair[0], (unsigned long)dir->pair[1]);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        probe_log(\"  lfs_fs_pred returned %d\", err);\n        if (err && err != LFS_ERR_NOENT) {\n            probe_log(\"  lfs_fs_pred fatal error -> returning %d\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            probe_log(\"  Directory dropped (state=%d), goto fixmlist\", state);\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        probe_log(\"dir->erased is true: preparing commit structures\");\n        /* try to commit */\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        /* traverse attrs that need to be written out */\n        lfs_pair_tole32(dir->tail);\n        probe_log(\"About to call lfs_dir_traverse: dir=%p, off=%lu, etag=0x%08x, attrcount=%d\", (void*)dir, (unsigned long)dir->off, (unsigned)dir->etag, attrcount);\n        probe_log_attrs(attrs, attrcount);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        probe_log(\"lfs_dir_traverse returned %d\", err);\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                probe_log(\"lfs_dir_traverse signaled NOSPC or CORRUPT -> goto compact (err=%d)\", err);\n                goto compact;\n            }\n            probe_log(\"lfs_dir_traverse fatal error -> returning %d\", err);\n            return err;\n        }\n\n        /* commit any global diffs if we have any */\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            probe_log(\"Non-zero global delta detected; calling lfs_dir_getgstate\");\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            probe_log(\"  lfs_dir_getgstate returned %d\", err);\n            if (err) {\n                probe_log(\"  lfs_dir_getgstate fatal -> returning %d\", err);\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            probe_log(\"  lfs_dir_commitattr returned %d\", err);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    probe_log(\"  commitattr signaled NOSPC or CORRUPT -> goto compact (err=%d)\", err);\n                    goto compact;\n                }\n                probe_log(\"  commitattr fatal -> returning %d\", err);\n                return err;\n            }\n        }\n\n        /* finalize commit with the crc */\n        err = lfs_dir_commitcrc(lfs, &commit);\n        probe_log(\"lfs_dir_commitcrc returned %d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                probe_log(\"commitcrc signaled NOSPC or CORRUPT -> goto compact (err=%d)\", err);\n                goto compact;\n            }\n            probe_log(\"commitcrc fatal -> returning %d\", err);\n            return err;\n        }\n\n        /* successful commit, update dir */\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        /* and update gstate */\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        probe_log(\"Commit successful: dir->off=%lu, dir->etag=0x%08x\", (unsigned long)dir->off, (unsigned)dir->etag);\n\n        goto fixmlist;\n    }\n\ncompact:\n    /* fall back to compaction */\n    probe_log(\"Entering compact path: dropping pcache and calling lfs_dir_splittingcompact\");\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    probe_log(\"lfs_dir_splittingcompact returned %d\", state);\n    if (state < 0) {\n        probe_log(\"splittingcompact fatal -> returning %d\", state);\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    probe_log(\"Entering fixmlist: state=%d, attrcount=%d\", state, attrcount);\n    /* this complicated bit of logic is for fixing up any active\n     * metadata-pairs that we may have affected\n     *\n     * note we have to make two passes since the mdir passed to\n     * lfs_dir_commit could also be in this list, and even then\n     * we need to copy the pair so they don't get clobbered if we refetch\n     * our mdir.\n     */\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            probe_log(\"  Fixing mlist entry: d=%p, original id=%d, type=%d, m.pair=[%lu,%lu]\", (void*)d, d->id, d->type, (unsigned long)d->m.pair[0], (unsigned long)d->m.pair[1]);\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                probe_log(\"    m.pair was copied; scanning attrs to update ids\");\n                for (int i = 0; i < attrcount; i++) {\n                    probe_log(\"      scanning attr %d: tag=0x%08x\", i, (unsigned)attrs[i].tag);\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                        probe_log(\"        DELETE matched: nulled m.pair for d=%p\", (void*)d);\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                        probe_log(\"        DELETE before id: decremented id to %d\", d->id);\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                        probe_log(\"        CREATE before id: incremented id to %d\", d->id);\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                /* we split and id is on tail now */\n                probe_log(\"    id >= m.count and split: attempting to fetch tail for d=%p\", (void*)d);\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                probe_log(\"    lfs_dir_fetch returned %d for d=%p\", err, (void*)d);\n                if (err) {\n                    probe_log(\"    lfs_dir_fetch fatal -> returning %d\", err);\n                    return err;\n                }\n            }\n        }\n    }\n\n    probe_log(\"EXIT lfs_dir_relocatingcommit: returning state=%d\", state);\n    return state;\n}\n"
}