{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'attrcount = stack[sp-1].attrcount;' occurs inside the function lfs_dir_traverse where 'attrcount' is a (non-pointer) function parameter. Modifying the parameter (and elsewhere in the function with 'attrcount -= 1' and 'attrs += 1') changes the value of a function parameter, which violates MISRA C 2023 Rule 17.8 (parameters should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helpers. These keep original logic intact and only append\n   informational logs to /tmp/logs/367.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void lfs_probe_log_attrs(const struct lfs_mattr *attrs, int attrcount) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    fprintf(f, \"attrs=%p attrcount=%d\\n\", (const void*)attrs, attrcount);\n    for (int i = 0; i < attrcount && i < 16; i++) {\n        /* Print tag and buffer pointer; avoid dereferencing buffer to\n           prevent side-effects. */\n        fprintf(f, \"  attr[%d]: tag=0x%08x buffer=%p\\n\",\n                i, (unsigned)attrs[i].tag, (void*)attrs[i].buffer);\n    }\n    if (attrcount > 16) {\n        fprintf(f, \"  ... (%d more attrs)\\n\", attrcount - 16);\n    }\n    fclose(f);\n}\n\nstatic void lfs_probe_log_mdir(const char *prefix, lfs_mdir_t *dir, const lfs_block_t pair[2]) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    fprintf(f, \"%s mdir=%p pair=[%llu,%llu] off=%llu etag=0x%08x count=%d split=%d erased=%d\\n\",\n            prefix, (void*)dir,\n            (unsigned long long)pair[0], (unsigned long long)pair[1],\n            (unsigned long long)dir->off, (unsigned)dir->etag,\n            (int)dir->count, (int)dir->split, (int)dir->erased);\n    fprintf(f, \"%s tail=[%llu,%llu]\\n\",\n            prefix, (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1]);\n    fclose(f);\n}\n\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    /* Log entry state */\n    lfs_probe_log(\"ENTER lfs_dir_relocatingcommit: lfs=%p dir=%p pair=[%llu,%llu] attrs=%p attrcount=%d pdir=%p\",\n            (void*)lfs, (void*)dir,\n            (unsigned long long)pair[0], (unsigned long long)pair[1],\n            (const void*)attrs, attrcount, (void*)pdir);\n    lfs_probe_log_mdir(\"ENTRY_DIR\", dir, pair);\n    lfs_probe_log_attrs(attrs, attrcount);\n\n    /* calculate changes to the directory */\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    lfs_probe_log(\"AFTER_CALC_CHANGES: hasdelete=%d dir->count=%d\",\n            (int)hasdelete, (int)dir->count);\n    lfs_probe_log_mdir(\"AFTER_CALC_DIR\", dir, pair);\n\n    /* should we actually drop the directory block? */\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        lfs_probe_log(\"FS_PRED returned err=%d (LFS_ERR_NOENT=%d)\", err, LFS_ERR_NOENT);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_probe_log(\"EARLY_RETURN from lfs_dir_relocatingcommit with err=%d (from lfs_fs_pred)\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            lfs_probe_log(\"DROP_CONDITION met: state set to LFS_OK_DROPPED (%d)\", state);\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        /* try to commit */\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        /* traverse attrs that need to be written out */\n        lfs_pair_tole32(dir->tail);\n\n        /* Log state right before calling lfs_dir_traverse to capture\n           attrcount and attrs pointers and values. We will also log the\n           values immediately after the call to detect any unexpected\n           changes (e.g. stack corruption or parameter modification). */\n        lfs_probe_log(\"BEFORE_TRAVERSE: attrs=%p attrcount=%d\", (const void*)attrs, attrcount);\n        lfs_probe_log_attrs(attrs, attrcount);\n\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n\n        lfs_probe_log(\"AFTER_TRAVERSE: err=%d attrs=%p attrcount=%d\", err, (const void*)attrs, attrcount);\n        lfs_probe_log_attrs(attrs, attrcount);\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_probe_log(\"TRAVERSE returned NOSPC or CORRUPT -> goto compact (err=%d)\", err);\n                goto compact;\n            }\n            lfs_probe_log(\"TRAVERSE returned err=%d -> returning err\", err);\n            return err;\n        }\n\n        /* commit any global diffs if we have any */\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            lfs_probe_log(\"GETGSTATE returned err=%d\", err);\n            if (err) {\n                lfs_probe_log(\"EARLY_RETURN from lfs_dir_relocatingcommit with err=%d (from lfs_dir_getgstate)\", err);\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            lfs_probe_log(\"COMMITATTR returned err=%d\", err);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    lfs_probe_log(\"COMMITATTR NOSPC/CORRUPT -> goto compact (err=%d)\", err);\n                    goto compact;\n                }\n                lfs_probe_log(\"EARLY_RETURN from lfs_dir_relocatingcommit with err=%d (from lfs_dir_commitattr)\", err);\n                return err;\n            }\n        }\n\n        /* finalize commit with the crc */\n        err = lfs_dir_commitcrc(lfs, &commit);\n        lfs_probe_log(\"COMMITCRC returned err=%d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_probe_log(\"COMMITCRC NOSPC/CORRUPT -> goto compact (err=%d)\", err);\n                goto compact;\n            }\n            lfs_probe_log(\"EARLY_RETURN from lfs_dir_relocatingcommit with err=%d (from lfs_dir_commitcrc)\", err);\n            return err;\n        }\n\n        /* successful commit, update dir */\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        /* and update gstate */\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        lfs_probe_log(\"COMMIT_SUCCESS: dir->off=%llu dir->etag=0x%08x\",\n                (unsigned long long)dir->off, (unsigned)dir->etag);\n\n        goto fixmlist;\n    }\n\ncompact:\n    /* fall back to compaction */\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    lfs_probe_log(\"GOTO_COMPACT: calling lfs_dir_splittingcompact with attrcount=%d attrs=%p\", attrcount, (const void*)attrs);\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    lfs_probe_log(\"AFTER_SPLITTINGCOMPACT: state=%d\", state);\n    if (state < 0) {\n        lfs_probe_log(\"EARLY_RETURN from lfs_dir_relocatingcommit with state=%d (from lfs_dir_splittingcompact)\", state);\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    /* this complicated bit of logic is for fixing up any active\n       metadata-pairs that we may have affected\n       ... */\n    lfs_probe_log(\"ENTER_FIXMLIST: attrcount=%d attrs=%p\", attrcount, (const void*)attrs);\n\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    lfs_probe_log(\"FIXMLIST_PROCESS d=%p id=%d type=%d checking attr[%d] tag=0x%08x\",\n                            (void*)d, (int)d->id, (int)d->type, i, (unsigned)attrs[i].tag);\n\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                        lfs_probe_log(\"  -> matched DELETE on non-DIR: clearing pair for d=%p\", (void*)d);\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                        lfs_probe_log(\"  -> matched DELETE: decremented d->id to %d for d=%p\", d->id, (void*)d);\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                        lfs_probe_log(\"  -> matched CREATE: incremented d->id to %d for d=%p\", d->id, (void*)d);\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                /* we split and id is on tail now */\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                lfs_probe_log(\"FIXMLIST_FETCH returned err=%d for d=%p new id=%d\", err, (void*)d, d->id);\n                if (err) {\n                    lfs_probe_log(\"EARLY_RETURN from lfs_dir_relocatingcommit with err=%d (from lfs_dir_fetch)\", err);\n                    return err;\n                }\n            }\n        }\n    }\n\n    lfs_probe_log(\"EXIT lfs_dir_relocatingcommit: returning state=%d\", state);\n    return state;\n}\n"
}