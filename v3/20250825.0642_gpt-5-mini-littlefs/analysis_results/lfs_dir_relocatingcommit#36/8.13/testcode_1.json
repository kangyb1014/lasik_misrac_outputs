{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts attrs[i].buffer (declared as const void *) to a non-const pointer type: ((lfs_block_t*)attrs[i].buffer). This discards the const qualifier and thus uses a pointer that does not point to a const-qualified type. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. The correct form is to cast to a const-qualified pointer, e.g. ((const lfs_block_t*)attrs[i].buffer)[0] and [1], or assign to a const lfs_block_t *temp = (const lfs_block_t*)attrs[i].buffer before indexing.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function: append logs to /tmp/logs/363.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/363.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    lfs_log_probe(\"ENTER lfs_dir_relocatingcommit: dir=%p pair=[%u,%u] attrcount=%d\\n\",\n            (void*)dir, (unsigned)pair[0], (unsigned)pair[1], attrcount);\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        lfs_log_probe(\"  attr[%d]: tag=0x%08x\\n\", i, (unsigned)attrs[i].tag);\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n            lfs_log_probe(\"    CREATE -> dir->count now %d\\n\", dir->count);\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n            lfs_log_probe(\"    DELETE -> dir->count now %d hasdelete=%d\\n\", dir->count, hasdelete);\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            /* Log information about the buffer that is being cast in the\n             * original code. Use a const-qualified pointer for logging to\n             * avoid introducing new violations in the probe. */\n            const lfs_block_t *cb = (const lfs_block_t *)attrs[i].buffer;\n            lfs_log_probe(\"    TAIL -> attrs[%d].buffer=%p contents=[%u,%u]\\n\",\n                    i, attrs[i].buffer,\n                    (unsigned)cb[0], (unsigned)cb[1]);\n\n            /* Original behavior: cast discards const qualifier. Keep this\n             * assignment to preserve original logic and reproduce the\n             * reported violation scenario (control flow and state change).\n             */\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n\n            lfs_log_probe(\"    AFTER TAIL assign -> dir->tail=[%u,%u] split=%d\\n\",\n                    (unsigned)dir->tail[0], (unsigned)dir->tail[1], (int)dir->split);\n        }\n    }\n\n    lfs_log_probe(\"  After attr loop: dir->count=%d hasdelete=%d\\n\", dir->count, hasdelete);\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        lfs_log_probe(\"  hasdelete && dir->count==0 -> checking parent dir for pair [%u,%u]\\n\",\n                (unsigned)dir->pair[0], (unsigned)dir->pair[1]);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        lfs_log_probe(\"  lfs_fs_pred returned err=%d\\n\", err);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_log_probe(\"  returning err=%d from lfs_fs_pred\\n\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            lfs_log_probe(\"  dropping directory, state=%d -> goto fixmlist\\n\", state);\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        lfs_log_probe(\"  dir->erased == true -> attempting commit\\n\");\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        lfs_log_probe(\"  lfs_dir_traverse returned err=%d\\n\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe(\"  lfs_dir_traverse signaled NOSPC or CORRUPT -> goto compact\\n\");\n                goto compact;\n            }\n            lfs_log_probe(\"  returning err=%d from lfs_dir_traverse\\n\", err);\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            lfs_log_probe(\"  global delta present -> committing gstate attr\\n\");\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            lfs_log_probe(\"  lfs_dir_getgstate returned err=%d\\n\", err);\n            if (err) {\n                lfs_log_probe(\"  returning err=%d from lfs_dir_getgstate\\n\", err);\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            lfs_log_probe(\"  lfs_dir_commitattr returned err=%d\\n\", err);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe(\"  lfs_dir_commitattr signaled NOSPC or CORRUPT -> goto compact\\n\");\n                    goto compact;\n                }\n                lfs_log_probe(\"  returning err=%d from lfs_dir_commitattr\\n\", err);\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        lfs_log_probe(\"  lfs_dir_commitcrc returned err=%d\\n\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe(\"  lfs_dir_commitcrc signaled NOSPC or CORRUPT -> goto compact\\n\");\n                goto compact;\n            }\n            lfs_log_probe(\"  returning err=%d from lfs_dir_commitcrc\\n\", err);\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        lfs_log_probe(\"  commit successful -> dir->off=%u dir->etag=0x%08x\\n\",\n                (unsigned)dir->off, (unsigned)dir->etag);\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_log_probe(\"  compact: falling back to splitting compact\\n\");\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    lfs_log_probe(\"  lfs_dir_splittingcompact returned state=%d\\n\", state);\n    if (state < 0) {\n        lfs_log_probe(\"  returning state=%d from splittingcompact\\n\", state);\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    lfs_log_probe(\"  fixmlist: repairing metadata list for pair=[%u,%u]\\n\",\n            (unsigned)pair[0], (unsigned)pair[1]);\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            lfs_log_probe(\"    mlist entry match: d=%p id=%d type=%d m.pair=[%u,%u]\\n\",\n                    (void*)d, d->id, d->type, (unsigned)d->m.pair[0], (unsigned)d->m.pair[1]);\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        lfs_log_probe(\"      applying DELETE -> clearing m.pair for d (id=%d)\\n\", d->id);\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        lfs_log_probe(\"      applying DELETE shift -> d->id now %d\\n\", d->id);\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                            lfs_log_probe(\"        dir type: pos decremented to %d\\n\", ((lfs_dir_t*)d)->pos);\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        lfs_log_probe(\"      applying CREATE shift -> d->id now %d\\n\", d->id);\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                            lfs_log_probe(\"        dir type: pos incremented to %d\\n\", ((lfs_dir_t*)d)->pos);\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                lfs_log_probe(\"      while: d->id=%d >= d->m.count=%d and split=%d -> fetching tail\\n\",\n                        d->id, d->m.count, d->m.split);\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                    lfs_log_probe(\"        adjusted d->id after tail check -> %d\\n\", d->id);\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                lfs_log_probe(\"        lfs_dir_fetch returned err=%d\\n\", err);\n                if (err) {\n                    lfs_log_probe(\"        returning err=%d from lfs_dir_fetch\\n\", err);\n                    return err;\n                }\n            }\n        }\n    }\n\n    lfs_log_probe(\"EXIT lfs_dir_relocatingcommit: returning state=%d\\n\", state);\n\n    return state;\n}\n"
}