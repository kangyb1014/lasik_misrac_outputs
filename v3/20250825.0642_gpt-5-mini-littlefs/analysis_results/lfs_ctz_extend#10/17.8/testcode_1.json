{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read (called from lfs_ctz_extend), the value parameters 'off' and 'size' are modified in the loop (off += diff; size -= diff;). Modifying value parameters inside the function violates MISRA C 2023 Rule 17.8. Use local copies (e.g. local_off, local_size) before mutating to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_extend code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_extend as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_extend:\n```c\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        if (err) {\n            return err;\n        }\n\n        {\n            err = lfs_bd_erase(lfs, nblock);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    goto relocate;\n                }\n                return err;\n            }\n\n            if (size == 0) {\n                *block = nblock;\n                *off = 0;\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n                    if (err) {\n                        return err;\n                    }\n\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            goto relocate;\n                        }\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n            for (lfs_off_t i = 0; i < skips; i++) {\n                nhead = lfs_tole32(nhead);\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                nhead = lfs_fromle32(nhead);\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        goto relocate;\n                    }\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    nhead = lfs_fromle32(nhead);\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            return 0;\n        }\n\nrelocate:\n        LFS_DEBUG(\"Bad block at 0x%\"PRIx32, nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_extend code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append logs to /tmp/logs/107.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    /* Log entry and input state */\n    lfs_log_probe(\"ENTER lfs_ctz_extend: head=%llu size=%llu block_ptr=%p off_ptr=%p\",\n            (unsigned long long)head,\n            (unsigned long long)size,\n            (void*)block, (void*)off);\n\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        lfs_log_probe(\"lfs_alloc -> err=%d nblock=%llu\", err, (unsigned long long)nblock);\n        if (err) {\n            lfs_log_probe(\"RETURN lfs_ctz_extend (alloc failed): err=%d\", err);\n            return err;\n        }\n\n        {\n            err = lfs_bd_erase(lfs, nblock);\n            lfs_log_probe(\"lfs_bd_erase(nblock=%llu) -> err=%d\", (unsigned long long)nblock, err);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe(\"DETECTED CORRUPT after erase, relocating nblock=%llu\", (unsigned long long)nblock);\n                    goto relocate;\n                }\n                lfs_log_probe(\"RETURN lfs_ctz_extend (erase failed): err=%d\", err);\n                return err;\n            }\n\n            if (size == 0) {\n                *block = nblock;\n                *off = 0;\n                lfs_log_probe(\"size==0: assigned block=%llu off=0, RETURN 0\", (unsigned long long)nblock);\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n\n            lfs_log_probe(\"computed noff=%llu index=%lld (after lfs_ctz_index)\",\n                    (unsigned long long)noff, (long long)index);\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                lfs_log_probe(\"LAST BLOCK INCOMPLETE: noff=%llu block_size=%llu\",\n                        (unsigned long long)noff, (unsigned long long)lfs->cfg->block_size);\n\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    /* Log the parameters we pass to lfs_bd_read so callers can trace how off/size are used */\n                    lfs_log_probe(\"CALL lfs_bd_read: off_to_read=%llu block_head=%llu buf_off=%llu count=1 (i=%lld noff=%llu)\",\n                            (unsigned long long)(noff - i), (unsigned long long)head,\n                            (unsigned long long)i, (long long)i, (unsigned long long)noff);\n\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n\n                    lfs_log_probe(\"RET lfs_bd_read: err=%d data_read=%u (i=%lld)\", err, (unsigned)data, (long long)i);\n                    if (err) {\n                        lfs_log_probe(\"RETURN lfs_ctz_extend (bd_read failed): err=%d\", err);\n                        return err;\n                    }\n\n                    lfs_log_probe(\"CALL lfs_bd_prog (write copied byte): nblock=%llu off=%llu data=%u\",\n                            (unsigned long long)nblock, (unsigned long long)i, (unsigned)data);\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    lfs_log_probe(\"RET lfs_bd_prog: err=%d (i=%lld)\", err, (long long)i);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            lfs_log_probe(\"DETECTED CORRUPT after prog, relocating nblock=%llu\", (unsigned long long)nblock);\n                            goto relocate;\n                        }\n                        lfs_log_probe(\"RETURN lfs_ctz_extend (bd_prog failed): err=%d\", err);\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                lfs_log_probe(\"ASSIGNED final block=%llu off=%llu RETURN 0 (copied last incomplete block)\",\n                        (unsigned long long)nblock, (unsigned long long)noff);\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n            lfs_log_probe(\"APPEND BLOCK PATH: index=%lld skips=%llu nhead_start=%llu\",\n                    (long long)index, (unsigned long long)skips, (unsigned long long)nhead);\n            for (lfs_off_t i = 0; i < skips; i++) {\n                nhead = lfs_tole32(nhead);\n                lfs_log_probe(\"CALL lfs_bd_prog (write nhead): nblock=%llu off=%llu nhead_le=%llu (i=%lld)\",\n                        (unsigned long long)nblock, (unsigned long long)(4*i), (unsigned long long)nhead, (long long)i);\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                nhead = lfs_fromle32(nhead);\n                lfs_log_probe(\"RET lfs_bd_prog (nhead): err=%d nhead_be=%llu (i=%lld)\", err, (unsigned long long)nhead, (long long)i);\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        lfs_log_probe(\"DETECTED CORRUPT after prog (nhead), relocating nblock=%llu\", (unsigned long long)nblock);\n                        goto relocate;\n                    }\n                    lfs_log_probe(\"RETURN lfs_ctz_extend (bd_prog failed in append): err=%d\", err);\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    lfs_log_probe(\"CALL lfs_bd_read (read next nhead): size=%llu block=%llu off=%llu (i=%lld)\",\n                            (unsigned long long)sizeof(nhead), (unsigned long long)nhead, (unsigned long long)(4*i), (long long)i);\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    nhead = lfs_fromle32(nhead);\n                    lfs_log_probe(\"RET lfs_bd_read (nhead): err=%d nhead_be=%llu (i=%lld)\", err, (unsigned long long)nhead, (long long)i);\n                    if (err) {\n                        lfs_log_probe(\"RETURN lfs_ctz_extend (bd_read failed in append): err=%d\", err);\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            lfs_log_probe(\"ASSIGNED appended block=%llu off=%llu RETURN 0\", (unsigned long long)nblock, (unsigned long long)(4*skips));\n            return 0;\n        }\n\nrelocate:\n        lfs_log_probe(\"RELOCATE label reached for nblock=%llu \u2014 trying next block\", (unsigned long long)nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n"
}