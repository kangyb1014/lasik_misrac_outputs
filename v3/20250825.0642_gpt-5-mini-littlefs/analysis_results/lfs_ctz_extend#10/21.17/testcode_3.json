{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf pcache->size == lfs->cfg->cache_size and lfs->cfg->prog_size does not evenly divide lfs->cfg->cache_size, then diff = lfs_alignup(pcache->size, lfs->cfg->prog_size) will be greater than the actual size of pcache->buffer. The call lfs_bd_cmp(..., pcache->buffer, diff) will therefore pass a length (diff) larger than the buffer capacity (cache_size) to the underlying comparison routine (which typically uses memcmp/memcpy), causing accesses beyond the bounds of pcache->buffer and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_extend code that contains useful probe functions that print useful logs to a file \"/tmp/logs/109.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_extend as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_extend:\n```c\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        if (err) {\n            return err;\n        }\n\n        {\n            err = lfs_bd_erase(lfs, nblock);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    goto relocate;\n                }\n                return err;\n            }\n\n            if (size == 0) {\n                *block = nblock;\n                *off = 0;\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n                    if (err) {\n                        return err;\n                    }\n\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            goto relocate;\n                        }\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n            for (lfs_off_t i = 0; i < skips; i++) {\n                nhead = lfs_tole32(nhead);\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                nhead = lfs_fromle32(nhead);\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        goto relocate;\n                    }\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    nhead = lfs_fromle32(nhead);\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            return 0;\n        }\n\nrelocate:\n        LFS_DEBUG(\"Bad block at 0x%\"PRIx32, nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_extend code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/109.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    lfs_log_probe(\"ENTER lfs_ctz_extend: head=0x%\" PRIx32 \", size=%\" PRIu32, head, size);\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        lfs_log_probe(\"lfs_alloc -> err=%d, nblock=0x%\" PRIx32, err, nblock);\n        if (err) {\n            lfs_log_probe(\"EXIT lfs_ctz_extend: alloc error %d\", err);\n            return err;\n        }\n\n        {\n            lfs_log_probe(\"About to erase nblock=0x%\" PRIx32, nblock);\n            err = lfs_bd_erase(lfs, nblock);\n            lfs_log_probe(\"lfs_bd_erase -> err=%d for nblock=0x%\" PRIx32, err, nblock);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe(\"Erase returned LFS_ERR_CORRUPT, relocating block 0x%\" PRIx32, nblock);\n                    goto relocate;\n                }\n                lfs_log_probe(\"EXIT lfs_ctz_extend: erase error %d\", err);\n                return err;\n            }\n\n            if (size == 0) {\n                lfs_log_probe(\"size==0: assign block=0x%\" PRIx32 \" off=0\", nblock);\n                *block = nblock;\n                *off = 0;\n                lfs_log_probe(\"EXIT lfs_ctz_extend: success (size==0)\");\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n\n            lfs_log_probe(\"Computed noff=%\" PRIu32 \" index=%\" PRId32, noff, index);\n\n            /* Probe: log cache and prog sizes and compute the aligned diff that\n               can lead to an overflow in downstream comparisons if larger than\n               pcache buffer. This mirrors the scenario described by the other\n               agent. This computation is purely observational and does not\n               change control flow. */\n            if (pcache) {\n                lfs_size_t pcache_size = pcache->size;\n                lfs_size_t prog_size = (lfs->cfg && lfs->cfg->prog_size) ? lfs->cfg->prog_size : 0;\n                lfs_size_t diff = 0;\n                if (prog_size > 0) {\n                    diff = ((pcache_size + prog_size - 1) / prog_size) * prog_size;\n                }\n                lfs_log_probe(\"Probe pcache->size=%\" PRIu32 \", cfg.cache_size=%\" PRIu32 \", cfg.prog_size=%\" PRIu32 \", computed_diff=%\" PRIu32,\n                        pcache_size,\n                        (lfs->cfg ? lfs->cfg->cache_size : 0),\n                        prog_size,\n                        diff);\n            } else {\n                lfs_log_probe(\"pcache is NULL in probe\");\n            }\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                lfs_log_probe(\"Last block incomplete: noff=%\" PRIu32 \" block_size=%\" PRIu32, noff, lfs->cfg->block_size);\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    lfs_log_probe(\"Reading: head=0x%\" PRIx32 \" src_off=%\" PRIu32 \" len=1\", head, i);\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n                    lfs_log_probe(\"lfs_bd_read -> err=%d (i=%\" PRId32 \") data=0x%02x\", err, i, (unsigned)data);\n                    if (err) {\n                        lfs_log_probe(\"EXIT lfs_ctz_extend: read error %d\", err);\n                        return err;\n                    }\n\n                    lfs_log_probe(\"Programming: nblock=0x%\" PRIx32 \" dst_off=%\" PRIu32 \" len=1 data=0x%02x\", nblock, i, (unsigned)data);\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    lfs_log_probe(\"lfs_bd_prog -> err=%d (i=%\" PRId32 \")\", err, i);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            lfs_log_probe(\"Prog returned LFS_ERR_CORRUPT, relocating block 0x%\" PRIx32, nblock);\n                            goto relocate;\n                        }\n                        lfs_log_probe(\"EXIT lfs_ctz_extend: prog error %d\", err);\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                lfs_log_probe(\"EXIT lfs_ctz_extend: success (copied last partial block) block=0x%\" PRIx32 \" off=%\" PRIu32, nblock, noff);\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n            lfs_log_probe(\"Appending block: index=%\" PRId32 \" skips=%\" PRIu32 \" head=0x%\" PRIx32, index, skips, head);\n            for (lfs_off_t i = 0; i < skips; i++) {\n                nhead = lfs_tole32(nhead);\n                lfs_log_probe(\"Prog header: nblock=0x%\" PRIx32 \" off=%\" PRIu32 \" nhead=0x%\" PRIx32, nblock, 4*i, nhead);\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                nhead = lfs_fromle32(nhead);\n                lfs_log_probe(\"lfs_bd_prog(header) -> err=%d (i=%\" PRId32 \")\", err, i);\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        lfs_log_probe(\"Prog header returned LFS_ERR_CORRUPT, relocating block 0x%\" PRIx32, nblock);\n                        goto relocate;\n                    }\n                    lfs_log_probe(\"EXIT lfs_ctz_extend: prog header error %d\", err);\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    lfs_log_probe(\"Reading next header from nhead=0x%\" PRIx32 \" at off=%\" PRIu32, nhead, 4*i);\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    nhead = lfs_fromle32(nhead);\n                    lfs_log_probe(\"lfs_bd_read(header) -> err=%d next_nhead=0x%\" PRIx32, err, nhead);\n                    if (err) {\n                        lfs_log_probe(\"EXIT lfs_ctz_extend: read header error %d\", err);\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            lfs_log_probe(\"EXIT lfs_ctz_extend: success (appended) block=0x%\" PRIx32 \" off=%\" PRIu32, nblock, (lfs_size_t)(4*skips));\n            return 0;\n        }\n\nrelocate:\n        LFS_DEBUG(\"Bad block at 0x%\" PRIx32, nblock);\n        lfs_log_probe(\"Relocate: bad block 0x%\" PRIx32 \" - dropping pcache and retrying\", nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n"
}