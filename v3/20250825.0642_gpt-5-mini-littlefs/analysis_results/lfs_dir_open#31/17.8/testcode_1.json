{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_dir_find(lfs, &dir->m, &path, NULL) passes the address of the parameter 'path' (a const char *). This allows lfs_dir_find to assign through that pointer (e.g. advance the path pointer while parsing). If lfs_dir_find updates *pathp (which is typical for path-parsing helpers), it modifies the function parameter 'path' of lfs_dir_open_, violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/317.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a log line to /tmp/logs/317.txt\n * Logs the stage, pointers and the string value of path, plus err if known.\n * We intentionally take the address of the local parameter 'path' and log it\n * so that consumers can see whether that address was passed to other\n * functions (e.g. by taking &path) and whether the value of 'path' changed\n * across the call to lfs_dir_open_.\n */\nstatic void lfs_dir_open_probe(const char *stage, lfs_t *lfs, lfs_dir_t *dir, const char *path, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/317.txt\", \"a\");\n    if (f) {\n        /* param_addr is the address of the parameter variable 'path' inside this function.\n         * path_value is the pointer value held by 'path'.\n         */\n        fprintf(f, \"%s: lfs=%p dir=%p param_addr=%p path_value=%p path=\\\"%s\\\" err=%d\\n\",\n            stage,\n            (void*)lfs,\n            (void*)dir,\n            (void*)&path,\n            (void*)path,\n            (path ? path : \"(null)\"),\n            err);\n        fclose(f);\n    }\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    /* Log entry state before calling the underscore variant.  We set err to -1\n     * to indicate this is the pre-call snapshot.\n     */\n    lfs_dir_open_probe(\"BEFORE_lfs_dir_open_\", lfs, dir, path, -1);\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Log exit state after calling the underscore variant.  The log will show\n     * whether the local parameter 'path' changed value (which would indicate\n     * that lfs_dir_open_ modified the caller's parameter via its address).\n     */\n    lfs_dir_open_probe(\"AFTER_lfs_dir_open_\", lfs, dir, path, err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}