{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a NULL path (or a non-null-terminated buffer) to lfs_dir_open, lfs_dir_find sets name = *path without validating it and immediately calls strcspn(name, \"/\"). If name is NULL this dereferences a null pointer; if name is not terminated within accessible memory, strcspn will scan past the object bounds. Both cases can lead to accesses beyond the bounds of the object referenced by the pointer parameter to strcspn.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe helper: safely log pointer state without dereferencing 'path'.\n   Writes append-only logs to /tmp/logs/319.txt. Does not change program logic.\n*/\nstatic void lfs_dir_open_probe(const char *stage, lfs_t *lfs, lfs_dir_t *dir, const char *path, int err) {\n    FILE *f = NULL;\n    /* Ensure directory exists (best-effort). If mkdir fails, proceed to fopen; fopen may still succeed if dir exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/319.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log the stage, pointer values and minimal state information without dereferencing path. */\n    fprintf(f, \"[lfs_dir_open] stage=%s lfs=%p dir=%p path_ptr=%p path_is_null=%s err=%d\\n\",\n            stage, (void*)lfs, (void*)dir, (void*)path, (path == NULL) ? \"YES\" : \"NO\", err);\n\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log after attempting the lock so we capture whether lock failed. */\n    lfs_dir_open_probe(\"after_lock\", lfs, dir, path, err);\n\n    if (err) {\n        return err;\n    }\n\n    /* Log right before the original trace that prints the path (which could dereference it). */\n    lfs_dir_open_probe(\"before_LFS_TRACE\", lfs, dir, path, 0);\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    /* Log right before delegating to the underlying implementation. */\n    lfs_dir_open_probe(\"before_lfs_dir_open_\", lfs, dir, path, 0);\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Log the result from the inner call to help correlate any subsequent crash with the input state. */\n    lfs_dir_open_probe(\"after_lfs_dir_open_\", lfs, dir, path, err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}