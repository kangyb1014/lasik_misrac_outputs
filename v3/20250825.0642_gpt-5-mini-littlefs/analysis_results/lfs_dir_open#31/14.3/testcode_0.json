{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0), so in the code 'int err = LFS_LOCK(lfs->cfg);' err is initialized to the invariant value 0. The subsequent controlling expression 'if (err)' is therefore always false (invariant), which violates MISRA C 2023 Rule 14.3 (no permitted exception applies).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/315.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Minimal type definitions to allow this file to compile standalone. */\ntypedef struct lfs_s lfs_t;\ntypedef struct lfs_dir_s lfs_dir_t;\n\nstruct lfs_s { void *cfg; void *mlist; };\nstruct lfs_dir_s { int _dummy; };\n\n/* Provide function-like replacements for the project's macros so this test\n   file is compilable and preserves the original runtime semantics used in\n   the violation scenario: LFS_LOCK returns the invariant 0. */\nstatic inline int LFS_LOCK(void *cfg) { (void)cfg; return 0; }\nstatic inline void LFS_UNLOCK(void *cfg) { (void)cfg; }\nstatic inline void LFS_ASSERT(int expr) { (void)expr; }\n\n/* Keep a simple trace function that writes to stderr (like original trace). */\nstatic inline void LFS_TRACE(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(stderr, fmt, ap);\n    fprintf(stderr, \"\\n\");\n    va_end(ap);\n}\n\n/* Probe logger: append a line describing the control path and key state to\n   the required file so other agents can reproduce the scenario and see\n   that the lock macro yields an invariant value (0). */\nstatic void probe_log(const char *stage, const lfs_t *lfs, const lfs_dir_t *dir, const char *path, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/315.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: lfs=%p dir=%p path=\\\"%s\\\" err=%d\\n\",\n            stage, (const void*)lfs, (const void*)dir, (path ? path : \"(null)\"), err);\n    fflush(f);\n    fclose(f);\n}\n\n/* Minimal stubs for functions referenced by lfs_dir_open. These stubs\n   preserve control flow but keep behavior simple so logs are reproducible. */\nstatic int lfs_mlist_isopen(void *mlist, void *ml)\n{\n    (void)mlist; (void)ml; /* Always report not open. */\n    return 0;\n}\n\nstatic int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path)\n{\n    /* Log entry into the underlying open implementation for completeness. */\n    probe_log(\"lfs_dir_open_ entry\", lfs, dir, path, 0);\n    /* Simulate success. */\n    return 0;\n}\n\n/* Modified lfs_dir_open with inserted probes that do not change logic. */\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after acquiring (or attempting to acquire) the lock.\n       This will capture the invariant return value produced by LFS_LOCK. */\n    probe_log(\"after_LFS_LOCK\", lfs, dir, path, err);\n\n    /* Probe right before the controlling expression to capture the exact state\n       seen by the if statement. */\n    probe_log(\"before_if_check\", lfs, dir, path, err);\n\n    if (err) {\n        /* Log that the function is returning early due to a nonzero err. */\n        probe_log(\"early_return_due_to_err\", lfs, dir, path, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (void*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Log the result of the internal open so callers can correlate the\n       unlocking action and final return value. */\n    probe_log(\"after_lfs_dir_open_\", lfs, dir, path, err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"after_LFS_UNLOCK\", lfs, dir, path, err);\n    return err;\n}\n"
}