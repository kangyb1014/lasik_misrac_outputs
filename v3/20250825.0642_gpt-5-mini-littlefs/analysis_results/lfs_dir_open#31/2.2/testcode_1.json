{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg). In lfs_dir_open the call LFS_UNLOCK(lfs->cfg) is executed but performs no action (and the expression lfs->cfg has no side-effects). Removing that call would not change program behaviour in this build, so it constitutes dead code under MISRA C 2023 Rule 2.2. (Note: if the macro is conditionally defined in other builds to perform a real unlock or if cfg has side-effects, then it would not be dead in those builds.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/312.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe logging helper. Appends textual logs to /tmp/logs/312.txt.\n * Keeps a minimal footprint and does not alter program logic.\n */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/312.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* simple timestamp */\n    time_t t = time(NULL);\n    struct tm tmv;\n#if defined(_MSC_VER)\n    localtime_s(&tmv, &t);\n#else\n    localtime_r(&t, &tmv);\n#endif\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv) == 0) {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s: \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified lfs_dir_open with probes. Original logic preserved.\n * The probes record entry, relevant state (including lfs->cfg pointer),\n * result from lfs_dir_open_, and the state before/after LFS_UNLOCK.\n */\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    /* Log entry and initial cfg pointer (if lfs is non-NULL) */\n    lfs_probe_log(\"ENTER lfs_dir_open: lfs=%p, dir=%p, path=\\\"%s\\\", cfg=%p\",\n                  (void*)lfs, (void*)dir, path ? path : \"(null)\",\n                  (void*)(lfs ? lfs->cfg : (void*)0));\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"After LFS_LOCK: err=%d, cfg=%p\", err, (void*)(lfs ? lfs->cfg : (void*)0));\n\n    if (err) {\n        lfs_probe_log(\"Early return from lfs_dir_open due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n    lfs_probe_log(\"After lfs_dir_open_: err=%d, cfg(before unlock)=%p\", err, (void*)(lfs ? lfs->cfg : (void*)0));\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n\n    /* Probe state immediately before the unlock call */\n    lfs_probe_log(\"Before LFS_UNLOCK call: cfg=%p\", (void*)(lfs ? lfs->cfg : (void*)0));\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe state immediately after the unlock call to capture if anything changed.\n     * In builds where LFS_UNLOCK is a no-op (e.g. defined as ((void)cfg)), the\n     * cfg pointer and observable state here will be identical to before. This\n     * helps demonstrate the dead-call scenario under MISRA Rule 2.2.\n     */\n    lfs_probe_log(\"After LFS_UNLOCK call: cfg=%p\", (void*)(lfs ? lfs->cfg : (void*)0));\n\n    lfs_probe_log(\"EXIT lfs_dir_open: returning %d\", err);\n    return err;\n}\n"
}