{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0). When used in lfs_dir_open: int err = LFS_LOCK(lfs->cfg); this evaluates (void)cfg (no side-effect) and yields the constant 0. The executed (void)cfg has no effect on program behaviour and the assignment always produces 0, so removing the LFS_LOCK invocation (or replacing it with 0) would not change behaviour. Therefore the executed operation is dead code in this configuration (no-op lock), violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/312.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helper: append control-flow/state information to /tmp/logs/312.txt */\nstatic void lfs_probe(const char *event, lfs_t *lfs, lfs_dir_t *dir, const char *path, int err) {\n    FILE *f = fopen(\"/tmp/logs/312.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Protect access to lfs->cfg in case lfs is NULL */\n    void *cfg_ptr = NULL;\n    if (lfs != NULL) {\n        /* Attempt to print cfg pointer if present; many lfs implementations have a cfg pointer */\n        /* Use a cast to (void*) for printing; if cfg is not a pointer this will still compile only if its type is pointer-compatible in the project. */\n        cfg_ptr = (void*)lfs->cfg;\n    }\n    fprintf(f, \"%ld EVENT=%s lfs=%p dir=%p path=\\\"%s\\\" err=%d cfg=%p\\n\",\n            (long)time(NULL), event, (void*)lfs, (void*)dir, (path != NULL) ? path : \"(null)\", err, cfg_ptr);\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    /* Log entering the function and state before attempting lock */\n    lfs_probe(\"enter\", lfs, dir, path, -1);\n    lfs_probe(\"pre_lock\", lfs, dir, path, -1);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock attempt and relevant state. This captures the scenario where\n       LFS_LOCK expands to a no-op that yields 0: the log will show err==0 despite the\n       lock having no side-effect. */\n    lfs_probe(\"post_lock\", lfs, dir, path, err);\n\n    if (err) {\n        lfs_probe(\"return_on_lock_err\", lfs, dir, path, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n\n    /* Log about to unlock and the final error value */\n    lfs_probe(\"pre_unlock\", lfs, dir, path, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe(\"exit\", lfs, dir, path, err);\n    return err;\n}\n"
}