{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a compound literal &(lfs_off_t){0} for the out parameter off. lfs_ctz_find writes to *off (e.g. \"*off = 0\" when size==0 and later \"*off = pos\"), but that write only updates the temporary compound literal whose value is never used by the caller. Those store operations are executed but have no observable effect on program behaviour at this callsite, so they constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/672.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper. Appends messages to /tmp/logs/672.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/672.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    lfs_probe_log(\"ENTER lfs_file_truncate_: lfs=%p, file=%p, requested_size=%lld, file->pos=%lld\",\n            (void*)lfs, (void*)file, (long long)size, (long long)file->pos);\n\n    if (size > LFS_FILE_MAX) {\n        lfs_probe_log(\"ERROR: requested size %lld > LFS_FILE_MAX\", (long long)size);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    lfs_probe_log(\"current oldsize=%lld, pos=%lld\", (long long)oldsize, (long long)pos);\n\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            lfs_probe_log(\"branch: revert to inline (size=%lld <= inline_max=%lld)\",\n                    (long long)size, (long long)lfs->inline_max);\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                lfs_probe_log(\"seek to head failed: res=%lld\", (long long)res);\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                lfs_probe_log(\"flushedread failed: res=%lld\", (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            lfs_probe_log(\"branch: shrink non-inline (size=%lld > inline_max=%lld)\",\n                    (long long)size, (long long)lfs->inline_max);\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            lfs_probe_log(\"after lfs_file_flush: err=%d\", err);\n            if (err) {\n                lfs_probe_log(\"flush failed, returning err=%d\", err);\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            /*\n             * NOTE (probe): The original code passed the address of a compound\n             * literal: &(lfs_off_t){0}. That means lfs_ctz_find may write to\n             * that location but the caller did not use the written value. To\n             * capture evidence of that write we allocate a local temporary and\n             * pass its address here, then log its value after the call. This\n             * preserves program logic while producing a trace showing the\n             * out-parameter write.\n             */\n            lfs_off_t probe_tmp = 0;\n            lfs_off_t *probe_ptr = &probe_tmp; // used in place of &(lfs_off_t){0}\n\n            lfs_probe_log(\"calling lfs_ctz_find: file->cache=%p, ctz.head=%lld, ctz.size=%lld, size-1=%lld, probe_ptr=%p, initial_probe_value=%lld\",\n                    (void*)&file->cache, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)(size-1),\n                    (void*)probe_ptr, (long long)probe_tmp);\n\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, probe_ptr);\n\n            lfs_probe_log(\"lfs_ctz_find returned err=%d, probe_value_after=%lld, file->block=%lld\",\n                    err, (long long)probe_tmp, (long long)file->block);\n\n            if (err) {\n                lfs_probe_log(\"lfs_ctz_find error, returning err=%d\", err);\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            lfs_probe_log(\"after shrink: file->pos=%lld, file->ctz.head=%lld, file->ctz.size=%lld, flags=0x%x\",\n                    (long long)file->pos, (long long)file->ctz.head,\n                    (long long)file->ctz.size, file->flags);\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_probe_log(\"branch: extend file from oldsize=%lld to size=%lld\",\n                (long long)oldsize, (long long)size);\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            lfs_probe_log(\"seek to end failed: res=%lld\", (long long)res);\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                lfs_probe_log(\"write zero failed: res=%lld\", (long long)res);\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    lfs_probe_log(\"restoring pos to %lld, seek res=%lld\", (long long)pos, (long long)res);\n    if (res < 0) {\n      lfs_probe_log(\"final seek failed: res=%lld\", (long long)res);\n      return (int)res;\n    }\n\n    lfs_probe_log(\"EXIT lfs_file_truncate_: success\");\n    return 0;\n}\n"
}