{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code takes the address of a non-const compound literal &(uint8_t){0} and passes it to lfs_file_write_, which accepts a const void *buffer. The pointer therefore points to a non-const uint8_t object even though it could and should be const-qualified (e.g. (const uint8_t){0}). This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n\n/* Probe helpers: write logs to /tmp/logs/673.txt capturing control flow and\n   state relevant to the compound-literal pointer usage. These helpers are\n   designed to be lightweight and not change the logic of\n   lfs_file_truncate_. */\nstatic void lfs_probe_logf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void lfs_probe_log_state(const char *when,\n        void *lfs_ptr, void *file_ptr,\n        long long pos, long long oldsize, long long size) {\n    lfs_probe_logf(\"[lfs_file_truncate_] %s: lfs=%p, file=%p, pos=%lld, oldsize=%lld, size=%lld\",\n            when, lfs_ptr, file_ptr, pos, oldsize, size);\n}\n\n/* Original function, instrumented with probe calls. */\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    /* Log entry with initial parameters */\n    lfs_probe_log_state(\"entry\", (void *)lfs, (void *)file,\n            (long long)file->pos, (long long)lfs_file_size_(lfs, file), (long long)size);\n\n    if (size > LFS_FILE_MAX) {\n        lfs_probe_logf(\"[lfs_file_truncate_] size > LFS_FILE_MAX: size=%lld\", (long long)size);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    lfs_probe_log_state(\"after_compute_oldsize\", (void *)lfs, (void *)file,\n            (long long)pos, (long long)oldsize, (long long)size);\n\n    if (size < oldsize) {\n        /* revert to inline file? */\n        if (size <= lfs->inline_max) {\n            /* flush+seek to head */\n            lfs_probe_logf(\"[lfs_file_truncate_] branch: revert to inline (size <= inline_max). size=%lld, inline_max=%lld\",\n                    (long long)size, (long long)lfs->inline_max);\n\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                lfs_probe_logf(\"[lfs_file_truncate_] seek to head failed: res=%lld\", (long long)res);\n                return (int)res;\n            }\n\n            /* read our data into rcache temporarily */\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                lfs_probe_logf(\"[lfs_file_truncate_] flushedread failed: res=%lld\", (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            /* need to flush since directly changing metadata */\n            lfs_probe_logf(\"[lfs_file_truncate_] branch: shrink but keep external blocks (size > inline_max). size=%lld, inline_max=%lld\",\n                    (long long)size, (long long)lfs->inline_max);\n\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                lfs_probe_logf(\"[lfs_file_truncate_] flush failed: err=%d\", err);\n                return err;\n            }\n\n            /* lookup new head in ctz skip list */\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                lfs_probe_logf(\"[lfs_file_truncate_] ctz_find failed: err=%d\", err);\n                return err;\n            }\n\n            /* need to set pos/block/off consistently so seeking back to\n               the old position does not get confused */\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        /* flush+seek if not already at end */\n        lfs_probe_logf(\"[lfs_file_truncate_] branch: extend file. oldsize=%lld -> size=%lld\",\n                (long long)oldsize, (long long)size);\n\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            lfs_probe_logf(\"[lfs_file_truncate_] seek to end failed: res=%lld\", (long long)res);\n            return (int)res;\n        }\n\n        /* fill with zeros */\n        while (file->pos < size) {\n            /* Probe: capture the compound-literal pointer expression used by\n               the original code and log its address and pointed value. This\n               reproduces the scenario where &(uint8_t){0} produces a pointer\n               to a non-const uint8_t object. We do not change the logic; we\n               only bind the expression to probe_ptr for logging. */\n            const void *probe_ptr = &(uint8_t){0};\n            uintptr_t addr = (uintptr_t)probe_ptr;\n            uint8_t val = *(const uint8_t *)probe_ptr;\n            lfs_probe_logf(\"[lfs_file_truncate_] write_zero: file->pos=%lld, target_addr=0x%016\" PRIxPTR \", value=%u\",\n                    (long long)file->pos, (uintptr_t)addr, (unsigned)val);\n\n            res = lfs_file_write_(lfs, file, probe_ptr, 1);\n            if (res < 0) {\n                lfs_probe_logf(\"[lfs_file_truncate_] write_zero failed: res=%lld\", (long long)res);\n                return (int)res;\n            }\n        }\n    }\n\n    /* restore pos */\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      lfs_probe_logf(\"[lfs_file_truncate_] restore pos failed: res=%lld\", (long long)res);\n      return (int)res;\n    }\n\n    lfs_probe_log_state(\"exit_success\", (void *)lfs, (void *)file,\n            (long long)pos, (long long)oldsize, (long long)size);\n\n    return 0;\n}\n"
}