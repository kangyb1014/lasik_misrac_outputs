{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a compound literal &(lfs_off_t){size-1} to lfs_ctz_index whose second parameter is (in the codebase) a non-const lfs_off_t*. The function only reads the value (all callers use it as an input), so the parameter should be declared as const lfs_off_t * to indicate read-only access. Because the pointer parameter is not const-qualified when it could be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger that appends messages to /tmp/logs/673.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    lfs_probe_log(\"ENTER lfs_file_truncate_: lfs=%p file=%p size=%lld file->pos=%lld file->flags=0x%X\",\n            (void*)lfs, (void*)file, (long long)size, (long long)file->pos, (unsigned)file->flags);\n\n    if (size > LFS_FILE_MAX) {\n        lfs_probe_log(\"lfs_file_truncate_: size > LFS_FILE_MAX -> return LFS_ERR_INVAL\");\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    lfs_probe_log(\"lfs_file_truncate_: computed oldsize=%lld\", (long long)oldsize);\n\n    if (size < oldsize) {\n        lfs_probe_log(\"lfs_file_truncate_: branch size < oldsize (size=%lld oldsize=%lld)\", (long long)size, (long long)oldsize);\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            lfs_probe_log(\"lfs_file_truncate_: inline revert path (size=%lld inline_max=%lld)\", (long long)size, (long long)lfs->inline_max);\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                lfs_probe_log(\"lfs_file_truncate_: seek to head failed res=%lld\", (long long)res);\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                lfs_probe_log(\"lfs_file_truncate_: flushedread failed res=%lld\", (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            lfs_probe_log(\"lfs_file_truncate_: inline revert done: ctz.head=%p ctz.size=%lld flags=0x%X\",\n                    (void*)(uintptr_t)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n\n        } else {\n            lfs_probe_log(\"lfs_file_truncate_: non-inline truncate path (size=%lld inline_max=%lld)\", (long long)size, (long long)lfs->inline_max);\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                lfs_probe_log(\"lfs_file_truncate_: flush failed err=%d\", err);\n                return err;\n            }\n\n            /*\n             * Prepare a compound literal pointer for the \"out\" parameter\n             * exactly as the original code invoked with &(lfs_off_t){0}.\n             * We log its address and value to capture the fact that a\n             * non-const lfs_off_t* is being passed (the potential MISRA\n             * Rule 8.13 violation).\n             */\n            lfs_off_t *compound_zero = &(lfs_off_t){0};\n            lfs_probe_log(\"lfs_file_truncate_: before lfs_ctz_find: ctz.head=%p ctz.size=%lld size-1=%lld compound_zero_addr=%p compound_zero_val=%lld\",\n                    (void*)(uintptr_t)file->ctz.head, (long long)file->ctz.size, (long long)(size-1), (void*)compound_zero, (long long)*compound_zero);\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, compound_zero);\n\n            lfs_probe_log(\"lfs_file_truncate_: lfs_ctz_find returned err=%d, new block=%p\", err, (void*)(uintptr_t)file->block);\n\n            if (err) {\n                lfs_probe_log(\"lfs_file_truncate_: lfs_ctz_find error -> return %d\", err);\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            lfs_probe_log(\"lfs_file_truncate_: after non-inline adjust: pos=%lld ctz.head=%p ctz.size=%lld flags=0x%X\",\n                    (long long)file->pos, (void*)(uintptr_t)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n        }\n    } else if (size > oldsize) {\n        lfs_probe_log(\"lfs_file_truncate_: branch size > oldsize (size=%lld oldsize=%lld)\", (long long)size, (long long)oldsize);\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            lfs_probe_log(\"lfs_file_truncate_: seek to end failed res=%lld\", (long long)res);\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                lfs_probe_log(\"lfs_file_truncate_: write failed res=%lld\", (long long)res);\n                return (int)res;\n            }\n        }\n        lfs_probe_log(\"lfs_file_truncate_: zero-fill complete, pos=%lld\", (long long)file->pos);\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      lfs_probe_log(\"lfs_file_truncate_: restore pos failed res=%lld\", (long long)res);\n      return (int)res;\n    }\n\n    lfs_probe_log(\"EXIT lfs_file_truncate_: success (restored pos=%lld)\", (long long)pos);\n    return 0;\n}\n"
}