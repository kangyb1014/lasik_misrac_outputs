{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a compound literal: lfs_ctz_index(lfs, &(lfs_off_t){file->pos}). The second parameter is a pointer to lfs_off_t (non-const). Since lfs_ctz_index appears to only read the value (it is used to compute an index) the parameter should be declared as const lfs_off_t *; having a non-const pointer parameter when no modification is required violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper used only for debugging the violation scenario.\n   Appends human-readable logs to /tmp/logs/673.txt. */\nstatic void lfs_trunc_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    lfs_trunc_log(\"ENTER lfs_file_truncate_: file=%p, file->pos=%lld, size=%lld, flags=0x%02x\",\n            (void *)file, (long long)file->pos, (long long)size, (unsigned)file->flags);\n\n    if (size > LFS_FILE_MAX) {\n        lfs_trunc_log(\"EXIT lfs_file_truncate_: size > LFS_FILE_MAX (%lld > %lld)\",\n                (long long)size, (long long)LFS_FILE_MAX);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    lfs_trunc_log(\"current oldsize=%lld, pos=%lld\", (long long)oldsize, (long long)pos);\n\n    if (size < oldsize) {\n        lfs_trunc_log(\"TRUNCATE DOWN: new size %lld < oldsize %lld\", (long long)size, (long long)oldsize);\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            lfs_trunc_log(\"TARGET INLINE: size <= inline_max (%lld <= %lld)\", (long long)size, (long long)lfs->inline_max);\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            lfs_trunc_log(\"lfs_file_seek_ -> %lld\", (long long)res);\n            if (res < 0) {\n                lfs_trunc_log(\"EXIT lfs_file_truncate_: seek error %lld\", (long long)res);\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            lfs_trunc_log(\"lfs_file_flushedread -> %lld (read size %lld)\", (long long)res, (long long)size);\n            if (res < 0) {\n                lfs_trunc_log(\"EXIT lfs_file_truncate_: flushedread error %lld\", (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            lfs_trunc_log(\"Converted to inline: head=%lld size=%lld flags=0x%02x\",\n                    (long long)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n\n        } else {\n            lfs_trunc_log(\"TRUNCATE WITHOUT INLINE: will lookup new head in ctz skip list\");\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            lfs_trunc_log(\"lfs_file_flush -> %d\", err);\n            if (err) {\n                lfs_trunc_log(\"EXIT lfs_file_truncate_: flush error %d\", err);\n                return err;\n            }\n\n            /*\n             * Prepare a temporary lfs_off_t to pass to lfs_ctz_find. The original\n             * code used a compound literal: &(lfs_off_t){0}. To capture evidence\n             * for the violation scenario, we log the address and value of this\n             * temporary both before and after the call to determine if the\n             * callee modifies it.\n             */\n            lfs_off_t tmp_ctz = 0;\n            lfs_trunc_log(\"BEFORE lfs_ctz_find: tmp_ctz addr=%p value=%lld ctz.head=%lld ctz.size=%lld size-1=%lld\",\n                    (void *)&tmp_ctz, (long long)tmp_ctz,\n                    (long long)file->ctz.head, (long long)file->ctz.size, (long long)(size - 1));\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &tmp_ctz);\n\n            lfs_trunc_log(\"AFTER lfs_ctz_find: err=%d tmp_ctz=%lld file->block=%lld\",\n                    err, (long long)tmp_ctz, (long long)file->block);\n\n            if (err) {\n                lfs_trunc_log(\"EXIT lfs_file_truncate_: lfs_ctz_find error %d\", err);\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            lfs_trunc_log(\"Updated file metadata after truncate down: pos=%lld ctz.head=%lld ctz.size=%lld flags=0x%02x\",\n                    (long long)file->pos, (long long)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n        }\n    } else if (size > oldsize) {\n        lfs_trunc_log(\"TRUNCATE UP: new size %lld > oldsize %lld\", (long long)size, (long long)oldsize);\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        lfs_trunc_log(\"lfs_file_seek_ (END) -> %lld\", (long long)res);\n        if (res < 0) {\n            lfs_trunc_log(\"EXIT lfs_file_truncate_: seek end error %lld\", (long long)res);\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            lfs_trunc_log(\"lfs_file_write_ -> %lld (pos now %lld)\", (long long)res, (long long)file->pos);\n            if (res < 0) {\n                lfs_trunc_log(\"EXIT lfs_file_truncate_: write error %lld\", (long long)res);\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    lfs_trunc_log(\"RESTORE POS: seek to %lld -> %lld\", (long long)pos, (long long)res);\n    if (res < 0) {\n      lfs_trunc_log(\"EXIT lfs_file_truncate_: restore seek error %lld\", (long long)res);\n      return (int)res;\n    }\n\n    lfs_trunc_log(\"EXIT lfs_file_truncate_: success\");\n    return 0;\n}\n"
}