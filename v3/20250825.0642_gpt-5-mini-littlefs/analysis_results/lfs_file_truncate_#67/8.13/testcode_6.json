{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes the address of a non-const compound literal &(uint8_t){0} to a write function that takes a const void * parameter. The pointer therefore points to a non-const-qualified type even though it could (and should) point to a const-qualified object (e.g. &(const uint8_t){0} or a const uint8_t variable).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper to capture control flow and state. Writes to /tmp/logs/673.txt */\nstatic void lfs_truncate_log_probe(const char *msg, void *lfs_ptr, void *file_ptr,\n        long long size, long long oldsize, long long pos, long long extra) {\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fprintf(f, \"  lfs=%p file=%p size=%lld oldsize=%lld pos=%lld extra=%lld\\n\",\n            lfs_ptr, file_ptr, size, oldsize, pos, extra);\n    fflush(f);\n    fclose(f);\n}\n\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Log entry and initial state */\n    lfs_truncate_log_probe(\"ENTER lfs_file_truncate_\", (void *)lfs, (void *)file,\n            (long long)size, (long long)0, (long long)(file ? file->pos : 0), 0);\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        lfs_truncate_log_probe(\"ERROR: size > LFS_FILE_MAX\", (void *)lfs, (void *)file,\n                (long long)size, (long long)0, (long long)file->pos, LFS_ERR_INVAL);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n\n    /* Log computed old size and requested size */\n    lfs_truncate_log_probe(\"Computed sizes\", (void *)lfs, (void *)file,\n            (long long)size, (long long)oldsize, (long long)pos, 0);\n\n    if (size < oldsize) {\n        lfs_truncate_log_probe(\"Branch: size < oldsize (shrink)\", (void *)lfs, (void *)file,\n                (long long)size, (long long)oldsize, (long long)pos, 0);\n\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            lfs_truncate_log_probe(\"Sub-branch: revert to inline file\", (void *)lfs, (void *)file,\n                    (long long)size, (long long)oldsize, (long long)pos, 0);\n\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                lfs_truncate_log_probe(\"Error: seek to head failed\", (void *)lfs, (void *)file,\n                        (long long)size, (long long)oldsize, (long long)pos, (long long)res);\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                lfs_truncate_log_probe(\"Error: flushedread failed\", (void *)lfs, (void *)file,\n                        (long long)size, (long long)oldsize, (long long)pos, (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            lfs_truncate_log_probe(\"Completed inline revert\", (void *)lfs, (void *)file,\n                    (long long)size, (long long)oldsize, (long long)file->pos, 0);\n\n        } else {\n            lfs_truncate_log_probe(\"Sub-branch: need to flush and find new head (shrink)\", (void *)lfs, (void *)file,\n                    (long long)size, (long long)oldsize, (long long)pos, 0);\n\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                lfs_truncate_log_probe(\"Error: file flush failed\", (void *)lfs, (void *)file,\n                        (long long)size, (long long)oldsize, (long long)pos, err);\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                lfs_truncate_log_probe(\"Error: ctz_find failed\", (void *)lfs, (void *)file,\n                        (long long)size, (long long)oldsize, (long long)pos, err);\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            lfs_truncate_log_probe(\"Completed shrink to new head\", (void *)lfs, (void *)file,\n                    (long long)size, (long long)oldsize, (long long)file->pos, 0);\n        }\n    } else if (size > oldsize) {\n        lfs_truncate_log_probe(\"Branch: size > oldsize (extend)\", (void *)lfs, (void *)file,\n                (long long)size, (long long)oldsize, (long long)pos, 0);\n\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            lfs_truncate_log_probe(\"Error: seek to end failed\", (void *)lfs, (void *)file,\n                    (long long)size, (long long)oldsize, (long long)pos, (long long)res);\n            return (int)res;\n        }\n\n        /*\n         * fill with zeros\n         * NOTE: The original code calls lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n         * which passes the address of a non-const compound literal. We log the\n         * control flow and state for each write to provide evidence of this\n         * behavior without changing the original write invocation.\n         */\n        while (file->pos < size) {\n            lfs_truncate_log_probe(\"About to call lfs_file_write_ with &(uint8_t){0}\", (void *)lfs, (void *)file,\n                    (long long)size, (long long)oldsize, (long long)file->pos, 0);\n\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n\n            lfs_truncate_log_probe(\"Returned from lfs_file_write_\", (void *)lfs, (void *)file,\n                    (long long)size, (long long)oldsize, (long long)file->pos, (long long)res);\n\n            if (res < 0) {\n                lfs_truncate_log_probe(\"Error: lfs_file_write_ failed during zero fill\", (void *)lfs, (void *)file,\n                        (long long)size, (long long)oldsize, (long long)file->pos, (long long)res);\n                return (int)res;\n            }\n        }\n\n        lfs_truncate_log_probe(\"Completed zero-fill loop\", (void *)lfs, (void *)file,\n                (long long)size, (long long)oldsize, (long long)file->pos, 0);\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n        lfs_truncate_log_probe(\"Error: restore pos seek failed\", (void *)lfs, (void *)file,\n                (long long)size, (long long)oldsize, (long long)pos, (long long)res);\n        return (int)res;\n    }\n\n    lfs_truncate_log_probe(\"EXIT lfs_file_truncate_ success\", (void *)lfs, (void *)file,\n            (long long)size, (long long)oldsize, (long long)pos, 0);\n\n    return 0;\n}\n"
}