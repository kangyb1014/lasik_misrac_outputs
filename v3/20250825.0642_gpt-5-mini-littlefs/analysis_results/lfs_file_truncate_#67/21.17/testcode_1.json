{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcpy(file->cache.buffer, lfs->rcache.buffer, size) can copy 'size' bytes without ensuring that both destination and source buffers are at least 'size' bytes long. In the code path size is only bounded by lfs->inline_max, while file->cache.size is set to lfs->cfg->cache_size (and the actual allocated buffer lengths for file->cache.buffer and lfs->rcache.buffer are not checked here). If lfs->cfg->cache_size < size (for example if inline_max > cfg->cache_size and size is chosen in (cfg->cache_size, inline_max]), memcpy will write past the end of file->cache.buffer (and potentially read past the end of lfs->rcache.buffer), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Probe logging function to capture control flow and state information\n * for reproducing the memcpy bounds scenario. Appends to /tmp/logs/679.txt.\n * Keeps the original logic of lfs_file_truncate_ intact; only emits\n * diagnostic logs.\n */\nstatic void lfs_probe_log(const char *tag, lfs_t *lfs, lfs_file_t *file,\n        lfs_off_t size, lfs_off_t oldsize) {\n    FILE *f = fopen(\"/tmp/logs/679.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Print key integer fields as long long for portability, pointers with %p */\n    fprintf(f, \"[%s] size=%lld oldsize=%lld inline_max=%lld cfg_cache_size=%lld\\n\",\n            tag, (long long)size, (long long)oldsize,\n            (long long)lfs->inline_max,\n            (long long)lfs->cfg->cache_size);\n\n    fprintf(f, \"[%s] file->pos=%lld file->ctz.head=%llu file->ctz.size=%lld\\n\",\n            tag, (long long)file->pos,\n            (unsigned long long)file->ctz.head,\n            (long long)file->ctz.size);\n\n    /* cache sizes and buffer addresses (may help show potential overflow) */\n    fprintf(f, \"[%s] file->cache.size=%lld cfg->cache_size=%lld file->cache.buffer=%p lfs->rcache.buffer=%p\\n\",\n            tag, (long long)file->cache.size, (long long)lfs->cfg->cache_size,\n            (void*)file->cache.buffer, (void*)lfs->rcache.buffer);\n\n    /* flush and close */\n    fclose(f);\n}\n\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n\n    /* Log entry state */\n    lfs_probe_log(\"entry\", lfs, file, size, oldsize);\n\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                /* log failure to seek */\n                lfs_probe_log(\"seek_failed_before_inline\", lfs, file, size, oldsize);\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                /* log failure to read into rcache */\n                lfs_probe_log(\"flushedread_failed\", lfs, file, size, oldsize);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n\n            /* Log state just before memcpy to capture buffer sizes and addresses */\n            lfs_probe_log(\"before_memcpy\", lfs, file, size, oldsize);\n\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            /* Log state just after memcpy to capture that memcpy was performed */\n            lfs_probe_log(\"after_memcpy\", lfs, file, size, oldsize);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                /* log flush error */\n                lfs_probe_log(\"flush_failed\", lfs, file, size, oldsize);\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                /* log ctz_find error */\n                lfs_probe_log(\"ctz_find_failed\", lfs, file, size, oldsize);\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            /* Log state after switching to non-inline truncation */\n            lfs_probe_log(\"after_noninline_truncate\", lfs, file, size, oldsize);\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            lfs_probe_log(\"seek_failed_end\", lfs, file, size, oldsize);\n            return (int)res;\n        }\n\n        /* Log before zero-fill loop */\n        lfs_probe_log(\"before_zero_fill\", lfs, file, size, oldsize);\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                lfs_probe_log(\"write_failed_zero_fill\", lfs, file, size, oldsize);\n                return (int)res;\n            }\n        }\n\n        lfs_probe_log(\"after_zero_fill\", lfs, file, size, oldsize);\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      lfs_probe_log(\"seek_failed_restore_pos\", lfs, file, size, oldsize);\n      return (int)res;\n    }\n\n    lfs_probe_log(\"exit\", lfs, file, size, oldsize);\n\n    return 0;\n}\n"
}