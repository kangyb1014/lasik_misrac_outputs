{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If lfs->cfg->cache_size is smaller than the requested new file size, the memcpy can write past the destination buffer. Example: configure lfs->cfg->cache_size = 16 and lfs->inline_max = 32, then call lfs_file_truncate_(..., size = 32). The code takes the inline branch (size <= inline_max), sets file->cache.size = lfs->cfg->cache_size (16) but then calls memcpy(file->cache.buffer, lfs->rcache.buffer, size) copying 32 bytes into a buffer only known to be cache_size bytes long \u2014 this can overflow file->cache.buffer (and/or rcache.buffer if it is smaller), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "static int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Probe log: capture entry state */\n    do {\n        FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\");\n        if (__lfs_log_f) {\n            fprintf(__lfs_log_f, \"ENTER lfs_file_truncate_: file=%p, requested_size=%lld, file->pos=%lld\\n\",\n                    (void*)file, (long long)size, (long long)file->pos);\n            fprintf(__lfs_log_f, \"  old ctz.head=%p, ctz.size=%lld, flags=0x%08x\\n\",\n                    (void*)(uintptr_t)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n            /* lfs and cfg information */\n            fprintf(__lfs_log_f, \"  lfs=%p, inline_max=%lld, cfg->cache_size=%lld\\n\",\n                    (void*)lfs, (long long)lfs->inline_max, (long long)lfs->cfg->cache_size);\n            /* cache buffers/pointers */\n            fprintf(__lfs_log_f, \"  file->cache.buffer=%p, file->cache.size=%lld, rcache.buffer=%p\\n\",\n                    (void*)file->cache.buffer, (long long)file->cache.size, (void*)lfs->rcache.buffer);\n            fclose(__lfs_log_f);\n        }\n    } while (0);\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"RETURN error: requested size > LFS_FILE_MAX (%lld > %lld)\\n\", (long long)size, (long long)LFS_FILE_MAX); fclose(__lfs_log_f);} } while (0);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    do {\n        FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\");\n        if (__lfs_log_f) {\n            fprintf(__lfs_log_f, \"computed oldsize=%lld, pos=%lld\\n\", (long long)oldsize, (long long)pos);\n            fclose(__lfs_log_f);\n        }\n    } while (0);\n\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"BRANCH: size < oldsize AND size <= inline_max (size=%lld, inline_max=%lld)\\n\", (long long)size, (long long)lfs->inline_max); fclose(__lfs_log_f);} } while (0);\n\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"ERROR: lfs_file_seek_ returned %lld\\n\", (long long)res); fclose(__lfs_log_f);} } while (0);\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"ERROR: lfs_file_flushedread returned %lld\\n\", (long long)res); fclose(__lfs_log_f);} } while (0);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n\n            /* Log cache size before change */\n            do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) {\n                fprintf(__lfs_log_f, \"BEFORE set: file->cache.size=%lld, cfg->cache_size=%lld, file->cache.buffer=%p, rcache.buffer=%p\\n\",\n                        (long long)file->cache.size, (long long)lfs->cfg->cache_size, (void*)file->cache.buffer, (void*)lfs->rcache.buffer);\n                fclose(__lfs_log_f);\n            } } while (0);\n\n            file->cache.size = lfs->cfg->cache_size;\n\n            /* Log memcpy parameters to provide evidence for potential overflow */\n            do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) {\n                fprintf(__lfs_log_f, \"CALL memcpy: dest=%p (declared_size=%lld), src=%p, bytes_to_copy=%lld\\n\",\n                        (void*)file->cache.buffer, (long long)file->cache.size, (void*)lfs->rcache.buffer, (long long)size);\n                fclose(__lfs_log_f);\n            } } while (0);\n\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"AFTER memcpy: copied %lld bytes into dest=%p\\n\", (long long)size, (void*)file->cache.buffer); fclose(__lfs_log_f);} } while (0);\n\n        } else {\n            do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"BRANCH: size < oldsize AND size > inline_max (size=%lld, inline_max=%lld)\\n\", (long long)size, (long long)lfs->inline_max); fclose(__lfs_log_f);} } while (0);\n\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"ERROR: lfs_file_flush returned %d\\n\", err); fclose(__lfs_log_f);} } while (0);\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"ERROR: lfs_ctz_find returned %d\\n\", err); fclose(__lfs_log_f);} } while (0);\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"AFTER non-inline branch: new head=%p, ctz.size=%lld, file->pos=%lld\\n\", (void*)(uintptr_t)file->ctz.head, (long long)file->ctz.size, (long long)file->pos); fclose(__lfs_log_f);} } while (0);\n        }\n    } else if (size > oldsize) {\n        do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"BRANCH: size > oldsize (size=%lld, oldsize=%lld)\\n\", (long long)size, (long long)oldsize); fclose(__lfs_log_f);} } while (0);\n\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"ERROR: lfs_file_seek_ (end) returned %lld\\n\", (long long)res); fclose(__lfs_log_f);} } while (0);\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"ERROR: lfs_file_write_ returned %lld while filling zeros\\n\", (long long)res); fclose(__lfs_log_f);} } while (0);\n                return (int)res;\n            }\n        }\n\n        do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"AFTER extend: file->pos=%lld (target=%lld)\\n\", (long long)file->pos, (long long)size); fclose(__lfs_log_f);} } while (0);\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"ERROR: lfs_file_seek_ (restore pos) returned %lld\\n\", (long long)res); fclose(__lfs_log_f);} } while (0);\n      return (int)res;\n    }\n\n    do { FILE *__lfs_log_f = fopen(\"/tmp/logs/679.txt\", \"a\"); if (__lfs_log_f) { fprintf(__lfs_log_f, \"EXIT lfs_file_truncate_: success, restored pos=%lld\\n\", (long long)pos); fclose(__lfs_log_f);} } while (0);\n\n    return 0;\n}\n"
}