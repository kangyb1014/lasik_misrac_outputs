{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'off' (type lfs_off_t) is modified in lfs_dir_seek_: e.g. 'off -= dir->pos;' and later 'off -= diff;'. Modifying the scalar function parameter 'off' violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/407.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek_:\n```c\nstatic int lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    // simply walk from head dir\n    int err = lfs_dir_rewind_(lfs, dir);\n    if (err) {\n        return err;\n    }\n\n    // first two for ./..\n    dir->pos = lfs_min(2, off);\n    off -= dir->pos;\n\n    // skip superblock entry\n    dir->id = (off > 0 && lfs_pair_cmp(dir->head, lfs->root) == 0);\n\n    while (off > 0) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return LFS_ERR_INVAL;\n            }\n\n            err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int diff = lfs_min(dir->m.count - dir->id, off);\n        dir->id += diff;\n        dir->pos += diff;\n        off -= diff;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek_ code.\n",
  "test_code": "static void lfs_probe_log_dir_seek_state(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/407.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log key state. Use casts to long long for integer types that may be 64-bit. */\n    fprintf(f,\n        \"stage=%s off=%lld dir->pos=%lld dir->id=%d m.count=%d m.split=%d m.tail=%lld head_eq_root=%d\\n\",\n        stage,\n        (long long)off,\n        (long long)dir->pos,\n        (int)dir->id,\n        (int)dir->m.count,\n        (int)dir->m.split,\n        (long long)dir->m.tail,\n        (int)(lfs_pair_cmp(dir->head, lfs->root) == 0)\n    );\n    fclose(f);\n}\n\nstatic int lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    /* Log entry state */\n    lfs_probe_log_dir_seek_state(lfs, dir, off, \"enter\");\n\n    // simply walk from head dir\n    int err = lfs_dir_rewind_(lfs, dir);\n    if (err) {\n        lfs_probe_log_dir_seek_state(lfs, dir, off, \"rewind_err\");\n        return err;\n    }\n\n    // first two for ./..\n    dir->pos = lfs_min(2, off);\n    off -= dir->pos;\n\n    lfs_probe_log_dir_seek_state(lfs, dir, off, \"after_first_two\");\n\n    // skip superblock entry\n    dir->id = (off > 0 && lfs_pair_cmp(dir->head, lfs->root) == 0);\n    lfs_probe_log_dir_seek_state(lfs, dir, off, \"after_skip_superblock\");\n\n    while (off > 0) {\n        lfs_probe_log_dir_seek_state(lfs, dir, off, \"loop_top\");\n\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                lfs_probe_log_dir_seek_state(lfs, dir, off, \"invalid_split_return\");\n                return LFS_ERR_INVAL;\n            }\n\n            err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                lfs_probe_log_dir_seek_state(lfs, dir, off, \"fetch_err\");\n                return err;\n            }\n\n            dir->id = 0;\n            lfs_probe_log_dir_seek_state(lfs, dir, off, \"after_fetch_reset_id\");\n        }\n\n        int diff = lfs_min(dir->m.count - dir->id, off);\n        dir->id += diff;\n        dir->pos += diff;\n        off -= diff;\n\n        lfs_probe_log_dir_seek_state(lfs, dir, off, \"after_consume_diff\");\n    }\n\n    lfs_probe_log_dir_seek_state(lfs, dir, off, \"return_ok\");\n    return 0;\n}"
}