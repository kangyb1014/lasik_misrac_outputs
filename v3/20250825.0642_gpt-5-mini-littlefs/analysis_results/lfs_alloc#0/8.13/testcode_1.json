{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation if lfs->lookahead.buffer is declared as a non-const pointer (e.g. uint8_t *buffer) but is only read here. In the fragment the code only reads from lookahead.buffer (no writes), so according to MISRA C 2023 Rule 8.13 the pointer type should be const (e.g. const uint8_t *buffer). If, however, lookahead.buffer is mutated elsewhere (written to), then making it const is not possible and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_alloc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_alloc:\n```c\nstatic int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {\n    while (true) {\n        // scan our lookahead buffer for free blocks\n        while (lfs->lookahead.next < lfs->lookahead.size) {\n            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]\n                    & (1U << (lfs->lookahead.next % 8)))) {\n                // found a free block\n                *block = (lfs->lookahead.start + lfs->lookahead.next)\n                        % lfs->block_count;\n\n                // eagerly find next free block to maximize how many blocks\n                // lfs_alloc_ckpoint makes available for scanning\n                while (true) {\n                    lfs->lookahead.next += 1;\n                    lfs->lookahead.ckpoint -= 1;\n\n                    if (lfs->lookahead.next >= lfs->lookahead.size\n                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]\n                                & (1U << (lfs->lookahead.next % 8)))) {\n                        return 0;\n                    }\n                }\n            }\n\n            lfs->lookahead.next += 1;\n            lfs->lookahead.ckpoint -= 1;\n        }\n\n        // In order to keep our block allocator from spinning forever when our\n        // filesystem is full, we mark points where there are no in-flight\n        // allocations with a checkpoint before starting a set of allocations.\n        //\n        // If we've looked at all blocks since the last checkpoint, we report\n        // the filesystem as out of storage.\n        //\n        if (lfs->lookahead.ckpoint <= 0) {\n            LFS_ERROR(\"No more free space 0x%\"PRIx32,\n                    (lfs->lookahead.start + lfs->lookahead.next)\n                        % lfs->block_count);\n            return LFS_ERR_NOSPC;\n        }\n\n        // No blocks in our lookahead buffer, we need to scan the filesystem for\n        // unused blocks in the next lookahead window.\n        int err = lfs_alloc_scan(lfs);\n        if(err) {\n            return err;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_alloc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append logs to /tmp/logs/3.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {\n    /* Log entry state */\n    lfs_log_probe(\"ENTER lfs_alloc: start=%lu next=%lu size=%lu ckpoint=%d block_count=%lu\",\n            (unsigned long)lfs->lookahead.start,\n            (unsigned long)lfs->lookahead.next,\n            (unsigned long)lfs->lookahead.size,\n            (int)lfs->lookahead.ckpoint,\n            (unsigned long)lfs->block_count);\n\n    while (true) {\n        // scan our lookahead buffer for free blocks\n        while (lfs->lookahead.next < lfs->lookahead.size) {\n            uint32_t idx = lfs->lookahead.next / 8;\n            uint8_t byte = lfs->lookahead.buffer[idx];\n            uint8_t mask = (uint8_t)(1U << (lfs->lookahead.next % 8));\n            int bit_set = (byte & mask) != 0U;\n\n            lfs_log_probe(\"SCAN idx=%lu next=%lu byte=0x%02X mask=0x%02X bit_set=%d ckpoint=%d\",\n                    (unsigned long)idx,\n                    (unsigned long)lfs->lookahead.next,\n                    (unsigned int)byte,\n                    (unsigned int)mask,\n                    bit_set,\n                    (int)lfs->lookahead.ckpoint);\n\n            if (!bit_set) {\n                // found a free block\n                *block = (lfs->lookahead.start + lfs->lookahead.next)\n                        % lfs->block_count;\n\n                lfs_log_probe(\"FOUND free block=%lu (start=%lu next=%lu)\",\n                        (unsigned long)*block,\n                        (unsigned long)lfs->lookahead.start,\n                        (unsigned long)lfs->lookahead.next);\n\n                // eagerly find next free block to maximize how many blocks\n                // lfs_alloc_ckpoint makes available for scanning\n                while (true) {\n                    lfs->lookahead.next += 1;\n                    lfs->lookahead.ckpoint -= 1;\n\n                    lfs_log_probe(\"EAGER advance next=%lu ckpoint=%d\",\n                            (unsigned long)lfs->lookahead.next,\n                            (int)lfs->lookahead.ckpoint);\n\n                    if (lfs->lookahead.next >= lfs->lookahead.size\n                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]\n                                & (1U << (lfs->lookahead.next % 8)))) {\n                        lfs_log_probe(\"RETURN success block=%lu next=%lu ckpoint=%d\",\n                                (unsigned long)*block,\n                                (unsigned long)lfs->lookahead.next,\n                                (int)lfs->lookahead.ckpoint);\n                        return 0;\n                    }\n                }\n            }\n\n            lfs->lookahead.next += 1;\n            lfs->lookahead.ckpoint -= 1;\n\n            lfs_log_probe(\"ADVANCE next=%lu ckpoint=%d\",\n                    (unsigned long)lfs->lookahead.next,\n                    (int)lfs->lookahead.ckpoint);\n        }\n\n        // In order to keep our block allocator from spinning forever when our\n        // filesystem is full, we mark points where there are no in-flight\n        // allocations with a checkpoint before starting a set of allocations.\n        //\n        // If we've looked at all blocks since the last checkpoint, we report\n        // the filesystem as out of storage.\n        //\n        if (lfs->lookahead.ckpoint <= 0) {\n            lfs_log_probe(\"NOSPC checkpoint reached start=%lu next=%lu ckpoint=%d\",\n                    (unsigned long)lfs->lookahead.start,\n                    (unsigned long)lfs->lookahead.next,\n                    (int)lfs->lookahead.ckpoint);\n            LFS_ERROR(\"No more free space 0x%\"PRIx32,\n                    (lfs->lookahead.start + lfs->lookahead.next)\n                        % lfs->block_count);\n            return LFS_ERR_NOSPC;\n        }\n\n        // No blocks in our lookahead buffer, we need to scan the filesystem for\n        // unused blocks in the next lookahead window.\n        lfs_log_probe(\"CALL lfs_alloc_scan: start=%lu next=%lu size=%lu\",\n                (unsigned long)lfs->lookahead.start,\n                (unsigned long)lfs->lookahead.next,\n                (unsigned long)lfs->lookahead.size);\n        int err = lfs_alloc_scan(lfs);\n        if(err) {\n            lfs_log_probe(\"lfs_alloc_scan returned err=%d\", err);\n            return err;\n        }\n    }\n}\n"
}