{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_ctz_index(lfs, &(lfs_off_t){size-1}) takes the address of a compound literal (temporary lfs_off_t) and passes a non-const pointer. If the callee lfs_ctz_index does not modify the pointed value but its parameter is declared as lfs_off_t * (non-const), this violates MISRA C 2023 Rule 8.13. Fixes: change the callee prototype to take const lfs_off_t * (preferred) or bind the value to a const local variable and pass its address.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_find:\n```c\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        if (err) {\n            return err;\n        }\n\n        current -= 1 << skip;\n    }\n\n    *block = head;\n    *off = pos;\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append to /tmp/logs/113.txt */\nstatic void lfs_ctz_find_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/113.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    /* entry log */\n    lfs_ctz_find_log(\"ENTRY: lfs_ctz_find called: lfs=%p pcache=%p rcache=%p head=%llu size=%llu pos=%llu block=%p off=%p\\n\",\n            (void *)lfs, (void *)pcache, (void *)rcache,\n            (unsigned long long)head, (unsigned long long)size,\n            (unsigned long long)pos, (void *)block, (void *)off);\n\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        lfs_ctz_find_log(\"EARLY_EXIT: size == 0 -> block=LFS_BLOCK_NULL off=0\\n\");\n        return 0;\n    }\n\n    /* Create an explicit pointer to the compound literal so we can log its address\n       and value. This preserves the original effect while making the temporary's\n       address observable for logging. */\n    lfs_off_t *p_compound = &(lfs_off_t){size - 1};\n    lfs_ctz_find_log(\"COMPOUND_LITERAL: &(lfs_off_t){size-1} -> addr=%p value=%lld\\n\",\n            (void *)p_compound, (long long)*p_compound);\n\n    lfs_off_t current = lfs_ctz_index(lfs, p_compound);\n\n    /* Log pos pointer info as in original call (address of local 'pos') */\n    lfs_ctz_find_log(\"POS_INFO: &pos addr=%p pos_value=%llu\\n\",\n            (void *)&pos, (unsigned long long)pos);\n\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    lfs_ctz_find_log(\"AFTER_INDEX: current=%lld target=%lld\\n\",\n            (long long)current, (long long)target);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        lfs_ctz_find_log(\"LOOP: current=%lld target=%lld skip=%llu head_before_read=%llu\\n\",\n                (long long)current, (long long)target, (unsigned long long)skip, (unsigned long long)head);\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        lfs_ctz_find_log(\"BD_READ: err=%d head_after_read=%llu\\n\", err, (unsigned long long)head);\n        if (err) {\n            lfs_ctz_find_log(\"ERROR: returning err=%d\\n\", err);\n            return err;\n        }\n\n        current -= 1 << skip;\n        lfs_ctz_find_log(\"LOOP_END: updated current=%lld\\n\", (long long)current);\n    }\n\n    *block = head;\n    *off = pos;\n\n    lfs_ctz_find_log(\"EXIT: block=%llu off=%llu return=0\\n\",\n            (unsigned long long)*block, (unsigned long long)*off);\n    return 0;\n}\n"
}