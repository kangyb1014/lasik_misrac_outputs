{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nCalling lfs_ctz_index(lfs, &(lfs_off_t){size-1}) passes the address of a compound literal whose updated value is discarded. Inside lfs_ctz_index the function writes to *off (updates the pointed lfs_off_t), but the caller never uses the modified value. The write is executed but has no observable effect on program behaviour, so that operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/112.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_find:\n```c\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        if (err) {\n            return err;\n        }\n\n        current -= 1 << skip;\n    }\n\n    *block = head;\n    *off = pos;\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper logging function that appends messages to /tmp/logs/112.txt */\nstatic void lfs_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/112.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        lfs_log(\"lfs_ctz_find: size==0, set block=LFS_BLOCK_NULL, off=0\");\n        return 0;\n    }\n\n    /*\n     * Probe around the call that was reported as producing dead code.\n     * The original code called: lfs_ctz_index(lfs, &(lfs_off_t){size-1})\n     * We preserve that compound literal, but capture and log its value\n     * before and after the call to demonstrate that lfs_ctz_index writes\n     * to *off even though the caller later discards the modified value.\n     */\n    lfs_off_t *tmp_off_size = &(lfs_off_t){size - 1};\n    lfs_log(\"lfs_ctz_find: before lfs_ctz_index(size-1): *tmp_off_size=%lld, size=%llu\",\n            (long long)*tmp_off_size, (unsigned long long)size);\n\n    lfs_off_t current = lfs_ctz_index(lfs, tmp_off_size);\n\n    lfs_log(\"lfs_ctz_find: after lfs_ctz_index(size-1): current=%lld, *tmp_off_size=%lld\",\n            (long long)current, (long long)*tmp_off_size);\n\n    /* Also probe the call that uses &pos to show the contrast */\n    lfs_log(\"lfs_ctz_find: before lfs_ctz_index(&pos): pos=%llu\", (unsigned long long)pos);\n    lfs_off_t target = lfs_ctz_index(lfs, (lfs_off_t*)&pos);\n    lfs_log(\"lfs_ctz_find: after lfs_ctz_index(&pos): target=%lld, pos=%llu\",\n            (long long)target, (unsigned long long)pos);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        if (err) {\n            lfs_log(\"lfs_ctz_find: lfs_bd_read returned err=%d\", err);\n            return err;\n        }\n\n        lfs_log(\"lfs_ctz_find: advancing head, skip=%llu, decrementing current by %llu\",\n                (unsigned long long)skip, (unsigned long long)(1ULL << skip));\n\n        current -= 1 << skip;\n    }\n\n    *block = head;\n    *off = pos;\n    lfs_log(\"lfs_ctz_find: exit set block=%llu, off=%llu\", (unsigned long long)*block, (unsigned long long)*off);\n    return 0;\n}\n"
}