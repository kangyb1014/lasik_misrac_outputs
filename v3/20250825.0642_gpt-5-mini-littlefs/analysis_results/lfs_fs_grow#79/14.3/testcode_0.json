{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg,0). In lfs_fs_grow this value is assigned to err and then used as the controlling expression in if (err). Because the macro always yields 0, the if (err) test is invariant (always false), which violates MISRA C 2023 Rule 14.3 (controlling expressions shall not be invariant).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/795.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe function to log control flow and state to /tmp/logs/795.txt. */\nstatic void lfs_grow_log(const char *stage, lfs_t *lfs, lfs_size_t block_count, int err) {\n    FILE *f = fopen(\"/tmp/logs/795.txt\", \"a\");\n    if (f) {\n        /* Log stage, lfs pointer, cfg pointer (if available), block_count and err. */\n        (void)fprintf(f, \"%s: lfs=%p, cfg=%p, block_count=%\" PRIu32 \", err=%d\\n\",\n                      stage,\n                      (void *)lfs,\n                      (void *)(lfs ? lfs->cfg : NULL),\n                      (uint32_t)block_count,\n                      err);\n        (void)fclose(f);\n    }\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* Preserve original logic while adding probes for reproduction. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log value returned by LFS_LOCK and related state to capture invariant behavior. */\n    lfs_grow_log(\"after_LFS_LOCK\", lfs, block_count, err);\n\n    if (err) {\n        lfs_grow_log(\"early_return_after_lock_error\", lfs, block_count, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    lfs_grow_log(\"before_lfs_fs_grow_\", lfs, block_count, err);\n    err = lfs_fs_grow_(lfs, block_count);\n    lfs_grow_log(\"after_lfs_fs_grow_\", lfs, block_count, err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_grow_log(\"before_return\", lfs, block_count, err);\n    return err;\n}\n"
}