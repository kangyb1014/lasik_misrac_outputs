{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe field lfs_t::lookahead.buffer is declared as `uint8_t *buffer`. If this pointer is only used to read lookahead data (i.e. the memory it points to is not modified through this pointer), then it should be declared `const uint8_t *buffer`. Leaving it as a non-const pointer when mutation is not required violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/793.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\nstatic void lfs_log_probe(const char *stage, const void *lfs_ptr,\n    lfs_size_t block_count, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/793.txt\", \"a\");\n    if (f != NULL) {\n        /* Log stage, lfs pointer, block_count and err. Keep formatting simple. */\n        fprintf(f, \"%s: lfs=%p, block_count=%\" PRIu32 \", err=%d\\n\",\n            stage, lfs_ptr, block_count, err);\n        fclose(f);\n    }\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* Log entering the function */\n    lfs_log_probe(\"enter lfs_fs_grow\", (void*)lfs, block_count, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt */\n    lfs_log_probe(\"after LFS_LOCK\", (void*)lfs, block_count, err);\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_log_probe(\"return (lock failed)\", (void*)lfs, block_count, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    /* Log before calling internal grow implementation */\n    lfs_log_probe(\"before lfs_fs_grow_\", (void*)lfs, block_count, 0);\n    err = lfs_fs_grow_(lfs, block_count);\n    /* Log after calling internal grow implementation with its return value */\n    lfs_log_probe(\"after lfs_fs_grow_\", (void*)lfs, block_count, err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlock and before final return */\n    lfs_log_probe(\"exit lfs_fs_grow\", (void*)lfs, block_count, err);\n    return err;\n}\n"
}