{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe non-pointer parameter block_count is passed by address (&block_count) to lfs_fs_traverse_ (inside the LFS_SHRINKNONRELOCATING conditional), which allows that call to modify the parameter variable itself. This constitutes modifying a function parameter (not just the object pointed to by a pointer parameter).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/797.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: write control-flow and state information to /tmp/logs/797.txt.\n   We keep this helper minimal and do not alter any program logic. */\nstatic void lfs_log_state(const char *stage, void *lfs_ptr,\n                          unsigned long long block_count_val,\n                          const void *block_count_addr) {\n    FILE *f = fopen(\"/tmp/logs/797.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, lfs pointer, value of block_count and its address. */\n    fprintf(f, \"%s: lfs=%p block_count=%llu block_count_addr=%p\\n\",\n            stage, lfs_ptr, block_count_val, block_count_addr);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Log entry state (value and address of the non-pointer parameter).\n       This documents the address that may later be passed by address to\n       other routines (evidence for Rule 17.8 violation if modified). */\n    lfs_log_state(\"lfs_fs_grow:ENTRY\", (void*)lfs,\n                  (unsigned long long)block_count, (const void*)&block_count);\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Log state after calling lfs_fs_grow_ to detect any changes to the\n       parameter's value or to document control-flow. */\n    lfs_log_state(\"lfs_fs_grow:AFTER_lfs_fs_grow_\", (void*)lfs,\n                  (unsigned long long)block_count, (const void*)&block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}