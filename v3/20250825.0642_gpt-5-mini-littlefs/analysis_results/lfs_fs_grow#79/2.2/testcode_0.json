{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression (void)cfg in the macro definition is executed but has no observable effect: #define LFS_LOCK(cfg) ((void)cfg,0). For example, in int err = LFS_LOCK(lfs->cfg); the subexpression (void)lfs->cfg does nothing; removing it yields int err = 0 with identical behaviour. Therefore the (void)cfg operation is dead code (an executed operation whose removal would not affect program behaviour).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/792.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging utility: append human-readable traces to /tmp/logs/792.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/792.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[lfs_fs_grow] \");\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* Log entry and key state before attempting the lock. This captures the\n       cfg pointer value that the LFS_LOCK macro receives. This helps to\n       demonstrate that the cast (void)cfg inside the macro performs no\n       observable effect on program state. */\n    lfs_probe_log(\"ENTER: lfs=%p, cfg=%p, block_count=%\" PRIu32,\n                  (void*)lfs, (void*)lfs->cfg, block_count);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of the lock invocation and the cfg value again so that\n       observers can verify that calling LFS_LOCK did not change cfg or other\n       observable state in this path. */\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d, cfg=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_probe_log(\"LFS_LOCK returned non-zero, returning early: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    lfs_probe_log(\"AFTER lfs_fs_grow_: err=%d\", err);\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n\n    /* Log just before unlocking so the control-flow is clear in the logs. */\n    lfs_probe_log(\"ABOUT TO UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"UNLOCKED: cfg=%p\", (void*)lfs->cfg);\n\n    lfs_probe_log(\"EXIT: returning %d\", err);\n    return err;\n}\n"
}