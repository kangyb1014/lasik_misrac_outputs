{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the no-op expression ((void)cfg). Calls such as LFS_UNLOCK(lfs->cfg); in lfs_fs_grow execute but have no effect; removing those calls would not change program behaviour in this configuration, so they constitute dead code (violating MISRA C 2023 Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/792.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/792.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/792.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* Log entry and input state */\n    lfs_probe_log(\"ENTER lfs_fs_grow: lfs=%p, block_count=%llu\", (void*)lfs, (unsigned long long)block_count);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d, lfs=%p, cfg=%p\", err, (void*)lfs, (void*)lfs->cfg);\n    if (err) {\n        lfs_probe_log(\"EXIT lfs_fs_grow early due to lock error: err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n    lfs_probe_log(\"TRACE before internal grow: calling lfs_fs_grow_ with lfs=%p, block_count=%llu\", (void*)lfs, (unsigned long long)block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    lfs_probe_log(\"RETURN from lfs_fs_grow_: err=%d, lfs=%p, cfg=%p\", err, (void*)lfs, (void*)lfs->cfg);\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n\n    /* Probe surrounding the unlock call to capture the scenario where LFS_UNLOCK is a no-op. */\n    lfs_probe_log(\"BEFORE LFS_UNLOCK: cfg=%p (about to call LFS_UNLOCK(cfg))\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_UNLOCK: cfg=%p (call returned)\", (void*)lfs->cfg);\n\n    lfs_probe_log(\"EXIT lfs_fs_grow: returning err=%d\", err);\n    return err;\n}\n"
}