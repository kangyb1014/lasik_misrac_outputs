{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro is defined as #define LFS_TRACE(__VA_ARGS__) using __VA_ARGS__ in the macro parameter list. The use of __VA_ARGS__ in the macro header (instead of the standard C99 form using an ellipsis '...') is a compiler-specific extension rather than standard C. This therefore constitutes use of a language extension and violates MISRA C 2023 Rule 1.2. (The compliant form would be #define LFS_TRACE(...) for a C99/C11 variadic macro, or avoid variadic macros if targeting pre-C99 compilers.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/390.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/390.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_dir_seek: LFS_LOCK returned %d (lfs=%p dir=%p off=%\" PRIu32 \")\",\n            err, (void*)lfs, (void*)dir, off);\n    if (err) {\n        lfs_probe_log(\"lfs_dir_seek: early return due to lock error %d\", err);\n        return err;\n    }\n\n    lfs_probe_log(\"lfs_dir_seek: before LFS_TRACE (lfs=%p dir=%p off=%\" PRIu32 \")\",\n            (void*)lfs, (void*)dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    lfs_probe_log(\"lfs_dir_seek: after LFS_TRACE, about to call lfs_dir_seek_\");\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    lfs_probe_log(\"lfs_dir_seek: lfs_dir_seek_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    lfs_probe_log(\"lfs_dir_seek: after LFS_TRACE (exit) unlocking and returning %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}