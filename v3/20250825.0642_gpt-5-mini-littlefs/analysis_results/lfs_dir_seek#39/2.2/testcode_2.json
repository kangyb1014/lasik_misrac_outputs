{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so the statement int err = LFS_LOCK(lfs->cfg); always sets err to 0. The immediately following if (err) test is therefore never taken, and the initial value of err is later overwritten by err = lfs_dir_seek_(lfs, dir, off). Consequently the assignment and the if-check have no effect in this configuration and could be removed without changing program behaviour. This constitutes dead code under Rule 2.2 (unless LFS_LOCK is redefined to perform real locking, in which case the call is not dead).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/392.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append diagnostic logs to /tmp/logs/392.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/392.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of LFS_LOCK and input state so callers can observe\n       whether the lock call is a no-op (e.g. returns 0 as in the\n       reported violation scenario). We cast off to unsigned long long\n       to avoid depending on PRIu32 here. */\n    lfs_probe_log(\"lfs_dir_seek: entered, lfs=%p, dir=%p, off=%llu, after LFS_LOCK err=%d\",\n                  (void*)lfs, (void*)dir, (unsigned long long)off, err);\n\n    if (err) {\n        lfs_probe_log(\"lfs_dir_seek: early return due to lock error %d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    lfs_probe_log(\"lfs_dir_seek: calling lfs_dir_seek_ (previous err value=%d)\", err);\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    lfs_probe_log(\"lfs_dir_seek: lfs_dir_seek_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_dir_seek: after LFS_UNLOCK, returning %d\", err);\n    return err;\n}\n"
}