{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWith the provided macro definitions LFS_UNLOCK(cfg) expands to ((void)cfg), i.e. a no-op with no side-effects. The statement LFS_UNLOCK(lfs->cfg); is therefore executed but its removal would not affect program behaviour in this build, so it is dead code. (If LFS_UNLOCK is replaced in other configurations with an actual unlock operation, then it would not be dead; but as given it violates Rule 2.2.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/392.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <string.h>\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n\n    /* Probe logging to capture the potential no-op unlock behavior. */\n    {\n        FILE *log = fopen(\"/tmp/logs/392.txt\", \"a\");\n        void *cfg = NULL;\n        unsigned char before[16];\n        unsigned char after[16];\n        int have_snapshot = 0;\n\n        if (log) {\n            fprintf(log, \"lfs_dir_seek: entering probe. lfs=%p dir=%p off=%\"PRIu32\" err=%d\\n\",\n                    (void*)lfs, (void*)dir, off, err);\n\n            cfg = (lfs != NULL) ? (void*)lfs->cfg : NULL;\n            fprintf(log, \"cfg pointer = %p\\n\", cfg);\n\n            if (cfg != NULL) {\n                /* Take a small snapshot of cfg memory before calling unlock.\n                   If LFS_UNLOCK is a no-op ((void)cfg), this snapshot should\n                   be identical after the call. */\n                memcpy(before, cfg, sizeof(before));\n                have_snapshot = 1;\n\n                fprintf(log, \"snapshot before unlock:\");\n                for (size_t i = 0; i < sizeof(before); i++) {\n                    fprintf(log, \" %02x\", before[i]);\n                }\n                fprintf(log, \"\\n\");\n            } else {\n                fprintf(log, \"cfg is NULL; skipping snapshot\\n\");\n            }\n\n            fprintf(log, \"about to call LFS_UNLOCK(lfs->cfg)\\n\");\n            fclose(log);\n        }\n\n        /* Actual unlock call from original logic (kept intact). */\n        LFS_UNLOCK(lfs->cfg);\n\n        /* Re-open log to write post-unlock observations. */\n        log = fopen(\"/tmp/logs/392.txt\", \"a\");\n        if (log) {\n            if (have_snapshot) {\n                memcpy(after, cfg, sizeof(after));\n                fprintf(log, \"snapshot after unlock:\");\n                for (size_t i = 0; i < sizeof(after); i++) {\n                    fprintf(log, \" %02x\", after[i]);\n                }\n                fprintf(log, \"\\n\");\n\n                if (memcmp(before, after, sizeof(before)) == 0) {\n                    fprintf(log, \"analysis: cfg UNCHANGED by LFS_UNLOCK -> evidence of no-op in this build\\n\");\n                } else {\n                    fprintf(log, \"analysis: cfg CHANGED by LFS_UNLOCK -> unlock had side-effects in this build\\n\");\n                }\n            }\n            fclose(log);\n        }\n    }\n\n    return err;\n}"
}