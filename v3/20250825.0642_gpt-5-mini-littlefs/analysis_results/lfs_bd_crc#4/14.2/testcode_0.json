{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop violates Rule 14.2 because the third clause (i += diff) uses the object 'diff', which is modified inside the loop body (diff = lfs_min(...)). Clause 3 requires the third clause to modify only the loop counter and not refer to objects that are modified in the loop body (including effects of called functions). This usage therefore violates the rule. A compliant alternative is to avoid using a body-modified object in the third clause (for example, use a while loop or perform i += diff as a statement at the end of the loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_crc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/44.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_crc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_crc:\n```c\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        *crc = lfs_crc(*crc, &dat, diff);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_crc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic void lfs_bd_crc_log(lfs_off_t i, lfs_size_t diff, lfs_size_t size,\n        lfs_size_t hint, lfs_block_t block, lfs_off_t off,\n        uint32_t crc_before, uint32_t crc_after, int err,\n        const uint8_t *dat, lfs_size_t datlen, const char *note) {\n    FILE *f = fopen(\"/tmp/logs/44.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_bd_crc] %s\\n\", note ? note : \"\");\n    fprintf(f, \"  i=%lld diff=%lld size=%lld hint=%llu block=%llu off=%lld\\n\",\n            (long long)i, (long long)diff, (long long)size,\n            (unsigned long long)hint, (unsigned long long)block, (long long)off);\n    fprintf(f, \"  crc_before=%u crc_after=%u err=%d\\n\",\n            (unsigned)crc_before, (unsigned)crc_after, err);\n    if (dat && datlen) {\n        fprintf(f, \"  dat:\");\n        for (lfs_size_t j = 0; j < datlen; j++) {\n            fprintf(f, \" %02x\", (unsigned)dat[j]);\n        }\n        fprintf(f, \"\\n\");\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    /* Log entry to function with initial state */\n    lfs_bd_crc_log(0, diff, size, hint, block, off, *crc, *crc, 0, NULL, 0,\n            \"enter lfs_bd_crc\");\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        /* Log beginning of iteration showing i and the diff carried from\n           previous iteration (initially 0). This shows that the loop's third\n           clause uses 'diff', which is assigned inside the loop body. */\n        lfs_bd_crc_log(i, diff, size, hint, block, off, *crc, *crc, 0, NULL, 0,\n                \"loop iteration start (before computing diff)\");\n\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n\n        /* Log after diff is computed (diff is modified inside the body) */\n        lfs_bd_crc_log(i, diff, size, hint, block, off, *crc, *crc, 0, NULL, 0,\n                \"diff computed inside loop body\");\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            /* Log the error and return (preserve original behavior) */\n            lfs_bd_crc_log(i, diff, size, hint, block, off, *crc, *crc, err,\n                    dat, diff, \"lfs_bd_read returned error, returning\");\n            return err;\n        }\n\n        uint32_t crc_before = *crc;\n        *crc = lfs_crc(*crc, &dat, diff);\n        uint32_t crc_after = *crc;\n\n        /* Log the read data and CRC update */\n        lfs_bd_crc_log(i, diff, size, hint, block, off, crc_before, crc_after, 0,\n                dat, diff, \"after read and crc update\");\n\n        /* Note: the for-loop increment (i += diff) will use the 'diff' value\n           that was assigned above inside the loop body. The logs before and\n           after iterations (and at the start of the next iteration) will\n           illustrate how 'i' changes by the body-modified 'diff'. */\n    }\n\n    /* Log normal exit */\n    lfs_bd_crc_log(size, diff, size, hint, block, off, *crc, *crc, 0, NULL, 0,\n            \"exit lfs_bd_crc\");\n\n    return 0;\n}\n"
}