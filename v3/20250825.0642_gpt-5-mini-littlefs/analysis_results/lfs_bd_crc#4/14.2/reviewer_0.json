{
  "user_message": "An agent A claimed that the following lfs_bd_crc code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of lfs_bd_crc.\n```c\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        *crc = lfs_crc(*crc, &dat, diff);\n    }\n\n    return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for-loop violates Rule 14.2 because the third clause (i += diff) uses the object 'diff', which is modified inside the loop body (diff = lfs_min(...)). Clause 3 requires the third clause to modify only the loop counter and not refer to objects that are modified in the loop body (including effects of called functions). This usage therefore violates the rule. A compliant alternative is to avoid using a body-modified object in the third clause (for example, use a while loop or perform i += diff as a statement at the end of the loop body).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[lfs_bd_crc] enter lfs_bd_crc\n  i=0 diff=0 size=16 hint=16 block=0 off=64\n  crc_before=4294967295 crc_after=4294967295 err=0\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=0 diff=0 size=16 hint=16 block=0 off=64\n  crc_before=4294967295 crc_after=4294967295 err=0\n\n[lfs_bd_crc] diff computed inside loop body\n  i=0 diff=8 size=16 hint=16 block=0 off=64\n  crc_before=4294967295 crc_after=4294967295 err=0\n\n[lfs_bd_crc] after read and crc update\n  i=0 diff=8 size=16 hint=16 block=0 off=64\n  crc_before=4294967295 crc_after=3736805603 err=0\n  dat: ff ff ff ff ff ff ff ff\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=8 diff=8 size=16 hint=16 block=0 off=64\n  crc_before=3736805603 crc_after=3736805603 err=0\n\n[lfs_bd_crc] diff computed inside loop body\n  i=8 diff=8 size=16 hint=16 block=0 off=64\n  crc_before=3736805603 crc_after=3736805603 err=0\n\n[lfs_bd_crc] after read and crc update\n  i=8 diff=8 size=16 hint=16 block=0 off=64\n  crc_before=3736805603 crc_after=3226221029 err=0\n  dat: ff ff ff ff ff ff ff ff\n\n[lfs_bd_crc] exit lfs_bd_crc\n  i=16 diff=8 size=16 hint=16 block=0 off=64\n  crc_before=3226221029 crc_after=3226221029 err=0\n\n[lfs_bd_crc] enter lfs_bd_crc\n  i=0 diff=0 size=60 hint=64 block=0 off=0\n  crc_before=4294967295 crc_after=4294967295 err=0\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=0 diff=0 size=60 hint=64 block=0 off=0\n  crc_before=4294967295 crc_after=4294967295 err=0\n\n[lfs_bd_crc] diff computed inside loop body\n  i=0 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=4294967295 crc_after=4294967295 err=0\n\n[lfs_bd_crc] after read and crc update\n  i=0 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=4294967295 crc_after=2803559361 err=0\n  dat: 00 00 00 00 f0 0f ff f7\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=8 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=2803559361 crc_after=2803559361 err=0\n\n[lfs_bd_crc] diff computed inside loop body\n  i=8 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=2803559361 crc_after=2803559361 err=0\n\n[lfs_bd_crc] after read and crc update\n  i=8 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=2803559361 crc_after=388878322 err=0\n  dat: 6c 69 74 74 6c 65 66 73\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=16 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=388878322 crc_after=388878322 err=0\n\n[lfs_bd_crc] diff computed inside loop body\n  i=16 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=388878322 crc_after=388878322 err=0\n\n[lfs_bd_crc] after read and crc update\n  i=16 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=388878322 crc_after=662037927 err=0\n  dat: 2f e0 00 10 01 00 02 00\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=24 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=662037927 crc_after=662037927 err=0\n\n[lfs_bd_crc] diff computed inside loop body\n  i=24 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=662037927 crc_after=662037927 err=0\n\n[lfs_bd_crc] after read and crc update\n  i=24 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=662037927 crc_after=1083328722 err=0\n  dat: 00 02 00 00 00 08 00 00\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=32 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=1083328722 crc_after=1083328722 err=0\n\n[lfs_bd_crc] diff computed inside loop body\n  i=32 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=1083328722 crc_after=1083328722 err=0\n\n[lfs_bd_crc] after read and crc update\n  i=32 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=1083328722 crc_after=784924763 err=0\n  dat: ff 00 00 00 ff ff ff 7f\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=40 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=784924763 crc_after=784924763 err=0\n\n[lfs_bd_crc] diff computed inside loop body\n  i=40 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=784924763 crc_after=784924763 err=0\n\n[lfs_bd_crc] after read and crc update\n  i=40 diff=8 size=60 hint=64 block=0 off=0\n  crc_before=784924763 crc_after=2937042158 err=0\n  dat: fe 03 00 00 7f ef fc 10\n\n[lfs_bd_crc] loop iteration start (before computing diff)\n  i=4\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_bd_crc:\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = buffer;\n\n    for (size_t i = 0; i < size; i++) {\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];\n    }\n\n    return crc;\n}\n...\ntypedef uint32_t lfs_off_t\n...\ntypedef uint32_t lfs_size_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The for statement declares a single loop counter i in the first clause, but the third clause uses the variable diff (i += diff). diff is assigned inside the loop body (diff = lfs_min(...)), so the third clause reads an object that is modified by the loop body. Under MISRA C 2023 Rule 14.2 the third clause must modify only the loop counter and must not use objects that are modified in the loop body (and the behaviour of called functions is considered part of the loop body). Therefore the loop as written violates Rule 14.2. A compliant fix is to avoid using a body-modified object in the third clause (for example perform i += diff as a statement at the end of the loop body or rewrite the loop as a while loop)."
}