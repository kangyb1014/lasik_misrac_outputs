{
  "user_message": "An agent A claimed that the following lfs_bd_crc code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_bd_crc.\n```c\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        *crc = lfs_crc(*crc, &dat, diff);\n    }\n\n    return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn lfs_bd_read the value parameters 'off' and 'size' are modified (e.g. 'off += diff;' and 'size -= diff;'), which alters function parameters passed by value. This violates MISRA C 2023 Rule 17.8. (Note: modifying 'data' is fine because it's a local pointer initialized from the 'buffer' parameter; modifying the objects pointed to by pointer parameters such as rcache is allowed.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nlfs_bd_crc ENTER: hint=16, block=0, off=64, size=16, crc=4294967295\nITER: i=0, diff=8, call: hint-i=16, block=0, off+i=64, read_size=8\nBEFORE_CRC: crc=4294967295, processed_diff=8\nAFTER_CRC: crc=3736805603\nITER: i=8, diff=8, call: hint-i=8, block=0, off+i=72, read_size=8\nBEFORE_CRC: crc=3736805603, processed_diff=8\nAFTER_CRC: crc=3226221029\nlfs_bd_crc EXIT: crc=3226221029\nlfs_bd_crc ENTER: hint=64, block=0, off=0, size=60, crc=4294967295\nITER: i=0, diff=8, call: hint-i=64, block=0, off+i=0, read_size=8\nBEFORE_CRC: crc=4294967295, processed_diff=8\nAFTER_CRC: crc=2803559361\nITER: i=8, diff=8, call: hint-i=56, block=0, off+i=8, read_size=8\nBEFORE_CRC: crc=2803559361, processed_diff=8\nAFTER_CRC: crc=388878322\nITER: i=16, diff=8, call: hint-i=48, block=0, off+i=16, read_size=8\nBEFORE_CRC: crc=388878322, processed_diff=8\nAFTER_CRC: crc=662037927\nITER: i=24, diff=8, call: hint-i=40, block=0, off+i=24, read_size=8\nBEFORE_CRC: crc=662037927, processed_diff=8\nAFTER_CRC: crc=1083328722\nITER: i=32, diff=8, call: hint-i=32, block=0, off+i=32, read_size=8\nBEFORE_CRC: crc=1083328722, processed_diff=8\nAFTER_CRC: crc=784924763\nITER: i=40, diff=8, call: hint-i=24, block=0, off+i=40, read_size=8\nBEFORE_CRC: crc=784924763, processed_diff=8\nAFTER_CRC: crc=2937042158\nITER: i=48, diff=8, call: hint-i=16, block=0, off+i=48, read_size=8\nBEFORE_CRC: crc=2937042158, processed_diff=8\nAFTER_CRC: crc=810121973\nITER: i=56, diff=4, call: hint-i=8, block=0, off+i=56, read_size=4\nBEFORE_CRC: crc=810121973, processed_diff=4\nAFTER_CRC: crc=195944542\nlfs_bd_crc EXIT: crc=195944542\nlfs_bd_crc ENTER: hint=4, block=0, off=60, size=4, crc=195944542\nITER: i=0, diff=4, call: hint-i=4, block=0, off+i=60, read_size=4\nBEFORE_CRC: crc=195944542, processed_diff=4\nAFTER_CRC: crc=0\nlfs_bd_crc EXIT: crc=0\nlfs_bd_crc ENTER: hint=16, block=1, off=64, size=16, crc=4294967295\nITER: i=0, diff=8, call: hint-i=16, block=1, off+i=64, read_size=8\nBEFORE_CRC: crc=4294967295, processed_diff=8\nAFTER_CRC: crc=3736805603\nITER: i=8, diff=8, call: hint-i=8, block=1, off+i=72, read_size=8\nBEFORE_CRC: crc=3736805603, processed_diff=8\nAFTER_CRC: crc=3226221029\nlfs_bd_crc EXIT: crc=3226221029\nlfs_bd_crc ENTER: hint=64, block=1, off=0, size=60, crc=4294967295\nITER: i=0, diff=8, call: hint-i=64, block=1, off+i=0, read_size=8\nBEFORE_CRC: crc=4294967295, processed_diff=8\nAFTER_CRC: crc=1806756703\nITER: i=8, diff=8, call: hint-i=56, block=1, off+i=8, read_size=8\nBEFORE_CRC: crc=1806756703, processed_diff=8\nAFTER_CRC: crc=3108331107\nITER: i=16, diff=8, call: hint-i=48, block=1, off+i=16, read_size=8\nBEFORE_CRC: crc=3108331107, processed_diff=8\nAFTER_CRC: crc=2790293632\nITER: i=24, diff=8, call: hint-i=40, block=1, off+i=24, read_size=8\nBEFORE_CRC: crc=2790293632, processed_diff=8\nAFTER_CRC: crc=2974305656\nITER: i=32, diff=8, call: hint-i=32, block=1, off+i=32, read_size=8\nBEFORE_CRC: crc=2974305656, processed_diff=8\nAFTER_CRC: crc=2173538844\nITER: i=40, diff=8, call: hint-i=24, block=1, off+i=40, read_size=8\nBEFORE_CRC: crc=2173538844, processed_diff=8\nAFTER_CRC: crc=2461947954\nITER: i=48, diff=8, call: hint-i=16, block=1, off+i=48, read_size=8\nBEFORE_CRC: crc=2461947954, processed_diff=8\nAFTER_CRC: crc=769419554\nITER: i=56, diff=4, call: hint-i=8, block=1, off+i=56, read_size=4\nBEFORE_CRC: crc=769419554, processed_diff=4\nAFTER_CRC: crc=3246288593\nlfs_bd_crc EXIT: crc=3246288593\nlfs_bd_crc ENTER: hint=4, block=1, off=60, size=4, crc=3246288593\nITER: i=0, diff=4, call: hint-i=4, block=1, off+i=60, read_size=4\nBEFORE_CRC: crc=3246288593, processed_diff=4\nAFTER_CRC: crc=0\nlfs_bd_crc EXIT: crc=0\nlfs_bd_crc ENTER: hint=512, block=1, off=8, size=8, crc=1806756703\nITER: i=0, diff=8, call: hint-i=512, block=1, off+i=8, read_size=8\nBEFORE_CRC: crc=1806756703, processed_diff=8\nAFTER_CRC: crc=3108331107\nlfs_bd_crc EXIT: crc=3108331107\nlfs_bd_crc ENTER: hint=512, block=1, off=20, size=24, crc=1007064211\nITER: i=0, diff=8, call: hint-i=512, block=1, off+i=20, read_size=8\nBEFORE_CRC: crc=1007064211, processed_diff=8\nAFTER_CRC: crc=2330337884\nITER: i=8, diff=8, call: hint-i=504, block=1, off+i=28, read_size=8\nB\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_bd_crc:\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = buffer;\n\n    for (size_t i = 0; i < size; i++) {\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];\n    }\n\n    return crc;\n}\n...\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = buffer;\n\n    for (size_t i = 0; i < size; i++) {\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];\n    }\n\n    return crc;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent's report is correct in substance: MISRA C 2023 Rule 17.8 forbids modifying function parameters. In lfs_bd_read the value parameters off and size are incremented/decremented (off += diff; size -= diff;), which is a direct modification of value parameters and therefore violates Rule 17.8. Note: the violation is in lfs_bd_read (the code shown in additional code), not in lfs_bd_crc itself (lfs_bd_crc does not modify its parameters). Modifying the local pointer variable data or the objects pointed to by pointer parameters (e.g. rcache->...) is allowed by the rule."
}