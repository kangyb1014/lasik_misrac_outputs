{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression if (err) is invariant because err is initialized from LFS_LOCK(lfs->cfg), and the provided macro definition #define LFS_LOCK(cfg) ((void)cfg,0) always yields 0. Thus the if test is effectively if (0) (an invariant false), so the controlling expression is invariant and violates MISRA C 2023 Rule 14.3. The listed exceptions do not apply (not an infinite loop and not the permitted do-while case).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_gc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/775.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_gc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc:\n```c\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_gc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/775.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/775.txt\", \"a\");\n    if (f) {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of LFS_LOCK and the upcoming controlling test */\n    lfs_log_probe(\"lfs_fs_gc: after LFS_LOCK -> err=%d, lfs=%p\", err, (void*)lfs);\n\n    if (err) {\n        /* Log the early-return path (evidence that the controlling expression evaluated true) */\n        lfs_log_probe(\"lfs_fs_gc: entering early return path: err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n    lfs_log_probe(\"lfs_fs_gc: proceeding to lfs_fs_gc_ (err was %d)\", err);\n\n    err = lfs_fs_gc_(lfs);\n\n    lfs_log_probe(\"lfs_fs_gc: lfs_fs_gc_ returned %d\", err);\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n\n    lfs_log_probe(\"lfs_fs_gc: calling LFS_UNLOCK (about to release lock)\");\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"lfs_fs_gc: returned with err=%d\", err);\n    return err;\n}\n"
}