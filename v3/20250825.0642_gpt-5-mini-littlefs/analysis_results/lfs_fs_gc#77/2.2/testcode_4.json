{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(lfs->cfg) macro expands to ((void)cfg), i.e. a pure no-op that merely casts its argument to void. Executing this has no observable effect (no side-effects, no volatile accesses, no timing-critical operation), so removing the statement would not change program behaviour in the given project. Therefore this is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_gc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/772.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_gc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc:\n```c\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_gc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Probe helpers: write control-flow and state information to /tmp/logs/772.txt\n * These helpers are designed to preserve the original logic of lfs_fs_gc.\n */\nstatic void lfs_gc_logf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/772.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void lfs_gc_probe_state(void *lfs_ptr, const void *cfg_member_addr,\n                               size_t cfg_size, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/772.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: lfs=%p, &lfs->cfg=%p, sizeof(lfs->cfg)=%zu\\n\",\n            stage, lfs_ptr, cfg_member_addr, cfg_size);\n    fclose(f);\n}\n\nint lfs_fs_gc(lfs_t *lfs) {\n    /* Log before attempting the lock so we can reproduce control flow. */\n    lfs_gc_probe_state((void*)lfs, (const void*)&lfs->cfg,\n                       (size_t)sizeof(lfs->cfg), \"enter_lfs_fs_gc_before_lock\");\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log state after LFS_LOCK returns to capture lock result and cfg state. */\n    lfs_gc_logf(\"lfs_fs_gc: LFS_LOCK returned %d\\n\", err);\n    lfs_gc_probe_state((void*)lfs, (const void*)&lfs->cfg,\n                       (size_t)sizeof(lfs->cfg), \"after_LFS_LOCK\");\n\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n\n    /* Capture state immediately before and after the unlock call so that\n     * the logs show whether the unlock produces any observable change.\n     * This helps demonstrate whether LFS_UNLOCK(lfs->cfg) is a no-op.\n     */\n    lfs_gc_probe_state((void*)lfs, (const void*)&lfs->cfg,\n                       (size_t)sizeof(lfs->cfg), \"before_LFS_UNLOCK\");\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_gc_probe_state((void*)lfs, (const void*)&lfs->cfg,\n                       (size_t)sizeof(lfs->cfg), \"after_LFS_UNLOCK\");\n\n    return err;\n}\n"
}