{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size) can write up to lfs->cfg->lookahead_size bytes starting at lfs->lookahead.buffer. Nothing in the provided code guarantees that lookahead.buffer is non-NULL and that the object it points to is at least lfs->cfg->lookahead_size bytes long. If lookahead.buffer is NULL or was allocated with fewer than lfs->cfg->lookahead_size bytes (for example if it was allocated using a different size such as lookahead.size or not allocated at all), the memset will write beyond the bounds of the buffer and violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_gc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/779.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_gc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc:\n```c\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_gc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/*\n * Probe helper: log relevant state to /tmp/logs/779.txt\n * This function is intentionally conservative: it only reads the\n * same members used by the surrounding code (cfg and lookahead)\n * and does not modify any state.\n */\nstatic void lfs_probe_log_state(const char *stage, lfs_t *lfs) {\n    FILE *f = fopen(\"/tmp/logs/779.txt\", \"a\");\n    if (!f) {\n        /* best-effort logging; do not alter program behavior on failure */\n        return;\n    }\n\n    fprintf(f, \"=== lfs_fs_gc probe: %s ===\\n\", stage);\n    fprintf(f, \"lfs pointer: %p\\n\", (void*)lfs);\n    if (!lfs) {\n        fprintf(f, \"lfs is NULL\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* cfg pointer (the original wrapper accesses lfs->cfg) */\n    fprintf(f, \"lfs->cfg: %p\\n\", (void*)lfs->cfg);\n    if (lfs->cfg) {\n        /* lookahead_size is expected to be present on cfg (as in the violation scenario)\n         * cast to unsigned long for robust printing regardless of the underlying integer type\n         */\n        fprintf(f, \"lfs->cfg->lookahead_size: %lu\\n\",\n                (unsigned long)lfs->cfg->lookahead_size);\n    } else {\n        fprintf(f, \"lfs->cfg is NULL\\n\");\n    }\n\n    /* lookahead buffer and size (from violation scenario) */\n    fprintf(f, \"lfs->lookahead.buffer: %p\\n\", (void*)lfs->lookahead.buffer);\n    fprintf(f, \"lfs->lookahead.size: %lu\\n\",\n            (unsigned long)lfs->lookahead.size);\n\n    fprintf(f, \"--- end probe (%s) ---\\n\\n\", stage);\n    fclose(f);\n}\n\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that lock failed and the error code */\n        lfs_probe_log_state(\"lock-failed\", lfs);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    /* Probe: record state just before calling the real gc implementation */\n    lfs_probe_log_state(\"before-lfs_fs_gc_\", lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    /* Probe: record state and result just after the gc call */\n    lfs_probe_log_state(\"after-lfs_fs_gc_\", lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}