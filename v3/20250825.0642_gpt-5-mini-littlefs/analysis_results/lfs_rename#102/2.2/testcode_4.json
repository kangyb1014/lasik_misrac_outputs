{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(lfs->cfg) expands to ((void)cfg), which is a no-op. The statement is executed but has no effect; removing it would not change program behaviour in the provided configuration, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1022.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state to /tmp/logs/1022.txt. */\nstatic void lfs_rename_log_probe(lfs_t *lfs, const char *stage, int err) {\n    FILE *f = fopen(\"/tmp/logs/1022.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log pointer values and error code to help reproduce the no-op unlock scenario. */\n    fprintf(f, \"%s: lfs=%p cfg=%p err=%d\\n\", stage, (void*)lfs, (void*)(lfs ? lfs->cfg : (void*)0), err);\n    fclose(f);\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_rename_log_probe(lfs, \"lfs_rename: lock_failed\", err);\n        return err;\n    }\n\n    lfs_rename_log_probe(lfs, \"lfs_rename: locked\", 0);\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n\n    /* Log state immediately before unlock to capture values that should remain unchanged\n       if LFS_UNLOCK expands to a no-op ((void)cfg). */\n    lfs_rename_log_probe(lfs, \"lfs_rename: before_unlock\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log state immediately after unlock to demonstrate that nothing observable changed. */\n    lfs_rename_log_probe(lfs, \"lfs_rename: after_unlock\", err);\n\n    return err;\n}\n"
}