{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the code passes &newpath (the address of the function parameter newpath) to lfs_dir_find, which may update the pointer (advance it). That modifies the function parameter variable newpath (the pointer itself), which breaches MISRA C 2023 Rule 17.8. The pointed-to characters remain const, but the pointer value is being changed. A compliant approach is to copy the parameter to a local pointer (e.g. const char *p = newpath) and pass &p instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1027.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers: write trace messages to /tmp/logs/1027.txt */\nstatic void probe_write(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/1027.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic const char *safe_str(const char *s) {\n    return s ? s : \"(null)\";\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log entry on early return */\n        probe_write(\"[lfs_rename] lock failed: err=%d, lfs=%p, oldpath=%s, newpath=%s, &newpath=%p, newpath_val=%p\",\n            err, (void*)lfs, safe_str(oldpath), safe_str(newpath), (void*)&newpath, (void*)newpath);\n        return err;\n    }\n\n    /* Log initial state of parameters and their addresses */\n    probe_write(\"[lfs_rename] enter: lfs=%p, oldpath=%s, newpath=%s, &oldpath=%p, &newpath=%p, newpath_val=%p\",\n        (void*)lfs, safe_str(oldpath), safe_str(newpath), (void*)&oldpath, (void*)&newpath, (void*)newpath);\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    /* Create a local copy of the pointer for callers that may take the address of a pointer.\n       This preserves the original parameter value and allows us to detect if the parameter\n       itself is modified by deeper calls (indicating a potential Rule 17.8 violation). */\n    const char *local_newpath = newpath;\n    probe_write(\"[lfs_rename] before lfs_rename_: &newpath=%p newpath_val=%p &local_newpath=%p local_newpath_val=%p\",\n        (void*)&newpath, (void*)newpath, (void*)&local_newpath, (void*)local_newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    /* Log state after the call to detect if the parameter pointer was modified by callee */\n    probe_write(\"[lfs_rename] after lfs_rename_: err=%d, &newpath=%p, newpath_val=%p, &local_newpath=%p, local_newpath_val=%p\",\n        err, (void*)&newpath, (void*)newpath, (void*)&local_newpath, (void*)local_newpath);\n\n    /* If the parameter pointer has changed, log a clear diagnostic for reproduction/evidence */\n    if (newpath != local_newpath) {\n        probe_write(\"[lfs_rename] WARNING: newpath pointer value changed by called code! original(local_newpath)=%p current(newpath)=%p\",\n            (void*)local_newpath, (void*)newpath);\n    } else {\n        probe_write(\"[lfs_rename] OK: newpath pointer unchanged by called code.\");\n    }\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}