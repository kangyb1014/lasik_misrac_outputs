{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the function lfs_rename_ takes parameter 'const char *oldpath' and then passes its address (&oldpath) to lfs_dir_find. That allows lfs_dir_find to modify the pointer variable oldpath (e.g. advance it to subsequent path components). Rule 17.8 forbids modifying a function parameter itself (the pointer), even though the object pointed to may be modified. Therefore this usage violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1027.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "static void lfs1027_log_state(const char *tag, lfs_t *lfs, const char *oldpath, const char *newpath, int err) {\n    FILE *f = fopen(\"/tmp/logs/1027.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log tag, lfs pointer, pointer values and addresses, string contents if available, and current error code */\n    fprintf(f, \"%s: lfs=%p, oldpath_ptr=%p, &oldpath=%p, oldpath_str=\\\"%s\\\", newpath_ptr=%p, &newpath=%p, newpath_str=\\\"%s\\\", err=%d\\n\",\n            tag,\n            (void*)lfs,\n            (void*)oldpath,\n            (void*)&oldpath,\n            oldpath ? oldpath : \"(null)\",\n            (void*)newpath,\n            (void*)&newpath,\n            newpath ? newpath : \"(null)\",\n            err);\n    fclose(f);\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early lock failure */\n        lfs1027_log_state(\"lfs_rename:lock_failed\", lfs, oldpath, newpath, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    /* Log state just before delegating to lfs_rename_ to help reproduce pointer modification inside the callee. */\n    lfs1027_log_state(\"lfs_rename:before_call\", lfs, oldpath, newpath, 0);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    /* Log state immediately after the call so that any observable changes to pointers or results are recorded. */\n    lfs1027_log_state(\"lfs_rename:after_call\", lfs, oldpath, newpath, err);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}