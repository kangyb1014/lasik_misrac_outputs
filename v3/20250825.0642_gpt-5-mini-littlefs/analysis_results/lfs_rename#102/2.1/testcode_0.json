{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so LFS_LOCK(lfs->cfg) always evaluates to 0. In lfs_rename the following branch is therefore never taken: 'if (err) { return err; }' \u2014 that return is unreachable. This constitutes unreachable code in the project and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1021.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append control-flow and state information to /tmp/logs/1021.txt */\nstatic void lfs_probe_log(const char *event, lfs_t *lfs, const char *oldpath, const char *newpath, int err) {\n    FILE *f = fopen(\"/tmp/logs/1021.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log event, pointers and relevant state. Keep formatting simple and robust. */\n    fprintf(f, \"%s: lfs=%p cfg=%p old=\\\"%s\\\" new=\\\"%s\\\" err=%d\\n\",\n            event,\n            (void*)lfs,\n            (void*)(lfs ? lfs->cfg : NULL),\n            oldpath ? oldpath : \"(null)\",\n            newpath ? newpath : \"(null)\",\n            err);\n    fclose(f);\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after attempting to acquire the lock. */\n    lfs_probe_log(\"after_LFS_LOCK\", lfs, oldpath, newpath, err);\n\n    if (err) {\n        /* If this branch ever executes, record that fact and the error value. */\n        lfs_probe_log(\"lock_failed_before_return\", lfs, oldpath, newpath, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    /* Probe after the core rename operation to record its result. */\n    lfs_probe_log(\"after_lfs_rename_\", lfs, oldpath, newpath, err);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe before returning to capture the return value and state. */\n    lfs_probe_log(\"before_return\", lfs, oldpath, newpath, err);\n\n    return err;\n}\n"
}