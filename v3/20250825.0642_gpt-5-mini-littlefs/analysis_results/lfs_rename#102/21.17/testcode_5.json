{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_size_t namelen = strcspn(name, \"/\"); can read bytes until a NUL terminator is found. If the pointer 'name' does not point to a valid NUL-terminated string (for example a caller passes a non-terminated buffer or a pointer near the end of its object with no '\\0' within bounds), strcspn will scan past the object boundary and cause out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1029.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n\n/* Probe helpers: append lightweight logs about control flow and pointer state.\n   These helpers avoid dereferencing the path pointers (they only log addresses)\n   so they do not introduce additional out-of-bounds string accesses.\n*/\nstatic void probe_ensure_logdir(void) {\n    /* best-effort create directory /tmp/logs; ignore errors if it exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void probe_log_enter(void *lfs_ptr, const char *oldpath, const char *newpath) {\n    probe_ensure_logdir();\n    FILE *f = fopen(\"/tmp/logs/1029.txt\", \"a\");\n    if (!f) return;\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] ENTER lfs_rename: lfs=%p, oldpath=%p, newpath=%p\\n\", (long)t, lfs_ptr, (void*)oldpath, (void*)newpath);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_log_before_call(void *lfs_ptr, const char *oldpath, const char *newpath) {\n    FILE *f = fopen(\"/tmp/logs/1029.txt\", \"a\");\n    if (!f) return;\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] BEFORE lfs_rename_: lfs=%p, oldpath=%p, newpath=%p\\n\", (long)t, lfs_ptr, (void*)oldpath, (void*)newpath);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_log_exit(void *lfs_ptr, const char *oldpath, const char *newpath, int err) {\n    FILE *f = fopen(\"/tmp/logs/1029.txt\", \"a\");\n    if (!f) return;\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] EXIT lfs_rename: lfs=%p, oldpath=%p, newpath=%p, err=%d\\n\", (long)t, lfs_ptr, (void*)oldpath, (void*)newpath, err);\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Log entry with pointer addresses (do not dereference the path pointers here).\n       This allows post-mortem reproduction: if a subsequent string operation reads\n       past the object bounds (e.g. strcspn inside lfs_rename_), the log contains\n       the pointer values and timing information for correlation.\n    */\n    probe_log_enter((void*)lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    /* Log just before delegating to the implementation.\n       This gives a clear marker immediately before the potentially-unsafe call.\n    */\n    probe_log_before_call((void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    probe_log_exit((void*)lfs, oldpath, newpath, err);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}