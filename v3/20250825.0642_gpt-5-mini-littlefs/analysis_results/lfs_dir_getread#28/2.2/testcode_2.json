{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment diff = lfs_min(diff, rcache->off-off); (inside the rcache else branch) is dead. When rcache->block == LFS_BLOCK_INLINE and off < rcache->off the code falls through to loading the cache (rcache is reinitialized and read with lfs_dir_getslice) and no use of diff occurs before the next loop iteration (where diff is re-initialized). Therefore removing this assignment would not affect program behaviour for that path, making it dead code and violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getread:\n```c\nstatic int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t off, void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && pcache->block == LFS_BLOCK_INLINE &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (rcache->block == LFS_BLOCK_INLINE &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        // load to cache, first condition can no longer fail\n        rcache->block = LFS_BLOCK_INLINE;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),\n                lfs->cfg->cache_size);\n        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,\n                rcache->off, rcache->buffer, rcache->size);\n        if (err < 0) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getread code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/282.txt */\nstatic void lfs_log_probe(const char *msg, lfs_off_t off, lfs_size_t size,\n        lfs_size_t diff, const lfs_cache_t *pcache, const lfs_cache_t *rcache,\n        lfs_size_t hint) {\n    FILE *f = fopen(\"/tmp/logs/282.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"EVENT: %s\\n\", msg);\n    fprintf(f, \"  off=%jd size=%zu diff=%zu hint=%zu\\n\", (intmax_t)off, (size_t)size, (size_t)diff, (size_t)hint);\n    if (pcache) {\n        fprintf(f, \"  pcache: addr=%p block=%d off=%jd size=%zu\\n\",\n                (const void*)pcache, (int)pcache->block, (intmax_t)pcache->off, (size_t)pcache->size);\n    } else {\n        fprintf(f, \"  pcache: NULL\\n\");\n    }\n    if (rcache) {\n        fprintf(f, \"  rcache: addr=%p block=%d off=%jd size=%zu\\n\",\n                (const void*)rcache, (int)rcache->block, (intmax_t)rcache->off, (size_t)rcache->size);\n    } else {\n        fprintf(f, \"  rcache: NULL\\n\");\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t off, void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size) {\n        lfs_log_probe(\"corrupt_range\", off, size, 0, pcache, rcache, hint);\n        return LFS_ERR_CORRUPT;\n    }\n\n    lfs_log_probe(\"enter_lfs_dir_getread\", off, size, 0, pcache, rcache, hint);\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && pcache->block == LFS_BLOCK_INLINE &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                /* is already in pcache? */\n                lfs_log_probe(\"pcache_hit_before\", off, size, diff, pcache, rcache, hint);\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                lfs_log_probe(\"pcache_hit_after\", off, size, diff, pcache, rcache, hint);\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                lfs_log_probe(\"pcache_continue\", off, size, diff, pcache, rcache, hint);\n                continue;\n            }\n\n            /* pcache takes priority */\n            lfs_log_probe(\"pcache_gap_branch\", off, size, diff, pcache, rcache, hint);\n            diff = lfs_min(diff, pcache->off-off);\n            lfs_log_probe(\"pcache_gap_after\", off, size, diff, pcache, rcache, hint);\n        }\n\n        if (rcache->block == LFS_BLOCK_INLINE &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                /* is already in rcache? */\n                lfs_log_probe(\"rcache_hit_before\", off, size, diff, pcache, rcache, hint);\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                lfs_log_probe(\"rcache_hit_after\", off, size, diff, pcache, rcache, hint);\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                lfs_log_probe(\"rcache_continue\", off, size, diff, pcache, rcache, hint);\n                continue;\n            }\n\n            /* rcache takes priority */\n            lfs_log_probe(\"rcache_gap_branch_before_assign\", off, size, diff, pcache, rcache, hint);\n            diff = lfs_min(diff, rcache->off-off);\n            lfs_log_probe(\"rcache_gap_branch_after_assign\", off, size, diff, pcache, rcache, hint);\n        }\n\n        /* load to cache, first condition can no longer fail */\n        lfs_log_probe(\"before_reload_rcache\", off, size, diff, pcache, rcache, hint);\n        rcache->block = LFS_BLOCK_INLINE;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),\n                lfs->cfg->cache_size);\n        lfs_log_probe(\"after_reload_rcache\", off, size, diff, pcache, rcache, hint);\n        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,\n                rcache->off, rcache->buffer, rcache->size);\n        lfs_log_probe(\"after_getslice\", off, size, diff, pcache, rcache, hint);\n        if (err < 0) {\n            lfs_log_probe(\"getslice_error\", off, size, diff, pcache, rcache, hint);\n            return err;\n        }\n    }\n\n    lfs_log_probe(\"exit_lfs_dir_getread_success\", off, 0, 0, pcache, rcache, hint);\n    return 0;\n}\n"
}