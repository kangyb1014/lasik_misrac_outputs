{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment modifies the value parameters 'off' and 'size' (off += diff; size -= diff), which are function parameters and thus shall not be modified under MISRA C 2023 Rule 17.8. (Modifying the local pointer 'data' is acceptable, and modifying objects pointed to by pointer parameters is allowed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/287.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getread:\n```c\nstatic int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t off, void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && pcache->block == LFS_BLOCK_INLINE &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (rcache->block == LFS_BLOCK_INLINE &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        // load to cache, first condition can no longer fail\n        rcache->block = LFS_BLOCK_INLINE;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),\n                lfs->cfg->cache_size);\n        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,\n                rcache->off, rcache->buffer, rcache->size);\n        if (err < 0) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/287.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t off, void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n\n    /* Log entry state */\n    lfs_probe_log(\"ENTER lfs_dir_getread: off=%lld size=%llu hint=%llu gmask=0x%08x gtag=0x%08x\\n\",\n            (long long)off, (unsigned long long)size,\n            (unsigned long long)hint, (unsigned)gmask, (unsigned)gtag);\n\n    if (off+size > lfs->cfg->block_size) {\n        lfs_probe_log(\"RETURN LFS_ERR_CORRUPT: off+size=%lld > block_size=%llu\\n\",\n                (long long)(off+size), (unsigned long long)lfs->cfg->block_size);\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && pcache->block == LFS_BLOCK_INLINE &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                /* is already in pcache? */\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                /* Log values before modifying off and size */\n                lfs_probe_log(\"PCACHE HIT before modify: off=%lld size=%llu diff=%llu\\n\",\n                        (long long)off, (unsigned long long)size, (unsigned long long)diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n\n                /* Log values after modification */\n                lfs_probe_log(\"PCACHE HIT after modify: off=%lld size=%llu\\n\",\n                        (long long)off, (unsigned long long)size);\n\n                continue;\n            }\n\n            /* pcache takes priority */\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (rcache->block == LFS_BLOCK_INLINE &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                /* is already in rcache? */\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                /* Log values before modifying off and size */\n                lfs_probe_log(\"RCACHE HIT before modify: off=%lld size=%llu diff=%llu\\n\",\n                        (long long)off, (unsigned long long)size, (unsigned long long)diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n\n                /* Log values after modification */\n                lfs_probe_log(\"RCACHE HIT after modify: off=%lld size=%llu\\n\",\n                        (long long)off, (unsigned long long)size);\n\n                continue;\n            }\n\n            /* rcache takes priority */\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        /* load to cache, first condition can no longer fail */\n        rcache->block = LFS_BLOCK_INLINE;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),\n                lfs->cfg->cache_size);\n\n        /* Log rcache load information and current off/size */\n        lfs_probe_log(\"LOADING RCACHE: rcache->off=%lld rcache->size=%llu current off=%lld size=%llu hint=%llu\\n\",\n                (long long)rcache->off, (unsigned long long)rcache->size,\n                (long long)off, (unsigned long long)size, (unsigned long long)hint);\n\n        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,\n                rcache->off, rcache->buffer, rcache->size);\n        if (err < 0) {\n            lfs_probe_log(\"RETURN err from lfs_dir_getslice: %d\\n\", err);\n            return err;\n        }\n    }\n\n    lfs_probe_log(\"EXIT lfs_dir_getread: off=%lld size=%llu\\n\",\n            (long long)off, (unsigned long long)size);\n\n    return 0;\n}\n"
}