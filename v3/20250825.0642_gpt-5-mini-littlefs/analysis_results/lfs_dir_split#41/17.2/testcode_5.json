{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls a function pointer cb from lfs_dir_traverse: res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer); If cb is a callback that itself invokes lfs_dir_traverse (for example the commit/filter callbacks used elsewhere, e.g. lfs_dir_commit_commit or related filter callbacks), this creates an indirect recursion chain lfs_dir_traverse -> cb -> lfs_dir_traverse. The source comments explicitly describe nested traversals (traverse with commit -> traverse with filter -> traverse with move -> traverse with filter), demonstrating that such indirect calls can and do occur.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_split code that contains useful probe functions that print useful logs to a file \"/tmp/logs/416.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_split as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_split:\n```c\nstatic int lfs_dir_split(lfs_t *lfs,\n        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t split, uint16_t end) {\n    // create tail metadata pair\n    lfs_mdir_t tail;\n    int err = lfs_dir_alloc(lfs, &tail);\n    if (err) {\n        return err;\n    }\n\n    tail.split = dir->split;\n    tail.tail[0] = dir->tail[0];\n    tail.tail[1] = dir->tail[1];\n\n    // note we don't care about LFS_OK_RELOCATED\n    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n    if (res < 0) {\n        return res;\n    }\n\n    dir->tail[0] = tail.pair[0];\n    dir->tail[1] = tail.pair[1];\n    dir->split = true;\n\n    // update root if needed\n    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {\n        lfs->root[0] = tail.pair[0];\n        lfs->root[1] = tail.pair[1];\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_split code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/416.txt\n * Keep this small and self-contained so it can be compiled into the\n * existing project without changing program logic. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/416.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_split(lfs_t *lfs,\n        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t split, uint16_t end) {\n    lfs_probe_log(\"ENTER lfs_dir_split: lfs=%p, dir=%p, source=%p, split=%u, end=%u, attrcount=%d\",\n            (void*)lfs, (void*)dir, (void*)source, (unsigned)split, (unsigned)end, attrcount);\n\n    /* create tail metadata pair */\n    lfs_mdir_t tail;\n\n    /* log initial dir state (before allocation/compaction) */\n    lfs_probe_log(\"BEFORE alloc: dir->split=%d, dir->tail[0]=%llu, dir->tail[1]=%llu, dir->pair[0]=%llu, dir->pair[1]=%llu\",\n            (int)dir->split,\n            (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1],\n            (unsigned long long)dir->pair[0], (unsigned long long)dir->pair[1]);\n\n    int err = lfs_dir_alloc(lfs, &tail);\n    lfs_probe_log(\"lfs_dir_alloc returned err=%d\", err);\n    if (err) {\n        lfs_probe_log(\"EXIT lfs_dir_split (alloc error): err=%d\", err);\n        return err;\n    }\n\n    /* Log tail state after allocation (fields may be initialized by alloc)\n     * We avoid assuming specifics beyond what the code uses. */\n    lfs_probe_log(\"AFTER alloc: tail.split=%d, tail.tail[0]=%llu, tail.tail[1]=%llu\",\n            (int)tail.split,\n            (unsigned long long)tail.tail[0], (unsigned long long)tail.tail[1]);\n\n    tail.split = dir->split;\n    tail.tail[0] = dir->tail[0];\n    tail.tail[1] = dir->tail[1];\n\n    lfs_probe_log(\"AFTER copy from dir: tail.split=%d, tail.tail[0]=%llu, tail.tail[1]=%llu\",\n            (int)tail.split,\n            (unsigned long long)tail.tail[0], (unsigned long long)tail.tail[1]);\n\n    /* note we don't care about LFS_OK_RELOCATED */\n    lfs_probe_log(\"CALL lfs_dir_compact: attrs=%p, attrcount=%d, source=%p, split=%u, end=%u\",\n            (const void*)attrs, attrcount, (void*)source, (unsigned)split, (unsigned)end);\n\n    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n    lfs_probe_log(\"lfs_dir_compact returned res=%d\", res);\n    if (res < 0) {\n        lfs_probe_log(\"EXIT lfs_dir_split (compact error): res=%d\", res);\n        return res;\n    }\n\n    dir->tail[0] = tail.pair[0];\n    dir->tail[1] = tail.pair[1];\n    dir->split = true;\n\n    lfs_probe_log(\"AFTER apply tail: dir->tail[0]=%llu, dir->tail[1]=%llu, dir->split=%d\",\n            (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1], (int)dir->split);\n\n    /* update root if needed */\n    int cmp = lfs_pair_cmp(dir->pair, lfs->root);\n    lfs_probe_log(\"CHECK root update: cmp(lfs_pair_cmp(dir->pair, lfs->root))=%d, split=%u\",\n            cmp, (unsigned)split);\n    if (cmp == 0 && split == 0) {\n        lfs_probe_log(\"UPDATING lfs->root: old root[0]=%llu, old root[1]=%llu -> new tail.pair[0]=%llu, tail.pair[1]=%llu\",\n                (unsigned long long)lfs->root[0], (unsigned long long)lfs->root[1],\n                (unsigned long long)tail.pair[0], (unsigned long long)tail.pair[1]);\n\n        lfs->root[0] = tail.pair[0];\n        lfs->root[1] = tail.pair[1];\n\n        lfs_probe_log(\"AFTER root update: lfs->root[0]=%llu, lfs->root[1]=%llu\",\n                (unsigned long long)lfs->root[0], (unsigned long long)lfs->root[1]);\n    }\n\n    lfs_probe_log(\"EXIT lfs_dir_split: return 0\");\n    return 0;\n}\n"
}