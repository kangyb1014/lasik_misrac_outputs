{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'source' is declared as lfs_mdir_t *source but is not modified inside lfs_dir_split: it is only passed to lfs_dir_compact. If lfs_dir_compact does not modify the pointed-to lfs_mdir_t, then 'source' could and should be declared as const lfs_mdir_t *source. In that case Rule 8.13 is violated because a pointer that could point to a const-qualified type is not const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_split code that contains useful probe functions that print useful logs to a file \"/tmp/logs/413.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_split as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_split:\n```c\nstatic int lfs_dir_split(lfs_t *lfs,\n        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t split, uint16_t end) {\n    // create tail metadata pair\n    lfs_mdir_t tail;\n    int err = lfs_dir_alloc(lfs, &tail);\n    if (err) {\n        return err;\n    }\n\n    tail.split = dir->split;\n    tail.tail[0] = dir->tail[0];\n    tail.tail[1] = dir->tail[1];\n\n    // note we don't care about LFS_OK_RELOCATED\n    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n    if (res < 0) {\n        return res;\n    }\n\n    dir->tail[0] = tail.pair[0];\n    dir->tail[1] = tail.pair[1];\n    dir->split = true;\n\n    // update root if needed\n    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {\n        lfs->root[0] = tail.pair[0];\n        lfs->root[1] = tail.pair[1];\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_split code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helpers to log raw memory of lfs_mdir_t and control flow.\n   These are intentionally conservative: they dump the raw bytes of the\n   structure so we don't need to hard-code any of its fields and so we\n   can detect whether the memory pointed-to by `source` was modified by\n   lfs_dir_compact.\n*/\nstatic void lfs_dir_split_log_blob(const char *tag, const void *ptr, size_t len) {\n    FILE *f = fopen(\"/tmp/logs/413.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"--- %s: ptr=%p len=%zu ---\\n\", tag, ptr, (size_t)len);\n    if (ptr == NULL || len == 0) {\n        fprintf(f, \"(null or zero length)\\n\");\n        fclose(f);\n        return;\n    }\n\n    const unsigned char *p = (const unsigned char*)ptr;\n    for (size_t i = 0; i < len; i++) {\n        fprintf(f, \"%02x\", p[i]);\n        if ((i + 1) % 16 == 0) {\n            fprintf(f, \"\\n\");\n        } else if ((i + 1) % 2 == 0) {\n            fprintf(f, \" \");\n        }\n    }\n    if (len % 16) fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nstatic void lfs_dir_split_log_mdir(const char *tag, const void *mdir) {\n    /* We log the raw sizeof(lfs_mdir_t) bytes. Using sizeof on the\n       pointed-to type keeps compatibility with existing typedefs. */\n    lfs_dir_split_log_blob(tag, mdir, sizeof(*(const void*)mdir));\n}\n\n/* Note: The above sizeof trick uses the pointer type only for size;\n   however some compilers may warn. To avoid type issues while still\n   not repeating the full struct definition, we'll use a safer wrapper\n   that expects the real type at call sites. */\n\n/* Modified lfs_dir_split with probes inserted. */\nstatic int lfs_dir_split(lfs_t *lfs,\n        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t split, uint16_t end) {\n    /* Log entry and key arguments */\n    {\n        FILE *f = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_split ENTRY: lfs=%p dir=%p source=%p split=%u end=%u attrcount=%d attrs=%p\\n\",\n                    (void*)lfs, (void*)dir, (void*)source, (unsigned)split, (unsigned)end, attrcount, (void*)attrs);\n            fclose(f);\n        }\n    }\n\n    /* create tail metadata pair */\n    lfs_mdir_t tail;\n    int err = lfs_dir_alloc(lfs, &tail);\n    if (err) {\n        FILE *f = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_split: lfs_dir_alloc failed err=%d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* Log dir and newly allocated tail raw bytes before modification */\n    lfs_dir_split_log_blob(\"dir_before\", dir, sizeof(*dir));\n    lfs_dir_split_log_blob(\"tail_alloc_before\", &tail, sizeof(tail));\n    lfs_dir_split_log_blob(\"source_before\", source, sizeof(*source));\n\n    tail.split = dir->split;\n    tail.tail[0] = dir->tail[0];\n    tail.tail[1] = dir->tail[1];\n\n    /* note we don't care about LFS_OK_RELOCATED */\n    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n\n    /* Log result and state after call to lfs_dir_compact */\n    {\n        FILE *f = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_compact returned res=%d\\n\", res);\n            fclose(f);\n        }\n    }\n    lfs_dir_split_log_blob(\"tail_after\", &tail, sizeof(tail));\n    lfs_dir_split_log_blob(\"source_after\", source, sizeof(*source));\n\n    if (res < 0) {\n        FILE *f = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_split: lfs_dir_compact failed res=%d\\n\", res);\n            fclose(f);\n        }\n        return res;\n    }\n\n    dir->tail[0] = tail.pair[0];\n    dir->tail[1] = tail.pair[1];\n    dir->split = true;\n\n    /* update root if needed */\n    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {\n        lfs->root[0] = tail.pair[0];\n        lfs->root[1] = tail.pair[1];\n    }\n\n    /* Log final dir and root state */\n    lfs_dir_split_log_blob(\"dir_after\", dir, sizeof(*dir));\n    lfs_dir_split_log_blob(\"lfs_root_after\", lfs->root, sizeof(lfs->root));\n\n    {\n        FILE *f = fopen(\"/tmp/logs/413.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_split EXIT: returned 0\\n\");\n            fclose(f);\n        }\n    }\n\n    return 0;\n}\n"
}