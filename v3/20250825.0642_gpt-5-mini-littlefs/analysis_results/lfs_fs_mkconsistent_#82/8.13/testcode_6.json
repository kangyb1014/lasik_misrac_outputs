{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the lfs_gstate_xor function is declared with a non-const pointer for its source operand (for example: void lfs_gstate_xor(lfs_gstate_t *dst, lfs_gstate_t *src)) but the function does not modify the second argument, then this use (lfs_gstate_xor(&delta, &lfs->gstate)) violates MISRA C 2023 Rule 8.13. The second parameter should be const-qualified (const lfs_gstate_t *src) to indicate it is not modified. Note: the call site alone cannot prove the violation \u2014 the violation depends on the function\u2019s parameter declarations/behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/823.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent_:\n```c\nstatic int lfs_fs_mkconsistent_(lfs_t *lfs) {\n    // lfs_fs_forceconsistency does most of the work here\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    // do we have any pending gstate?\n    lfs_gstate_t delta = {0};\n    lfs_gstate_xor(&delta, &lfs->gdisk);\n    lfs_gstate_xor(&delta, &lfs->gstate);\n    if (!lfs_gstate_iszero(&delta)) {\n        // lfs_dir_commit will implicitly write out any pending gstate\n        lfs_mdir_t root;\n        err = lfs_dir_fetch(lfs, &root, lfs->root);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/*\n * Probe helpers: write hex dumps and control-flow logs to /tmp/logs/823.txt.\n * These helpers are designed to be non-intrusive and preserve original logic.\n */\nstatic void lfs_ensure_log_dir(void) {\n    /* best-effort create directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void lfs_log_raw(const char *msg, const void *buf, size_t len) {\n    lfs_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/823.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s (len=%zu)\\n\", msg, len);\n    const unsigned char *p = (const unsigned char *)buf;\n    for (size_t i = 0; i < len; i++) {\n        fprintf(f, \"%02X\", p[i]);\n        if ((i & 0xF) == 0xF) {\n            fprintf(f, \"\\n\");\n        } else if (i + 1 < len) {\n            fprintf(f, \" \");\n        }\n    }\n    fprintf(f, \"\\n---\\n\");\n    fclose(f);\n}\n\nstatic void lfs_log_msg(const char *msg) {\n    lfs_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/823.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\n/*\n * Dump an lfs_gstate_t value. Use const pointer to avoid implying modification.\n * The type lfs_gstate_t must be visible where this file is compiled.\n */\nstatic void lfs_dump_gstate(const char *label, const void *gstate, size_t size) {\n    char buf[256];\n    /* small label + size message for context */\n    (void)snprintf(buf, sizeof(buf), \"%s\", label);\n    lfs_log_raw(buf, gstate, size);\n}\n\nstatic int lfs_fs_mkconsistent_(lfs_t *lfs) {\n    /* log entry */\n    lfs_log_msg(\"ENTER lfs_fs_mkconsistent_\");\n\n    /* lfs_fs_forceconsistency does most of the work here */\n    int err = lfs_fs_forceconsistency(lfs);\n    {\n        char buf[80];\n        (void)snprintf(buf, sizeof(buf), \"lfs_fs_forceconsistency returned %d\", err);\n        lfs_log_msg(buf);\n    }\n    if (err) {\n        lfs_log_msg(\"EXIT lfs_fs_mkconsistent_: early return due to forceconsistency error\");\n        return err;\n    }\n\n    /* do we have any pending gstate? */\n    lfs_gstate_t delta = {0};\n\n    /* dump initial states */\n    lfs_dump_gstate(\"initial delta\", &delta, sizeof(delta));\n    lfs_dump_gstate(\"lfs->gdisk before xor\", &lfs->gdisk, sizeof(lfs->gdisk));\n    lfs_dump_gstate(\"lfs->gstate before xor\", &lfs->gstate, sizeof(lfs->gstate));\n\n    /* first xor: dst=delta, src=gdisk */\n    lfs_log_msg(\"CALL lfs_gstate_xor(&delta, &lfs->gdisk) -- before\");\n    lfs_gstate_xor(&delta, &lfs->gdisk);\n    lfs_log_msg(\"CALL lfs_gstate_xor(&delta, &lfs->gdisk) -- after\");\n\n    /* dump after first xor to detect unintended modification of src */\n    lfs_dump_gstate(\"delta after xor with gdisk\", &delta, sizeof(delta));\n    lfs_dump_gstate(\"lfs->gdisk after xor\", &lfs->gdisk, sizeof(lfs->gdisk));\n\n    /* second xor: dst=delta, src=gstate */\n    lfs_log_msg(\"CALL lfs_gstate_xor(&delta, &lfs->gstate) -- before\");\n    lfs_gstate_xor(&delta, &lfs->gstate);\n    lfs_log_msg(\"CALL lfs_gstate_xor(&delta, &lfs->gstate) -- after\");\n\n    /* dump after second xor to detect unintended modification of src */\n    lfs_dump_gstate(\"delta after xor with gstate\", &delta, sizeof(delta));\n    lfs_dump_gstate(\"lfs->gstate after xor\", &lfs->gstate, sizeof(lfs->gstate));\n\n    if (!lfs_gstate_iszero(&delta)) {\n        lfs_log_msg(\"delta is non-zero: will attempt dir fetch/commit\");\n\n        /* lfs_dir_commit will implicitly write out any pending gstate */\n        lfs_mdir_t root;\n        err = lfs_dir_fetch(lfs, &root, lfs->root);\n        {\n            char buf[80];\n            (void)snprintf(buf, sizeof(buf), \"lfs_dir_fetch returned %d\", err);\n            lfs_log_msg(buf);\n        }\n        if (err) {\n            lfs_log_msg(\"EXIT lfs_fs_mkconsistent_: early return due to dir_fetch error\");\n            return err;\n        }\n\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        {\n            char buf[80];\n            (void)snprintf(buf, sizeof(buf), \"lfs_dir_commit returned %d\", err);\n            lfs_log_msg(buf);\n        }\n        if (err) {\n            lfs_log_msg(\"EXIT lfs_fs_mkconsistent_: early return due to dir_commit error\");\n            return err;\n        }\n    } else {\n        lfs_log_msg(\"delta is zero: no commit required\");\n    }\n\n    lfs_log_msg(\"EXIT lfs_fs_mkconsistent_: success (0)\");\n    return 0;\n}\n"
}