{
  "user_message": "An agent A claimed that the following lfs_commitattr code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_commitattr.\n```c\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes the address of the parameter 'path' (&path) to lfs_dir_find. If lfs_dir_find writes through that pointer (e.g. updates *path to advance the path pointer), it modifies the function parameter 'path' itself. MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer value); therefore this usage violates the rule when the callee changes the pointer value (common when lfs_dir_find updates the path to the next segment).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=65 buffer_ptr=0x56275fb17462 size=4\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=65, size=4, buffer_ptr=0x56275fb17462\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=66 buffer_ptr=0x56275fb17467 size=6\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=66, size=6, buffer_ptr=0x56275fb17467\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=67 buffer_ptr=0x56275fb1746e size=5\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=67, size=5, buffer_ptr=0x56275fb1746e\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=66 buffer_ptr=0x56275fb1afe1 size=0\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=66, size=0, buffer_ptr=0x56275fb1afe1\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=66 buffer_ptr=(nil) size=1023\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=66, size=1023, buffer_ptr=(nil)\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=66 buffer_ptr=0x56275fb17474 size=6\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=66, size=6, buffer_ptr=0x56275fb17474\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=66 buffer_ptr=0x56275fb1bba4 size=3\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=66, size=3, buffer_ptr=0x56275fb1bba4\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=66 buffer_ptr=0x56275fb1747b size=9\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=66, size=9, buffer_ptr=0x56275fb1747b\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=65 buffer_ptr=0x56275fb17462 size=4\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, type=65, size=4, buffer_ptr=0x56275fb17462\nlfs_commitattr: lfs_dir_commit returned 0\nlfs_commitattr: ENTER path_ptr=0x56275fb18d12 path_str=\"hello\" type=66 buffer_ptr=0x56275fb17467 size=6\nlfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=0x7ffeacab7eb8\nlfs_commitattr: AFTER lfs_dir_find tag=2098181 path_ptr=0x56275fb18d12 path_str=\"hello\"\nlfs_commitattr: calling lfs_dir_commit with id=1, typ\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified; for pointer parameters this means the pointer value itself must not be changed (the object pointed to may be). In lfs_commitattr the parameter is declared as const char *path and the code passes &path to lfs_dir_find. If lfs_dir_find writes through that argument (e.g. updates *path to advance the path pointer), that is a modification of the function parameter path itself and therefore violates Rule 17.8. Even if the provided execution log shows the path value unchanged at runtime, the code as written gives the callee the ability to modify the parameter, so it is non\u2011compliant. Recommended fix: copy the parameter to a local variable (e.g. const char *local_path = path) and pass &local_path to lfs_dir_find, leaving the formal parameter unmodified."
}