{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes the address of the parameter 'path' (&path) to lfs_dir_find. If lfs_dir_find writes through that pointer (e.g. updates *path to advance the path pointer), it modifies the function parameter 'path' itself. MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer value); therefore this usage violates the rule when the callee changes the pointer value (common when lfs_dir_find updates the path to the next segment).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_commitattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/97.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_commitattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_commitattr:\n```c\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n```\n</target_code>\nPlease provide the modified lfs_commitattr code.\n",
  "test_code": "#include <stdio.h>\n\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n\n    /* Probe: log entry state before calling lfs_dir_find */\n    FILE *f = fopen(\"/tmp/logs/97.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_commitattr: ENTER path_ptr=%p path_str=\\\"%s\\\" type=%u buffer_ptr=%p size=%lu\\n\",\n                (const void*)path, (path ? path : \"(null)\"), (unsigned)type,\n                buffer, (unsigned long)size);\n        fprintf(f, \"lfs_commitattr: will call lfs_dir_find(&cwd, &path, NULL) -- address_of_path=%p\\n\", (void*)&path);\n        fclose(f);\n    }\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n\n    /* Probe: log state after calling lfs_dir_find */\n    f = fopen(\"/tmp/logs/97.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_commitattr: AFTER lfs_dir_find tag=%ld path_ptr=%p path_str=\\\"%s\\\"\\n\",\n                (long)tag, (const void*)path, (path ? path : \"(null)\"));\n        fclose(f);\n    }\n\n    if (tag < 0) {\n        /* Probe: log early return due to error tag */\n        f = fopen(\"/tmp/logs/97.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_commitattr: returning early with tag=%ld\\n\", (long)tag);\n            fclose(f);\n        }\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        /* special case for root */\n        id = 0;\n\n        f = fopen(\"/tmp/logs/97.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_commitattr: id indicated root (0x3ff). Fetching root: lfs->root=%p\\n\", (void*)lfs->root);\n            fclose(f);\n        }\n\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n\n        f = fopen(\"/tmp/logs/97.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_commitattr: lfs_dir_fetch returned %d\\n\", err);\n            fclose(f);\n        }\n\n        if (err) {\n            /* Probe: log error return from lfs_dir_fetch */\n            f = fopen(\"/tmp/logs/97.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"lfs_commitattr: returning early with err=%d from lfs_dir_fetch\\n\", err);\n                fclose(f);\n            }\n            return err;\n        }\n    }\n\n    /* Probe: log before committing attributes */\n    f = fopen(\"/tmp/logs/97.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_commitattr: calling lfs_dir_commit with id=%u, type=%u, size=%lu, buffer_ptr=%p\\n\",\n                (unsigned)id, (unsigned)type, (unsigned long)size, buffer);\n        fclose(f);\n    }\n\n    int res = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n\n    /* Probe: log result of commit */\n    f = fopen(\"/tmp/logs/97.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_commitattr: lfs_dir_commit returned %d\\n\", res);\n        fclose(f);\n    }\n\n    return res;\n}\n"
}