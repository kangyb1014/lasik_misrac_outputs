{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: lfs_commitattr() -> lfs_dir_commit() -> lfs_dir_orphaningcommit() (contains the shown fragment) calls lfs_file_outline()/lfs_file_flush(), which may themselves perform a file commit that calls lfs_dir_commit() -> lfs_dir_orphaningcommit(). Thus lfs_dir_orphaningcommit could be reached again via lfs_file_outline()/lfs_file_flush(), producing indirect recursion (caller eventually invokes itself indirectly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_commitattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/96.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_commitattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_commitattr:\n```c\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n```\n</target_code>\nPlease provide the modified lfs_commitattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe/logger helper. Appends a timestamped log line to /tmp/logs/96.txt. */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/96.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(fp, \"[%ld] \", (long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_log_probe(\"ENTER lfs_commitattr: lfs=%p path=%s type=%u buffer=%p size=%llu\",\n            (void *)lfs, (path ? path : \"(null)\"), (unsigned)type,\n            buffer, (unsigned long long)size);\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    lfs_log_probe(\"lfs_dir_find returned tag=%lld\", (long long)tag);\n    if (tag < 0) {\n        lfs_log_probe(\"EXIT lfs_commitattr early: tag error=%lld\", (long long)tag);\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    lfs_log_probe(\"Computed id from tag: id=%u (raw tag=%lld)\", (unsigned)id, (long long)tag);\n    if (id == 0x3ff) {\n        /* special case for root */\n        id = 0;\n        lfs_log_probe(\"Special root case: id was 0x3ff, set id=0 and fetching root directory\");\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        lfs_log_probe(\"lfs_dir_fetch returned err=%d\", err);\n        if (err) {\n            lfs_log_probe(\"EXIT lfs_commitattr early: fetch error=%d\", err);\n            return err;\n        }\n    }\n\n    lfs_log_probe(\"About to call lfs_dir_commit: lfs=%p cwd=%p id=%u type=%u buffer=%p size=%llu\",\n            (void *)lfs, (void *)&cwd, (unsigned)id, (unsigned)type,\n            buffer, (unsigned long long)size);\n\n    int res = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n\n    lfs_log_probe(\"lfs_dir_commit returned res=%d; EXIT lfs_commitattr\", res);\n    return res;\n}\n"
}