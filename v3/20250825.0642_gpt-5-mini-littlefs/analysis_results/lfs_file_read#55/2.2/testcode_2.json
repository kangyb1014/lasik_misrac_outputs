{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), which performs a void-cast of its argument and has no side effects. In lfs_file_read it is executed as LFS_UNLOCK(lfs->cfg); but its removal would not change program behaviour, so this statement is dead code. Therefore Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/552.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/552.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/552.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log lock result and key state on entry */\n    lfs_probe_log(\"[probe] lfs_file_read ENTER: lfs=%p file=%p buffer=%p size=%\" PRIu32 \" err=%d cfg_field_addr=%p\",\n            (void*)lfs, (void*)file, buffer, (uint32_t)size, err, (void*)&lfs->cfg);\n\n    if (err) {\n        lfs_probe_log(\"[probe] lfs_file_read: early return due to lock error=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    lfs_probe_log(\"[probe] lfs_file_read: after lfs_file_read_: res=%\" PRId32, (int32_t)res);\n\n    /* Probe before calling LFS_UNLOCK to capture the argument expression/address */\n    lfs_probe_log(\"[probe] About to call LFS_UNLOCK(lfs->cfg) with cfg_field_addr=%p\",\n            (void*)&lfs->cfg);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe after unlock to show there's no observable state change from the unlock call */\n    lfs_probe_log(\"[probe] After LFS_UNLOCK: lfs=%p file=%p buffer=%p size=%\" PRIu32 \" res=%\" PRId32 \" cfg_field_addr=%p\",\n            (void*)lfs, (void*)file, buffer, (uint32_t)size, (int32_t)res, (void*)&lfs->cfg);\n\n    return res;\n}\n"
}