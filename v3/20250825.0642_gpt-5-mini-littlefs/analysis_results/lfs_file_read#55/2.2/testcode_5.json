{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg, 0). Therefore int err = LFS_LOCK(lfs->cfg); always assigns 0 to err, and the subsequent if (err) { return err; } can never be true. The assignment and conditional are executed but have no effect on program behaviour; removing them (and the macro expansion) would not change behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/552.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append control-flow and state info to /tmp/logs/552.txt */\nstatic void lfs_probe_log_lock_result(int err, void *lfs_ptr, void *file_ptr, void *buffer, unsigned long size) {\n    FILE *f = fopen(\"/tmp/logs/552.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_probe] LFS_LOCK result=%d, lfs=%p, file=%p, buffer=%p, size=%lu\\n\",\n            err, lfs_ptr, file_ptr, buffer, size);\n    fclose(f);\n}\n\nstatic void lfs_probe_log_branch_taken(const char *branch, int err) {\n    FILE *f = fopen(\"/tmp/logs/552.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_probe] branch '%s' taken (err=%d)\\n\", branch, err);\n    fclose(f);\n}\n\nstatic void lfs_probe_log_before_after_read(void *lfs_ptr, void *file_ptr, void *buffer, unsigned long size, long res_before, long res_after) {\n    FILE *f = fopen(\"/tmp/logs/552.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_probe] before read: lfs=%p, file=%p, buffer=%p, size=%lu, res_before=%ld\\n\",\n            lfs_ptr, file_ptr, buffer, size, res_before);\n    fprintf(f, \"[lfs_probe] after  read: res_after=%ld\\n\", res_after);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log the raw result of LFS_LOCK and call site information. */\n    lfs_probe_log_lock_result(err, (void*)lfs, (void*)file, buffer, (unsigned long)size);\n\n    if (err) {\n        /* Probe: record that the error branch was taken before returning. */\n        lfs_probe_log_branch_taken(\"LFS_LOCK failed\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe: record a marker before and after the internal read call. */\n    lfs_probe_log_before_after_read((void*)lfs, (void*)file, buffer, (unsigned long)size, -1, -1);\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    /* Update probe with the actual result. */\n    lfs_probe_log_before_after_read((void*)lfs, (void*)file, buffer, (unsigned long)size, -1, (long)res);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}