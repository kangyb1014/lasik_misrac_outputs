{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_mlist_isopen takes both head and node as non-const pointers although it only reads the list and does not modify any nodes. For example, the signature \"static bool lfs_mlist_isopen(struct lfs_mlist *head, struct lfs_mlist *node)\" and the declaration \"struct lfs_mlist **p = &head\" use non-const pointer types even though a traversal using a single pointer (e.g. \"const struct lfs_mlist *p = head; p = p->next;\") would allow head and node to be const-qualified. Therefore the parameters could (and should) be declared as const struct lfs_mlist *head and const struct lfs_mlist *node to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/553.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: logs control flow and pointer/state info to /tmp/logs/553.txt */\nstatic void lfs_probe_log_mlist(const char *stage, lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size) {\n    FILE *fp = fopen(\"/tmp/logs/553.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log key pointers and sizes. Note: we explicitly log that non-const pointers are used\n       when calling lfs_mlist_isopen to help reproduce the MISRA 8.13 scenario. */\n    fprintf(fp, \"%s: lfs=%p, file=%p, buffer=%p, size=%lu\\n\",\n            stage, (void*)lfs, (void*)file, buffer, (unsigned long)size);\n\n    /* Attempt to log the mlist pointer from lfs (guarded by null-check). */\n    if (lfs) {\n        /* lfs->mlist is expected to be of pointer type; cast to void* for printing. */\n        fprintf(fp, \"%s: lfs->mlist=%p\\n\", stage, (void*)lfs->mlist);\n    } else {\n        fprintf(fp, \"%s: lfs is NULL\\n\", stage);\n    }\n\n    fprintf(fp, \"%s: NOTE: calling lfs_mlist_isopen with non-const pointer types (possible MISRA 8.13 violation)\\n\", stage);\n    fclose(fp);\n}\n\nstatic void lfs_probe_log_isopen_result(const char *stage, int isopen) {\n    FILE *fp = fopen(\"/tmp/logs/553.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    fprintf(fp, \"%s: lfs_mlist_isopen returned %d\\n\", stage, isopen);\n    fclose(fp);\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n\n    /* Probe: log state just before checking that the file is open. This captures\n       the exact pointers passed into lfs_mlist_isopen and documents that they are\n       non-const pointer types (the reported MISRA violation scenario). */\n    lfs_probe_log_mlist(\"before_lfs_mlist_isopen\", lfs, file, buffer, size);\n\n    /* Preserve original logic: evaluate the isopen check, but record the result\n       so we can log it (instead of calling the predicate only inside LFS_ASSERT). */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_probe_log_isopen_result(\"after_lfs_mlist_isopen\", isopen);\n\n    LFS_ASSERT(isopen);\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}