{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined to expand to nothing, so calls like LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\", ...) in lfs_dir_read become null statements (a lone semicolon) after preprocessing. Those null statements are executed but have no effect and could be removed without changing program behaviour, which meets the definition of dead code in MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/342.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/342.txt. */\nstatic void lfs_log_probe_enter(const void *lfs, const void *dir, const void *info) {\n    FILE *f = fopen(\"/tmp/logs/342.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"ENTER lfs_dir_read: lfs=%p dir=%p info=%p\\n\", lfs, dir, info);\n        fclose(f);\n    }\n}\n\nstatic void lfs_log_probe_exit(int err, const void *lfs, const void *dir, const void *info) {\n    FILE *f = fopen(\"/tmp/logs/342.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"EXIT  lfs_dir_read: err=%d lfs=%p dir=%p info=%p\\n\", err, lfs, dir, info);\n        fclose(f);\n    }\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    /* Original trace (may expand to a null statement if LFS_TRACE is empty). */\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Probe: explicitly log the entry so callers can observe whether LFS_TRACE\n       produced any output or was removed by preprocessing. */\n    lfs_log_probe_enter((const void*)lfs, (const void*)dir, (const void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Original trace (may expand to a null statement if LFS_TRACE is empty). */\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n\n    /* Probe: explicitly log the exit and result. */\n    lfs_log_probe_exit(err, (const void*)lfs, (const void*)dir, (const void*)info);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}