{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg, 0), so err is initialized to 0. Therefore the condition if (err) is statically false and the return inside the block is unreachable. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/341.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/*\n * Probe helper: append a single line of diagnostic information\n * to /tmp/logs/341.txt. This keeps original logic intact and\n * provides evidence about control flow and state for the\n * LFS_LOCK/lfs_dir_read path.\n */\nstatic void lfs_probe_log(const char *event, const void *lfs, const void *dir,\n        const void *info, int err)\n{\n    /* Ensure directory exists; ignore errors (race-safe enough for probe) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/341.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log event name, pointers and err value */\n    (void)fprintf(f, \"%s: lfs=%p dir=%p info=%p err=%d\\n\",\n            event, lfs, dir, info, err);\n    (void)fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    /* Preserve original logic: initialize via LFS_LOCK as before. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after lock to capture returned value. */\n    lfs_probe_log(\"after_LFS_LOCK\", (const void*)lfs, (const void*)dir,\n            (const void*)info, err);\n\n    if (err) {\n        /* If lock indicates error, log the fact and return as original. */\n        lfs_probe_log(\"if(err)_taken_returning\", (const void*)lfs,\n                (const void*)dir, (const void*)info, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Log right before delegating to the internal implementation */\n    lfs_probe_log(\"before_lfs_dir_read_\", (const void*)lfs,\n            (const void*)dir, (const void*)info, err);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Log result from internal call and the fact that we'll unlock. */\n    lfs_probe_log(\"after_lfs_dir_read_\", (const void*)lfs,\n            (const void*)dir, (const void*)info, err);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}