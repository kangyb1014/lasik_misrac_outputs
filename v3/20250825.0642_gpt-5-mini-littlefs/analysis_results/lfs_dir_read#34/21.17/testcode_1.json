{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe strcpy(info->name, \".\") can overflow info->name if the name buffer is too small. info->name is declared as char name[LFS_NAME_MAX+1], so copying \".\" requires at least 2 bytes (1 char + NUL). If LFS_NAME_MAX is 0 (or otherwise < 1) then info->name has size 1 and strcpy will write beyond the bounds. The same concern applies to the other unconditional strcpy calls for \"..\" and \"/\" which require sizes 3 and 2 respectively. No check is shown ensuring LFS_NAME_MAX >= 1, so this call can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append logs to /tmp/logs/349.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/349.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe that attempts to safely dump info->name up to the compile-time size of the array.\n   This uses sizeof(info->name), which is valid if struct lfs_info is visible in the\n   translation unit (as it is in the original codebase). If info is NULL we skip dumping.\n   The dump is capped to 256 bytes to avoid huge logs. */\nstatic void lfs_probe_dump_info_name(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info)\n{\n    lfs_probe_log(\"[probe] lfs=%p dir=%p info=%p cfg=%p\", (void*)lfs, (void*)dir, (void*)info, (void*)(lfs?lfs->cfg:NULL));\n\n    if (!info) {\n        lfs_probe_log(\"[probe] info is NULL, skipping name dump\");\n        return;\n    }\n\n    /* Try to obtain the compile-time size of info->name. This avoids any unbounded reads.\n       If the struct definition is available, sizeof(info->name) yields the true buffer size. */\n    size_t info_name_size = 0;\n\n    /* sizeof on an array member yields the array size in bytes (when type is complete). */\n    info_name_size = sizeof(info->name);\n\n    if (info_name_size == 0) {\n        lfs_probe_log(\"[probe] sizeof(info->name) == 0, skipping name dump\");\n        return;\n    }\n\n    /* Cap the dump to a reasonable size for logs */\n    size_t dump_size = info_name_size;\n    if (dump_size > 256) dump_size = 256;\n\n    /* Prepare a local buffer and copy at most dump_size bytes. Ensure NUL-termination. */\n    char buf[257];\n    memset(buf, 0, sizeof(buf));\n\n    /* Only copy if dump_size is non-zero. This avoids UB for zero-sized arrays.\n       This read is bounded by sizeof(info->name) which should match the real buffer size. */\n    if (dump_size > 0) {\n        memcpy(buf, info->name, dump_size);\n        /* Ensure NUL-termination for logging */\n        buf[dump_size - 1] = '\\0';\n    }\n\n    lfs_probe_log(\"[probe] sizeof(info->name)=%zu dump_size=%zu name_dump=\\\"%s\\\"\",\n                  info_name_size, dump_size, buf);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Probe before calling the underlying implementation so callers can see the\n       incoming state that may lead to the reported strcpy overflow (info->name contents\n       and compile-time buffer size). */\n    lfs_probe_dump_info_name(lfs, dir, info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Probe after the call as well to capture the result and any mutated state. */\n    lfs_probe_log(\"[probe] lfs_dir_read_ returned err=%d\", err);\n    if (info) {\n        /* Dump again to show any changes made by lfs_dir_read_ (bounded as above). */\n        lfs_probe_dump_info_name(lfs, dir, info);\n    }\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}