{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the lfs_bd_cmp prototype declares the data-pointer parameters (for example the second argument or the later pcache->buffer parameter) as non-const pointers (e.g. void * or uint8_t *), but the function only reads from those buffers, then the pointer types should be const-qualified. The call shown (passing NULL and pcache->buffer as input data to be compared) indicates those pointers are input-only; if lfs_bd_cmp's parameters are not const-qualified, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_flush code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_flush as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_flush:\n```c\nstatic int lfs_bd_flush(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {\n        LFS_ASSERT(pcache->block < lfs->block_count);\n        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);\n        int err = lfs->cfg->prog(lfs->cfg, pcache->block,\n                pcache->off, pcache->buffer, diff);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n\n        if (validate) {\n            // check data on disk\n            lfs_cache_drop(lfs, rcache);\n            int res = lfs_bd_cmp(lfs,\n                    NULL, rcache, diff,\n                    pcache->block, pcache->off, pcache->buffer, diff);\n            if (res < 0) {\n                return res;\n            }\n\n            if (res != LFS_CMP_EQ) {\n                return LFS_ERR_CORRUPT;\n            }\n        }\n\n        lfs_cache_zero(lfs, pcache);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_flush code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe helper to log control flow and state for lfs_bd_flush. */\nstatic void lfs_bd_flush_log(const char *stage, lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        unsigned long long diff, int err, int res) {\n    FILE *f = fopen(\"/tmp/logs/53.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Safely print cache fields if pcache is non-NULL. */\n    unsigned long long pc_block = 0;\n    unsigned long long pc_off = 0;\n    unsigned long long pc_size = 0;\n    void *pc_buffer = NULL;\n    if (pcache) {\n        pc_block = (unsigned long long)pcache->block;\n        pc_off = (unsigned long long)pcache->off;\n        pc_size = (unsigned long long)pcache->size;\n        pc_buffer = (void *)pcache->buffer;\n    }\n\n    fprintf(f,\n            \"[lfs_bd_flush] stage=%s validate=%d lfs=%p pcache=%p rcache=%p\\n\",\n            stage, (int)validate, (void *)lfs, (void *)pcache, (void *)rcache);\n    fprintf(f,\n            \"  pcache: block=%llu off=%llu size=%llu buffer=%p\\n\",\n            pc_block, pc_off, pc_size, pc_buffer);\n    fprintf(f, \"  diff=%llu err=%d res=%d\\n\", diff, err, res);\n\n    /* Provide an explicit note about the pointer usage scenario that may\n       indicate a Rule 8.13 violation: we are passing pcache->buffer as an\n       input parameter to a compare function (lfs_bd_cmp). This log helps\n       demonstrate that the buffer is used read-only here. */\n    if (pc_buffer) {\n        fprintf(f, \"  note: passing pcache->buffer (%p) to lfs_bd_cmp as input-only\\n\",\n                pc_buffer);\n    } else {\n        fprintf(f, \"  note: pcache->buffer is NULL\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic int lfs_bd_flush(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    /* Entry probe: log initial state. */\n    lfs_bd_flush_log(\"entry\", lfs, pcache, rcache, validate, 0ULL, 0, 0);\n\n    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {\n        LFS_ASSERT(pcache->block < lfs->block_count);\n        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);\n\n        /* Log before programming. */\n        lfs_bd_flush_log(\"before_prog\", lfs, pcache, rcache, validate,\n                (unsigned long long)diff, 0, 0);\n\n        int err = lfs->cfg->prog(lfs->cfg, pcache->block,\n                pcache->off, pcache->buffer, diff);\n        LFS_ASSERT(err <= 0);\n\n        /* Log result of prog. */\n        lfs_bd_flush_log(\"after_prog\", lfs, pcache, rcache, validate,\n                (unsigned long long)diff, err, 0);\n\n        if (err) {\n            return err;\n        }\n\n        if (validate) {\n            /* check data on disk */\n            lfs_cache_drop(lfs, rcache);\n\n            /* Log just before calling lfs_bd_cmp, including the pointer being\n               passed as input (pcache->buffer) and the fact that NULL is\n               passed as the first data pointer. This helps reproduce the\n               scenario where a non-const parameter could be const-qualified.\n            */\n            lfs_bd_flush_log(\"before_cmp\", lfs, pcache, rcache, validate,\n                    (unsigned long long)diff, 0, 0);\n\n            int res = lfs_bd_cmp(lfs,\n                    NULL, rcache, diff,\n                    pcache->block, pcache->off, pcache->buffer, diff);\n\n            /* Log after compare to capture the result and to show that\n               pcache->buffer was only used as input to the compare.\n            */\n            lfs_bd_flush_log(\"after_cmp\", lfs, pcache, rcache, validate,\n                    (unsigned long long)diff, 0, res);\n\n            if (res < 0) {\n                return res;\n            }\n\n            if (res != LFS_CMP_EQ) {\n                return LFS_ERR_CORRUPT;\n            }\n        }\n\n        lfs_cache_zero(lfs, pcache);\n\n        /* Log after clearing cache. */\n        lfs_bd_flush_log(\"after_zero\", lfs, pcache, rcache, validate,\n                0ULL, 0, 0);\n    }\n\n    /* Exit probe. */\n    lfs_bd_flush_log(\"exit\", lfs, pcache, rcache, validate, 0ULL, 0, 0);\n\n    return 0;\n}\n"
}