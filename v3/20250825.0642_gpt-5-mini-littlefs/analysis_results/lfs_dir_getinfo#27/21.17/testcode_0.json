{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes info->name (size LFS_NAME_MAX+1) with a length of lfs->name_max+1. If lfs->name_max > LFS_NAME_MAX (e.g. due to a corrupted or malicious superblock, or lack of runtime check), lfs_dir_get will copy lfs->name_max+1 bytes into info->name, overflowing the buffer. This is a direct way a string/memory copy used by lfs_dir_get can access beyond the bounds of info->name.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getinfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/279.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getinfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getinfo:\n```c\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    if (id == 0x3ff) {\n        // special case for root\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getinfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Helper logging function to append probe information to /tmp/logs/279.txt */\nstatic void lfs_dir_getinfo_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/279.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    /* Log entry state */\n    lfs_dir_getinfo_log(\"ENTRY lfs_dir_getinfo: lfs=%p dir=%p id=%u info=%p lfs->name_max=%u\",\n            (void*)lfs, (void*)dir, (unsigned)id, (void*)info,\n            (unsigned)(lfs ? lfs->name_max : 0));\n\n    if (id == 0x3ff) {\n        /* special case for root */\n        lfs_dir_getinfo_log(\"ROOT case: copying '/'. info->name=%p\", (void*)info->name);\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        lfs_dir_getinfo_log(\"ROOT done: info->name='%s' type=%d\", info->name, (int)info->type);\n        return 0;\n    }\n\n    /* Prepare and log the parameters for the name lookup that may overflow */\n    size_t requested_len = (size_t)lfs->name_max + 1;\n    lfs_dir_getinfo_log(\"BEFORE name lfs_dir_get: id=%u requested_len=%zu info->name=%p\",\n            (unsigned)id, requested_len, (void*)info->name);\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n\n    /* Log result of first lfs_dir_get */\n    lfs_dir_getinfo_log(\"AFTER name lfs_dir_get: tag=%ld\", (long)tag);\n\n    if (tag < 0) {\n        lfs_dir_getinfo_log(\"ERROR: name lfs_dir_get returned error %ld\", (long)tag);\n        return (int)tag;\n    }\n\n    /* Log a sample of the name buffer to capture potential overflow effects */\n    {\n        size_t max_sample = 64;\n        char sample[65];\n        size_t i;\n        /* Copy up to max_sample characters or until NUL. This mirrors safe inspection only. */\n        for (i = 0; i < max_sample; i++) {\n            char c = info->name[i];\n            sample[i] = (c == '\\0') ? '\\0' : c;\n            if (c == '\\0') break;\n        }\n        sample[i] = '\\0';\n        lfs_dir_getinfo_log(\"NAME SAMPLE: first_%zu_bytes_or_until_NUL='%s' (sample_len=%zu)\",\n                (size_t)max_sample, sample, i);\n    }\n\n    info->type = lfs_tag_type3(tag);\n    lfs_dir_getinfo_log(\"INFO TYPE after name read: type=%d\", (int)info->type);\n\n    struct lfs_ctz ctz;\n    lfs_dir_getinfo_log(\"BEFORE struct lfs_dir_get for CTZ: id=%u sizeof(ctz)=%zu &ctz=%p\",\n            (unsigned)id, sizeof(ctz), (void*)&ctz);\n\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n\n    lfs_dir_getinfo_log(\"AFTER struct lfs_dir_get for CTZ: tag=%ld\", (long)tag);\n\n    if (tag < 0) {\n        lfs_dir_getinfo_log(\"ERROR: struct lfs_dir_get returned error %ld\", (long)tag);\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n        lfs_dir_getinfo_log(\"CTZSTRUCT: info->size=%"
}