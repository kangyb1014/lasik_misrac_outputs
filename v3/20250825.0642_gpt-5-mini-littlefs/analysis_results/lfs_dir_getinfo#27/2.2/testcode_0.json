{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen lfs_dir_get returns a tag whose type is LFS_TYPE_INLINESTRUCT, the subsequent call lfs_ctz_fromle32(&ctz) only converts fields of the local variable ctz which are never read in that case. Removing that call (or moving it inside the branch that handles LFS_TYPE_CTZSTRUCT) would not change program behaviour for that execution, so the call is an executed operation that has no effect \u2014 violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getinfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/272.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getinfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getinfo:\n```c\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    if (id == 0x3ff) {\n        // special case for root\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getinfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Simple logging helper that appends to /tmp/logs/272.txt */\nstatic void lfs_debug_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/272.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    lfs_debug_log(\"lfs_dir_getinfo ENTRY id=%u\", (unsigned)id);\n\n    if (id == 0x3ff) {\n        /* special case for root */\n        lfs_debug_log(\"id is root: setting name='/' and type=DIR\");\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        lfs_debug_log(\"lfs_dir_getinfo EXIT root\");\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        lfs_debug_log(\"name lookup failed: tag=%ld\", (long)tag);\n        return (int)tag;\n    }\n\n    lfs_debug_log(\"name lookup succeeded: tag=%ld, tag_type=%d, name='%s'\",\n            (long)tag, (int)lfs_tag_type3(tag), info->name);\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        lfs_debug_log(\"struct lookup failed: tag=%ld\", (long)tag);\n        return (int)tag;\n    }\n\n    lfs_debug_log(\"struct lookup succeeded: tag=%ld, tag_type=%d (about to call lfs_ctz_fromle32)\",\n            (long)tag, (int)lfs_tag_type3(tag));\n\n    /* Record that we called the conversion. We do NOT read ctz fields here unless\n       we are in the CTZSTRUCT branch below, to avoid changing behaviour. */\n    int conversion_called = 0;\n    lfs_ctz_fromle32(&ctz);\n    conversion_called = 1;\n\n    lfs_debug_log(\"lfs_ctz_fromle32 called: conversion_called=%d\", conversion_called);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        /* In this branch the converted ctz.size is actually used */\n        info->size = ctz.size;\n        lfs_debug_log(\"CTZSTRUCT branch taken: info->size (from ctz.size)=%u\", (unsigned)info->size);\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        /* In this branch the converted ctz fields are NOT used -> evidence of executed-but-unused operation */\n        info->size = lfs_tag_size(tag);\n        lfs_debug_log(\"INLINESTRUCT branch taken: info->size (from tag)=%u; conversion_called=%d (ctz not used)\",\n                (unsigned)info->size, conversion_called);\n    }\n\n    lfs_debug_log(\"lfs_dir_getinfo EXIT success\");\n    return 0;\n}\n"
}