{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses a pointer loop counter (lfs_file_t *f) initialized in the first clause, the condition uses only f, and the third clause is f = f->next. The increment reads the member f->next (an object other than the loop counter variable itself) which may be modified by calls inside the loop body (lfs_file_outline, lfs_file_flush). Clause 3 of MISRA C 2023 Rule 14.2 forbids the third clause from using objects that are modified in the loop body. Because the body calls functions that could change the current node or its next pointer (or the linked list), the increment expression potentially uses an object modified in the loop body and thus violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_gc_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/784.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_gc_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc_:\n```c\nstatic int lfs_fs_gc_(lfs_t *lfs) {\n    // force consistency, even if we're not necessarily going to write,\n    // because this function is supposed to take care of janitorial work\n    // isn't it?\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    // try to compact metadata pairs, note we can't really accomplish\n    // anything if compact_thresh doesn't at least leave a prog_size\n    // available\n    if (lfs->cfg->compact_thresh\n            < lfs->cfg->block_size - lfs->cfg->prog_size) {\n        // iterate over all mdirs\n        lfs_mdir_t mdir = {.tail = {0, 1}};\n        while (!lfs_pair_isnull(mdir.tail)) {\n            err = lfs_dir_fetch(lfs, &mdir, mdir.tail);\n            if (err) {\n                return err;\n            }\n\n            // not erased? exceeds our compaction threshold?\n            if (!mdir.erased || ((lfs->cfg->compact_thresh == 0)\n                    ? mdir.off > lfs->cfg->block_size - lfs->cfg->block_size/8\n                    : mdir.off > lfs->cfg->compact_thresh)) {\n                // the easiest way to trigger a compaction is to mark\n                // the mdir as unerased and add an empty commit\n                mdir.erased = false;\n                err = lfs_dir_commit(lfs, &mdir, NULL, 0);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    // try to populate the lookahead buffer, unless it's already full\n    if (lfs->lookahead.size < 8*lfs->cfg->lookahead_size) {\n        err = lfs_alloc_scan(lfs);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_gc_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Lightweight logging helpers that append to /tmp/logs/784.txt.\n * These preserve the original control flow and logic of lfs_fs_gc_.\n */\nstatic void lfs_gc_log_raw(const char *fmt, ...) {\n    FILE *fp = fopen(\"/tmp/logs/784.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic void lfs_gc_log_state_start(lfs_t *lfs) {\n    if (lfs == NULL || lfs->cfg == NULL) {\n        lfs_gc_log_raw(\"lfs_fs_gc_: lfs or lfs->cfg is NULL\");\n        return;\n    }\n    lfs_gc_log_raw(\n        \"lfs_fs_gc_: entry: compact_thresh=%u, block_size=%u, prog_size=%u, lookahead.size=%u, cfg.lookahead_size=%u\", \n        (unsigned)lfs->cfg->compact_thresh,\n        (unsigned)lfs->cfg->block_size,\n        (unsigned)lfs->cfg->prog_size,\n        (unsigned)lfs->lookahead.size,\n        (unsigned)lfs->cfg->lookahead_size);\n}\n\nstatic void lfs_gc_log_mdir_iteration(int iter, const char *stage, lfs_mdir_t *mdir) {\n    if (mdir == NULL) {\n        lfs_gc_log_raw(\"lfs_fs_gc_: iter=%d stage=%s mdir=NULL\", iter, stage);\n        return;\n    }\n    /* We avoid accessing mdir.tail internals because type may vary; instead\n       log whether it's null via lfs_pair_isnull when calling. */\n    lfs_gc_log_raw(\n        \"lfs_fs_gc_: iter=%d stage=%s mdir.erased=%d mdir.off=%u\", \n        iter, stage, (int)mdir->erased, (unsigned)mdir->off);\n}\n\nstatic void lfs_gc_log_call_result(const char *fn, int err) {\n    lfs_gc_log_raw(\"lfs_fs_gc_: %s returned %d\", fn, err);\n}\n\nstatic int lfs_fs_gc_(lfs_t *lfs) {\n    lfs_gc_log_state_start(lfs);\n\n    /* force consistency, even if we're not necessarily going to write, */\n    /* because this function is supposed to take care of janitorial work */\n    /* isn't it? */\n    int err = lfs_fs_forceconsistency(lfs);\n    lfs_gc_log_call_result(\"lfs_fs_forceconsistency\", err);\n    if (err) {\n        lfs_gc_log_raw(\"lfs_fs_gc_: early return due to forceconsistency err=%d\", err);\n        return err;\n    }\n\n    /*\n     * try to compact metadata pairs, note we can't really accomplish\n     * anything if compact_thresh doesn't at least leave a prog_size\n     * available\n     */\n    if (lfs->cfg->compact_thresh\n            < lfs->cfg->block_size - lfs->cfg->prog_size) {\n        lfs_gc_log_raw(\"lfs_fs_gc_: entering compaction loop condition satisfied\");\n\n        /* iterate over all mdirs */\n        lfs_mdir_t mdir = {.tail = {0, 1}};\n        int iter = 0;\n        while (!lfs_pair_isnull(mdir.tail)) {\n            iter++;\n            lfs_gc_log_mdir_iteration(iter, \"before_fetch\", &mdir);\n\n            err = lfs_dir_fetch(lfs, &mdir, mdir.tail);\n            lfs_gc_log_call_result(\"lfs_dir_fetch\", err);\n            if (err) {\n                lfs_gc_log_raw(\"lfs_fs_gc_: returning from compaction loop due to fetch error=%d\", err);\n                return err;\n            }\n\n            /* not erased? exceeds our compaction threshold? */\n            if (!mdir.erased || ((lfs->cfg->compact_thresh == 0)\n                    ? mdir.off > lfs->cfg->block_size - lfs->cfg->block_size/8\n                    : mdir.off > lfs->cfg->compact_thresh)) {\n                lfs_gc_log_mdir_iteration(iter, \"need_compaction\", &mdir);\n\n                /* the easiest way to trigger a compaction is to mark\n                 * the mdir as unerased and add an empty commit */\n                mdir.erased = false;\n                lfs_gc_log_mdir_iteration(iter, \"before_commit_marked_unerased\", &mdir);\n                err = lfs_dir_commit(lfs, &mdir, NULL, 0);\n                lfs_gc_log_call_result(\"lfs_dir_commit\", err);\n                if (err) {\n                    lfs_gc_log_raw(\"lfs_fs_gc_: returning from compaction loop due to commit error=%d\", err);\n                    return err;\n                }\n                lfs_gc_log_mdir_iteration(iter, \"after_commit\", &mdir);\n            } else {\n                lfs_gc_log_mdir_iteration(iter, \"no_compaction\", &mdir);\n            }\n\n            /*\n             * Note: original code relies on mdir.tail being updated by the\n             * fetch/commit calls or via iteration. We do not change logic;\n             * we only log state. Continue to next iteration.\n             */\n        }\n        lfs_gc_log_raw(\"lfs_fs_gc_: exited compaction loop after %d iterations\", iter);\n    } else {\n        lfs_gc_log_raw(\"lfs_fs_gc_: compaction loop skipped (compact_thresh condition failed)\");\n    }\n\n    /*\n     * try to populate the lookahead buffer, unless it's already full\n     */\n    if (lfs->lookahead.size < 8*lfs->cfg->lookahead_size) {\n        lfs_gc_log_raw(\"lfs_fs_gc_: lookahead underfull: lookahead.size=%u cfg.lookahead_size=%u\",\n            (unsigned)lfs->lookahead.size, (unsigned)lfs->cfg->lookahead_size);\n        err = lfs_alloc_scan(lfs);\n        lfs_gc_log_call_result(\"lfs_alloc_scan\", err);\n        if (err) {\n            lfs_gc_log_raw(\"lfs_fs_gc_: returning due to alloc_scan error=%d\", err);\n            return err;\n        }\n    } else {\n        lfs_gc_log_raw(\"lfs_fs_gc_: lookahead already full: lookahead.size=%u cfg.lookahead_size=%u\",\n            (unsigned)lfs->lookahead.size, (unsigned)lfs->cfg->lookahead_size);\n    }\n\n    lfs_gc_log_raw(\"lfs_fs_gc_: returning success (0)\");\n    return 0;\n}\n"
}