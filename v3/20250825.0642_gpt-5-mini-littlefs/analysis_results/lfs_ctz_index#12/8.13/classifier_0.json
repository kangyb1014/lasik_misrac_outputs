{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_index:\n```c\nstatic int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {\n    lfs_off_t size = *off;\n    lfs_off_t b = lfs->cfg->block_size - 2*4;\n    lfs_off_t i = size / b;\n    if (i == 0) {\n        return 0;\n    }\n\n    i = (size - 4*(lfs_popc(i-1)+2)) / b;\n    *off = size - b*i - 4*lfs_popc(i);\n    return i;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_ctz_index:\ntypedef uint32_t lfs_off_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The parameter 'lfs' is a pointer that is only read (used to access lfs->cfg->block_size) and is not modified inside lfs_ctz_index, so it should be a pointer to a const-qualified type. Change the signature to: static int lfs_ctz_index(const lfs_t *lfs, lfs_off_t *off). Note: 'off' must remain non-const because the function assigns to *off."
}