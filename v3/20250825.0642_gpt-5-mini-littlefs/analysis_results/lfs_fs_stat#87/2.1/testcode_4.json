{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so err is always 0 and the conditional 'if (err) { return err; }' can never be true. The 'return err;' branch is therefore unreachable in the provided project configuration, violating Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/871.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a single-line log entry to /tmp/logs/871.txt */\nstatic void lfs_log_probe(const char *stage, const void *lfs_ptr, const void *fsinfo_ptr, int err)\n{\n    FILE *fp = fopen(\"/tmp/logs/871.txt\", \"a\");\n    if (fp != NULL) {\n        /* Log stage, pointer values and current err. */\n        (void)fprintf(fp, \"%s: lfs=%p fsinfo=%p err=%d\\n\", stage, lfs_ptr, fsinfo_ptr, err);\n        (void)fclose(fp);\n    }\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    /* Log entry with initial pointer state */\n    lfs_log_probe(\"ENTRY lfs_fs_stat\", (void*)lfs, (void*)fsinfo, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log value returned by LFS_LOCK so callers can observe whether the\n       lock produced a non-zero error (and thus whether the \"if (err)\" branch\n       should be taken). This reproduces evidence for the reported scenario. */\n    lfs_log_probe(\"AFTER LFS_LOCK\", (void*)lfs, (void*)fsinfo, err);\n\n    if (err) {\n        /* If this branch is taken, record that fact and the error code. */\n        lfs_log_probe(\"IF_ERR_BRANCH_TAKEN - returning\", (void*)lfs, (void*)fsinfo, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    /* Log right before calling the underlying implementation. */\n    lfs_log_probe(\"BEFORE lfs_fs_stat_ call\", (void*)lfs, (void*)fsinfo, 0);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    /* Log the result of the underlying implementation. */\n    lfs_log_probe(\"AFTER lfs_fs_stat_ call\", (void*)lfs, (void*)fsinfo, err);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log final return value */\n    lfs_log_probe(\"EXIT lfs_fs_stat\", (void*)lfs, (void*)fsinfo, err);\n\n    return err;\n}\n"
}