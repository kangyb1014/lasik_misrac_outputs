{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as '((void)cfg, 0)', so it always evaluates to 0. In lfs_fs_stat the code 'int err = LFS_LOCK(lfs->cfg); if (err) { return err; }' therefore has an if-branch that can never be taken (unreachable code). This violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/871.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append state and control-flow info to /tmp/logs/871.txt */\nstatic void lfs_probe_log(const char *msg, lfs_t *lfs, struct lfs_fsinfo *fsinfo, int err) {\n    FILE *f = fopen(\"/tmp/logs/871.txt\", \"a\");\n    if (f) {\n        /* Log message, addresses and error value. Keep function side-effect free regarding lfs logic. */\n        (void)fprintf(f, \"%s: lfs=%p fsinfo=%p err=%d\\n\", msg, (void*)lfs, (void*)fsinfo, err);\n        (void)fflush(f);\n        (void)fclose(f);\n    }\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Record the result of LFS_LOCK to demonstrate whether the lock returned non-zero. */\n    lfs_probe_log(\"after LFS_LOCK\", lfs, fsinfo, err);\n\n    if (err) {\n        /* If this branch is ever taken, record it. According to the reported scenario this is unreachable\n           because LFS_LOCK(lfs->cfg) expands to an expression that always yields 0. */\n        lfs_probe_log(\"entered if(err) after LFS_LOCK\", lfs, fsinfo, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    /* Record result of the underlying implementation call. */\n    lfs_probe_log(\"after lfs_fs_stat_\", lfs, fsinfo, err);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log that we have unlocked and are about to return. */\n    lfs_probe_log(\"after LFS_UNLOCK\", lfs, fsinfo, err);\n\n    return err;\n}"
}