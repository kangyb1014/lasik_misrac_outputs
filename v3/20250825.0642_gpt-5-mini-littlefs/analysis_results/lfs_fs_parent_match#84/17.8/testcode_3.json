{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read, the scalar parameters 'off' and 'size' are modified in the fragment (off += diff; size -= diff;). This changes the function parameters passed by value, which violates MISRA C 2023 Rule 17.8. (Note: modifying the local pointer 'data' that was initialized from the parameter 'buffer' is allowed because the pointer parameter itself is not modified; modifying objects through pointer parameters like 'rcache' is also allowed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/847.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent_match:\n```c\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent_match code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers to log control flow and state for lfs_fs_parent_match. */\nstatic void lfs_parent_log_pre(const void *v_lfs, const void *v_disk, size_t req_size) {\n    FILE *f = fopen(\"/tmp/logs/847.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log pointers and requested read size. Use unsigned long long casts to avoid type issues. */\n    fprintf(f, \"ENTER lfs_fs_parent_match: lfs=%p, disk=%p, req_size=%llu\\n\",\n            v_lfs, v_disk, (unsigned long long)req_size);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void lfs_parent_log_post(const void *v_lfs, const void *v_disk,\n        const void *child_buf, size_t child_size, int err) {\n    FILE *f = fopen(\"/tmp/logs/847.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"EXIT lfs_fs_parent_match: lfs=%p, disk=%p, err=%d, child_size=%llu\\n\",\n            v_lfs, v_disk, err, (unsigned long long)child_size);\n\n    /* Attempt to log the two child values as integers if possible. We don't\n       modify the buffer here; we merely print its contents cast to\n       unsigned long long elements. This is a best-effort log and will not\n       change program behavior. */\n    if (child_buf != NULL && child_size >= (2 * sizeof(unsigned long long))) {\n        const unsigned long long *vals = (const unsigned long long *)child_buf;\n        fprintf(f, \"  child[0]=%llu, child[1]=%llu\\n\",\n                (unsigned long long)vals[0], (unsigned long long)vals[1]);\n    } else if (child_buf != NULL) {\n        /* If buffer smaller than two ulls, print byte-wise hex as fallback. */\n        const unsigned char *bytes = (const unsigned char *)child_buf;\n        fprintf(f, \"  child raw:\");\n        for (size_t i = 0; i < child_size; i++) {\n            fprintf(f, \" %02x\", (unsigned)bytes[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n\n    /* Log entering with parameters that are relevant to the subsequent read. */\n    lfs_parent_log_pre((const void *)lfs, (const void *)disk,\n            (size_t)lfs->cfg->block_size);\n\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        /* Log error path with no child data. */\n        lfs_parent_log_post((const void *)lfs, (const void *)disk,\n                NULL, 0, err);\n        return err;\n    }\n\n    /* Log the raw child data immediately after the read (before any\n       endianness conversion) so callers can reproduce the exact data that\n       was returned by lfs_bd_read. */\n    lfs_parent_log_post((const void *)lfs, (const void *)disk,\n            (const void *)child, sizeof(child), err);\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n"
}