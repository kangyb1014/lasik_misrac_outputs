{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'data' is declared as void * but is only read: it is cast to struct lfs_fs_parent_match *find and only read (find->lfs, find->pair). Therefore the parameter could be declared const void * (and find as const struct lfs_fs_parent_match *). This violates MISRA C 2023 Rule 8.13 unless the function must match a preexisting non-const callback signature that cannot be changed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/843.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent_match:\n```c\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent_match code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper: append information to /tmp/logs/843.txt. */\nstatic void lfs_fs_parent_match_log(const char *stage, void *data,\n        lfs_tag_t tag, const void *buffer,\n        lfs_t *lfs, const struct lfs_diskoff *disk,\n        const lfs_block_t child_before[2], const lfs_block_t child_after[2],\n        const lfs_block_t pair[2], int err, int cmp_result)\n{\n    FILE *f = fopen(\"/tmp/logs/843.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Basic entry header */\n    fprintf(f, \"[lfs_fs_parent_match] stage=%s data=%p tag=%llu buffer=%p lfs=%p\\n\",\n            stage, data, (unsigned long long)tag, buffer, (void *)lfs);\n\n    if (disk != NULL) {\n        fprintf(f, \"  disk: block=%llu off=%llu\\n\",\n                (unsigned long long)disk->block,\n                (unsigned long long)disk->off);\n    } else {\n        fprintf(f, \"  disk: (null)\\n\");\n    }\n\n    fprintf(f, \"  bd_read err=%d\\n\", err);\n\n    if (child_before != NULL) {\n        fprintf(f, \"  child before le-conv: [0]=%llu [1]=%llu\\n\",\n                (unsigned long long)child_before[0],\n                (unsigned long long)child_before[1]);\n    }\n\n    if (child_after != NULL) {\n        fprintf(f, \"  child after le-conv:  [0]=%llu [1]=%llu\\n\",\n                (unsigned long long)child_after[0],\n                (unsigned long long)child_after[1]);\n    }\n\n    if (pair != NULL) {\n        fprintf(f, \"  find->pair: [0]=%llu [1]=%llu\\n\",\n                (unsigned long long)pair[0], (unsigned long long)pair[1]);\n    }\n\n    fprintf(f, \"  cmp_result=%d\\n\", cmp_result);\n    fprintf(f, \"---\\n\");\n\n    fclose(f);\n}\n\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    /* Log entry with initial pointers/state */\n    lfs_fs_parent_match_log(\"enter\", data, tag, buffer, lfs, disk,\n            NULL, NULL, find->pair, 0, -1);\n\n    (void)tag; /* keep compatibility if tag is unused elsewhere */\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n\n    if (err) {\n        /* Log read failure */\n        lfs_fs_parent_match_log(\"bd_read_failed\", data, tag, buffer, lfs, disk,\n                NULL, NULL, find->pair, err, -1);\n        return err;\n    }\n\n    /* Log child buffer as read (before converting from little-endian) */\n    lfs_block_t child_before[2] = { child[0], child[1] };\n    lfs_fs_parent_match_log(\"after_read_before_leconv\", data, tag, buffer, lfs, disk,\n            child_before, NULL, find->pair, err, -1);\n\n    lfs_pair_fromle32(child);\n\n    /* Log child buffer after endian conversion and comparison result */\n    lfs_block_t child_after[2] = { child[0], child[1] };\n    int cmp_flag = (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n\n    lfs_fs_parent_match_log(\"after_leconv_and_cmp\", data, tag, buffer, lfs, disk,\n            child_before, child_after, find->pair, err, cmp_flag);\n\n    return cmp_flag;\n}\n"
}