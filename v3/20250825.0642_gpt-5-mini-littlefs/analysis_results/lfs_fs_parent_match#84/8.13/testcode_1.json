{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'data' is declared as void * and is assigned to 'struct lfs_fs_parent_match *find'. The function only reads from 'find' (accesses find->lfs and find->pair) and does not modify it, so the pointer should be to a const-qualified type. Correct form would be e.g. const struct lfs_fs_parent_match *find = data; with the parameter changed to const void *data (or the cast used accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/843.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent_match:\n```c\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/843.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_log_probe(\"lfs_fs_parent_match: entry data=%p find=%p\\n\", data, (void *)find);\n\n    lfs_t *lfs = find->lfs;\n    /* log addresses and avoid dereferencing unknown types for safety */\n    lfs_log_probe(\"find->lfs=%p, &find->pair=%p\\n\", (void *)lfs, (const void *)&find->pair);\n\n    const struct lfs_diskoff *disk = buffer;\n    lfs_log_probe(\"disk=%p, tag=%llu\\n\", (const void *)disk, (unsigned long long)tag);\n    (void)tag;\n\n    lfs_block_t child[2];\n\n    /* log the parameters used for the block read */\n    if (lfs && lfs->cfg) {\n        lfs_log_probe(\"calling lfs_bd_read: block_size=%u\\n\",\n                (unsigned)lfs->cfg->block_size);\n    } else {\n        lfs_log_probe(\"calling lfs_bd_read: lfs or lfs->cfg is NULL\\n\");\n    }\n\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    lfs_log_probe(\"lfs_bd_read returned err=%d\\n\", err);\n    if (err) {\n        lfs_log_probe(\"lfs_fs_parent_match: early return err=%d\\n\", err);\n        return err;\n    }\n\n    /* Log raw child values as integers for traceability */\n    lfs_log_probe(\"child before le32: child[0]=%llu child[1]=%llu\\n\",\n            (unsigned long long)child[0], (unsigned long long)child[1]);\n\n    lfs_pair_fromle32(child);\n\n    lfs_log_probe(\"child after le32: child[0]=%llu child[1]=%llu\\n\",\n            (unsigned long long)child[0], (unsigned long long)child[1]);\n\n    int cmp = (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n    lfs_log_probe(\"lfs_pair_cmp -> returning %d\\n\", cmp);\n\n    return cmp;\n}\n"
}