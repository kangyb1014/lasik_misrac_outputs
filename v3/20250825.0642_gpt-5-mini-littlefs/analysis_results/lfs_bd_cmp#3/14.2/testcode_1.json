{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses the third clause \"i += diff\" where diff is a separate object defined outside the loop and is assigned within the loop body (diff = lfs_min(...)). Clause 3 of MISRA C 2023 Rule 14.2 requires the third clause to modify only the loop counter and not use objects that are modified in the loop body. Because diff is modified inside the loop and is used in the third clause, the loop is not well-formed and the fragment \"lfs_size_t diff = 0;\" (declaring diff outside the loop) contributes to this violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_cmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/34.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_cmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_cmp:\n```c\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n        if (res) {\n            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n        }\n    }\n\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_cmp code.\n",
  "test_code": "static int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    /* Open log file for appending probe information. If opening fails, proceed\n       without logging to avoid changing behaviour. */\n    FILE *log = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"lfs_bd_cmp enter: lfs=%p pcache=%p rcache=%p hint=%llu block=%lld off=%lld buffer=%p size=%llu\\n\",\n                (void*)lfs, (const void*)pcache, (void*)rcache,\n                (unsigned long long)hint, (long long)block, (long long)off,\n                buffer, (unsigned long long)size);\n        fflush(log);\n    }\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        if (log) {\n            fprintf(log, \"loop start: i=%lld diff=%llu size=%llu\\n\",\n                    (long long)i, (unsigned long long)diff, (unsigned long long)size);\n            fflush(log);\n        }\n\n        diff = lfs_min(size-i, sizeof(dat));\n\n        if (log) {\n            fprintf(log, \"after diff assign: diff=%llu remaining=size-i=%llu hint-i=%lld\\n\",\n                    (unsigned long long)diff, (unsigned long long)(size - i), (long long)(hint - i));\n            fflush(log);\n        }\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n\n        if (log) {\n            fprintf(log, \"lfs_bd_read called: hint-i=%lld block=%lld off+i=%lld read_size=%llu -> err=%d\\n\",\n                    (long long)(hint - i), (long long)block, (long long)(off + i), (unsigned long long)diff, err);\n            fflush(log);\n        }\n\n        if (err) {\n            if (log) {\n                fprintf(log, \"lfs_bd_cmp exit with err=%d\\n\", err);\n                fclose(log);\n            }\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n\n        if (log) {\n            fprintf(log, \"memcmp at i=%lld size=%llu -> res=%d\\n\",\n                    (long long)i, (unsigned long long)diff, res);\n            fflush(log);\n        }\n\n        if (res) {\n            int ret = res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n            if (log) {\n                fprintf(log, \"lfs_bd_cmp exit with cmp result res=%d return=%d\\n\", res, ret);\n                fclose(log);\n            }\n            return ret;\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"lfs_bd_cmp exit: equal (LFS_CMP_EQ)\\n\");\n        fclose(log);\n    }\n\n    return LFS_CMP_EQ;\n}\n"
}