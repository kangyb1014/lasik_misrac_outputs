{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_ASSERT statement is redundant and therefore constitutes dead code. Earlier in lfs_bd_read the code already checks and returns on the same block bound condition ((lfs->block_count && block >= lfs->block_count)), and the surrounding logic/comment ('first condition can no longer fail') guarantees the asserted condition is true whenever that line is executed. Removing the assertion would not change program behaviour (aside from diagnostic/abort behavior), so the operation is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_cmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/32.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_cmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_cmp:\n```c\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n        if (res) {\n            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n        }\n    }\n\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_cmp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/32.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    /* Log entry with key state */\n    lfs_probe_log(\"ENTER lfs_bd_cmp: hint=%llu block=%llu off=%lld size=%llu\",\n            (unsigned long long)hint,\n            (unsigned long long)block,\n            (long long)off,\n            (unsigned long long)size);\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n\n        /* Log before calling lfs_bd_read with the computed parameters */\n        lfs_probe_log(\"CALL lfs_bd_read: hint_minus_i=%lld block=%llu off=%lld diff=%llu i=%lld\",\n                (long long)(hint - i),\n                (unsigned long long)block,\n                (long long)(off + i),\n                (unsigned long long)diff,\n                (long long)i);\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n\n        /* Log result of lfs_bd_read */\n        lfs_probe_log(\"RETURN lfs_bd_read: err=%d i=%lld diff=%llu\",\n                err,\n                (long long)i,\n                (unsigned long long)diff);\n\n        if (err) {\n            /* Log early return due to error */\n            lfs_probe_log(\"EXIT lfs_bd_cmp: early return err=%d i=%lld\",\n                    err,\n                    (long long)i);\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n\n        /* Log the memcmp result and the compared bytes (as much as fits) */\n        lfs_probe_log(\"memcmp: res=%d i=%lld diff=%llu\",\n                res,\n                (long long)i,\n                (unsigned long long)diff);\n\n        if (res) {\n            int ret = res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n            lfs_probe_log(\"EXIT lfs_bd_cmp: returning cmp result=%d (mapped=%d) i=%lld\",\n                    res, ret, (long long)i);\n            return ret;\n        }\n    }\n\n    lfs_probe_log(\"EXIT lfs_bd_cmp: returning LFS_CMP_EQ\");\n    return LFS_CMP_EQ;\n}\n"
}