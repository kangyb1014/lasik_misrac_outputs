{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the comma expression ((void)cfg, 0) which always evaluates to 0. In lfs_stat the sequence \"err = LFS_LOCK(lfs->cfg); if (err) { return err; }\" therefore makes the if-body (the error-return branch) unreachable with the provided macro definition. This constitutes unreachable code in the project.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1051.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state for lfs_stat.\n   Logs are appended to /tmp/logs/1051.txt. This function is\n   intentionally side-effect free with respect to lfs_stat's behavior\n   (it does not modify any inputs or global state used by lfs).\n*/\nstatic void lfs_stat_log_probe(const char *label, lfs_t *lfs, const char *path, struct lfs_info *info, int err) {\n    FILE *f = fopen(\"/tmp/logs/1051.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: lfs=%p, path=\\\"%s\\\", info=%p, err=%d\\n\",\n                label, (void*)lfs, (path ? path : \"(null)\"), (void*)info, err);\n        fclose(f);\n    }\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after attempting to lock. This will show the\n       value returned by LFS_LOCK. If LFS_LOCK always yields 0, the\n       subsequent if (err) branch will never execute and that will be\n       observable in the logs. */\n    lfs_stat_log_probe(\"after LFS_LOCK\", lfs, path, info, err);\n\n    if (err) {\n        /* Probe inside the error-return branch so that if it ever runs,\n           there will be a log entry. If this branch is unreachable, no\n           such entry will appear in the log. */\n        lfs_stat_log_probe(\"entering if(err) branch (before return)\", lfs, path, info, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    lfs_stat_log_probe(\"before lfs_stat_\", lfs, path, info, err);\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    lfs_stat_log_probe(\"before LFS_UNLOCK and return\", lfs, path, info, err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}