{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer overflow if the runtime value lfs->name_max exceeds the compile-time LFS_NAME_MAX used to declare info->name. The call requests lfs->name_max+1 bytes to be written into info->name (which is char name[LFS_NAME_MAX+1]). If the on-disk superblock (or other configuration) causes lfs->name_max to be larger than LFS_NAME_MAX, lfs_dir_get will copy up to lfs->name_max+1 bytes (likely using memcpy/memmove/strncpy or similar), writing past the end of info->name and causing an out-of-bounds access. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1059.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log control flow and relevant state to /tmp/logs/1059.txt */\nstatic void lfs_stat_probe(lfs_t *lfs, const char *path, struct lfs_info *info, const char *stage, int err) {\n    FILE *fp = fopen(\"/tmp/logs/1059.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    /* Basic invocation info */\n    fprintf(fp, \"LFS_STAT PROBE: stage=%s, lfs=%p, path=\\\"%s\\\", info=%p, err=%d\\n\",\n            stage, (void*)lfs, path ? path : \"(null)\", (void*)info, err);\n\n    /* Log fields from lfs that are relevant to the reported violation scenario. */\n    if (lfs) {\n        /* lfs->cfg is used by the lock/unlock; name_max is the runtime max name length that\n           may differ from the compile-time LFS_NAME_MAX used for info->name. */\n        fprintf(fp, \"  lfs->cfg=%p, lfs->name_max=%d\\n\",\n                (void*)lfs->cfg, (int)lfs->name_max);\n    }\n\n    /* Close the probe log file. */\n    fclose(fp);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to acquire lock so callers can reproduce path that leads to return. */\n        lfs_stat_probe(lfs, path, info, \"lock_failed\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log state after successful lock and before delegating to lfs_stat_. This is the key\n       observation point for the violation scenario: we record the runtime lfs->name_max and\n       the pointers involved so an external agent can check whether lfs->name_max >\n       compile-time limits for info->name. */\n    lfs_stat_probe(lfs, path, info, \"before_lfs_stat_\", 0);\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log the return from the inner call and capture state afterwards as well. */\n    lfs_stat_probe(lfs, path, info, \"after_lfs_stat_\", err);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}