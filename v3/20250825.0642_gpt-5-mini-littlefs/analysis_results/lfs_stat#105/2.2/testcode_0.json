{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). In lfs_stat this yields int err = LFS_LOCK(lfs->cfg); so the subexpression (void)cfg is evaluated but has no effect on program behaviour (it only suppresses an unused-parameter warning). Removing the (void)cfg (or the entire macro call) would not change behaviour (err would still be 0), so the executed no-op constitutes dead code under MISRA C 2023 Rule 2.2. (Similarly LFS_UNLOCK(cfg) ((void)cfg) is an executed no-op.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1052.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe wrapper that logs the cfg pointer and the return value of LFS_LOCK to a file.\n   This preserves the original behaviour by returning the exact value of LFS_LOCK(cfg). */\nstatic int probe_call_LFS_LOCK(const void *cfg) {\n    FILE *f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"probe: entering probe_call_LFS_LOCK cfg=%p\\n\", cfg);\n        fclose(f);\n    }\n\n    int res = LFS_LOCK(cfg);\n\n    f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"probe: LFS_LOCK returned %d for cfg=%p\\n\", res, cfg);\n        fclose(f);\n    }\n    return res;\n}\n\n/* Probe wrapper that logs entry/exit around LFS_UNLOCK and preserves original behaviour. */\nstatic void probe_call_LFS_UNLOCK(const void *cfg) {\n    FILE *f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"probe: entering probe_call_LFS_UNLOCK cfg=%p\\n\", cfg);\n        fclose(f);\n    }\n\n    LFS_UNLOCK(cfg);\n\n    f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"probe: LFS_UNLOCK completed for cfg=%p\\n\", cfg);\n        fclose(f);\n    }\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Use probe wrapper so logs capture the evaluation and result of the lock macro. */\n    int err = probe_call_LFS_LOCK(lfs->cfg);\n    if (err) {\n        FILE *f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"probe: lfs_stat early return err=%d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n\n    /* Use probe wrapper for unlock to capture that it was executed. */\n    probe_call_LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}