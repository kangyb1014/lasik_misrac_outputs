{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK is defined as ((void)cfg, 0), so the expression LFS_LOCK(lfs->cfg) always evaluates to 0. As a result, err is always 0 and the conditional if (err) { return err; } can never be taken in this project. Removing the LFS_LOCK call / the err assignment and the if-check would not change the program behaviour given the supplied definitions, so this constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1052.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable control-flow and state information\n   to /tmp/logs/1052.txt. Declared static to avoid symbol export. */\nstatic void lfs_stat_probe(const char *event, void *lfs_ptr,\n    const char *path, void *info_ptr, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log event, pointers, path string (if non-NULL), and err value. */\n    fprintf(f, \"EVENT=%s\\n\", event);\n    fprintf(f, \"  lfs=%p, path=%p, info=%p\\n\", lfs_ptr, (void*)path, info_ptr);\n    if (path) {\n        /* Print up to a reasonable length to avoid overly long logs. */\n        fprintf(f, \"  path=\\\"\");\n        for (size_t i = 0; path[i] != '\\0' && i < 256; i++) {\n            int c = (unsigned char)path[i];\n            if (c >= 32 && c < 127) {\n                fputc(c, f);\n            } else {\n                fprintf(f, \"\\\\x%02x\", c);\n            }\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n    fprintf(f, \"  err=%d\\n\", err);\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Preserve original behaviour: call LFS_LOCK and store its result. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log immediately after lock attempt to capture its return value. */\n    lfs_stat_probe(\"after_LFS_LOCK\", (void*)lfs, path, (void*)info, err);\n\n    if (err) {\n        /* Log the path where an early return would occur. */\n        lfs_stat_probe(\"return_on_lock_error\", (void*)lfs, path, (void*)info, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log prior to calling the real implementation. */\n    lfs_stat_probe(\"before_lfs_stat_\", (void*)lfs, path, (void*)info, err);\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Capture the result of lfs_stat_. */\n    lfs_stat_probe(\"after_lfs_stat_\", (void*)lfs, path, (void*)info, err);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log before returning to capture that function exit path. */\n    lfs_stat_probe(\"exit_lfs_stat\", (void*)lfs, path, (void*)info, err);\n\n    return err;\n}\n"
}