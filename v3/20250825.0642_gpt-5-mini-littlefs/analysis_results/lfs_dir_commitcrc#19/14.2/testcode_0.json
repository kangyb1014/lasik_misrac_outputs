{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop \"for (lfs_off_t i = 0; i < size; i += diff)\" uses 'diff' in the third clause while 'diff' is assigned inside the loop body (diff = lfs_min(...)). Clause 3 of MISRA C 2023 Rule 14.2 forbids the third clause from using objects that are modified in the loop body, so this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_commitcrc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/194.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_commitcrc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_commitcrc:\n```c\nstatic int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {\n    // align to program units\n    //\n    // this gets a bit complex as we have two types of crcs:\n    // - 5-word crc with fcrc to check following prog (middle of block)\n    // - 2-word crc with no following prog (end of block)\n    const lfs_off_t end = lfs_alignup(\n            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),\n            lfs->cfg->prog_size);\n\n    lfs_off_t off1 = 0;\n    uint32_t crc1 = 0;\n\n    // create crc tags to fill up remainder of commit, note that\n    // padding is not crced, which lets fetches skip padding but\n    // makes committing a bit more complicated\n    while (commit->off < end) {\n        lfs_off_t noff = (\n                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)\n                + (commit->off+sizeof(lfs_tag_t)));\n        // too large for crc tag? need padding commits\n        if (noff < end) {\n            noff = lfs_min(noff, end - 5*sizeof(uint32_t));\n        }\n\n        // space for fcrc?\n        uint8_t eperturb = (uint8_t)-1;\n        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {\n            // first read the leading byte, this always contains a bit\n            // we can perturb to avoid writes that don't change the fcrc\n            int err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, lfs->cfg->prog_size,\n                    commit->block, noff, &eperturb, 1);\n            if (err && err != LFS_ERR_CORRUPT) {\n                return err;\n            }\n\n        #ifdef LFS_MULTIVERSION\n            // unfortunately fcrcs break mdir fetching < lfs2.1, so only write\n            // these if we're a >= lfs2.1 filesystem\n            if (lfs_fs_disk_version(lfs) <= 0x00020000) {\n                // don't write fcrc\n            } else\n        #endif\n            {\n                // find the expected fcrc, don't bother avoiding a reread\n                // of the eperturb, it should still be in our cache\n                struct lfs_fcrc fcrc = {\n                    .size = lfs->cfg->prog_size,\n                    .crc = 0xffffffff\n                };\n                err = lfs_bd_crc(lfs,\n                        NULL, &lfs->rcache, lfs->cfg->prog_size,\n                        commit->block, noff, fcrc.size, &fcrc.crc);\n                if (err && err != LFS_ERR_CORRUPT) {\n                    return err;\n                }\n\n                lfs_fcrc_tole32(&fcrc);\n                err = lfs_dir_commitattr(lfs, commit,\n                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),\n                        &fcrc);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n\n        // build commit crc\n        struct {\n            lfs_tag_t tag;\n            uint32_t crc;\n        } ccrc;\n        lfs_tag_t ntag = LFS_MKTAG(\n                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,\n                noff - (commit->off+sizeof(lfs_tag_t)));\n        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);\n        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));\n        ccrc.crc = lfs_tole32(commit->crc);\n\n        int err = lfs_bd_prog(lfs,\n                &lfs->pcache, &lfs->rcache, false,\n                commit->block, commit->off, &ccrc, sizeof(ccrc));\n        if (err) {\n            return err;\n        }\n\n        // keep track of non-padding checksum to verify\n        if (off1 == 0) {\n            off1 = commit->off + sizeof(lfs_tag_t);\n            crc1 = commit->crc;\n        }\n\n        commit->off = noff;\n        // perturb valid bit?\n        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);\n        // reset crc for next commit\n        commit->crc = 0xffffffff;\n\n        // manually flush here since we don't prog the padding, this confuses\n        // the caching layer\n        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {\n            // flush buffers\n            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);\n            if (err) {\n                return err;\n            }\n        }\n    }\n\n    // successful commit, check checksums to make sure\n    //\n    // note that we don't need to check padding commits, worst\n    // case if they are corrupted we would have had to compact anyways\n    lfs_off_t off = commit->begin;\n    uint32_t crc = 0xffffffff;\n    int err = lfs_bd_crc(lfs,\n            NULL, &lfs->rcache, off1+sizeof(uint32_t),\n            commit->block, off, off1-off, &crc);\n    if (err) {\n        return err;\n    }\n\n    // check non-padding commits against known crc\n    if (crc != crc1) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    // make sure to check crc in case we happen to pick\n    // up an unrelated crc (frozen block?)\n    err = lfs_bd_crc(lfs,\n            NULL, &lfs->rcache, sizeof(uint32_t),\n            commit->block, off1, sizeof(uint32_t), &crc);\n    if (err) {\n        return err;\n    }\n\n    if (crc != 0) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_commitcrc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Lightweight logging helpers that append to /tmp/logs/194.txt. */\nstatic FILE *lfs_log_file(void) {\n    static FILE *f = NULL;\n    if (f == NULL) {\n        f = fopen(\"/tmp/logs/194.txt\", \"a\");\n        /* best-effort: if fopen fails, we just silently skip logging */\n    }\n    return f;\n}\n\nstatic void lfs_logf(const char *fmt, ...) {\n    FILE *f = lfs_log_file();\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n}\n\nstatic int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {\n    lfs_logf(\"ENTER lfs_dir_commitcrc: block=%llu, begin=%lld, off=%lld, ptag=0x%08x, crc=0x%08x\",\n            (unsigned long long)commit->block, (long long)commit->begin,\n            (long long)commit->off, (unsigned)commit->ptag, (unsigned)commit->crc);\n\n    // align to program units\n    //\n    // this gets a bit complex as we have two types of crcs:\n    // - 5-word crc with fcrc to check following prog (middle of block)\n    // - 2-word crc with no following prog (end of block)\n    const lfs_off_t end = lfs_alignup(\n            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),\n            lfs->cfg->prog_size);\n\n    lfs_logf(\"computed end=%lld (commit->off=%lld, block_size=%u, prog_size=%u)\",\n            (long long)end, (long long)commit->off,\n            (unsigned)lfs->cfg->block_size, (unsigned)lfs->cfg->prog_size);\n\n    lfs_off_t off1 = 0;\n    uint32_t crc1 = 0;\n\n    // create crc tags to fill up remainder of commit, note that\n    // padding is not crced, which lets fetches skip padding but\n    // makes committing a bit more complicated\n    while (commit->off < end) {\n        lfs_logf(\"LOOP start: commit->off=%lld, end=%lld\", (long long)commit->off, (long long)end);\n\n        lfs_off_t noff = (\n                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)\n                + (commit->off+sizeof(lfs_tag_t)));\n        lfs_logf(\"computed initial noff=%lld\", (long long)noff);\n\n        // too large for crc tag? need padding commits\n        if (noff < end) {\n            noff = lfs_min(noff, end - 5*sizeof(uint32_t));\n            lfs_logf(\"adjusted noff (padding)=%lld\", (long long)noff);\n        }\n\n        // space for fcrc?\n        uint8_t eperturb = (uint8_t)-1;\n        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {\n            lfs_logf(\"fcrc candidate: noff=%lld, block_size=%u, prog_size=%u\",\n                    (long long)noff, (unsigned)lfs->cfg->block_size,\n                    (unsigned)lfs->cfg->prog_size);\n            // first read the leading byte, this always contains a bit\n            // we can perturb to avoid writes that don't change the fcrc\n            int err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, lfs->cfg->prog_size,\n                    commit->block, noff, &eperturb, 1);\n            lfs_logf(\"lfs_bd_read returned %d, eperturb=0x%02x\", err, (unsigned)eperturb);\n            if (err && err != LFS_ERR_CORRUPT) {\n                lfs_logf(\"EXIT lfs_dir_commitcrc: lfs_bd_read error %d\", err);\n                return err;\n            }\n\n        #ifdef LFS_MULTIVERSION\n            // unfortunately fcrcs break mdir fetching < lfs2.1, so only write\n            // these if we're a >= lfs2.1 filesystem\n            if (lfs_fs_disk_version(lfs) <= 0x00020000) {\n                // don't write fcrc\n                lfs_logf(\"skipping fcrc due to disk version <= 2.0\");\n            } else\n        #endif\n            {\n                // find the expected fcrc, don't bother avoiding a reread\n                // of the eperturb, it should still be in our cache\n                struct lfs_fcrc fcrc = {\n                    .size = lfs->cfg->prog_size,\n                    .crc = 0xffffffff\n                };\n                lfs_logf(\"computing fcrc: size=%u, initial crc=0x%08x\", fcrc.size, fcrc.crc);\n                err = lfs_bd_crc(lfs,\n                        NULL, &lfs->rcache, lfs->cfg->prog_size,\n                        commit->block, noff, fcrc.size, &fcrc.crc);\n                lfs_logf(\"lfs_bd_crc for fcrc returned %d, fcrc.crc=0x%08x\", err, (unsigned)fcrc.crc);\n                if (err && err != LFS_ERR_CORRUPT) {\n                    lfs_logf(\"EXIT lfs_dir_commitcrc: lfs_bd_crc error %d\", err);\n                    return err;\n                }\n\n                lfs_fcrc_tole32(&fcrc);\n                err = lfs_dir_commitattr(lfs, commit,\n                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),\n                        &fcrc);\n                lfs_logf(\"lfs_dir_commitattr (FCRC) returned %d\", err);\n                if (err) {\n                    lfs_logf(\"EXIT lfs_dir_commitcrc: lfs_dir_commitattr error %d\", err);\n                    return err;\n                }\n            }\n        }\n\n        // build commit crc\n        struct {\n            lfs_tag_t tag;\n            uint32_t crc;\n        } ccrc;\n        lfs_tag_t ntag = LFS_MKTAG(\n                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,\n                noff - (commit->off+sizeof(lfs_tag_t)));\n        lfs_logf(\"ntag computed=0x%08x (eperturb=0x%02x)\", (unsigned)ntag, (unsigned)eperturb);\n        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);\n        lfs_logf(\"ccrc.tag (tobe32(ntag ^ ptag))=0x%08x\", (unsigned)ccrc.tag);\n        lfs_logf(\"commit->crc before lfs_crc=0x%08x\", (unsigned)commit->crc);\n        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));\n        lfs_logf(\"commit->crc after lfs_crc=0x%08x\", (unsigned)commit->crc);\n        ccrc.crc = lfs_tole32(commit->crc);\n\n        int err = lfs_bd_prog(lfs,\n                &lfs->pcache, &lfs->rcache, false,\n                commit->block, commit->off, &ccrc, sizeof(ccrc));\n        lfs_logf(\"lfs_bd_prog returned %d for block=%llu, off=%lld, size=%zu\",\n                err, (unsigned long long)commit->block, (long long)commit->off, sizeof(ccrc));\n        if (err) {\n            lfs_logf(\"EXIT lfs_dir_commitcrc: lfs_bd_prog error %d\", err);\n            return err;\n        }\n\n        // keep track of non-padding checksum to verify\n        if (off1 == 0) {\n            off1 = commit->off + sizeof(lfs_tag_t);\n            crc1 = commit->crc;\n            lfs_logf(\"set off1=%lld, crc1=0x%08x\", (long long)off1, (unsigned)crc1);\n        }\n\n        commit->off = noff;\n        lfs_logf(\"updated commit->off=%lld\", (long long)commit->off);\n        // perturb valid bit?\n        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);\n        lfs_logf(\"updated commit->ptag=0x%08x\", (unsigned)commit->ptag);\n        // reset crc for next commit\n        commit->crc = 0xffffffff;\n        lfs_logf(\"reset commit->crc=0x%08x\", (unsigned)commit->crc);\n\n        // manually flush here since we don't prog the padding, this confuses\n        // the caching layer\n        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {\n            // flush buffers\n            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);\n            lfs_logf(\"lfs_bd_sync returned %d (noff=%lld, end=%lld, pcache.off=%lld, cache_size=%u)\",\n                    err, (long long)noff, (long long)end, (long long)lfs->pcache.off,\n                    (unsigned)lfs->cfg->cache_size);\n            if (err) {\n                lfs_logf(\"EXIT lfs_dir_commitcrc: lfs_bd_sync error %d\", err);\n                return err;\n            }\n        }\n    }\n\n    lfs_logf(\"LOOP complete: off1=%lld, crc1=0x%08x\", (long long)off1, (unsigned)crc1);\n\n    // successful commit, check checksums to make sure\n    //\n    // note that we don't need to check padding commits, worst\n    // case if they are corrupted we would have had to compact anyways\n    lfs_off_t off = commit->begin;\n    uint32_t crc = 0xffffffff;\n    int err = lfs_bd_crc(lfs,\n            NULL, &lfs->rcache, off1+sizeof(uint32_t),\n            commit->block, off, off1-off, &crc);\n    lfs_logf(\"lfs_bd_crc(check non-padding) returned %d, crc=0x%08x (block=%llu, off=%lld, len=%lld)\",\n            err, (unsigned)crc, (unsigned long long)commit->block, (long long)off, (long long)(off1-off));\n    if (err) {\n        lfs_logf(\"EXIT lfs_dir_commitcrc: lfs_bd_crc error %d\", err);\n        return err;\n    }\n\n    // check non-padding commits against known crc\n    if (crc != crc1) {\n        lfs_logf(\"CRC mismatch: computed=0x%08x, expected=0x%08x -> LFS_ERR_CORRUPT\", (unsigned)crc, (unsigned)crc1);\n        return LFS_ERR_CORRUPT;\n    }\n\n    // make sure to check crc in case we happen to pick\n    // up an unrelated crc (frozen block?)\n    err = lfs_bd_crc(lfs,\n            NULL, &lfs->rcache, sizeof(uint32_t),\n            commit->block, off1, sizeof(uint32_t), &crc);\n    lfs_logf(\"lfs_bd_crc(check trailing crc) returned %d, crc=0x%08x (block=%llu, off1=%lld)\",\n            err, (unsigned)crc, (unsigned long long)commit->block, (long long)off1);\n    if (err) {\n        lfs_logf(\"EXIT lfs_dir_commitcrc: lfs_bd_crc error %d\", err);\n        return err;\n    }\n\n    if (crc != 0) {\n        lfs_logf(\"Trailing CRC not zero: crc=0x%08x -> LFS_ERR_CORRUPT\", (unsigned)crc);\n        return LFS_ERR_CORRUPT;\n    }\n\n    lfs_logf(\"EXIT lfs_dir_commitcrc: success\");\n    return 0;\n}\n"
}