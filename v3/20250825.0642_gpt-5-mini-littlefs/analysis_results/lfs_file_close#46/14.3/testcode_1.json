{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'err' is initialized as int err = LFS_LOCK(lfs->cfg); and LFS_LOCK(cfg) is defined as ((void)cfg,0), so 'err' is always 0. The controlling expression if (err) is therefore invariant (always false), which violates MISRA C 2023 Rule 14.3. Neither of the rule's exceptions (infinite loop or the specific do-while pattern) applies here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/465.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/465.txt\n * Kept static to limit linkage and avoid impacting external symbols. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/465.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original locking and initialization */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record entry and the value returned by LFS_LOCK. This makes it\n     * explicit when the locking macro returns a constant (e.g. 0). */\n    lfs_probe_log(\"lfs_file_close ENTRY: lfs=%p file=%p LFS_LOCK(lfs->cfg) -> %d\",\n                  (void*)lfs, (void*)file, err);\n\n    if (err) {\n        /* Probe: record early exit due to lock failure. */\n        lfs_probe_log(\"lfs_file_close EARLY RETURN: err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    /* Probe: record result of internal close operation before unlocking. */\n    lfs_probe_log(\"lfs_file_close after lfs_file_close_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: final exit log showing returned error code. */\n    lfs_probe_log(\"lfs_file_close EXIT: returning err=%d\", err);\n\n    return err;\n}\n"
}