{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_file_close the code 'int err = LFS_LOCK(lfs->cfg); if (err) { return err; }' contains unreachable code: LFS_LOCK is defined as '((void)cfg, 0)', so it always yields 0 and 'if (err)' is always false. The 'return err;' branch can never be executed in this configuration, violating MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/461.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append log lines to /tmp/logs/461.txt capturing control flow and state */\nstatic void lfs_log_probe(const char *stage, const void *lfs, const void *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/461.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, pointers and error code. Use %p for pointers and %d for err. */\n    fprintf(f, \"%s: lfs=%p, file=%p, err=%d\\n\", stage, lfs, file, err);\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry into function */\n    lfs_log_probe(\"enter_lfs_file_close\", (void*)lfs, (void*)file, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock operation */\n    lfs_log_probe(\"after_lock\", (void*)lfs, (void*)file, err);\n\n    if (err) {\n        /* Log the branch taken and return value before returning */\n        lfs_log_probe(\"return_from_lock_due_to_err\", (void*)lfs, (void*)file, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    /* Log result of internal close */\n    lfs_log_probe(\"after_lfs_file_close_\", (void*)lfs, (void*)file, err);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log before final return */\n    lfs_log_probe(\"exit_lfs_file_close\", (void*)lfs, (void*)file, err);\n    return err;\n}\n"
}