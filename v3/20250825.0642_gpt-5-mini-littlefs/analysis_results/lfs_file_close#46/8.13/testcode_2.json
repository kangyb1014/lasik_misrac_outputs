{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a non-const lfs_file_t * ('file') to lfs_file_close_. The enclosing function is declared as int lfs_file_close(lfs_t *lfs, lfs_file_t *file). If lfs_file_close_ (and the implementation) do not modify the object pointed to by file, then the parameter should be const-qualified (const lfs_file_t *), so the pointer is not const-qualified here and thus violates MISRA C 2023 Rule 8.13. (If lfs_file_close_ actually modifies *file, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/463.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/463.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_hexdiff(const void *before, const void *after, size_t size)\n{\n    const unsigned char *b = (const unsigned char*)before;\n    const unsigned char *a = (const unsigned char*)after;\n    FILE *f = fopen(\"/tmp/logs/463.txt\", \"a\");\n    if (!f) return;\n\n    size_t diffs = 0;\n    for (size_t i = 0; i < size; ++i) {\n        if (b[i] != a[i]) {\n            if (diffs == 0) {\n                fprintf(f, \"-- differences (offset: before -> after):\\n\");\n            }\n            if (diffs < 64) {\n                fprintf(f, \"[%zu]: 0x%02x -> 0x%02x\\n\", i, b[i], a[i]);\n            }\n            ++diffs;\n        }\n    }\n    if (diffs == 0) {\n        fprintf(f, \"-- no byte-level differences detected (size=%zu)\\n\", size);\n    } else if (diffs > 64) {\n        fprintf(f, \"-- %zu total differences (only first 64 shown)\\n\", diffs);\n    }\n    fclose(f);\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"enter: lfs_file_close(lfs=%p, file=%p) - after LFS_LOCK -> %d\", (void*)lfs, (void*)file, err);\n    if (err) {\n        probe_log(\"LFS_LOCK failed, returning %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* capture and log the \"is open\" check */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    probe_log(\"lfs_mlist_isopen -> %d (lfs=%p, file=%p)\", isopen, (void*)lfs, (void*)file);\n    LFS_ASSERT(isopen);\n\n    /* snapshot the file object bytes before the close call */\n    unsigned char *before = NULL;\n    unsigned char *after = NULL;\n    size_t fsize = 0;\n    if (file != NULL) {\n        /* try to capture sizeof the object; if lfs_file_t is an incomplete type here,\n           this will be a compile error in the original build and should be adjusted.\n           We assume the type is complete in this translation unit as in the original code. */\n        fsize = sizeof(lfs_file_t);\n        before = (unsigned char*)malloc(fsize);\n        if (before) {\n            memcpy(before, file, fsize);\n            probe_log(\"snapshot before lfs_file_close_: captured %zu bytes from file=%p\", fsize, (void*)file);\n        } else {\n            probe_log(\"warning: failed to allocate snapshot buffer (before)\");\n        }\n    } else {\n        probe_log(\"note: file pointer is NULL, skipping snapshot\");\n    }\n\n    err = lfs_file_close_(lfs, file);\n\n    probe_log(\"lfs_file_close_ returned %d (lfs=%p, file=%p)\", err, (void*)lfs, (void*)file);\n\n    /* snapshot after and compare */\n    if (file != NULL && before) {\n        after = (unsigned char*)malloc(fsize);\n        if (after) {\n            memcpy(after, file, fsize);\n            probe_log(\"snapshot after lfs_file_close_: captured %zu bytes from file=%p\", fsize, (void*)file);\n            probe_hexdiff(before, after, fsize);\n            free(after);\n        } else {\n            probe_log(\"warning: failed to allocate snapshot buffer (after)\");\n        }\n        free(before);\n    }\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"exit: lfs_file_close(lfs=%p, file=%p) returning %d\", (void*)lfs, (void*)file, err);\n    return err;\n}\n"
}