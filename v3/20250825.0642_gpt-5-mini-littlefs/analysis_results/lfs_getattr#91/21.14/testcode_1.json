{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(name, \".\", 1) (and similar calls memcmp(name, \"..\", 2) and memcmp(suffix, \".\", 1)/memcmp(suffix, \"..\", 2)) to test for the string \".\"/\"..\". These use memcmp to compare against null-terminated string literals, which violates MISRA C 2023 Rule 21.14 (memcmp shall not be used to compare null terminated strings).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/918.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <unistd.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/918.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/918.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/*\n * Replace/override memcmp in this translation unit to capture all memcmp calls\n * and log the arguments (pointers and length) and a small hexdump of the\n * compared bytes (up to a few bytes). The implementation preserves the\n * standard memcmp semantics.\n */\nint memcmp(const void *s1, const void *s2, size_t n)\n{\n    /* Log caller context: process id and addresses/length */\n    probe_log(\"[memcmp_probe] pid=%d s1=%p s2=%p n=%zu\", (int)getpid(), s1, s2, n);\n\n    /* Safe small dump: show up to 8 bytes from each buffer but never read\n       more than n bytes for each buffer. This avoids reading past the\n       requested comparison length. */\n    size_t dump = (n < 8u) ? n : 8u;\n    if (dump > 0) {\n        const unsigned char *a = (const unsigned char *)s1;\n        const unsigned char *b = (const unsigned char *)s2;\n        char buf1[3 * 8 + 1] = {0};\n        char buf2[3 * 8 + 1] = {0};\n        size_t i;\n        char *p1 = buf1;\n        char *p2 = buf2;\n        for (i = 0; i < dump; i++) {\n            int written1 = snprintf(p1, 4, \"%02X \", (unsigned int)a[i]);\n            int written2 = snprintf(p2, 4, \"%02X \", (unsigned int)b[i]);\n            if (written1 > 0) p1 += written1;\n            if (written2 > 0) p2 += written2;\n        }\n        probe_log(\"[memcmp_probe] s1[%zu]=%s s2[%zu]=%s\", dump, buf1, dump, buf2);\n    }\n\n    /* Standard byte-wise comparison */\n    const unsigned char *p1 = (const unsigned char *)s1;\n    const unsigned char *p2 = (const unsigned char *)s2;\n    size_t i;\n    for (i = 0; i < n; i++) {\n        if (p1[i] != p2[i]) {\n            int diff = (int)p1[i] - (int)p2[i];\n            probe_log(\"[memcmp_probe] result=%d (first diff at index %zu: %02X vs %02X)\",\n                      diff, i, p1[i], p2[i]);\n            return diff;\n        }\n    }\n    probe_log(\"[memcmp_probe] result=0 (equal for n=%zu)\", n);\n    return 0;\n}\n\n/* Modified lfs_getattr: insert probes but preserve original logic. */\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        probe_log(\"[lfs_getattr] LFS_LOCK failed: err=%d path=%s type=%u buffer=%p size=%u\",\n                  err, (path?path:\"(null)\"), (unsigned)type, buffer, (unsigned)size);\n        return err;\n    }\n\n    /* Trace entry and record key state for reproducing memcmp comparisons */\n    probe_log(\"[lfs_getattr] entry lfs=%p path=\\\"%s\\\" type=%\" PRIu8 \" buffer=%p size=%\" PRIu32,\n              (void*)lfs, (path?path:\"(null)\"), type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    probe_log(\"[lfs_getattr] exit res=%\" PRId32 \" lfs=%p path=\\\"%s\\\"\",\n              res, (void*)lfs, (path?path:\"(null)\"));\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}