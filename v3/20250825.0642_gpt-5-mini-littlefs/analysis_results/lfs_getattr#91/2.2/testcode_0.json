{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro expands to ((void)cfg, 0). The (void)cfg subexpression is evaluated but has no effect (it only suppresses unused-variable warnings) and the macro always yields 0. In the shown use (int err = LFS_LOCK(lfs->cfg);) removing the (void)cfg evaluation (or replacing the call with 0) would not change program behaviour in the normal case where evaluating cfg has no side-effects. Therefore this constitutes dead code. (Note: if the cfg expression had observable side-effects, the evaluation would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/912.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helpers: write logs to /tmp/logs/912.txt. These functions are\n   inserted to capture control flow and state around the LFS_LOCK usage\n   so that agents can reproduce evidence for the reported dead-code\n   situation. They preserve the original logic of lfs_getattr as much\n   as possible and do not change return values or control flow. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/912.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void lfs_probe_cfg_state(void *lfs_ptr, const char *phase, void *cfg_ptr)\n{\n    /* Log the lfs pointer, a phase tag, and the evaluated cfg pointer.\n       We intentionally only log pointer values to avoid dereferencing\n       unknown structures and to keep the probe non-intrusive. */\n    lfs_probe_log(\"[probe] %s: lfs=%p, cfg=%p\", phase, lfs_ptr, cfg_ptr);\n}\n\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    /* Capture and log state around the LFS_LOCK evaluation so that we\n       can demonstrate whether evaluating the cfg expression produced\n       any observable change. Note: reading lfs->cfg here may cause an\n       additional evaluation in cases where the cfg expression has\n       side-effects. This is intended only to collect evidence; if the\n       cfg expression genuinely has side-effects, the original code's\n       behavior would differ and the reported violation would not\n       apply. */\n    void *captured_cfg_before = (void*)(lfs ? lfs->cfg : NULL);\n    lfs_probe_cfg_state((void*)lfs, \"before_LFS_LOCK\", captured_cfg_before);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the return value from LFS_LOCK and the cfg pointer after\n       the macro evaluation. This helps show that the lock macro\n       always returns 0 and that evaluating cfg (as done inside the\n       macro) had no observable effect on the cfg pointer itself. */\n    lfs_probe_log(\"[probe] LFS_LOCK returned %d\", err);\n    void *captured_cfg_after = (void*)(lfs ? lfs->cfg : NULL);\n    lfs_probe_cfg_state((void*)lfs, \"after_LFS_LOCK\", captured_cfg_after);\n\n    if (err) {\n        lfs_probe_log(\"[probe] early return due to LFS_LOCK error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n\n    lfs_probe_log(\"[probe] before LFS_UNLOCK: result=%\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"[probe] after LFS_UNLOCK\");\n\n    return res;\n}\n"
}