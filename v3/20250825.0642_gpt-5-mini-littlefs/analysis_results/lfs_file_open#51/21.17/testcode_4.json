{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen opening a file for read the code calls lfs_dir_get(..., file->cfg->attrs[i].size, file->cfg->attrs[i].buffer) without validating that attrs[i].buffer is non-NULL and at least attrs[i].size bytes long. If attrs[i].buffer is NULL or points to a smaller buffer than attrs[i].size, lfs_dir_get (which likely copies attr_count bytes into the supplied buffer via memcpy/memmove/etc.) can write beyond the buffer bounds, causing an out-of-bounds access and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Probe logging: record entry and key pointers/state to /tmp/logs/519.txt */\n    {\n        FILE *log = fopen(\"/tmp/logs/519.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ENTER lfs_file_open: lfs=%p file=%p path=\\\"%s\\\" flags=0x%x\\n\",\n                    (void*)lfs, (void*)file, path ? path : \"(null)\", (unsigned)flags);\n            /* Probe some cfg pointers if available */\n            if (file == NULL) {\n                fprintf(log, \"  note: file == NULL\\n\");\n            } else {\n                fprintf(log, \"  file=%p\\n\", (void*)file);\n                fprintf(log, \"  file->cfg=%p\\n\", (void*)file->cfg);\n                /* If the file config exposes attrs and a count field, log them safely. */\n                if (file->cfg) {\n                    /* Many codebases use attrs and attrs_count / attr_count naming conventions. */\n                    /* Try to print attrs pointer and (if available) the attrs_count field. */\n                    /* These field names must match the project's definitions. */\n                    fprintf(log, \"  file->cfg->attrs=%p\\n\", (void*)file->cfg->attrs);\n\n                    /* Attempt to log attribute count and each attribute's size and buffer. */\n                    /* Use a best-effort approach: if attrs_count exists it will be used. */\n                    /* This preserves original logic; if the fields do not exist in this build,\n                       the compiler will report it and the developer can adapt the probe. */\n                    #if 1\n                    /* Most builds have attrs_count; log entries up to that count. */\n                    fprintf(log, \"  file->cfg->attrs_count=%d\\n\", (int)file->cfg->attrs_count);\n                    for (int _i = 0; _i < (int)file->cfg->attrs_count; _i++) {\n                        fprintf(log, \"    attrs[%d].size=%zu attrs[%d].buffer=%p\\n\",\n                                _i, (size_t)file->cfg->attrs[_i].size, _i, (void*)file->cfg->attrs[_i].buffer);\n                    }\n                    #endif\n                }\n            }\n            fclose(log);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    /* Probe logging: record return status and post-call state to /tmp/logs/519.txt */\n    {\n        FILE *log = fopen(\"/tmp/logs/519.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"EXIT  lfs_file_open -> %d\\n\", err);\n            if (file == NULL) {\n                fprintf(log, \"  note: file == NULL after call\\n\");\n            } else {\n                fprintf(log, \"  post file=%p file->cfg=%p\\n\", (void*)file, (void*)file->cfg);\n                if (file->cfg) {\n                    fprintf(log, \"  post file->cfg->attrs=%p\\n\", (void*)file->cfg->attrs);\n                    /* Best-effort: log attribute-count and attribute entries (size, buffer)\n                       to capture the scenario where attrs[i].buffer is NULL or size is large. */\n                    #if 1\n                    fprintf(log, \"  post file->cfg->attrs_count=%d\\n\", (int)file->cfg->attrs_count);\n                    for (int _i = 0; _i < (int)file->cfg->attrs_count; _i++) {\n                        fprintf(log, \"    post attrs[%d].size=%zu post attrs[%d].buffer=%p\\n\",\n                                _i, (size_t)file->cfg->attrs[_i].size, _i, (void*)file->cfg->attrs[_i].buffer);\n                    }\n                    #endif\n                }\n            }\n            fclose(log);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}