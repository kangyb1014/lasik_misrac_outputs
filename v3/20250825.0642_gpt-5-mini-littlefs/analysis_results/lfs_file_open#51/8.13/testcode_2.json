{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_mlist_isopen takes non-const pointers (struct lfs_mlist *head, struct lfs_mlist *node) but only reads from the list and does not modify the pointed-to objects. Therefore both parameters should be const-qualified (e.g. const struct lfs_mlist *head, const struct lfs_mlist *node). The current signature violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper. Appends control-flow and state info to /tmp/logs/513.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/513.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1) {\n        fprintf(f, \"[%ld] \", (long)t);\n    } else {\n        fprintf(f, \"[no-time] \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and initial lock result */\n    probe_log(\"lfs_file_open ENTER: lfs=%p file=%p path=\\\"%s\\\" flags=0x%X lock_err=%d\",\n              (void*)lfs, (void*)file, path ? path : \"(null)\", (unsigned)flags, err);\n\n    if (err) {\n        probe_log(\"lfs_file_open: early return due to lock error=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n\n    /* Log the parameters passed to lfs_mlist_isopen to capture the violation scenario. */\n    probe_log(\"lfs_file_open: about to call lfs_mlist_isopen with mlist=%p node=%p\",\n              (void*)lfs->mlist, (void*)file);\n\n    probe_log(\"lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\");\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    probe_log(\"lfs_file_open: lfs_mlist_isopen finished (assert passed)\");\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    probe_log(\"lfs_file_open: lfs_file_open_ returned err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    probe_log(\"lfs_file_open EXIT: returning err=%d\", err);\n    return err;\n}\n"
}