{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn this build LFS_LOCK(lfs->cfg) is defined as ((void)cfg, 0), so err is always 0 and the branch if (err) { return err; } can never be taken. This makes that return statement unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/511.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helpers: write append logs to /tmp/logs/511.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *fp = fopen(\"/tmp/logs/511.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic void lfs_probe_state(lfs_t *lfs, lfs_file_t *file, const char *path, int flags, int err, const char *stage) {\n    /* Log pointer values and key integers so other agents can reproduce the scenario. */\n    lfs_probe_log(\"[probe] %s: lfs=%p file=%p path=\\\"%s\\\" flags=0x%x err=%d cfg=%p\",\n                  stage, (void*)lfs, (void*)file, (path ? path : \"(null)\"), (unsigned)flags, err, (void*)(lfs ? lfs->cfg : NULL));\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: after attempting to acquire lock. This will show the value of err. */\n    lfs_probe_state(lfs, file, path, flags, err, \"after_lock\");\n\n    if (err) {\n        /* Probe: branch taken. Record and return the error as original logic does. */\n        lfs_probe_log(\"[probe] if(err) branch taken: returning %d\", err);\n        return err;\n    }\n\n    lfs_probe_log(\"[probe] if(err) branch not taken (err=%d). Proceeding to open.\", err);\n\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n\n    /* Probe: after the underlying open attempt, before unlocking. */\n    lfs_probe_state(lfs, file, path, flags, err, \"after_open_\");\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"[probe] returning err=%d\", err);\n    return err;\n}\n"
}