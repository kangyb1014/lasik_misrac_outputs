{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller provides cfg->buffer pointing to a buffer smaller than lfs->cfg->cache_size (or otherwise not at least lfs->cfg->cache_size bytes), lfs_file_opencfg_ assigns file->cache.buffer = cfg->buffer without checking its length and then calls lfs_cache_zero which does memset(pcache->buffer, 0xff, lfs->cfg->cache_size). This can write past the end of the supplied buffer and thus accesses beyond the bounds of the object referenced by the pointer parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/529.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe helper to safely write logs to /tmp/logs/529.txt.\n   This preserves original control flow and does not alter program logic. */\nstatic void lfs_file_opencfg_log_probe(const char *phase,\n        void *lfs_ptr, void *file_ptr, const char *path, unsigned flags,\n        const void *cfg_ptr, const void *cfg_buffer, const void *cfg_attrs,\n        uint32_t cfg_attr_count, const void *lfs_cfg_ptr, unsigned long long cache_size,\n        int err)\n{\n    FILE *f = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (!f) {\n        return; /* best-effort logging only */\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#ifdef _WIN32\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n    char timestr[64];\n    if (tm_buf.tm_year) {\n        strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n    } else {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"[%s] lfs_file_opencfg %s\\n\", timestr, phase);\n    fprintf(f, \"  lfs=%p, file=%p, path=%s, flags=0x%08x\\n\",\n            lfs_ptr, file_ptr, (path ? path : \"(null)\"), flags);\n    fprintf(f, \"  cfg=%p, cfg->buffer=%p, cfg->attrs=%p, cfg->attr_count=%\" PRIu32 \"\\n\",\n            cfg_ptr, cfg_buffer, cfg_attrs, cfg_attr_count);\n    if (lfs_cfg_ptr) {\n        fprintf(f, \"  lfs->cfg=%p, lfs->cfg->cache_size=%llu\\n\",\n                lfs_cfg_ptr, cache_size);\n    } else {\n        fprintf(f, \"  lfs->cfg=(null)\\n\");\n    }\n    fprintf(f, \"  err=%d\\n\", err);\n    fprintf(f, \"  -----------------------------\\n\");\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg ? cfg->buffer : NULL,\n            (void*)(cfg ? cfg->attrs : NULL), cfg ? cfg->attr_count : 0);\n\n    /* Insert probe logging BEFORE the internal open to capture caller-supplied pointers\n       and the current cache configuration. Do not change original logic. */\n    lfs_file_opencfg_log_probe(\"before\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (const void*)cfg, cfg ? cfg->buffer : NULL,\n            cfg ? cfg->attrs : NULL, cfg ? cfg->attr_count : 0,\n            (lfs && lfs->cfg) ? (void*)lfs->cfg : NULL,\n            (lfs && lfs->cfg) ? (unsigned long long)lfs->cfg->cache_size : 0ULL,\n            0 /* err not known yet */);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Probe logging AFTER the internal open to capture the result and any state changes.\n       This helps reproduce scenarios where cfg->buffer may be smaller than lfs->cfg->cache_size\n       by recording both pointers and the cache_size at the time of call/return. */\n    lfs_file_opencfg_log_probe(\"after\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (const void*)cfg, cfg ? cfg->buffer : NULL,\n            cfg ? cfg->attrs : NULL, cfg ? cfg->attr_count : 0,\n            (lfs && lfs->cfg) ? (void*)lfs->cfg : NULL,\n            (lfs && lfs->cfg) ? (unsigned long long)lfs->cfg->cache_size : 0ULL,\n            err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}