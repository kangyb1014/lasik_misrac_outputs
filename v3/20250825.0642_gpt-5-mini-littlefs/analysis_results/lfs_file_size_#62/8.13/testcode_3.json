{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nBoth pointer parameters are not const-qualified even though they are only read. In lfs_file_size_ neither lfs nor file is modified: lfs is unused (cast away) and file is only read (file->flags, file->pos, file->ctz.size). According to MISRA C 2023 Rule 8.13 they should be const-qualified, e.g. static lfs_soff_t lfs_file_size_(const lfs_t *lfs, const lfs_file_t *file).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size_:\n```c\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size_ code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger for lfs_file_size_ to record control flow and state. */\nstatic void lfs_file_size_log(const char *phase, void *lfs_ptr, void *file_ptr,\n    long long pos, long long ctz_size, unsigned int flags, long long result, int branch)\n{\n    FILE *f = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (f != NULL) {\n        /* phase: descriptive tag; lfs/file pointers; fields: flags, pos, ctz.size; branch: 1 if writing-path taken, 0 otherwise, -1 unknown */\n        fprintf(f, \"%s: lfs=%p file=%p flags=0x%08x pos=%lld ctz.size=%lld branch=%d result=%lld\\n\",\n            phase, lfs_ptr, file_ptr, flags, pos, ctz_size, branch, result);\n        fclose(f);\n    }\n}\n\n/* Original function with inserted probes. Preserve signature and logic. */\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n    /* Log entry state. Use casts to basic types for portability of logging. */\n    lfs_file_size_log(\"ENTER\", (void*)lfs, (void*)file,\n        (long long)file->pos, (long long)file->ctz.size, (unsigned int)file->flags,\n        (long long)0, -1);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        lfs_soff_t res = lfs_max(file->pos, file->ctz.size);\n        /* Log taken writing branch and the computed result. */\n        lfs_file_size_log(\"BRANCH_WRITING\", (void*)lfs, (void*)file,\n            (long long)file->pos, (long long)file->ctz.size, (unsigned int)file->flags,\n            (long long)res, 1);\n        return res;\n    }\n#endif\n\n    lfs_soff_t final_res = file->ctz.size;\n    /* Log return path and final size. */\n    lfs_file_size_log(\"RETURN\", (void*)lfs, (void*)file,\n        (long long)file->pos, (long long)file->ctz.size, (unsigned int)file->flags,\n        (long long)final_res, 0);\n\n    return final_res;\n}\n"
}