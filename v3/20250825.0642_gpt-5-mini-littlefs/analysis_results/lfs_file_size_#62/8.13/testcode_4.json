{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe lookahead buffer is declared as a mutable pointer (uint8_t *buffer) even though it appears to be used as read-only lookahead state. If the buffer is intended to point to memory that should not be modified by the implementation (for example, a caller-supplied bitmap/bitfield or a region treated only for inspection), then the pointer should be const-qualified (const uint8_t *buffer). Leaving it non-const when it could be const violates MISRA C 2023 Rule 8.13. A corrective action is to change the declaration to const uint8_t *buffer (or keep it non-const only if the implementation actually modifies the bytes).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size_:\n```c\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size_ code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void lfs_file_size_log(const char *event, const lfs_t *lfs, const lfs_file_t *file) {\n    (void)lfs; /* preserve original unused parameter behavior */\n\n    FILE *fp = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (fp) {\n        /* Log pointer, flags, position and ctz size to help reproduce the scenario */\n        fprintf(fp, \"[lfs_file_size_] %s: file=%p flags=0x%08x pos=%lld ctz_size=%lld\\n\",\n                event,\n                (void *)file,\n                (unsigned)file->flags,\n                (long long)file->pos,\n                (long long)file->ctz.size);\n        fclose(fp);\n    }\n}\n\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n    lfs_file_size_log(\"ENTRY\", lfs, file);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        lfs_file_size_log(\"WRITING_BRANCH\", lfs, file);\n        lfs_soff_t ret = lfs_max(file->pos, file->ctz.size);\n        lfs_file_size_log(\"RETURN_WRITING\", lfs, file);\n        return ret;\n    }\n#endif\n\n    lfs_file_size_log(\"RETURN_DEFAULT\", lfs, file);\n    return file->ctz.size;\n}"
}