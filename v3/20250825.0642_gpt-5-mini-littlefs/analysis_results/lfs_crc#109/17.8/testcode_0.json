{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'crc' is modified inside lfs_crc (assignments like 'crc = (crc >> 4) ^ rtable[...]' in the loop). This changes the function parameter variable rather than using a separate local copy, violating MISRA C 2023 Rule 17.8. The pointer parameter 'buffer' is not modified (only read via 'data').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_crc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1097.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_crc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_crc:\n```c\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = buffer;\n\n    for (size_t i = 0; i < size; i++) {\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];\n    }\n\n    return crc;\n}\n```\n</target_code>\nPlease provide the modified lfs_crc code.\n",
  "test_code": "#include <stdint.h>\n#include <stddef.h>\n#include <stdio.h>\n#include <inttypes.h>\n\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = buffer;\n\n    /* Open log file in append mode to record the control flow and state. */\n    FILE *log = fopen(\"/tmp/logs/1097.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"lfs_crc call: initial crc=0x%08\" PRIX32 \" buffer=%p size=%zu\\n\",\n                crc, buffer, size);\n    }\n\n    for (size_t i = 0; i < size; i++) {\n        if (log) {\n            fprintf(log, \" i=%zu data=0x%02X crc_before=0x%08\" PRIX32 \"\\n\",\n                    i, (unsigned int)data[i], crc);\n        }\n\n        /* original logic preserved: crc parameter is modified in-place */\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0u)) & 0xfu];\n\n        if (log) {\n            fprintf(log, \"  after first step crc=0x%08\" PRIX32 \"\\n\", crc);\n        }\n\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4u)) & 0xfu];\n\n        if (log) {\n            fprintf(log, \"  after second step crc=0x%08\" PRIX32 \"\\n\", crc);\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"lfs_crc return: final crc=0x%08\" PRIX32 \"\\n\\n\", crc);\n        fclose(log);\n    }\n\n    return crc;\n}\n"
}