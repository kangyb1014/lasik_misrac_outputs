{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(lfs->cfg); statement expands to ((void)lfs->cfg); (per #define LFS_UNLOCK(cfg) ((void)cfg)). That expression statement has no runtime effect, so executing it and removing it would not change program behaviour in this project configuration. Therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2. (Note: if LFS_UNLOCK were defined differently in other build configurations to actually perform an unlock, it would not be dead; but given the provided project definition it is.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/612.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/*\n * Probe logging helper. Appends human-readable logs to /tmp/logs/612.txt.\n * Kept minimal and side-effect free (opens, writes, closes).\n */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Modified lfs_file_size with probes that record control flow and state\n * information relevant to the reported dead-code scenario for LFS_UNLOCK.\n * The original logic is preserved.\n */\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry with pointers and intention to lock */\n    lfs_probe_log(\"ENTER lfs_file_size: lfs=%p file=%p\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"after LFS_LOCK: err=%d cfg_ptr=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_probe_log(\"early return from lfs_file_size due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"calling lfs_file_size_ with lfs=%p file=%p\", (void*)lfs, (void*)file);\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Log result from internal call */\n    lfs_probe_log(\"lfs_file_size_ returned res=%lld (as long long)\", (long long)res);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n\n    /* Capture cfg pointer value immediately before unlock */\n    lfs_probe_log(\"before LFS_UNLOCK: cfg_ptr=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    /* Capture cfg pointer value immediately after unlock to demonstrate any change */\n    lfs_probe_log(\"after LFS_UNLOCK: cfg_ptr=%p\", (void*)lfs->cfg);\n\n    lfs_probe_log(\"EXIT lfs_file_size returning res=%lld\", (long long)res);\n    return res;\n}\n"
}