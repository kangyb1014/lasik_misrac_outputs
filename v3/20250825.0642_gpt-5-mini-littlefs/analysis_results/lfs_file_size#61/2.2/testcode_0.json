{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_file_size the call int err = LFS_LOCK(lfs->cfg); expands to ((void)lfs->cfg, 0). The sub-expression (void)lfs->cfg is executed but has no effect (it only discards the value) \u2014 removing that cast/expression would not change program behaviour in the given configuration. Therefore the macro contains executed code that is effectively a no-op (dead code). (Note: if the cfg expression had observable side-effects \u2014 e.g. involved volatile accesses or function calls \u2014 it would not be dead; in the present code lfs->cfg is a plain member access, so the operation is dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/612.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Probe logging to capture the evaluation of lfs->cfg and control flow.\n       Logs appended to /tmp/logs/612.txt for later analysis. */\n    FILE *___lfs_probe_log = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (___lfs_probe_log) {\n        fprintf(___lfs_probe_log, \"ENTER lfs_file_size: lfs=%p, file=%p\\n\", (void*)lfs, (void*)file);\n        /* Log the address of cfg and its current value (to show the member access is performed).\n           Using two separate prints to make it obvious in logs which value/address was touched. */\n        fprintf(___lfs_probe_log, \"PROBE pre-read: &lfs->cfg=%p, lfs->cfg=%p\\n\", (void*)&lfs->cfg, (void*)lfs->cfg);\n        fflush(___lfs_probe_log);\n    }\n\n    /* Original lock expression left intact to preserve behaviour */\n    int err = LFS_LOCK(lfs->cfg);\n\n    if (___lfs_probe_log) {\n        fprintf(___lfs_probe_log, \"PROBE after LFS_LOCK: returned err=%d\\n\", err);\n        fprintf(___lfs_probe_log, \"PROBE post-read: lfs->cfg=%p\\n\", (void*)lfs->cfg);\n        fflush(___lfs_probe_log);\n    }\n\n    if (err) {\n        if (___lfs_probe_log) {\n            fprintf(___lfs_probe_log, \"EXIT lfs_file_size early: err=%d\\n\", err);\n            fclose(___lfs_probe_log);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    if (___lfs_probe_log) {\n        /* Use the same formatting as the regular trace to make comparison easy. */\n        fprintf(___lfs_probe_log, \"PROBE result: lfs_file_size_ returned = %\"PRIu32\"\\n\", res);\n        fflush(___lfs_probe_log);\n    }\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    if (___lfs_probe_log) {\n        fprintf(___lfs_probe_log, \"EXIT lfs_file_size normal: returning %\"PRIu32\"\\n\", res);\n        fclose(___lfs_probe_log);\n    }\n\n    return res;\n}\n"
}