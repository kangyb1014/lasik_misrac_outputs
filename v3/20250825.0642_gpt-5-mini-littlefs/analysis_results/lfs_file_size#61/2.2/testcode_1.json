{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the expression ((void)cfg), which is a no-op with no side effects. In lfs_file_size() this statement is executed but removing it would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2. (Note: it may be a placeholder for other build configurations, but in the present project configuration it is dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/612.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: append formatted messages to /tmp/logs/612.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void probe_log_lock_result(lfs_t *lfs, lfs_file_t *file, int err)\n{\n    probe_logf(\"[probe] lfs_file_size: after LFS_LOCK: lfs=%p file=%p cfg=%p err=%d\",\n               (void*)lfs, (void*)file, (void*)(lfs ? lfs->cfg : NULL), err);\n}\n\nstatic void probe_log_before_size(lfs_t *lfs, lfs_file_t *file)\n{\n    probe_logf(\"[probe] lfs_file_size: before lfs_file_size_: lfs=%p file=%p cfg=%p\",\n               (void*)lfs, (void*)file, (void*)(lfs ? lfs->cfg : NULL));\n}\n\nstatic void probe_log_after_size(lfs_t *lfs, lfs_file_t *file, lfs_soff_t res)\n{\n    probe_logf(\"[probe] lfs_file_size: after lfs_file_size_: lfs=%p file=%p res=%\" PRIuMAX \" cfg=%p\",\n               (void*)lfs, (void*)file, (uintmax_t)res, (void*)(lfs ? lfs->cfg : NULL));\n}\n\nstatic void probe_log_unlock_state(lfs_t *lfs, const char *stage)\n{\n    probe_logf(\"[probe] lfs_file_size: %s LFS_UNLOCK: lfs=%p cfg=%p\",\n               stage, (void*)lfs, (void*)(lfs ? lfs->cfg : NULL));\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log_lock_result(lfs, file, err);\n    if (err) {\n        /* Log the early return and preserve original behavior */\n        probe_logf(\"[probe] lfs_file_size: returning early due to lock error: err=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    probe_log_before_size(lfs, file);\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n    probe_log_after_size(lfs, file, res);\n\n    /* Capture state before and after the unlock to demonstrate that\n       LFS_UNLOCK(lfs->cfg) is a no-op in the current configuration. */\n    probe_log_unlock_state(lfs, \"before\");\n    LFS_UNLOCK(lfs->cfg);\n    probe_log_unlock_state(lfs, \"after\");\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    return res;\n}\n"
}