{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0). Therefore err is always initialized to 0 and the condition if (err) is never true, making the branch return err; unreachable in the provided project configuration. This constitutes unreachable code under MISRA C 2023 Rule 2.1. (If LFS_LOCK were redefined in another build to return a nonzero error, the branch could become reachable, but in the given codebase it is unreachable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a log entry describing stage, pointers and state. */\nstatic void lfs_probe_log(const char *stage, const void *lfs_ptr,\n    const void *file_ptr, int err, long long res)\n{\n    FILE *fp = fopen(\"/tmp/logs/611.txt\", \"a\");\n    if (fp != NULL) {\n        /* Log timestamp, stage, pointers and numeric state. */\n        fprintf(fp, \"%s: lfs=%p file=%p err=%d res=%lld\\n\",\n            stage, lfs_ptr, file_ptr, err, res);\n        (void)fflush(fp);\n        (void)fclose(fp);\n    }\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original logic: evaluate lock once and record its result. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after lock acquisition to capture err and pointers. */\n    lfs_probe_log(\"after_LFS_LOCK\", (const void *)lfs, (const void *)file,\n        err, (long long)-1);\n\n    if (err) {\n        /* Log that the error branch is taken and return value. */\n        lfs_probe_log(\"return_on_err\", (const void *)lfs,\n            (const void *)file, err, (long long)-1);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Call the original underlying implementation. */\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Log the result before unlocking so logs reflect the full control flow. */\n    lfs_probe_log(\"before_unlock\", (const void *)lfs, (const void *)file,\n        0, (long long)res);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe after unlock to record that function is about to return. */\n    lfs_probe_log(\"return_success\", (const void *)lfs, (const void *)file,\n        0, (long long)res);\n\n    return res;\n}\n"
}