{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(name, \".\", 1) to test for the single-character name \".\". This invokes memcmp to compare against a string literal (a null-terminated string), which falls under the prohibition in MISRA C 2023 Rule 21.14 (the Standard Library function memcmp shall not be used to compare null terminated strings).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_orphaningcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/338.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_orphaningcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_orphaningcommit:\n```c\nstatic int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const struct lfs_mattr *attrs, int attrcount) {\n    // check for any inline files that aren't RAM backed and\n    // forcefully evict them, needed for filesystem consistency\n    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {\n        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&\n                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&\n                f->ctz.size > lfs->cfg->cache_size) {\n            int err = lfs_file_outline(lfs, f);\n            if (err) {\n                return err;\n            }\n\n            err = lfs_file_flush(lfs, f);\n            if (err) {\n                return err;\n            }\n        }\n    }\n\n    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};\n    lfs_mdir_t ldir = *dir;\n    lfs_mdir_t pdir;\n    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,\n            attrs, attrcount, &pdir);\n    if (state < 0) {\n        return state;\n    }\n\n    // update if we're not in mlist, note we may have already been\n    // updated if we are in mlist\n    if (lfs_pair_cmp(dir->pair, lpair) == 0) {\n        *dir = ldir;\n    }\n\n    // commit was successful, but may require other changes in the\n    // filesystem, these would normally be tail recursive, but we have\n    // flattened them here avoid unbounded stack usage\n\n    // need to drop?\n    if (state == LFS_OK_DROPPED) {\n        // steal state\n        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);\n        if (err) {\n            return err;\n        }\n\n        // steal tail, note that this can't create a recursive drop\n        lpair[0] = pdir.pair[0];\n        lpair[1] = pdir.pair[1];\n        lfs_pair_tole32(dir->tail);\n        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(\n                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),\n                        dir->tail}),\n                NULL);\n        lfs_pair_fromle32(dir->tail);\n        if (state < 0) {\n            return state;\n        }\n\n        ldir = pdir;\n    }\n\n    // need to relocate?\n    bool orphans = false;\n    while (state == LFS_OK_RELOCATED) {\n        LFS_DEBUG(\"Relocating {0x%\"PRIx32\", 0x%\"PRIx32\"} \"\n                    \"-> {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);\n        state = 0;\n\n        // update internal root\n        if (lfs_pair_cmp(lpair, lfs->root) == 0) {\n            lfs->root[0] = ldir.pair[0];\n            lfs->root[1] = ldir.pair[1];\n        }\n\n        // update internally tracked dirs\n        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {\n                d->m.pair[0] = ldir.pair[0];\n                d->m.pair[1] = ldir.pair[1];\n            }\n\n            if (d->type == LFS_TYPE_DIR &&\n                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {\n                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];\n                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];\n            }\n        }\n\n        // find parent\n        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);\n        if (tag < 0 && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n\n        bool hasparent = (tag != LFS_ERR_NOENT);\n        if (tag != LFS_ERR_NOENT) {\n            // note that if we have a parent, we must have a pred, so this will\n            // always create an orphan\n            int err = lfs_fs_preporphans(lfs, +1);\n            if (err) {\n                return err;\n            }\n\n            // fix pending move in this pair? this looks like an optimization but\n            // is in fact _required_ since relocating may outdate the move.\n            uint16_t moveid = 0x3ff;\n            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                moveid = lfs_tag_id(lfs->gstate.tag);\n                LFS_DEBUG(\"Fixing move while relocating \"\n                        \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                        pdir.pair[0], pdir.pair[1], moveid);\n                lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                if (moveid < lfs_tag_id(tag)) {\n                    tag -= LFS_MKTAG(0, 1, 0);\n                }\n            }\n\n            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};\n            lfs_pair_tole32(ldir.pair);\n            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(\n                        {LFS_MKTAG_IF(moveid != 0x3ff,\n                            LFS_TYPE_DELETE, moveid, 0), NULL},\n                        {tag, ldir.pair}),\n                    NULL);\n            lfs_pair_fromle32(ldir.pair);\n            if (state < 0) {\n                return state;\n            }\n\n            if (state == LFS_OK_RELOCATED) {\n                lpair[0] = ppair[0];\n                lpair[1] = ppair[1];\n                ldir = pdir;\n                orphans = true;\n                continue;\n            }\n        }\n\n        // find pred\n        int err = lfs_fs_pred(lfs, lpair, &pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));\n\n        // if we can't find dir, it must be new\n        if (err != LFS_ERR_NOENT) {\n            if (lfs_gstate_hasorphans(&lfs->gstate)) {\n                // next step, clean up orphans\n                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);\n                if (err) {\n                    return err;\n                }\n            }\n\n            // fix pending move in this pair? this looks like an optimization\n            // but is in fact _required_ since relocating may outdate the move.\n            uint16_t moveid = 0x3ff;\n            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                moveid = lfs_tag_id(lfs->gstate.tag);\n                LFS_DEBUG(\"Fixing move while relocating \"\n                        \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                        pdir.pair[0], pdir.pair[1], moveid);\n                lfs_fs_prepmove(lfs, 0x3ff, NULL);\n            }\n\n            // replace bad pair, either we clean up desync, or no desync occured\n            lpair[0] = pdir.pair[0];\n            lpair[1] = pdir.pair[1];\n            lfs_pair_tole32(ldir.pair);\n            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(\n                        {LFS_MKTAG_IF(moveid != 0x3ff,\n                            LFS_TYPE_DELETE, moveid, 0), NULL},\n                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),\n                            ldir.pair}),\n                    NULL);\n            lfs_pair_fromle32(ldir.pair);\n            if (state < 0) {\n                return state;\n            }\n\n            ldir = pdir;\n        }\n    }\n\n    return orphans ? LFS_OK_ORPHANED : 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_orphaningcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void lfs_probe_log(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/338.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const struct lfs_mattr *attrs, int attrcount) {\n    lfs_probe_log(\"ENTER lfs_dir_orphaningcommit: dir=%p pair={0x%lx,0x%lx} attrs=%p attrcount=%d\",\n            (void*)dir, (unsigned long)dir->pair[0], (unsigned long)dir->pair[1],\n            (const void*)attrs, attrcount);\n\n    // check for any inline files that aren't RAM backed and\n    // forcefully evict them, needed for filesystem consistency\n    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {\n        lfs_probe_log(\"loop mlist: f=%p f->m.pair={0x%lx,0x%lx} dir->pair={0x%lx,0x%lx} f->type=%d f->flags=0x%02x f->ctz.size=%lu cache_size=%lu\",\n                (void*)f, (unsigned long)f->m.pair[0], (unsigned long)f->m.pair[1],\n                (unsigned long)dir->pair[0], (unsigned long)dir->pair[1],\n                (int)f->type, (unsigned int)f->flags,\n                (unsigned long)f->ctz.size, (unsigned long)lfs->cfg->cache_size);\n\n        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&\n                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&\n                f->ctz.size > lfs->cfg->cache_size) {\n            lfs_probe_log(\"evict inline file: f=%p\", (void*)f);\n            int err = lfs_file_outline(lfs, f);\n            lfs_probe_log(\"lfs_file_outline returned %d for f=%p\", err, (void*)f);\n            if (err) {\n                lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with err=%d (outline)\", err);\n                return err;\n            }\n\n            err = lfs_file_flush(lfs, f);\n            lfs_probe_log(\"lfs_file_flush returned %d for f=%p\", err, (void*)f);\n            if (err) {\n                lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with err=%d (flush)\", err);\n                return err;\n            }\n        }\n    }\n\n    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};\n    lfs_mdir_t ldir = *dir;\n    lfs_mdir_t pdir;\n    lfs_probe_log(\"calling lfs_dir_relocatingcommit initial: lpair={0x%lx,0x%lx}\",\n            (unsigned long)lpair[0], (unsigned long)lpair[1]);\n    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,\n            attrs, attrcount, &pdir);\n    lfs_probe_log(\"returned from lfs_dir_relocatingcommit initial: state=%d ldir.pair={0x%lx,0x%lx}\",\n            state, (unsigned long)ldir.pair[0], (unsigned long)ldir.pair[1]);\n    if (state < 0) {\n        lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with state=%d (initial relocatingcommit)\", state);\n        return state;\n    }\n\n    // update if we're not in mlist, note we may have already been\n    // updated if we are in mlist\n    if (lfs_pair_cmp(dir->pair, lpair) == 0) {\n        *dir = ldir;\n        lfs_probe_log(\"updated dir from ldir: dir=%p newpair={0x%lx,0x%lx}\",\n                (void*)dir, (unsigned long)dir->pair[0], (unsigned long)dir->pair[1]);\n    } else {\n        lfs_probe_log(\"did not update dir (dir->pair != lpair)\");\n    }\n\n    // commit was successful, but may require other changes in the\n    // filesystem, these would normally be tail recursive, but we have\n    // flattened them here avoid unbounded stack usage\n\n    // need to drop?\n    if (state == LFS_OK_DROPPED) {\n        lfs_probe_log(\"state == LFS_OK_DROPPED: stealing state and tail\");\n        // steal state\n        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);\n        lfs_probe_log(\"lfs_dir_getgstate returned %d\", err);\n        if (err) {\n            lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with err=%d (getgstate)\", err);\n            return err;\n        }\n\n        // steal tail, note that this can't create a recursive drop\n        lpair[0] = pdir.pair[0];\n        lpair[1] = pdir.pair[1];\n        lfs_pair_tole32(dir->tail);\n        lfs_probe_log(\"calling lfs_dir_relocatingcommit for tail: lpair={0x%lx,0x%lx} pdir=%p\", (unsigned long)lpair[0], (unsigned long)lpair[1], (void*)&pdir);\n        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(\n                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),\n                        dir->tail}),\n                NULL);\n        lfs_pair_fromle32(dir->tail);\n        lfs_probe_log(\"returned from lfs_dir_relocatingcommit for tail: state=%d pdir.pair={0x%lx,0x%lx}\",\n                state, (unsigned long)pdir.pair[0], (unsigned long)pdir.pair[1]);\n        if (state < 0) {\n            lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with state=%d (tail relocatingcommit)\", state);\n            return state;\n        }\n\n        ldir = pdir;\n    }\n\n    // need to relocate?\n    bool orphans = false;\n    while (state == LFS_OK_RELOCATED) {\n        lfs_probe_log(\"while loop: state == LFS_OK_RELOCATED lpair={0x%lx,0x%lx} ldir.pair={0x%lx,0x%lx}\",\n                (unsigned long)lpair[0], (unsigned long)lpair[1],\n                (unsigned long)ldir.pair[0], (unsigned long)ldir.pair[1]);\n        LFS_DEBUG(\"Relocating {0x%\"PRIx32\", 0x%\"PRIx32\"} \"\n                    \"-> {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);\n        state = 0;\n\n        // update internal root\n        if (lfs_pair_cmp(lpair, lfs->root) == 0) {\n            lfs_probe_log(\"updating lfs->root from {0x%lx,0x%lx} to {0x%lx,0x%lx}\",\n                    (unsigned long)lfs->root[0], (unsigned long)lfs->root[1],\n                    (unsigned long)ldir.pair[0], (unsigned long)ldir.pair[1]);\n            lfs->root[0] = ldir.pair[0];\n            lfs->root[1] = ldir.pair[1];\n        }\n\n        // update internally tracked dirs\n        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {\n                lfs_probe_log(\"updating mlist entry d=%p pair {0x%lx,0x%lx} -> {0x%lx,0x%lx}\",\n                        (void*)d, (unsigned long)d->m.pair[0], (unsigned long)d->m.pair[1],\n                        (unsigned long)ldir.pair[0], (unsigned long)ldir.pair[1]);\n                d->m.pair[0] = ldir.pair[0];\n                d->m.pair[1] = ldir.pair[1];\n            }\n\n            if (d->type == LFS_TYPE_DIR &&\n                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {\n                lfs_probe_log(\"updating mlist dir head for d=%p head {0x%lx,0x%lx} -> {0x%lx,0x%lx}\",\n                        (void*)d, (unsigned long)((lfs_dir_t*)d)->head[0], (unsigned long)((lfs_dir_t*)d)->head[1],\n                        (unsigned long)ldir.pair[0], (unsigned long)ldir.pair[1]);\n                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];\n                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];\n            }\n        }\n\n        // find parent\n        lfs_probe_log(\"calling lfs_fs_parent for lpair={0x%lx,0x%lx}\", (unsigned long)lpair[0], (unsigned long)lpair[1]);\n        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);\n        lfs_probe_log(\"returned from lfs_fs_parent: tag=%ld pdir=%p pdir.pair={0x%lx,0x%lx}\",\n                (long)tag, (void*)&pdir, (unsigned long)pdir.pair[0], (unsigned long)pdir.pair[1]);\n        if (tag < 0 && tag != LFS_ERR_NOENT) {\n            lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with tag=%ld (fs_parent)\", (long)tag);\n            return tag;\n        }\n\n        bool hasparent = (tag != LFS_ERR_NOENT);\n        lfs_probe_log(\"hasparent=%d\", (int)hasparent);\n        if (tag != LFS_ERR_NOENT) {\n            // note that if we have a parent, we must have a pred, so this will\n            // always create an orphan\n            int err = lfs_fs_preporphans(lfs, +1);\n            lfs_probe_log(\"lfs_fs_preporphans(+1) returned %d\", err);\n            if (err) {\n                lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with err=%d (preporphans +1)\", err);\n                return err;\n            }\n\n            // fix pending move in this pair? this looks like an optimization but\n            // is in fact _required_ since relocating may outdate the move.\n            uint16_t moveid = 0x3ff;\n            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                moveid = lfs_tag_id(lfs->gstate.tag);\n                lfs_probe_log(\"found move here: moveid=0x%hx pdir.pair={0x%lx,0x%lx}\", moveid, (unsigned long)pdir.pair[0], (unsigned long)pdir.pair[1]);\n                LFS_DEBUG(\"Fixing move while relocating \"\n                        \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                        pdir.pair[0], pdir.pair[1], moveid);\n                lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                if (moveid < lfs_tag_id(tag)) {\n                    tag -= LFS_MKTAG(0, 1, 0);\n                    lfs_probe_log(\"adjusted tag after moveid < tag: new tag=%ld\", (long)tag);\n                }\n            }\n\n            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};\n            lfs_pair_tole32(ldir.pair);\n            lfs_probe_log(\"calling lfs_dir_relocatingcommit for parent: ppair={0x%lx,0x%lx} tag=%ld moveid=0x%hx\", (unsigned long)ppair[0], (unsigned long)ppair[1], (long)tag, moveid);\n            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(\n                        {LFS_MKTAG_IF(moveid != 0x3ff,\n                            LFS_TYPE_DELETE, moveid, 0), NULL},\n                        {tag, ldir.pair}),\n                    NULL);\n            lfs_pair_fromle32(ldir.pair);\n            lfs_probe_log(\"returned from lfs_dir_relocatingcommit for parent: state=%d pdir.pair={0x%lx,0x%lx}\", state, (unsigned long)pdir.pair[0], (unsigned long)pdir.pair[1]);\n            if (state < 0) {\n                lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with state=%d (parent relocatingcommit)\", state);\n                return state;\n            }\n\n            if (state == LFS_OK_RELOCATED) {\n                lpair[0] = ppair[0];\n                lpair[1] = ppair[1];\n                ldir = pdir;\n                orphans = true;\n                lfs_probe_log(\"parent relocation succeeded: new lpair={0x%lx,0x%lx} orphans=true\", (unsigned long)lpair[0], (unsigned long)lpair[1]);\n                continue;\n            }\n        }\n\n        // find pred\n        lfs_probe_log(\"calling lfs_fs_pred for lpair={0x%lx,0x%lx}\", (unsigned long)lpair[0], (unsigned long)lpair[1]);\n        int err = lfs_fs_pred(lfs, lpair, &pdir);\n        lfs_probe_log(\"returned from lfs_fs_pred: err=%d pdir.pair={0x%lx,0x%lx}\", err, (unsigned long)pdir.pair[0], (unsigned long)pdir.pair[1]);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with err=%d (fs_pred)\", err);\n            return err;\n        }\n        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));\n\n        // if we can't find dir, it must be new\n        if (err != LFS_ERR_NOENT) {\n            if (lfs_gstate_hasorphans(&lfs->gstate)) {\n                // next step, clean up orphans\n                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);\n                lfs_probe_log(\"lfs_fs_preporphans(%d) returned %d\", -(int8_t)hasparent, err);\n                if (err) {\n                    lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with err=%d (preporphans -hasparent)\", err);\n                    return err;\n                }\n            }\n\n            // fix pending move in this pair? this looks like an optimization\n            // but is in fact _required_ since relocating may outdate the move.\n            uint16_t moveid = 0x3ff;\n            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                moveid = lfs_tag_id(lfs->gstate.tag);\n                lfs_probe_log(\"found move here while replacing bad pair: moveid=0x%hx pdir.pair={0x%lx,0x%lx}\", moveid, (unsigned long)pdir.pair[0], (unsigned long)pdir.pair[1]);\n                LFS_DEBUG(\"Fixing move while relocating \"\n                        \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                        pdir.pair[0], pdir.pair[1], moveid);\n                lfs_fs_prepmove(lfs, 0x3ff, NULL);\n            }\n\n            // replace bad pair, either we clean up desync, or no desync occured\n            lpair[0] = pdir.pair[0];\n            lpair[1] = pdir.pair[1];\n            lfs_pair_tole32(ldir.pair);\n            lfs_probe_log(\"calling lfs_dir_relocatingcommit to replace bad pair: lpair={0x%lx,0x%lx} moveid=0x%hx\", (unsigned long)lpair[0], (unsigned long)lpair[1], moveid);\n            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(\n                        {LFS_MKTAG_IF(moveid != 0x3ff,\n                            LFS_TYPE_DELETE, moveid, 0), NULL},\n                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),\n                            ldir.pair}),\n                    NULL);\n            lfs_pair_fromle32(ldir.pair);\n            lfs_probe_log(\"returned from lfs_dir_relocatingcommit replacing bad pair: state=%d pdir.pair={0x%lx,0x%lx}\", state, (unsigned long)pdir.pair[0], (unsigned long)pdir.pair[1]);\n            if (state < 0) {\n                lfs_probe_log(\"EXIT lfs_dir_orphaningcommit early with state=%d (replace bad pair)\", state);\n                return state;\n            }\n\n            ldir = pdir;\n        }\n    }\n\n    int ret = orphans ? LFS_OK_ORPHANED : 0;\n    lfs_probe_log(\"EXIT lfs_dir_orphaningcommit: returning %d (orphans=%d)\", ret, (int)orphans);\n    return ret;\n}\n"
}