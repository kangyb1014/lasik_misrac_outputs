{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen the file is inline (file->flags & LFS_F_INLINE), the code sets buffer = file->cache.buffer and size = file->ctz.size. file->cache.buffer points to a buffer of length file->cache.size (either the user-supplied cfg->buffer or an allocation of lfs->cfg->cache_size). If file->ctz.size is larger than that buffer (for example a user-supplied cfg->buffer smaller than the inline file, or file->ctz.size > file->cache.size), the subsequent commit path (lfs_dir_commit / lower-level metadata writes) will pass buffer and size to memcpy/memmove-like functions and read beyond the buffer bounds. This is a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close_:\n```c\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        lfs_free(file->cache.buffer);\n    }\n\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close_ code.\n",
  "test_code": "#include <stdio.h>\n\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n    FILE *log = fopen(\"/tmp/logs/479.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"--- lfs_file_close_ enter ---\\n\");\n        fprintf(log, \"file=%p lfs=%p\\n\", (void*)file, (void*)lfs);\n        fprintf(log, \"flags=0x%08x\\n\", (unsigned)file->flags);\n        fprintf(log, \"is_inline=%d\\n\", (int)((file->flags & LFS_F_INLINE) != 0));\n        fprintf(log, \"cache.buffer=%p cache.size=%llu\\n\",\n                (void*)file->cache.buffer, (unsigned long long)file->cache.size);\n        fprintf(log, \"ctz.size=%llu\\n\", (unsigned long long)file->ctz.size);\n        fprintf(log, \"cfg.buffer=%p lfs.cfg.cache_size=%llu\\n\",\n                (void*)file->cfg->buffer,\n                (unsigned long long)lfs->cfg->cache_size);\n    }\n\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    if (log) {\n        fprintf(log, \"lfs_file_sync_ returned err=%d\\n\", err);\n    }\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n    if (log) {\n        fprintf(log, \"mlist_remove done\\n\");\n    }\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        if (log) {\n            fprintf(log, \"freeing cache.buffer=%p\\n\", (void*)file->cache.buffer);\n        }\n        lfs_free(file->cache.buffer);\n    } else {\n        if (log) {\n            fprintf(log, \"cfg->buffer provided, not freeing (cfg->buffer=%p)\\n\", (void*)file->cfg->buffer);\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"returning err=%d\\n\", err);\n        fprintf(log, \"--- lfs_file_close_ exit ---\\n\\n\");\n        fclose(log);\n    }\n\n    return err;\n}\n"
}