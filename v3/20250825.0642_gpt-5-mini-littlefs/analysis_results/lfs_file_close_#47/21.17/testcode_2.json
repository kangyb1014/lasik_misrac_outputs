{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(pcache->buffer, 0xff, lfs->cfg->cache_size) can write cache_size bytes starting at pcache->buffer. If pcache->buffer is NULL or points to an object smaller than lfs->cfg->cache_size, this will access beyond the bounds of the object (undefined behavior). Example violation: a user supplies file->cfg->buffer that is smaller than lfs->cfg->cache_size, or lfs_cache_zero is (mistakenly) invoked on a cache whose buffer was not allocated/initialized (NULL) \u2014 then memset will overflow/invalid-access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close_:\n```c\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        lfs_free(file->cache.buffer);\n    }\n\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close_ code.\n",
  "test_code": "static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    /* Probe log: entry state */\n    FILE *log = fopen(\"/tmp/logs/479.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"--- lfs_file_close_ ENTRY ---\\n\");\n        fprintf(log, \"lfs=%p, file=%p\\n\", (void*)lfs, (void*)file);\n        if (file) {\n            /* Log cache and cfg pointers (may mirror original dereference behavior) */\n            fprintf(log, \"  file->cache.buffer=%p\\n\", (void*)file->cache.buffer);\n            fprintf(log, \"  file->cfg=%p\\n\", (void*)file->cfg);\n            if (file->cfg) {\n                fprintf(log, \"  file->cfg->buffer=%p\\n\", (void*)file->cfg->buffer);\n            } else {\n                fprintf(log, \"  file->cfg is NULL\\n\");\n            }\n        }\n        if (lfs && lfs->cfg) {\n            /* Try to log cache_size if available */\n            fprintf(log, \"  lfs->cfg=%p, lfs->cfg->cache_size=%zu\\n\",\n                    (void*)lfs->cfg, (size_t)lfs->cfg->cache_size);\n        }\n        fprintf(log, \"  lfs_file_sync_ returned err=%d\\n\", err);\n        fprintf(log, \"-----------------------------\\n\");\n        fflush(log);\n        fclose(log);\n    }\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    /* Probe log: after mlist_remove */\n    log = fopen(\"/tmp/logs/479.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"After mlist_remove: file=%p\\n\", (void*)file);\n        /* Preserve original check (may dereference file->cfg as original code does) */\n        fprintf(log, \"  Condition !file->cfg->buffer is %s\\n\",\n                (!file->cfg->buffer) ? \"true\" : \"false\");\n        fflush(log);\n        fclose(log);\n    }\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        /* Log the free event and the pointer being freed */\n        FILE *log2 = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (log2) {\n            fprintf(log2, \"Freeing file->cache.buffer=%p (file=%p)\\n\",\n                    (void*)file->cache.buffer, (void*)file);\n            fflush(log2);\n            fclose(log2);\n        }\n\n        lfs_free(file->cache.buffer);\n    }\n\n    /* Probe log: exit */\n    log = fopen(\"/tmp/logs/479.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"--- lfs_file_close_ EXIT: err=%d ---\\n\\n\", err);\n        fflush(log);\n        fclose(log);\n    }\n\n    return err;\n}"
}