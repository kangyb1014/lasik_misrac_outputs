{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment itself (file->cache.buffer = lfs_malloc(lfs->cfg->cache_size)) does not call any <string.h> routine and is safe when lfs_malloc returns a buffer of at least lfs->cfg->cache_size. However the code base allows an alternative path where file->cache.buffer is set to user-supplied file->cfg->buffer and later lfs_cache_zero(pcache) does memset(pcache->buffer, 0xff, lfs->cfg->cache_size). If file->cfg->buffer was provided by the caller with a size smaller than lfs->cfg->cache_size, that memset will write past the end of the supplied object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close_:\n```c\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        lfs_free(file->cache.buffer);\n    }\n\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close_ code.\n",
  "test_code": "static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n    /* Probe helper: append a human-readable trace of control flow and key state\n       to /tmp/logs/479.txt. This preserves original logic and only adds\n       observation side-effects (logging). */\n    {\n        FILE *log = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (log) {\n            /* Log entry header and pointers/sizes that are relevant to the\n               violation scenario: whether a user-supplied buffer was used\n               (file->cfg->buffer), the cache buffer pointer, and the\n               configured cache_size. */\n            fprintf(log, \"ENTRY lfs_file_close_: file=%p, file->cache.buffer=%p, file->cfg=%p, file->cfg->buffer=%p, lfs->cfg=%p, lfs->cfg->cache_size=%zu\\n\",\n                    (void*)file,\n                    (void*)file->cache.buffer,\n                    (void*)file->cfg,\n                    (file && file->cfg) ? (void*)file->cfg->buffer : (void*)0,\n                    (void*)lfs->cfg,\n                    (size_t)lfs->cfg->cache_size);\n            fclose(log);\n        }\n    }\n\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    /* Log after removal and before potential free so callers can see the\n       control decision and the exact pointers/sizes involved. */\n    {\n        FILE *log = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"AFTER_REMOVE lfs_file_close_: will_free=%s, file->cache.buffer=%p, file->cfg->buffer=%p, cache_size=%zu\\n\",\n                    (file->cfg && file->cfg->buffer) ? \"false\" : \"true\",\n                    (void*)file->cache.buffer,\n                    (file->cfg) ? (void*)file->cfg->buffer : (void*)0,\n                    (size_t)lfs->cfg->cache_size);\n            fclose(log);\n        }\n    }\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        /* Log immediate prior to free so the stack of events is visible in the\n           log file. This does not change behaviour. */\n        FILE *log = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"FREEING cache.buffer=%p for file=%p (caller did not supply buffer)\\n\",\n                    (void*)file->cache.buffer,\n                    (void*)file);\n            fclose(log);\n        }\n\n        lfs_free(file->cache.buffer);\n\n        /* Log after free so it is clear that the free call was performed. */\n        log = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"FREED cache.buffer for file=%p\\n\", (void*)file);\n            fclose(log);\n        }\n    } else {\n        /* If the caller supplied a buffer, we explicitly log that we are\n           not freeing it here (the potential violation arises elsewhere when\n           the code assumes this buffer has at least cache_size bytes). */\n        FILE *log = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"NOT_FREEING caller-supplied buffer=%p (file=%p). Ensure caller buffer length >= %zu to avoid overflow.\\n\",\n                    (void*)file->cfg->buffer,\n                    (void*)file,\n                    (size_t)lfs->cfg->cache_size);\n            fclose(log);\n        }\n    }\n\n    /* Final status log and return. */\n    {\n        FILE *log = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"EXIT lfs_file_close_: file=%p, err=%d\\n\", (void*)file, err);\n            fclose(log);\n        }\n    }\n\n    return err;\n}\n"
}