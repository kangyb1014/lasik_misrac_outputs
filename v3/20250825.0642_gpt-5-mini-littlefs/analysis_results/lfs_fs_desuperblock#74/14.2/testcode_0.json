{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop declares and uses a single loop counter pointer 'd' (struct lfs_mlist *d = lfs->mlist), and the third clause updates the counter via 'd = d->next'. However, the loop body modifies members of the object pointed to by d (e.g. d->m.pair[...] and ((lfs_dir_t*)d)->head[...] ). Because the third clause dereferences d to read d->next, it thus uses an object (the struct pointed to by d) that is modified in the loop body. This violates MISRA C 2023 Rule 14.2 (clause 3: the third clause shall only modify the loop counter and shall not use objects that are modified in the for loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_desuperblock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/744.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_desuperblock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_desuperblock:\n```c\nstatic int lfs_fs_desuperblock(lfs_t *lfs) {\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        return 0;\n    }\n\n    LFS_DEBUG(\"Rewriting superblock {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n            lfs->root[0],\n            lfs->root[1]);\n\n    lfs_mdir_t root;\n    int err = lfs_dir_fetch(lfs, &root, lfs->root);\n    if (err) {\n        return err;\n    }\n\n    // write a new superblock\n    lfs_superblock_t superblock = {\n        .version     = lfs_fs_disk_version(lfs),\n        .block_size  = lfs->cfg->block_size,\n        .block_count = lfs->block_count,\n        .name_max    = lfs->name_max,\n        .file_max    = lfs->file_max,\n        .attr_max    = lfs->attr_max,\n    };\n\n    lfs_superblock_tole32(&superblock);\n    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock}));\n    if (err) {\n        return err;\n    }\n\n    lfs_fs_prepsuperblock(lfs, false);\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_desuperblock code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void lfs_log_state(lfs_t *lfs, const char *stage) {\n    FILE *fp = fopen(\"/tmp/logs/744.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    fprintf(fp, \"--- lfs_fs_desuperblock: %s ---\\n\", stage);\n    fprintf(fp, \"lfs pointer: %p\\n\", (void*)lfs);\n    /* root is an array; print as unsigned long to avoid format issues */\n    fprintf(fp, \"root[0]=%lu, root[1]=%lu\\n\",\n            (unsigned long)lfs->root[0], (unsigned long)lfs->root[1]);\n\n    /* Print some basic config/state that is available in lfs */\n    fprintf(fp, \"version=%lu, block_size=%lu, block_count=%lu\\n\",\n            (unsigned long)lfs_fs_disk_version(lfs),\n            (unsigned long)lfs->cfg->block_size,\n            (unsigned long)lfs->block_count);\n    fprintf(fp, \"name_max=%lu, file_max=%lu, attr_max=%lu\\n\",\n            (unsigned long)lfs->name_max,\n            (unsigned long)lfs->file_max,\n            (unsigned long)lfs->attr_max);\n\n    /* Walk the mlist and log pointer topology. Use a while loop to avoid\n       introducing any for-loop related concerns and to preserve behavior. */\n    struct lfs_mlist *d = lfs->mlist;\n    int idx = 0;\n    while (d != NULL) {\n        fprintf(fp, \"mlist[%d]: this=%p, next=%p\\n\", idx, (void*)d, (void*)d->next);\n        /* Avoid dereferencing potentially-modified internals aggressively.\n           Just log the address of member 'm' if present so callers can\n           correlate changes. */\n        /* Many builds will have d->m; print its address if available. */\n        /* Use a try-catch style of access via a temporary pointer to\n           silence compilers if the member doesn't exist in some build.\n           However, in the intended codebase, d->m exists per the report. */\n#ifdef __GNUC__\n        /* Use GCC extension to probe address safely when symbol exists. */\n        /* This block will compile only on GCC/Clang; otherwise the simple\n           pointer prints above are the primary evidence. */\n        fprintf(fp, \"  (probe) m address = %p\\n\", (void*)&d->m);\n#endif\n        d = d->next;\n        idx++;\n        if (idx > 10000) {\n            fprintf(fp, \"  (probe) mlist traversal aborted after %d entries\\n\", idx);\n            break;\n        }\n    }\n\n    fprintf(fp, \"--- end %s ---\\n\\n\", stage);\n    fclose(fp);\n}\n\nstatic int lfs_fs_desuperblock(lfs_t *lfs) {\n    lfs_log_state(lfs, \"entry\");\n\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        lfs_log_state(lfs, \"no_needs_superblock - returning\");\n        return 0;\n    }\n\n    LFS_DEBUG(\"Rewriting superblock {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n            lfs->root[0],\n            lfs->root[1]);\n\n    lfs_mdir_t root;\n    int err = lfs_dir_fetch(lfs, &root, lfs->root);\n    lfs_log_state(lfs, \"after_dir_fetch\");\n    if (err) {\n        lfs_log_state(lfs, \"dir_fetch_error\");\n        return err;\n    }\n\n    /* write a new superblock */\n    lfs_superblock_t superblock = {\n        .version     = lfs_fs_disk_version(lfs),\n        .block_size  = lfs->cfg->block_size,\n        .block_count = lfs->block_count,\n        .name_max    = lfs->name_max,\n        .file_max    = lfs->file_max,\n        .attr_max    = lfs->attr_max,\n    };\n\n    lfs_superblock_tole32(&superblock);\n    lfs_log_state(lfs, \"before_dir_commit\");\n    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock}));\n    lfs_log_state(lfs, \"after_dir_commit\");\n    if (err) {\n        lfs_log_state(lfs, \"dir_commit_error\");\n        return err;\n    }\n\n    lfs_fs_prepsuperblock(lfs, false);\n    lfs_log_state(lfs, \"before_return_success\");\n    return 0;\n}\n"
}