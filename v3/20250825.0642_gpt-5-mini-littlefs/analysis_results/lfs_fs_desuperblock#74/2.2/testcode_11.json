{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_fs_disk_version the statement '(void)lfs;' is a no-op used to silence an unused-parameter warning when LFS_MULTIVERSION is not defined. This operation has no side-effects and removing it would not change program behaviour, so it constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_desuperblock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/742.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_desuperblock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_desuperblock:\n```c\nstatic int lfs_fs_desuperblock(lfs_t *lfs) {\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        return 0;\n    }\n\n    LFS_DEBUG(\"Rewriting superblock {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n            lfs->root[0],\n            lfs->root[1]);\n\n    lfs_mdir_t root;\n    int err = lfs_dir_fetch(lfs, &root, lfs->root);\n    if (err) {\n        return err;\n    }\n\n    // write a new superblock\n    lfs_superblock_t superblock = {\n        .version     = lfs_fs_disk_version(lfs),\n        .block_size  = lfs->cfg->block_size,\n        .block_count = lfs->block_count,\n        .name_max    = lfs->name_max,\n        .file_max    = lfs->file_max,\n        .attr_max    = lfs->attr_max,\n    };\n\n    lfs_superblock_tole32(&superblock);\n    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock}));\n    if (err) {\n        return err;\n    }\n\n    lfs_fs_prepsuperblock(lfs, false);\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_desuperblock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append a log line capturing control flow and key state.\n   Kept minimal and side-effect free with respect to lfs state (only reads).\n*/\nstatic void lfs_probe_log_state(const lfs_t *lfs, const char *stage, int err, uint32_t version) {\n    FILE *f = fopen(\"/tmp/logs/742.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Defensive casts to unsigned long for portable printing of integral fields */\n    unsigned long root0 = (unsigned long)lfs->root[0];\n    unsigned long root1 = (unsigned long)lfs->root[1];\n    unsigned long block_size = (unsigned long)lfs->cfg->block_size;\n    unsigned long block_count = (unsigned long)lfs->block_count;\n    unsigned long name_max = (unsigned long)lfs->name_max;\n    unsigned long file_max = (unsigned long)lfs->file_max;\n    unsigned long attr_max = (unsigned long)lfs->attr_max;\n\n#ifdef LFS_MULTIVERSION\n    const char *multiversion = \"LFS_MULTIVERSION=defined\";\n#else\n    const char *multiversion = \"LFS_MULTIVERSION=not_defined\";\n#endif\n\n    fprintf(f, \"stage=%s err=%d lfs=%p root={0x%08lx,0x%08lx} version=%lu %s block_size=%lu block_count=%lu name_max=%lu file_max=%lu attr_max=%lu\\n\",\n            stage, err, (const void*)lfs,\n            root0, root1, (unsigned long)version, multiversion,\n            block_size, block_count, name_max, file_max, attr_max);\n\n    (void)fclose(f);\n}\n\nstatic int lfs_fs_desuperblock(lfs_t *lfs) {\n    /* Log entry into function */\n    lfs_probe_log_state(lfs, \"enter_lfs_fs_desuperblock\", 0, 0);\n\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        /* Log decision path when superblock rewrite not needed */\n        lfs_probe_log_state(lfs, \"no_superblock_needed\", 0, 0);\n        return 0;\n    }\n\n    LFS_DEBUG(\"Rewriting superblock {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n            lfs->root[0],\n            lfs->root[1]);\n\n    lfs_mdir_t root;\n    int err = lfs_dir_fetch(lfs, &root, lfs->root);\n    if (err) {\n        /* Log fetch error */\n        lfs_probe_log_state(lfs, \"dir_fetch_error\", err, 0);\n        return err;\n    }\n\n    /* Determine version and log it for evidence about lfs_fs_disk_version behavior */\n    uint32_t version = lfs_fs_disk_version(lfs);\n    lfs_probe_log_state(lfs, \"obtained_version\", 0, version);\n\n    /* write a new superblock */\n    lfs_superblock_t superblock = {\n        .version     = version,\n        .block_size  = lfs->cfg->block_size,\n        .block_count = lfs->block_count,\n        .name_max    = lfs->name_max,\n        .file_max    = lfs->file_max,\n        .attr_max    = lfs->attr_max,\n    };\n\n    lfs_superblock_tole32(&superblock);\n    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock}));\n    if (err) {\n        /* Log commit error */\n        lfs_probe_log_state(lfs, \"dir_commit_error\", err, version);\n        return err;\n    }\n\n    lfs_fs_prepsuperblock(lfs, false);\n\n    /* Log successful completion */\n    lfs_probe_log_state(lfs, \"exit_lfs_fs_desuperblock\", 0, version);\n    return 0;\n}\n"
}