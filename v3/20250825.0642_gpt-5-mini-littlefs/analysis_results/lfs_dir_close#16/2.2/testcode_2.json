{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg). In lfs_dir_close this evaluates lfs->cfg and discards the result, with no side effects. Removing the LFS_UNLOCK(lfs->cfg) call would not change program behaviour, therefore the operation is dead code (violates MISRA C 2023 Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/162.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: appends diagnostic logs to /tmp/logs/162.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log entry, lock result and cfg pointer for later comparison */\n    lfs_probe_log(\"ENTER lfs_dir_close: lfs=%p dir=%p cfg=%p lock_err=%d\",\n                  (void*)lfs, (void*)dir, (void*)(lfs ? lfs->cfg : NULL), err);\n    if (err) {\n        lfs_probe_log(\"EARLY RETURN from lfs_dir_close due to lock error=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n\n    /* Log the cfg value immediately before the LFS_UNLOCK call.  This\n       captures the value that LFS_UNLOCK will evaluate (the alleged dead\n       operation) so other agents can reproduce and observe that the\n       evaluation has no effect. */\n    lfs_probe_log(\"BEFORE LFS_UNLOCK: cfg=%p\", (void*)(lfs ? lfs->cfg : NULL));\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log the cfg value immediately after the LFS_UNLOCK call. If\n       LFS_UNLOCK is a no-op (e.g. expands to ((void)cfg)), the cfg value\n       should remain unchanged. */\n    lfs_probe_log(\"AFTER LFS_UNLOCK: cfg=%p (expected unchanged)\", (void*)(lfs ? lfs->cfg : NULL));\n\n    lfs_probe_log(\"EXIT lfs_dir_close returning err=%d\", err);\n    return err;\n}\n"
}