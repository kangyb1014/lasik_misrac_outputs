{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (err) {\n        return err;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated in the shown context. The if (err) { return err; } is reachable whenever LFS_LOCK(lfs->cfg) can return a non\u2011zero error code. A violation would occur only if the condition is provably always false (making the return statement unreachable), e.g. if LFS_LOCK is defined as a constant 0 (#define LFS_LOCK(cfg) 0) or is an inline function that is guaranteed to return 0 (so err is compile\u2011time or provably always 0). In that specific case the return statement would be unreachable and thus violate MISRA C 2023 Rule 2.1."
}