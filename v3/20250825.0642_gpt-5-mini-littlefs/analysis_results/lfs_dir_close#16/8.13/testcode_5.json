{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a non-const pointer (lfs_dir_t *dir) to lfs_dir_close_. If neither lfs_dir_close nor lfs_dir_close_ modify the object pointed to by dir (i.e. they only read it), then the pointer should be const-qualified (const lfs_dir_t *dir). In that case the current use of a non-const pointer violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/163.txt. */\nstatic void probe_log_dir_state(const char *stage, lfs_t *lfs, lfs_dir_t *dir, int err_code) {\n    FILE *f = fopen(\"/tmp/logs/163.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"==== lfs_dir_close probe: %s ===\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"lfs=%p, dir=%p, err_code=%d\\n\", (void*)lfs, (void*)dir, err_code);\n\n    if (dir != NULL) {\n        /* Log the size and a hex dump of the directory object so callers can\n           compare before/after to determine whether it was modified. This\n           preserves original logic but provides evidence whether lfs_dir_close_\n           changes the pointed-to object. */\n        size_t sz = sizeof(*dir);\n        fprintf(f, \"sizeof(lfs_dir_t)=%zu\\n\", sz);\n\n        const unsigned char *p = (const unsigned char *)dir;\n        size_t i;\n        fprintf(f, \"dir_bytes=\");\n        for (i = 0; i < sz; ++i) {\n            fprintf(f, \"%02X\", (unsigned)p[i]);\n        }\n        fprintf(f, \"\\n\");\n    } else {\n        fprintf(f, \"dir is NULL\\n\");\n    }\n\n    fprintf(f, \"==== end probe (%s) ===\\n\\n\", stage ? stage : \"(null)\");\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that lock failed and capture state so callers can reproduce. */\n        probe_log_dir_state(\"lock_failed_before_call\", lfs, dir, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Snapshot state before calling the internal close function. */\n    probe_log_dir_state(\"before_lfs_dir_close_\", lfs, dir, 0);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    /* Snapshot state after the internal close to detect any modifications. */\n    probe_log_dir_state(\"after_lfs_dir_close_\", lfs, dir, err);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}