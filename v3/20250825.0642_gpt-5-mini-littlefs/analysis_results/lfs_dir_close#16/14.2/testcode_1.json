{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the for loop \"for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next)\", the third clause \"p = &(*p)->next\" (and the second clause \"*p\") access the object pointed to by p (i.e. *p), which is assigned to inside the loop body via \"*p = (*p)->next\". This means the second clause reads an object modified by the loop body and the third clause uses an object that is modified in the loop body, violating the requirement that the second clause shall not use objects modified in the loop body and the third clause shall not use objects modified in the loop body (MISRA C 2023 Rule 14.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/164.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers to capture control flow and state for MISRA Rule 14.2 investigation.\n   These helpers append logs to /tmp/logs/164.txt. They are designed to preserve the\n   original logic of lfs_dir_close and only observe state. */\n\nstatic void lfs_probe_log_list(lfs_t *lfs, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/164.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[probe] stage=%s lfs=%p\\n\", stage, (void*)lfs);\n    if (!lfs) {\n        fclose(f);\n        return;\n    }\n\n    /* Log cfg pointer (used by lock/unlock) if present */\n    fprintf(f, \"  cfg=%p\\n\", (void*)lfs->cfg);\n\n    /* Log the mlist linked list: node and next pointer addresses.\n       Limit iteration count to avoid infinite loops. */\n    struct lfs_mlist *it = lfs->mlist;\n    int i = 0;\n    while (it != NULL && i < 64) {\n        fprintf(f, \"  mlist[%d]: node=%p next=%p\\n\", i, (void*)it, (void*)it->next);\n        it = it->next;\n        i++;\n    }\n    if (it != NULL) {\n        fprintf(f, \"  mlist: ... (truncated after %d entries)\\n\", i);\n    }\n\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Log entering and attempt to acquire lock */\n    lfs_probe_log_list(lfs, \"enter\");\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log state immediately after lock attempt */\n    lfs_probe_log_list(lfs, \"after_lock_attempt\");\n\n    if (err) {\n        /* Log lock failure and return preserving original behavior */\n        lfs_probe_log_list(lfs, \"lock_failed\");\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Log state before calling the deeper close routine. This captures\n       the linked list/mutable objects that are relevant to the reported\n       violation scenario (the mlist and its nodes). */\n    lfs_probe_log_list(lfs, \"before_lfs_dir_close_\");\n\n    err = lfs_dir_close_(lfs, dir);\n\n    /* Log state immediately after lfs_dir_close_ returns to capture any\n       modifications the inner routine made to the mlist or its nodes. */\n    lfs_probe_log_list(lfs, \"after_lfs_dir_close_\");\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log final state after unlock and before returning */\n    lfs_probe_log_list(lfs, \"after_unlock_and_return\");\n\n    return err;\n}\n"
}