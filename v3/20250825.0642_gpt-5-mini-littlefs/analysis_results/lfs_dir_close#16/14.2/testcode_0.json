{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the loop \"for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) { if (*p == mlist) { *p = (*p)->next; break; } }\" the body assignment \"*p = (*p)->next;\" modifies the object pointed to by p. This object is (a) used in the second clause as \"*p\" and (b) read in the third clause as \"(*p)->next\". Clause 2 and clause 3 of MISRA C 2023 Rule 14.2 forbid the loop condition or the iteration expression from using objects that are modified in the loop body. Therefore the for-loop is not well-formed and the code violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/164.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Forward declaration of lfs_mlist used only for logging the next pointers.\n   This matches the minimal shape used by the for-loop in the violation scenario.\n   It is intentionally minimal and does not change program logic. */\nstruct lfs_mlist { struct lfs_mlist *next; };\n\nstatic void log_probef(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/164.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Probe: log entry state including mlist pointer and address of the mlist\n       member. This captures the pointers that are involved in the reported\n       for-loop violation scenario (p = &lfs->mlist; *p; p = &(*p)->next). */\n    log_probef(\"[PROBE] ENTER lfs_dir_close: lfs=%p dir=%p mlist=%p &mlist=%p\\n\",\n               (void*)lfs, (void*)dir,\n               (void*)lfs->mlist, (void*)&lfs->mlist);\n\n    /* Also walk the mlist chain and log each node's address and its next\n       pointer. Limit to a reasonable number of iterations to avoid infinite\n       loops in malformed lists. */\n    {\n        struct lfs_mlist *it = (struct lfs_mlist*)lfs->mlist;\n        int idx = 0;\n        while (it != NULL && idx < 128) {\n            log_probef(\"[PROBE] mlist[%d] = %p next = %p\\n\",\n                       idx, (void*)it, (void*)it->next);\n            it = it->next;\n            idx++;\n        }\n        if (idx >= 128) {\n            log_probef(\"[PROBE] mlist traversal truncated after %d entries\\n\", idx);\n        }\n    }\n\n    err = lfs_dir_close_(lfs, dir);\n\n    /* Probe: log exit state after calling lfs_dir_close_ to capture any\n       modifications to the mlist chain that might demonstrate the violation. */\n    log_probef(\"[PROBE] EXIT lfs_dir_close: err=%d lfs=%p dir=%p mlist=%p &mlist=%p\\n\",\n               err, (void*)lfs, (void*)dir,\n               (void*)lfs->mlist, (void*)&lfs->mlist);\n\n    {\n        struct lfs_mlist *it = (struct lfs_mlist*)lfs->mlist;\n        int idx = 0;\n        while (it != NULL && idx < 128) {\n            log_probef(\"[PROBE] mlist_after[%d] = %p next = %p\\n\",\n                       idx, (void*)it, (void*)it->next);\n            it = it->next;\n            idx++;\n        }\n        if (idx >= 128) {\n            log_probef(\"[PROBE] mlist_after traversal truncated after %d entries\\n\", idx);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}