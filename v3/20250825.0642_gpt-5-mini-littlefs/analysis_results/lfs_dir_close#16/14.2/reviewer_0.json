{
  "user_message": "An agent A claimed that the following lfs_dir_close code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of lfs_dir_close.\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn the loop \"for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) { if (*p == mlist) { *p = (*p)->next; break; } }\" the body assignment \"*p = (*p)->next;\" modifies the object pointed to by p. This object is (a) used in the second clause as \"*p\" and (b) read in the third clause as \"(*p)->next\". Clause 2 and clause 3 of MISRA C 2023 Rule 14.2 forbid the loop condition or the iteration expression from using objects that are modified in the loop body. Therefore the for-loop is not well-formed and the code violates Rule 14.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=0x7ffe5dd1ef50 &mlist=0x7ffe5dd1f060\n[PROBE] mlist[0] = 0x7ffe5dd1ef50 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=(nil) &mlist=0x7ffe5dd1f060\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=0x7ffe5dd1ef50 &mlist=0x7ffe5dd1f060\n[PROBE] mlist[0] = 0x7ffe5dd1ef50 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=(nil) &mlist=0x7ffe5dd1f060\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=0x7ffe5dd1ef50 &mlist=0x7ffe5dd1f060\n[PROBE] mlist[0] = 0x7ffe5dd1ef50 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=(nil) &mlist=0x7ffe5dd1f060\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=0x7ffe5dd1ef50 &mlist=0x7ffe5dd1f060\n[PROBE] mlist[0] = 0x7ffe5dd1ef50 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=(nil) &mlist=0x7ffe5dd1f060\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=0x7ffe5dd1ef50 &mlist=0x7ffe5dd1f060\n[PROBE] mlist[0] = 0x7ffe5dd1ef50 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1f028 dir=0x7ffe5dd1ef50 mlist=(nil) &mlist=0x7ffe5dd1f060\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee08 mlist=0x7ffe5dd1ee08 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee08 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee08 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee08 mlist=0x7ffe5dd1ee08 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee08 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee08 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = (nil)\n[PROBE] EXIT lfs_dir_close: err=0 lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=(nil) &mlist=0x7ffe5dd1ef50\n[PROBE] ENTER lfs_dir_close: lfs=0x7ffe5dd1ef18 dir=0x7ffe5dd1ee40 mlist=0x7ffe5dd1ee40 &mlist=0x7ffe5dd1ef50\n[PROBE] mlist[0] = 0x7ffe5dd1ee40 next = \n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_close:\nstatic int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);\n\n    return 0;\n}\n...\nstatic void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {\n    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {\n        if (*p == mlist) {\n            *p = (*p)->next;\n            break;\n        }\n    }\n}\n...\nstatic void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {\n    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {\n        if (*p == mlist) {\n            *p = (*p)->next;\n            break;\n        }\n    }\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The for-loop is not well-formed under MISRA C:2023 Rule 14.2. The loop declares the loop counter as the identifier p (a pointer-to-pointer). However the second clause uses *p (the object pointed to by the counter) and the third clause uses (*p)->next. The body assigns to *p (i.e. modifies that pointed-to object). Rule 14.2 requires that the second-clause use the loop counter (and optionally loop-control flags) and not use other objects that are modified in the loop body; likewise the third-clause may only modify the loop counter and shall not use objects modified in the body. Here *p and (*p)->next are objects distinct from the loop counter identifier p and are modified (or can be modified) by the loop body, so both the condition and the iteration expression violate the cited constraints. Therefore the reported violation of MISRA C 2023 Rule 14.2 is correct."
}