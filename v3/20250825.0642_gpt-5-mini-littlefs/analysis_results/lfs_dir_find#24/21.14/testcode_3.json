{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcmp(suffix, \".\", 1) is using memcmp to compare against the string literal \".\" (a null\u2011terminated string). This is effectively comparing a null\u2011terminated string segment and thus violates MISRA C 2023 Rule 21.14. (Similar uses later in the function, e.g. memcmp(..., \"..\", 2), are also violations.) Recommended fixes: compare characters directly (e.g. sufflen == 1 && suffix[0] == '.') or use a bounded string function appropriate to the context.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/248.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_find:\n```c\nstatic lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,\n        const char **path, uint16_t *id) {\n    // we reduce path to a single name if we can find it\n    const char *name = *path;\n\n    // default to root dir\n    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);\n    dir->tail[0] = lfs->root[0];\n    dir->tail[1] = lfs->root[1];\n\n    // empty paths are not allowed\n    if (*name == '\\0') {\n        return LFS_ERR_INVAL;\n    }\n\n    while (true) {\nnextname:\n        // skip slashes if we're a directory\n        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n            name += strspn(name, \"/\");\n        }\n        lfs_size_t namelen = strcspn(name, \"/\");\n\n        // skip '.'\n        if (namelen == 1 && memcmp(name, \".\", 1) == 0) {\n            name += namelen;\n            goto nextname;\n        }\n\n        // error on unmatched '..', trying to go above root?\n        if (namelen == 2 && memcmp(name, \"..\", 2) == 0) {\n            return LFS_ERR_INVAL;\n        }\n\n        // skip if matched by '..' in name\n        const char *suffix = name + namelen;\n        lfs_size_t sufflen;\n        int depth = 1;\n        while (true) {\n            suffix += strspn(suffix, \"/\");\n            sufflen = strcspn(suffix, \"/\");\n            if (sufflen == 0) {\n                break;\n            }\n\n            if (sufflen == 1 && memcmp(suffix, \".\", 1) == 0) {\n                // noop\n            } else if (sufflen == 2 && memcmp(suffix, \"..\", 2) == 0) {\n                depth -= 1;\n                if (depth == 0) {\n                    name = suffix + sufflen;\n                    goto nextname;\n                }\n            } else {\n                depth += 1;\n            }\n\n            suffix += sufflen;\n        }\n\n        // found path\n        if (*name == '\\0') {\n            return tag;\n        }\n\n        // update what we've found so far\n        *path = name;\n\n        // only continue if we're a directory\n        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n            return LFS_ERR_NOTDIR;\n        }\n\n        // grab the entry data\n        if (lfs_tag_id(tag) != 0x3ff) {\n            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);\n            if (res < 0) {\n                return res;\n            }\n            lfs_pair_fromle32(dir->tail);\n        }\n\n        // find entry matching name\n        while (true) {\n            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,\n                    LFS_MKTAG(0x780, 0, 0),\n                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),\n                    id,\n                    lfs_dir_find_match, &(struct lfs_dir_find_match){\n                        lfs, name, namelen});\n            if (tag < 0) {\n                return tag;\n            }\n\n            if (tag) {\n                break;\n            }\n\n            if (!dir->split) {\n                return LFS_ERR_NOENT;\n            }\n        }\n\n        // to next name\n        name += namelen;\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_find code.\n",
  "test_code": "static void lfs_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/248.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,\n        const char **path, uint16_t *id) {\n    // we reduce path to a single name if we can find it\n    const char *name = *path;\n\n    lfs_log(\"ENTER lfs_dir_find: path=\" );\n    lfs_log(\"  initial name ptr=%p, first_char='%c' (0x%02x)\",\n            (const void*)name,\n            (*name ? *name : ' '), (unsigned int)(*name));\n\n    // default to root dir\n    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);\n    dir->tail[0] = lfs->root[0];\n    dir->tail[1] = lfs->root[1];\n\n    lfs_log(\"  initial tag=0x%08llx, root[0]=0x%08llx, root[1]=0x%08llx\",\n            (unsigned long long)tag,\n            (unsigned long long)dir->tail[0],\n            (unsigned long long)dir->tail[1]);\n\n    // empty paths are not allowed\n    if (*name == '\\0') {\n        lfs_log(\"EXIT lfs_dir_find: empty path -> LFS_ERR_INVAL\");\n        return LFS_ERR_INVAL;\n    }\n\n    while (true) {\nnextname:\n        // skip slashes if we're a directory\n        if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n            name += strspn(name, \"/\");\n        }\n        lfs_size_t namelen = strcspn(name, \"/\");\n\n        lfs_log(\"loop: name_ptr=%p namelen=%llu current=\" , (const void*)name, (unsigned long long)namelen);\n        lfs_log(\"  name[0..namelen]='%.*s'\", (int)namelen, name);\n\n        // skip '.'\n        lfs_log(\"  check single '.' -> namelen=%llu\", (unsigned long long)namelen);\n        if (namelen == 1 && memcmp(name, \".\", 1) == 0) {\n            lfs_log(\"    matched '.' at %p\", (const void*)name);\n            name += namelen;\n            goto nextname;\n        } else {\n            if (namelen == 1) {\n                lfs_log(\"    single char not '.' -> '%c'\", name[0]);\n            }\n        }\n\n        // error on unmatched '..', trying to go above root?\n        lfs_log(\"  check double '..' -> namelen=%llu\", (unsigned long long)namelen);\n        if (namelen == 2 && memcmp(name, \"..\", 2) == 0) {\n            lfs_log(\"EXIT lfs_dir_find: unmatched '..' at %p -> LFS_ERR_INVAL\", (const void*)name);\n            return LFS_ERR_INVAL;\n        }\n\n        // skip if matched by '..' in name\n        const char *suffix = name + namelen;\n        lfs_size_t sufflen;\n        int depth = 1;\n        while (true) {\n            suffix += strspn(suffix, \"/\");\n            sufflen = strcspn(suffix, \"/\");\n            if (sufflen == 0) {\n                break;\n            }\n\n            lfs_log(\"  suffix loop: suffix_ptr=%p sufflen=%llu depth=%d suffix[0..sufflen]='%.*s'\",\n                    (const void*)suffix, (unsigned long long)sufflen, depth,\n                    (int)sufflen, suffix);\n\n            if (sufflen == 1 && memcmp(suffix, \".\", 1) == 0) {\n                lfs_log(\"    suffix matched '.' at %p (noop)\", (const void*)suffix);\n                // noop\n            } else if (sufflen == 2 && memcmp(suffix, \"..\", 2) == 0) {\n                depth -= 1;\n                lfs_log(\"    suffix matched '..' at %p, decrement depth -> %d\", (const void*)suffix, depth);\n                if (depth == 0) {\n                    name = suffix + sufflen;\n                    lfs_log(\"    depth reached 0, skipping to next name at %p\", (const void*)name);\n                    goto nextname;\n                }\n            } else {\n                depth += 1;\n                lfs_log(\"    suffix is normal name, increment depth -> %d\", depth);\n            }\n\n            suffix += sufflen;\n        }\n\n        // found path\n        if (*name == '\\0') {\n            lfs_log(\"EXIT lfs_dir_find: found path -> tag=0x%08llx\", (unsigned long long)tag);\n            return tag;\n        }\n\n        // update what we've found so far\n        *path = name;\n        lfs_log(\"  updating path pointer to %p, name='%.*s'\", (const void*)name, (int)namelen, name);\n\n        // only continue if we're a directory\n        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n            lfs_log(\"EXIT lfs_dir_find: not a directory -> LFS_ERR_NOTDIR tag=0x%08llx\", (unsigned long long)tag);\n            return LFS_ERR_NOTDIR;\n        }\n\n        // grab the entry data\n        if (lfs_tag_id(tag) != 0x3ff) {\n            lfs_log(\"  calling lfs_dir_get with tag id=0x%llx\", (unsigned long long)lfs_tag_id(tag));\n            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);\n            if (res < 0) {\n                lfs_log(\"EXIT lfs_dir_find: lfs_dir_get failed -> res=%lld\", (long long)res);\n                return res;\n            }\n            lfs_pair_fromle32(dir->tail);\n            lfs_log(\"  lfs_dir_get success, dir->tail[0]=0x%08llx dir->tail[1]=0x%08llx\",\n                    (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1]);\n        }\n\n        // find entry matching name\n        while (true) {\n            lfs_log(\"  calling lfs_dir_fetchmatch name='%.*s' namelen=%llu\", (int)namelen, name, (unsigned long long)namelen);\n            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,\n                    LFS_MKTAG(0x780, 0, 0),\n                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),\n                    id,\n                    lfs_dir_find_match, &(struct lfs_dir_find_match){\n                        lfs, name, namelen});\n            lfs_log(\"  returned from lfs_dir_fetchmatch -> tag=0x%08llx id=0x%04x\", (unsigned long long)tag, (unsigned int)*id);\n            if (tag < 0) {\n                lfs_log(\"EXIT lfs_dir_find: lfs_dir_fetchmatch error -> tag=%lld\", (long long)tag);\n                return tag;\n            }\n\n            if (tag) {\n                lfs_log(\"  match found -> tag=0x%08llx\", (unsigned long long)tag);\n                break;\n            }\n\n            if (!dir->split) {\n                lfs_log(\"EXIT lfs_dir_find: no entry and not split -> LFS_ERR_NOENT\");\n                return LFS_ERR_NOENT;\n            }\n        }\n\n        // to next name\n        lfs_log(\"  advancing name by namelen=%llu from %p to %p\", (unsigned long long)namelen, (const void*)name, (const void*)(name + namelen));\n        name += namelen;\n    }\n}\n"
}