{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the non-pointer parameter 'block_count' is passed by address (&block_count) to lfs_fs_traverse_ (and thus to its callback lfs_shrink_checkblock). That allows the callee to modify the parameter object via the void* data pointer (e.g. by casting data to lfs_size_t* and writing to it), which violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/807.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow_:\n```c\nstatic int lfs_fs_grow_(lfs_t *lfs, lfs_size_t block_count) {\n    int err;\n\n    if (block_count == lfs->block_count) {\n        return 0;\n    }\n\n    \n#ifndef LFS_SHRINKNONRELOCATING\n    // shrinking is not supported\n    LFS_ASSERT(block_count >= lfs->block_count);\n#endif\n#ifdef LFS_SHRINKNONRELOCATING\n    if (block_count < lfs->block_count) {\n        err = lfs_fs_traverse_(lfs, lfs_shrink_checkblock, &block_count, true);\n        if (err) {\n            return err;\n        }\n    }\n#endif\n\n    lfs->block_count = block_count;\n\n    // fetch the root\n    lfs_mdir_t root;\n    err = lfs_dir_fetch(lfs, &root, lfs->root);\n    if (err) {\n        return err;\n    }\n\n    // update the superblock\n    lfs_superblock_t superblock;\n    lfs_stag_t tag = lfs_dir_get(lfs, &root, LFS_MKTAG(0x7ff, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n            &superblock);\n    if (tag < 0) {\n        return tag;\n    }\n    lfs_superblock_fromle32(&superblock);\n\n    superblock.block_count = lfs->block_count;\n\n    lfs_superblock_tole32(&superblock);\n    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n            {tag, &superblock}));\n    if (err) {\n        return err;\n    }\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logger: appends diagnostic messages to /tmp/logs/807.txt\n   Keep this small and non-intrusive so original logic is preserved. */\nstatic void lfs_probe_log_blockcount(const char *stage, const lfs_t *lfs, const lfs_size_t *block_count_ptr) {\n    FILE *f = fopen(\"/tmp/logs/807.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Print pointer addresses and numeric values. Cast sizes to unsigned long long\n       for portable printing without pulling in knowledge of lfs_size_t width. */\n    (void)fprintf(f, \"[lfs_fs_grow_] %s: lfs=%p, block_count_ptr=%p, block_count=%llu, lfs->block_count=%llu\\n\",\n            (const void *)stage,\n            (const void *)lfs,\n            (const void *)block_count_ptr,\n            (unsigned long long)(block_count_ptr ? (unsigned long long)(*block_count_ptr) : 0ULL),\n            (unsigned long long)(lfs ? (unsigned long long)lfs->block_count : 0ULL));\n    fclose(f);\n}\n\nstatic int lfs_fs_grow_(lfs_t *lfs, lfs_size_t block_count) {\n    int err;\n\n    /* Log entry and initial state */\n    lfs_probe_log_blockcount(\"entry\", lfs, &block_count);\n\n    if (block_count == lfs->block_count) {\n        /* Log and return early if no change */\n        lfs_probe_log_blockcount(\"no_change_return\", lfs, &block_count);\n        return 0;\n    }\n\n    \n#ifndef LFS_SHRINKNONRELOCATING\n    // shrinking is not supported\n    LFS_ASSERT(block_count >= lfs->block_count);\n#endif\n#ifdef LFS_SHRINKNONRELOCATING\n    if (block_count < lfs->block_count) {\n        /* Log state just before calling traverse which receives &block_count. */\n        lfs_probe_log_blockcount(\"before_traverse\", lfs, &block_count);\n\n        err = lfs_fs_traverse_(lfs, lfs_shrink_checkblock, &block_count, true);\n\n        /* Log state immediately after traverse to capture any modification. */\n        lfs_probe_log_blockcount(\"after_traverse\", lfs, &block_count);\n\n        if (err) {\n            lfs_probe_log_blockcount(\"traverse_err_return\", lfs, &block_count);\n            return err;\n        }\n    }\n#endif\n\n    /* Assign the (possibly modified) block_count into the filesystem and log. */\n    lfs->block_count = block_count;\n    lfs_probe_log_blockcount(\"after_assign_to_lfs\", lfs, &block_count);\n\n    // fetch the root\n    lfs_mdir_t root;\n    err = lfs_dir_fetch(lfs, &root, lfs->root);\n    if (err) {\n        lfs_probe_log_blockcount(\"dir_fetch_err_return\", lfs, &block_count);\n        return err;\n    }\n\n    // update the superblock\n    lfs_superblock_t superblock;\n    lfs_stag_t tag = lfs_dir_get(lfs, &root, LFS_MKTAG(0x7ff, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n            &superblock);\n    if (tag < 0) {\n        lfs_probe_log_blockcount(\"dir_get_err_return\", lfs, &block_count);\n        return tag;\n    }\n    lfs_superblock_fromle32(&superblock);\n\n    superblock.block_count = lfs->block_count;\n\n    lfs_superblock_tole32(&superblock);\n    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n            {tag, &superblock}));\n    if (err) {\n        lfs_probe_log_blockcount(\"dir_commit_err_return\", lfs, &block_count);\n        return err;\n    }\n\n    lfs_probe_log_blockcount(\"exit_success\", lfs, &block_count);\n    return 0;\n}\n"
}