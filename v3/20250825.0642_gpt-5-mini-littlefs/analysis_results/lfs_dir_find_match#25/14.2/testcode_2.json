{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop third clause uses the variable 'diff' (i += diff), but 'diff' is modified inside the loop body. MISRA C 2023 Rule 14.2(3) requires the third clause to modify only the loop counter and not to use objects that are modified in the loop body. Using 'diff' (which is assigned within the loop) in the iteration expression violates this requirement.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_find_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/254.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_find_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_find_match:\n```c\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    // compare with disk\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n    if (res != LFS_CMP_EQ) {\n        return res;\n    }\n\n    // only equal if our size is still the same\n    if (name->size != lfs_tag_size(tag)) {\n        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n    }\n\n    // found a match!\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_find_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logger for lfs_dir_find_match. Writes execution traces to /tmp/logs/254.txt.\n   This helper preserves the original function behavior and only appends logging. */\nstatic void lfs_log_dir_find_match(const char *stage,\n        struct lfs_dir_find_match *name, lfs_t *lfs, lfs_tag_t tag,\n        const struct lfs_diskoff *disk, lfs_size_t diff, int res) {\n    FILE *f = fopen(\"/tmp/logs/254.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"lfs_dir_find_match: stage=%s\\n\", stage);\n    /* Log primary control/state variables */\n    fprintf(f, \"  name=%p name->size=%zu\\n\", (void*)name, (size_t)name->size);\n    fprintf(f, \"  tag=%lu tag_size=%zu\\n\", (unsigned long)tag, (size_t)lfs_tag_size(tag));\n    fprintf(f, \"  diff=%zu res=%d\\n\", (size_t)diff, res);\n    fprintf(f, \"  disk(ptr)=%p block=%lu off=%lu\\n\", (void*)disk,\n            (unsigned long)disk->block, (unsigned long)disk->off);\n    fprintf(f, \"  name->name(ptr)=%p\\n\", (void*)name->name);\n\n    /* Dump up to first 16 bytes of the name (hex) to help reproduce comparisons */\n    {\n        size_t i, n = diff;\n        if (n > 16) n = 16;\n        fprintf(f, \"  name bytes (hex, up to 16):\");\n        for (i = 0; i < n; i++) {\n            unsigned char c = (unsigned char)name->name[i];\n            fprintf(f, \" %02x\", c);\n        }\n        if (n == 0) fprintf(f, \" (none)\");\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    /* compare with disk */\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n\n    /* Log before comparison */\n    lfs_log_dir_find_match(\"before_cmp\", name, lfs, tag, disk, diff, -1);\n\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n\n    /* Log after comparison */\n    lfs_log_dir_find_match(\"after_cmp\", name, lfs, tag, disk, diff, res);\n\n    if (res != LFS_CMP_EQ) {\n        /* Log the early return due to comparison */\n        lfs_log_dir_find_match(\"return_cmp_ne\", name, lfs, tag, disk, diff, res);\n        return res;\n    }\n\n    /* only equal if our size is still the same */\n    if (name->size != lfs_tag_size(tag)) {\n        int cmpres = (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n        /* Log size mismatch and return value */\n        lfs_log_dir_find_match(\"return_size_mismatch\", name, lfs, tag, disk, diff, cmpres);\n        return cmpres;\n    }\n\n    /* found a match! */\n    lfs_log_dir_find_match(\"return_eq\", name, lfs, tag, disk, diff, LFS_CMP_EQ);\n    return LFS_CMP_EQ;\n}\n"
}