{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'data' is declared as void * but is only read inside the function (it is immediately assigned to struct lfs_dir_find_match *name and only inspected). It should be declared as const void *data (or const struct lfs_dir_find_match *data) to express that the pointed-to object is not modified. Declaring it as non-const when modification is not needed violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_find_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_find_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_find_match:\n```c\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    // compare with disk\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n    if (res != LFS_CMP_EQ) {\n        return res;\n    }\n\n    // only equal if our size is still the same\n    if (name->size != lfs_tag_size(tag)) {\n        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n    }\n\n    // found a match!\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_find_match code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state for lfs_dir_find_match.\n   Writes to /tmp/logs/253.txt. Uses const-qualified parameters so the\n   probe itself does not attempt to modify program state. */\nstatic void lfs_dir_find_match_log(const struct lfs_dir_find_match *name,\n    lfs_tag_t tag, const struct lfs_diskoff *disk,\n    lfs_size_t diff, int res, const char *stage)\n{\n    FILE *fp = fopen(\"/tmp/logs/253.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    /* Log key pointers and values that demonstrate the violation scenario:\n       - data pointer (name) address\n       - lfs pointer stored in name\n       - name->size and tag size\n       - computed diff\n       - disk block/off used for comparison\n       - comparison result or return reason\n    */\n    fprintf(fp, \"stage=%s data=%p name=%p lfs=%p name->size=%lu tag_size=%lu diff=%lu disk_block=%lu disk_off=%lu res=%d\\n\",\n        stage,\n        (void *)name,\n        (void *)name,\n        (void *)name->lfs,\n        (unsigned long)name->size,\n        (unsigned long)lfs_tag_size(tag),\n        (unsigned long)diff,\n        (unsigned long)disk->block,\n        (unsigned long)disk->off,\n        res);\n\n    fclose(fp);\n}\n\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    /* compare with disk */\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n\n    /* Log before performing the block-device comparison */\n    lfs_dir_find_match_log(name, tag, disk, diff, -1, \"pre_cmp\");\n\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n\n    /* Log result of the comparison */\n    lfs_dir_find_match_log(name, tag, disk, diff, res, \"post_cmp\");\n\n    if (res != LFS_CMP_EQ) {\n        /* Log the early return due to mismatch */\n        lfs_dir_find_match_log(name, tag, disk, diff, res, \"return_ne\");\n        return res;\n    }\n\n    /* only equal if our size is still the same */\n    if (name->size != lfs_tag_size(tag)) {\n        int out = (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n        /* Log the size-mismatch return reason */\n        lfs_dir_find_match_log(name, tag, disk, diff, out, \"return_size_mismatch\");\n        return out;\n    }\n\n    /* found a match! */\n    lfs_dir_find_match_log(name, tag, disk, diff, LFS_CMP_EQ, \"return_eq\");\n    return LFS_CMP_EQ;\n}\n"
}