{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'data' is assigned to a non-const pointer: 'struct lfs_dir_find_match *name = data;'. Inside the function 'name' is only read (fields accessed but not modified), so it could and should be declared as a pointer to const: 'const struct lfs_dir_find_match *name = data;'. Not qualifying the pointer as const allows accidental modification and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_find_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_find_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_find_match:\n```c\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    // compare with disk\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n    if (res != LFS_CMP_EQ) {\n        return res;\n    }\n\n    // only equal if our size is still the same\n    if (name->size != lfs_tag_size(tag)) {\n        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n    }\n\n    // found a match!\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_find_match code.\n",
  "test_code": "#include <stdio.h>\n\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    /* Probe: log entry and initial state */\n    FILE *logf = fopen(\"/tmp/logs/253.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER lfs_dir_find_match: data=%p, name=%p, lfs=%p, disk=%p, tag=%llu, name->size=%llu\\n\",\n                data, (void*)name, (void*)lfs, buffer,\n                (unsigned long long)tag,\n                (unsigned long long)name->size);\n        fflush(logf);\n    }\n\n    /* compare with disk */\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n    if (logf) {\n        fprintf(logf, \"CALC diff=%llu (min of name->size=%llu and tag_size=%llu)\\n\",\n                (unsigned long long)diff,\n                (unsigned long long)name->size,\n                (unsigned long long)lfs_tag_size(tag));\n        fflush(logf);\n    }\n\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n\n    if (logf) {\n        fprintf(logf, \"lfs_bd_cmp -> res=%d\\n\", res);\n        fflush(logf);\n    }\n\n    if (res != LFS_CMP_EQ) {\n        if (logf) {\n            fprintf(logf, \"RETURN early: compare != EQ, res=%d\\n\", res);\n            fclose(logf);\n        }\n        return res;\n    }\n\n    /* only equal if our size is still the same */\n    if (name->size != lfs_tag_size(tag)) {\n        int ret = (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n        if (logf) {\n            fprintf(logf, \"SIZE MISMATCH: name->size=%llu, tag_size=%llu, returning %d\\n\",\n                    (unsigned long long)name->size,\n                    (unsigned long long)lfs_tag_size(tag),\n                    ret);\n            fclose(logf);\n        }\n        return ret;\n    }\n\n    /* found a match! */\n    if (logf) {\n        fprintf(logf, \"MATCH FOUND: returning LFS_CMP_EQ\\n\");\n        fclose(logf);\n    }\n    return LFS_CMP_EQ;\n}\n"
}