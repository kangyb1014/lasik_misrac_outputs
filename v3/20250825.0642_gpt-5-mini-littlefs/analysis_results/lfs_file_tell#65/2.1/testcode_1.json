{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe 'return err;' statement is unreachable because 'LFS_LOCK(lfs->cfg)' is defined as '((void)cfg,0)', so 'err' is always 0 and the condition 'if (err)' is always false. Thus the return inside the if can never be executed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/651.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/651.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *fp = fopen(\"/tmp/logs/651.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and state immediately after the lock call */\n    lfs_log_probe(\"ENTER lfs_file_tell: lfs=%p file=%p cfg=%p err=%d\",\n                  (void*)lfs, (void*)file, (void*)lfs->cfg, err);\n\n    if (err) {\n        /* Log the branch that is claimed to be unreachable in the report */\n        lfs_log_probe(\"BRANCH if(err) TAKEN: returning err=%d\", err);\n        return err;\n    }\n\n    /* Log that the branch was not taken (expected when LFS_LOCK expands to ((void)cfg,0)) */\n    lfs_log_probe(\"BRANCH if(err) NOT TAKEN: err=%d (continuing)\", err);\n\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    /* Log result from the internal helper and that we will unlock */\n    lfs_log_probe(\"AFTER lfs_file_tell_: res=%\" PRId32, res);\n    LFS_TRACE(\"lfs_file_tell -> %\" PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_probe(\"EXIT lfs_file_tell: returning res=%\" PRId32, res);\n    return res;\n}\n"
}