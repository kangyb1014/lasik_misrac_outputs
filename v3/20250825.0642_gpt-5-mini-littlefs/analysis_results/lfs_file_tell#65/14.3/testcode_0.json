{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg, 0), so int err = LFS_LOCK(lfs->cfg); always sets err to 0. The subsequent controlling expression if (err) is therefore invariant (always false). This is a direct violation of MISRA C 2023 Rule 14.3 (the listed exceptions do not apply here).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/655.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "static void lfs_file_tell_log(const char *stage, lfs_t *lfs, lfs_file_t *file, int err, lfs_soff_t res) {\n    FILE *f = fopen(\"/tmp/logs/655.txt\", \"a\");\n    if (f) {\n        /* Log the stage, pointers, error value and result. Keep concise to avoid side-effects. */\n        (void)fprintf(f, \"%s: lfs=%p file=%p err=%d res=%lld\\n\",\n                      stage, (void*)lfs, (void*)file, err, (long long)res);\n        (void)fclose(f);\n    }\n}\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    /* Probe: entry */\n    lfs_file_tell_log(\"enter\", lfs, file, -1, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: after attempting lock */\n    lfs_file_tell_log(\"after_lock\", lfs, file, err, 0);\n\n    if (err) {\n        /* Probe: if branch taken due to non-zero err */\n        lfs_file_tell_log(\"if_err_branch_taken\", lfs, file, err, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    /* Probe: after computing result */\n    lfs_file_tell_log(\"after_tell\", lfs, file, 0, res);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: exit */\n    lfs_file_tell_log(\"exit\", lfs, file, 0, res);\n    return res;\n}\n"
}