{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the for loop uses 'i' as the loop counter (first clause: 'lfs_off_t i = 0') and the loop condition is 'i < size' (second clause). The iteration expression is 'i += diff' (third clause), but 'diff' is assigned inside the loop body (diff = lfs_min(size-i, sizeof(dat))); the third clause therefore uses an object that is modified in the loop body. This violates MISRA C 2023 Rule 14.2 (third clause shall not use objects that are modified in the for loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/834.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent:\n```c\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            return err;\n        }\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n        if (tag && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function to log control flow and state to /tmp/logs/834.txt\n * This function is intended to be non-intrusive and preserve original logic.\n */\nstatic void lfs_log_parent_state(const char *location, void *lfs_ptr,\n        const void *pair_ptr, const void *parent_tail_ptr,\n        const void *tortoise_ptr, int err, long long tag) {\n    FILE *f = fopen(\"/tmp/logs/834.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Attempt to print values as unsigned long long where appropriate.\n     * The exact typedefs for lfs_block_t and lfs_stag_t are unknown here,\n     * so casts to unsigned long long are used to avoid format-undefined behavior.\n     */\n    const unsigned long long *pair = (const unsigned long long *)pair_ptr;\n    const unsigned long long *parent_tail = (const unsigned long long *)parent_tail_ptr;\n    const unsigned long long *tort_pair = NULL;\n    unsigned long long tort_i = 0;\n    unsigned long long tort_period = 0;\n\n    if (tortoise_ptr) {\n        /* layout of struct lfs_tortoise_t in the compilation unit using\n         * this probe matches usage in the function below. We only access\n         * the common fields used there (.pair, .i, .period).\n         */\n        const unsigned long long *tp = (const unsigned long long *)tortoise_ptr;\n        tort_pair = tp; /* first elements expected to be the pair array */\n        /* Assume next relevant words are i and period; cast for safety */\n        /* To avoid making assumptions about exact offsets beyond the pair,\n         * we attempt to read two words after the pair. In the common\n         * definition pair is two lfs_block_t values followed by ints.\n         */\n        tort_i = (unsigned long long)tp[2];\n        tort_period = (unsigned long long)tp[3];\n    }\n\n    fprintf(f, \"%s: pair=(%llu,%llu) parent->tail=(%llu,%llu) \",\n            location,\n            pair ? pair[0] : 0ULL, pair ? pair[1] : 0ULL,\n            parent_tail ? parent_tail[0] : 0ULL, parent_tail ? parent_tail[1] : 0ULL);\n    if (tort_pair) {\n        fprintf(f, \"tortoise.pair=(%llu,%llu) tortoise.i=%llu tortoise.period=%llu \",\n                tort_pair[0], tort_pair[1], tort_i, tort_period);\n    } else {\n        fprintf(f, \"tortoise=NULL \");\n    }\n    fprintf(f, \"err=%d tag=%lld\\n\", err, tag);\n    fclose(f);\n}\n\n/* Modified lfs_fs_parent: original logic preserved, with probes inserted\n * to log the control flow and state relevant to loop behavior.\n */\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    /* use fetchmatch with callback to find pairs */\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n\n    /* Log initial state */\n    lfs_log_parent_state(\"start\", lfs, pair, parent->tail, &tortoise, err, (long long)LFS_ERR_OK);\n\n    while (!lfs_pair_isnull(parent->tail)) {\n        /* Log state at loop entry */\n        lfs_log_parent_state(\"loop_entry\", lfs, pair, parent->tail, &tortoise, err, (long long)0);\n\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n\n        /* Log after tortoise detectcycles */\n        lfs_log_parent_state(\"after_tortoise_detectcycles\", lfs, pair, parent->tail, &tortoise, err, (long long)0);\n\n        if (err < 0) {\n            /* Log before returning error */\n            lfs_log_parent_state(\"return_err\", lfs, pair, parent->tail, &tortoise, err, (long long)err);\n            return err;\n        }\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n\n        /* Log after fetchmatch with tag and current state */\n        lfs_log_parent_state(\"after_fetchmatch\", lfs, pair, parent->tail, &tortoise, err, (long long)tag);\n\n        if (tag && tag != LFS_ERR_NOENT) {\n            /* Log before returning tag */\n            lfs_log_parent_state(\"return_tag\", lfs, pair, parent->tail, &tortoise, err, (long long)tag);\n            return tag;\n        }\n    }\n\n    /* Log final no-entry return */\n    lfs_log_parent_state(\"return_noent\", lfs, pair, parent->tail, NULL, err, (long long)LFS_ERR_NOENT);\n    return LFS_ERR_NOENT;\n}\n"
}