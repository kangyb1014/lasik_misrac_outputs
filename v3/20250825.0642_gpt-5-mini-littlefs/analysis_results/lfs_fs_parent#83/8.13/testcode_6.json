{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe callback parameter 'data' is declared as void * but is only read (cast to struct lfs_fs_parent_match *find and used read\u2011only). According to MISRA C 2023 Rule 8.13 this should be a pointer to a const\u2011qualified type (e.g. const void *data, cast to const struct lfs_fs_parent_match *). Therefore the function signature violates Rule 8.13 (unless the non\u2011const prototype is mandated by an external API, in which case this is an unavoidable deviation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent:\n```c\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            return err;\n        }\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n        if (tag && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper to append logs to /tmp/logs/833.txt */\nstatic void lfs_fs_parent_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/833.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    /* log entry and input pair */\n    lfs_fs_parent_log(\"ENTER lfs_fs_parent: lfs=%p, pair[0]=%llu, pair[1]=%llu, parent=%p\",\n            (void*)lfs, (unsigned long long)pair[0], (unsigned long long)pair[1], (void*)parent);\n\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n\n    lfs_fs_parent_log(\"init tortoise: pair[0]=%llu, pair[1]=%llu, i=%d, period=%d\",\n            (unsigned long long)tortoise.pair[0], (unsigned long long)tortoise.pair[1],\n            (int)tortoise.i, (int)tortoise.period);\n\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        lfs_fs_parent_log(\"loop top: parent->tail[0]=%llu, parent->tail[1]=%llu\",\n                (unsigned long long)parent->tail[0], (unsigned long long)parent->tail[1]);\n\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        lfs_fs_parent_log(\"after tortoise_detectcycles: err=%d, tortoise.i=%d, tortoise.period=%d, tortoise.pair[0]=%llu, tortoise.pair[1]=%llu\",\n                err, (int)tortoise.i, (int)tortoise.period,\n                (unsigned long long)tortoise.pair[0], (unsigned long long)tortoise.pair[1]);\n\n        if (err < 0) {\n            lfs_fs_parent_log(\"ERROR: tortoise_detectcycles returned %d, returning early\", err);\n            return err;\n        }\n\n        /* create a local find structure so we can log its address and content before\n           passing it to lfs_dir_fetchmatch. This preserves original logic while\n           allowing us to capture the pointer/value information associated with the\n           void *data used by the callback. */\n        struct lfs_fs_parent_match find = { lfs, { pair[0], pair[1] } };\n        lfs_fs_parent_log(\"calling lfs_dir_fetchmatch: parent=%p, parent->tail=%p, find_addr=%p, find.lfs=%p, find.pair[0]=%llu, find.pair[1]=%llu\",\n                (void*)parent, (void*)parent->tail, (void*)&find, (void*)find.lfs,\n                (unsigned long long)find.pair[0], (unsigned long long)find.pair[1]);\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &find);\n\n        lfs_fs_parent_log(\"returned from lfs_dir_fetchmatch: tag=%llu\",\n                (unsigned long long)tag);\n\n        if (tag && tag != LFS_ERR_NOENT) {\n            lfs_fs_parent_log(\"FOUND: tag non-zero and not NOENT, returning tag=%llu\",\n                    (unsigned long long)tag);\n            return tag;\n        }\n    }\n\n    lfs_fs_parent_log(\"EXIT lfs_fs_parent: returning LFS_ERR_NOENT\");\n    return LFS_ERR_NOENT;\n}\n"
}