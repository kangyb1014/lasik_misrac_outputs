{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe callback data argument is passed as the address of a non-const compound literal, but the callback lfs_fs_parent_match only reads from that data. Specifically, lfs_fs_parent_match has prototype (void *data, ...) and immediately treats data as const by only reading find->lfs and find->pair. Therefore the pointer could and should point to a const-qualified type. Passing &(struct lfs_fs_parent_match){ lfs, {pair[0], pair[1]} } as a non-const pointer violates MISRA C 2023 Rule 8.13. A compliant fix is to change the callback prototype to accept const void *data (and update callers) or otherwise ensure the pointed-to type is const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent:\n```c\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            return err;\n        }\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n        if (tag && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper: append diagnostic information to /tmp/logs/833.txt */\nstatic void lfs_parent_probe_log(const char *stage, lfs_t *lfs,\n        const lfs_block_t pair0, const lfs_block_t pair1,\n        struct lfs_fs_parent_match *data_ptr,\n        lfs_mdir_t *parent,\n        struct lfs_tortoise_t *tortoise,\n        lfs_stag_t tag) {\n    FILE *f = fopen(\"/tmp/logs/833.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"STAGE: %s\\n\", stage ? stage : \"(null)\");\n    if (parent) {\n        fprintf(f, \" parent->tail = [%llu, %llu]\\n\",\n                (unsigned long long)parent->tail[0],\n                (unsigned long long)parent->tail[1]);\n    } else {\n        fprintf(f, \" parent = (null)\\n\");\n    }\n    fprintf(f, \" requested pair = [%llu, %llu]\\n\",\n            (unsigned long long)pair0, (unsigned long long)pair1);\n    fprintf(f, \" lfs ptr = %p\\n\", (void *)lfs);\n    fprintf(f, \" data ptr = %p\\n\", (void *)data_ptr);\n    if (data_ptr) {\n        /* We expect struct lfs_fs_parent_match to have members 'lfs' and 'pair' */\n        fprintf(f, \"  data->lfs = %p\\n\", (void *)data_ptr->lfs);\n        fprintf(f, \"  data->pair = [%llu, %llu]\\n\",\n                (unsigned long long)data_ptr->pair[0],\n                (unsigned long long)data_ptr->pair[1]);\n    }\n    if (tortoise) {\n        fprintf(f, \" tortoise.i = %llu period = %llu\\n\",\n                (unsigned long long)tortoise->i,\n                (unsigned long long)tortoise->period);\n        fprintf(f, \" tortoise.pair = [%llu, %llu]\\n\",\n                (unsigned long long)tortoise->pair[0],\n                (unsigned long long)tortoise->pair[1]);\n    }\n    fprintf(f, \" tag = %lld\\n\", (long long)tag);\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            /* Log detection error and return as before */\n            lfs_parent_probe_log(\"detectcycles_error\", lfs, pair[0], pair[1], NULL, parent, &tortoise, (lfs_stag_t)err);\n            return err;\n        }\n\n        /*\n         * Preserve original behavior but materialize the compound literal as\n         * a local variable so we can log its address and contents. This\n         * keeps the logic the same while providing evidence that a\n         * non-const object is being passed to the callback.\n         */\n        struct lfs_fs_parent_match temp = { lfs, {pair[0], pair[1]} };\n\n        /* Log state just before calling lfs_dir_fetchmatch */\n        lfs_parent_probe_log(\"before_fetchmatch\", lfs, pair[0], pair[1], &temp, parent, &tortoise, 0);\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &temp);\n\n        /* Log result and the same data after the call */\n        lfs_parent_probe_log(\"after_fetchmatch\", lfs, pair[0], pair[1], &temp, parent, &tortoise, tag);\n\n        if (tag && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n    }\n\n    lfs_parent_probe_log(\"end_noent\", lfs, pair[0], pair[1], NULL, parent, &tortoise, LFS_ERR_NOENT);\n    return LFS_ERR_NOENT;\n}\n"
}