{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the function modifies its parameter variables 'off' and 'size' (e.g. 'off += diff;' and 'size -= diff;') inside the loop. Rule 17.8 forbids modifying function parameters (the pointer object may be modified but not the parameter itself), so altering these value parameters violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/77.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_read:\n```c\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/77.txt */\nstatic void lfs_bd_read_probe(const char *tag, const void *lfs_ptr,\n        const void *pcache, const void *rcache,\n        unsigned long long hint, unsigned long long block,\n        long long off, unsigned long long size, unsigned long long diff,\n        const char *extra)\n{\n    FILE *f = fopen(\"/tmp/logs/77.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: lfs=%p pcache=%p rcache=%p hint=%llu block=%llu off=%lld size=%llu diff=%llu\",\n            tag, lfs_ptr, pcache, rcache, hint, block, off, size, diff);\n    if (extra) {\n        fprintf(f, \" extra=%s\", extra);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n\n    /* Log function entry state */\n    lfs_bd_read_probe(\"entry\", lfs, pcache, rcache,\n            (unsigned long long)hint, (unsigned long long)block,\n            (long long)off, (unsigned long long)size, 0, NULL);\n\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        lfs_bd_read_probe(\"corrupt_return\", lfs, pcache, rcache,\n                (unsigned long long)hint, (unsigned long long)block,\n                (long long)off, (unsigned long long)size, 0, \"out_of_bounds\");\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                /* is already in pcache? */\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n\n                lfs_bd_read_probe(\"pcache_before_memcpy\", lfs, pcache, rcache,\n                        (unsigned long long)hint, (unsigned long long)block,\n                        (long long)off, (unsigned long long)size,\n                        (unsigned long long)diff, NULL);\n\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n\n                lfs_bd_read_probe(\"pcache_after_memcpy\", lfs, pcache, rcache,\n                        (unsigned long long)hint, (unsigned long long)block,\n                        (long long)off, (unsigned long long)size,\n                        (unsigned long long)diff, NULL);\n\n                continue;\n            }\n\n            /* pcache takes priority */\n            diff = lfs_min(diff, pcache->off-off);\n\n            lfs_bd_read_probe(\"pcache_take_priority\", lfs, pcache, rcache,\n                    (unsigned long long)hint, (unsigned long long)block,\n                    (long long)off, (unsigned long long)size,\n                    (unsigned long long)diff, NULL);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                /* is already in rcache? */\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n\n                lfs_bd_read_probe(\"rcache_before_memcpy\", lfs, pcache, rcache,\n                        (unsigned long long)hint, (unsigned long long)block,\n                        (long long)off, (unsigned long long)size,\n                        (unsigned long long)diff, NULL);\n\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n\n                lfs_bd_read_probe(\"rcache_after_memcpy\", lfs, pcache, rcache,\n                        (unsigned long long)hint, (unsigned long long)block,\n                        (long long)off, (unsigned long long)size,\n                        (unsigned long long)diff, NULL);\n\n                continue;\n            }\n\n            /* rcache takes priority */\n            diff = lfs_min(diff, rcache->off-off);\n\n            lfs_bd_read_probe(\"rcache_take_priority\", lfs, pcache, rcache,\n                    (unsigned long long)hint, (unsigned long long)block,\n                    (long long)off, (unsigned long long)size,\n                    (unsigned long long)diff, NULL);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            /* bypass cache? */\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n\n            lfs_bd_read_probe(\"bypass_before_read\", lfs, pcache, rcache,\n                    (unsigned long long)hint, (unsigned long long)block,\n                    (long long)off, (unsigned long long)size,\n                    (unsigned long long)diff, NULL);\n\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                lfs_bd_read_probe(\"bypass_read_err\", lfs, pcache, rcache,\n                        (unsigned long long)hint, (unsigned long long)block,\n                        (long long)off, (unsigned long long)size,\n                        (unsigned long long)diff, \"read_failed\");\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            lfs_bd_read_probe(\"bypass_after_read\", lfs, pcache, rcache,\n                    (unsigned long long)hint, (unsigned long long)block,\n                    (long long)off, (unsigned long long)size,\n                    (unsigned long long)diff, NULL);\n\n            continue;\n        }\n\n        /* load to cache, first condition can no longer fail */\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n\n        lfs_bd_read_probe(\"load_cache_before\", lfs, pcache, rcache,\n                (unsigned long long)hint, (unsigned long long)block,\n                (long long)off, (unsigned long long)size, 0, NULL);\n\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            lfs_bd_read_probe(\"load_cache_read_err\", lfs, pcache, rcache,\n                    (unsigned long long)hint, (unsigned long long)block,\n                    (long long)off, (unsigned long long)size,\n                    (unsigned long long)rcache->size, \"read_failed\");\n            return err;\n        }\n\n        lfs_bd_read_probe(\"load_cache_after\", lfs, pcache, rcache,\n                (unsigned long long)hint, (unsigned long long)block,\n                (long long)off, (unsigned long long)size,\n                (unsigned long long)rcache->size, NULL);\n    }\n\n    lfs_bd_read_probe(\"exit_success\", lfs, pcache, rcache,\n            (unsigned long long)hint, (unsigned long long)block,\n            (long long)off, (unsigned long long)size, 0, NULL);\n\n    return 0;\n}"
}