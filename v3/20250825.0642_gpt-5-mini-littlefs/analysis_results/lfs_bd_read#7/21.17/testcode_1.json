{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. off and size are unsigned 32-bit values, so the expression off + size can overflow (wrap-around). If off is near UINT32_MAX and size is non-zero, off+size may wrap to a small value <= block_size, making the check pass even though the requested range [off, off+size) actually lies beyond the block. This can allow later memcpy calls (e.g. memcpy(data, &pcache->buffer[off-pcache->off], diff)) to access beyond the bounds of the referenced buffers. Example: lfs->cfg->block_size = 4096, off = UINT32_MAX - 10, size = 20 -> off+size wraps to 9 (<=4096) and the check is bypassed, but the true range crosses the block boundary and subsequent string/memory functions can perform out-of-bounds accesses. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/79.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_read:\n```c\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: appends human-readable trace to /tmp/logs/79.txt */\nstatic void lfs_bd_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/79.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n\n    /* Log entry state */\n    lfs_bd_log(\n        \"ENTER lfs_bd_read: lfs=%p block=%llu off=%llu size=%llu hint=%llu pcache=%p rcache=%p buffer=%p\",\n        (void*)lfs, (unsigned long long)block, (unsigned long long)off,\n        (unsigned long long)size, (unsigned long long)hint,\n        (void*)pcache, (void*)rcache, (void*)buffer);\n\n    /* Compute sum in the original types to expose any wrap-around\n       as it will occur in the code's check. Also compute extended sum\n       for comparison so logs can show whether wrapping happened. */\n    lfs_off_t raw_sum = off + size;\n    unsigned long long ext_sum = (unsigned long long)off + (unsigned long long)size;\n    lfs_bd_log(\"CHECK before bounds: off+size (raw)=%llu ext_sum=%llu block_size=%llu block_count=%llu block=%llu\",\n        (unsigned long long)raw_sum, ext_sum,\n        (unsigned long long)lfs->cfg->block_size,\n        (unsigned long long)lfs->block_count,\n        (unsigned long long)block);\n\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        lfs_bd_log(\"RETURN LFS_ERR_CORRUPT: off=%llu size=%llu block_size=%llu block=%llu block_count=%llu\",\n            (unsigned long long)off, (unsigned long long)size,\n            (unsigned long long)lfs->cfg->block_size,\n            (unsigned long long)block,\n            (unsigned long long)lfs->block_count);\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            lfs_bd_log(\"pcache HIT potential: block=%llu pcache->block=%llu off=%llu pcache->off=%llu pcache->size=%llu\",\n                (unsigned long long)block, (unsigned long long)pcache->block,\n                (unsigned long long)off, (unsigned long long)pcache->off,\n                (unsigned long long)pcache->size);\n\n            if (off >= pcache->off) {\n                /* is already in pcache? */\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                lfs_bd_log(\"pcache COPY: diff=%llu src_index=%llu dst=%p\",\n                    (unsigned long long)diff,\n                    (unsigned long long)(off-pcache->off), (void*)data);\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                lfs_bd_log(\"AFTER pcache COPY: off=%llu size=%llu data=%p\",\n                    (unsigned long long)off, (unsigned long long)size, (void*)data);\n                continue;\n            }\n\n            /* pcache takes priority */\n            diff = lfs_min(diff, pcache->off-off);\n            lfs_bd_log(\"pcache takes priority, new diff=%llu (pcache.off - off)\", (unsigned long long)diff);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            lfs_bd_log(\"rcache HIT potential: block=%llu rcache->block=%llu off=%llu rcache->off=%llu rcache->size=%llu\",\n                (unsigned long long)block, (unsigned long long)rcache->block,\n                (unsigned long long)off, (unsigned long long)rcache->off,\n                (unsigned long long)rcache->size);\n\n            if (off >= rcache->off) {\n                /* is already in rcache? */\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                lfs_bd_log(\"rcache COPY: diff=%llu src_index=%llu dst=%p\",\n                    (unsigned long long)diff,\n                    (unsigned long long)(off-rcache->off), (void*)data);\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                lfs_bd_log(\"AFTER rcache COPY: off=%llu size=%llu data=%p\",\n                    (unsigned long long)off, (unsigned long long)size, (void*)data);\n                continue;\n            }\n\n            /* rcache takes priority */\n            diff = lfs_min(diff, rcache->off-off);\n            lfs_bd_log(\"rcache takes priority, new diff=%llu (rcache.off - off)\", (unsigned long long)diff);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            /* bypass cache? */\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            lfs_bd_log(\"BYPASS read: block=%llu off=%llu diff=%llu read_size=%llu\",\n                (unsigned long long)block, (unsigned long long)off,\n                (unsigned long long)diff, (unsigned long long)lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            lfs_bd_log(\"BYPASS read returned err=%d\", err);\n            if (err) {\n                lfs_bd_log(\"RETURN err=%d from bypass read\", err);\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            lfs_bd_log(\"AFTER BYPASS read: off=%llu size=%llu data=%p\",\n                (unsigned long long)off, (unsigned long long)size, (void*)data);\n            continue;\n        }\n\n        /* load to cache, first condition can no longer fail */\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n\n        lfs_bd_log(\"LOAD to rcache: block=%llu rcache.off=%llu rcache.size=%llu read_size=%llu cache_size=%llu block_size=%llu\",\n            (unsigned long long)rcache->block, (unsigned long long)rcache->off,\n            (unsigned long long)rcache->size, (unsigned long long)lfs->cfg->read_size,\n            (unsigned long long)lfs->cfg->cache_size, (unsigned long long)lfs->cfg->block_size);\n\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        lfs_bd_log(\"rcache read returned err=%d\", err);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            lfs_bd_log(\"RETURN err=%d from rcache read\", err);\n            return err;\n        }\n    }\n\n    lfs_bd_log(\"EXIT lfs_bd_read success: block=%llu final off=%llu final size=%llu\",\n        (unsigned long long)block, (unsigned long long)off, (unsigned long long)size);\n    return 0;\n}\n"
}