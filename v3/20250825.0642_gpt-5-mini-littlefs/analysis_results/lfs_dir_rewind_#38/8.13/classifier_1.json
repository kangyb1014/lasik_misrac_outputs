{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind_:\n```c\nstatic int lfs_dir_rewind_(lfs_t *lfs, lfs_dir_t *dir) {\n    // reload the head dir\n    int err = lfs_dir_fetch(lfs, &dir->m, dir->head);\n    if (err) {\n        return err;\n    }\n\n    dir->id = 0;\n    dir->pos = 0;\n    return 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic int lfs_dir_rewind_(lfs_t *lfs, lfs_dir_t *dir) {\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the function modifies the object pointed to by 'dir' (dir->m is fetched/used and dir->id and dir->pos are assigned), so 'dir' cannot be const-qualified. The 'lfs' pointer could only be made const if all callees (e.g. lfs_dir_fetch) accept a pointer-to-const; since lfs is forwarded to lfs_dir_fetch which takes a non-const lfs_t* (or at least may modify it), changing it here may be incompatible. With only the shown fragment, there is no definite opportunity to add const, so Rule 8.13 is not violated."
}