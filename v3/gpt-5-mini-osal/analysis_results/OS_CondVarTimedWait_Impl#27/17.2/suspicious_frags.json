{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait_Impl:\n```c\nint32 OS_CondVarTimedWait_Impl(const OS_object_token_t *token, const OS_time_t *abs_wakeup_time)\n{\n    struct timespec                    limit;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);\n    limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);\n\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);\n    pthread_cleanup_pop(false);\n\n    if (status == ETIMEDOUT)\n    {\n        return OS_ERROR_TIMEOUT;\n    }\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarTimedWait_Impl:\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nstatic inline int64 OS_TimeGetTotalSeconds(OS_time_t tm)\n{\n    return (tm.ticks / OS_TIME_TICKS_PER_SECOND);\n}\n...\nstatic inline uint32 OS_TimeGetNanosecondsPart(OS_time_t tm)\n{\n    return (uint32)OS_TimeGetFractionalPart(tm) * OS_TIME_TICK_RESOLUTION_NS;\n}\n...\nstatic void OS_Posix_CondVarReleaseMutex(void *mut)\n{\n    pthread_mutex_unlock(mut);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}",
    "status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);",
    "static inline int64 OS_TimeGetTotalSeconds(OS_time_t tm)\n{\n    return (tm.ticks / OS_TIME_TICKS_PER_SECOND);\n}",
    "static void OS_Posix_CondVarReleaseMutex(void *mut)\n{\n    pthread_mutex_unlock(mut);\n}",
    "static inline uint32 OS_TimeGetNanosecondsPart(OS_time_t tm)\n{\n    return (uint32)OS_TimeGetFractionalPart(tm) * OS_TIME_TICK_RESOLUTION_NS;\n}",
    "pthread_cleanup_pop(false);",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);",
    "limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);",
    "limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);",
    "pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);"
  ],
  "explanation": "Recursion (direct or indirect) can only occur via function calls. The listed fragments are all call sites and small related function definitions present in the supplied code that could form part of a call chain leading back to OS_CondVarTimedWait_Impl; they therefore should be investigated for possible indirect recursion. Other parts of the function are simple declarations, assignments of non-function results, conditional checks, and return statements (e.g. variable declarations, the ETIMEDOUT and status checks, and the final return OS_SUCCESS). Those constructs do not perform function calls themselves and therefore cannot by themselves introduce direct or indirect recursion; they do not need to be investigated for Rule 17.2 beyond the call sites already listed."
}