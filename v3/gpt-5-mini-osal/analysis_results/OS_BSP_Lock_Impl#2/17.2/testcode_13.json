{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nUtTest_Run calls function pointers stored in UtTestDataBaseEntry->Setup/Test/Teardown. If one of those pointers references UtTest_Run itself (e.g. UtTest_Run was registered as a test), the call sequence UtTest_Run -> ... -> UtTestDataBaseEntry->Test() -> UtTest_Run would create indirect recursion, violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Lock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/26.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Lock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Lock_Impl:\n```c\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Lock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <pthread.h>\n#include <string.h>\n#include <errno.h>\n\n/*\n * Probe logging helper. Appends a simple timestamped record to /tmp/logs/26.txt\n * This helper is intentionally simple to avoid changing the control logic of\n * OS_BSP_Lock_Impl. It does not call OS_BSP_Lock_Impl or any other BSP lock\n * helper, so it will not introduce recursion.\n */\nstatic void OS_BSP_LogProbe(const char *event, int status_code)\n{\n    FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n    if (!f)\n    {\n        return; /* Best-effort logging only; do not alter control flow on failure */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) == NULL)\n    {\n        /* fallback timestamp */\n        fprintf(f, \"[UNKNOWN TIME] thread=%lu event=%s status=%d errno=%d\\n\",\n                (unsigned long)pthread_self(), event, status_code, errno);\n    }\n    else\n    {\n        char timebuf[64];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n        {\n            strcpy(timebuf, \"[timefmt-error]\");\n        }\n        fprintf(f, \"%s thread=%lu event=%s status=%d errno=%d\\n\",\n                timebuf, (unsigned long)pthread_self(), event, status_code, errno);\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    /* Log intent to acquire lock */\n    OS_BSP_LogProbe(\"pthread_mutex_lock_attempt\", 0);\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        /* Preserve original debug behavior */\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n\n        /* Log the failure for post-mortem analysis */\n        OS_BSP_LogProbe(\"pthread_mutex_lock_failed\", status);\n    }\n    else\n    {\n        /* Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n\n        /* Log successful acquisition and cancellation state change */\n        OS_BSP_LogProbe(\"pthread_mutex_lock_acquired_and_cancel_disabled\", status);\n    }\n}\n"
}