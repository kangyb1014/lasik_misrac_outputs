{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nBSP_DEBUG is defined as an empty macro, so when status < 0 the if body performs no observable action. The conditional and its empty body are executed but removing them would not change program behaviour (aside from micro-timing), so this is dead code and violates MISRA C 2023 Rule 2.2. Example: the branch compiles to no side-effects because the debug macro expands to nothing.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Lock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/22.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Lock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Lock_Impl:\n```c\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Lock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <pthread.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/22.txt\n * Keeps the original logic of OS_BSP_Lock_Impl unchanged, but records\n * control-flow and relevant state to demonstrate the reported scenario.\n */\nstatic void OS_BSP_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/22.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    /* Log the raw return status from pthread_mutex_lock so callers can\n     * reproduce the condition where the if() is executed but performs no\n     * observable action (because BSP_DEBUG is an empty macro).\n     */\n    OS_BSP_LogProbe(\"OS_BSP_Lock_Impl: pthread_mutex_lock returned status=%d\\n\", status);\n\n    if (status < 0)\n    {\n        /* Record that the error branch was taken and include an interpretation\n         * of the status value. Use a safe description rather than directly\n         * calling strerror() with a possibly-negative value.\n         */\n        const char *err_txt = NULL;\n        if (status > 0)\n        {\n            err_txt = strerror(status);\n        }\n        else\n        {\n            /* For negative values, avoid passing negative to strerror();\n             * provide a textual representation of the numeric value instead.\n             */\n            static char buf[64];\n            (void)snprintf(buf, sizeof(buf), \"errno=%d\", status);\n            err_txt = buf;\n        }\n\n        OS_BSP_LogProbe(\"OS_BSP_Lock_Impl: error branch taken: status=%d, desc=%s\\n\", status, err_txt);\n\n        /* The original code invoked BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n         * BSP_DEBUG is typically defined to nothing in production builds. We do NOT\n         * attempt to call BSP_DEBUG here (it may be undefined). The logging above\n         * captures the same information for evidence without changing the original\n         * observable behaviour other than adding log output.\n         */\n    }\n    else\n    {\n        OS_BSP_LogProbe(\"OS_BSP_Lock_Impl: success branch taken, disabling cancel state\\n\");\n\n        /* Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n"
}