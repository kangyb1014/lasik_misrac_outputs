{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nBSP_DEBUG is defined as an empty macro (#define BSP_DEBUG(__VA_ARGS__)), so the call strerror(status) appears only as an argument to BSP_DEBUG. The preprocessor removes the entire macro invocation (including its arguments), meaning strerror(status) is never compiled or executed. Since removing that call does not affect program behaviour, the call constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Lock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/22.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Lock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Lock_Impl:\n```c\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Lock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <pthread.h>\n\n/*\n * Probe function: write control-flow and state information to /tmp/logs/22.txt.\n * This function explicitly evaluates strerror(status) so that a run-time log\n * entry exists even if the BSP_DEBUG(...) invocation is removed by the preprocessor.\n */\nstatic void OS_BSP_LogProbe(const char *event, int status)\n{\n    FILE *f = fopen(\"/tmp/logs/22.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        /* Include timestamp, thread id (best-effort), event name and status */\n        (void)fprintf(f, \"[%ld] thread=%lu event=%s status=%d\",\n                      (long)t,\n                      (unsigned long)pthread_self(),\n                      event,\n                      status);\n\n        if (status != 0)\n        {\n            /* Evaluate strerror(status) here so the string conversion is executed\n             * and recorded regardless of whether BSP_DEBUG(...) expands to nothing.\n             */\n            const char *err = strerror(status);\n            (void)fprintf(f, \" strerror=\\\"%s\\\"\", err);\n        }\n\n        (void)fprintf(f, \"\\n\");\n        (void)fclose(f);\n    }\n}\n\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        /* Keep original debug call so source remains as in the project.\n         * If BSP_DEBUG is defined as an empty macro, the above call (and its\n         * embedded strerror(status)) will be removed by the preprocessor.\n         * The probe below explicitly evaluates strerror(status) and logs it\n         * to /tmp/logs/22.txt so agents can observe the evaluated value at\n         * run-time and thus reproduce the violation scenario.\n         */\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n\n        /* Probe/log the failure and ensure strerror is executed and recorded. */\n        OS_BSP_LogProbe(\"pthread_mutex_lock_failed\", status);\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n\n        /* Log successful lock acquisition and the cancellation state change. */\n        OS_BSP_LogProbe(\"pthread_mutex_lock_success_setcancel_disable\", 0);\n    }\n}\n"
}