{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a host_name buffer smaller than name_len (e.g. char buf[8]; name_len==16), OS_CHECK_SIZE(name_len) will succeed because it only verifies name_len>0 and < (UINT32_MAX/2). The implementation OS_NetworkGetHostName_Impl may then call a string function such as strncpy/memcpy/memset using name_len, causing writes/read beyond the actual bounds of host_name (buffer overflow). The size macro does not ensure name_len matches the actual object size, so out-of-bounds accesses are possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetHostName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NetworkGetHostName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetHostName:\n```c\nint32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(host_name);\n    OS_CHECK_SIZE(name_len);\n\n    /* delegate to low-level API */\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n    if (return_code != OS_SUCCESS)\n    {\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_NetworkGetHostName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/*\n * Probe logging helpers. These write diagnostic messages to /tmp/logs/2239.txt\n * Use a simple, small implementation to avoid altering program control flow.\n */\nstatic void os_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2239.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, silently continue to preserve original behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Forward declaration of the low-level implementation (exists elsewhere in the codebase) */\nint32 OS_NetworkGetHostName_Impl(char *host_name, size_t name_len);\n\nint32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    /* Log entry and parameters (do not dereference host_name here) */\n    os_logf(\"OS_NetworkGetHostName ENTER: host_name=%p, name_len=%zu\", (void *)host_name, name_len);\n\n    /* Check parameters (preserve original checks) */\n    OS_CHECK_POINTER(host_name);\n    os_logf(\"OS_CHECK_POINTER passed: host_name=%p\", (void *)host_name);\n\n    os_logf(\"OS_CHECK_SIZE about to validate name_len=%zu\", name_len);\n    OS_CHECK_SIZE(name_len);\n    os_logf(\"OS_CHECK_SIZE passed: name_len=%zu\", name_len);\n\n    /* delegate to low-level API */\n    os_logf(\"Calling OS_NetworkGetHostName_Impl(host_name=%p, name_len=%zu)\", (void *)host_name, name_len);\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n    os_logf(\"OS_NetworkGetHostName_Impl returned %d\", (int)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log intent to return an empty string on failure and the write that will occur. */\n        os_logf(\"Non-success return (%d): about to set host_name[0]=0 on buffer %p (name_len=%zu)\", (int)return_code, (void *)host_name, name_len);\n\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n\n        os_logf(\"host_name[0] set to 0 for buffer %p\", (void *)host_name);\n    }\n\n    os_logf(\"OS_NetworkGetHostName EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}