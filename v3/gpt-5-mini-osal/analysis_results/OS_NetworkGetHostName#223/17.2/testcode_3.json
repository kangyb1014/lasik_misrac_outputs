{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS is not initialized. If OS_DEBUG (or the BUGCHECK_VOID macro used at the top) uses OS_printf to output messages (a common implementation), this produces indirect (or even direct) recursion: OS_printf -> OS_DEBUG -> OS_printf (or OS_printf -> BUGCHECK_VOID -> OS_printf). That violates MISRA C 2023 Rule 17.2 (functions shall not call themselves, either directly or indirectly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetHostName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2236.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NetworkGetHostName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetHostName:\n```c\nint32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(host_name);\n    OS_CHECK_SIZE(name_len);\n\n    /* delegate to low-level API */\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n    if (return_code != OS_SUCCESS)\n    {\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_NetworkGetHostName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper: append timestamp-free, plain text entries to\n * /tmp/logs/2236.txt. This helper uses only standard C library I/O\n * (not OS_printf or other project logging) to avoid triggering the\n * recursion scenario under investigation.\n */\nstatic void OS_Network_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2236.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/*\n * Modified OS_NetworkGetHostName with probes inserted. The original\n * logic is preserved; probes only record the control flow and key\n * state to /tmp/logs/2236.txt so other agents can reproduce the\n * indirect-recursion/printing violation scenario. The code intentionally\n * avoids using project logging facilities to prevent invoking the\n * problematic code paths during logging.\n */\nint32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    OS_Network_ProbeLog(\"ENTER: OS_NetworkGetHostName(host_name=%p, name_len=%zu)\", (void *)host_name, name_len);\n\n    /* Check parameters */\n    OS_Network_ProbeLog(\"Before OS_CHECK_POINTER\");\n    OS_CHECK_POINTER(host_name);\n    OS_Network_ProbeLog(\"After OS_CHECK_POINTER: host_name=%p\", (void *)host_name);\n\n    OS_Network_ProbeLog(\"Before OS_CHECK_SIZE\");\n    OS_CHECK_SIZE(name_len);\n    OS_Network_ProbeLog(\"After OS_CHECK_SIZE: name_len=%zu\", name_len);\n\n    /* delegate to low-level API */\n    OS_Network_ProbeLog(\"Calling: OS_NetworkGetHostName_Impl(host_name=%p, name_len=%zu)\", (void *)host_name, name_len);\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n    OS_Network_ProbeLog(\"Returned from OS_NetworkGetHostName_Impl: return_code=%d\", return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* return an empty string on failure, just in case */\n        OS_Network_ProbeLog(\"Failure path: return_code=%d -> setting host_name[0]=0 (if possible)\", return_code);\n        if ((host_name != NULL) && (name_len > 0U))\n        {\n            host_name[0] = 0;\n            /* Log the first few bytes safely (may be empty string) */\n            OS_Network_ProbeLog(\"host_name[0] set to 0; host_name=%p, preview='%s'\", (void *)host_name, host_name);\n        }\n        else\n        {\n            OS_Network_ProbeLog(\"Cannot set host_name[0]=0: host_name=%p, name_len=%zu\", (void *)host_name, name_len);\n        }\n    }\n\n    OS_Network_ProbeLog(\"EXIT: OS_NetworkGetHostName -> %d\", return_code);\n    return return_code;\n}\n"
}