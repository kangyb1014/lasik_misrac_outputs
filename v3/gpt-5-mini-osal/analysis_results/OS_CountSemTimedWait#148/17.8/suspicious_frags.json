{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTimedWait:\n```c\nint32 OS_CountSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemTimedWait:\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_CountSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec                     ts;\n    int                                 result;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    if (sem_timedwait(&impl->id, &ts) == 0)\n    {\n        result = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        result = OS_SEM_TIMEOUT;\n    }\n    else\n    {\n        /* unspecified failure */\n        result = OS_SEM_FAILURE;\n    }\n\n    return result;\n}\n...\ntypedef uint32 osal_id_t\n...\ntypedef uint32_t  uint32\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I inspected the provided functions and found no places where a function parameter variable itself is assigned or otherwise modified, which is what MISRA C 2023 Rule 17.8 prohibits. Specific findings:\n\n- OS_CountSemTimedWait( osal_id_t sem_id, uint32 msecs )\n  - Neither sem_id nor msecs is assigned to or modified in the function. The local token variable is passed by address to OS_ObjectIdGetById and by pointer to OS_CountSemTimedWait_Impl, but no parameter variable is reassigned.\n\n- OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n  - The function writes into the object pointed to by token (token->obj_idx, token->obj_id). That is explicitly allowed by the rule (modifying the object referred to by a pointer parameter is permitted). The pointer parameter token itself is not reassigned (no statement like token = ...).\n\n- OS_CountSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n  - The token parameter is a pointer to const object; the code dereferences *token but does not modify token itself or the pointed-to object. The scalar parameter msecs is only read (used to compute an absolute time) and is not modified.\n\n- Calls to helper routines (OS_ObjectIdTransactionInit, OS_ObjectIdToArrayIndex, OS_ObjectIdConvertToken, OS_ObjectIdTransactionCancel, OS_Posix_CompAbsDelayTime, sem_timedwait) appear only as calls; based on the shown code none of these calls assign to any of the current function parameter variables.\n\nTherefore there are no code fragments in the supplied code that violate Rule 17.8 (no function parameter variable is modified). If additional source files or the implementations of the helper functions/macros are provided, they should be checked to ensure they do not perform assignments to their own pointer parameters (or that macros do not expand to code that reassigns caller parameters), but in the code shown there are no suspicious fragments to report."
}