{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGive_Impl:\n```c\nint32 OS_MutSemGive_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n     ** Unlock the mutex\n     */\n    status = pthread_mutex_unlock(&(impl->id));\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemGive_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n...\nOS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "status = pthread_mutex_unlock(&(impl->id));",
    "OS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]",
    "OS_impl_mutex_internal_record_t *impl;",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);",
    "typedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t"
  ],
  "explanation": "Fragments not listed do not need investigation for MISRA C 2023 Rule 8.13: the function parameter is already declared as a pointer to a const-qualified type (const OS_object_token_t *token) so it complies with the rule; local scalar variables (status, return values) are not pointers and thus irrelevant; the comment and return statements do not affect pointer constness. The selected fragments are the only places where pointer-to-object const-qualification could be relevant: the local pointer variable, the table definition and struct member (the table element type and its pthread_mutex_t member), the macro that takes the address of the token expression (which can affect const propagation), and the call that takes the address of impl->id to pass to pthread_mutex_unlock (which requires a non-const pointer). These should be inspected to verify whether const-qualification could/should be applied or whether non-const pointers are necessary due to API requirements."
}