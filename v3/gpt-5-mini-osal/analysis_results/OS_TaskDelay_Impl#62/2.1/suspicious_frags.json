{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelay_Impl:\n```c\nint32 OS_TaskDelay_Impl(uint32 millisecond)\n{\n    struct timespec sleep_end;\n    int             status;\n\n    clock_gettime(CLOCK_MONOTONIC, &sleep_end);\n    sleep_end.tv_sec += millisecond / 1000;\n    sleep_end.tv_nsec += 1000000 * (millisecond % 1000);\n\n    if (sleep_end.tv_nsec >= 1000000000)\n    {\n        sleep_end.tv_nsec -= 1000000000;\n        ++sleep_end.tv_sec;\n    }\n\n    do\n    {\n        status = clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &sleep_end, NULL);\n    } while (status == EINTR);\n\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n    else\n    {\n        return OS_SUCCESS;\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TaskDelay_Impl:\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n...\ntypedef int32_t   int32\n...\ntypedef uint32_t  uint32\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No unreachable code fragments were identified in OS_TaskDelay_Impl. Reasoning:\n- Execution starts at the function entry and proceeds sequentially; the declarations and initial clock_gettime call are always reachable.\n- The tv_nsec adjustment branch (if (sleep_end.tv_nsec >= 1000000000)) may be taken or not depending on the runtime value of millisecond, so neither the then-branch nor the fall-through is provably unreachable.\n- The do { ... } while (status == EINTR); loop body is reachable at least once (do-while guarantees one execution). The loop can iterate multiple times if clock_nanosleep returns EINTR; it can also exit after the first iteration if clock_nanosleep returns a value other than EINTR. Thus both the loop body and the loop exit are reachable.\n- The final conditional if (status != 0) can evaluate true or false depending on the runtime return value of clock_nanosleep; therefore both the return OS_ERROR and return OS_SUCCESS branches are reachable.\n- There are no compile-time constant conditions, nor any statements following an unconditional return that would make subsequent code unreachable.\n\nGiven the above, there are no code fragments in the provided function that appear to be unreachable and therefore none that require investigation for MISRA C 2023 Rule 2.1."
}