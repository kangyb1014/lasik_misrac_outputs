{
  "user_message": "An agent A claimed that the following OS_GenericSymbolLookup_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_GenericSymbolLookup_Impl.\n```c\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n    Function = dlsym(dl_handle, SymbolName);\n    dlError  = dlerror();\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    *SymbolAddress = (cpuaddr)Function;\n\n    return status;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local variable 'Function' is declared as a non-const pointer (void *Function) but is only used to hold the address returned by dlsym and is never used to modify the pointee; it should be declared as 'const void *Function' so the pointer points to a const-qualified type (satisfying MISRA C 2023 Rule 8.13).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_GenericSymbolLookup_Impl:\n#define OS_DEBUG(__VA_ARGS__) \n...\ntypedef uintptr_t cpuaddr\n...\ntypedef int32_t   int32\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The local variable Function is only used to hold the result of dlsym and is never used to modify the object it points to (it is only tested for NULL and later cast to an integer cpuaddr). Therefore it can and should be declared to point to a const-qualified type (const void *Function) to satisfy MISRA C 2023 Rule 8.13. Changing the declaration to const void *Function is compatible with assigning the void * returned by dlsym and with the subsequent cast to cpuaddr, so the current non-const declaration is a violation."
}