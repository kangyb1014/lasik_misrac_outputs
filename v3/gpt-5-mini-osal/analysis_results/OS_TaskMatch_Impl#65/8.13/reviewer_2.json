{
  "user_message": "An agent A claimed that the following OS_TaskMatch_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskMatch_Impl.\n```c\nint32 OS_TaskMatch_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (pthread_equal(pthread_self(), impl->id) == 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_task_internal_record_t *impl) but is only used for read access (impl->id is read for pthread_equal). Per MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible. It should be declared as: const OS_impl_task_internal_record_t *impl; (assigning the non-const result of OS_OBJECT_TABLE_GET to a const pointer is permitted).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskMatch_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_t id;\n} OS_impl_task_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_task_internal_record_t OS_impl_task_table[OS_MAX_TASKS]\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_TaskMatch_Impl the local pointer impl is only used for read access (impl->id is read and not modified), so per MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (const OS_impl_task_internal_record_t *impl). Assigning the non-const result of OS_OBJECT_TABLE_GET to a pointer-to-const is allowed (you may add const), and passing impl->id to pthread_equal still works. There are no visible reasons in this function that require impl to be a pointer-to-non-const, so the current declaration violates Rule 8.13."
}