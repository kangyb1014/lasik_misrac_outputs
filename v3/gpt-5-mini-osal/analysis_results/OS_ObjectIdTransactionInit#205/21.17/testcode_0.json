{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes token == NULL (or a pointer to an object smaller than sizeof(*token)), the call memset(token, 0, sizeof(*token)) will write bytes beyond the bounds of the referenced object (e.g. memset(NULL,0, sizeof *token) or memset(ptr_to_smaller_buffer,0, sizeof *token)). The function does not validate token before use, so this can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdTransactionInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2059.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdTransactionInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdTransactionInit:\n```c\nint32 OS_ObjectIdTransactionInit(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    memset(token, 0, sizeof(*token));\n\n    /*\n     * Confirm that OSAL has been fully initialized before allowing any transactions\n     */\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER &&\n        OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * only \"exclusive\" locks allowed after shutdown request (this is mode used for delete).\n     * All regular ops will be blocked.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER && lock_mode != OS_LOCK_MODE_EXCLUSIVE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Transactions cannot be started on an object type for which\n     * there are no actual objects\n     */\n    if (OS_GetMaxForObjectType(idtype) == 0)\n    {\n        return OS_ERR_INVALID_ID;\n    }\n\n    token->lock_mode = lock_mode;\n    token->obj_type  = idtype;\n    token->obj_idx   = OSAL_INDEX_C(-1);\n\n    if (lock_mode != OS_LOCK_MODE_NONE)\n    {\n        OS_Lock_Global(token);\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdTransactionInit code.\n",
  "test_code": "#include <stdio.h>\n#include <unistd.h>\n#include <stddef.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe helper: append a single-line log to /tmp/logs/2059.txt\n * Keep this helper minimal and avoid dereferencing `token` to prevent\n * introducing new undefined behavior in the probe itself. */\nstatic void OS_ObjectIdTransactionInit_Log(const char *stage, OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/2059.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* get a timestamp */\n    time_t t = time(NULL);\n\n    /* sizeof *token is computed at compile time (depends on type), it does not dereference token */\n    fprintf(f, \"%ld: %s - pid=%ld stage=%s lock_mode=%d idtype=%d token_ptr=%p token_size=%zu GlobalState=0x%08x\\n\",\n            (long)t,\n            \"OS_ObjectIdTransactionInit\",\n            (long)getpid(),\n            stage,\n            (int)lock_mode,\n            (int)idtype,\n            (void *)token,\n            sizeof *token,\n            (unsigned)OS_SharedGlobalVars.GlobalState);\n\n    fclose(f);\n}\n\nint32 OS_ObjectIdTransactionInit(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    /* Log state immediately before the original memset that may be the cause of the violation */\n    OS_ObjectIdTransactionInit_Log(\"before_memset\", lock_mode, idtype, token);\n\n    /* Original logic preserved: this is the call reported as potentially unsafe */\n    memset(token, 0, sizeof(*token));\n\n    /* Log after memset (if process still running, this will show that memset completed) */\n    OS_ObjectIdTransactionInit_Log(\"after_memset\", lock_mode, idtype, token);\n\n    /*\n     * Confirm that OSAL has been fully initialized before allowing any transactions\n     */\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER &&\n        OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_ObjectIdTransactionInit_Log(\"return_OS_ERROR_GlobalState_invalid\", lock_mode, idtype, token);\n        return OS_ERROR;\n    }\n\n    /*\n     * only \"exclusive\" locks allowed after shutdown request (this is mode used for delete).\n     * All regular ops will be blocked.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER && lock_mode != OS_LOCK_MODE_EXCLUSIVE)\n    {\n        OS_ObjectIdTransactionInit_Log(\"return_OS_ERR_INCORRECT_OBJ_STATE\", lock_mode, idtype, token);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Transactions cannot be started on an object type for which\n     * there are no actual objects\n     */\n    {\n        int32 max_for_type = OS_GetMaxForObjectType(idtype);\n        OS_ObjectIdTransactionInit_Log(\"after_GetMaxForObjectType\", lock_mode, idtype, token);\n        if (max_for_type == 0)\n        {\n            OS_ObjectIdTransactionInit_Log(\"return_OS_ERR_INVALID_ID_no_objects\", lock_mode, idtype, token);\n            return OS_ERR_INVALID_ID;\n        }\n    }\n\n    /* Record that we are about to populate the token structure */\n    OS_ObjectIdTransactionInit_Log(\"about_to_populate_token_fields\", lock_mode, idtype, token);\n\n    token->lock_mode = lock_mode;\n    token->obj_type  = idtype;\n    token->obj_idx   = OSAL_INDEX_C(-1);\n\n    OS_ObjectIdTransactionInit_Log(\"after_populate_token_fields\", lock_mode, idtype, token);\n\n    if (lock_mode != OS_LOCK_MODE_NONE)\n    {\n        OS_ObjectIdTransactionInit_Log(\"before_OS_Lock_Global\", lock_mode, idtype, token);\n        OS_Lock_Global(token);\n        OS_ObjectIdTransactionInit_Log(\"after_OS_Lock_Global\", lock_mode, idtype, token);\n    }\n\n    OS_ObjectIdTransactionInit_Log(\"return_OS_SUCCESS\", lock_mode, idtype, token);\n    return OS_SUCCESS;\n}\n"
}