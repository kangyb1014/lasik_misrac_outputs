{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nUT_ExecuteBasicHandler can register a function pointer as the final handler and then immediately call UT_DefaultStubImpl which invokes that registered handler. If the caller passes UT_ExecuteBasicHandler itself as the DefaultHandler, the sequence UT_ExecuteBasicHandler -> UT_SetHandlerFunction/UT_DoSetHookFunction (register handler) -> UT_DefaultStubImpl (execute stub) -> invocation of the registered handler -> UT_ExecuteBasicHandler results in indirect recursion. Thus the rule is violated in this scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1436.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete:\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging utilities for capturing control flow and state. */\nstatic FILE *Probe_LogFile(void)\n{\n    static FILE *f = NULL;\n    if (f == NULL)\n    {\n        /* Ensure directory exists - ignore failure if it does not */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/1436.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"--- Probe log start ---\\n\");\n            fflush(f);\n        }\n    }\n    return f;\n}\n\nstatic void Probe_Log(const char *fmt, ...)\n{\n    FILE *f = Probe_LogFile();\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n}\n\n/* Original function preserved; added probes for entry/exit and key states. */\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    Probe_Log(\"OS_CountSemDelete ENTRY: sem_id=0x%llx, token_addr=%p\", (unsigned long long)sem_id, (void *)&token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    Probe_Log(\"OS_ObjectIdGetById returned %d for sem_id=0x%llx, token_addr=%p\", (int)return_code, (unsigned long long)sem_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        Probe_Log(\"About to call OS_CountSemDelete_Impl with token_addr=%p\", (void *)&token);\n        return_code = OS_CountSemDelete_Impl(&token);\n        Probe_Log(\"OS_CountSemDelete_Impl returned %d for sem_id=0x%llx, token_addr=%p\", (int)return_code, (unsigned long long)sem_id, (void *)&token);\n\n        /* Complete the operation via the common routine */\n        Probe_Log(\"About to call OS_ObjectIdFinalizeDelete with return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        Probe_Log(\"OS_ObjectIdFinalizeDelete returned %d for sem_id=0x%llx\", (int)return_code, (unsigned long long)sem_id);\n    }\n    else\n    {\n        Probe_Log(\"Skipping delete impl/finalize because OS_ObjectIdGetById returned %d for sem_id=0x%llx\", (int)return_code, (unsigned long long)sem_id);\n    }\n\n    Probe_Log(\"OS_CountSemDelete EXIT: sem_id=0x%llx, return_code=%d\", (unsigned long long)sem_id, (int)return_code);\n\n    return return_code;\n}\n"
}