{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment token->obj_idx = OSAL_INDEX_C(-1); in OS_ObjectIdTransactionInit is redundant: the token is memset to zero on entry and, in the normal path, OS_ObjectIdToArrayIndex(&token->obj_idx) will overwrite obj_idx on success; on failure the token->obj_idx is not used by the subsequent error handling (OS_ObjectIdTransactionCancel) or callers. Therefore this write is executed but removing it would not change program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1432.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete:\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/*\n * Probe / logging helpers. These functions write information about the control\n * flow and the token/state to /tmp/logs/1432.txt. They are non-intrusive and\n * do not modify program state.\n */\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1432.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void log_token_bytes(const void *token_ptr, size_t token_size)\n{\n    if (token_ptr == NULL || token_size == 0)\n    {\n        log_append(\" token: <null> or zero size\");\n        return;\n    }\n\n    const unsigned char *p = (const unsigned char *)token_ptr;\n    /* Limit the dump to the first 64 bytes to avoid huge logs */\n    size_t to_dump = (token_size < 64u) ? token_size : 64u;\n\n    FILE *f = fopen(\"/tmp/logs/1432.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \" token bytes (first %zu/%zu):\", to_dump, token_size);\n    for (size_t i = 0; i < to_dump; ++i)\n    {\n        fprintf(f, \" %02X\", (unsigned)p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Original function with logging probes inserted. The logic is preserved; the\n * probes only record inputs, outputs, and a snapshot of the token bytes.\n */\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    log_append(\"OS_CountSemDelete ENTRY: sem_id=%lu\", (unsigned long)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    log_append(\"After OS_ObjectIdGetById: return_code=%ld\", (long)return_code);\n    /* Dump a snapshot of the token to help reproduce token initialization state */\n    /* sizeof(token) is used so the dump length matches the actual token size in this TU */\n    log_token_bytes(&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_append(\"Calling OS_CountSemDelete_Impl with token at %p\", (void *)&token);\n        return_code = OS_CountSemDelete_Impl(&token);\n        log_append(\"After OS_CountSemDelete_Impl: return_code=%ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        log_append(\"Calling OS_ObjectIdFinalizeDelete with return_code=%ld\", (long)return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        log_append(\"After OS_ObjectIdFinalizeDelete: return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        log_append(\"OS_CountSemDelete: skipping delete implementation due to prior error\");\n    }\n\n    log_append(\"OS_CountSemDelete EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}