{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the function does not ensure that the destination buffer PhysDriveName is at least OS_FS_PHYS_NAME_LEN bytes long. The call strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1) can write up to OS_FS_PHYS_NAME_LEN-1 bytes (and the code then writes a terminating nul) \u2014 if the caller passed a smaller buffer (e.g. char buf[32]) this results in an out-of-bounds write. Additionally, if filesys->system_mountpt (size OS_MAX_LOCAL_PATH_LEN) is smaller than OS_FS_PHYS_NAME_LEN-1 and not nul-terminated within that bound, strncpy could read beyond the source object. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1729.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/1729.txt. */\nstatic void OS_FS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1729.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Log entry and parameters (addresses only \u2014 do not dereference destination) */\n    OS_FS_ProbeLog(\"ENTER: OS_FS_GetPhysDriveName(PhysDriveName=%p, MountPoint=%p)\", (void *)PhysDriveName, (const void *)MountPoint);\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    OS_FS_ProbeLog(\"After parameter checks: PhysDriveName=%p, MountPoint=%p\", (void *)PhysDriveName, (const void *)MountPoint);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    OS_FS_ProbeLog(\"OS_ObjectIdGetBySearch returned %d, token=%u\", (int)return_code, (unsigned)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        OS_FS_ProbeLog(\"Resolved filesys=%p, flags=0x%08x, system_mountpt=%p\",\n                        (void *)filesys, (unsigned)filesys->flags, (void *)filesys->system_mountpt);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Inspect source buffer safely: determine if it contains a NUL within its declared bound. */\n            const void *nulpos = memchr(filesys->system_mountpt, '\\0', (size_t)OS_MAX_LOCAL_PATH_LEN);\n            if (nulpos != NULL)\n            {\n                size_t pos = (const char *)nulpos - filesys->system_mountpt;\n                OS_FS_ProbeLog(\"Source system_mountpt is NUL-terminated within OS_MAX_LOCAL_PATH_LEN at offset %zu\", pos);\n\n                /* Create a bounded preview of the source (limit to 256 bytes to avoid large stack usage) */\n                size_t preview_len = pos;\n                if (preview_len > 256) preview_len = 256;\n                if (preview_len > 0)\n                {\n                    char preview[257];\n                    memcpy(preview, filesys->system_mountpt, preview_len);\n                    preview[preview_len] = '\\0';\n                    OS_FS_ProbeLog(\"Source preview (first %zu bytes): '%s'\", preview_len, preview);\n                }\n            }\n            else\n            {\n                OS_FS_ProbeLog(\"Source system_mountpt is NOT NUL-terminated within OS_MAX_LOCAL_PATH_LEN (%d).\", (int)OS_MAX_LOCAL_PATH_LEN);\n\n                /* Preview up to a small, safe amount from the declared bound */\n                size_t preview_len = OS_MAX_LOCAL_PATH_LEN;\n                if (preview_len > 256) preview_len = 256;\n                if (preview_len > 0)\n                {\n                    char preview[257];\n                    memcpy(preview, filesys->system_mountpt, preview_len);\n                    preview[preview_len] = '\\0';\n                    OS_FS_ProbeLog(\"Source preview (first %zu bytes of declared area): '%s'\", preview_len, preview);\n                }\n            }\n\n            OS_FS_ProbeLog(\"About to call strncpy with count = %d (OS_FS_PHYS_NAME_LEN - 1)\", (int)(OS_FS_PHYS_NAME_LEN - 1));\n\n            /* Perform the original operation exactly as before */\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            OS_FS_ProbeLog(\"strncpy completed. Destination pointer=%p (content not read to avoid UB).\", (void *)PhysDriveName);\n        }\n        else\n        {\n            OS_FS_ProbeLog(\"Filesystem not mounted system: flags=0x%08x\", (unsigned)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_FS_ProbeLog(\"Released token %u\", (unsigned)token);\n    }\n    else\n    {\n        OS_FS_ProbeLog(\"ObjectIdGetBySearch failed with %d\", (int)return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    OS_FS_ProbeLog(\"EXIT: OS_FS_GetPhysDriveName returning %d\", (int)return_code);\n    return return_code;\n}\n"
}