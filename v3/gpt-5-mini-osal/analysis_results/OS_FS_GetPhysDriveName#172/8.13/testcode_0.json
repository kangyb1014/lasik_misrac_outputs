{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nMountPoint is declared as const char * but is passed as (void *)MountPoint to OS_ObjectIdGetBySearch, discarding the const qualifier. Casting away const in this call makes the pointer point to a non-const type and therefore violates MISRA C 2023 Rule 8.13. The correct approach is to have OS_ObjectIdGetBySearch accept a const void * (or otherwise preserve the const qualification) or to pass a non-const copy if modification is truly required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1723.txt */\nstatic void OS_FS_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1723.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry and parameters for debugging the const-cast scenario */\n    if (MountPoint != NULL)\n    {\n        /* Limit the logged mount point string to avoid huge output */\n        char mount_copy[256];\n        size_t len = strlen(MountPoint);\n        if (len >= sizeof(mount_copy))\n        {\n            /* copy truncated */\n            memcpy(mount_copy, MountPoint, sizeof(mount_copy) - 1);\n            mount_copy[sizeof(mount_copy) - 1] = '\\0';\n        }\n        else\n        {\n            memcpy(mount_copy, MountPoint, len + 1);\n        }\n\n        OS_FS_Log(\"OS_FS_GetPhysDriveName: Enter. PhysDriveName=%p, MountPoint=%p, MountPoint_str=\\\"%s\\\"\",\n                  (void *)PhysDriveName, (const void *)MountPoint, mount_copy);\n    }\n    else\n    {\n        OS_FS_Log(\"OS_FS_GetPhysDriveName: Enter. PhysDriveName=%p, MountPoint=NULL\",\n                  (void *)PhysDriveName);\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_FS_Log(\"Calling OS_ObjectIdGetBySearch: passing MountPoint as (void*) cast. (Note: MountPoint is const char *)\");\n    OS_FS_Log(\"MountPoint pointer value: %p\", (const void *)MountPoint);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    OS_FS_Log(\"OS_ObjectIdGetBySearch returned: %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token value */\n        OS_FS_Log(\"OS_ObjectIdGetBySearch success. token=%\" PRIuPTR, (uintptr_t)token);\n\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log filesystem state and flags */\n        OS_FS_Log(\"Retrieved filesys pointer=%p, flags=0x%08x\", (void *)filesys, (unsigned)filesys->flags);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log the system mount point before copying */\n            if (filesys->system_mountpt != NULL)\n            {\n                char sys_copy[256];\n                size_t slen = strlen(filesys->system_mountpt);\n                if (slen >= sizeof(sys_copy))\n                {\n                    memcpy(sys_copy, filesys->system_mountpt, sizeof(sys_copy) - 1);\n                    sys_copy[sizeof(sys_copy) - 1] = '\\0';\n                }\n                else\n                {\n                    memcpy(sys_copy, filesys->system_mountpt, slen + 1);\n                }\n                OS_FS_Log(\"Copying system_mountpt=\\\"%s\\\" into PhysDriveName (len limit=%d)\", sys_copy, OS_FS_PHYS_NAME_LEN - 1);\n            }\n            else\n            {\n                OS_FS_Log(\"filesys->system_mountpt is NULL\");\n            }\n\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            OS_FS_Log(\"PhysDriveName after copy=%s\", PhysDriveName);\n        }\n        else\n        {\n            OS_FS_Log(\"Filesystem is not a mounted system (flags=0x%08x). Setting return_code=OS_ERR_INCORRECT_OBJ_STATE\", (unsigned)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_FS_Log(\"Released token and exiting with return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        OS_FS_Log(\"OS_ObjectIdGetBySearch indicated name not found. Setting return_code=OS_ERR_NAME_NOT_FOUND\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n"
}