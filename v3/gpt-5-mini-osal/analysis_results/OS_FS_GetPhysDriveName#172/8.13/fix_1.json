{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_FS_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1723.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry and parameters for debugging the const-cast scenario */\n    if (MountPoint != NULL)\n    {\n        /* Limit the logged mount point string to avoid huge output */\n        char mount_copy[256];\n        size_t len = strlen(MountPoint);\n        if (len >= sizeof(mount_copy))\n        {\n            /* copy truncated */\n            memcpy(mount_copy, MountPoint, sizeof(mount_copy) - 1);\n            mount_copy[sizeof(mount_copy) - 1] = '\\0';\n        }\n        else\n        {\n            memcpy(mount_copy, MountPoint, len + 1);\n        }\n\n        OS_FS_Log(\"OS_FS_GetPhysDriveName: Enter. PhysDriveName=%p, MountPoint=%p, MountPoint_str=\\\"%s\\\"\",\n                  (void *)PhysDriveName, (const void *)MountPoint, mount_copy);\n    }\n    else\n    {\n        OS_FS_Log(\"OS_FS_GetPhysDriveName: Enter. PhysDriveName=%p, MountPoint=NULL\",\n                  (void *)PhysDriveName);\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_FS_Log(\"Calling OS_ObjectIdGetBySearch: passing MountPoint as (void*) cast. (Note: MountPoint is const char *)\");\n    OS_FS_Log(\"MountPoint pointer value: %p\", (const void *)MountPoint);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    OS_FS_Log(\"OS_ObjectIdGetBySearch returned: %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token value */\n        OS_FS_Log(\"OS_ObjectIdGetBySearch success. token=%\" PRIuPTR, (uintptr_t)token);\n\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log filesystem state and flags */\n        OS_FS_Log(\"Retrieved filesys pointer=%p, flags=0x%08x\", (void *)filesys, (unsigned)filesys->flags);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log the system mount point before copying */\n            if (filesys->system_mountpt != NULL)\n            {\n                char sys_copy[256];\n                size_t slen = strlen(filesys->system_mountpt);\n                if (slen >= sizeof(sys_copy))\n                {\n                    memcpy(sys_copy, filesys->system_mountpt, sizeof(sys_copy) - 1);\n                    sys_copy[sizeof(sys_copy) - 1] = '\\0';\n                }\n                else\n                {\n                    memcpy(sys_copy, filesys->system_mountpt, slen + 1);\n                }\n                OS_FS_Log(\"Copying system_mountpt=\\\"%s\\\" into PhysDriveName (len limit=%d)\", sys_copy, OS_FS_PHYS_NAME_LEN - 1);\n            }\n            else\n            {\n                OS_FS_Log(\"filesys->system_mountpt is NULL\");\n            }\n\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            OS_FS_Log(\"PhysDriveName after copy=%s\", PhysDriveName);\n        }\n        else\n        {\n            OS_FS_Log(\"Filesystem is not a mounted system (flags=0x%08x). Setting return_code=OS_ERR_INCORRECT_OBJ_STATE\", (unsigned)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_FS_Log(\"Released token and exiting with return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        OS_FS_Log(\"OS_ObjectIdGetBySearch indicated name not found. Setting return_code=OS_ERR_NAME_NOT_FOUND\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpkqgb4o18/src/src/os/shared/src/osapi-filesys.c: In function 'OS_FS_GetPhysDriveName':\n/tmp/tmpkqgb4o18/src/src/os/shared/src/osapi-filesys.c:671:9: error: aggregate value used where an integer was expected\n  671 |         OS_FS_Log(\"OS_ObjectIdGetBySearch success. token=%\" PRIuPTR, (uintptr_t)token);\n      |         ^~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:188: CMakeFiles/osal.dir/src/os/shared/src/osapi-filesys.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_FS_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1723.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry and parameters for debugging the const-cast scenario */\n    if (MountPoint != NULL)\n    {\n        /* Limit the logged mount point string to avoid huge output */\n        char mount_copy[256];\n        size_t len = strlen(MountPoint);\n        if (len >= sizeof(mount_copy))\n        {\n            /* copy truncated */\n            memcpy(mount_copy, MountPoint, sizeof(mount_copy) - 1);\n            mount_copy[sizeof(mount_copy) - 1] = '\\0';\n        }\n        else\n        {\n            memcpy(mount_copy, MountPoint, len + 1);\n        }\n\n        OS_FS_Log(\"OS_FS_GetPhysDriveName: Enter. PhysDriveName=%p, MountPoint=%p, MountPoint_str=\\\"%s\\\"\",\n                  (void *)PhysDriveName, (const void *)MountPoint, mount_copy);\n    }\n    else\n    {\n        OS_FS_Log(\"OS_FS_GetPhysDriveName: Enter. PhysDriveName=%p, MountPoint=NULL\",\n                  (void *)PhysDriveName);\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_FS_Log(\"Calling OS_ObjectIdGetBySearch: passing MountPoint as (void*) cast. (Note: MountPoint is const char *)\");\n    OS_FS_Log(\"MountPoint pointer value: %p\", (const void *)MountPoint);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    OS_FS_Log(\"OS_ObjectIdGetBySearch returned: %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token value */\n        /* token may be an aggregate type; printing its address with %p avoids casting an aggregate to an integer */\n        OS_FS_Log(\"OS_ObjectIdGetBySearch success. token=%p\", (void *)&token);\n\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log filesystem state and flags */\n        OS_FS_Log(\"Retrieved filesys pointer=%p, flags=0x%08x\", (void *)filesys, (unsigned)filesys->flags);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log the system mount point before copying */\n            if (filesys->system_mountpt != NULL)\n            {\n                char sys_copy[256];\n                size_t slen = strlen(filesys->system_mountpt);\n                if (slen >= sizeof(sys_copy))\n                {\n                    memcpy(sys_copy, filesys->system_mountpt, sizeof(sys_copy) - 1);\n                    sys_copy[sizeof(sys_copy) - 1] = '\\0';\n                }\n                else\n                {\n                    memcpy(sys_copy, filesys->system_mountpt, slen + 1);\n                }\n                OS_FS_Log(\"Copying system_mountpt=\\\"%s\\\" into PhysDriveName (len limit=%d)\", sys_copy, OS_FS_PHYS_NAME_LEN - 1);\n            }\n            else\n            {\n                OS_FS_Log(\"filesys->system_mountpt is NULL\");\n            }\n\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            OS_FS_Log(\"PhysDriveName after copy=%s\", PhysDriveName);\n        }\n        else\n        {\n            OS_FS_Log(\"Filesystem is not a mounted system (flags=0x%08x). Setting return_code=OS_ERR_INCORRECT_OBJ_STATE\", (unsigned)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_FS_Log(\"Released token and exiting with return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        OS_FS_Log(\"OS_ObjectIdGetBySearch indicated name not found. Setting return_code=OS_ERR_NAME_NOT_FOUND\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n",
  "explanation": "The build error was caused by attempting to cast an aggregate type (OS_object_token_t) to uintptr_t and printing it with PRIuPTR. I changed the log to print the address of the token using %p and (void *)&token. This avoids casting an aggregate to an integer while preserving the original intent to log the token value for debugging."
}