{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete_Impl:\n```c\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_QueueDelete_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_queue_internal_record_t OS_impl_queue_table[OS_MAX_QUEUES]\n...\ntypedef struct\n{\n    mqd_t id;\n} OS_impl_queue_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef int32_t   int32\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided code and related definitions. Specifically:\n\n- There are no occurrences of known compiler extensions such as __attribute__, __asm__, __extension__, typeof (GNU), statement expressions ({ ... }), nested functions, labels-as-values, or inline assembly.\n- The variadic macro #define OS_DEBUG(__VA_ARGS__) uses standard C99 variadic macro syntax (not a compiler extension). Its empty replacement list is a legal preprocessor construct, not a language extension.\n- The code uses POSIX APIs/types (mq_close, mqd_t, strerror, errno); these are library/OS APIs, not compiler language extensions and therefore do not trigger MISRA Rule 1.2 by themselves.\n- The macro OS_OBJECT_TABLE_GET and its use (OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token)) involve taking the address of an expression (&(tok)) but this is ordinary C expression/manipulation rather than a compiler-specific extension. In the shown usage (*token) is an lvalue so &(*token) is well-formed.\n- All typedefs and forward declarations in the additional code are standard C constructs.\n\nTherefore there are no code fragments that appear to rely on compiler language extensions that would need investigation under MISRA C 2023 Rule 1.2."
}