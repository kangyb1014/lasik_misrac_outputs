{
  "user_message": "An agent A claimed that the following OS_QueueDelete_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueDelete_Impl.\n```c\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'impl' is declared as a modifiable pointer (OS_impl_queue_internal_record_t *impl) but is only used for read access (only impl->id is read). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. In this case 'impl' can and should be declared as 'const OS_impl_queue_internal_record_t *impl' (assigning the macro result to a pointer-to-const is allowed).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_QueueDelete_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    mqd_t id;\n} OS_impl_queue_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_queue_internal_record_t OS_impl_queue_table[OS_MAX_QUEUES]\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In the shown function 'impl' is only used for read access (only impl->id is read) so it can and should be declared as a pointer to const. Assigning the address of the table element (the macro yields an OS_impl_queue_internal_record_t *) to a const-qualified pointer (const OS_impl_queue_internal_record_t *) is allowed (adding const). Therefore, per MISRA C 2023 Rule 8.13 this is a violation and the pointer should be declared const. (The OS_OBJECT_TABLE_GET macro and the function call mq_close(impl->id) are compatible with making impl a pointer-to-const.)"
}