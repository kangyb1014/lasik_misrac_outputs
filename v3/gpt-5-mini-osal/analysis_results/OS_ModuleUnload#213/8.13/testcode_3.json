{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'module' is declared as OS_module_internal_record_t * but is only used for read access (module->module_type) and never modifies the pointed object. Per MISRA C 2023 Rule 8.13 it should be a pointer-to-const, e.g. const OS_module_internal_record_t *module. Assigning the result of OS_OBJECT_TABLE_GET (a non-const pointer) to a const-qualified pointer is allowed, so the current non-const declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append execution trace and state to a log file for diagnostics.\n * This preserves original logic and only adds logging side-effects. */\nstatic void OS_ModuleUnload_Log(const char *stage,\n                                unsigned long module_id,\n                                const void *module_ptr,\n                                long module_type_val,\n                                const void *token_ptr,\n                                long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2133.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log a single-line record with key state values. */\n        fprintf(f,\n                \"OS_ModuleUnload: stage=%s module_id=%lu return_code=%ld module_ptr=%p module_type=%ld token_addr=%p\\n\",\n                stage, module_id, return_code, module_ptr, module_type_val, token_ptr);\n        fclose(f);\n    }\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry and initial parameters */\n    OS_ModuleUnload_Log(\"entry\", (unsigned long)module_id, NULL, -1, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_ModuleUnload_Log(\"after_ObjectIdGetById\", (unsigned long)module_id, NULL, -1, (const void *)&token, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log obtained module pointer and (if available) module_type */\n        if (module != NULL)\n        {\n            OS_ModuleUnload_Log(\"got_module\", (unsigned long)module_id, (const void *)module, (long)module->module_type, (const void *)&token, (long)return_code);\n        }\n        else\n        {\n            OS_ModuleUnload_Log(\"got_module_null\", (unsigned long)module_id, NULL, -1, (const void *)&token, (long)return_code);\n        }\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_Log(\"before_Impl\", (unsigned long)module_id, (const void *)module, (long)module->module_type, (const void *)&token, (long)return_code);\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_Log(\"after_Impl\", (unsigned long)module_id, (const void *)module, (long)module->module_type, (const void *)&token, (long)return_code);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log finalization result */\n        OS_ModuleUnload_Log(\"finalize\", (unsigned long)module_id, (const void *)module, (long)((module != NULL) ? module->module_type : -1), (const void *)&token, (long)return_code);\n    }\n\n    /* Log exit with return code */\n    OS_ModuleUnload_Log(\"exit\", (unsigned long)module_id, NULL, -1, NULL, (long)return_code);\n\n    return return_code;\n}\n"
}