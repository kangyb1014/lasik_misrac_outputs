{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_GenericBinSemTake_Impl:\n```c\nstatic int32 OS_GenericBinSemTake_Impl(const OS_object_token_t *token, const struct timespec *timeout)\n{\n    sig_atomic_t                      flush_count;\n    int32                             return_code;\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /*\n     * Note - this lock should be quickly available - should not delay here.\n     * The main delay is in the pthread_cond_wait() below.\n     */\n    /* Lock the mutex ( not the table! ) */\n    if (OS_Posix_BinSemAcquireMutex(&sem->id) != OS_SUCCESS)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* because pthread_cond_wait() is also a cancellation point,\n     * this uses a cleanup handler to ensure that if canceled during this call,\n     * the mutex is also released */\n    pthread_cleanup_push(OS_Posix_BinSemReleaseMutex, &sem->id);\n\n    return_code = OS_SUCCESS;\n\n    /*\n     * Note that for vxWorks compatibility, we need to stop pending on the semaphore\n     * and return from this function under two possible circumstances:\n     *\n     *  a) the semaphore count was nonzero (may be pre-existing or due to a give)\n     *     this is the normal case, we should decrement the count by 1 and return.\n     *  b) the semaphore got \"flushed\"\n     *     in this case ALL tasks are un-blocked and we do NOT decrement the count.\n     */\n\n    /*\n     * first take a local snapshot of the flush request counter,\n     * if it changes, we know that someone else called SemFlush.\n     */\n    flush_count = sem->flush_request;\n\n    /* Note - the condition must be checked in a while loop because\n     * even if pthread_cond_wait() returns, it does NOT guarantee that\n     * the condition we are looking for has been met.\n     *\n     * Also if the current_value is already nonzero we will not wait.\n     */\n    while (sem->current_value == 0 && sem->flush_request == flush_count)\n    {\n        /* Must pend until something changes */\n        if (timeout == NULL)\n        {\n            /* wait forever */\n            pthread_cond_wait(&(sem->cv), &(sem->id));\n        }\n        else if (pthread_cond_timedwait(&(sem->cv), &(sem->id), timeout) == ETIMEDOUT)\n        {\n            return_code = OS_SEM_TIMEOUT;\n            break;\n        }\n    }\n\n    /* If the flush counter did not change, set the value to zero */\n    if (return_code == OS_SUCCESS && sem->flush_request == flush_count)\n    {\n        sem->current_value = 0;\n    }\n\n    /*\n     * Pop the cleanup handler.\n     * Passing \"true\" means it will be executed, which\n     * handles releasing the mutex.\n     */\n    pthread_cleanup_pop(true);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_GenericBinSemTake_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nOS_impl_binsem_internal_record_t OS_impl_bin_sem_table[OS_MAX_BIN_SEMAPHORES]\n...\ntypedef struct\n{\n    pthread_mutex_t       id;\n    pthread_cond_t        cv;\n    volatile sig_atomic_t flush_request;\n    volatile sig_atomic_t current_value;\n} OS_impl_binsem_internal_record_t\n...\nint32 OS_Posix_BinSemAcquireMutex(pthread_mutex_t *mut)\n{\n    struct timespec timeout;\n\n    if (clock_gettime(CLOCK_REALTIME, &timeout) != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    timeout.tv_sec += OS_POSIX_BINSEM_MAX_WAIT_SECONDS;\n\n    if (pthread_mutex_timedlock(mut, &timeout) != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n...\nvoid OS_Posix_BinSemReleaseMutex(void *mut)\n{\n    pthread_mutex_unlock(mut);\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SEM_TIMEOUT (-7)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "pthread_cond_wait(&(sem->cv), &(sem->id));",
    "if (timeout == NULL)",
    "else if (pthread_cond_timedwait(&(sem->cv), &(sem->id), timeout) == ETIMEDOUT)",
    "static int32 OS_GenericBinSemTake_Impl(const OS_object_token_t *token, const struct timespec *timeout)",
    "sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);"
  ],
  "explanation": "Other fragments were not selected because they do not modify the function parameters (token or timeout) nor do they take their address in a way that could change the pointer value. Specifically:\n- There are no assignments to 'token' or 'timeout' anywhere in the function (no statements like 'token = ...' or 'timeout = ...').\n- The only dereference/use of 'token' is via the macro call (sem = OS_OBJECT_TABLE_GET(..., *token)); this is flagged above for review because the macro takes the address of its argument (&(tok)) and could interact with const/qualification or an unexpected temporary. Other uses of the resulting 'sem' pointer (e.g. sem->current_value = 0) modify table data, not the function parameter itself and are permitted under the rule.\n- Passing 'timeout' to pthread_cond_timedwait and comparing it against NULL are uses of the parameter value; they do not modify the pointer variable itself. pthread_cond_timedwait accepts a const struct timespec* (so it should not modify the pointed-to object). These call sites are included above for inspection only to confirm the called APIs do not modify the parameter or its pointee.\n- Calls that operate on the semaphore mutex/condition (OS_Posix_BinSemAcquireMutex, OS_Posix_BinSemReleaseMutex, pthread_cleanup_push, pthread_cond_wait) use &sem->id or &sem->cv and do not reference or modify the function parameters.\nGiven the rule (the pointer parameter itself must not be modified), the listed fragments are the only places where the parameters are used in ways that warrant inspection; all other code in the function does not violate Rule 17.8."
}