{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(ArgV[0], \"-d\") without first validating that ArgV (returned by OS_BSP_GetArgV) is non-NULL and that ArgV[0] points to a valid, NUL-terminated character array. Although ArgC>0 is checked, that does not by itself guarantee the pointer elements are non-NULL or NUL-terminated. If OS_BSP_GetArgV returns NULL, or an array where ArgV[0] is NULL, or ArgV[0] does not contain a terminating '\\0', then strcmp will read beyond the bounds of the referenced object (or dereference NULL), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3409.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logging helper - appends messages to /tmp/logs/3409.txt */\nstatic void UT_BSP_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp = fopen(\"/tmp/logs/3409.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* Try to create directory and retry; use system to avoid extra headers */\n        (void)system(\"mkdir -p /tmp/logs 2>/dev/null\");\n        fp = fopen(\"/tmp/logs/3409.txt\", \"a\");\n    }\n    if (fp == NULL)\n    {\n        /* If logging is not possible, silently return to avoid changing program flow */\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', fp);\n    (void)fclose(fp);\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    /* Preserve original initialization */\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n\n    /* Log initial ArgC value */\n    UT_BSP_Log(\"UT_BSP_Setup: initial ArgC=%u\", (unsigned)ArgC);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n\n        /* Log the returned ArgV pointer */\n        UT_BSP_Log(\"UT_BSP_Setup: ArgV returned=%p\", (void *)ArgV);\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            /* Log loop entry state: remaining ArgC and ArgV pointer */\n            UT_BSP_Log(\"UT_BSP_Setup: loop start, remaining ArgC=%u, ArgV=%p\", (unsigned)ArgC, (void *)ArgV);\n\n            if (ArgV == NULL)\n            {\n                UT_BSP_Log(\"UT_BSP_Setup: ArgV is NULL - about to perform strcmp on a NULL pointer (will reproduce failure)\");\n                /* Intentionally do not change control flow; original code will still attempt to use ArgV */\n            }\n            else\n            {\n                /* ArgV is non-NULL; log ArgV[0] pointer and whether it is NULL */\n                UT_BSP_Log(\"UT_BSP_Setup: ArgV[0] pointer=%p\", (void *)ArgV[0]);\n                if (ArgV[0] == NULL)\n                {\n                    UT_BSP_Log(\"UT_BSP_Setup: ArgV[0] is NULL - about to perform strcmp on a NULL pointer (will reproduce failure)\");\n                }\n                else\n                {\n                    /* Do not attempt to print the string contents to avoid introducing extra out-of-bounds reads.\n                     * Only log that we are about to call strcmp comparisons for this ArgV[0]. */\n                    UT_BSP_Log(\"UT_BSP_Setup: about to compare ArgV[0] with option tokens using strcmp; ArgV[0]=%p\", (void *)ArgV[0]);\n                }\n            }\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UT_BSP_Log(\"UT_BSP_Setup: matched '-d' (ArgV[0]=%p)\", (void *)ArgV[0]);\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UT_BSP_Log(\"UT_BSP_Setup: matched '-q' (ArgV[0]=%p)\", (void *)ArgV[0]);\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                UT_BSP_Log(\"UT_BSP_Setup: matched '-v' (ArgV[0]=%p), will consume next argument ArgV[1]=%p\", (void *)ArgV[0], (void *)ArgV[1]);\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n\n    /* Final state log */\n    UT_BSP_Log(\"UT_BSP_Setup: final UserShift=%u, CurrVerbosity=%u\", (unsigned)UserShift, (unsigned)BSP_UT_Global.CurrVerbosity);\n}\n"
}