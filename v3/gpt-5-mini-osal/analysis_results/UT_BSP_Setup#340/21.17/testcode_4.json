{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds read if ArgV[0] is not a valid, NUL-terminated string (or is a NULL pointer). The code only checks ArgC>0 (so the pointer slot ArgV[0] exists) but does not verify ArgV[0] != NULL nor that it points to a NUL-terminated buffer. If OS_BSP_GetArgV() were to supply a NULL entry or a non-terminated char array, strcmp(ArgV[0], \"-q\") could read past the object bounds (or dereference NULL), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3409.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "void UT_BSP_Setup(void)\n{\n    /* Probe helper: append concise state information to /tmp/logs/3409.txt\n       This helper intentionally logs only pointer values and counters (no\n       dereference of pointed string contents) so it does not introduce\n       extra out-of-bounds reads beyond the original behavior. */\n    static void UT_BSP_LogProbe(const char *stage, uint32 ArgC, char *const *ArgV, int cmp_result)\n    {\n        FILE *f = fopen(\"/tmp/logs/3409.txt\", \"a\");\n        if (f != NULL)\n        {\n            /* Log stage, ArgC and ArgV pointer value. */\n            fprintf(f, \"%s: ArgC=%lu, ArgV=%p, strcmp_result=%d\\n\",\n                    stage, (unsigned long)ArgC, (void *)ArgV, cmp_result);\n\n            /* If ArgV exists, log the pointer values stored in the first two slots.\n               Do not dereference ArgV[0] to read string bytes (that could cause\n               additional out-of-bounds reads); only capture the pointer values. */\n            if (ArgV != NULL)\n            {\n                /* Safe to read ArgV[0] as a pointer value if ArgV is non-NULL. */\n                fprintf(f, \"%s: ArgV[0]=%p, ArgV[1]=%p\\n\",\n                        stage, (void *)ArgV[0], (void *)(ArgV[1]));\n            }\n\n            fclose(f);\n        }\n    }\n\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    UT_BSP_LogProbe(\"entry_after_GetArgC\", ArgC, NULL, 0);\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        UT_BSP_LogProbe(\"after_GetArgV\", ArgC, ArgV, 0);\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            /* Log state immediately before each strcmp call so evidence is\n               recorded in case the subsequent strcmp triggers an out-of-bounds\n               read or crash. The cmp_result parameter is 0 here to indicate\n               this is a pre-call probe. */\n            UT_BSP_LogProbe(\"before_strcmp_-d\", ArgC, ArgV, 0);\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UT_BSP_LogProbe(\"after_strcmp_-d\", ArgC, ArgV, 0);\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n\n            UT_BSP_LogProbe(\"before_strcmp_-q\", ArgC, ArgV, 0);\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UT_BSP_LogProbe(\"after_strcmp_-q\", ArgC, ArgV, 0);\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n\n            UT_BSP_LogProbe(\"before_strcmp_-v\", ArgC, ArgV, 0);\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UT_BSP_LogProbe(\"before_strtoul_arg\", ArgC, ArgV, 0);\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                UT_BSP_LogProbe(\"after_strtoul_arg\", ArgC, ArgV, (int)UserShift);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    UT_BSP_LogProbe(\"after_loop\", ArgC, NULL, (int)UserShift);\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n"
}