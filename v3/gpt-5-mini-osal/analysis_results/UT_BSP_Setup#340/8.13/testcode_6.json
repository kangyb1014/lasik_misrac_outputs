{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as char *const *ArgV (pointer to non-const char), and ArgV[0] (type char *const) is used as the first argument to strcmp. The pointed-to characters are not const-qualified even though they are not modified \u2014 MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible. The declaration should be changed so the pointed-to characters are const, e.g. const char *const *ArgV (or const char * const ArgV[]), so passing ArgV[0] to strcmp does not omit a const qualifier.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <stdarg.h>\\n#include <sys/stat.h>\\n#include <sys/types.h>\\n#include <errno.h>\\n#include <stdint.h>\\n\\n/* Probe logger: append textual logs to /tmp/logs/3403.txt. */\\nstatic void UT_BSP_Log(const char *fmt, ...)\\n{\\n    FILE *fp;\\n    va_list ap;\\n\\n    /* Ensure directory exists (best-effort). Ignore errors if it fails. */\\n    (void)mkdir(\\\"/tmp/logs\\\", 0777);\\n\\n    fp = fopen(\\\"/tmp/logs/3403.txt\\\", \\\"a\\\");\\n    if (fp == NULL)\\n    {\\n        /* If we cannot open the file, silently return to avoid altering behavior. */\\n        return;\\n    }\\n\\n    va_start(ap, fmt);\\n    vfprintf(fp, fmt, ap);\\n    va_end(ap);\\n\\n    fflush(fp);\\n    fclose(fp);\\n}\\n\\nvoid UT_BSP_Setup(void)\\n{\\n    uint8        UserShift;\\n    uint32       ArgC;\\n    char *const *ArgV;\\n\\n    UT_BSP_Log(\\\"UT_BSP_Setup: entry\\\\n\\\");\\n\\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\\n\\n    UserShift = UTASSERT_CASETYPE_NONE;\\n    ArgC      = OS_BSP_GetArgC();\\n    UT_BSP_Log(\\\"OS_BSP_GetArgC() returned ArgC=%lu\\\\n\\\", (unsigned long)ArgC);\\n\\n    if (ArgC > 0)\\n    {\\n        ArgV = OS_BSP_GetArgV();\\n        UT_BSP_Log(\\\"OS_B"
}