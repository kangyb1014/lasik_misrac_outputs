{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n#include <stdarg.h>\\n#include <sys/stat.h>\\n#include <sys/types.h>\\n#include <errno.h>\\n#include <stdint.h>\\n\\n/* Probe logger: append textual logs to /tmp/logs/3403.txt. */\\nstatic void UT_BSP_Log(const char *fmt, ...)\\n{\\n    FILE *fp;\\n    va_list ap;\\n\\n    /* Ensure directory exists (best-effort). Ignore errors if it fails. */\\n    (void)mkdir(\\\"/tmp/logs\\\", 0777);\\n\\n    fp = fopen(\\\"/tmp/logs/3403.txt\\\", \\\"a\\\");\\n    if (fp == NULL)\\n    {\\n        /* If we cannot open the file, silently return to avoid altering behavior. */\\n        return;\\n    }\\n\\n    va_start(ap, fmt);\\n    vfprintf(fp, fmt, ap);\\n    va_end(ap);\\n\\n    fflush(fp);\\n    fclose(fp);\\n}\\n\\nvoid UT_BSP_Setup(void)\\n{\\n    uint8        UserShift;\\n    uint32       ArgC;\\n    char *const *ArgV;\\n\\n    UT_BSP_Log(\\\"UT_BSP_Setup: entry\\\\n\\\");\\n\\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\\n\\n    UserShift = UTASSERT_CASETYPE_NONE;\\n    ArgC      = OS_BSP_GetArgC();\\n    UT_BSP_Log(\\\"OS_BSP_GetArgC() returned ArgC=%lu\\\\n\\\", (unsigned long)ArgC);\\n\\n    if (ArgC > 0)\\n    {\\n        ArgV = OS_BSP_GetArgV();\\n        UT_BSP_Log(\\\"OS_B\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <stdint.h>\n\n/* Provide original-style typedefs used in the code */\ntypedef uint8_t  uint8;\ntypedef uint32_t uint32;\n\n/* Minimal definition of a global structure referenced by the code. */\nstruct BSP_UT_Global_t {\n    int placeholder;\n};\n\nstatic struct BSP_UT_Global_t BSP_UT_Global;\n\n/* Minimal constant used in the original code */\nstatic const uint8 UTASSERT_CASETYPE_NONE = 0;\n\n/* Prototypes for external functions used by the code. These are not\n   defined here per the constraints (no mock functions). They are\n   declared so the code compiles. */\nextern uint32 OS_BSP_GetArgC(void);\nextern char *const *OS_BSP_GetArgV(void);\n\n/* Probe logger: append textual logs to /tmp/logs/3403.txt. */\nstatic void UT_BSP_Log(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure directory exists (best-effort). Ignore errors if it fails. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/3403.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If we cannot open the file, silently return to avoid altering behavior. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    UT_BSP_Log(\"UT_BSP_Setup: entry\\n\");\n\n    /* Clear the global structure (preserve original behavior). */\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    UT_BSP_Log(\"OS_BSP_GetArgC() returned ArgC=%lu\\n\", (unsigned long)ArgC);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        if (ArgV != NULL && ArgV[0] != NULL)\n        {\n            /* Log the first argument similar to likely original intent. */\n            UT_BSP_Log(\"OS_BSP_GetArgV()[0]=%s\\n\", ArgV[0]);\n        }\n        else\n        {\n            UT_BSP_Log(\"OS_BSP_GetArgV() returned NULL or empty\\n\");\n        }\n    }\n}\n",
  "explanation": "The original input was truncated and referenced several undefined types and symbols. I: (1) Added typedefs for uint8 and uint32 using stdint.h types. (2) Declared a minimal BSP_UT_Global structure and instantiated it so memset has a valid target. (3) Defined UTASSERT_CASETYPE_NONE as a const value. (4) Declared prototypes for OS_BSP_GetArgC and OS_BSP_GetArgV (no definitions provided, per constraints). (5) Finished the truncated UT_BSP_Setup implementation by safely obtaining ArgV and logging the first argument if present. The original logging and directory/file behavior were preserved. No main(), macros, or mock functions were added."
}