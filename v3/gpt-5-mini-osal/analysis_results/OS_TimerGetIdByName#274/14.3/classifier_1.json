{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetIdByName:\n```c\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TimerGetIdByName:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nosal_id_t OS_TaskGetId_Impl(void)\n{\n    OS_VoidPtrValueWrapper_t self_record;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    self_record.opaque_arg = pthread_getspecific(POSIX_GlobalVars.ThreadKey);\n\n    return self_record.id;\n}\n...\nstatic inline osal_objtype_t OS_ObjectIdToType_Impl(osal_id_t id)\n{\n    return (OS_ObjectIdToInteger(id) >> OS_OBJECT_TYPE_SHIFT);\n}\n...\n#define OS_OBJECT_TYPE_OS_TIMEBASE 0x08\n...\ntypedef uint32 osal_objtype_t\n...\ntypedef uint32 osal_id_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_CHECK_POINTER(timer_name);\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The macro expands to BUGCHECK((timer_name) != NULL, OS_INVALID_POINTER). The controlling expression is (timer_name != NULL), which depends on the runtime value of the function parameter timer_name and therefore is not an invariant constant expression. No infinite-loop or do-while constant-expression exception applies."
}