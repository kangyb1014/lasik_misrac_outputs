{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetIdByName:\n```c\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TimerGetIdByName:\ntypedef uint32 osal_id_t\n...\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "int32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)",
    "ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);",
    "return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);",
    "return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);",
    "OS_CHECK_POINTER(timer_name);",
    "OS_CHECK_POINTER(timer_id);",
    "#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)",
    "LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);",
    "int32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)",
    "*object_id = token.obj_id;"
  ],
  "explanation": "I limited the reported fragments to every place in the provided code where pointers are declared, passed, or dereferenced \u2014 these are the locations that could potentially violate MISRA C 2023 Rule 8.13 (pointer should point to a const-qualified type whenever possible). Fragments not reported do not involve pointer types or involve pointers that are clearly used for output/mutation and therefore should not be const-qualified (e.g. local non-pointer variables like return_code and objtype, or token as a local object used to store and release object id). The timer_name/name pointers are already const-qualified in the declarations, so their declarations themselves are not violations (but I included the call sites/macros that take them to ensure the callee/macro prototypes accept const). The timer_id/object_id pointers are used as output parameters (they are written via *object_id = ...), so they must remain non-const; these are nevertheless included so reviewers can verify the intended direction (input vs output). The OS_ObjectIdGetByName and the ARGCHECK/LENGTHCHECK macros are included because their prototypes/definitions (not shown) need to be inspected to confirm they accept const-qualified pointers for name. Other code fragments either do not involve pointers or involve pointers that are intentionally mutable, so they do not need further investigation for Rule 8.13."
}