{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: if UT_ExecuteBasicHandler is passed as the DefaultHandler (or a handler that ultimately calls back to UT_ExecuteBasicHandler), the function will register that handler via UT_SetHandlerFunction and then call UT_DefaultStubImpl, which dispatches the registered final handler. That results in UT_ExecuteBasicHandler being invoked again (indirect self-call), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2746.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetIdByName:\n```c\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <stdint.h>\n\n/* Helper: append a single message line to the log file. */\nstatic void OS_Timer_LogAppend(const char *msg)\n{\n    /* Ensure log directory exists (ignore errors) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *fp = fopen(\"/tmp/logs/2746.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fputs(msg, fp);\n        fputc('\\n', fp);\n        fclose(fp);\n    }\n}\n\n/* Helper: format and append a message with a small stack buffer. */\nstatic void OS_Timer_LogFmt(const char *prefix, const char *p1, const char *p2)\n{\n    char buf[512];\n\n    /* Build a concise single-line log entry. */\n    if (p1 == NULL)\n    {\n        p1 = \"\";\n    }\n    if (p2 == NULL)\n    {\n        p2 = \"\";\n    }\n\n    /* Keep formatting simple to avoid heavy runtime dependencies. */\n    (void)snprintf(buf, sizeof(buf), \"%s %s %s\", prefix, p1, p2);\n    OS_Timer_LogAppend(buf);\n}\n\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Safe representations for logging */\n    char addrbuf[32];\n    char namebuf[256];\n\n    (void)snprintf(addrbuf, sizeof(addrbuf), \"%p\", (void *)timer_id);\n    if (timer_name != NULL)\n    {\n        /* Copy at most sizeof(namebuf)-1 bytes to avoid overflow */\n        (void)strncpy(namebuf, timer_name, sizeof(namebuf) - 1);\n        namebuf[sizeof(namebuf) - 1] = '\\0';\n    }\n    else\n    {\n        (void)strcpy(namebuf, \"<NULL>\");\n    }\n\n    /* Log entry with parameter snapshots. */\n    char entrybuf[512];\n    (void)snprintf(entrybuf, sizeof(entrybuf), \"ENTER: OS_TimerGetIdByName(timer_id=%s, timer_name=\\\"%s\\\")\", addrbuf, namebuf);\n    OS_Timer_LogAppend(entrybuf);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    OS_Timer_LogAppend(\"PARAMS_OK: timer_id and timer_name pointers passed null-check\");\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log the object type obtained from the current task context. */\n    char objbuf[128];\n    (void)snprintf(objbuf, sizeof(objbuf), \"CTX_OBJTYPE: objtype=%d\", (int)objtype);\n    OS_Timer_LogAppend(objbuf);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_Timer_LogAppend(\"EXIT: OS_TimerGetIdByName -> OS_ERR_INCORRECT_OBJ_STATE (called from timebase)\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Log just before performing the name->id lookup */\n    OS_Timer_LogFmt(\"CALL: OS_ObjectIdFindByName(type=OS_OBJECT_TYPE_OS_TIMECB, name=\", namebuf, \")\");\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    /* Log result of the lookup, including returned id value when available */\n    char rvalbuf[512];\n    (void)snprintf(rvalbuf, sizeof(rvalbuf), \"RETURN: OS_TimerGetIdByName -> code=%ld, timer_id=%p (after lookup)\", (long)return_code, (void *)timer_id);\n    OS_Timer_LogAppend(rvalbuf);\n\n    OS_Timer_LogAppend(\"EXIT: OS_TimerGetIdByName completed\");\n\n    return return_code;\n}\n"
}