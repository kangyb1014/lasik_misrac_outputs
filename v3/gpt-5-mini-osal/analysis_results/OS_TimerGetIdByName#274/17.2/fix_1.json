{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *stage, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2746.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tmres = localtime_r(&t, &tm_buf);\n    if (tmres == NULL)\n    {\n        fprintf(f, \"[unknown-time] \");\n    }\n    else\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                tmres->tm_year + 1900,\n                tmres->tm_mon + 1,\n                tmres->tm_mday,\n                tmres->tm_hour,\n                tmres->tm_min,\n                tmres->tm_sec);\n    }\n\n    fprintf(f, \"PID=%ld STAGE=%s: \", (long)getpid(), stage);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Log entry and parameter pointers (do NOT dereference timer_name here) */\n    probe_log(\"ENTRY\", \"timer_id_ptr=%p timer_name_ptr=%p\", (void *)timer_id, (const void *)timer_name);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    probe_log(\"AFTER_CHECKS\", \"timer_id_ptr=%p timer_name_ptr=%p\", (void *)timer_id, (const void *)timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    {\n        /* Capture the task id used to determine the object type */\n        osal_id_t task_id = OS_TaskGetId_Impl();\n        probe_log(\"TASK_ID_OBTAINED\", \"task_id=%llu\", (unsigned long long)task_id);\n\n        objtype = OS_ObjectIdToType_Impl(task_id);\n        probe_log(\"OBJTYPE_RESOLVED\", \"task_id=%llu objtype=%d\", (unsigned long long)task_id, (int)objtype);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log(\"RETURN_EARLY\", \"objtype==OS_OBJECT_TYPE_OS_TIMEBASE -> return=%d\", (int)OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    probe_log(\"LOOKUP_START\", \"object_type=%d name_ptr=%p\", (int)OS_OBJECT_TYPE_OS_TIMECB, (const void *)timer_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    /* Log the result and, if safe, the returned id value */\n    if (timer_id != NULL)\n    {\n        probe_log(\"LOOKUP_DONE\", \"return_code=%d timer_id=%llu\", (int)return_code, (unsigned long long)(*timer_id));\n    }\n    else\n    {\n        probe_log(\"LOOKUP_DONE\", \"return_code=%d timer_id_ptr=NULL\", (int)return_code);\n    }\n\n    probe_log(\"EXIT\", \"return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c: In function 'probe_log':\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:482:15: error: storage size of 'tm_buf' isn't known\n  482 |     struct tm tm_buf;\n      |               ^~~~~~\nIn file included from /tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:1:\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:491:22: error: invalid use of undefined type 'struct tm'\n  491 |                 tmres->tm_year + 1900,\n      |                      ^~\n/tmp/tmpgu2ko793/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:492:22: error: invalid use of undefined type 'struct tm'\n  492 |                 tmres->tm_mon + 1,\n      |                      ^~\n/tmp/tmpgu2ko793/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:493:22: error: invalid use of undefined type 'struct tm'\n  493 |                 tmres->tm_mday,\n      |                      ^~\n/tmp/tmpgu2ko793/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:494:22: error: invalid use of undefined type 'struct tm'\n  494 |                 tmres->tm_hour,\n      |                      ^~\n/tmp/tmpgu2ko793/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:495:22: error: invalid use of undefined type 'struct tm'\n  495 |                 tmres->tm_min,\n      |                      ^~\n/tmp/tmpgu2ko793/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:496:22: error: invalid use of undefined type 'struct tm'\n  496 |                 tmres->tm_sec);\n      |                      ^~\n/tmp/tmpgu2ko793/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpgu2ko793/src/src/os/shared/src/osapi-time.c:503:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  503 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/__/__/os/shared/src/osapi-time.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4407: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdarg.h>\n#include <unistd.h>\n\nstatic void probe_log(const char *stage, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2746.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tmres = localtime_r(&t, &tm_buf);\n    if (tmres == NULL)\n    {\n        fprintf(f, \"[unknown-time] \");\n    }\n    else\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                tmres->tm_year + 1900,\n                tmres->tm_mon + 1,\n                tmres->tm_mday,\n                tmres->tm_hour,\n                tmres->tm_min,\n                tmres->tm_sec);\n    }\n\n    fprintf(f, \"PID=%ld STAGE=%s: \", (long)getpid(), stage);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Log entry and parameter pointers (do NOT dereference timer_name here) */\n    probe_log(\"ENTRY\", \"timer_id_ptr=%p timer_name_ptr=%p\", (void *)timer_id, (const void *)timer_name);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    probe_log(\"AFTER_CHECKS\", \"timer_id_ptr=%p timer_name_ptr=%p\", (void *)timer_id, (const void *)timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    {\n        /* Capture the task id used to determine the object type */\n        osal_id_t task_id = OS_TaskGetId_Impl();\n        probe_log(\"TASK_ID_OBTAINED\", \"task_id=%llu\", (unsigned long long)task_id);\n\n        objtype = OS_ObjectIdToType_Impl(task_id);\n        probe_log(\"OBJTYPE_RESOLVED\", \"task_id=%llu objtype=%d\", (unsigned long long)task_id, (int)objtype);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log(\"RETURN_EARLY\", \"objtype==OS_OBJECT_TYPE_OS_TIMEBASE -> return=%d\", (int)OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    probe_log(\"LOOKUP_START\", \"object_type=%d name_ptr=%p\", (int)OS_OBJECT_TYPE_OS_TIMECB, (const void *)timer_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    /* Log the result and, if safe, the returned id value */\n    if (timer_id != NULL)\n    {\n        probe_log(\"LOOKUP_DONE\", \"return_code=%d timer_id=%llu\", (int)return_code, (unsigned long long)(*timer_id));\n    }\n    else\n    {\n        probe_log(\"LOOKUP_DONE\", \"return_code=%d timer_id_ptr=NULL\", (int)return_code);\n    }\n\n    probe_log(\"EXIT\", \"return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "I added the necessary standard headers: <time.h> to define time_t and struct tm (and localtime_r), <stdarg.h> to define va_list and the va_start/vafamily functions, <stdio.h> for FILE, fprintf and vfprintf, and <unistd.h> for getpid. These resolves the 'storage size of struct tm isn't known' and the varargs type/prototype mismatch so the code compiles while preserving the original logic."
}