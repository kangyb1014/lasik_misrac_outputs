{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when the OS is not initialized. If OS_DEBUG is implemented in terms of OS_printf (e.g. OS_DEBUG -> OS_printf) this produces an indirect recursive call (OS_printf -> OS_DEBUG -> OS_printf). Another possible indirect recursion is via the normal path: OS_printf -> OS_ConsoleWrite -> OS_ConsoleOutput_Impl (or other console backend) -> OS_printf, if the console backend uses OS_printf to emit output. In either of these implementation cases OS_printf would indirectly call itself, violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2746.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetIdByName:\n```c\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe logging helper - appends a timestamped message to /tmp/logs/2746.txt */\nstatic void probe_log(const char *stage, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2746.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tmres = localtime_r(&t, &tm_buf);\n    if (tmres == NULL)\n    {\n        fprintf(f, \"[unknown-time] \");\n    }\n    else\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                tmres->tm_year + 1900,\n                tmres->tm_mon + 1,\n                tmres->tm_mday,\n                tmres->tm_hour,\n                tmres->tm_min,\n                tmres->tm_sec);\n    }\n\n    fprintf(f, \"PID=%ld STAGE=%s: \", (long)getpid(), stage);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Log entry and parameter pointers (do NOT dereference timer_name here) */\n    probe_log(\"ENTRY\", \"timer_id_ptr=%p timer_name_ptr=%p\", (void *)timer_id, (const void *)timer_name);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    probe_log(\"AFTER_CHECKS\", \"timer_id_ptr=%p timer_name_ptr=%p\", (void *)timer_id, (const void *)timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    {\n        /* Capture the task id used to determine the object type */\n        osal_id_t task_id = OS_TaskGetId_Impl();\n        probe_log(\"TASK_ID_OBTAINED\", \"task_id=%llu\", (unsigned long long)task_id);\n\n        objtype = OS_ObjectIdToType_Impl(task_id);\n        probe_log(\"OBJTYPE_RESOLVED\", \"task_id=%llu objtype=%d\", (unsigned long long)task_id, (int)objtype);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log(\"RETURN_EARLY\", \"objtype==OS_OBJECT_TYPE_OS_TIMEBASE -> return=%d\", (int)OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    probe_log(\"LOOKUP_START\", \"object_type=%d name_ptr=%p\", (int)OS_OBJECT_TYPE_OS_TIMECB, (const void *)timer_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    /* Log the result and, if safe, the returned id value */\n    if (timer_id != NULL)\n    {\n        probe_log(\"LOOKUP_DONE\", \"return_code=%d timer_id=%llu\", (int)return_code, (unsigned long long)(*timer_id));\n    }\n    else\n    {\n        probe_log(\"LOOKUP_DONE\", \"return_code=%d timer_id_ptr=NULL\", (int)return_code);\n    }\n\n    probe_log(\"EXIT\", \"return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}