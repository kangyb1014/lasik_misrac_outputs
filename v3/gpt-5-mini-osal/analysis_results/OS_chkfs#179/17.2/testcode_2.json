{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. UT_ExecuteBasicHandler can indirectly call itself if the DefaultHandler argument is (or ultimately resolves to) UT_ExecuteBasicHandler. The function registers DefaultHandler as the final handler when none exists and then calls UT_DefaultStubImpl, which invokes the registered handler. If DefaultHandler == UT_ExecuteBasicHandler (or the call chain from UT_DefaultStubImpl leads back to UT_ExecuteBasicHandler), this produces indirect recursion and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1796.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chkfs:\n```c\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: append-only log to /tmp/logs/1796.txt */\nstatic void OS_chkfs_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1796.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for better traceability */\n    time_t t = time(NULL);\n    if (t != (time_t)(-1))\n    {\n        struct tm *tm = localtime(&t);\n        if (tm != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and input state */\n    OS_chkfs_log(\"ENTER: OS_chkfs(name=%p, repair=%d)\", (const void *)name, (int)repair);\n    if (name != NULL)\n    {\n        /* Be careful printing long pathnames; truncate for safety in logs */\n        char buf[256];\n        size_t i;\n        for (i = 0; i + 1 < sizeof(buf) && name[i] != '\\0'; ++i)\n        {\n            buf[i] = name[i];\n        }\n        buf[i] = '\\0';\n        OS_chkfs_log(\"  param: name_str=\\\"%s\\\"\", buf);\n    }\n    else\n    {\n        OS_chkfs_log(\"  param: name_str=(null)\");\n    }\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_chkfs_log(\"  calling: OS_ObjectIdGetBySearch(mode=%d, type=%d, finder=%p, arg=%p)\",\n                 (int)OS_LOCK_MODE_REFCOUNT, (int)LOCAL_OBJID_TYPE, (const void *)OS_FileSys_FindVirtMountPoint,\n                 (const void *)name);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    OS_chkfs_log(\"  returned: OS_ObjectIdGetBySearch -> return_code=%d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token address and size to help trace which object was acquired */\n        OS_chkfs_log(\"  token acquired: token_ptr=%p, token_size=%zu\", (void *)&token, sizeof(token));\n\n        OS_chkfs_log(\"  calling: OS_FileSysCheckVolume_Impl(token_ptr=%p, repair=%d)\", (void *)&token, (int)repair);\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n        OS_chkfs_log(\"  returned: OS_FileSysCheckVolume_Impl -> return_code=%d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_chkfs_log(\"  action: OS_ObjectIdRelease(token_ptr=%p) called\", (void *)&token);\n    }\n    else\n    {\n        OS_chkfs_log(\"  info: skipping check (ObjectIdGetBySearch failed)\");\n    }\n\n    OS_chkfs_log(\"EXIT: OS_chkfs -> return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}