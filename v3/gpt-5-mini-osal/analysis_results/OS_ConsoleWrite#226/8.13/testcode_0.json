{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_ConsoleWakeup_Impl is declared to take a non-const pointer (e.g. void OS_ConsoleWakeup_Impl(OS_object_token_t *token)) but does not modify the pointed-to token, then the parameter should be declared as const OS_object_token_t * and this call constitutes (or reveals) a Rule 8.13 violation. In other words, if the implementation does not alter *token, the missing const on the function parameter violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleWrite as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleWrite:\n```c\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleWrite code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helpers for logging control flow and state to /tmp/logs/2263.txt */\nstatic void OS_ConsoleWrite_LogToken(const OS_object_token_t *token, const char *label)\n{\n    FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log basic token info and raw bytes to help determine if the implementation\n     * might mutate it or to show what is being passed to OS_ConsoleWakeup_Impl. */\n    fprintf(f, \"[TOKEN] %s: token_ptr=%p sizeof(token)=%zu\\n\", label, (const void *)token, sizeof *token);\n\n    /* Print raw bytes of the token to capture content/state at call time. */\n    {\n        const unsigned char *p = (const unsigned char *)token;\n        size_t i;\n        fprintf(f, \"[TOKEN] %s: bytes=\", label);\n        for (i = 0u; i < sizeof *token; ++i)\n        {\n            fprintf(f, \"%02X\", (unsigned)p[i]);\n            if (i + 1u < sizeof *token)\n            {\n                fprintf(f, \" \");\n            }\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic void OS_ConsoleWrite_LogConsoleState(const char *stage, OS_console_internal_record_t *console, size_t PendingWritePos)\n{\n    FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log key fields that determine control flow and buffer state. */\n    fprintf(f, \"[CONSOLE] %s: console_ptr=%p IsAsync=%d device_name='%s' WritePos=%zu PendingWritePos=%zu OverflowEvents=%u\\n\",\n            stage,\n            (void *)console,\n            (console != NULL) ? (int)console->IsAsync : 0,\n            (console != NULL) ? console->device_name : \"(null)\",\n            (console != NULL) ? console->WritePos : (size_t)0,\n            PendingWritePos,\n            (unsigned)((console != NULL) ? console->OverflowEvents : 0u));\n\n    fclose(f);\n}\n\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Log after obtaining the console object and token */\n        OS_ConsoleWrite_LogToken(&token, \"after-get-by-id\");\n        OS_ConsoleWrite_LogConsoleState(\"after-get-by-id\", console, 0u);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            /* Log before copying out the device name */\n            OS_ConsoleWrite_LogConsoleState(\"before-copyout-device-name\", console, PendingWritePos);\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n            /* Log after the copyout attempt */\n            OS_ConsoleWrite_LogConsoleState(\"after-copyout-device-name\", console, PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            /* Log before copying out the user string */\n            OS_ConsoleWrite_LogConsoleState(\"before-copyout-str\", console, PendingWritePos);\n            OS_ConsoleWrite_LogToken(&token, \"before-copyout-str\");\n\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n\n            /* Log after copying out the user string */\n            OS_ConsoleWrite_LogConsoleState(\"after-copyout-str\", console, PendingWritePos);\n            OS_ConsoleWrite_LogToken(&token, \"after-copyout-str\");\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n            OS_ConsoleWrite_LogConsoleState(\"write-success-before-update\", console, PendingWritePos);\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n            OS_ConsoleWrite_LogConsoleState(\"write-failure-overflow\", console, PendingWritePos);\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWrite_LogToken(&token, \"before-wakeup-impl\");\n            OS_ConsoleWrite_LogConsoleState(\"before-wakeup-impl\", console, PendingWritePos);\n\n            /* Record that we are calling the wakeup implementation with a non-const pointer. */\n            {\n                FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n                if (f != NULL)\n                {\n                    fprintf(f, \"[CALL] OS_ConsoleWakeup_Impl called with token_ptr=%p (potential Rule 8.13 area)\\n\", (void *)&token);\n                    fclose(f);\n                }\n            }\n\n            OS_ConsoleWakeup_Impl(&token);\n\n            /* Log token after calling wakeup impl to detect any mutation */\n            OS_ConsoleWrite_LogToken(&token, \"after-wakeup-impl\");\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleWrite_LogToken(&token, \"before-output-impl\");\n            OS_ConsoleWrite_LogConsoleState(\"before-output-impl\", console, PendingWritePos);\n\n            OS_ConsoleOutput_Impl(&token);\n\n            OS_ConsoleWrite_LogToken(&token, \"after-output-impl\");\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Final log indicating exit from successful branch */\n        {\n            FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"[EXIT] OS_ConsoleWrite: console_id=%u return_code=%d\\n\", (unsigned)console_id, (int)return_code);\n                fclose(f);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}