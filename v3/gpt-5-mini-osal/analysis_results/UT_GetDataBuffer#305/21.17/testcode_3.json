{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen AllocateCopy is true, the code calls memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize) after malloc(BufferSize). While the destination is allocated to BufferSize, there is no check that the source object pointed to by DataBuffer is at least BufferSize bytes long. If the caller passes a DataBuffer that is smaller than BufferSize (for example a 4-byte buffer but BufferSize==8), memcpy will read beyond the bounds of the source, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3059.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <time.h>\n\n/* Probe logging helper. Keeps the original logic untouched but records\n   the control flow and key state to /tmp/logs/3059.txt for reproducing\n   and diagnosing the reported violation scenario. */\nstatic void UT_LogProbe(uintptr_t FuncKey_val,\n                        void *StubPtr_val,\n                        void **DataBuffer_param,\n                        size_t *MaxSize_param,\n                        size_t *Position_param,\n                        void *ResultDataBuffer_val,\n                        size_t ResultMaxSize_val,\n                        size_t ResultPosition_val)\n{\n    FILE *f = fopen(\"/tmp/logs/3059.txt\", \"a\");\n    if (!f)\n    {\n        /* Try to create the directory and reopen. If that fails, give up silently. */\n        (void)mkdir(\"/tmp/logs\", 0700);\n        f = fopen(\"/tmp/logs/3059.txt\", \"a\");\n    }\n    if (!f)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    char tstr[64] = {0};\n    if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n    {\n        (void)strftime(tstr, sizeof(tstr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n    }\n\n    fprintf(f, \"[%s] UT_GetDataBuffer probe\\n\", tstr[0] ? tstr : \"(no-time)\");\n    fprintf(f, \"  FuncKey (raw) = 0x%\" PRIxPTR \"\\n\", FuncKey_val);\n    fprintf(f, \"  StubPtr (addr) = %p\\n\", StubPtr_val);\n    fprintf(f, \"  DataBuffer param (addr) = %p\\n\", (void *)DataBuffer_param);\n    fprintf(f, \"  MaxSize param (addr) = %p\\n\", (void *)MaxSize_param);\n    fprintf(f, \"  Position param (addr) = %p\\n\", (void *)Position_param);\n\n    if (StubPtr_val == NULL)\n    {\n        fprintf(f, \"  StubPtr is NULL -> ResultDataBuffer=NULL, ResultMaxSize=0, ResultPosition=0\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  ResultDataBuffer (addr) = %p\\n\", ResultDataBuffer_val);\n        fprintf(f, \"  ResultMaxSize = %zu\\n\", ResultMaxSize_val);\n        fprintf(f, \"  ResultPosition = %zu\\n\", ResultPosition_val);\n    }\n\n    /* What will be written to out-parameters (if non-NULL) */\n    if (DataBuffer_param != NULL)\n    {\n        fprintf(f, \"  *DataBuffer will be set to %p\\n\", ResultDataBuffer_val);\n    }\n    else\n    {\n        fprintf(f, \"  DataBuffer param is NULL -> no write\\n\");\n    }\n    if (MaxSize_param != NULL)\n    {\n        fprintf(f, \"  *MaxSize will be set to %zu\\n\", ResultMaxSize_val);\n    }\n    else\n    {\n        fprintf(f, \"  MaxSize param is NULL -> no write\\n\");\n    }\n    if (Position_param != NULL)\n    {\n        fprintf(f, \"  *Position will be set to %zu\\n\", ResultPosition_val);\n    }\n    else\n    {\n        fprintf(f, \"  Position param is NULL -> no write\\n\");\n    }\n\n    fprintf(f, \"--- end probe ---\\n\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/* Original function with inserted probes. */\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Insert probe AFTER the original decision logic so that the logged\n       values reflect exactly what will be returned to the caller. */\n    UT_LogProbe((uintptr_t)FuncKey,\n                (void *)StubPtr,\n                DataBuffer,\n                MaxSize,\n                Position,\n                ResultDataBuffer,\n                ResultMaxSize,\n                ResultPosition);\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n"
}