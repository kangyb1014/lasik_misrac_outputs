{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe out-parameter DataBuffer is declared as void ** and receives ResultDataBuffer (void *). The function only provides a pointer to data and does not modify the pointee through that pointer, so the pointed-to type should be const-qualified (e.g. const void **DataBuffer or const void * *). Therefore the code fails to qualify the pointee as const and violates MISRA C 2023 Rule 8.13. Suggested fix: change the parameter to const void **DataBuffer (and ResultDataBuffer to const void *) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3053.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper - writes a line to /tmp/logs/3053.txt with relevant state. */\nstatic void UT_LogProbe(const char *stage,\n                        UT_EntryKey_t FuncKey,\n                        UT_StubTableEntry_t *StubPtr,\n                        void *ResultDataBuffer,\n                        size_t ResultMaxSize,\n                        size_t ResultPosition,\n                        void **DataBuffer,\n                        size_t *MaxSize,\n                        size_t *Position)\n{\n    FILE *f = fopen(\"/tmp/logs/3053.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[UT_GetDataBuffer] %s\\n\", stage);\n    fprintf(f, \"  FuncKey=%lu\\n\", (unsigned long)FuncKey);\n    fprintf(f, \"  StubPtr=%p\\n\", (void *)StubPtr);\n    fprintf(f, \"  ResultDataBuffer=%p\\n\", (void *)ResultDataBuffer);\n    fprintf(f, \"  ResultMaxSize=%zu\\n\", ResultMaxSize);\n    fprintf(f, \"  ResultPosition=%zu\\n\", ResultPosition);\n    fprintf(f, \"  DataBuffer_ptr=%p\\n\", (void *)DataBuffer);\n    fprintf(f, \"  MaxSize_ptr=%p\\n\", (void *)MaxSize);\n    fprintf(f, \"  Position_ptr=%p\\n\", (void *)Position);\n    fprintf(f, \"---\\n\");\n\n    fclose(f);\n}\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    /* Log entry with incoming pointers */\n    UT_LogProbe(\"entry (before lookup)\", FuncKey, NULL, NULL, 0u, 0u, DataBuffer, MaxSize, Position);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Log state after resolving the stub entry and result values */\n    UT_LogProbe(\"after lookup (before assignments)\", FuncKey, StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition, DataBuffer, MaxSize, Position);\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n        /* Log the write to the out-parameter */\n        UT_LogProbe(\"wrote DataBuffer\", FuncKey, StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition, DataBuffer, MaxSize, Position);\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n        UT_LogProbe(\"wrote MaxSize\", FuncKey, StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition, DataBuffer, MaxSize, Position);\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n        UT_LogProbe(\"wrote Position\", FuncKey, StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition, DataBuffer, MaxSize, Position);\n    }\n\n    /* Final state/log line */\n    UT_LogProbe(\"exit\", FuncKey, StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition, DataBuffer, MaxSize, Position);\n}\n"
}