{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe output parameter DataBuffer is declared as void ** (pointer to void *). The function only stores and returns a pointer value (it does not modify the buffer contents), so the pointed-to type could and should be const-qualified (e.g. const void ** or better const void * * depending on intended semantics). By using void ** instead of a pointer-to-const type this loses const qualification and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3053.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    /* Log: entry and parameters (log pointer values only to avoid reading client memory) */\n    {\n        FILE *log = fopen(\"/tmp/logs/3053.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"UT_GetDataBuffer called: DataBuffer param addr=%p, MaxSize param addr=%p, Position param addr=%p\\n\",\n                          (void *)DataBuffer, (void *)MaxSize, (void *)Position);\n            (void)fclose(log);\n        }\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Log: whether a stub entry was found */\n    {\n        FILE *log = fopen(\"/tmp/logs/3053.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n            (void)fclose(log);\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Log: resolved results before writing back to caller */\n    {\n        FILE *log = fopen(\"/tmp/logs/3053.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"Resolved: ResultDataBuffer=%p, ResultMaxSize=%zu, ResultPosition=%zu\\n\",\n                          ResultDataBuffer, ResultMaxSize, ResultPosition);\n            (void)fclose(log);\n        }\n    }\n\n    if (DataBuffer != NULL)\n    {\n        /* Log: about to write the pointer value into the caller's pointer slot */\n        FILE *log = fopen(\"/tmp/logs/3053.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"Assigning ResultDataBuffer=%p into caller location *DataBuffer (address=%p)\\n\",\n                          ResultDataBuffer, (void *)DataBuffer);\n            (void)fclose(log);\n        }\n\n        *DataBuffer = ResultDataBuffer;\n\n        /* Log: write completed (do not read *DataBuffer to avoid potential UB if caller memory is uninitialized) */\n        log = fopen(\"/tmp/logs/3053.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"Assignment to *DataBuffer completed.\\n\");\n            (void)fclose(log);\n        }\n    }\n    if (MaxSize != NULL)\n    {\n        FILE *log = fopen(\"/tmp/logs/3053.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"Assigning ResultMaxSize=%zu into *MaxSize (address=%p)\\n\",\n                          ResultMaxSize, (void *)MaxSize);\n            (void)fclose(log);\n        }\n\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        FILE *log = fopen(\"/tmp/logs/3053.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"Assigning ResultPosition=%zu into *Position (address=%p)\\n\",\n                          ResultPosition, (void *)Position);\n            (void)fclose(log);\n        }\n\n        *Position = ResultPosition;\n    }\n\n    /* Final log: exit */\n    {\n        FILE *log = fopen(\"/tmp/logs/3053.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"UT_GetDataBuffer exiting\\n\\n\");\n            (void)fclose(log);\n        }\n    }\n}\n"
}