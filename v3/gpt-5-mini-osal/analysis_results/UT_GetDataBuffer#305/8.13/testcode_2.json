{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis assignment discards const qualification when the buffer is (or should be) const. If StubPtr->Data.Buff.BasePtr has type 'const void *' (or the data it points to is not intended to be modified), assigning it to ResultDataBuffer of type 'void *' removes const and therefore violates MISRA C 2023 Rule 8.13. (If, instead, BasePtr is declared as 'void *' and the data is legitimately mutable, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3053.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe/logger helper to capture control flow and state to /tmp/logs/3053.txt */\nstatic void UT_LogDataBufferProbe(UT_EntryKey_t FuncKey,\n                                 const void *stub_ptr,\n                                 const void *base_ptr,\n                                 void *result_data_buffer,\n                                 size_t result_max_size,\n                                 size_t result_position,\n                                 int data_buffer_out_set)\n{\n    const char *path = \"/tmp/logs/3053.txt\";\n    FILE *f = fopen(path, \"a\");\n\n    if (f == NULL)\n    {\n        /* Try to create directory if it does not exist, then try again. Ignore errors. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(path, \"a\");\n        if (f == NULL)\n        {\n            /* If we still can't open the file, give up silently to avoid altering logic. */\n            return;\n        }\n    }\n\n    /* Log values most useful to repro/discover const-discarding assignment:\n       - FuncKey (as pointer-sized value)\n       - StubPtr address (NULL or not)\n       - BasePtr (the source pointer that may be const-qualified)\n       - ResultDataBuffer (the variable that receives the assignment)\n       - sizes and position\n       - whether the caller's DataBuffer output pointer will be set\n    */\n    fprintf(f, \"UT_GetDataBuffer probe: FuncKey=%p, StubPtr=%p, BasePtr=%p, ResultDataBuffer=%p, ResultMaxSize=%zu, ResultPosition=%zu, DataBufferOutSet=%d\\n\",\n            (void *)(uintptr_t)FuncKey,\n            stub_ptr,\n            base_ptr,\n            result_data_buffer,\n            result_max_size,\n            result_position,\n            data_buffer_out_set);\n\n    fclose(f);\n}\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Log entry and StubPtr value */\n    UT_LogDataBufferProbe(FuncKey, (const void *)StubPtr, NULL, NULL, 0U, 0U, (DataBuffer != NULL) ? 1 : 0);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        /* Capture base pointer in a const-qualified temporary for logging to show potential discard */\n        const void *base_ptr_for_log = StubPtr->Data.Buff.BasePtr;\n\n        /* Original assignment (may discard const qualification depending on declaration of BasePtr) */\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n\n        /* Log the moment after assignment from StubPtr->Data.Buff.BasePtr to ResultDataBuffer */\n        UT_LogDataBufferProbe(FuncKey, (const void *)StubPtr, base_ptr_for_log, ResultDataBuffer, ResultMaxSize, ResultPosition, (DataBuffer != NULL) ? 1 : 0);\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n\n    /* Final state log to capture what was returned to the caller */\n    UT_LogDataBufferProbe(FuncKey,\n                          (const void *)StubPtr,\n                          (StubPtr != NULL) ? StubPtr->Data.Buff.BasePtr : NULL,\n                          ResultDataBuffer,\n                          ResultMaxSize,\n                          ResultPosition,\n                          (DataBuffer != NULL) ? 1 : 0);\n}\n"
}