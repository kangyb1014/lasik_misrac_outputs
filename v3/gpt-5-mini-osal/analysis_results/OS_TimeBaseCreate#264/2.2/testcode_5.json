{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment timebase->accuracy_usec = 0 in the else branch is redundant (dead) because OS_OBJECT_INIT performs a memset(ref,0,...), which already initializes accuracy_usec to zero. When external_sync != NULL this assignment is executed but removing it would not change program behavior, so it constitutes dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2642.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n/* Probe helper: append logs to /tmp/logs/2642.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list args;\n    FILE *f;\n    /* Ensure directory exists; ignore errors if it cannot be created. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2642.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    probe_log(\"OS_TimeBaseCreate ENTRY: timer_id=%p, timebase_name=%s, external_sync=%p\",\n              (void *)timer_id, timebase_name ? timebase_name : \"(null)\", (void *)external_sync);\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n    ** Check Parameters\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log(\"OS_TimeBaseCreate EXIT early: incorrect object state (called from a timebase). objtype=%d\", (int)objtype);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        /* Probe: read the field that is claimed to be zeroed by OS_OBJECT_INIT */\n        probe_log(\"After OS_OBJECT_INIT: timebase_record=%p, initial accuracy_usec=%lu\",\n                  (void *)timebase, (unsigned long)timebase->accuracy_usec);\n\n        timebase->external_sync = external_sync;\n        probe_log(\"Assigned external_sync: %p -> timebase->external_sync=%p\",\n                  (void *)external_sync, (void *)timebase->external_sync);\n\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n            probe_log(\"external_sync==NULL: set accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick = %lu\",\n                      (unsigned long)OS_SharedGlobalVars.MicroSecPerTick);\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n            probe_log(\"external_sync!=NULL: set accuracy_usec = 0 (after assignment), final accuracy_usec=%lu\",\n                      (unsigned long)timebase->accuracy_usec);\n        }\n\n        /* Also log the value seen immediately after assignments for comparison */\n        probe_log(\"Post-assign snapshot: timebase=%p, external_sync=%p, accuracy_usec=%lu\",\n                  (void *)timebase, (void *)timebase->external_sync, (unsigned long)timebase->accuracy_usec);\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n        probe_log(\"Called OS_TimeBaseCreate_Impl, return_code=%ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n        probe_log(\"After OS_ObjectIdFinalizeNew, return_code=%ld, timer_id_out=%p\",\n                  (long)return_code, (void *)timer_id);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdAllocateNew failed, return_code=%ld\", (long)return_code);\n    }\n\n    probe_log(\"OS_TimeBaseCreate EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}