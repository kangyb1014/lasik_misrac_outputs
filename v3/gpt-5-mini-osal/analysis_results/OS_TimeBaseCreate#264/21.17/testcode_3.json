{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro calls strncpy(ref->namefield, nameval, sizeof(ref->namefield)-1) without guaranteeing that the source (nameval) is at least that long or NUL-terminated within that length. strncpy may read up to the given length from the source pointer; if nameval points to a shorter object or lacks a NUL within (sizeof(ref->namefield)-1) bytes, strncpy will read beyond the source buffer bounds. In addition the macro does not explicitly write a terminating NUL, which can lead to later code treating the field as an unterminated string and causing further out-of-bounds accesses.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2649.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append to log file with timestamp-like markers. */\nstatic void OS_TimeBaseCreate_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2649.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/* Safe preview of a C string up to a fixed bound. This avoids unbounded reads\n * but will still reveal whether a NUL exists within the inspected bound. */\nstatic void OS_TimeBaseCreate_StringPreview(const char *label, const char *s, size_t max_preview)\n{\n    size_t i = 0;\n    if (s == NULL)\n    {\n        OS_TimeBaseCreate_ProbeLog(\"%s: NULL\", label);\n        return;\n    }\n\n    /* Find NUL within max_preview bytes without reading past max_preview. */\n    while (i < max_preview && s[i] != '\\0')\n    {\n        i++;\n    }\n\n    if (i < max_preview && s[i] == '\\0')\n    {\n        /* Safe to print the preview up to i characters */\n        char buf[256];\n        size_t copy_len = (i < sizeof(buf)-1) ? i : (sizeof(buf)-1);\n        if (copy_len > 0)\n        {\n            memcpy(buf, s, copy_len);\n        }\n        buf[copy_len] = '\\0';\n        OS_TimeBaseCreate_ProbeLog(\"%s: preview=\\\"%s\\\" len=%zu (NUL within %zu)\", label, buf, i, max_preview);\n    }\n    else\n    {\n        /* NUL not found within bound */\n        char buf[256];\n        size_t copy_len = (max_preview < sizeof(buf)-1) ? max_preview : (sizeof(buf)-1);\n        if (copy_len > 0)\n        {\n            memcpy(buf, s, copy_len);\n        }\n        buf[copy_len] = '\\0';\n        OS_TimeBaseCreate_ProbeLog(\"%s: preview=\\\"%s\\\" (no NUL within %zu bytes)\", label, buf, max_preview);\n    }\n}\n\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters (pointer values and a safe preview of the name). */\n    OS_TimeBaseCreate_ProbeLog(\"OS_TimeBaseCreate ENTRY: timer_id=%p, timebase_name=%p, external_sync=%p\", (void *)timer_id, (void *)timebase_name, (void *)external_sync);\n    OS_TimeBaseCreate_StringPreview(\"timebase_name\", timebase_name, 128);\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n    ** Check Parameters\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /* Log after API parameter checks. */\n    OS_TimeBaseCreate_ProbeLog(\"After parameter checks\");\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimeBaseCreate_ProbeLog(\"Context object type: %d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBaseCreate_ProbeLog(\"Early return: incorrect object state (call from timebase callback)\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_TimeBaseCreate_ProbeLog(\"Calling OS_ObjectIdAllocateNew for type OS_OBJECT_TYPE_OS_TIMEBASE (name preview above)\");\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    OS_TimeBaseCreate_ProbeLog(\"OS_ObjectIdAllocateNew returned %d, token=%p\", (int)return_code, (void *)(uintptr_t)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the timebase pointer before initialization */\n        OS_TimeBaseCreate_ProbeLog(\"Allocated timebase record at %p (token %p)\", (void *)timebase, (void *)(uintptr_t)token);\n\n        /* Reset the table entry and save the name */\n        OS_TimeBaseCreate_ProbeLog(\"Calling OS_OBJECT_INIT(token=%p, timebase=%p, name=%p)\", (void *)(uintptr_t)token, (void *)timebase, (void *)timebase_name);\n\n        /* Provide a preview of the name immediately before the macro that may copy it. */\n        /* This helps capture whether the source contains a NUL within a reasonable bound. */\n        OS_TimeBaseCreate_StringPreview(\"timebase_name_before_init\", timebase_name, 256);\n\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        /* After initialization, log a note. We cannot safely inspect internal namefield here without\n         * knowing its layout, but we can note that initialization completed. */\n        OS_TimeBaseCreate_ProbeLog(\"OS_OBJECT_INIT completed for token=%p\", (void *)(uintptr_t)token);\n\n        timebase->external_sync = external_sync;\n        OS_TimeBaseCreate_ProbeLog(\"Set external_sync=%p on timebase %p\", (void *)external_sync, (void *)timebase);\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n            OS_TimeBaseCreate_ProbeLog(\"external_sync is NULL -> accuracy_usec set to %u\", (unsigned)timebase->accuracy_usec);\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n            OS_TimeBaseCreate_ProbeLog(\"external_sync provided -> accuracy_usec set to 0\");\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        OS_TimeBaseCreate_ProbeLog(\"Calling OS_TimeBaseCreate_Impl for token=%p\", (void *)(uintptr_t)(&token));\n        return_code = OS_TimeBaseCreate_Impl(&token);\n        OS_TimeBaseCreate_ProbeLog(\"OS_TimeBaseCreate_Impl returned %d\", (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n        OS_TimeBaseCreate_ProbeLog(\"OS_ObjectIdFinalizeNew returned %d, timer_id=%p\", (int)return_code, (void *)timer_id);\n    }\n    else\n    {\n        OS_TimeBaseCreate_ProbeLog(\"OS_ObjectIdAllocateNew failed, returning %d\", (int)return_code);\n    }\n\n    OS_TimeBaseCreate_ProbeLog(\"OS_TimeBaseCreate EXIT with return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}