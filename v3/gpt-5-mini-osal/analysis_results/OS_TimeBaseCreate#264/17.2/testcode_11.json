{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_SharedGlobalVars.EventHandler is set to a handler that calls back into the OS object-allocation APIs (for example, the handler calls OS_TimeBaseCreate which itself calls OS_ObjectIdAllocateNew), the call chain becomes: OS_ObjectIdAllocateNew -> OS_NotifyEvent -> EventHandler -> OS_TimeBaseCreate -> OS_ObjectIdAllocateNew. This is an indirect recursive call and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2646.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe helper: append formatted log entries to /tmp/logs/2646.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2646.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and key parameters */\n    probe_logf(\"ENTER: OS_TimeBaseCreate name=%s timer_id_ptr=%p external_sync_ptr=%p\", (timebase_name != NULL) ? timebase_name : \"(null)\", (void *)timer_id, (void *)external_sync);\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n    ** Check Parameters\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    probe_logf(\"OS_ObjectIdToType_Impl returned objtype=%u\", (unsigned) objtype);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_logf(\"EXIT: OS_TimeBaseCreate disallowed from timebase context -> return=%d\", (int) OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    probe_logf(\"About to call OS_ObjectIdAllocateNew for OS_OBJECT_TYPE_OS_TIMEBASE (name=%s)\", (timebase_name != NULL) ? timebase_name : \"(null)\");\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    probe_logf(\"OS_ObjectIdAllocateNew returned %d\", (int) return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Try to print the token in a portable manner: cast via uintptr_t. */\n        probe_logf(\"Allocated token (raw) = 0x%llx\", (unsigned long long)(uintptr_t) token);\n\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n        probe_logf(\"OS_OBJECT_TABLE_GET returned timebase_ptr=%p\", (void *) timebase);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n            probe_logf(\"external_sync=NULL: accuracy_usec=%u\", (unsigned) timebase->accuracy_usec);\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n            probe_logf(\"external_sync!=NULL: external_sync_ptr=%p accuracy_usec=0\", (void *) external_sync);\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        probe_logf(\"Calling OS_TimeBaseCreate_Impl for token=0x%llx\", (unsigned long long)(uintptr_t) token);\n        return_code = OS_TimeBaseCreate_Impl(&token);\n        probe_logf(\"OS_TimeBaseCreate_Impl returned %d\", (int) return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n        probe_logf(\"OS_ObjectIdFinalizeNew returned %d; timer_id_ptr=%p\", (int) return_code, (void *) timer_id);\n        if ((return_code == OS_SUCCESS) && (timer_id != NULL))\n        {\n            probe_logf(\"Final timer id (raw) = 0x%llx\", (unsigned long long)(uintptr_t) *timer_id);\n        }\n    }\n    else\n    {\n        probe_logf(\"OS_ObjectIdAllocateNew failed -> skipping object init/finalize; return=%d\", (int) return_code);\n    }\n\n    probe_logf(\"EXIT: OS_TimeBaseCreate returning %d\", (int) return_code);\n    return return_code;\n}\n"
}