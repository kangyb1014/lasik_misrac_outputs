{
  "user_message": "Target function code is:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_TimeBaseCreate': {'callees': ['OS_printf', 'OS_ObjectIdToType_Impl', 'OS_TaskGetId_Impl', 'OS_ObjectIdAllocateNew', 'OS_ObjectIndexFromToken', 'OS_ObjectIdGlobalFromToken', 'OS_TimeBaseCreate_Impl', 'OS_ObjectIdFinalizeNew', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': ['OS_TimerCreate']}, 'OS_printf': {'callees': ['OS_printf', 'OS_ConsoleWrite', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteVaHandler'], 'callers': ['OS_BinSemCreate', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_RegisterEventHandler', 'OS_CondVarCreate', 'OS_CondVarTimedWait', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CountSemCreate', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_GetErrorName', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_stat', 'OS_cp', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_CloseFileByName', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_rmfs', 'OS_mount', 'OS_unmount', 'OS_FileSysStatVolume', 'OS_chkfs', 'OS_FS_GetPhysDriveName', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_HeapGetInfo', 'OS_GetResourceName', 'OS_ObjectIdToArrayIndex', 'OS_ModuleLoad', 'OS_ModuleInfo', 'OS_SymbolLookup', 'OS_ModuleSymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_NetworkGetHostName', 'OS_printf', 'OS_QueueCreate', 'OS_QueueGet', 'OS_QueuePut', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_SelectSingle', 'OS_SelectFdZero', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_ShellOutputToFile', 'OS_SocketOpen', 'OS_SocketBindAddress', 'OS_SocketAccept', 'OS_SocketConnect', 'OS_SocketShutdown', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketAddrInit', 'OS_SocketAddrToString', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrSetPort', 'OS_TaskCreate', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskFindIdBySystemData', 'OS_TimeBaseCreate', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseGetFreeRun', 'OS_DoTimerAdd', 'OS_TimerCreate', 'OS_TimerGetIdByName', 'OS_TimerGetInfo']}, 'OS_ObjectIdToType_Impl': {'callees': [], 'callers': ['OS_IdentifyObject', 'OS_GetResourceName', 'OS_ObjectIdToArrayIndex', 'OS_TimeBaseCreate', 'OS_TimeBaseSet', 'OS_TimeBaseDelete', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_DoTimerAdd', 'OS_TimerSet', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo']}, 'OS_TaskGetId_Impl': {'callees': [], 'callers': ['OS_Lock_Global', 'OS_TaskExit', 'OS_TaskGetId', 'OS_TaskInstallDeleteHandler', 'OS_TimeBaseCreate', 'OS_TimeBaseSet', 'OS_TimeBaseDelete', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_DoTimerAdd', 'OS_TimerSet', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo']}, 'OS_ObjectIdAllocateNew': {'callees': ['OS_ObjectIdTransactionInit', 'OS_ObjectIdFindNextMatch', 'OS_ObjectIdFindNextFree', 'OS_ObjectIdTransactionCancel', 'OS_NotifyEvent', 'OS_ObjectIdConvertToken', 'OS_ObjectIdFinalizeNew'], 'callers': ['OS_BinSemCreate', 'OS_CondVarCreate', 'OS_CountSemCreate', 'OS_DirectoryOpen', 'OS_OpenCreate', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_ModuleLoad', 'OS_MutSemCreate', 'OS_ConsoleAPI_Init', 'OS_QueueCreate', 'OS_SocketOpen', 'OS_SocketAccept', 'OS_TaskCreate', 'OS_TimeBaseCreate', 'OS_DoTimerAdd']}, 'OS_ObjectIndexFromToken': {'callees': [], 'callers': ['OS_BinSemCreate_Impl', 'OS_BinSemDelete_Impl', 'OS_BinSemGive_Impl', 'OS_BinSemFlush_Impl', 'OS_GenericBinSemTake_Impl', 'OS_BinSemGetInfo_Impl', 'OS_ConsoleWakeup_Impl', 'OS_ConsoleTask_Entry', 'OS_ConsoleCreate_Impl', 'OS_CondVarCreate_Impl', 'OS_CondVarDelete_Impl', 'OS_CondVarUnlock_Impl', 'OS_CondVarLock_Impl', 'OS_CondVarSignal_Impl', 'OS_CondVarBroadcast_Impl', 'OS_CondVarWait_Impl', 'OS_CondVarTimedWait_Impl', 'OS_CountSemCreate_Impl', 'OS_CountSemDelete_Impl', 'OS_CountSemGive_Impl', 'OS_CountSemTake_Impl', 'OS_CountSemTimedWait_Impl', 'OS_CountSemGetInfo_Impl', 'OS_FileSysStartVolume_Impl', 'OS_FileSysMountVolume_Impl', 'OS_FileSysStatVolume_Impl', 'OS_MutSemCreate_Impl', 'OS_MutSemDelete_Impl', 'OS_MutSemGive_Impl', 'OS_MutSemTake_Impl', 'OS_QueueCreate_Impl', 'OS_QueueDelete_Impl', 'OS_QueueGet_Impl', 'OS_QueuePut_Impl', 'OS_TaskCreate_Impl', 'OS_TaskDetach_Impl', 'OS_TaskMatch_Impl', 'OS_TaskDelete_Impl', 'OS_TaskSetPriority_Impl', 'OS_TaskIdMatchSystemData_Impl', 'OS_TimeBaseLock_Impl', 'OS_TimeBaseUnlock_Impl', 'OS_TimeBase_SigWaitImpl', 'OS_TimeBaseCreate_Impl', 'OS_TimeBaseSet_Impl', 'OS_TimeBaseDelete_Impl', 'OS_ConsoleOutput_Impl', 'OS_SelectSingle_Impl', 'OS_GenericClose_Impl', 'OS_GenericSeek_Impl', 'OS_GenericRead_Impl', 'OS_GenericWrite_Impl', 'OS_FileOpen_Impl', 'OS_DirOpen_Impl', 'OS_DirClose_Impl', 'OS_DirRead_Impl', 'OS_DirRewind_Impl', 'OS_ModuleLoad_Impl', 'OS_ModuleUnload_Impl', 'OS_ModuleSymbolLookup_Impl', 'OS_SetSocketDefaultFlags_Impl', 'OS_SocketOpen_Impl', 'OS_SocketBindAddress_Impl', 'OS_SocketListen_Impl', 'OS_SocketConnect_Impl', 'OS_SocketShutdown_Impl', 'OS_SocketAccept_Impl', 'OS_SocketRecvFrom_Impl', 'OS_SocketSendTo_Impl', 'OS_BinSemCreate', 'OS_BinSemGetInfo', 'OS_CondVarCreate', 'OS_CondVarGetInfo', 'OS_CountSemCreate', 'OS_CountSemGetInfo', 'OS_DirectoryOpen', 'OS_OpenCreate', 'OS_rename', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_CloseFileByName', 'OS_FileSys_FindVirtMountPoint', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_mount', 'OS_unmount', 'OS_FS_GetPhysDriveName', 'OS_TranslatePath', 'OS_ObjectIdFindNextMatch', 'OS_ObjectIdIteratorGetNext', 'OS_ModuleLoad', 'OS_ModuleUnload', 'OS_ModuleInfo', 'OS_ModuleSymbolLookup', 'OS_MutSemCreate', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_MutSemGetInfo', 'OS_ConsoleAPI_Init', 'OS_ConsoleWrite', 'OS_QueueCreate', 'OS_QueueGet', 'OS_QueuePut', 'OS_QueueGetInfo', 'OS_CreateSocketName', 'OS_SocketOpen', 'OS_SocketListen', 'OS_SocketBindAddress', 'OS_SocketAccept', 'OS_SocketConnect', 'OS_SocketShutdown', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketGetInfo', 'OS_TaskPrepare', 'OS_TaskCreate', 'OS_TaskDelete', 'OS_TaskSetPriority', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TimeBaseCreate', 'OS_TimeBaseSet', 'OS_TimeBaseGetInfo', 'OS_TimeBaseGetFreeRun', 'OS_TimeBase_CallbackThread', 'OS_DoTimerAdd', 'OS_TimerSet', 'OS_TimerDelete', 'OS_TimerGetInfo']}, 'OS_ObjectIdGlobalFromToken': {'callees': ['OS_GetBaseForObjectType'], 'callers': ['OS_BinSemCreate', 'OS_CondVarCreate', 'OS_CountSemCreate', 'OS_DirectoryOpen', 'OS_OpenCreate', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_ObjectIdConvertToken', 'OS_ObjectIdTransactionFinish', 'OS_GetResourceName', 'OS_ModuleLoad', 'OS_MutSemCreate', 'OS_ConsoleAPI_Init', 'OS_QueueCreate', 'OS_TaskCreate', 'OS_TimeBaseCreate', 'OS_DoTimerAdd']}, 'OS_TimeBaseCreate_Impl': {'callees': ['OS_ObjectIndexFromToken', 'OS_ObjectIdFromToken', 'OS_Posix_InternalTaskCreate_Impl', 'OS_ObjectIdIsValid', 'OS_ObjectIdToSerialNumber_Impl'], 'callers': ['OS_TimeBaseCreate']}, 'OS_ObjectIdFinalizeNew': {'callees': ['OS_ObjectIdTransactionFinish', 'OS_NotifyEvent'], 'callers': ['OS_BinSemCreate', 'OS_CondVarCreate', 'OS_CountSemCreate', 'OS_DirectoryOpen', 'OS_OpenCreate', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_ObjectIdAllocateNew', 'OS_ModuleLoad', 'OS_MutSemCreate', 'OS_ConsoleAPI_Init', 'OS_QueueCreate', 'OS_SocketOpen', 'OS_SocketAccept', 'OS_TaskCreate', 'OS_TimeBaseCreate', 'OS_DoTimerAdd']}, 'UT_Stub_RegisterReturnType': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry', 'UtAssert_Abort'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionString']}, 'UT_Stub_RegisterContextWithMetaData': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_ApplicationExit', 'OS_ApplicationShutdown', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_ForEachObject', 'OS_ForEachObjectOfType', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_printf', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet']}, 'UT_ExecuteBasicHandler': {'callees': ['UT_GetStubEntry', 'UT_SetHandlerFunction', 'UT_DefaultStubImpl'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_API_Teardown', 'OS_ApplicationExit', 'OS_ApplicationShutdown', 'OS_DeleteAllObjects', 'OS_IdleLoop', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_ForEachObject', 'OS_ForEachObjectOfType', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_printf_disable', 'OS_printf_enable', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskExit', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionNumber', 'OS_GetVersionString']}, 'UT_Stub_GetReturnValuePtr': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort', 'UtAssert_GetContext'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionString']}, 'OS_TimerCreate': {'callees': ['OS_printf', 'OS_TimeBaseCreate', 'OS_DoTimerAdd', 'OS_TimeBaseDelete', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA pointer should point to a const-qualified type whenever possible. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "OS_ObjectIdAllocateNew",
    "OS_ObjectIdFinalizeNew",
    "OS_OBJECT_INIT",
    "OS_OBJECT_TABLE_GET",
    "OS_timebase_internal_record_t",
    "OS_TimerSync_t",
    "OS_object_token_t",
    "osal_id_t",
    "OS_CHECK_APINAME",
    "OS_CHECK_POINTER",
    "OS_TimeBaseCreate_Impl",
    "OS_SharedGlobalVars"
  ],
  "explanation": "For checking the MISRA rule about preferring pointers to const, the analyzer needs the exact declarations/definitions of all functions, macros and types that involve pointer parameters or that store pointer values in objects used by OS_TimeBaseCreate. Specifically:\n\n- OS_ObjectIdAllocateNew: its prototype (parameter types) is needed to know whether the timebase_name argument is declared as const char * or as char * (i.e. whether passing a const char * discards const).\n\n- OS_ObjectIdFinalizeNew: its prototype is needed to determine whether the timer_id parameter is expected as a non-const osal_id_t * (an output) or could/should be const; also to see if any pointer constness is discarded when passing timer_id.\n\n- OS_OBJECT_INIT: macro definition is required because it is passed timebase_name (const char *) and may copy/store the name into the timebase record; if the macro expects a non-const char * this could discard const qualification.\n\n- OS_OBJECT_TABLE_GET: definition is required to know the exact return type (pointer type) for the table lookup; this determines whether the returned timebase pointer is const-qualified and whether assigning to its fields is legal with respect to const rules.\n\n- OS_timebase_internal_record_t: the struct definition is needed to know the types of members (e.g. external_sync, accuracy_usec, and any name fields). If name/member types are non-const while initialized from a const char *, that may be a const-discard violation.\n\n- OS_TimerSync_t: typedef of this type (likely a function-pointer type) is needed to determine whether external_sync should/needs to be const-qualified, and whether assigning it to the struct member respects constness.\n\n- OS_object_token_t: typedef/definition is needed to see how token is used and whether functions taking &token expect const or non-const pointer types.\n\n- osal_id_t: typedef is needed to know the type pointed to by timer_id (e.g. integer vs struct) and whether it should/should not be const for this API usage.\n\n- OS_CHECK_APINAME: macro definition is needed because it uses timebase_name; it may perform casts or pass the name to other APIs that expect non-const char *, which could discard const qualification.\n\n- OS_CHECK_POINTER: macro definition is needed to confirm how the timer_id pointer is used/checked; if the macro casts or passes the pointer to functions expecting non-const pointers that affects constness analysis.\n\n- OS_TimeBaseCreate_Impl: prototype is required to know the parameter type for &token (whether it takes a pointer-to-token as const or non-const) and whether any pointer constness is discarded by the OS-specific implementation call.\n\n- OS_SharedGlobalVars: declaration (type) is needed only to confirm MicroSecPerTick is a non-pointer scalar (not a pointer type) so assigning it to timebase->accuracy_usec does not implicate pointer constness.\n\nCollecting these symbols lets the analyzer determine whether any pointer-to-const is being passed to APIs or stored into non-const fields (or vice versa), and therefore whether the code discards const qualification or fails to const-qualify pointers where possible."
}