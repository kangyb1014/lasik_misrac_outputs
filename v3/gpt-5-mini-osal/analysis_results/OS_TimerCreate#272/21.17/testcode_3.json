{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_CHECK_APINAME(timebase_name) expands to OS_CHECK_STRING(...), which (in typical implementations) uses string.h routines such as strlen/strnlen/strncpy. If that helper uses an unbounded strlen (or otherwise reads until a NUL) then a non-terminated or too-long name will cause reads beyond the bounds. Example violation: the caller supplies a name buffer of exactly OS_MAX_API_NAME bytes filled with non-zero characters (no terminating '\\0'), or passes a NULL pointer and OS_CHECK_STRING does not first test for NULL; OS_CHECK_APINAME would invoke strlen(timebase_name) (or similar) and read past the object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2729.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helper: append log messages to /tmp/logs/2729.txt */\nstatic void OS_Probe_Log(const char *stage, const void *timer_id, const void *timer_name, const void *accuracy, const void *callback_ptr, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2729.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program flow. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] STAGE: %s\\n\", (long)t, stage);\n\n    if (timer_id != NULL)\n        fprintf(f, \"  timer_id ptr: %p\\n\", timer_id);\n    else\n        fprintf(f, \"  timer_id ptr: (NULL)\\n\");\n\n    if (timer_name != NULL)\n        fprintf(f, \"  timer_name ptr: %p\\n\", timer_name);\n    else\n        fprintf(f, \"  timer_name ptr: (NULL)\\n\");\n\n    if (accuracy != NULL)\n        fprintf(f, \"  accuracy ptr: %p\\n\", accuracy);\n    else\n        fprintf(f, \"  accuracy ptr: (NULL)\\n\");\n\n    if (callback_ptr != NULL)\n        fprintf(f, \"  callback_ptr: %p\\n\", callback_ptr);\n    else\n        fprintf(f, \"  callback_ptr: (NULL)\\n\");\n\n    fprintf(f, \"  return_code snapshot: %d\\n\", (int)return_code);\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Log entry and parameter pointer values. This helps reproduce the\n    ** scenario where timer_name is not NUL-terminated or points to a\n    ** short/invalid buffer. We intentionally only log pointer values\n    ** (not dereference timer_name) so as not to introduce additional\n    ** out-of-bounds reads in the probe.\n    */\n    OS_Probe_Log(\"entry\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_Probe_Log(\"before OS_CHECK_POINTER(timer_id)\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n    OS_CHECK_POINTER(timer_id);\n    OS_Probe_Log(\"after OS_CHECK_POINTER(timer_id)\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n\n    /* Log immediately before the API name check. If OS_CHECK_APINAME\n     * uses an unbounded strlen (or similar), a crash or memory access\n     * beyond bounds will occur during this macro. The log entry here\n     * provides a reproducible witness showing the pointer value and\n     * that the code reached the API name check. */\n    OS_Probe_Log(\"before OS_CHECK_APINAME(timer_name)\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n    OS_CHECK_APINAME(timer_name);\n    OS_Probe_Log(\"after OS_CHECK_APINAME(timer_name)\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n\n    OS_Probe_Log(\"before OS_CHECK_POINTER(accuracy)\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n    OS_CHECK_POINTER(accuracy);\n    OS_Probe_Log(\"after OS_CHECK_POINTER(accuracy)\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n\n    OS_Probe_Log(\"before OS_CHECK_POINTER(callback_ptr)\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n    OS_CHECK_POINTER(callback_ptr);\n    OS_Probe_Log(\"after OS_CHECK_POINTER(callback_ptr)\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    OS_Probe_Log(\"before OS_TimeBaseCreate\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    OS_Probe_Log(\"after OS_TimeBaseCreate\", timer_id, timer_name, accuracy, (const void *)callback_ptr, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    OS_Probe_Log(\"before OS_DoTimerAdd\", timer_id, timer_name, accuracy, (const void *)callback_ptr, 0);\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n    OS_Probe_Log(\"after OS_DoTimerAdd\", timer_id, timer_name, accuracy, (const void *)callback_ptr, return_code);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_Probe_Log(\"OS_DoTimerAdd failed, deleting timebase\", timer_id, timer_name, accuracy, (const void *)callback_ptr, return_code);\n        OS_TimeBaseDelete(timebase_ref_id);\n        OS_Probe_Log(\"deleted timebase\", timer_id, timer_name, accuracy, (const void *)callback_ptr, return_code);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        OS_Probe_Log(\"success, set accuracy\", timer_id, timer_name, accuracy, (const void *)callback_ptr, return_code);\n    }\n\n    return return_code;\n}\n"
}