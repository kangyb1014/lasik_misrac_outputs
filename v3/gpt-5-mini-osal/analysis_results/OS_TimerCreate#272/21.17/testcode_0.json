{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CHECK_APINAME expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...) which typically inspects the contents/length of timer_name using string.h functions. If that implementation uses functions such as strlen(timer_name) (or other unbounded string routines) then a caller-provided timer_name that is not NUL-terminated or is a buffer of size OS_MAX_API_NAME without the terminating NUL will cause strlen to read past the end of the object. This would result in out-of-bounds access and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2729.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probing/logging helpers. These write append-only logs to /tmp/logs/2729.txt\n * They avoid inspecting the contents of any caller-provided strings to not\n * introduce additional out-of-bounds reads.\n */\nstatic void OS_TimerCreate_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2729.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry and parameter pointers (do not dereference timer_name) */\n    OS_TimerCreate_Log(\"ENTRY: OS_TimerCreate called\");\n    OS_TimerCreate_Log(\"  timer_id ptr=%p\", (void *)timer_id);\n    OS_TimerCreate_Log(\"  timer_name ptr=%p\", (const void *)timer_name);\n    OS_TimerCreate_Log(\"  accuracy ptr=%p\", (void *)accuracy);\n    OS_TimerCreate_Log(\"  callback_ptr=%p\", (const void *)callback_ptr);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_TimerCreate_Log(\"  Passed OS_CHECK_POINTER(timer_id)\");\n\n    OS_CHECK_APINAME(timer_name);\n    /* Don't read timer_name contents here (could be non-NUL terminated) */\n    OS_TimerCreate_Log(\"  Passed OS_CHECK_APINAME (timer_name ptr=%p)\", (const void *)timer_name);\n\n    OS_CHECK_POINTER(accuracy);\n    OS_TimerCreate_Log(\"  Passed OS_CHECK_POINTER(accuracy)\");\n\n    OS_CHECK_POINTER(callback_ptr);\n    OS_TimerCreate_Log(\"  Passed OS_CHECK_POINTER(callback_ptr)\");\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    OS_TimerCreate_Log(\"  Called OS_TimeBaseCreate -> return_code=%d, timebase_ref_id=%llu\",\n                       (int)return_code, (unsigned long long)timebase_ref_id);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimerCreate_Log(\"  OS_TimeBaseCreate failed, returning %d\", (int)return_code);\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    OS_TimerCreate_Log(\"  Prepared Conv.opaque_arg=%p Conv.timer_callback_func=%p\",\n                       (void *)Conv.opaque_arg, (void *)Conv.timer_callback_func);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    OS_TimerCreate_Log(\"  Called OS_DoTimerAdd -> return_code=%d, timer_id ptr=%p\", (int)return_code, (void *)timer_id);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimerCreate_Log(\"  OS_DoTimerAdd failed; deleting timebase %llu\", (unsigned long long)timebase_ref_id);\n        OS_TimeBaseDelete(timebase_ref_id);\n        OS_TimerCreate_Log(\"  OS_TimeBaseDelete called for %llu\", (unsigned long long)timebase_ref_id);\n    }\n    else\n    {\n        /* Assign the accuracy output and log the assigned value. Accuracy pointer was checked earlier. */\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        OS_TimerCreate_Log(\"  OS_DoTimerAdd succeeded; assigned *accuracy=%u\", (unsigned int)*accuracy);\n    }\n\n    OS_TimerCreate_Log(\"EXIT: OS_TimerCreate returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}