{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'stream' is declared as a modifiable pointer (OS_stream_internal_record_t *stream) but in OS_CloseFileByName it is only used for read-only accesses (checking stream->socket_domain and comparing stream->stream_name via strcmp). It can and should be declared as a pointer-to-const: const OS_stream_internal_record_t *stream; (OS_OBJECT_TABLE_GET yields a non-const address which may be assigned to a const-qualified pointer).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1583.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "int32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Simple log helper usage inline so no new symbols are required */\n    FILE *logfile = fopen(\"/tmp/logs/1583.txt\", \"a\");\n    if (logfile)\n    {\n        fprintf(logfile, \"OS_CloseFileByName: entry Filename ptr=%p\\n\", (const void *)Filename);\n        if (Filename != NULL)\n        {\n            fprintf(logfile, \"OS_CloseFileByName: Filename='%s'\\n\", Filename);\n        }\n        fclose(logfile);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log the iterator token and the stream pointer and key fields used below */\n        logfile = fopen(\"/tmp/logs/1583.txt\", \"a\");\n        if (logfile)\n        {\n            fprintf(logfile, \"OS_CloseFileByName: iter.token=%u, stream_ptr=%p\\n\", (unsigned)iter.token, (void *)stream);\n            if (stream == NULL)\n            {\n                fprintf(logfile, \"OS_CloseFileByName: stream is NULL, skipping\\n\");\n                fclose(logfile);\n                continue;\n            }\n            fprintf(logfile, \"OS_CloseFileByName: stream->socket_domain=%d, stream->stream_name='%s'\\n\",\n                    (int)stream->socket_domain,\n                    (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n            fclose(logfile);\n        }\n\n        /* Evaluate comparison once so we can log the result without changing behavior */\n        int strcmp_result = strcmp(stream->stream_name, Filename);\n\n        logfile = fopen(\"/tmp/logs/1583.txt\", \"a\");\n        if (logfile)\n        {\n            fprintf(logfile, \"OS_CloseFileByName: strcmp(stream->stream_name, Filename) => %d\\n\", strcmp_result);\n            fclose(logfile);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp_result == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            logfile = fopen(\"/tmp/logs/1583.txt\", \"a\");\n            if (logfile)\n            {\n                fprintf(logfile, \"OS_CloseFileByName: close_code=%d, prior_return_code=%d\\n\", close_code, return_code);\n                fclose(logfile);\n            }\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n\n                logfile = fopen(\"/tmp/logs/1583.txt\", \"a\");\n                if (logfile)\n                {\n                    fprintf(logfile, \"OS_CloseFileByName: updated return_code=%d\\n\", return_code);\n                    fclose(logfile);\n                }\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    logfile = fopen(\"/tmp/logs/1583.txt\", \"a\");\n    if (logfile)\n    {\n        fprintf(logfile, \"OS_CloseFileByName: exit return_code=%d\\n\", return_code);\n        fclose(logfile);\n    }\n\n    return return_code;\n}"
}