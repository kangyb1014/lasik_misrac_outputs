{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrcmp(stream->stream_name, Filename) can read past the end of either operand if that operand is not terminated within its object bounds. stream->stream_name is a fixed-size array (char[OS_MAX_PATH_LEN]) but the code does not prove it is NUL-terminated; Filename is only checked for non-NULL and may point to a non-terminated or out-of-bounds buffer. If stream_name was populated with a fixed-length copy without ensuring a terminating '\\0' (or Filename is not NUL-terminated), strcmp will scan past the array and access memory beyond the object bounds. The call should instead bound the comparison (e.g. strncmp with OS_MAX_PATH_LEN and ensure NUL-termination) or otherwise guarantee both strings are NUL-terminated within their buffers.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1589.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "int32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE                       *log = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Open log file for append; best-effort only (do not alter return semantics on failure) */\n    log = fopen(\"/tmp/logs/1589.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"\\n--- OS_CloseFileByName called ---\\n\");\n        fprintf(log, \"Filename ptr=%p\\n\", (const void *)Filename);\n        fflush(log);\n    }\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Probe: gather safe information about stream->stream_name without reading past its object bounds */\n        if (log)\n        {\n            /* Determine the size of the stream_name member (this relies on the visible definition of the struct)\n               and use memchr with that size to detect if a NUL exists within the buffer. This avoids scanning\n               beyond the array bounds. We DO NOT attempt to inspect the memory pointed to by Filename here\n               because its bounds are not known. */\n            size_t name_buf_size = sizeof(stream->stream_name);\n            void *nulpos = memchr(stream->stream_name, '\\0', name_buf_size);\n            size_t name_len = (nulpos != NULL) ? ((const char *)nulpos - (const char *)stream->stream_name) : name_buf_size;\n\n            fprintf(log, \"iter.token=%u, stream_ptr=%p, socket_domain=%d\\n\", (unsigned)iter.token, (void *)stream, (int)stream->socket_domain);\n            fprintf(log, \"stream_name buffer addr=%p, buffer_size=%zu, has_nul_within_size=%s, visible_len=%zu\\n\",\n                    (void *)&stream->stream_name[0], name_buf_size, (nulpos ? \"YES\" : \"NO\"), name_len);\n\n            /* Print the stream_name up to the discovered safe length. This will not read beyond the object bounds. */\n            fprintf(log, \"stream_name (up to safe length): '%.*s'\\n\", (int)name_len, stream->stream_name);\n            fflush(log);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log the match decision. It is important to record that strcmp was invoked and its result led to\n               the close operation. This preserves the original control flow while providing evidence of when\n               and where strcmp returned equality. */\n            if (log)\n            {\n                fprintf(log, \"strcmp returned EQUAL for stream_ptr=%p and Filename ptr=%p --> invoking close on token %u\\n\",\n                        (void *)stream, (const void *)Filename, (unsigned)iter.token);\n                fflush(log);\n            }\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                /* If the condition didn't match, record that too. We don't call strcmp again; the above call\n                   is the only strcmp in the original logic. */\n                fprintf(log, \"No match for token %u (either socket_domain!=INVALID or strcmp!=0)\\n\", (unsigned)iter.token);\n                fflush(log);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log)\n    {\n        fprintf(log, \"OS_CloseFileByName returning code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}