{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(stream->stream_name, Filename) can read past the end of stream->stream_name (or Filename) searching for a terminating '\\0'. If stream_name is filled without a terminating NUL (for example via strncpy(..., OS_MAX_PATH_LEN) from a longer source) then strcmp will read beyond the stream_name array bounds (OS_MAX_PATH_LEN), causing an out-of-bounds access. The same applies if Filename does not have a NUL within its accessible allocation. Without a guaranteed NUL termination for both operands this use of strcmp violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1589.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/1589.txt */\nstatic void OS_Log_CloseFileByName_Probe(int token, const void *stream_ptr, const char *Filename)\n{\n    FILE *f = fopen(\"/tmp/logs/1589.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Print basic pointers and filename pointer only (do not dereference Filename to avoid UB) */\n    fprintf(f, \"ENTRY: token=%d, stream_ptr=%p, Filename_ptr=%p\\n\", token, stream_ptr, (const void *)Filename);\n\n    /* Attempt to inspect stream->stream_name in a safe bounded manner.\n       This assumes that the compilation unit has visibility of the\n       OS_stream_internal_record_t definition so sizeof(stream->stream_name)\n       yields the actual array size. If that is true, this is a bounded\n       access and does not read beyond the object's storage. */\n    if (stream_ptr != NULL)\n    {\n        /* The caller will pass a pointer to the stream structure. Cast to a char pointer to inspect member bytes generically. */\n        const unsigned char *base = (const unsigned char *)stream_ptr;\n\n        /* Attempt to compute offset of member stream_name. If the compilation\n           unit has visibility of the struct, the following expression should\n           be valid. To avoid introducing dependencies in this probe, call-site\n           passes the address of the member or the struct as appropriate.\n           For portability, we attempt to print a hex dump of the first\n           bytes at base (this is conservative and does not assume layout). */\n        size_t dump_len = 64; /* conservative dump length */\n        fprintf(f, \"Hex dump of first %zu bytes at stream_ptr:\", dump_len);\n        for (size_t i = 0; i < dump_len; ++i)\n        {\n            /* Access is within the stream object as long as the object is at least dump_len bytes long.\n               This probe must be used in the same translation unit that defines the struct to be safe. */\n            fprintf(f, \" %02x\", (unsigned int)base[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"About to evaluate strcmp(stream->stream_name, Filename)\\n\");\n\n    fclose(f);\n}\n\nstatic void OS_Log_CloseFileByName_Result(int token, const void *stream_ptr, const char *Filename, int strcmp_result)\n{\n    FILE *f = fopen(\"/tmp/logs/1589.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"RESULT: token=%d, stream_ptr=%p, Filename_ptr=%p, strcmp_result=%d\\n\", token, stream_ptr, (const void *)Filename, strcmp_result);\n\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Insert logging probe to capture state right before the strcmp evaluation.\n           This probe logs pointer values and a small hex dump of the stream object\n           to help reproduce cases where stream->stream_name might not be NUL-terminated.\n           The probe preserves the original control flow and does not change the\n           logic (strcmp is still called as originally written). */\n        OS_Log_CloseFileByName_Probe(iter.token, (const void *)stream, Filename);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log the result of the strcmp invocation for evidence */\n            OS_Log_CloseFileByName_Result(iter.token, (const void *)stream, Filename, 0);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n        else\n        {\n            /* If the strcmp was not called because socket_domain differed, or\n               strcmp returned non-zero, log that fact. Do not attempt to invoke\n               strcmp here again (avoid doubling side-effects). */\n            OS_Log_CloseFileByName_Result(iter.token, (const void *)stream, Filename, -1);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n"
}