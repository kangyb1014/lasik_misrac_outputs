{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable filesys is declared as a non-const pointer (OS_filesys_internal_record_t *filesys) and is assigned from OS_OBJECT_TABLE_GET. In the shown code filesys is only read (flags, system_mountpt, virtual_mountpt) and never modified, so it could and should be declared as a pointer to const (const OS_filesys_internal_record_t *filesys). Therefore the current code violates MISRA C 2023 Rule 8.13. A remediation is to change the declaration (and the OS_OBJECT_TABLE_GET result type) to return/hold a pointer to const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Provide a local typedef only if not already defined in the build. */\n#ifndef OS_RMDIR_INT32_DEFINED\ntypedef int32_t int32;\n#endif\n\n/* Forward declarations of the existing functions used by OS_rmdir. */\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_DirRemove_Impl(const char *local_path);\n\n/*\n * Probe logging functions. These append human-readable traces to\n * \"/tmp/logs/1543.txt\" describing the control path and key state\n * (input path, translated local_path, and intermediate return codes).\n *\n * These functions do not alter the original control flow or return\n * values of OS_rmdir; they only observe and report.\n */\nstatic void osr_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1543.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not alter behavior. */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * OS_rmdir with inserted probes. The original logic is preserved:\n * - Translate path\n * - If successful, call implementation to remove directory\n * - Return the resulting code\n */\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input path pointer/value */\n    if (path != NULL)\n    {\n        /* Truncate logged path to avoid overly long entries */\n        char path_copy[256];\n        (void)strncpy(path_copy, path, sizeof(path_copy) - 1);\n        path_copy[sizeof(path_copy) - 1] = '\\0';\n        osr_probe_log(\"OS_rmdir ENTRY: path=%p value=\\\"%s\\\"\", (const void *)path, path_copy);\n    }\n    else\n    {\n        osr_probe_log(\"OS_rmdir ENTRY: path=NULL\");\n    }\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of path translation and the translated local_path if available */\n    osr_probe_log(\"OS_TranslatePath returned %d\", (int)return_code);\n    if (return_code == 0)\n    {\n        /* safe copy for logging */\n        char lp_copy[OS_MAX_LOCAL_PATH_LEN];\n        (void)strncpy(lp_copy, local_path, sizeof(lp_copy) - 1);\n        lp_copy[sizeof(lp_copy) - 1] = '\\0';\n        osr_probe_log(\"Translated local_path=%p value=\\\"%s\\\"\", (const void *)local_path, lp_copy);\n\n        /* Before invoking the implementation, record the action */\n        osr_probe_log(\"Calling OS_DirRemove_Impl with local_path=%p\", (const void *)local_path);\n\n        return_code = OS_DirRemove_Impl(local_path);\n\n        osr_probe_log(\"OS_DirRemove_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        osr_probe_log(\"Skipping OS_DirRemove_Impl due to translate failure\");\n    }\n\n    osr_probe_log(\"OS_rmdir EXIT: returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}