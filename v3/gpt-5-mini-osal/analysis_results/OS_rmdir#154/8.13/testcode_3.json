{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a const char * (VirtualPath) to void * when calling OS_ObjectIdGetBySearch: (void *)VirtualPath. This discards the const qualifier and passes a non-const pointer where a const-qualified pointer could be used. If OS_ObjectIdGetBySearch does not need to modify the data, its parameter should be const void * (or the call should not cast away const). Casting away const like this violates the intent of Rule 8.13 and may enable modification of data that should be const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmdir code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe/logging helpers for OS_rmdir. These functions append information\n * about the control flow and key state to /tmp/logs/1543.txt so other\n * agents can reproduce and gather evidence for the reported scenario.\n *\n * Note: These helpers preserve the original logic of OS_rmdir and do not\n * change return values or control flow. They avoid casting away const\n * qualifiers (use (const void *) for pointer logging) to not introduce\n * additional const-discarding issues.\n */\nstatic void OS_rmdir_log_entry(const char *path)\n{\n    FILE *f = fopen(\"/tmp/logs/1543.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_rmdir ENTRY: path=%p\\n\", (const void *)path);\n        if (path != NULL)\n        {\n            fprintf(f, \"  path (string) = \\\"%s\\\"\\n\", path);\n        }\n        else\n        {\n            fprintf(f, \"  path is NULL\\n\");\n        }\n        fclose(f);\n    }\n}\n\nstatic void OS_rmdir_log_translate_result(const char *path, const char *local_path, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1543.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_rmdir TRANSLATE: input_ptr=%p local_ptr=%p rc=%d\\n\",\n                (const void *)path, (const void *)local_path, (int)return_code);\n        if (local_path != NULL)\n        {\n            fprintf(f, \"  local_path = \\\"%s\\\"\\n\", local_path);\n        }\n        fclose(f);\n    }\n}\n\nstatic void OS_rmdir_log_before_remove(const char *local_path)\n{\n    FILE *f = fopen(\"/tmp/logs/1543.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_rmdir BEFORE_REMOVE: local_ptr=%p\\n\", (const void *)local_path);\n        if (local_path != NULL)\n        {\n            fprintf(f, \"  local_path (string) = \\\"%s\\\"\\n\", local_path);\n        }\n        fclose(f);\n    }\n}\n\nstatic void OS_rmdir_log_exit(const char *path, const char *local_path, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1543.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_rmdir EXIT: input_ptr=%p local_ptr=%p return=%d\\n\\n\",\n                (const void *)path, (const void *)local_path, (int)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry with input pointer and string */\n    OS_rmdir_log_entry(path);\n\n    /* Original logic preserved: translate path, then remove directory if success */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation (including local_path contents) */\n    OS_rmdir_log_translate_result(path, local_path, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log state immediately before calling implementation remove */\n        OS_rmdir_log_before_remove(local_path);\n\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    /* Log exit with final return code and pointers */\n    OS_rmdir_log_exit(path, local_path, return_code);\n\n    return return_code;\n}\n"
}