{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1549.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_log_memchr_risk(const void *s, size_t maxlen)\n{\n    probe_log(\"[RISK] memchr/strnlen usage: pointer=%p, maxlen=%zu. \"\n              \"Note: memchr(s, 0, maxlen) may read up to maxlen bytes starting at s and \"\n              \"therefore may access beyond the bounds of the object pointed to by s.\",\n              s, maxlen);\n}\n\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and key state without dereferencing `path`. */\n    probe_log(\"OS_rmdir ENTER: path_ptr=%p\", (const void *)path);\n    probe_log(\"Configuration: OS_MAX_LOCAL_PATH_LEN=%d, OS_MAX_PATH_LEN=%d\",\n              OS_MAX_LOCAL_PATH_LEN, OS_MAX_PATH_LEN);\n\n    /* Log the potential memchr/strnlen risk for callers that may use a large maxlen\n       (e.g. OS_MAX_PATH_LEN). We DON'T call memchr or strnlen here to avoid introducing\n       unsafe reads; this is only evidence/logging for the scenario. */\n    probe_log_memchr_risk(path, (size_t)OS_MAX_PATH_LEN);\n\n    /* Original translation step. We preserve the call order and logic. */\n    return_code = OS_TranslatePath(path, local_path);\n    probe_log(\"OS_TranslatePath returned %d; local_path_buffer_addr=%p\",\n              return_code, (void *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Calling OS_DirRemove_Impl with local_path=%p\", (void *)local_path);\n        return_code = OS_DirRemove_Impl(local_path);\n        probe_log(\"OS_DirRemove_Impl returned %d\", return_code);\n    }\n    else\n    {\n        probe_log(\"Skipping OS_DirRemove_Impl due to translate failure: %d\", return_code);\n    }\n\n    probe_log(\"OS_rmdir EXIT: returning %d\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpf5cwdjpf/src/src/os/shared/src/osapi-dir.c: In function 'probe_log':\n/tmp/tmpf5cwdjpf/src/src/os/shared/src/osapi-dir.c:246:19: error: storage size of 'tm_buf' isn't known\n  246 |         struct tm tm_buf;\n      |                   ^~~~~~\n/tmp/tmpf5cwdjpf/src/src/os/shared/src/osapi-dir.c:259:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  259 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/__/__/os/shared/src/osapi-dir.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3477: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Provide minimal type/constant declarations so this translation unit compiles\n * while preserving the original logic of OS_rmdir. These are declarations\n * (and enum constants) rather than function implementations or macros. */\n\ntypedef int32_t int32;\n\nenum {\n    OS_MAX_LOCAL_PATH_LEN = 256,\n    OS_MAX_PATH_LEN = 1024,\n    OS_SUCCESS = 0\n};\n\n/* External functions used by OS_rmdir - only declared here (no mock implementations). */\nint32 OS_TranslatePath(const char *path, char *local_path);\nint32 OS_DirRemove_Impl(const char *local_path);\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1549.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_memchr_risk(const void *s, size_t maxlen)\n{\n    probe_log(\"[RISK] memchr/strnlen usage: pointer=%p, maxlen=%zu. \"\n              \"Note: memchr(s, 0, maxlen) may read up to maxlen bytes starting at s and \"\n              \"therefore may access beyond the bounds of the object pointed to by s.\",\n              s, maxlen);\n}\n\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and key state without dereferencing `path`. */\n    probe_log(\"OS_rmdir ENTER: path_ptr=%p\", (const void *)path);\n    probe_log(\"Configuration: OS_MAX_LOCAL_PATH_LEN=%d, OS_MAX_PATH_LEN=%d\",\n              OS_MAX_LOCAL_PATH_LEN, OS_MAX_PATH_LEN);\n\n    /* Log the potential memchr/strnlen risk for callers that may use a large maxlen\n       (e.g. OS_MAX_PATH_LEN). We DON'T call memchr or strnlen here to avoid introducing\n       unsafe reads; this is only evidence/logging for the scenario. */\n    probe_log_memchr_risk(path, (size_t)OS_MAX_PATH_LEN);\n\n    /* Original translation step. We preserve the call order and logic. */\n    return_code = OS_TranslatePath(path, local_path);\n    probe_log(\"OS_TranslatePath returned %d; local_path_buffer_addr=%p\",\n              return_code, (void *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Calling OS_DirRemove_Impl with local_path=%p\", (void *)local_path);\n        return_code = OS_DirRemove_Impl(local_path);\n        probe_log(\"OS_DirRemove_Impl returned %d\", return_code);\n    }\n    else\n    {\n        probe_log(\"Skipping OS_DirRemove_Impl due to translate failure: %d\", return_code);\n    }\n\n    probe_log(\"OS_rmdir EXIT: returning %d\", return_code);\n    return return_code;\n}\n",
  "explanation": "I added the necessary standard headers (stdio.h, stdarg.h, time.h, stddef.h, stdint.h) so struct tm and va_list are defined, which fixes the \"storage size of 'tm_buf' isn't known\" and the va_list type mismatch errors. I also provided minimal declarations for types and external symbols used by OS_rmdir: a typedef for int32, enum constants for OS_MAX_LOCAL_PATH_LEN, OS_MAX_PATH_LEN and OS_SUCCESS, and function prototypes for OS_TranslatePath and OS_DirRemove_Impl. These preserve the original logic and call order without defining any mock functions or a main()."
}