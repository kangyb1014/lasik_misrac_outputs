{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe check can become unreachable if OS_MAX_FILE_NAME is greater than or equal to OS_MAX_PATH_LEN. Earlier VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) and the code returns if VirtPathLen >= OS_MAX_PATH_LEN, so when execution reaches the memchr check there is guaranteed to be a NUL within the first OS_MAX_PATH_LEN bytes. If OS_MAX_FILE_NAME >= OS_MAX_PATH_LEN then memchr(name_ptr, 0, OS_MAX_FILE_NAME) will always find the terminator and never return NULL, making the 'return OS_FS_ERR_NAME_TOO_LONG;' path unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1541.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/1541.txt. */\nstatic void OS_rmdir_log(const char *fmt, ...)\n{\n    FILE *fp = NULL;\n    /* Best-effort: try to create the directory. Ignore errors. */\n    (void) mkdir(\"/tmp/logs\", (mode_t)0700);\n\n    fp = fopen(\"/tmp/logs/1541.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If we cannot open the log file, silently return to avoid altering behavior. */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void) vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    (void) fputc('\\n', fp);\n    (void) fclose(fp);\n}\n\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and compile-time configuration values relevant to the violation scenario. */\n    OS_rmdir_log(\"OS_rmdir: entry path='%s' OS_MAX_FILE_NAME=%d OS_MAX_PATH_LEN=%d OS_MAX_LOCAL_PATH_LEN=%d\",\n                 (path != NULL) ? path : \"(null)\",\n                 (int)OS_MAX_FILE_NAME,\n                 (int)OS_MAX_PATH_LEN,\n                 (int)OS_MAX_LOCAL_PATH_LEN);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    OS_rmdir_log(\"OS_rmdir: OS_TranslatePath returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the translated local path for inspection. */\n        OS_rmdir_log(\"OS_rmdir: translated local_path='%s'\", local_path);\n\n        OS_rmdir_log(\"OS_rmdir: calling OS_DirRemove_Impl(local_path)\");\n        return_code = OS_DirRemove_Impl(local_path);\n        OS_rmdir_log(\"OS_rmdir: OS_DirRemove_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        OS_rmdir_log(\"OS_rmdir: skipping OS_DirRemove_Impl due to translate failure (%d)\", (int)return_code);\n    }\n\n    OS_rmdir_log(\"OS_rmdir: exit return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}