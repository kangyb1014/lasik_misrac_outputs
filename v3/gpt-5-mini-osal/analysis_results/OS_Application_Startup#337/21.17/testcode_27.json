{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nTrue violation: the code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without any NULL/length checks. If the buffer entry exists but ContentTypeStr was never initialized (NULL or points to a non-terminated/short buffer) or if the caller passes TypeName==NULL, and StubPtr->Data.Buff.Position == ReturnSize (so the left side of the || is false), strcmp will be evaluated and may dereference a NULL pointer or read past the bounds of the underlying storage. This can result in an out-of-bounds access, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <string.h>\n\n/*\n * Declarations of external functions called by OS_Application_Startup.\n * These are assumed to be defined elsewhere in the test framework.\n */\nextern void UtTest_EarlyInit(void);\nextern void UT_BSP_Setup(void);\nextern void UtAssert_BeginTest(const char *TestName);\nextern void UtTest_Setup(void);\nextern void UtAssert_EndTest(void);\n\nstatic const char *g_log_path = \"/tmp/logs/3379.txt\";\n\n/* Append a single-line message to the log file. */\nstatic void append_log_line(const char *msg)\n{\n    FILE *f = fopen(g_log_path, \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\n/*\n * Probe function intended to be called immediately before any strcmp-like\n * invocation that is suspected to be unsafe. This function records pointer\n * values and a bounded length inspection of the strings so that later\n * analysis can determine if a NULL or unterminated buffer was present.\n *\n * Parameters provided to this probe should reflect the exact arguments\n * that the code will pass to strcmp (or equivalent) so a log entry can be\n * used as evidence when reproducing the violation scenario.\n */\nvoid Log_Strcmp_Call_Debug(const char *TypeName,\n                           const char *ContentTypeStr,\n                           size_t Position,\n                           size_t ReturnSize)\n{\n    FILE *f = fopen(g_log_path, \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[Log_Strcmp_Call_Debug] TypeName=%p, ContentTypeStr=%p, Position=%zu, ReturnSize=%zu\\n\",\n            (const void *)TypeName, (const void *)ContentTypeStr, Position, ReturnSize);\n\n    /* Safe, bounded length checks to avoid reading beyond unknown buffers. */\n    if (TypeName == NULL)\n    {\n        fprintf(f, \"  TypeName: NULL\\n\");\n    }\n    else\n    {\n        size_t tn_len = 0;\n        const size_t max_inspect = 256u; /* bounded inspection to avoid OOB */\n        while (tn_len < max_inspect && TypeName[tn_len] != '\\0')\n        {\n            ++tn_len;\n        }\n        if (tn_len == max_inspect)\n        {\n            fprintf(f, \"  TypeName: present (no terminator within %zu bytes)\\n\", max_inspect);\n        }\n        else\n        {\n            fprintf(f, \"  TypeName: present (length=%zu)\\n\", tn_len);\n        }\n    }\n\n    if (ContentTypeStr == NULL)\n    {\n        fprintf(f, \"  ContentTypeStr: NULL\\n\");\n    }\n    else\n    {\n        size_t cs_len = 0;\n        const size_t max_inspect = 256u; /* bounded inspection to avoid OOB */\n        while (cs_len < max_inspect && ContentTypeStr[cs_len] != '\\0')\n        {\n            ++cs_len;\n        }\n        if (cs_len == max_inspect)\n        {\n            fprintf(f, \"  ContentTypeStr: present (no terminator within %zu bytes)\\n\", max_inspect);\n        }\n        else\n        {\n            fprintf(f, \"  ContentTypeStr: present (length=%zu)\\n\", cs_len);\n        }\n    }\n\n    if (Position == ReturnSize)\n    {\n        fprintf(f, \"  NOTE: Position == ReturnSize -> caller may evaluate strcmp on right side of '||' which could trigger the unsafe strcmp evaluation.\\n\");\n    }\n\n    fclose(f);\n}\n\n/*\n * Modified OS_Application_Startup: preserves original logic but inserts\n * logging probes that record the control path and key states to\n * /tmp/logs/3379.txt. The probes do not change behavior and are safe to\n * call in place of instrumentation points from other parts of the code.\n */\nvoid OS_Application_Startup(void)\n{\n    append_log_line(\"OS_Application_Startup: entry\");\n\n    append_log_line(\"OS_Application_Startup: calling UtTest_EarlyInit\");\n    UtTest_EarlyInit();\n    append_log_line(\"OS_Application_Startup: returned from UtTest_EarlyInit\");\n\n    append_log_line(\"OS_Application_Startup: calling UT_BSP_Setup\");\n    UT_BSP_Setup();\n    append_log_line(\"OS_Application_Startup: returned from UT_BSP_Setup\");\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * Allows any assert calls to be used and recorded during setup\n     */\n    append_log_line(\"OS_Application_Startup: calling UtAssert_BeginTest(\\\"SETUP\\\")\");\n    UtAssert_BeginTest(\"SETUP\");\n\n    append_log_line(\"OS_Application_Startup: calling UtTest_Setup\");\n    UtTest_Setup();\n    append_log_line(\"OS_Application_Startup: returned from UtTest_Setup\");\n\n    append_log_line(\"OS_Application_Startup: calling UtAssert_EndTest\");\n    UtAssert_EndTest();\n\n    append_log_line(\"OS_Application_Startup: exit\");\n}\n"
}