{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2666.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Simple structured line: [TAG] formatted-message */\n    fprintf(f, \"[%s] \", tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and input state */\n    probe_log(\"ENTRY\", \"OS_TimeBaseGetFreeRun called: timebase_id=%lu freerun_val=%p\",\n              (unsigned long)timebase_id, (void *)freerun_val);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    probe_log(\"AFTER_CHECK_POINTER\", \"freerun_val=%p passed NULL check\", (void *)freerun_val);\n\n    probe_log(\"OBJGET_CALL\", \"Calling OS_ObjectIdGetById with timebase_id=%lu\", (unsigned long)timebase_id);\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    probe_log(\"OBJGET_RET\", \"OS_ObjectIdGetById returned %d (token=%u)\", (int)return_code, (unsigned)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        probe_log(\"TIMEBASE_INFO\", \"timebase ptr=%p freerun_time=%u\", (void *)timebase, (unsigned)timebase->freerun_time);\n\n        probe_log(\"WRITE\", \"About to write freerun_time %u into provided pointer %p\",\n                  (unsigned)timebase->freerun_time, (void *)freerun_val);\n\n        *freerun_val = timebase->freerun_time;\n\n        probe_log(\"WRITE_DONE\", \"Wrote *freerun_val=%u\", (unsigned)*freerun_val);\n    }\n    else\n    {\n        probe_log(\"NOT_FOUND\", \"timebase_id=%lu not found, returning %d\", (unsigned long)timebase_id, (int)return_code);\n    }\n\n    probe_log(\"EXIT\", \"Exiting OS_TimeBaseGetFreeRun with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpwh4p17zf/src/src/os/shared/src/osapi-timebase.c: In function 'OS_TimeBaseGetFreeRun':\n/tmp/tmpwh4p17zf/src/src/os/shared/src/osapi-timebase.c:372:5: error: aggregate value used where an integer was expected\n  372 |     probe_log(\"OBJGET_RET\", \"OS_ObjectIdGetById returned %d (token=%u)\", (int)return_code, (unsigned)token);\n      |     ^~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:356: CMakeFiles/osal.dir/src/os/shared/src/osapi-timebase.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2666.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Simple structured line: [TAG] formatted-message */\n    fprintf(f, \"[%s] \", tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and input state */\n    probe_log(\"ENTRY\", \"OS_TimeBaseGetFreeRun called: timebase_id=%lu freerun_val=%p\",\n              (unsigned long)timebase_id, (void *)freerun_val);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    probe_log(\"AFTER_CHECK_POINTER\", \"freerun_val=%p passed NULL check\", (void *)freerun_val);\n\n    probe_log(\"OBJGET_CALL\", \"Calling OS_ObjectIdGetById with timebase_id=%lu\", (unsigned long)timebase_id);\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    /* token is an aggregate type, so don't try to print it as an integer. Print its address instead. */\n    probe_log(\"OBJGET_RET\", \"OS_ObjectIdGetById returned %d (token=%p)\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        probe_log(\"TIMEBASE_INFO\", \"timebase ptr=%p freerun_time=%u\", (void *)timebase, (unsigned)timebase->freerun_time);\n\n        probe_log(\"WRITE\", \"About to write freerun_time %u into provided pointer %p\",\n                  (unsigned)timebase->freerun_time, (void *)freerun_val);\n\n        *freerun_val = timebase->freerun_time;\n\n        probe_log(\"WRITE_DONE\", \"Wrote *freerun_val=%u\", (unsigned)*freerun_val);\n    }\n    else\n    {\n        probe_log(\"NOT_FOUND\", \"timebase_id=%lu not found, returning %d\", (unsigned long)timebase_id, (int)return_code);\n    }\n\n    probe_log(\"EXIT\", \"Exiting OS_TimeBaseGetFreeRun with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "The compile error occurred because OS_object_token_t is an aggregate type (not an integer), so casting it to an integer and printing with %u is invalid. I changed the probe_log call to print the address of the token using %p and (void *)&token. This avoids treating the aggregate as an integer while preserving the original logging intent. No other logic was changed."
}