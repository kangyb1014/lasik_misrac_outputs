{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'timebase' is declared as a non-const pointer (OS_timebase_internal_record_t *timebase) but is only used to read fields (timebase->freerun_time). According to MISRA C 2023 Rule 8.13 it should be a pointer to a const-qualified type (e.g. const OS_timebase_internal_record_t *timebase) to express read-only access. Assigning the table element via OS_OBJECT_TABLE_GET yields a non-const address, which can still be assigned to a const pointer; changing the local declaration to const would satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetFreeRun code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetFreeRun:\n```c\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        *freerun_val = timebase->freerun_time;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetFreeRun code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/2663.txt */\nstatic void OS_TimeBaseGetFreeRun_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2663.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    (void)vfprintf(f, fmt, args);\n    va_end(args);\n\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameter addresses */\n    OS_TimeBaseGetFreeRun_Log(\n        \"ENTER: OS_TimeBaseGetFreeRun; timebase_id param addr=%p, freerun_val=%p\\n\",\n        (void *)&timebase_id, (void *)freerun_val);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log the result of object lookup */\n    OS_TimeBaseGetFreeRun_Log(\"OS_ObjectIdGetById returned %d for timebase_id param addr=%p\\n\",\n                              (int)return_code, (void *)&timebase_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log token location and the resolved timebase pointer */\n        OS_TimeBaseGetFreeRun_Log(\"Lookup success: token addr=%p, timebase ptr=%p\\n\",\n                                  (void *)&token, (const void *)timebase);\n\n        if (timebase != NULL)\n        {\n            /* Log the value read from the timebase record (read-only access) */\n            OS_TimeBaseGetFreeRun_Log(\"Read: timebase->freerun_time=%u\\n\",\n                                      (unsigned)timebase->freerun_time);\n\n            *freerun_val = timebase->freerun_time;\n\n            /* Log the value written to the caller-provided pointer */\n            OS_TimeBaseGetFreeRun_Log(\"Write: *freerun_val=%u (addr=%p)\\n\",\n                                      (unsigned)*freerun_val, (void *)freerun_val);\n        }\n        else\n        {\n            /* timebase should not be NULL if lookup succeeded; log this unexpected state */\n            OS_TimeBaseGetFreeRun_Log(\"ERROR: timebase pointer is NULL despite OS_ObjectIdGetById success\\n\");\n        }\n    }\n    else\n    {\n        /* Log failure path */\n        OS_TimeBaseGetFreeRun_Log(\"FAIL: ObjectIdGetById failed with return_code=%d\\n\", (int)return_code);\n    }\n\n    /* Log exit with return code */\n    OS_TimeBaseGetFreeRun_Log(\"EXIT: OS_TimeBaseGetFreeRun returning %d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}