{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) is made without ensuring either pointer is non-NULL and that both strings are valid NUL-terminated buffers. For example, if UT_Stub_GetReturnValuePtr is called with TypeName == NULL (or if StubPtr->Data.Buff.ContentTypeStr was never set or points to a non-NUL-terminated or freed buffer), strcmp will read through an invalid address and can access beyond the bounds of the referenced object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_lseek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_lseek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_lseek:\n```c\nint32 OS_lseek(osal_id_t filedes, int32 offset, uint32 whence)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericSeek_Impl(&token, offset, whence);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_lseek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends control flow and state info to /tmp/logs/1679.txt */\nstatic void OS_lseek_log(const char *stage, osal_id_t filedes, int32 offset, uint32 whence, int32 return_code, const void *token_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/1679.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print stage, parameters, return code and token address (do not dereference token) */\n        fprintf(f, \"[OS_lseek] stage=%s filedes=%lld offset=%lld whence=%u return_code=%lld token_addr=%p\\n\",\n                stage,\n                (long long) (filedes),\n                (long long) (offset),\n                (unsigned) (whence),\n                (long long) (return_code),\n                token_addr);\n        fclose(f);\n    }\n}\n\nint32 OS_lseek(osal_id_t filedes, int32 offset, uint32 whence)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with initial parameters. token address printed but not dereferenced. */\n    OS_lseek_log(\"entry\", filedes, offset, whence, -1, (const void *)&token);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_lseek_log(\"after_GetById\", filedes, offset, whence, return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericSeek_Impl(&token, offset, whence);\n\n        /* Log result of GenericSeek_Impl */\n        OS_lseek_log(\"after_GenericSeek\", filedes, offset, whence, return_code, (const void *)&token);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release */\n        OS_lseek_log(\"after_Release\", filedes, offset, whence, return_code, (const void *)&token);\n    }\n    else\n    {\n        /* Log that GetById failed and we won't call GenericSeek_Impl */\n        OS_lseek_log(\"GetById_failed\", filedes, offset, whence, return_code, (const void *)&token);\n    }\n\n    /* Final exit log */\n    OS_lseek_log(\"exit\", filedes, offset, whence, return_code, (const void *)&token);\n\n    return return_code;\n}\n"
}