{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nPassing the address of the local variable 'token' to OS_BinSemGive_Impl(&token) violates MISRA C 2023 Rule 8.13 if the implementation function does not modify the pointed-to OS_object_token_t. In that case the prototype should be OS_BinSemGive_Impl(const OS_object_token_t *token) so the pointer points to a const-qualified type. If, however, OS_BinSemGive_Impl intends to modify the token object, then a non-const pointer is required and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGive code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1213.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGive as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGive:\n```c\nint32 OS_BinSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGive code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helpers: write logs to /tmp/logs/1213.txt to capture control flow and state. */\nstatic void probe_log_simple(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1213.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_semid_and_code(unsigned long sem_id, int32_t code)\n{\n    FILE *f = fopen(\"/tmp/logs/1213.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"sem_id=%lu, return_code=%d\\n\", sem_id, (int)code);\n        fclose(f);\n    }\n}\n\nstatic void probe_dump_token(const char *label, const void *token_ptr, size_t token_size)\n{\n    FILE *f = fopen(\"/tmp/logs/1213.txt\", \"a\");\n    if (f != NULL)\n    {\n        const unsigned char *p = (const unsigned char *)token_ptr;\n        size_t i;\n        fprintf(f, \"%s: token_addr=%p size=%zu bytes contents=\", label, token_ptr, token_size);\n        for (i = 0u; i < token_size; ++i)\n        {\n            fprintf(f, \"%02X\", (unsigned int)p[i]);\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\n/* Original function with probes inserted to preserve logic. */\nint32 OS_BinSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and initial sem_id */\n    probe_log_semid_and_code((unsigned long)sem_id, -1);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object lookup */\n    probe_log_semid_and_code((unsigned long)sem_id, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Dump token state before calling implementation */\n        probe_dump_token(\"before_OS_BinSemGive_Impl\", &token, sizeof(token));\n\n        /* Call original implementation */\n        return_code = OS_BinSemGive_Impl(&token);\n\n        /* Dump token state after calling implementation to detect modifications */\n        probe_dump_token(\"after_OS_BinSemGive_Impl\", &token, sizeof(token));\n\n        /* Log final return code */\n        probe_log_semid_and_code((unsigned long)sem_id, return_code);\n    }\n\n    return return_code;\n}\n"
}