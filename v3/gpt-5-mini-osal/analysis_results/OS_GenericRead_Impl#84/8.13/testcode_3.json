{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is only used to read fields (impl->selectable and impl->fd) and is never used to modify the table entry. Therefore it could be declared as a pointer to const (const OS_impl_file_internal_record_t *impl). Assigning &OS_impl_filehandle_table[index] to a pointer-to-const is allowed, so the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/843.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericRead_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericRead_Impl:\n```c\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericRead_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: append a single-line log entry to the required log file. */\nstatic void OS_GenericRead_Impl_probe(const char *label,\n                                      const void *token_ptr,\n                                      const void *impl_ptr,\n                                      size_t nbytes,\n                                      int32_t timeout,\n                                      unsigned int operation,\n                                      int32_t return_code,\n                                      ssize_t os_result)\n{\n    FILE *f = fopen(\"/tmp/logs/843.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: token=%p impl=%p nbytes=%zu timeout=%d operation=0x%08x return_code=%d os_result=%zd errno=%d\\n\",\n                label,\n                token_ptr,\n                impl_ptr,\n                nbytes,\n                (int)timeout,\n                operation,\n                return_code,\n                os_result,\n                errno);\n        fclose(f);\n    }\n}\n\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log initial state after resolving the impl pointer */\n    OS_GenericRead_Impl_probe(\"after_impl_assigned\", (const void *)token, (const void *)impl, nbytes, timeout, 0u, 0, 0);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /* Log before checking selectable */\n        OS_GenericRead_Impl_probe(\"before_selectable_check\", (const void *)token, (const void *)impl, nbytes, timeout, operation, return_code, 0);\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            OS_GenericRead_Impl_probe(\"entering_select\", (const void *)token, (const void *)impl, nbytes, timeout, operation, return_code, 0);\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n            /* Log outcome of select */\n            OS_GenericRead_Impl_probe(\"after_select\", (const void *)token, (const void *)impl, nbytes, timeout, operation, return_code, 0);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            /* Log before read */\n            OS_GenericRead_Impl_probe(\"before_read\", (const void *)token, (const void *)impl, nbytes, timeout, operation, return_code, 0);\n\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                /* Log the error result */\n                OS_GenericRead_Impl_probe(\"read_error\", (const void *)token, (const void *)impl, nbytes, timeout, operation, OS_ERROR, os_result);\n\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* Log successful read */\n                OS_GenericRead_Impl_probe(\"read_success\", (const void *)token, (const void *)impl, nbytes, timeout, operation, (int32)os_result, os_result);\n\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    /* Final state log */\n    OS_GenericRead_Impl_probe(\"function_exit\", (const void *)token, (const void *)impl, nbytes, timeout, 0u, return_code, 0);\n\n    return return_code;\n}\n"
}