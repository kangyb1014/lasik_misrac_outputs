{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG macro is defined as empty (#define OS_DEBUG(__VA_ARGS__)), so the call OS_DEBUG(\"read: %s\\n\", strerror(errno)); expands to an empty statement (a null statement). This is an operation that is executed but has no effect and whose removal would not change program behaviour, therefore it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/842.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericRead_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericRead_Impl:\n```c\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericRead_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Helper: append a formatted probe log line to /tmp/logs/842.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    FILE *f;\n    time_t t = time(NULL);\n    struct tm tm;\n\n    localtime_r(&t, &tm);\n\n    va_start(ap, fmt);\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    f = fopen(\"/tmp/logs/842.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - %s\\n\",\n                tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n                tm.tm_hour, tm.tm_min, tm.tm_sec,\n                buf);\n        fclose(f);\n    }\n}\n\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    probe_log(\"ENTER OS_GenericRead_Impl: token=%p, buffer=%p, nbytes=%zu, timeout=%d\",\n              (const void *)token, buffer, nbytes, (int)timeout);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    probe_log(\"impl lookup: impl=%p\", (void *)impl);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        probe_log(\"nbytes>0: selectable=%d, fd=%d\",\n                  impl ? (int)impl->selectable : -1,\n                  impl ? impl->fd : -1);\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            probe_log(\"calling OS_SelectSingle_Impl: token=%p, operation=0x%08x, timeout=%d\",\n                      (const void *)token, (unsigned)operation, (int)timeout);\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n            probe_log(\"OS_SelectSingle_Impl returned: return_code=%d, operation=0x%08x\",\n                      (int)return_code, (unsigned)operation);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            probe_log(\"about to read: fd=%d, nbytes=%zu\", impl->fd, nbytes);\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                int err = errno; /* capture errno early */\n\n                /* Preserve the original OS_DEBUG call (may be a no-op macro) */\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n\n                /* Additional probe logging to /tmp/logs/842.txt to capture the state */\n                probe_log(\"read failed: fd=%d, os_result=%zd, errno=%d (%s). OS_DEBUG was invoked (may be no-op).\",\n                          impl->fd, os_result, err, strerror(err));\n\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                probe_log(\"read succeeded: fd=%d, bytes_read=%zd\", impl->fd, os_result);\n                return_code = (int32)os_result;\n            }\n        }\n        else\n        {\n            probe_log(\"skipping read: return_code=%d, operation=0x%08x\",\n                      (int)return_code, (unsigned)operation);\n        }\n    }\n    else\n    {\n        probe_log(\"nbytes==0: nothing to read\");\n    }\n\n    probe_log(\"EXIT OS_GenericRead_Impl: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}