{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without first verifying that both pointers are non-NULL and that they point to valid, null-terminated strings. If either pointer is NULL (e.g. caller passes NULL for TypeName or ContentTypeStr was never initialized) or points to a non-terminated buffer, strcmp will read beyond the object bounds and cause undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskSetPriority code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2629.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskSetPriority as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority:\n```c\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskSetPriority code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/*\n * Instrumented OS_TaskSetPriority with probes that write control-flow and\n * state information to /tmp/logs/2629.txt. The original logic is preserved.\n * The probes avoid dereferencing pointers that may be NULL and only read\n * fields that the original function already accesses (task->priority).\n */\n\nstatic void OS_TaskSetPriority_Log(const char *stage, osal_id_t task_id, osal_priority_t new_priority,\n                                   int32 return_code, const OS_object_token_t *token,\n                                   const OS_task_internal_record_t *task)\n{\n    /* Try to ensure the logs directory exists. Ignore errors if it fails. */\n    (void)mkdir(\"/tmp/logs\", 0700);\n\n    FILE *f = fopen(\"/tmp/logs/2629.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* Print a concise single-line summary first */\n    fprintf(f, \"[%s] task_id=%lld new_priority=%lld return_code=%d token_ptr=%p task_ptr=%p\\n\",\n            stage,\n            (long long)task_id,\n            (long long)new_priority,\n            (int)return_code,\n            (const void *)token,\n            (const void *)task);\n\n    /* If the task pointer is valid, print the current priority observed. */\n    if (task != NULL)\n    {\n        /* The original function reads and writes task->priority; reading it here is consistent. */\n        fprintf(f, \"[%s] observed task->priority = %lld\\n\", stage, (long long)task->priority);\n    }\n\n    fclose(f);\n}\n\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    OS_TaskSetPriority_Log(\"entry\", task_id, new_priority, -1, NULL, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    OS_TaskSetPriority_Log(\"after_ObjectIdGetById\", task_id, new_priority, return_code, &token, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        OS_TaskSetPriority_Log(\"before_Impl_call\", task_id, new_priority, return_code, &token, task);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        OS_TaskSetPriority_Log(\"after_Impl_call\", task_id, new_priority, return_code, &token, task);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            OS_TaskSetPriority_Log(\"before_priority_update\", task_id, new_priority, return_code, &token, task);\n\n            task->priority = new_priority;\n\n            OS_TaskSetPriority_Log(\"after_priority_update\", task_id, new_priority, return_code, &token, task);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_TaskSetPriority_Log(\"after_release\", task_id, new_priority, return_code, &token, task);\n    }\n    else\n    {\n        OS_TaskSetPriority_Log(\"getbyid_failed\", task_id, new_priority, return_code, &token, NULL);\n    }\n\n    OS_TaskSetPriority_Log(\"exit\", task_id, new_priority, return_code, NULL, NULL);\n\n    return return_code;\n}\n"
}