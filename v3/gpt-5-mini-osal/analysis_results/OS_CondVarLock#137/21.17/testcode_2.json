{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation possible: the code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without any null checks or guarantees that both pointers reference NUL-terminated arrays. If either pointer is NULL or points to non\u2011NUL\u2011terminated or freed memory (for example, if a return-buffer entry was not properly registered or was cleared), strcmp will read past the object bounds and cause an out\u2011of\u2011bounds access, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarLock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarLock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarLock:\n```c\nint32 OS_CondVarLock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarLock_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarLock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe/log helper for OS_CondVarLock\n * Writes a concise trace to /tmp/logs/1379.txt so other agents can\n * reproduce and inspect the control flow and state around the call site.\n * This helper preserves original logic and only appends logging.\n */\nstatic void OS_CondVarLock_Log(const char *stage, osal_id_t var_id, const OS_object_token_t *token, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1379.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Print stage, id and return code */\n    (void)fprintf(f, \"%s: var_id=%lu, return_code=%ld, token_addr=%p\\n\",\n                  stage, (unsigned long) var_id, (long) return_code, (const void *) token);\n\n    /* Log basic token footprint information. We do not assume any\n     * particular token layout; we only dump up to the first 64 bytes\n     * of the token's object representation to aid debugging. This does\n     * not change program logic.\n     */\n    if (token != NULL)\n    {\n        size_t tsize = sizeof(*token);\n        size_t to_dump = (tsize < 64u) ? tsize : 64u;\n        const unsigned char *p = (const unsigned char *) token;\n        (void)fprintf(f, \"%s: token_size=%zu, token_dump=%zu bytes:\\n\", stage, tsize, to_dump);\n        for (size_t i = 0u; i < to_dump; ++i)\n        {\n            (void)fprintf(f, \"%02X\", p[i]);\n            if (((i + 1u) % 16u) == 0u)\n            {\n                (void)fprintf(f, \"\\n\");\n            }\n        }\n        (void)fprintf(f, \"\\n\");\n    }\n\n    (void)fclose(f);\n}\n\nint32 OS_CondVarLock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log outcome of the lookup so callers can reproduce the failure\n     * scenario if the token is invalid or not NUL-terminated buffers are\n     * involved elsewhere. This does not alter behavior, only records\n     * the control path and token footprint for later inspection.\n     */\n    OS_CondVarLock_Log(\"After_OS_ObjectIdGetById\", var_id, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log right before calling the implementation routine. */\n        OS_CondVarLock_Log(\"Before_OS_CondVarLock_Impl\", var_id, &token, return_code);\n\n        return_code = OS_CondVarLock_Impl(&token);\n\n        /* Log result from implementation routine. */\n        OS_CondVarLock_Log(\"After_OS_CondVarLock_Impl\", var_id, &token, return_code);\n    }\n\n    return return_code;\n}\n"
}