{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    /* Open the log file once for this invocation to record control flow and state */\n    FILE *log = fopen(\"/tmp/logs/803.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"Enter OS_FdSet_ConvertOut_Impl: OS_set=%p OSAL_set=%p\\n\", (void *)OS_set, (void *)OSAL_set);\n    }\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        /* capture the byte as read from the OSAL set */\n        objids = OSAL_set->object_ids[offset];\n        if (log)\n        {\n            fprintf(log, \"offset=%zu: initial objids=0x%02x\\n\", offset, (unsigned)objids);\n        }\n\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OS_INDEX_C((offset * 8) + bit);\n            if (log)\n            {\n                fprintf(log, \"  loop: offset=%zu bit=%zu objids=0x%02x id=%lu\\n\",\n                        offset, bit, (unsigned)objids, (unsigned long)id);\n            }\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                /* Evaluate FD_ISSET once and store result so we can log it */\n                int is_set = FD_ISSET(osfd, OS_set);\n                if (log)\n                {\n                    fprintf(log, \"    id=%lu osfd=%d FD_ISSET=%d\\n\", (unsigned long)id, osfd, is_set);\n                }\n\n                if (osfd < 0 || !is_set)\n                {\n                    if (log)\n                    {\n                        unsigned before = (unsigned)OSAL_set->object_ids[offset];\n                        fprintf(log, \"    Clearing bit: offset=%zu bit=%zu before=0x%02x\\n\",\n                                offset, bit, before);\n                    }\n\n                    /* preserve original behavior: clear the bit in the OSAL set */\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n\n                    if (log)\n                    {\n                        unsigned after = (unsigned)OSAL_set->object_ids[offset];\n                        fprintf(log, \"    After clear: offset=%zu after=0x%02x\\n\", offset, after);\n                    }\n                }\n            }\n\n            ++bit;\n            objids >>= 1;\n        }\n\n        if (log)\n        {\n            fprintf(log, \"offset=%zu: final stored objids=0x%02x\\n\", offset, (unsigned)OSAL_set->object_ids[offset]);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Exit OS_FdSet_ConvertOut_Impl\\n\\n\");\n        fclose(log);\n    }\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/usr/bin/ld: CMakeFiles/utobj_coverage-vxworks-bsd-select.dir/__/__/os/portable/os-impl-bsd-select.c.o: in function `OS_FdSet_ConvertOut_Impl':\n/tmp/tmpvrwl2s_s/src/src/os/portable/os-impl-bsd-select.c:164: undefined reference to `OS_INDEX_C'\ncollect2: error: ld returned 1 exit status\ngmake[2]: *** [unit-test-coverage/vxworks/CMakeFiles/coverage-vxworks-bsd-select-testrunner.dir/build.make:111: unit-test-coverage/vxworks/coverage-vxworks-bsd-select-testrunner] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:2619: unit-test-coverage/vxworks/CMakeFiles/coverage-vxworks-bsd-select-testrunner.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FdSet_ConvertOut_Impl as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    /* Open the log file once for this invocation to record control flow and state */\n    FILE *log = fopen(\"/tmp/logs/803.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"Enter OS_FdSet_ConvertOut_Impl: OS_set=%p OSAL_set=%p\\n\", (void *)OS_set, (void *)OSAL_set);\n    }\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        /* capture the byte as read from the OSAL set */\n        objids = OSAL_set->object_ids[offset];\n        if (log)\n        {\n            fprintf(log, \"offset=%zu: initial objids=0x%02x\\n\", offset, (unsigned)objids);\n        }\n\n        bit    = 0;\n        while (objids != 0)\n        {\n            /* Replace undefined OS_INDEX_C with the equivalent direct index calculation */\n            id = (osal_index_t)((offset * 8) + bit);\n            if (log)\n            {\n                fprintf(log, \"  loop: offset=%zu bit=%zu objids=0x%02x id=%lu\\n\",\n                        offset, bit, (unsigned)objids, (unsigned long)id);\n            }\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                /* Evaluate FD_ISSET once and store result so we can log it */\n                int is_set = FD_ISSET(osfd, OS_set);\n                if (log)\n                {\n                    fprintf(log, \"    id=%lu osfd=%d FD_ISSET=%d\\n\", (unsigned long)id, osfd, is_set);\n                }\n\n                if (osfd < 0 || !is_set)\n                {\n                    if (log)\n                    {\n                        unsigned before = (unsigned)OSAL_set->object_ids[offset];\n                        fprintf(log, \"    Clearing bit: offset=%zu bit=%zu before=0x%02x\\n\",\n                                offset, bit, before);\n                    }\n\n                    /* preserve original behavior: clear the bit in the OSAL set */\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n\n                    if (log)\n                    {\n                        unsigned after = (unsigned)OSAL_set->object_ids[offset];\n                        fprintf(log, \"    After clear: offset=%zu after=0x%02x\\n\", offset, after);\n                    }\n                }\n            }\n\n            ++bit;\n            objids >>= 1;\n        }\n\n        if (log)\n        {\n            fprintf(log, \"offset=%zu: final stored objids=0x%02x\\n\", offset, (unsigned)OSAL_set->object_ids[offset]);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Exit OS_FdSet_ConvertOut_Impl\\n\\n\");\n        fclose(log);\n    }\n}\n",
  "explanation": "The linker error was caused by an undefined symbol OS_INDEX_C. I replaced the call to OS_INDEX_C((offset * 8) + bit) with the direct computation id = (osal_index_t)((offset * 8) + bit); which preserves the original intent (computing the index from the byte offset and bit position) and removes the dependency on the undefined symbol. No other logic was changed."
}