{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter OS_set is not modified in the function (only read via FD_ISSET) and therefore should be declared as pointing to a const-qualified type (const fd_set *OS_set). OSAL_set is modified so it must remain non-const. Thus the function signature as shown violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertOut_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/803.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FdSet_ConvertOut_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_FdSet_ConvertOut_Impl code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    /* Open the log file once for this invocation to record control flow and state */\n    FILE *log = fopen(\"/tmp/logs/803.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"Enter OS_FdSet_ConvertOut_Impl: OS_set=%p OSAL_set=%p\\n\", (void *)OS_set, (void *)OSAL_set);\n    }\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        /* capture the byte as read from the OSAL set */\n        objids = OSAL_set->object_ids[offset];\n        if (log)\n        {\n            fprintf(log, \"offset=%zu: initial objids=0x%02x\\n\", offset, (unsigned)objids);\n        }\n\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OS_INDEX_C((offset * 8) + bit);\n            if (log)\n            {\n                fprintf(log, \"  loop: offset=%zu bit=%zu objids=0x%02x id=%lu\\n\",\n                        offset, bit, (unsigned)objids, (unsigned long)id);\n            }\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                /* Evaluate FD_ISSET once and store result so we can log it */\n                int is_set = FD_ISSET(osfd, OS_set);\n                if (log)\n                {\n                    fprintf(log, \"    id=%lu osfd=%d FD_ISSET=%d\\n\", (unsigned long)id, osfd, is_set);\n                }\n\n                if (osfd < 0 || !is_set)\n                {\n                    if (log)\n                    {\n                        unsigned before = (unsigned)OSAL_set->object_ids[offset];\n                        fprintf(log, \"    Clearing bit: offset=%zu bit=%zu before=0x%02x\\n\",\n                                offset, bit, before);\n                    }\n\n                    /* preserve original behavior: clear the bit in the OSAL set */\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n\n                    if (log)\n                    {\n                        unsigned after = (unsigned)OSAL_set->object_ids[offset];\n                        fprintf(log, \"    After clear: offset=%zu after=0x%02x\\n\", offset, after);\n                    }\n                }\n            }\n\n            ++bit;\n            objids >>= 1;\n        }\n\n        if (log)\n        {\n            fprintf(log, \"offset=%zu: final stored objids=0x%02x\\n\", offset, (unsigned)OSAL_set->object_ids[offset]);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Exit OS_FdSet_ConvertOut_Impl\\n\\n\");\n        fclose(log);\n    }\n}\n"
}