{
  "user_message": "An agent A claimed that the following OS_FdSet_ConvertOut_Impl code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of OS_FdSet_ConvertOut_Impl.\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for loop header uses 'offset < sizeof(OSAL_set->object_ids)' as the second clause while the loop body modifies OSAL_set->object_ids (OSAL_set->object_ids[offset] &= ~(1 << bit);). Clause 2 of MISRA C 2023 Rule 14.2 forbids the second clause from using any object that is modified in the loop body. Even though sizeof(...) yields a compile-time quantity, the second clause syntactically uses the object that is modified in the body, so the rule is violated.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 14.2 prohibits the loop condition from depending on objects that are modified in the loop body in a way that affects termination or that introduces persistent side\u2011effects. In this for header the condition is offset < sizeof(OSAL_set->object_ids). sizeof yields a compile\u2011time size (no side effects and no runtime dependency on the contents of the array) and does not evaluate or read the array elements (except in the special case of VLAs, which this is not). The condition therefore only uses the loop counter and a constant bound and does not depend on the object that is modified in the body. The third clause only increments the loop counter. Consequently the loop is well\u2011formed with respect to MISRA C 2023 Rule 14.2 and the reported violation is not valid."
}