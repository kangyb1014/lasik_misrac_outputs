{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_SUCCESS and EXIT_SUCCESS have the same value (commonly both 0), then when OS_BSP_Global.AppStatus == OS_SUCCESS the assignment retcode = EXIT_SUCCESS is redundant: the default branch (retcode = OS_BSP_Global.AppStatus & 0x7F) would produce the same value (0). Removing this assignment (or the entire case) would not change program behaviour, so the operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_GetReturnStatus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_GetReturnStatus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetReturnStatus:\n```c\nint OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n            break;\n    }\n\n    return retcode;\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_GetReturnStatus code.\n",
  "test_code": "#include <stdio.h>\n\nint OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n    FILE *log = fopen(\"/tmp/logs/2.txt\", \"a\");\n\n    if (log)\n    {\n        /* Log entry and current application status */\n        fprintf(log, \"OS_BSP_GetReturnStatus: entry; AppStatus=%d\\n\", OS_BSP_Global.AppStatus);\n    }\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n\n            if (log)\n            {\n                /* Also compute the masked value that the default branch would produce\n                   so that observers can detect if the explicit assignment is redundant. */\n                int alt_masked = OS_BSP_Global.AppStatus & 0x7F;\n                fprintf(log,\n                        \"branch: OS_SUCCESS; AppStatus=%d, EXIT_SUCCESS=%d, alt_masked=%d, assigned_retcode=%d\\n\",\n                        OS_BSP_Global.AppStatus,\n                        EXIT_SUCCESS,\n                        alt_masked,\n                        retcode);\n            }\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n\n            if (log)\n            {\n                fprintf(log,\n                        \"branch: OS_ERROR; AppStatus=%d, EXIT_FAILURE=%d, assigned_retcode=%d\\n\",\n                        OS_BSP_Global.AppStatus,\n                        EXIT_FAILURE,\n                        retcode);\n            }\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n\n            if (log)\n            {\n                fprintf(log,\n                        \"branch: default; AppStatus=%d, masked_retcode=%d\\n\",\n                        OS_BSP_Global.AppStatus,\n                        retcode);\n            }\n            break;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_BSP_GetReturnStatus: exit; returning %d\\n\\n\", retcode);\n        fclose(log);\n    }\n\n    return retcode;\n}\n"
}