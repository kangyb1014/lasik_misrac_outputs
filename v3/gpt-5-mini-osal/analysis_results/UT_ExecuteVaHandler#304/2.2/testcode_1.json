{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'Counter = 0;' is dead because it is never used before being overwritten or before control does not return. In the subsequent code, UT_GetStubEntry is called to obtain a counter entry; if a slot is found the code immediately assigns Counter = StubPtr->Data.Rc.Count, overwriting the prior zero. If no slot is found the code calls UtAssert_Abort(\"Cannot set counter - UT_MAX_FUNC_STUBS too low?\"), which is an abort path and does not return to use the prior value. Thus removing 'Counter = 0;' would not change program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3042.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteVaHandler code.\n",
  "test_code": "void UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Local lightweight declarations so we can log without requiring headers here. */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    /* Open log file (append) and record control-flow/state useful to reproduce the reported scenario. */\n    FILE *log = fopen(\"/tmp/logs/3042.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UT_ExecuteVaHandler ENTER: FuncKey=%lu, FunctionName=%s, DefaultHandler=%p\\n\",\n                (unsigned long)FuncKey,\n                (FunctionName != NULL) ? FunctionName : \"(null)\",\n                (void *)DefaultHandler);\n    }\n\n    /* Call UT_GetStubEntry once and reuse result to avoid changing behavior (and to capture its return). */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    if (log)\n    {\n        fprintf(log, \"UT_GetStubEntry returned %p\\n\", stubEntry);\n    }\n\n    /* Preserve original logic: if no entry and a default handler exists, set it. */\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"Condition: stubEntry == NULL && DefaultHandler != NULL -> calling UT_SetVaHandlerFunction\\n\");\n        }\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n    else\n    {\n        if (log)\n        {\n            if (stubEntry != NULL)\n            {\n                fprintf(log, \"Condition: stubEntry != NULL -> not setting default handler (existing handler present)\\n\");\n            }\n            else\n            {\n                fprintf(log, \"Condition: DefaultHandler == NULL -> not setting default handler\\n\");\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"About to call UT_DefaultStubImplWithArgs: FunctionName=%s, FuncKey=%lu, ArgCount=0\\n\",\n                (FunctionName != NULL) ? FunctionName : \"(null)\", (unsigned long)FuncKey);\n        fclose(log);\n    }\n\n    /* Original behavior preserved. */\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n"
}