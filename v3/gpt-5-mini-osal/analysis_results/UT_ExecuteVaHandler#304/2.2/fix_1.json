{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Local lightweight declarations so we can log without requiring headers here. */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    /* Open log file (append) and record control-flow/state useful to reproduce the reported scenario. */\n    FILE *log = fopen(\"/tmp/logs/3042.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UT_ExecuteVaHandler ENTER: FuncKey=%lu, FunctionName=%s, DefaultHandler=%p\\n\",\n                (unsigned long)FuncKey,\n                (FunctionName != NULL) ? FunctionName : \"(null)\",\n                (void *)DefaultHandler);\n    }\n\n    /* Call UT_GetStubEntry once and reuse result to avoid changing behavior (and to capture its return). */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    if (log)\n    {\n        fprintf(log, \"UT_GetStubEntry returned %p\\n\", stubEntry);\n    }\n\n    /* Preserve original logic: if no entry and a default handler exists, set it. */\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"Condition: stubEntry == NULL && DefaultHandler != NULL -> calling UT_SetVaHandlerFunction\\n\");\n        }\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n    else\n    {\n        if (log)\n        {\n            if (stubEntry != NULL)\n            {\n                fprintf(log, \"Condition: stubEntry != NULL -> not setting default handler (existing handler present)\\n\");\n            }\n            else\n            {\n                fprintf(log, \"Condition: DefaultHandler == NULL -> not setting default handler\\n\");\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"About to call UT_DefaultStubImplWithArgs: FunctionName=%s, FuncKey=%lu, ArgCount=0\\n\",\n                (FunctionName != NULL) ? FunctionName : \"(null)\", (unsigned long)FuncKey);\n        fclose(log);\n    }\n\n    /* Original behavior preserved. */\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmprfnnvsp6/src/ut_assert/src/utstubs.c: In function 'UT_ExecuteVaHandler':\n/tmp/tmprfnnvsp6/src/ut_assert/src/utstubs.c:1277:18: error: conflicting types for 'fopen'; have 'FILE *(const char *, const char *)'\n 1277 |     extern FILE *fopen(const char *filename, const char *mode);\n      |                  ^~~~~\nIn file included from /tmp/tmprfnnvsp6/src/ut_assert/src/utstubs.c:1:\n/usr/include/stdio.h:258:14: note: previous declaration of 'fopen' with type 'FILE *(const char * restrict,  const char * restrict)'\n  258 | extern FILE *fopen (const char *__restrict __filename,\n      |              ^~~~~\n/tmp/tmprfnnvsp6/src/ut_assert/src/utstubs.c:1278:16: error: conflicting types for 'fprintf'; have 'int(FILE *, const char *, ...)'\n 1278 |     extern int fprintf(FILE *stream, const char *format, ...);\n      |                ^~~~~~~\nIn file included from /tmp/tmprfnnvsp6/src/ut_assert/src/utstubs.c:1:\n/usr/include/stdio.h:350:12: note: previous declaration of 'fprintf' with type 'int(FILE * restrict,  const char * restrict, ...)'\n  350 | extern int fprintf (FILE *__restrict __stream,\n      |            ^~~~~~~\n/tmp/tmprfnnvsp6/src/ut_assert/src/utstubs.c:1279:16: error: conflicting types for 'fclose'; have 'int(FILE *)'\n 1279 |     extern int fclose(FILE *stream);\n      |                ^~~~~~\nIn file included from /tmp/tmprfnnvsp6/src/ut_assert/src/utstubs.c:1:\n/usr/include/stdio.h:178:12: note: previous declaration of 'fclose' with type 'int(FILE *)'\n  178 | extern int fclose (FILE *__stream);\n      |            ^~~~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:104: ut_assert/CMakeFiles/ut_assert.dir/src/utstubs.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Open log file (append) and record control-flow/state useful to reproduce the reported scenario. */\n    FILE *log = fopen(\"/tmp/logs/3042.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UT_ExecuteVaHandler ENTER: FuncKey=%lu, FunctionName=%s, DefaultHandler=%p\\n\",\n                (unsigned long)FuncKey,\n                (FunctionName != NULL) ? FunctionName : \"(null)\",\n                (void *)DefaultHandler);\n    }\n\n    /* Call UT_GetStubEntry once and reuse result to avoid changing behavior (and to capture its return). */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    if (log)\n    {\n        fprintf(log, \"UT_GetStubEntry returned %p\\n\", stubEntry);\n    }\n\n    /* Preserve original logic: if no entry and a default handler exists, set it. */\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"Condition: stubEntry == NULL && DefaultHandler != NULL -> calling UT_SetVaHandlerFunction\\n\");\n        }\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n    else\n    {\n        if (log)\n        {\n            if (stubEntry != NULL)\n            {\n                fprintf(log, \"Condition: stubEntry != NULL -> not setting default handler (existing handler present)\\n\");\n            }\n            else\n            {\n                fprintf(log, \"Condition: DefaultHandler == NULL -> not setting default handler\\n\");\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"About to call UT_DefaultStubImplWithArgs: FunctionName=%s, FuncKey=%lu, ArgCount=0\\n\",\n                (FunctionName != NULL) ? FunctionName : \"(null)\", (unsigned long)FuncKey);\n        fclose(log);\n    }\n\n    /* Original behavior preserved. */\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n",
  "explanation": "The build error was caused by redeclaring standard I/O functions and the FILE type inside the function, which conflicted with the declarations in <stdio.h>. I removed the local typedef and extern declarations for fopen, fprintf, and fclose and instead included <stdio.h> (and <stdarg.h> for va_list) so the function uses the standard declarations. The original logic and behavior of UT_ExecuteVaHandler are preserved."
}