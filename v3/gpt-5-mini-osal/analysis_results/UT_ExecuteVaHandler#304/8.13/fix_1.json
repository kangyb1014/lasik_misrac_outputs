{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void UT_AppendLogFormatted(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t now = time(NULL);\n    if (now != (time_t)-1)\n    {\n        struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n        localtime_r(&now, &tm_buf);\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm_buf.tm_year + 1900,\n                tm_buf.tm_mon + 1,\n                tm_buf.tm_mday,\n                tm_buf.tm_hour,\n                tm_buf.tm_min,\n                tm_buf.tm_sec);\n#else\n        {\n            struct tm *t = localtime(&now);\n            if (t != NULL)\n            {\n                fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                        t->tm_year + 1900,\n                        t->tm_mon + 1,\n                        t->tm_mday,\n                        t->tm_hour,\n                        t->tm_min,\n                        t->tm_sec);\n            }\n        }\n#endif\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void UT_LogHexBuffer(const void *buf, size_t n)\n{\n    /* Write a short hex dump (up to 64 bytes) of the buffer to the log. */\n    const unsigned char *b = (const unsigned char *)buf;\n    size_t i, limit = (n > 64U) ? 64U : n;\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    for (i = 0; i < limit; ++i)\n    {\n        fprintf(f, \"%02X\", b[i]);\n        if ((i + 1U) % 16U == 0U && (i + 1U) < limit)\n        {\n            fprintf(f, \"\\n\");\n        }\n        else if ((i + 1U) < limit)\n        {\n            fprintf(f, \" \");\n        }\n    }\n    if (n > limit)\n    {\n        fprintf(f, \" ... (%zu bytes total)\", n);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void UT_LogExecuteVaHandlerProbe(UT_EntryKey_t FuncKey, const char *FunctionName,\n                                        UT_VaHandlerFunc_t DefaultHandler, const void *StubEntry,\n                                        const void *VaListAddr, size_t VaListSize)\n{\n    uintptr_t fk = (uintptr_t)FuncKey;\n    uintptr_t dh = (uintptr_t)DefaultHandler;\n    uintptr_t se = (uintptr_t)StubEntry;\n\n    UT_AppendLogFormatted(\"UT_ExecuteVaHandler ENTER: FuncKey=0x%08\" PRIxPTR \", FunctionName=%p (%s), DefaultHandler=%p, StubEntry=%p\",\n                          fk, (const void *)FunctionName, (FunctionName != NULL) ? FunctionName : \"(null)\", (void *)dh, (void *)se);\n\n    /* Log whether we would set the default handler */\n    UT_AppendLogFormatted(\"Decision inputs: StubEntry_is_NULL=%s, DefaultHandler_is_NULL=%s\",\n                          (StubEntry == NULL) ? \"true\" : \"false\",\n                          (DefaultHandler == NULL) ? \"true\" : \"false\");\n\n    /* Log a small raw representation of the va_list object passed in. */\n    UT_AppendLogFormatted(\"va_list size=%zu bytes; raw contents (hex):\", VaListSize);\n    UT_LogHexBuffer(VaListAddr, VaListSize);\n}\n\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Cache the stub entry so we can log it without changing logic. */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    /* Probe/log the current state. Use memcpy to capture the raw bytes of the\n     * va_list object so callers can examine its representation. */\n    unsigned char va_buf[sizeof(VaList)];\n    /* Copy raw va_list object representation into va_buf for logging. */\n    memcpy(va_buf, &VaList, sizeof(VaList));\n\n    UT_LogExecuteVaHandlerProbe(FuncKey, FunctionName, DefaultHandler, stubEntry,\n                                va_buf, sizeof(VaList));\n\n    /* Check if the test case registered a hook, and use the default if not */\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        UT_AppendLogFormatted(\"Setting default VA handler for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_AppendLogFormatted(\"Calling UT_DefaultStubImplWithArgs: FunctionName=%p, FuncKey=0x%08\" PRIxPTR,\n                          (const void *)FunctionName, (uintptr_t)FuncKey);\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    UT_AppendLogFormatted(\"UT_DefaultStubImplWithArgs returned for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c: In function 'UT_LogExecuteVaHandlerProbe':\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c:1358:69: error: expected ')' before 'PRIxPTR'\n 1358 |     UT_AppendLogFormatted(\"UT_ExecuteVaHandler ENTER: FuncKey=0x%08\" PRIxPTR \", FunctionName=%p (%s), DefaultHandler=%p, StubEntry=%p\",\n      |                          ~                                          ^~~~~~~~\n      |                                                                     )\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c:54:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   53 | #include \"utbsp.h\"\n  +++ |+#include <inttypes.h>\n   54 | \n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c: In function 'UT_ExecuteVaHandler':\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c:1389:77: error: expected ')' before 'PRIxPTR'\n 1389 |         UT_AppendLogFormatted(\"Setting default VA handler for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n      |                              ~                                              ^~~~~~~~\n      |                                                                             )\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c:1389:78: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n 1389 |         UT_AppendLogFormatted(\"Setting default VA handler for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n      |                                                                              ^~~~~~~\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c:1393:95: error: expected ')' before 'PRIxPTR'\n 1393 |     UT_AppendLogFormatted(\"Calling UT_DefaultStubImplWithArgs: FunctionName=%p, FuncKey=0x%08\" PRIxPTR,\n      |                          ~                                                                    ^~~~~~~~\n      |                                                                                               )\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c:1393:96: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n 1393 |     UT_AppendLogFormatted(\"Calling UT_DefaultStubImplWithArgs: FunctionName=%p, FuncKey=0x%08\" PRIxPTR,\n      |                                                                                                ^~~~~~~\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c:1398:82: error: expected ')' before 'PRIxPTR'\n 1398 |     UT_AppendLogFormatted(\"UT_DefaultStubImplWithArgs returned for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n      |                          ~                                                       ^~~~~~~~\n      |                                                                                  )\n/tmp/tmpww5gh2f1/src/ut_assert/src/utstubs.c:1398:83: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n 1398 |     UT_AppendLogFormatted(\"UT_DefaultStubImplWithArgs returned for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n      |                                                                                   ^~~~~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:104: ut_assert/CMakeFiles/ut_assert.dir/src/utstubs.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <inttypes.h>\n\nstatic void UT_AppendLogFormatted(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t now = time(NULL);\n    if (now != (time_t)-1)\n    {\n        struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n        localtime_r(&now, &tm_buf);\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm_buf.tm_year + 1900,\n                tm_buf.tm_mon + 1,\n                tm_buf.tm_mday,\n                tm_buf.tm_hour,\n                tm_buf.tm_min,\n                tm_buf.tm_sec);\n#else\n        {\n            struct tm *t = localtime(&now);\n            if (t != NULL)\n            {\n                fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                        t->tm_year + 1900,\n                        t->tm_mon + 1,\n                        t->tm_mday,\n                        t->tm_hour,\n                        t->tm_min,\n                        t->tm_sec);\n            }\n        }\n#endif\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void UT_LogHexBuffer(const void *buf, size_t n)\n{\n    /* Write a short hex dump (up to 64 bytes) of the buffer to the log. */\n    const unsigned char *b = (const unsigned char *)buf;\n    size_t i, limit = (n > 64U) ? 64U : n;\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    for (i = 0; i < limit; ++i)\n    {\n        fprintf(f, \"%02X\", b[i]);\n        if ((i + 1U) % 16U == 0U && (i + 1U) < limit)\n        {\n            fprintf(f, \"\\n\");\n        }\n        else if ((i + 1U) < limit)\n        {\n            fprintf(f, \" \");\n        }\n    }\n    if (n > limit)\n    {\n        fprintf(f, \" ... (%zu bytes total)\", n);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void UT_LogExecuteVaHandlerProbe(UT_EntryKey_t FuncKey, const char *FunctionName,\n                                        UT_VaHandlerFunc_t DefaultHandler, const void *StubEntry,\n                                        const void *VaListAddr, size_t VaListSize)\n{\n    uintptr_t fk = (uintptr_t)FuncKey;\n    uintptr_t dh = (uintptr_t)DefaultHandler;\n    uintptr_t se = (uintptr_t)StubEntry;\n\n    UT_AppendLogFormatted(\"UT_ExecuteVaHandler ENTER: FuncKey=0x%08\" PRIxPTR \", FunctionName=%p (%s), DefaultHandler=%p, StubEntry=%p\",\n                          fk, (const void *)FunctionName, (FunctionName != NULL) ? FunctionName : \"(null)\", (void *)dh, (void *)se);\n\n    /* Log whether we would set the default handler */\n    UT_AppendLogFormatted(\"Decision inputs: StubEntry_is_NULL=%s, DefaultHandler_is_NULL=%s\",\n                          (StubEntry == NULL) ? \"true\" : \"false\",\n                          (DefaultHandler == NULL) ? \"true\" : \"false\");\n\n    /* Log a small raw representation of the va_list object passed in. */\n    UT_AppendLogFormatted(\"va_list size=%zu bytes; raw contents (hex):\", VaListSize);\n    UT_LogHexBuffer(VaListAddr, VaListSize);\n}\n\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Cache the stub entry so we can log it without changing logic. */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    /* Probe/log the current state. Use memcpy to capture the raw bytes of the\n     * va_list object so callers can examine its representation. */\n    unsigned char va_buf[sizeof(VaList)];\n    /* Copy raw va_list object representation into va_buf for logging. */\n    memcpy(va_buf, &VaList, sizeof(VaList));\n\n    UT_LogExecuteVaHandlerProbe(FuncKey, FunctionName, DefaultHandler, stubEntry,\n                                va_buf, sizeof(VaList));\n\n    /* Check if the test case registered a hook, and use the default if not */\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        UT_AppendLogFormatted(\"Setting default VA handler for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_AppendLogFormatted(\"Calling UT_DefaultStubImplWithArgs: FunctionName=%p, FuncKey=0x%08\" PRIxPTR,\n                          (const void *)FunctionName, (uintptr_t)FuncKey);\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    UT_AppendLogFormatted(\"UT_DefaultStubImplWithArgs returned for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n}\n",
  "explanation": "The compilation errors were caused by use of the PRIxPTR macro without including <inttypes.h>. I added #include <inttypes.h> at the top of the file so the PRIxPTR macro is defined. No other logic or formatting changes were made; the original behavior is preserved."
}