{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy call reads from StubPtr->Data.Rvc.Buf.IndirectPtr but that member is typically declared as a non-const pointer (e.g. void *IndirectPtr). Since the buffer is only being read here, the pointer should be const-qualified (const void *IndirectPtr). Passing a non-const pointer where a const-qualified pointer is appropriate violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3043.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteVaHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Helper: log formatted messages to /tmp/logs/3043.txt. */\nstatic void UT_LogMessage(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure log directory exists (ignore errors if it already exists) */\n    (void)mkdir(\"/tmp/logs\", (mode_t)0777);\n\n    fp = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging, do not change program behaviour */\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    (void)fputc('\\n', fp);\n    va_end(ap);\n\n    (void)fclose(fp);\n}\n\n/* Probe: log the incoming va_list state as an opaque pointer/address. */\nstatic void UT_LogVaList(const char *label, const va_list *vlist)\n{\n    /* Print the address and a small sample of the raw bytes of the va_list object\n       to help reproduce how the caller formed the argument list. This is best-effort\n       and keeps the original behaviour unchanged. */\n    const unsigned char *p = (const unsigned char *)vlist;\n    size_t i;\n\n    UT_LogMessage(\"%s: va_list address=%p\", label, (const void *)vlist);\n\n    /* Log up to 32 bytes of the va_list object representation (safe read) */\n    for (i = 0; i < sizeof(*vlist) && i < 32U; ++i)\n    {\n        UT_LogMessage(\"%s: va_list[%02u]=0x%02x\", label, (unsigned)i, (unsigned)p[i]);\n    }\n}\n\n/* The original function with inserted probes. */\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    void *entry;\n\n    UT_LogMessage(\"ENTER: UT_ExecuteVaHandler: FunctionName=%s, FuncKey=%p, DefaultHandler=%p\",\n                  (FunctionName != NULL) ? FunctionName : \"(null)\", (const void *)(uintptr_t)FuncKey,\n                  (const void *)DefaultHandler);\n\n    /* Log the incoming va_list state (opaque) */\n    UT_LogVaList(\"Before_GetStubEntry_va_list\", &VaList);\n\n    /* Check if the test case registered a hook, and use the default if not */\n    entry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    if (entry == NULL)\n    {\n        UT_LogMessage(\"UT_GetStubEntry returned NULL for FuncKey=%p\", (const void *)(uintptr_t)FuncKey);\n    }\n    else\n    {\n        UT_LogMessage(\"UT_GetStubEntry returned non-NULL (entry=%p) for FuncKey=%p\", entry,\n                      (const void *)(uintptr_t)FuncKey);\n    }\n\n    if (entry == NULL && DefaultHandler != NULL)\n    {\n        UT_LogMessage(\"Setting VaHandlerFunction for FuncKey=%p with DefaultHandler=%p\", (const void *)(uintptr_t)FuncKey,\n                      (const void *)DefaultHandler);\n\n        /* Preserve original behaviour */\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n\n        UT_LogMessage(\"UT_SetVaHandlerFunction returned for FuncKey=%p\", (const void *)(uintptr_t)FuncKey);\n    }\n\n    UT_LogMessage(\"Calling UT_DefaultStubImplWithArgs: FunctionName=%s, FuncKey=%p, argCount=0, VaList=%p\",\n                  (FunctionName != NULL) ? FunctionName : \"(null)\", (const void *)(uintptr_t)FuncKey,\n                  (const void *)&VaList);\n\n    /* Log va_list again just prior to calling the default impl */\n    UT_LogVaList(\"Before_DefaultStubImpl_va_list\", &VaList);\n\n    /* Preserve original behaviour */\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    UT_LogMessage(\"EXIT: UT_ExecuteVaHandler: FunctionName=%s, FuncKey=%p\",\n                  (FunctionName != NULL) ? FunctionName : \"(null)\", (const void *)(uintptr_t)FuncKey);\n}\n"
}