{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &RvcPtr->Data.Rvc.Buf to UT_LoadRetval. If UT_LoadRetval's prototype declares that parameter as a non-const pointer (e.g. UT_ValueBuf_t *buf), then the code violates MISRA C 2023 Rule 8.13 because the pointer could and should be to a const-qualified type (const UT_ValueBuf_t *), given that the call is providing a source buffer that is not intended to be modified. To fix, change the UT_LoadRetval parameter to accept a const-qualified pointer (e.g. const UT_ValueBuf_t *), or otherwise ensure the pointer is const where appropriate.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3043.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteVaHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <time.h>\n\n/*\n * Probe/log helper functions. These are intentionally static and minimal so they\n * do not change the behavior of UT_ExecuteVaHandler. They append diagnostic\n * information to /tmp/logs/3043.txt to help reproduce and observe the\n * control flow and state relevant to the reported rule violation scenario.\n *\n * NOTE: This file assumes the surrounding build provides the types\n * UT_EntryKey_t and UT_VaHandlerFunc_t and the functions\n * UT_GetStubEntry, UT_SetVaHandlerFunction, and UT_DefaultStubImplWithArgs.\n */\n\nstatic void UT_AppendLogFormatted(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t now = time(NULL);\n    if (now != (time_t)-1)\n    {\n        struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n        localtime_r(&now, &tm_buf);\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm_buf.tm_year + 1900,\n                tm_buf.tm_mon + 1,\n                tm_buf.tm_mday,\n                tm_buf.tm_hour,\n                tm_buf.tm_min,\n                tm_buf.tm_sec);\n#else\n        {\n            struct tm *t = localtime(&now);\n            if (t != NULL)\n            {\n                fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                        t->tm_year + 1900,\n                        t->tm_mon + 1,\n                        t->tm_mday,\n                        t->tm_hour,\n                        t->tm_min,\n                        t->tm_sec);\n            }\n        }\n#endif\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void UT_LogHexBuffer(const void *buf, size_t n)\n{\n    /* Write a short hex dump (up to 64 bytes) of the buffer to the log. */\n    const unsigned char *b = (const unsigned char *)buf;\n    size_t i, limit = (n > 64U) ? 64U : n;\n    FILE *f = fopen(\"/tmp/logs/3043.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    for (i = 0; i < limit; ++i)\n    {\n        fprintf(f, \"%02X\", b[i]);\n        if ((i + 1U) % 16U == 0U && (i + 1U) < limit)\n        {\n            fprintf(f, \"\\n\");\n        }\n        else if ((i + 1U) < limit)\n        {\n            fprintf(f, \" \");\n        }\n    }\n    if (n > limit)\n    {\n        fprintf(f, \" ... (%zu bytes total)\", n);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * High level probe that logs key state information relevant to the decision\n * point and the va_list contents (as raw bytes). The function signature is\n * intentionally matching the types used by UT_ExecuteVaHandler so the call is\n * straightforward and does not change behavior.\n */\nstatic void UT_LogExecuteVaHandlerProbe(UT_EntryKey_t FuncKey, const char *FunctionName,\n                                        UT_VaHandlerFunc_t DefaultHandler, const void *StubEntry,\n                                        const void *VaListAddr, size_t VaListSize)\n{\n    uintptr_t fk = (uintptr_t)FuncKey;\n    uintptr_t dh = (uintptr_t)DefaultHandler;\n    uintptr_t se = (uintptr_t)StubEntry;\n\n    UT_AppendLogFormatted(\"UT_ExecuteVaHandler ENTER: FuncKey=0x%08\" PRIxPTR \", FunctionName=%p (%s), DefaultHandler=%p, StubEntry=%p\",\n                          fk, (const void *)FunctionName, (FunctionName != NULL) ? FunctionName : \"(null)\", (void *)dh, (void *)se);\n\n    /* Log whether we would set the default handler */\n    UT_AppendLogFormatted(\"Decision inputs: StubEntry_is_NULL=%s, DefaultHandler_is_NULL=%s\",\n                          (StubEntry == NULL) ? \"true\" : \"false\",\n                          (DefaultHandler == NULL) ? \"true\" : \"false\");\n\n    /* Log a small raw representation of the va_list object passed in. */\n    UT_AppendLogFormatted(\"va_list size=%zu bytes; raw contents (hex):\", VaListSize);\n    UT_LogHexBuffer(VaListAddr, VaListSize);\n}\n\n/*\n * The original function, augmented with logging probes. The original control\n * flow and calls are preserved. We cache the result of UT_GetStubEntry to\n * avoid calling it twice (no change in observable behavior otherwise).\n */\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Cache the stub entry so we can log it without changing logic. */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    /* Probe/log the current state. Use memcpy to capture the raw bytes of the\n     * va_list object so callers can examine its representation. */\n    unsigned char va_buf[sizeof(VaList)];\n    /* Copy raw va_list object representation into va_buf for logging. */\n    memcpy(va_buf, &VaList, sizeof(VaList));\n\n    UT_LogExecuteVaHandlerProbe(FuncKey, FunctionName, DefaultHandler, stubEntry,\n                                va_buf, sizeof(VaList));\n\n    /* Check if the test case registered a hook, and use the default if not */\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        UT_AppendLogFormatted(\"Setting default VA handler for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_AppendLogFormatted(\"Calling UT_DefaultStubImplWithArgs: FunctionName=%p, FuncKey=0x%08\" PRIxPTR,\n                          (const void *)FunctionName, (uintptr_t)FuncKey);\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    UT_AppendLogFormatted(\"UT_DefaultStubImplWithArgs returned for FuncKey=0x%08\" PRIxPTR, (uintptr_t)FuncKey);\n}\n"
}