{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. Calling strrchr(File, '/') assumes File points to a valid NUL-terminated string. The code only checks File != NULL, not that the object is NUL-terminated or that the search will remain inside the object bounds. If a caller passes a non\u2011terminated buffer (e.g. char buf[4] = {'a','b','c','d'}; UtAssert_Message(..., buf, ...)) or a pointer into a buffer that lacks a terminating '\\0' before its end, strrchr may read past the object boundary searching for '\\0', causing an out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3049.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteVaHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Probe logger for UT_ExecuteVaHandler. Writes append-only logs to /tmp/logs/3049.txt.\n   This helper tries to avoid dereferencing unknown pointers to prevent introducing new\n   out-of-bounds accesses. It records pointer values and decisions made by the function\n   so a later offline analysis can correlate inputs/outputs and reproduce the violation.\n*/\nstatic void UT_ExecuteVaHandler_Log(const char *stage, unsigned long FuncKey,\n                                   const char *FunctionName, const void *DefaultHandler,\n                                   const void *VaListAddr, int stub_was_null, int set_handler)\n{\n    FILE *f = fopen(\"/tmp/logs/3049.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do nothing to preserve original behavior. */\n        return;\n    }\n\n    /* Log a concise line with key pointer/state information. Avoid dereferencing\n       caller-supplied pointers (FunctionName, VaList contents, etc.) to prevent\n       introducing any new out-of-bounds reads. */\n    fprintf(f, \"[UT_ExecuteVaHandler] %s: FuncKey=%lu, FunctionName=%p, DefaultHandler=%p, VaListAddr=%p, stub_was_null=%d, set_handler=%d\\n\",\n            stage, (unsigned long)FuncKey, (const void *)FunctionName, DefaultHandler, VaListAddr, stub_was_null, set_handler);\n\n    fclose(f);\n}\n\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Probe: check the stub entry once and reuse the result so we can log it. */\n    void *stub_entry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    int stub_was_null = (stub_entry == NULL) ? 1 : 0;\n    int did_set_handler = 0;\n\n    /* Log entry into the function and the immediate state. We pass the address of the\n       local VaList variable to help correlate logs with the actual va_list passed by the caller.\n       We do NOT attempt to inspect VaList contents here because doing so could cause UB if the\n       types/number of arguments are unknown. */\n    UT_ExecuteVaHandler_Log(\"enter\", (unsigned long)FuncKey, FunctionName, (const void *)DefaultHandler, (const void *)&VaList, stub_was_null, did_set_handler);\n\n    /* Check if the test case registered a hook, and use the default if not */\n    if (stub_entry == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n        did_set_handler = 1;\n\n        /* Log that we set the handler. */\n        UT_ExecuteVaHandler_Log(\"set_handler\", (unsigned long)FuncKey, FunctionName, (const void *)DefaultHandler, (const void *)&VaList, stub_was_null, did_set_handler);\n    }\n\n    /* Log right before calling the default stub implementation. This is a key point where\n       downstream code may inspect string pointers taken from VaList (e.g. calling strrchr).\n       The log helps reproduce the control flow and tie any later-out-of-bounds reads back\n       to the VaList that was provided. */\n    UT_ExecuteVaHandler_Log(\"before_default_impl\", (unsigned long)FuncKey, FunctionName, (const void *)DefaultHandler, (const void *)&VaList, stub_was_null, did_set_handler);\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    /* Log after invoking the default implementation to record that the function returned. */\n    UT_ExecuteVaHandler_Log(\"exit\", (unsigned long)FuncKey, FunctionName, (const void *)DefaultHandler, (const void *)&VaList, stub_was_null, did_set_handler);\n}\n"
}