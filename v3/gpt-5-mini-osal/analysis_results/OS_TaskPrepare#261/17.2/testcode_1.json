{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_NotifyEvent invokes a function pointer OS_SharedGlobalVars.EventHandler without any protection against the handler calling back into OS_NotifyEvent. If the event handler is set to OS_NotifyEvent itself (OS_SharedGlobalVars.EventHandler = OS_NotifyEvent) or to any handler that calls OS_NotifyEvent, this produces indirect recursion (OS_NotifyEvent -> EventHandler -> OS_NotifyEvent ...), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2616.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskPrepare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function: appends textual logs to /tmp/logs/2616.txt */\nstatic void OS_TaskPrepare_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2616.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    OS_TaskPrepare_Log(\"ENTER OS_TaskPrepare: task_id=%d, entrypt=%p\", (int)task_id, (void *)entrypt);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    OS_TaskPrepare_Log(\"After OS_ObjectIdGetById: return_code=%d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        OS_TaskPrepare_Log(\"After OS_TaskMatch_Impl: return_code=%d\", (int)return_code);\n\n        *entrypt    = task->entry_function_pointer;\n        OS_TaskPrepare_Log(\"Assigned entrypt = task->entry_function_pointer -> %p\", (void *)task->entry_function_pointer);\n\n        OS_ObjectIdRelease(&token);\n        OS_TaskPrepare_Log(\"Called OS_ObjectIdRelease for token\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        OS_TaskPrepare_Log(\"After OS_TaskRegister_Impl: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        OS_TaskPrepare_Log(\"About to call OS_NotifyEvent for OS_EVENT_TASK_STARTUP, task_id=%d\", (int)task_id);\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        OS_TaskPrepare_Log(\"After OS_NotifyEvent: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n        OS_TaskPrepare_Log(\"Failure path: set *entrypt = NULL, final return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        OS_TaskPrepare_Log(\"Success path: final return_code=%d, *entrypt=%p\", (int)return_code, (void *)*entrypt);\n    }\n\n    OS_TaskPrepare_Log(\"EXIT OS_TaskPrepare: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}