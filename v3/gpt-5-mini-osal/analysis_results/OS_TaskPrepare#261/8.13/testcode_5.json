{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'data' is declared as void * but is not modified inside OS_NotifyEvent (it is only forwarded to the EventHandler). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible. Thus the prototype should be int32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, const void *data) (and the EventHandler callback type should accept a const void * as well). As written, the non-const void * parameter violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskPrepare code.\n",
  "test_code": "static int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Local prototypes for minimal logging without including stdio.h */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    /* Open log file for append. Keep logging non-intrusive to original logic. */\n    FILE *logf = fopen(\"/tmp/logs/2613.txt\", \"a\");\n    if (logf != (FILE *)0)\n    {\n        fprintf(logf, \"OS_TaskPrepare: entry start; task_id=%ld, entrypt=%p\\n\", (long)task_id, (void *)entrypt);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: ObjectIdGetById succeeded; token obtained\\n\");\n        }\n\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: matched task; entry_function_pointer assigned, task=%p\\n\", (void *)task);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: ObjectIdGetById failed; return_code=%ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: TaskRegister_Impl returned %ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        if (logf != (FILE *)0)\n        {\n            /* Log the exact call-site and the data pointer value (this is the focus of the reported violation). */\n            fprintf(logf, \"OS_TaskPrepare: About to call OS_NotifyEvent(event=OS_EVENT_TASK_STARTUP, object_id=%ld, data=%p)\\n\", (long)task_id, (void *)NULL);\n        }\n\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: OS_NotifyEvent returned %ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: failure path; setting *entrypt = NULL; final return_code=%ld\\n\", (long)return_code);\n        }\n\n        *entrypt = NULL;\n    }\n\n    if (logf != (FILE *)0)\n    {\n        fprintf(logf, \"OS_TaskPrepare: exit; returning %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}