{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskMatch_Impl the variable 'impl' is declared as a non-const pointer but is only used to read data from the implementation task table. The fragment impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token); yields a pointer into a global table; the function only reads impl->id and does not modify the pointed-to data. Therefore the pointer could and should be declared to point to a const-qualified type (const OS_impl_task_internal_record_t *impl).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskPrepare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe/log helper: append lines to the evidence file. */\nstatic void OS_TaskPrepare_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2613.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry into the function */\n    OS_TaskPrepare_Log(\"OS_TaskPrepare: enter task_id=%lu\", (unsigned long)task_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    OS_TaskPrepare_Log(\"OS_TaskPrepare: OS_ObjectIdGetById -> return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: task table lookup -> task_ptr=%p, entry_function_pointer=%p\", (void *)task, (void *)task->entry_function_pointer);\n\n        /* Log state just before calling OS_TaskMatch_Impl */\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: calling OS_TaskMatch_Impl with token_addr=%p\", (void *)&token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n\n        /* After OS_TaskMatch_Impl, log the result */\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: OS_TaskMatch_Impl returned %ld\", (long)return_code);\n\n        /* Attempt to observe the implementation table entry that OS_TaskMatch_Impl would inspect\n         * (The implementation function typically does: impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n         * Here we attempt the analogous lookup using the same token value and log the impl pointer and id\n         * to provide evidence about whether the implementation record is only read. */\n        {\n            /* Try to obtain a pointer into the implementation table for observation. */\n            OS_impl_task_internal_record_t *impl = NULL;\n\n            /* Use the same table lookup convention as used elsewhere in the code base. */\n            impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, token);\n\n            if (impl != NULL)\n            {\n                /* Log address and the id field (read-only observation). */\n                OS_TaskPrepare_Log(\"OS_TaskPrepare: observed impl -> ptr=%p, id=%ld\", (void *)impl, (long)impl->id);\n            }\n            else\n            {\n                OS_TaskPrepare_Log(\"OS_TaskPrepare: observed impl -> ptr=NULL\");\n            }\n        }\n\n        *entrypt    = task->entry_function_pointer;\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: set *entrypt to %p\", (void *)*entrypt);\n\n        OS_ObjectIdRelease(&token);\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: released token_addr=%p\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: calling OS_TaskRegister_Impl for task_id=%lu\", (unsigned long)task_id);\n        return_code = OS_TaskRegister_Impl(task_id);\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: OS_TaskRegister_Impl returned %ld\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: calling OS_NotifyEvent for task_id=%lu\", (unsigned long)task_id);\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: OS_NotifyEvent returned %ld\", (long)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: failure path -> return_code=%ld, cleared *entrypt\", (long)return_code);\n    }\n    else\n    {\n        OS_TaskPrepare_Log(\"OS_TaskPrepare: success path -> return_code=%ld\", (long)return_code);\n    }\n\n    OS_TaskPrepare_Log(\"OS_TaskPrepare: exit return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}