{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Local prototypes for minimal logging without including stdio.h */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    /* Open log file for append. Keep logging non-intrusive to original logic. */\n    FILE *logf = fopen(\"/tmp/logs/2613.txt\", \"a\");\n    if (logf != (FILE *)0)\n    {\n        fprintf(logf, \"OS_TaskPrepare: entry start; task_id=%ld, entrypt=%p\\n\", (long)task_id, (void *)entrypt);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: ObjectIdGetById succeeded; token obtained\\n\");\n        }\n\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: matched task; entry_function_pointer assigned, task=%p\\n\", (void *)task);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: ObjectIdGetById failed; return_code=%ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: TaskRegister_Impl returned %ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        if (logf != (FILE *)0)\n        {\n            /* Log the exact call-site and the data pointer value (this is the focus of the reported violation). */\n            fprintf(logf, \"OS_TaskPrepare: About to call OS_NotifyEvent(event=OS_EVENT_TASK_STARTUP, object_id=%ld, data=%p)\\n\", (long)task_id, (void *)NULL);\n        }\n\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: OS_NotifyEvent returned %ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: failure path; setting *entrypt = NULL; final return_code=%ld\\n\", (long)return_code);\n        }\n\n        *entrypt = NULL;\n    }\n\n    if (logf != (FILE *)0)\n    {\n        fprintf(logf, \"OS_TaskPrepare: exit; returning %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp_ea9mcn5/src/src/os/shared/src/osapi-task.c: In function 'OS_TaskPrepare':\n/tmp/tmp_ea9mcn5/src/src/os/shared/src/osapi-task.c:92:18: error: conflicting types for 'fopen'; have 'FILE *(const char *, const char *)'\n   92 |     extern FILE *fopen(const char *filename, const char *mode);\n      |                  ^~~~~\nIn file included from /tmp/tmp_ea9mcn5/src/src/os/shared/src/osapi-task.c:1:\n/usr/include/stdio.h:258:14: note: previous declaration of 'fopen' with type 'FILE *(const char * restrict,  const char * restrict)'\n  258 | extern FILE *fopen (const char *__restrict __filename,\n      |              ^~~~~\n/tmp/tmp_ea9mcn5/src/src/os/shared/src/osapi-task.c:93:16: error: conflicting types for 'fprintf'; have 'int(FILE *, const char *, ...)'\n   93 |     extern int fprintf(FILE *stream, const char *format, ...);\n      |                ^~~~~~~\nIn file included from /tmp/tmp_ea9mcn5/src/src/os/shared/src/osapi-task.c:1:\n/usr/include/stdio.h:350:12: note: previous declaration of 'fprintf' with type 'int(FILE * restrict,  const char * restrict, ...)'\n  350 | extern int fprintf (FILE *__restrict __stream,\n      |            ^~~~~~~\n/tmp/tmp_ea9mcn5/src/src/os/shared/src/osapi-task.c:94:16: error: conflicting types for 'fclose'; have 'int(FILE *)'\n   94 |     extern int fclose(FILE *stream);\n      |                ^~~~~~\nIn file included from /tmp/tmp_ea9mcn5/src/src/os/shared/src/osapi-task.c:1:\n/usr/include/stdio.h:178:12: note: previous declaration of 'fclose' with type 'int(FILE *)'\n  178 | extern int fclose (FILE *__stream);\n      |            ^~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:342: CMakeFiles/osal.dir/src/os/shared/src/osapi-task.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Open log file for append. Keep logging non-intrusive to original logic. */\n    FILE *logf = fopen(\"/tmp/logs/2613.txt\", \"a\");\n    if (logf != (FILE *)0)\n    {\n        fprintf(logf, \"OS_TaskPrepare: entry start; task_id=%ld, entrypt=%p\\n\", (long)task_id, (void *)entrypt);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: ObjectIdGetById succeeded; token obtained\\n\");\n        }\n\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: matched task; entry_function_pointer assigned, task=%p\\n\", (void *)task);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: ObjectIdGetById failed; return_code=%ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: TaskRegister_Impl returned %ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        if (logf != (FILE *)0)\n        {\n            /* Log the exact call-site and the data pointer value (this is the focus of the reported violation). */\n            fprintf(logf, \"OS_TaskPrepare: About to call OS_NotifyEvent(event=OS_EVENT_TASK_STARTUP, object_id=%ld, data=%p)\\n\", (long)task_id, (void *)NULL);\n        }\n\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: OS_NotifyEvent returned %ld\\n\", (long)return_code);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (logf != (FILE *)0)\n        {\n            fprintf(logf, \"OS_TaskPrepare: failure path; setting *entrypt = NULL; final return_code=%ld\\n\", (long)return_code);\n        }\n\n        *entrypt = NULL;\n    }\n\n    if (logf != (FILE *)0)\n    {\n        fprintf(logf, \"OS_TaskPrepare: exit; returning %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n",
  "explanation": "The compile error was caused by redeclaring stdio functions/types (FILE, fopen, fprintf, fclose) that are already declared in <stdio.h>. I removed the local typedef and extern prototypes so the function uses the standard declarations from the included headers. No other logic was changed."
}