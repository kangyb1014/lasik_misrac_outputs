{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses StaticSym, which is declared as OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; The code only reads members of the pointed-to records (Name, Module, Address) and never modifies the pointee, so the pointer should be to a const-qualified type. Therefore StaticSym should be declared as const OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; (++StaticSym is permitted because the const applies to the pointee, not the pointer itself.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Log start state */\n    {\n        FILE *log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"[START] OS_SymbolLookup_Static: StaticSym=%p, SymbolName=\\\"%s\\\", ModuleName=\\\"%s\\\"\\n\",\n                    (void *)StaticSym,\n                    (SymbolName != NULL) ? SymbolName : \"(null)\",\n                    (ModuleName != NULL) ? ModuleName : \"(null)\");\n            fclose(log);\n        }\n    }\n\n    size_t iteration = 0u;\n    while (StaticSym != NULL)\n    {\n        /* Log loop entry and current record contents (Name/Module/Address may be NULL) */\n        {\n            const char *name = (StaticSym->Name != NULL) ? StaticSym->Name : \"(null)\";\n            const char *module = (StaticSym->Module != NULL) ? StaticSym->Module : \"(null)\";\n            void *addr = (void *)StaticSym->Address;\n\n            FILE *log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"[ITER %u] StaticSym=%p, Name=\\\"%s\\\", Module=\\\"%s\\\", Address=%p\\n\",\n                        (unsigned)iteration, (void *)StaticSym, name, module, addr);\n                fclose(log);\n            }\n        }\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            {\n                FILE *log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"[ITER %u] Name == NULL => end of list, setting return_code = OS_ERROR\\n\", (unsigned)iteration);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_ERROR;\n            break;\n        }\n\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"[ITER %u] MATCH: Name=\\\"%s\\\", Module=\\\"%s\\\", Assigned Address=%p, setting return_code = OS_SUCCESS\\n\",\n                            (unsigned)iteration,\n                            StaticSym->Name,\n                            (StaticSym->Module != NULL) ? StaticSym->Module : \"(null)\",\n                            (void *)StaticSym->Address);\n                    fclose(log);\n                }\n            }\n\n            break;\n        }\n\n        /* Log that this record did not match */\n        {\n            FILE *log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"[ITER %u] NO MATCH: Name=\\\"%s\\\" (compared to \\\"%s\\\"), moving to next record\\n\",\n                        (unsigned)iteration,\n                        (StaticSym->Name != NULL) ? StaticSym->Name : \"(null)\",\n                        (SymbolName != NULL) ? SymbolName : \"(null)\");\n                fclose(log);\n            }\n        }\n\n        ++StaticSym;\n        ++iteration;\n    }\n\n    /* Log exit state */\n    {\n        FILE *log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"[END] OS_SymbolLookup_Static: return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}