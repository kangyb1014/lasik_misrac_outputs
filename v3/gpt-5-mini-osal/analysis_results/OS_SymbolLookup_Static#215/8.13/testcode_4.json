{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment violates MISRA C 2023 Rule 8.13 if the struct members StaticSym->Name or StaticSym->Module are declared as non-const pointers (e.g. \"char *Name\" / \"char *Module\"). In the code they are only read (passed to strcmp) and should therefore be declared as \"const char *Name\" and \"const char *Module\". If the struct members are already declared as \"const char *\", then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logger for OS_SymbolLookup_Static\n * Logs control flow and state to /tmp/logs/2153.txt\n * This file intentionally preserves the original logic while adding\n * non-intrusive logging that only reads state (does not modify any\n * symbol data).\n */\nstatic void OS_SymbolLookup_Log_State(const void *sym_ptr,\n                                     const char *name_str,\n                                     const char *module_str,\n                                     const char *note,\n                                     int name_cmp_result,\n                                     int module_cmp_result)\n{\n    FILE *f = fopen(\"/tmp/logs/2153.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging isn't possible, do nothing to avoid affecting behavior. */\n        return;\n    }\n\n    fprintf(f, \"LOG: %s\\n\", note ? note : \"(no note)\");\n    fprintf(f, \"  sym_ptr=%p, Name_ptr=%p, Module_ptr=%p\\n\",\n            sym_ptr,\n            (void *)name_str,\n            (void *)module_str);\n    fprintf(f, \"  Name_str=%s, Module_str=%s\\n\",\n            name_str ? name_str : \"(null)\",\n            module_str ? module_str : \"(null)\");\n    fprintf(f, \"  name_cmp_result=%d, module_cmp_result=%d\\n\",\n            name_cmp_result, module_cmp_result);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    unsigned int               iter = 0U;\n\n    /* Log function entry and inputs */\n    {\n        FILE *f = fopen(\"/tmp/logs/2153.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"ENTRY: OS_SymbolLookup_Static\\n\");\n            fprintf(f, \"  SymbolName=%s, ModuleName=%s, StaticSym=%p\\n\",\n                    SymbolName ? SymbolName : \"(null)\",\n                    ModuleName ? ModuleName : \"(null)\",\n                    (void *)StaticSym);\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    while (StaticSym != NULL)\n    {\n        /* Log each iteration and the pointers/strings present */\n        {\n            FILE *f = fopen(\"/tmp/logs/2153.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"ITER %u: StaticSym=%p, Name_ptr=%p, Module_ptr=%p\\n\",\n                        iter, (void *)StaticSym,\n                        (void *)StaticSym->Name,\n                        (void *)StaticSym->Module);\n                fprintf(f, \"  Name_str=%s, Module_str=%s\\n\",\n                        StaticSym->Name ? StaticSym->Name : \"(null)\",\n                        StaticSym->Module ? StaticSym->Module : \"(null)\");\n                fflush(f);\n                fclose(f);\n            }\n        }\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n\n            /* Log the end-of-list event */\n            OS_SymbolLookup_Log_State(StaticSym,\n                                      StaticSym->Name,\n                                      StaticSym->Module,\n                                      \"End of static symbol list (Name == NULL)\",\n                                      -1,\n                                      -1);\n            break;\n        }\n\n        /* Perform comparisons (preserve original order/semantics) */\n        int name_match = (strcmp(StaticSym->Name, SymbolName) == 0);\n        int module_match = (ModuleName == NULL) || (strcmp(StaticSym->Module, ModuleName) == 0);\n\n        /* Log the comparison results for this entry */\n        OS_SymbolLookup_Log_State(StaticSym,\n                                  StaticSym->Name,\n                                  StaticSym->Module,\n                                  \"Comparison results for current static symbol\",\n                                  name_match,\n                                  module_match ? 1 : 0);\n\n        if (name_match && module_match)\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n\n            /* Log the successful match and the resolved address */\n            {\n                FILE *f = fopen(\"/tmp/logs/2153.txt\", \"a\");\n                if (f != NULL)\n                {\n                    fprintf(f, \"MATCH: StaticSym=%p, Name=%s, Module=%s\\n\",\n                            (void *)StaticSym,\n                            StaticSym->Name ? StaticSym->Name : \"(null)\",\n                            StaticSym->Module ? StaticSym->Module : \"(null)\");\n                    fprintf(f, \"  Resolved Address=%p, return_code=%d\\n\",\n                            (void *)(uintptr_t)*SymbolAddress, return_code);\n                    fflush(f);\n                    fclose(f);\n                }\n            }\n\n            break;\n        }\n\n        ++StaticSym;\n        ++iter;\n    }\n\n    /* Log exit and return code */\n    {\n        FILE *f = fopen(\"/tmp/logs/2153.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"EXIT: OS_SymbolLookup_Static returning %d\\n\", return_code);\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}