{
  "user_message": "An agent A claimed that the following OS_SymbolLookup_Static code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_SymbolLookup_Static.\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nStaticSym is declared as a pointer to a non-const OS_static_symbol_record_t but the function only reads the pointed-to data (Name, Module, Address) and does not modify it. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. The declaration should be changed to: const OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; (or compatible const-qualified form), to prevent accidental modification of the symbol table.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_SymbolLookup_Static the variable StaticSym is declared as OS_static_symbol_record_t * but the function only reads fields (Name, Module, Address) and never modifies the pointed-to object. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible, so StaticSym should be declared as a pointer to const (for example: const OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE;), and the source (OS_STATIC_SYMTABLE_SOURCE) should be made a compatible const-qualified object if necessary. The only caveat is if the actual table must be mutable elsewhere or the initializer has an incompatible type; in that case the design must justify the non-const qualifier. Given the code shown, however, the report of a rule 8.13 violation is correct."
}