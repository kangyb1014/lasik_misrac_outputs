{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer StaticSym is declared as OS_static_symbol_record_t * but is only used to read fields (strcmp and reading Address) and never modifies the pointed-to objects. According to Rule 8.13 it should therefore point to a const-qualified type, e.g. const OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; Note: the ++StaticSym fragment itself only modifies the pointer, not the pointee, so it would still be valid after making the pointee const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append formatted log messages to the required logfile. */\nstatic void OS_SymbolLookup_Static_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2153.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    int                        iter         = 0;\n\n    /* Log entry and initial state */\n    OS_SymbolLookup_Static_Log(\"ENTER: OS_SymbolLookup_Static(SymbolAddress=%p, SymbolName=%s, ModuleName=%s, StaticSym_initial=%p)\",\n                               (void *)SymbolAddress,\n                               (SymbolName != NULL) ? SymbolName : \"(null)\",\n                               (ModuleName != NULL) ? ModuleName : \"(null)\",\n                               (void *)StaticSym);\n\n    while (StaticSym != NULL)\n    {\n        OS_SymbolLookup_Static_Log(\"ITER %d: StaticSym=%p\", iter, (void *)StaticSym);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n\n            OS_SymbolLookup_Static_Log(\n                \"ITER %d: Name==NULL (end of list). Setting return_code=OS_ERROR. StaticSym->Module=%s, StaticSym->Address=%#llx\",\n                iter,\n                (StaticSym->Module != NULL) ? StaticSym->Module : \"(null)\",\n                (unsigned long long)(StaticSym->Address)\n            );\n            break;\n        }\n\n        /* Log the values used for comparison */\n        OS_SymbolLookup_Static_Log(\"ITER %d: Comparing StaticSym->Name='%s' with SymbolName='%s'\",\n                                   iter,\n                                   StaticSym->Name,\n                                   (SymbolName != NULL) ? SymbolName : \"(null)\");\n\n        /* Evaluate matches exactly as original code */\n        int name_match = (strcmp(StaticSym->Name, SymbolName) == 0);\n        int module_match = (ModuleName == NULL) || (strcmp(StaticSym->Module, ModuleName) == 0);\n\n        OS_SymbolLookup_Static_Log(\"ITER %d: name_match=%d, module_match=%d, StaticSym->Module='%s', StaticSym->Address=%#llx\",\n                                   iter,\n                                   name_match,\n                                   module_match,\n                                   (StaticSym->Module != NULL) ? StaticSym->Module : \"(null)\",\n                                   (unsigned long long)(StaticSym->Address)\n        );\n\n        if (name_match && module_match)\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n\n            OS_SymbolLookup_Static_Log(\"ITER %d: FOUND. Assigned *SymbolAddress=%#llx, setting return_code=OS_SUCCESS\",\n                                       iter,\n                                       (unsigned long long)(*SymbolAddress));\n            break;\n        }\n\n        ++StaticSym;\n        ++iter;\n    }\n\n    OS_SymbolLookup_Static_Log(\"EXIT: return_code=%d, final_StaticSym=%p, iterations=%d, final_SymbolAddress_value=%#llx\",\n                               return_code,\n                               (void *)StaticSym,\n                               iter,\n                               (unsigned long long)((SymbolAddress != NULL) ? *SymbolAddress : 0ULL));\n\n    return return_code;\n}\n"
}