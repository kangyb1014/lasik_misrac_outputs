{
  "user_message": "An agent A claimed that the following OS_SymbolLookup_Static code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_SymbolLookup_Static.\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe loop uses StaticSym, which is declared as OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; The code only reads members of the pointed-to records (Name, Module, Address) and never modifies the pointee, so the pointer should be to a const-qualified type. Therefore StaticSym should be declared as const OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; (++StaticSym is permitted because the const applies to the pointee, not the pointer itself.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In this function StaticSym is only used for reading its members (Name, Module, Address) and the code never modifies the pointee; only the pointer itself is incremented (++StaticSym). Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the local declaration should be const OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; (incrementing the pointer is permitted because the const applies to the pointee, not the pointer). The only caveat is if OS_STATIC_SYMTABLE_SOURCE itself is already const-qualified (in which case no change is needed) or if other code expectations force a non-const type, but based on the shown code the pointer can and should be const-qualified."
}