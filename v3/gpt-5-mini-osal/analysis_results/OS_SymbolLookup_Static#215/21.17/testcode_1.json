{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf a static symbol table entry has Module == NULL (but Name != NULL) and the caller supplies a non-NULL ModuleName, the expression (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0) will evaluate the strcmp call with StaticSym->Module == NULL. This passes a NULL pointer to strcmp and can cause an out-of-bounds access/undefined behavior. For example, OS_ModuleSymbolLookup passes a non-NULL record->name_entry as ModuleName; if the corresponding OS_static_symbol_record_t has Module == NULL, strcmp(StaticSym->Module, ModuleName) will dereference a NULL pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2159.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    /* Probe helper: write a single-line log entry describing pointers and contents (safely)\n     * This function intentionally avoids dereferencing NULL pointers.\n     */\n    auto void os_symbol_lookup_log(const OS_static_symbol_record_t *StaticSym,\n                                   const char *SymbolName,\n                                   const char *ModuleName)\n    {\n        FILE *f = fopen(\"/tmp/logs/2159.txt\", \"a\");\n        if (f == NULL)\n        {\n            return; /* best effort logging only */\n        }\n\n        fprintf(f, \"OS_SymbolLookup_Static: StaticSym=%p, \", (const void *)StaticSym);\n\n        if (StaticSym == NULL)\n        {\n            fprintf(f, \"StaticSym==NULL\\n\");\n            fclose(f);\n            return;\n        }\n\n        /* Name info */\n        fprintf(f, \"Name_ptr=%p\", (const void *)StaticSym->Name);\n        if (StaticSym->Name != NULL)\n        {\n            /* print up to a reasonable length to avoid huge logs */\n            char buf[128];\n            size_t i;\n            for (i = 0; i < sizeof(buf) - 1 && StaticSym->Name[i] != '\\0'; ++i)\n                buf[i] = StaticSym->Name[i];\n            buf[i] = '\\0';\n            fprintf(f, \", Name_str=\\\"%s\\\"\", buf);\n        }\n\n        /* SymbolName argument info */\n        fprintf(f, \", SymbolName_ptr=%p\", (const void *)SymbolName);\n        if (SymbolName != NULL)\n        {\n            char buf2[128];\n            size_t i;\n            for (i = 0; i < sizeof(buf2) - 1 && SymbolName[i] != '\\0'; ++i)\n                buf2[i] = SymbolName[i];\n            buf2[i] = '\\0';\n            fprintf(f, \", SymbolName_str=\\\"%s\\\"\", buf2);\n        }\n\n        /* ModuleName argument info */\n        fprintf(f, \", ModuleName_ptr=%p\", (const void *)ModuleName);\n        if (ModuleName != NULL)\n        {\n            char buf3[128];\n            size_t i;\n            for (i = 0; i < sizeof(buf3) - 1 && ModuleName[i] != '\\0'; ++i)\n                buf3[i] = ModuleName[i];\n            buf3[i] = '\\0';\n            fprintf(f, \", ModuleName_str=\\\"%s\\\"\", buf3);\n        }\n\n        /* StaticSym->Module info (this is the pointer that may be NULL and cause the reported issue) */\n        fprintf(f, \", StaticSym->Module_ptr=%p\", (const void *)StaticSym->Module);\n        if (StaticSym->Module != NULL)\n        {\n            char buf4[128];\n            size_t i;\n            for (i = 0; i < sizeof(buf4) - 1 && StaticSym->Module[i] != '\\0'; ++i)\n                buf4[i] = StaticSym->Module[i];\n            buf4[i] = '\\0';\n            fprintf(f, \", StaticSym->Module_str=\\\"%s\\\"\", buf4);\n        }\n\n        /* Highlight potentially dangerous combination */\n        if (ModuleName != NULL && StaticSym->Module == NULL)\n        {\n            fprintf(f, \" -- RISK: ModuleName!=NULL but StaticSym->Module==NULL (strcmp would be called with NULL)\");\n        }\n\n        fprintf(f, \"\\n\");\n\n        fclose(f);\n    }\n\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        /* Log the current iteration and relevant pointers/state for repro */\n        os_symbol_lookup_log(StaticSym, SymbolName, ModuleName);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n"
}