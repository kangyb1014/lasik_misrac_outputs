{
  "user_message": "An agent A claimed that the following OS_ModuleGetInfo_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleGetInfo_Impl.\n```c\nint32 OS_ModuleGetInfo_Impl(const OS_object_token_t *token, OS_module_prop_t *module_prop)\n{\n    /*\n     * Limiting strictly to POSIX-defined API means there is no defined\n     * method to get information about a module contents.\n     *\n     * The \"dlinfo()\" function might return some interesting information\n     * but this is actually a non-posix extension / platform-defined API.\n     *\n     * This returns success - although there is no information to add here,\n     * the parent/shared layer information is still valid.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf OS_common_record_t::name_entry is declared as a mutable char* / char[] (e.g. 'char name_entry[...]' or 'char *name_entry') then Rule 8.13 is violated: the source pointer is used only for reading and therefore should be declared 'const char *' (or 'const char name_entry[...]') since it can and should be const-qualified. The destination (module_prop->name) must remain non-const because it is written to.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleGetInfo_Impl:\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The function shown does not violate MISRA C:2023 Rule 8.13. In OS_ModuleGetInfo_Impl the token parameter is already declared as a pointer to const (const OS_object_token_t *), and module_prop is non-const because the function (and callers) legitimately write into it \u2014 so those parameter declarations conform with the intent of 8.13. The memcpy/strncpy call in OS_ModuleInfo reads from record->name_entry; passing a mutable char[]/char * to a function expecting a const char * is allowed and does not itself trigger a Rule 8.13 violation. If record->name_entry is never modified anywhere, then the definition of OS_common_record_t::name_entry could be made const, but that would be a separate issue in the record definition, not a violation in OS_ModuleGetInfo_Impl. Therefore the agent A report that OS_ModuleGetInfo_Impl violates Rule 8.13 is incorrect."
}