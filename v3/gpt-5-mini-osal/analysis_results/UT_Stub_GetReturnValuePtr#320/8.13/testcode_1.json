{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_Stub_GetReturnValuePtr the local pointer StubPtr is only used to read members (BasePtr, Position, ContentTypeStr) and is never used to modify the pointed-to object. Therefore it should be declared to point to a const-qualified type (e.g. const UT_StubTableEntry_t *StubPtr). The current declaration 'UT_StubTableEntry_t *StubPtr;' fails to apply const where possible and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n    FILE *               __ut_log = NULL;\n\n    /* Open log file for appending. Failure to open should not affect logic. */\n    __ut_log = fopen(\"/tmp/logs/3203.txt\", \"a\");\n    if (__ut_log != NULL)\n    {\n        fprintf(__ut_log, \"UT_Stub_GetReturnValuePtr called: FuncKey=%lu ReturnSize=%lu TypeName=%s\\n\",\n                (unsigned long)FuncKey, (unsigned long)ReturnSize, (TypeName != NULL) ? TypeName : \"(null)\");\n    }\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (__ut_log != NULL)\n    {\n        fprintf(__ut_log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (__ut_log != NULL)\n        {\n            fprintf(__ut_log, \"ERROR: StubPtr is NULL - about to call UtAssert_Abort()\\n\");\n            fclose(__ut_log);\n            __ut_log = NULL;\n        }\n\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        if (__ut_log != NULL)\n        {\n            fprintf(__ut_log, \"ReturnPtr (BasePtr) = %p\\n\", (void *)ReturnPtr);\n            fprintf(__ut_log, \"Stored Position = %lu, Stored ContentTypeStr = %s\\n\",\n                    (unsigned long)StubPtr->Data.Buff.Position,\n                    (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\");\n        }\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            if (__ut_log != NULL)\n            {\n                fprintf(__ut_log, \"Mismatch detected: expected %s(%lu) got %s(%lu)\\n\",\n                        (TypeName != NULL) ? TypeName : \"(null)\", (unsigned long)ReturnSize,\n                        (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\",\n                        (unsigned long)StubPtr->Data.Buff.Position);\n                fclose(__ut_log);\n                __ut_log = NULL;\n            }\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n\n        if (__ut_log != NULL)\n        {\n            fprintf(__ut_log, \"Return value validated, returning pointer %p\\n\", (void *)ReturnPtr);\n            fclose(__ut_log);\n            __ut_log = NULL;\n        }\n    }\n\n    return ReturnPtr;\n}\n"
}