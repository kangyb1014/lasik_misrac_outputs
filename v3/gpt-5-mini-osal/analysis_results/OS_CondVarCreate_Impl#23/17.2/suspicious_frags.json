{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate_Impl:\n```c\nint32 OS_CondVarCreate_Impl(const OS_object_token_t *token, uint32 options)\n{\n    int32                              final_status;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    final_status = OS_SUCCESS;\n    impl         = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n    ** create the underlying mutex\n    */\n    status = pthread_mutex_init(&impl->mut, NULL);\n    if (status != 0)\n    {\n        OS_DEBUG(\"Error: CondVar mutex could not be created. ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n        final_status = OS_ERROR;\n    }\n    else\n    {\n        /*\n        ** create the condvar\n        */\n        status = pthread_cond_init(&impl->cv, NULL);\n        if (status != 0)\n        {\n            pthread_mutex_destroy(&impl->mut);\n\n            OS_DEBUG(\"Error: CondVar could not be created. ID = %lu: %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n            final_status = OS_ERROR;\n        }\n    }\n\n    return final_status;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarCreate_Impl:\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n...\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n...\nstatic inline unsigned long OS_ObjectIdToInteger(osal_id_t object_id)\n{\n#ifdef OSAL_OMIT_DEPRECATED\n    return object_id.v;\n#else\n    return object_id;\n#endif\n}\n...\n#define OS_DEBUG(__VA_ARGS__) \n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments in the provided code exhibit direct or indirect self-calls and therefore there is no apparent recursion to investigate for MISRA C 2023 Rule 17.2. Rationale:\n\n- OS_CondVarCreate_Impl does not call itself, nor does it call OS_CondVarCreate. It only calls pthread_mutex_init, pthread_cond_init, pthread_mutex_destroy, strerror, and the OS helper inline functions/macros shown.\n- The inline helpers OS_ObjectIdFromToken and OS_ObjectIndexFromToken simply return structure fields and do not call any other functions; they cannot introduce recursion.\n- OS_ObjectIdToInteger is also a trivial inline/conditional-return and does not call other functions.\n- OS_DEBUG is defined empty in the provided code, so the debug invocations do not call any functions.\n- The pthread functions used (pthread_mutex_init, pthread_cond_init, pthread_mutex_destroy) are external library calls and do not call back into the application code shown here; they do not create recursion with the functions in this module.\n- The OS_OBJECT_TABLE_GET and OS_OBJECT_INIT usages in the additional code are typical table/macro operations; the provided OS_ObjectIndexFromToken/OS_ObjectIdFromToken definitions show these helpers do not invoke other functions that could lead back to OS_CondVarCreate_Impl.\n\nGiven these points, there are no suspicious fragments to report for potential self-call (direct or indirect) in the supplied code. If there are additional macro or function definitions (not provided) that expand to calls into OS_CondVarCreate_Impl or OS_CondVarCreate, those would need review, but based on the supplied definitions there is no recursion."
}