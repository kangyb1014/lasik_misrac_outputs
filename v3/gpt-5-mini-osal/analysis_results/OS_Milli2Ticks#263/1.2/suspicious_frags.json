{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_Milli2Ticks:\n```c\nint32 OS_Milli2Ticks(uint32 milli_seconds, int *ticks)\n{\n    uint64 num_of_ticks;\n    int32  return_code = OS_SUCCESS;\n\n    num_of_ticks = (((uint64)milli_seconds * OS_SharedGlobalVars.TicksPerSecond) + 999) / 1000;\n\n    /* Check against maximum int32 (limit from some OS's) */\n    if (num_of_ticks <= INT_MAX)\n    {\n        *ticks = (int)num_of_ticks;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n        *ticks      = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_Milli2Ticks:\ntypedef uint32_t  uint32\n...\ntypedef uint64_t  uint64\n...\ntypedef int32_t   int32\n...\nextern OS_SharedGlobalVars_t OS_SharedGlobalVars\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragment. The function uses standard C constructs: typedef aliases (uint32, uint64, int32) that map to stdint types, standard casts ((uint64) ...), plain integer arithmetic, standard macro constants (OS_SUCCESS, OS_ERROR), a normal extern global variable reference (OS_SharedGlobalVars), pointer dereference (*ticks), and use of INT_MAX. There are no GCC/Clang/MSC-specific keywords or attributes (e.g. __attribute__, __asm, __builtin_*, typeof, __declspec), no inline assembler, no nonstandard pragmas, and no other vendor\u2011specific extensions visible in the snippet. If any compiler extensions exist they would need to appear in declarations/definitions not shown here (for example within the definition of OS_SharedGlobalVars_t or in headers where the typedefs/macros are defined); based on the supplied definitions (uint32_t\u2192uint32, uint64_t\u2192uint64, int32_t\u2192int32) these are standard stdint typedefs, so no extension is present."
}