{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'filesys' is only used for read-only accesses (filesys->flags, filesys->virtual_mountpt) and is initialized from the global OS_filesys_table via OS_OBJECT_TABLE_GET. Since the function does not modify the pointed-to object, the pointer should be declared to point to a const-qualified type (const OS_filesys_internal_record_t *filesys). Declaring it as a non-const pointer when a const-qualified pointer is possible violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/1753.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1753.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\n/* Structured logging of the filesystem state for debugging */\nstatic void log_filesys_state(const void *token_ptr, const void *filesys_ptr,\n                              const char *target, size_t mplen, const char *stage)\n{\n    /* Print token pointer and filesys pointer; other fields are printed\n       by the caller when it is safe to access them. */\n    probe_log(\"stage=%s token_ptr=%p filesys_ptr=%p target=\\\"%s\\\" mplen=%zu\",\n              stage, token_ptr, filesys_ptr, (target != NULL) ? target : \"(null)\", mplen);\n}\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Record entry and parameters */\n    log_filesys_state(token, NULL, target, 0, \"entry\");\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log immediately after obtaining the filesys pointer. */\n    log_filesys_state(token, filesys, target, 0, \"after_get\");\n\n    /* Log the flags and virtual_mountpt for visibility of the violation scenario. */\n    probe_log(\"after_get_detail: filesys_ptr=%p flags=0x%llx virtual_mountpt=\\\"%s\\\"\",\n              (void *)filesys,\n              (unsigned long long)filesys->flags,\n              filesys->virtual_mountpt);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        probe_log(\"decision: not mounted virtual (flags=0x%llx) -> return false\",\n                  (unsigned long long)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /* Log the measured mountpoint length */\n    probe_log(\"computed mplen=%zu for virtual_mountpt=\\\"%s\\\"\",\n              mplen, filesys->virtual_mountpt);\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        probe_log(\"substring check failed: mplen=%zu sizeof= %zu cmp=%d\",\n                  mplen, sizeof(filesys->virtual_mountpt),\n                  (int)strncmp(target, filesys->virtual_mountpt, mplen));\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    bool result = (target[mplen] == '/' || target[mplen] == 0);\n    probe_log(\"final_decision: target_char=0x%02x result=%d (target[%zu]=%c)\",\n              (unsigned int)(unsigned char)target[mplen], result, mplen,\n              (target[mplen] != 0) ? target[mplen] : '\\0');\n\n    return result;\n}\n"
}