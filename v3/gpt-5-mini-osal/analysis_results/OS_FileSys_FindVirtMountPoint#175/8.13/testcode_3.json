{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function accepts a non-const void *ref but immediately treats it as read\u2011only by casting to const char *: const char *target = (const char *)ref;. Rule 8.13 expects the pointer to be const\u2011qualified when possible \u2014 the parameter should be declared as const void *ref (and the cast removed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/*\n * Probe logging helpers: append human-readable trace lines to /tmp/logs/1753.txt\n * These helpers are small and do not change the OS_FileSys_FindVirtMountPoint logic.\n */\nstatic void logf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1753.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/*\n * Inserted logging/tracing into the original function. The original logic is\n * preserved as much as possible; extra logs are emitted at key decision points\n * to demonstrate the violation scenario where a non-const void *ref is cast\n * to const char * and treated read-only.\n */\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Log entry and the fact that the incoming ref is cast to const char * */\n    logf(\"ENTRY: OS_FileSys_FindVirtMountPoint ref=%p token=%p obj=%p -> cast target=%p\",\n          ref, (const void *)token, (const void *)obj, (const void *)target);\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n    logf(\"Resolved filesys pointer=%p\", (const void *)filesys);\n\n    if (filesys == NULL)\n    {\n        logf(\"FILESYS NULL: returning false\");\n        return false;\n    }\n\n    logf(\"filesys->flags=0x%08X virtual_mountpt='%s'\",\n          (unsigned int)filesys->flags,\n          filesys->virtual_mountpt);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        logf(\"NOT VIRTUAL MOUNT: flags=0x%08X -> returning false\",\n              (unsigned int)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n    logf(\"Computed mplen=%zu (virtual_mountpt length)\", mplen);\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt))\n    {\n        logf(\"INVALID mplen: mplen=%zu sizeof(virtual_mountpt)=%zu -> returning false\",\n              mplen, sizeof(filesys->virtual_mountpt));\n        return false;\n    }\n\n    /* Perform the substring comparison and log the result */\n    int cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n    logf(\"strncmp(target, virtual_mountpt, %zu) = %d\", mplen, cmp);\n\n    if (cmp != 0)\n    {\n        /* not a substring, so not a match */\n        logf(\"SUBSTRING MISMATCH: returning false\");\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    unsigned char next_ch = (unsigned char)target[mplen];\n    bool result = (next_ch == '/' || next_ch == 0);\n\n    logf(\"FINAL CHECK: target[%zu]=%u ('%c') -> returning %s\",\n          mplen,\n          (unsigned int)next_ch,\n          (next_ch >= 32 && next_ch < 127) ? (char)next_ch : '?',\n          result ? \"true\" : \"false\");\n\n    return result;\n}\n"
}