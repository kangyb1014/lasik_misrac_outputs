{
  "user_message": "An agent A claimed that the following OS_ModuleSymbolLookup_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleSymbolLookup_Impl.\n```c\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    return status;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local variable 'impl' is assigned a pointer to an entry in OS_impl_module_table but 'impl' is declared as a non-const pointer even though it is only used for read access (accessing impl->dl_handle). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. The fragment:\n\nimpl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\nassigns a non-const pointer where a pointer to const would be appropriate. Declaring impl as 'const OS_impl_module_internal_record_t *impl' (and allowing the macro result to be converted to a pointer-to-const) would satisfy the rule.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleSymbolLookup_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef uintptr_t cpuaddr\n...\ntypedef struct\n{\n    /* cppcheck-suppress unusedStructMember */\n    void *dl_handle;\n} OS_impl_module_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_module_internal_record_t OS_impl_module_table[OS_MAX_MODULES]\n...\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n    Function = dlsym(dl_handle, SymbolName);\n    dlError  = dlerror();\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    *SymbolAddress = (cpuaddr)Function;\n\n    return status;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is essentially correct. In the function impl is only used for read-only access (impl->dl_handle is read and passed to OS_GenericSymbolLookup_Impl). According to MISRA C 2023 Rule 8.13 a pointer shall point to a const-qualified type whenever possible, so declaring the local as const OS_impl_module_internal_record_t *impl would better express intent and satisfy the rule. The macro OS_OBJECT_TABLE_GET yields a pointer to a non-const array element, and converting that to a pointer-to-const is allowed, so changing the declaration does not conflict with the macro. Also, making impl a pointer-to-const does not prevent passing impl->dl_handle to OS_GenericSymbolLookup_Impl: impl->dl_handle becomes a const-qualified lvalue of type void * (i.e. void * const) and that top-level const on the pointer itself does not prevent passing it by value to a parameter of type void *. Note: this is an advisory rule \u2014 if there is a later need to modify the table via this pointer the const qualifier would be inappropriate, but for the shown use the report is correct."
}