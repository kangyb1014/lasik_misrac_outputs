{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if UtAssert_GetCaseTypeAbbrev is declared to return a non-const pointer (e.g. 'char *UtAssert_GetCaseTypeAbbrev(uint8)') while returning pointers to immutable/static text (for example 'return \"FAIL\";'). In that case the pointer should be const-qualified ('const char *UtAssert_GetCaseTypeAbbrev(uint8)') to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_DoText code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append logs to /tmp/logs/3383.txt capturing control flow and state. */\nstatic void UT_BSP_LogProbe(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/3383.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    /* Log entry state */\n    {\n        char logbuf[512];\n        snprintf(logbuf, sizeof(logbuf), \"ENTER: MessageType=%u MsgEnabled=%u TermModeBits=0x%08X OutputMessage_ptr=%p\",\n                 (unsigned)MessageType, (unsigned)MsgEnabled, (unsigned)TermModeBits, (const void *)OutputMessage);\n        UT_BSP_LogProbe(logbuf);\n        if (OutputMessage != NULL)\n        {\n            /* Truncate printed message for log safety */\n            char msg_preview[256];\n            size_t copylen = strlen(OutputMessage);\n            if (copylen > sizeof(msg_preview) - 1) copylen = sizeof(msg_preview) - 1;\n            memcpy(msg_preview, OutputMessage, copylen);\n            msg_preview[copylen] = '\\0';\n            snprintf(logbuf, sizeof(logbuf), \"OutputMessage_preview=\\\"%s\\\" (len=%zu)\", msg_preview, strlen(msg_preview));\n            UT_BSP_LogProbe(logbuf);\n        }\n        else\n        {\n            UT_BSP_LogProbe(\"OutputMessage_preview=<NULL>\");\n        }\n    }\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                UT_BSP_LogProbe(\"SWITCH: Case=ABORT/FAIL -> set HIGHLIGHT|RED\");\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                UT_BSP_LogProbe(\"SWITCH: Case=MIR/WARN -> set HIGHLIGHT|RED|GREEN\");\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                UT_BSP_LogProbe(\"SWITCH: Case=TSF/TTF -> set HIGHLIGHT|RED|BLUE\");\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                UT_BSP_LogProbe(\"SWITCH: Case=BEGIN -> output newline\");\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                UT_BSP_LogProbe(\"SWITCH: Case=PASS -> set HIGHLIGHT|GREEN\");\n                break;\n            default:\n                UT_BSP_LogProbe(\"SWITCH: Case=DEFAULT -> no change\");\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n            UT_BSP_LogProbe(\"MsgEnabled <= 1 -> force NORMAL mode\");\n        }\n\n        /* Capture the abbreviation pointer and its contents for evidencing the violation scenario.\n         * NOTE: We intentionally store the returned pointer in a const-qualified variable for logging only.\n         * This does not change the behavior of UtAssert_GetCaseTypeAbbrev; it merely documents the pointer and content. */\n        const char *abbrev = UtAssert_GetCaseTypeAbbrev(MessageType);\n        {\n            char logbuf[512];\n            if (abbrev != NULL)\n            {\n                /* Truncate to avoid overly long logs */\n                char abbrev_preview[128];\n                size_t copylen = strlen(abbrev);\n                if (copylen > sizeof(abbrev_preview) - 1) copylen = sizeof(abbrev_preview) - 1;\n                memcpy(abbrev_preview, abbrev, copylen);\n                abbrev_preview[copylen] = '\\0';\n                snprintf(logbuf, sizeof(logbuf), \"Abbrev_ptr=%p Abbrev_preview=\\\"%s\\\"\", (const void *)abbrev, abbrev_preview);\n            }\n            else\n            {\n                snprintf(logbuf, sizeof(logbuf), \"Abbrev_ptr=<NULL>\");\n            }\n            UT_BSP_LogProbe(logbuf);\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", abbrev ? abbrev : \"\");\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n\n        /* Log message length and last character info */\n        {\n            char logbuf[256];\n            int last_is_newline = (MsgLen == 0) ? 0 : (OutputMessage[MsgLen - 1] == '\\n');\n            snprintf(logbuf, sizeof(logbuf), \"BeforeOutput: MsgLen=%zu OutputMessage_ptr=%p LastIsNewline=%d\",\n                     MsgLen, (const void *)OutputMessage, last_is_newline);\n            UT_BSP_LogProbe(logbuf);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n            UT_BSP_LogProbe(\"Appended trailing newline to OutputMessage\");\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        UT_BSP_LogProbe(\"MessageType == ABORT -> calling OS_BSP_Shutdown_Impl\");\n        OS_BSP_Shutdown_Impl();\n    }\n\n    UT_BSP_LogProbe(\"EXIT: UT_BSP_DoText completed\");\n}\n"
}