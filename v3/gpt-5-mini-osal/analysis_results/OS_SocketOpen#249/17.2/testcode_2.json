{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nAlthough OS_ObjectIdAllocateNew does not directly call itself, it invokes OS_NotifyEvent which dispatches via the function pointer OS_SharedGlobalVars.EventHandler. If that event handler (an application callback) calls OS_ObjectIdAllocateNew, this results in an indirect recursive call chain: OS_ObjectIdAllocateNew -> OS_NotifyEvent -> EventHandler -> OS_ObjectIdAllocateNew. Therefore the code permits indirect self-calls.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2496.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen:\n```c\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helpers - write appended logs to /tmp/logs/2496.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2496.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void os_probe_dump_bytes(const char *label, const void *data, size_t len)\n{\n    if (data == NULL || len == 0)\n    {\n        os_probe_log(\"%s: (null)\", label);\n        return;\n    }\n\n    FILE *f = fopen(\"/tmp/logs/2496.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    const unsigned char *p = (const unsigned char *)data;\n    fprintf(f, \"%s: size=%zu bytes: \", label, len);\n    for (size_t i = 0; i < len; ++i)\n    {\n        fprintf(f, \"%02X\", p[i]);\n        if (i + 1 < len) fprintf(f, \" \");\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified OS_SocketOpen with probes inserted. Original logic preserved. */\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Entry log */\n    os_probe_log(\"OS_SocketOpen ENTRY: sock_id=%p, Domain=%d, Type=%d\", (void *)sock_id, (int)Domain, (int)Type);\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    os_probe_log(\"Calling OS_ObjectIdAllocateNew(..., &token)\");\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    os_probe_log(\"OS_ObjectIdAllocateNew returned %d\", return_code);\n\n    /* Dump token raw bytes to help trace recursion/identity in logs */\n    os_probe_dump_bytes(\"token after AllocateNew\", &token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n        os_probe_log(\"OS_OBJECT_TABLE_GET returned stream pointer %p\", (void *)stream);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        os_probe_log(\"memset(stream, 0, sizeof(OS_stream_internal_record_t)) completed\");\n\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n        os_probe_log(\"Saved socket_domain=%d, socket_type=%d into stream at %p\", (int)Domain, (int)Type, (void *)stream);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        os_probe_log(\"Calling OS_SocketOpen_Impl(&token)\");\n        return_code = OS_SocketOpen_Impl(&token);\n        os_probe_log(\"OS_SocketOpen_Impl returned %d\", return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        os_probe_dump_bytes(\"token before ObjectIdFinalizeNew\", &token, sizeof(token));\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n        os_probe_log(\"OS_ObjectIdFinalizeNew returned %d\", return_code);\n\n        if ((return_code == OS_SUCCESS) && (sock_id != NULL))\n        {\n            /* Log the assigned socket id value to help correlate callbacks */\n            os_probe_log(\"OS_SocketOpen EXIT success: *sock_id=%#llx\", (unsigned long long)(*sock_id));\n        }\n    }\n    else\n    {\n        os_probe_log(\"OS_SocketOpen: allocation failed, returning %d\", return_code);\n    }\n\n    os_probe_log(\"OS_SocketOpen EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n"
}