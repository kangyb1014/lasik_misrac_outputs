{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls helper functions/macros (OS_DEBUG and OS_ConsoleWrite). If either of these is implemented to use OS_printf (e.g. OS_DEBUG is a wrapper that formats and calls OS_printf, or OS_ConsoleWrite performs logging via OS_printf), then the call chain becomes OS_printf -> OS_DEBUG (or OS_ConsoleWrite) -> OS_printf, producing indirect recursion. This indirect self-call would violate MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2496.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen:\n```c\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <string.h>\n#include <stdint.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n/*\n * Probe logging helper functions.\n * These use low-level POSIX open/write to avoid any higher-level logging\n * helpers that might themselves call OS_printf and cause indirect recursion.\n */\nstatic void probe_log_raw(const char *msg, size_t len)\n{\n    int fd = open(\"/tmp/logs/2496.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0)\n    {\n        /* Ignore partial writes for probe logging. */\n        (void)write(fd, msg, len);\n        (void)close(fd);\n    }\n}\n\nstatic void probe_logf(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    /* vsnprintf returns number of bytes that would have been written */\n    int n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    if (n > 0)\n    {\n        /* Truncate if necessary */\n        size_t to_write = (size_t)n;\n        if (to_write > sizeof(buf))\n        {\n            to_write = sizeof(buf);\n        }\n        probe_log_raw(buf, to_write);\n    }\n}\n\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Entry probe: log parameters */\n    probe_logf(\"OS_SocketOpen: entry. sock_id=%p, Domain=%d, Type=%d\\n\",\n               (void *)sock_id, (int)Domain, (int)Type);\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n    probe_logf(\"OS_SocketOpen: after OS_ObjectIdAllocateNew, return_code=%d, token=0x%llx\\n\",\n               (int)return_code, (unsigned long long)(uintptr_t)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        probe_logf(\"OS_SocketOpen: stream table entry at %p (token=0x%llx)\\n\",\n                   (void *)stream, (unsigned long long)(uintptr_t)token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        probe_logf(\"OS_SocketOpen: saved domain=%d, type=%d into stream %p\\n\",\n                   (int)stream->socket_domain, (int)stream->socket_type, (void *)stream);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        probe_logf(\"OS_SocketOpen: calling OS_SocketOpen_Impl with token=0x%llx\\n\",\n                   (unsigned long long)(uintptr_t)token);\n\n        return_code = OS_SocketOpen_Impl(&token);\n\n        probe_logf(\"OS_SocketOpen: returned from OS_SocketOpen_Impl, return_code=%d\\n\",\n                   (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n\n        probe_logf(\"OS_SocketOpen: after OS_ObjectIdFinalizeNew, return_code=%d, sock_id=%p\\n\",\n                   (int)return_code, (void *)sock_id);\n    }\n\n    probe_logf(\"OS_SocketOpen: exit with return_code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}