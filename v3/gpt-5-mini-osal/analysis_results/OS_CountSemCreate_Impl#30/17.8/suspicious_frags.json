{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate_Impl:\n```c\nint32 OS_CountSemCreate_Impl(const OS_object_token_t *token, uint32 sem_initial_value, uint32 options)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_initial_value > SEM_VALUE_MAX)\n    {\n        return OS_INVALID_SEM_VALUE;\n    }\n\n    if (sem_init(&impl->id, 0, sem_initial_value) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemCreate_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment in OS_CountSemCreate_Impl modifies any function parameter object itself. Specific points reviewed:\n\n- The function signature parameters are: const OS_object_token_t *token, uint32 sem_initial_value, uint32 options. None of these parameters are assigned to or otherwise altered inside the function.\n\n- The line impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token); only reads (dereferences) token. The macro expands to an expression equivalent to &OS_impl_count_sem_table[OS_ObjectIndexFromToken(&(*token))], which uses &(*token) (i.e., the original token pointer). This takes the address and reads the token contents; it does not assign to the token parameter or change the pointer value.\n\n- OS_ObjectIndexFromToken is declared static inline and takes a const OS_object_token_t *; it only reads token->obj_idx and does not modify the parameter.\n\n- The sem_init(&impl->id, 0, sem_initial_value) call takes the address of impl->id and may modify the semaphore object; this is allowed by Rule 17.8 because the rule permits modifying the object referred to by a pointer parameter (and impl is a local pointer into the implementation table, not a function parameter).\n\n- The checks on sem_initial_value and the return statements only read the value parameter and do not modify it.\n\nTherefore there are no fragments that appear to violate MISRA C 2023 Rule 17.8 in the provided code; no parameter variables are assigned to or otherwise modified."
}