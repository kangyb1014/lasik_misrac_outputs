{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "int32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)",
    "void *data",
    "status = OS_SharedGlobalVars.EventHandler(event, object_id, data);"
  ],
  "explanation": "Rule 8.13 concerns pointer types that should be const-qualified where possible. The fragments above are the only locations in this function that involve a pointer type being passed/used (the parameter declaration and the invocation that forwards it to the EventHandler). Other lines in the function do not declare or use pointer types that could/should be const-qualified: the NULL check on OS_SharedGlobalVars.EventHandler merely tests the handler pointer itself (not the pointed-to data type), status is an integer, the assignment of OS_SUCCESS and the return of status do not involve pointer qualification. Note: the EventHandler function pointer's prototype/definition is not present in this snippet \u2014 that declaration should also be inspected elsewhere to determine whether its data parameter could be const-qualified, but it is not a fragment contained in the provided code and thus is not listed here."
}