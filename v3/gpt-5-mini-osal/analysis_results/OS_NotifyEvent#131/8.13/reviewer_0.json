{
  "user_message": "An agent A claimed that the following OS_NotifyEvent code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_NotifyEvent.\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'data' is declared as a non-const pointer (void *data) although there is no evidence in this function that the object pointed-to is modified. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible (e.g. const void *data). If the event handler and callers do not need to modify the pointed-to data, the function signature should be changed to use const void *data (and the EventHandler prototype updated accordingly).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible. In the shown function the parameter data is not modified by OS_NotifyEvent itself, so from this fragment alone it *appears* that const void *data would be more appropriate. However, whether this is an actual MISRA violation depends on the broader API: OS_NotifyEvent forwards the pointer to OS_SharedGlobalVars.EventHandler. If that EventHandler (or any callers) expects a modifiable void * (i.e. the handler prototype requires void *), then OS_NotifyEvent cannot unilaterally change its signature to const void * without changing the handler prototype (or introducing casts). MISRA allows non-const pointers where modification is required or where the declaration must match an existing non-const API.\n\nConclusion: the agent\u2019s report is not conclusively correct based only on the snippet. It is a valid suggestion \u2014 make the parameter const if nothing in the API modifies the pointed-to object \u2014 but there is insufficient evidence here to prove a definite Rule 8.13 violation. If the EventHandler and callers truly do not modify the data, then the code should be changed to use const and the report would be correct; otherwise it is not a violation.\n"
}