{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_NotifyEvent:\nOS_SharedGlobalVars_t OS_SharedGlobalVars = {\n    .GlobalState     = 0,\n    .PrintfEnabled   = false,\n    .MicroSecPerTick = 0, /* invalid, _must_ be set by implementation init */\n    .TicksPerSecond  = 0, /* invalid, _must_ be set by implementation init */\n    .EventHandler    = NULL,\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    .DebugLevel = 1,\n#endif\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_SharedGlobalVars_t OS_SharedGlobalVars = {\n    .GlobalState     = 0,\n    .PrintfEnabled   = false,\n    .MicroSecPerTick = 0, /* invalid, _must_ be set by implementation init */\n    .TicksPerSecond  = 0, /* invalid, _must_ be set by implementation init */\n    .EventHandler    = NULL,\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    .DebugLevel = 1,\n#endif\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: OS_SharedGlobalVars.EventHandler is initialized to NULL but is a mutable global and may be set at runtime (e.g. during system initialization). Therefore both the \"if\" and the \"else\" paths of OS_NotifyEvent can be reachable and there is no unreachable code in the shown fragments. (A violation would occur only if EventHandler were effectively constant/never modifiable so the call branch could never be taken\u2014for example if it were defined const and not changed anywhere.)"
}