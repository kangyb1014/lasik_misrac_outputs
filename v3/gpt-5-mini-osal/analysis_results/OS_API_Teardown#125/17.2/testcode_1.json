{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the handler registered/installed for the stub is this function itself (e.g. DefaultHandler == UT_ExecuteBasicHandler or a previously-registered final handler points to UT_ExecuteBasicHandler), then the following call chain can occur: UT_ExecuteBasicHandler -> UT_SetHandlerFunction (registers the handler) -> UT_DefaultStubImpl (looks up and invokes the final handler) -> handler (UT_ExecuteBasicHandler). This produces indirect recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Teardown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1256.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Teardown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Teardown:\n```c\nvoid OS_API_Teardown(void)\n{\n    /*\n     * This should delete any remaining user-created objects/tasks\n     */\n    OS_DeleteAllObjects();\n\n    /*\n     * This should cause the \"internal\" objects (e.g. console utility task)\n     * to exit, and will prevent any new objects from being created.\n     */\n    OS_ApplicationShutdown(true);\n}\n```\n</target_code>\nPlease provide the modified OS_API_Teardown code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <errno.h>\n#include <string.h>\n#include <stdbool.h>\n\n/*\n * Probe logging helper: append timestamped messages to /tmp/logs/1256.txt\n * This function is intentionally simple and uses only standard libc calls.\n */\nstatic void OS_API_Teardown_LogProbe(const char *location)\n{\n    FILE *f = fopen(\"/tmp/logs/1256.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not interfere with normal flow. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm;\n\n    /* Use thread-safe localtime_r if available */\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            pid_t pid = getpid();\n            unsigned long tid = (unsigned long)pthread_self();\n            int err = errno;\n            fprintf(f, \"%s PID:%d TID:%lu %s errno=%d (%s)\\n\",\n                    timestr, (int)pid, tid, location, err, strerror(err));\n        }\n        else\n        {\n            /* fallback if strftime fails */\n            pid_t pid = getpid();\n            unsigned long tid = (unsigned long)pthread_self();\n            int err = errno;\n            fprintf(f, \"<time?> PID:%d TID:%lu %s errno=%d (%s)\\n\",\n                    (int)pid, tid, location, err, strerror(err));\n        }\n    }\n    else\n    {\n        /* fallback if localtime_r fails */\n        pid_t pid = getpid();\n        unsigned long tid = (unsigned long)pthread_self();\n        int err = errno;\n        fprintf(f, \"<time?> PID:%d TID:%lu %s errno=%d (%s)\\n\",\n                (int)pid, tid, location, err, strerror(err));\n    }\n\n    fclose(f);\n}\n\n/*\n * Forward declarations for external functions to preserve original logic.\n * These are expected to be defined elsewhere in the codebase.\n */\nextern void OS_DeleteAllObjects(void);\nextern void OS_ApplicationShutdown(bool force);\n\nvoid OS_API_Teardown(void)\n{\n    /* Log entry to this API to help trace control flow for the violation scenario */\n    OS_API_Teardown_LogProbe(\"ENTER: OS_API_Teardown\");\n\n    /*\n     * This should delete any remaining user-created objects/tasks\n     */\n    OS_API_Teardown_LogProbe(\"BEFORE: OS_DeleteAllObjects\");\n    OS_DeleteAllObjects();\n    OS_API_Teardown_LogProbe(\"AFTER: OS_DeleteAllObjects\");\n\n    /*\n     * This should cause the \"internal\" objects (e.g. console utility task)\n     * to exit, and will prevent any new objects from being created.\n     */\n    OS_API_Teardown_LogProbe(\"BEFORE: OS_ApplicationShutdown(true)\");\n    OS_ApplicationShutdown(true);\n    OS_API_Teardown_LogProbe(\"AFTER: OS_ApplicationShutdown(true)\");\n\n    OS_API_Teardown_LogProbe(\"EXIT: OS_API_Teardown\");\n}\n"
}