{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If AllocateCopy is true the code does memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize) and then stores StubPtr->Data.Buff.TotalSize = BufferSize. There is no verification that the object referenced by DataBuffer is at least BufferSize bytes long. If the caller passes a DataBuffer that is smaller than BufferSize (or an incorrect BufferSize), the memcpy will read beyond the bounds of the source object; additionally, when AllocateCopy is false the code records TotalSize = BufferSize for the externally provided buffer and later uses of the buffer (memcpy/memmove/str* calls) could access beyond the actual object size. Both cases can result in out\u2011of\u2011bounds accesses of objects referenced by pointer parameters to <string.h> functions, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3129.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDataBuffer:\n```c\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = NULL;\n\n    /* Open log in append mode; ignore failures to avoid changing behavior */\n    log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_SetDataBuffer ENTRY: FuncKey=%lu, DataBuffer=%p, BufferSize=%zu, AllocateCopy=%d\\n\",\n                (unsigned long)FuncKey, (const void *)DataBuffer, BufferSize, AllocateCopy ? 1 : 0);\n        fclose(log);\n    }\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            /* Log the abort reason before calling the original abort routine */\n            log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"UT_SetDataBuffer ERROR: UT_GetStubEntry returned NULL for FuncKey=%lu\\n\",\n                        (unsigned long)FuncKey);\n                fclose(log);\n            }\n\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            /* Record key and type as before */\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n\n            if (AllocateCopy)\n            {\n                /* Log allocation attempt */\n                log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"UT_SetDataBuffer INFO: Allocating %zu bytes for copy\\n\", BufferSize);\n                    fclose(log);\n                }\n\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    /* Log malloc failure */\n                    log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"UT_SetDataBuffer ERROR: malloc(%zu) failed for FuncKey=%lu\\n\",\n                                BufferSize, (unsigned long)FuncKey);\n                        fclose(log);\n                    }\n\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    /* Log the pointers and size before memcpy to capture potential violation inputs */\n                    log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"UT_SetDataBuffer INFO: Performing memcpy to BasePtr=%p from DataBuffer=%p length=%zu\\n\",\n                                (const void *)StubPtr->Data.Buff.BasePtr, (const void *)DataBuffer, BufferSize);\n                        fclose(log);\n                    }\n\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n\n                    /* Log post-copy state */\n                    log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"UT_SetDataBuffer INFO: Copy complete. BasePtr=%p ModeFlags=0x%08x\\n\",\n                                (const void *)StubPtr->Data.Buff.BasePtr, (unsigned int)StubPtr->ModeFlags);\n                        fclose(log);\n                    }\n                }\n            }\n            else\n            {\n                /* Use buffer directly; log the decision and pointer */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n\n                log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"UT_SetDataBuffer INFO: Using external buffer BasePtr=%p for FuncKey=%lu\\n\",\n                            (const void *)StubPtr->Data.Buff.BasePtr, (unsigned long)FuncKey);\n                    fclose(log);\n                }\n            }\n\n            /* Record sizes and position as before, and log them */\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n\n            log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"UT_SetDataBuffer EXIT: FuncKey=%lu BasePtr=%p TotalSize=%zu Position=%zu\\n\",\n                        (unsigned long)StubPtr->FuncKey,\n                        (const void *)StubPtr->Data.Buff.BasePtr,\n                        StubPtr->Data.Buff.TotalSize,\n                        StubPtr->Data.Buff.Position);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log that inputs were ignored because of null pointer or zero size */\n        log = fopen(\"/tmp/logs/3129.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_SetDataBuffer SKIP: DataBuffer=%p BufferSize=%zu - no action taken\\n\",\n                    (const void *)DataBuffer, BufferSize);\n            fclose(log);\n        }\n    }\n}\n"
}