{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_Posix_InternalTaskCreate_Impl:\n```c\nint32 OS_Posix_InternalTaskCreate_Impl(pthread_t *pthr, osal_priority_t priority, size_t stacksz,\n                                       PthreadFuncPtr_t entry, void *entry_arg)\n{\n    int                return_code = 0;\n    pthread_attr_t     custom_attr;\n    struct sched_param priority_holder;\n\n    /*\n     ** Initialize the pthread_attr structure.\n     ** The structure is used to set the stack and priority\n     */\n    memset(&custom_attr, 0, sizeof(custom_attr));\n    return_code = pthread_attr_init(&custom_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_init error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     * Adjust the stack size parameter.\n     *\n     * POSIX has additional restrictions/limitations on the stack size of tasks that\n     * other RTOS environments may not have.  Specifically POSIX says that the stack\n     * size must be at least PTHREAD_STACK_MIN and may also need to be a multiple of the\n     * system page size.\n     *\n     * Rounding up means the user might get a bigger stack than they requested, but\n     * that should not break anything aside from consuming extra memory.\n     */\n    if (stacksz < PTHREAD_STACK_MIN)\n    {\n        stacksz = PTHREAD_STACK_MIN;\n    }\n\n    stacksz += POSIX_GlobalVars.PageSize - 1;\n    stacksz -= stacksz % POSIX_GlobalVars.PageSize;\n\n    /*\n    ** Set the Stack Size\n    */\n    return_code = pthread_attr_setstacksize(&custom_attr, stacksz);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_setstacksize error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Set the thread to be joinable by default\n    */\n    return_code = pthread_attr_setdetachstate(&custom_attr, PTHREAD_CREATE_JOINABLE);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_setdetachstate error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Test to see if the original main task scheduling priority worked.\n    ** If so, then also set the attributes for this task.  Otherwise attributes\n    ** are left at default.\n    */\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /*\n        ** Set the scheduling inherit attribute to EXPLICIT\n        */\n        return_code = pthread_attr_setinheritsched(&custom_attr, PTHREAD_EXPLICIT_SCHED);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setinheritsched error in OS_TaskCreate, errno = %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set the scheduling policy\n        ** The best policy is determined during initialization\n        */\n        return_code = pthread_attr_setschedpolicy(&custom_attr, POSIX_GlobalVars.SelectedRtScheduler);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setschedpolity error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set priority\n        */\n        return_code = pthread_attr_getschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_getschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        priority_holder.sched_priority = OS_PriorityRemap(priority);\n        return_code                    = pthread_attr_setschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n    } /* End if user is root */\n\n    /*\n     ** Create thread\n     */\n    return_code = pthread_create(pthr, &custom_attr, entry, entry_arg);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_create error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     ** Free the resources that are no longer needed\n     ** Since the task is now running - pthread_create() was successful -\n     ** Do not treat anything bad that happens after this point as fatal.\n     ** The task is running, after all - better to leave well enough alone.\n     */\n    return_code = pthread_attr_destroy(&custom_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_destroy error in OS_TaskCreate: %s\\n\", strerror(return_code));\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_Posix_InternalTaskCreate_Impl:\nstatic int OS_PriorityRemap(osal_priority_t InputPri)\n{\n    int OutputPri;\n\n    if (InputPri == 0)\n    {\n        /* use the \"MAX\" local priority only for OSAL tasks with priority=0 */\n        OutputPri = POSIX_GlobalVars.PriLimits.PriorityMax;\n    }\n    else if (InputPri >= OS_MAX_TASK_PRIORITY)\n    {\n        /* use the \"MIN\" local priority only for OSAL tasks with priority=255 */\n        OutputPri = POSIX_GlobalVars.PriLimits.PriorityMin;\n    }\n    else\n    {\n        /*\n         * Spread the remainder of OSAL priorities over the remainder of local priorities\n         *\n         * Note OSAL priorities use the VxWorks style with zero being the\n         * highest and OS_MAX_TASK_PRIORITY being the lowest, this inverts it\n         */\n        OutputPri = (OS_MAX_TASK_PRIORITY - 1) - (int)InputPri;\n\n        OutputPri *= (POSIX_GlobalVars.PriLimits.PriorityMax - POSIX_GlobalVars.PriLimits.PriorityMin) - 2;\n        OutputPri += OS_MAX_TASK_PRIORITY / 2;\n        OutputPri /= (OS_MAX_TASK_PRIORITY - 2);\n        OutputPri += POSIX_GlobalVars.PriLimits.PriorityMin + 1;\n    }\n\n    return OutputPri;\n}\n...\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_ConsoleCreate_Impl(const OS_object_token_t *token)\n{\n    OS_impl_console_internal_record_t *local;\n    OS_console_internal_record_t *     console;\n    pthread_t                          consoletask;\n    int32                              return_code;\n    OS_VoidPtrValueWrapper_t           local_arg = {0};\n\n    console = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    local   = OS_OBJECT_TABLE_GET(OS_impl_console_table, *token);\n\n    if (token->obj_idx == 0)\n    {\n        return_code = OS_SUCCESS;\n\n        if (console->IsAsync)\n        {\n            if (sem_init(&local->data_sem, 0, 0) < 0)\n            {\n                return_code = OS_SEM_FAILURE;\n            }\n            else\n            {\n                /* cppcheck-suppress unreadVariable // intentional use of other union member */\n                local_arg.id = OS_ObjectIdFromToken(token);\n                return_code  = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, 0,\n                                                               OS_ConsoleTask_Entry, local_arg.opaque_arg);\n\n                if (return_code != OS_SUCCESS)\n                {\n                    sem_destroy(&local->data_sem);\n                }\n            }\n        }\n    }\n    else\n    {\n        /* only one physical console device is implemented */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return return_code;\n}\n...\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    return return_code;\n}\n...\nint32 OS_TimeBaseCreate_Impl(const OS_object_token_t *token)\n{\n    int32                               return_code;\n    int                                 status;\n    int                                 i;\n    osal_index_t                        idx;\n    struct sigevent                     evp;\n    struct timespec                     ts;\n    OS_impl_timebase_internal_record_t *local;\n    OS_timebase_internal_record_t *     timebase;\n    OS_VoidPtrValueWrapper_t            arg;\n\n    local    = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n    timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, *token);\n\n    /*\n     * Spawn a dedicated time base handler thread\n     *\n     * This alleviates the need to handle expiration in the context of a signal handler -\n     * The handler thread can call a BSP synchronized delay implementation as well as the\n     * application callback function.  It should run with elevated priority to reduce latency.\n     *\n     * Note the thread will not actually start running until this function exits and releases\n     * the global table lock.\n     */\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id      = OS_ObjectIdFromToken(token);\n    return_code = OS_Posix_InternalTaskCreate_Impl(&local->handler_thread, OSAL_PRIORITY_C(0), 0,\n                                                   OS_TimeBasePthreadEntry, arg.opaque_arg);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    local->assigned_signal = 0;\n    clock_gettime(OS_PREFERRED_CLOCK, &local->softsleep);\n\n    /*\n     * Set up the necessary OS constructs\n     *\n     * If an external sync function is used then there is nothing to do here -\n     * we simply call that function and it should synchronize to the time source.\n     *\n     * If no external sync function is provided then this will set up a POSIX\n     * timer to locally simulate the timer tick using the CPU clock.\n     */\n    if (timebase->external_sync == NULL)\n    {\n        sigemptyset(&local->sigset);\n\n        /*\n         * find an RT signal that is not used by another time base object.\n         * This is all done while the global lock is held so no chance of the\n         * underlying tables changing\n         */\n        for (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)\n        {\n            if (OS_ObjectIdIsValid(OS_global_timebase_table[idx].active_id) &&\n                OS_impl_timebase_table[idx].assigned_signal != 0)\n            {\n                sigaddset(&local->sigset, OS_impl_timebase_table[idx].assigned_signal);\n            }\n        }\n\n        for (i = SIGRTMIN; i <= SIGRTMAX; ++i)\n        {\n            if (!sigismember(&local->sigset, i))\n            {\n                local->assigned_signal = i;\n                break;\n            }\n        }\n\n        do\n        {\n            if (local->assigned_signal == 0)\n            {\n                OS_DEBUG(\"No free RT signals to use for simulated time base\\n\");\n                return_code = OS_TIMER_ERR_UNAVAILABLE;\n                break;\n            }\n\n            sigemptyset(&local->sigset);\n            sigaddset(&local->sigset, local->assigned_signal);\n\n            /*\n             * Ensure that the chosen signal is NOT already pending.\n             *\n             * Perform a \"sigtimedwait\" with a zero timeout to poll the\n             * status of the selected signal.  RT signals are also queued,\n             * so this needs to be called in a loop to until sigtimedwait()\n             * returns an error.\n             *\n             * The max number of signals that can be queued is available\n             * via sysconf() as the _SC_SIGQUEUE_MAX value.\n             *\n             * The output is irrelevant here; the objective is to just ensure\n             * that the signal is not already pending.\n             */\n            i = sysconf(_SC_SIGQUEUE_MAX);\n            do\n            {\n                ts.tv_sec  = 0;\n                ts.tv_nsec = 0;\n                if (sigtimedwait(&local->sigset, NULL, &ts) < 0)\n                {\n                    /* signal is NOT pending */\n                    break;\n                }\n                --i;\n            } while (i > 0);\n\n            /*\n            **  Initialize the sigevent structures for the handler.\n            */\n            memset((void *)&evp, 0, sizeof(evp));\n            evp.sigev_notify = SIGEV_SIGNAL;\n            evp.sigev_signo  = local->assigned_signal;\n\n            /*\n             * Pass the Timer Index value of the object ID to the signal handler --\n             *  Note that the upper bits can be safely assumed as a timer ID to recreate the original,\n             *  and doing it this way should still work on a system where sizeof(sival_int) < sizeof(uint32)\n             *  (as long as sizeof(sival_int) >= number of bits in OS_OBJECT_INDEX_MASK)\n             */\n            evp.sigev_value.sival_int = (int)OS_ObjectIdToSerialNumber_Impl(OS_ObjectIdFromToken(token));\n\n            /*\n            ** Create the timer\n            ** Note using the \"MONOTONIC\" clock here as this will still produce consistent intervals\n            ** even if the system clock is stepped (e.g. clock_settime).\n            */\n            status = timer_create(OS_PREFERRED_CLOCK, &evp, &local->host_timerid);\n            if (status < 0)\n            {\n                return_code = OS_TIMER_ERR_UNAVAILABLE;\n                break;\n            }\n\n            timebase->external_sync = OS_TimeBase_SigWaitImpl;\n        } while (0);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * NOTE about the thread cancellation -- this technically is just a backup,\n         * we should not need to cancel it because the handler thread will exit automatically\n         * if the active ID does not match the expected value.  This check would fail\n         * if this function returns non-success (the ID in the global will be set zero)\n         */\n        pthread_cancel(local->handler_thread);\n        local->assigned_signal = 0;\n    }\n\n    return return_code;\n}\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n...\nstatic inline bool OS_ObjectIdIsValid(osal_id_t object_id)\n{\n    osal_objtype_t objtype = OS_ObjectIdToType_Impl(object_id);\n    return (objtype > OS_OBJECT_TYPE_UNDEFINED && objtype < OS_OBJECT_TYPE_USER);\n}\n...\nstatic inline uint32 OS_ObjectIdToSerialNumber_Impl(osal_id_t id)\n{\n    return (OS_ObjectIdToInteger(id) & OS_OBJECT_INDEX_MASK);\n}\n...\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n...\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n...\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                               arg.opaque_arg);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the call is OS_TaskCreate_Impl -> OS_Posix_InternalTaskCreate_Impl. OS_Posix_InternalTaskCreate_Impl does not call itself (directly) nor does it call any function that in turn calls OS_Posix_InternalTaskCreate_Impl (indirect recursion). It only calls pthread_... functions and OS_PriorityRemap; pthread_create starts a new thread that will run the provided entry function later, but spawning a thread is not a function call back into the same call chain and therefore does not constitute indirect recursion under Rule 17.2."
}