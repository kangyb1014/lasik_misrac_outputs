{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer timecb is declared as a mutable pointer (OS_timecb_internal_record_t *timecb) but is only used to read fields (timecb->timebase_token, timecb->interval_time). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible (e.g. const OS_timecb_internal_record_t *timecb). The assignment timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, token) yields a non-const pointer but may be assigned to a pointer-to-const; changing the local pointer to const would prevent accidental modification. Therefore this is a violation (the pointer should be const). Note: the underlying table need not be const for the pointer to be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Simple logging helper that appends probe output to /tmp/logs/2753.txt. */\nstatic void OS_TimerGetInfo_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    OS_TimerGetInfo_Log(\"OS_TimerGetInfo: entry: timer_id=%llu, timer_prop=%p\",\n                        (unsigned long long)timer_id, (void *)timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimerGetInfo_Log(\"OS_TimerGetInfo: objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerGetInfo_Log(\"OS_TimerGetInfo: incorrect object state (caller is a timebase). Returning %d\", OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    OS_TimerGetInfo_Log(\"OS_TimerGetInfo: cleared timer_prop at %p\", (void *)timer_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    OS_TimerGetInfo_Log(\"OS_TimerGetInfo: OS_ObjectIdGetById returned %d\", return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        OS_TimerGetInfo_Log(\"OS_TimerGetInfo: token obtained (opaque): %p\", (void *)&token);\n\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        /* Probe the timebase lookup using the value read from timecb */\n        OS_TimerGetInfo_Log(\"OS_TimerGetInfo: looked up record=%p, timecb=%p\", (void *)record, (void *)timecb);\n\n        if (timecb != NULL)\n        {\n            OS_TimerGetInfo_Log(\"OS_TimerGetInfo: timecb->timebase_token=%llu, timecb->interval_time=%llu\",\n                                (unsigned long long)timecb->timebase_token,\n                                (unsigned long long)timecb->interval_time);\n            timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n        }\n        else\n        {\n            timebase = NULL;\n            OS_TimerGetInfo_Log(\"OS_TimerGetInfo: timecb is NULL, cannot lookup timebase\");\n        }\n\n        if (record != NULL)\n        {\n            OS_TimerGetInfo_Log(\"OS_TimerGetInfo: record->name_entry='%s', record->creator=%llu\",\n                                record->name_entry ? record->name_entry : \"(null)\",\n                                (unsigned long long)record->creator);\n\n            /* Preserve original behavior: copy name and properties */\n            strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n            timer_prop->creator = record->creator;\n        }\n        else\n        {\n            OS_TimerGetInfo_Log(\"OS_TimerGetInfo: record is NULL\");\n        }\n\n        if (timecb != NULL)\n        {\n            timer_prop->interval_time = (uint32)timecb->interval_time;\n            OS_TimerGetInfo_Log(\"OS_TimerGetInfo: set timer_prop->interval_time=%u\",\n                                (unsigned int)timer_prop->interval_time);\n        }\n\n        if (timebase != NULL)\n        {\n            timer_prop->accuracy = timebase->accuracy_usec;\n            OS_TimerGetInfo_Log(\"OS_TimerGetInfo: timebase=%p, accuracy=%u\",\n                                (void *)timebase, (unsigned int)timebase->accuracy_usec);\n        }\n        else\n        {\n            OS_TimerGetInfo_Log(\"OS_TimerGetInfo: timebase is NULL\");\n        }\n\n        OS_TimerGetInfo_Log(\"OS_TimerGetInfo: final timer_prop: name='%s', creator=%llu, interval_time=%u, accuracy=%u\",\n                            timer_prop->name[0] ? timer_prop->name : \"(empty)\",\n                            (unsigned long long)timer_prop->creator,\n                            (unsigned int)timer_prop->interval_time,\n                            (unsigned int)timer_prop->accuracy);\n\n        OS_ObjectIdRelease(&token);\n        OS_TimerGetInfo_Log(\"OS_TimerGetInfo: released token and returning success\");\n    }\n\n    OS_TimerGetInfo_Log(\"OS_TimerGetInfo: exit returning %d\", return_code);\n\n    return return_code;\n}\n"
}