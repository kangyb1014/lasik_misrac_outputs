{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration uses OS_ArgCallback_t which (as commonly defined) is a function-pointer taking a non-const data pointer. For example, if OS_ArgCallback_t is typedef void (*OS_ArgCallback_t)(void *); then declaring OS_ArgCallback_t callback_ptr permits the callback to take a non-const void * and therefore is not const-qualified. Under MISRA C 2023 Rule 8.13 this is a violation because the pointer (the callback argument) should point to a const-qualified type when modification is not required \u2014 e.g. typedef void (*OS_ArgCallback_t)(const void *);. If, however, OS_ArgCallback_t is already defined to use const for the pointed-to data (or the callback must legitimately modify the data), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Logging helper: append a single line to the trace file */\nstatic void OS_TimerGetInfo_LogLine(const char *line)\n{\n    FILE *f = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", line);\n        fclose(f);\n    }\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n    char                           logbuf[512];\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /* Log entry and input id */\n    snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: enter, timer_id=%llu\", (unsigned long long)timer_id);\n    OS_TimerGetInfo_LogLine(logbuf);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: current objtype=%ld\", (long)objtype);\n    OS_TimerGetInfo_LogLine(logbuf);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerGetInfo_LogLine(\"OS_TimerGetInfo: disallowed from timebase context - returning OS_ERR_INCORRECT_OBJ_STATE\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Zero the output structure and log that we did so */\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    OS_TimerGetInfo_LogLine(\"OS_TimerGetInfo: cleared timer_prop to zeros\");\n\n    /* Try to get the object by id */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n    OS_TimerGetInfo_LogLine(logbuf);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Retrieve internal structures (same as original logic) */\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log pointers and key fields to provide evidence of state at this point */\n        snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: record=%p, timecb=%p, timebase=%p\", (void *)record, (void *)timecb, (void *)timebase);\n        OS_TimerGetInfo_LogLine(logbuf);\n\n        /* Log the record name and creator */\n        if (record != NULL)\n        {\n            snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: record->name_entry=\\\"%s\\\", record->creator=%lu\", record->name_entry, (unsigned long)record->creator);\n            OS_TimerGetInfo_LogLine(logbuf);\n        }\n        else\n        {\n            OS_TimerGetInfo_LogLine(\"OS_TimerGetInfo: record is NULL\");\n        }\n\n        /* Log timecb and timebase fields used by the function */\n        if (timecb != NULL)\n        {\n            snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: timecb->interval_time=%lu, timecb->timebase_token=%lu\",\n                     (unsigned long)timecb->interval_time, (unsigned long)timecb->timebase_token);\n            OS_TimerGetInfo_LogLine(logbuf);\n        }\n        else\n        {\n            OS_TimerGetInfo_LogLine(\"OS_TimerGetInfo: timecb is NULL\");\n        }\n\n        if (timebase != NULL)\n        {\n            snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: timebase->accuracy_usec=%lu\", (unsigned long)timebase->accuracy_usec);\n            OS_TimerGetInfo_LogLine(logbuf);\n        }\n        else\n        {\n            OS_TimerGetInfo_LogLine(\"OS_TimerGetInfo: timebase is NULL\");\n        }\n\n        /* Preserve original logic: populate timer_prop */\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        /* Log the values written into the output structure for reproducibility */\n        snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: output name=\\\"%s\\\", creator=%lu, interval_time=%lu, accuracy=%lu\",\n                 timer_prop->name, (unsigned long)timer_prop->creator, (unsigned long)timer_prop->interval_time, (unsigned long)timer_prop->accuracy);\n        OS_TimerGetInfo_LogLine(logbuf);\n\n        OS_ObjectIdRelease(&token);\n        OS_TimerGetInfo_LogLine(\"OS_TimerGetInfo: released object token\");\n    }\n\n    snprintf(logbuf, sizeof(logbuf), \"OS_TimerGetInfo: exit, return_code=%ld\", (long)return_code);\n    OS_TimerGetInfo_LogLine(logbuf);\n\n    return return_code;\n}\n"
}