{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro returns a pointer with the same const-qualification as the table operand. In the code, the tables (OS_timecb_table, OS_timebase_table and OS_global_timecb_table) are non-const, so the macro yields non-const pointers. In OS_TimerGetInfo these pointers (record, timecb, timebase) are only used for read access, so they should be declared as pointers to const-qualified types (e.g. const OS_timecb_internal_record_t *timecb, const OS_timebase_internal_record_t *timebase, const OS_common_record_t *record). As written, the code obtains non-const pointers where const-qualified pointers are possible, which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper: append-only log for control flow and state inspection. */\nstatic void OS_TimerLogProbe(const char *fmt, ...)\n{\n    va_list args;\n    FILE *fp = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry parameters */\n    OS_TimerLogProbe(\"OS_TimerGetInfo: entry - timer_id=%lu, timer_prop=%p\",\n                     (unsigned long)timer_id, (void *)timer_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimerLogProbe(\"OS_TimerGetInfo: current objtype=%u\", (unsigned)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerLogProbe(\"OS_TimerGetInfo: early return - incorrect obj state\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    OS_TimerLogProbe(\"OS_TimerGetInfo: cleared timer_prop (size=%zu)\", sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    OS_TimerLogProbe(\"OS_TimerGetInfo: OS_ObjectIdGetById returned %ld, token=%p\",\n                     (long)return_code, (void *)&token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        /* Log pointer values as obtained from the table */\n        OS_TimerLogProbe(\"OS_TimerGetInfo: record ptr=%p, timecb ptr=%p\",\n                         (void *)record, (void *)timecb);\n\n        /* Guard logging dereferences to avoid introducing functional changes */\n        if (record != NULL)\n        {\n            /* Attempt to print name (may not be null-terminated in some implementations) */\n            OS_TimerLogProbe(\"OS_TimerGetInfo: record->name_entry=<%s>, creator=%lu\",\n                             (char *)record->name_entry, (unsigned long)record->creator);\n        }\n        else\n        {\n            OS_TimerLogProbe(\"OS_TimerGetInfo: record is NULL\");\n        }\n\n        if (timecb != NULL)\n        {\n            OS_TimerLogProbe(\"OS_TimerGetInfo: timecb->interval_time=%lu, timecb->timebase_token=%lu\",\n                             (unsigned long)timecb->interval_time,\n                             (unsigned long)timecb->timebase_token);\n\n            timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n            OS_TimerLogProbe(\"OS_TimerGetInfo: timebase ptr=%p\", (void *)timebase);\n\n            if (timebase != NULL)\n            {\n                OS_TimerLogProbe(\"OS_TimerGetInfo: timebase->accuracy_usec=%lu\",\n                                 (unsigned long)timebase->accuracy_usec);\n            }\n            else\n            {\n                OS_TimerLogProbe(\"OS_TimerGetInfo: timebase is NULL\");\n            }\n        }\n        else\n        {\n            OS_TimerLogProbe(\"OS_TimerGetInfo: timecb is NULL - cannot lookup timebase\");\n            timebase = NULL;\n        }\n\n        /* Preserve original behavior: populate timer_prop from the records */\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->name[sizeof(timer_prop->name) - 1] = '\\0';\n\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_TimerLogProbe(\"OS_TimerGetInfo: populated timer_prop: name=<%s>, creator=%lu, interval_time=%lu, accuracy=%lu\",\n                         (char *)timer_prop->name,\n                         (unsigned long)timer_prop->creator,\n                         (unsigned long)timer_prop->interval_time,\n                         (unsigned long)timer_prop->accuracy);\n\n        OS_ObjectIdRelease(&token);\n        OS_TimerLogProbe(\"OS_TimerGetInfo: released token and about to return success\");\n    }\n    else\n    {\n        OS_TimerLogProbe(\"OS_TimerGetInfo: OS_ObjectIdGetById did not find object (code=%ld)\", (long)return_code);\n    }\n\n    OS_TimerLogProbe(\"OS_TimerGetInfo: exit - return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}