{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member 'void *callback_arg' is an unqualified pointer to callback data. If the callback argument is intended to be read-only (i.e. callbacks do not modify the pointed-to object), then this should be declared 'const void *callback_arg' to prevent modification and satisfy MISRA C 2023 Rule 8.13. As written (plain 'void *'), the pointer is not const-qualified and therefore violates the rule in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/2753.txt */\nstatic void OS_TimerGetInfo_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    localtime_r(&t, &tm_buf);\n\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(fp, \"[%s] pid=%d: \", timestr, (int)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    OS_TimerGetInfo_log(\"ENTER OS_TimerGetInfo: timer_id=%u, timer_prop=%p\", (unsigned)timer_id, (void *)timer_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimerGetInfo_log(\"OS_ObjectIdToType_Impl returned objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerGetInfo_log(\"Incorrect context: called from a timebase callback context -> returning OS_ERR_INCORRECT_OBJ_STATE\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    OS_TimerGetInfo_log(\"Cleared timer_prop at %p (size=%zu)\", (void *)timer_prop, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    OS_TimerGetInfo_log(\"OS_ObjectIdGetById returned return_code=%d, token_address=%p\", (int)return_code, (void *)&token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log records and internal fields to capture state relevant to the violation scenario */\n        if (record != NULL)\n        {\n            /* name_entry may not be null-terminated; limit output to the destination buffer size */\n            char name_buf[sizeof(((OS_timer_prop_t *)0)->name)];\n            memset(name_buf, 0, sizeof(name_buf));\n            memcpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            OS_TimerGetInfo_log(\"record=%p, record->name_entry='%s', record->creator=%u\", (void *)record, name_buf, (unsigned)record->creator);\n        }\n        else\n        {\n            OS_TimerGetInfo_log(\"record pointer is NULL\");\n        }\n\n        if (timecb != NULL)\n        {\n            OS_TimerGetInfo_log(\"timecb=%p, timecb->timebase_token=%u, timecb->interval_time=%u, timecb->callback_arg=%p\",\n                                (void *)timecb,\n                                (unsigned)timecb->timebase_token,\n                                (unsigned)timecb->interval_time,\n                                (void *)timecb->callback_arg);\n        }\n        else\n        {\n            OS_TimerGetInfo_log(\"timecb pointer is NULL\");\n        }\n\n        if (timebase != NULL)\n        {\n            OS_TimerGetInfo_log(\"timebase=%p, timebase->accuracy_usec=%u\", (void *)timebase, (unsigned)timebase->accuracy_usec);\n        }\n        else\n        {\n            OS_TimerGetInfo_log(\"timebase pointer is NULL (timecb->timebase_token=%u)\", (unsigned)(timecb ? timecb->timebase_token : 0));\n        }\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_TimerGetInfo_log(\"Populated timer_prop: name='%s', creator=%u, interval_time=%u, accuracy=%u\",\n                            timer_prop->name, (unsigned)timer_prop->creator, (unsigned)timer_prop->interval_time, (unsigned)timer_prop->accuracy);\n\n        OS_ObjectIdRelease(&token);\n        OS_TimerGetInfo_log(\"Released object token at %p\", (void *)&token);\n    }\n    else\n    {\n        OS_TimerGetInfo_log(\"Object lookup failed for timer_id=%u with code=%d\", (unsigned)timer_id, (int)return_code);\n    }\n\n    OS_TimerGetInfo_log(\"EXIT OS_TimerGetInfo returning %d\", (int)return_code);\n    return return_code;\n}\n"
}