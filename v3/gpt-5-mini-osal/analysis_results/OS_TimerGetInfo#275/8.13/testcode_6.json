{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * but is only used for reading (record->name_entry, record->creator). It is initialized from OS_OBJECT_TABLE_GET(OS_global_timecb_table, token) which yields a non-const OS_common_record_t *. According to Rule 8.13 the pointer should point to a const-qualified type when possible, so 'record' should be declared as const OS_common_record_t * to reflect that the pointed-to object is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper for OS_TimerGetInfo. Writes an append-only log to /tmp/logs/2753.txt\n * This function intentionally does not modify any OS objects; it only reads fields for logging. */\nstatic void OS_TimerGetInfo_LogState(osal_id_t timer_id,\n                                    osal_objtype_t objtype,\n                                    int32 return_code,\n                                    const OS_common_record_t *record,\n                                    const OS_timecb_internal_record_t *timecb,\n                                    const OS_timebase_internal_record_t *timebase)\n{\n    FILE *log = fopen(\"/tmp/logs/2753.txt\", \"a\");\n    if (log == NULL)\n    {\n        return;\n    }\n\n    /* Basic invocation/state info */\n    fprintf(log, \"OS_TimerGetInfo ENTER: timer_id=%llu, objtype=%d, return_code=%ld\\n\",\n            (unsigned long long)timer_id,\n            (int)objtype,\n            (long)return_code);\n\n    /* Record (from object table) */\n    fprintf(log, \"  record_ptr=%p\\n\", (const void *)record);\n    if (record != NULL)\n    {\n        const char *name = record->name_entry ? record->name_entry : \"(null)\";\n        fprintf(log, \"  record->name_entry=\\\"%s\\\"\\n\", name);\n        fprintf(log, \"  record->creator=%llu\\n\", (unsigned long long)record->creator);\n    }\n\n    /* Timer control block info */\n    fprintf(log, \"  timecb_ptr=%p\\n\", (const void *)timecb);\n    if (timecb != NULL)\n    {\n        fprintf(log, \"  timecb->interval_time=%llu\\n\", (unsigned long long)timecb->interval_time);\n    }\n\n    /* Timebase info */\n    fprintf(log, \"  timebase_ptr=%p\\n\", (const void *)timebase);\n    if (timebase != NULL)\n    {\n        fprintf(log, \"  timebase->accuracy_usec=%llu\\n\", (unsigned long long)timebase->accuracy_usec);\n    }\n\n    fprintf(log, \"OS_TimerGetInfo LOG END\\n\\n\");\n    fclose(log);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log the incorrect context path */\n        OS_TimerGetInfo_LogState(timer_id, objtype, OS_ERR_INCORRECT_OBJ_STATE, NULL, NULL, NULL);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n\n    /* Log state after attempting to get the object id */\n    OS_TimerGetInfo_LogState(timer_id, objtype, return_code, NULL, NULL, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log the retrieved table entries and their fields (read-only) */\n        OS_TimerGetInfo_LogState(timer_id, objtype, return_code, record, timecb, timebase);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log final populated values (note: timer_prop is local output) */\n        {\n            FILE *log = fopen(\"/tmp/logs/2753.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_TimerGetInfo RESULT: timer_id=%llu, return_code=%ld\\n\",\n                        (unsigned long long)timer_id, (long)return_code);\n                fprintf(log, \"  timer_prop->name=\\\"%s\\\"\\n\", timer_prop->name);\n                fprintf(log, \"  timer_prop->creator=%llu\\n\", (unsigned long long)timer_prop->creator);\n                fprintf(log, \"  timer_prop->interval_time=%u\\n\", timer_prop->interval_time);\n                fprintf(log, \"  timer_prop->accuracy=%u\\n\", timer_prop->accuracy);\n                fprintf(log, \"----\\n\\n\");\n                fclose(log);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}