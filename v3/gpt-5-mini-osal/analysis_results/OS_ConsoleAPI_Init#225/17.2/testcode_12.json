{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ConsoleAPI_Init calls OS_ObjectIdAllocateNew, which calls OS_NotifyEvent. OS_NotifyEvent invokes a user-supplied EventHandler callback. If that EventHandler calls OS_ConsoleAPI_Init (or OS_ObjectIdAllocateNew) again, this creates an indirect recursion: OS_ConsoleAPI_Init -> OS_ObjectIdAllocateNew -> OS_NotifyEvent -> EventHandler -> OS_ConsoleAPI_Init (or OS_ObjectIdAllocateNew). Therefore the fragment can lead to an indirect self-call and violates Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2256.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleAPI_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdbool.h>\n\n/* Probe helpers --- inserted to capture control flow/state for analysis. */\nstatic volatile int probe_reentrancy_counter = 0;\n\nstatic void probe_logf(const char *probe_tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2256.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[%s] \", probe_tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and reentrancy state */\n    probe_reentrancy_counter++;\n    probe_logf(\"OS_ConsoleAPI_Init\", \"ENTER: reentrancy_counter=%d\", probe_reentrancy_counter);\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"memset(OS_console_table) done\");\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ObjectIdAllocateNew with name=\\\"%s\\\"\", OS_PRINTF_CONSOLE_NAME);\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdAllocateNew returned=%\" PRId32 \", token_addr=%p, token_size=%zu\",\n               return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_OBJECT_TABLE_GET -> console_ptr=%p\", (void *)console);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_OBJECT_INIT done for name=\\\"%s\\\"\", OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Console ring buffer set: BufBase=%p BufSize=%zu IsAsync=%d\",\n                   (void *)console->BufBase, (size_t)console->BufSize, (int)console->IsAsync);\n\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ConsoleCreate_Impl with token_addr=%p\", (void *)&token);\n        return_code = OS_ConsoleCreate_Impl(&token);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ConsoleCreate_Impl returned=%\" PRId32, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ObjectIdFinalizeNew with return_code=%\" PRId32, return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdFinalizeNew returned=%\" PRId32, return_code);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        probe_logf(\"OS_ConsoleAPI_Init\", \"PrintfEnabled set to true\");\n    }\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"EXIT: returning=%\" PRId32 \", reentrancy_counter(before_dec)=%d\",\n               return_code, probe_reentrancy_counter);\n    /* decrement reentrancy counter on exit */\n    if (probe_reentrancy_counter > 0)\n    {\n        probe_reentrancy_counter--;\n    }\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"EXIT: reentrancy_counter(after_dec)=%d\", probe_reentrancy_counter);\n\n    return return_code;\n}\n"
}