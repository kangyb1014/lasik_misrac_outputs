{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset(&OS_console_table, 0, sizeof(OS_console_table)) is redundant. OS_console_table is a static-duration global array and is guaranteed to be zero-initialized at program startup. Furthermore, when an entry is actually allocated the code uses OS_OBJECT_INIT which itself does a memset(ref,0,sizeof(*ref)) to reinitialize the specific entry before use. Therefore removing this full-table memset would not change program behaviour in the provided code paths, so the operation qualifies as dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2252.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleAPI_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Helper: append a formatted log line to the evidence file */\nstatic void OS_ConsoleAPI_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2252.txt\", \"a\");\n    if (!f) return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper: append raw bytes (hex) to the evidence file */\nstatic void OS_ConsoleAPI_LogBytes(const char *label, const void *ptr, size_t len)\n{\n    FILE *f = fopen(\"/tmp/logs/2252.txt\", \"a\");\n    if (!f) return;\n\n    const unsigned char *p = (const unsigned char *)ptr;\n    size_t i;\n\n    fprintf(f, \"%s (len=%zu):\", label, len);\n    for (i = 0; i < len; ++i)\n    {\n        if ((i % 16) == 0) fprintf(f, \"\\n  %04zx: \", i);\n        fprintf(f, \"%02X \", p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and some state before the memset */\n    OS_ConsoleAPI_Log(\"OS_ConsoleAPI_Init: entry\");\n    OS_ConsoleAPI_Log(\"sizeof(OS_console_table)=%zu\", (size_t)sizeof(OS_console_table));\n\n    /* Capture first bytes of the table before the memset to demonstrate prior state */\n    {\n        size_t preview = sizeof(OS_console_table) < 64 ? sizeof(OS_console_table) : 64;\n        OS_ConsoleAPI_LogBytes(\"OS_console_table pre-memset (first bytes)\", &OS_console_table, preview);\n    }\n\n    /* The original memset call (the subject of the reported dead-code) */\n    OS_ConsoleAPI_Log(\"Calling memset(&OS_console_table, 0, sizeof(OS_console_table))\");\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n    OS_ConsoleAPI_Log(\"memset completed\");\n\n    /* Capture first bytes of the table after the memset to demonstrate post state */\n    {\n        size_t preview = sizeof(OS_console_table) < 64 ? sizeof(OS_console_table) : 64;\n        OS_ConsoleAPI_LogBytes(\"OS_console_table post-memset (first bytes)\", &OS_console_table, preview);\n    }\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    OS_ConsoleAPI_Log(\"OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n\n    /* Log raw token bytes so external analysis can determine whether token changed from default */\n    OS_ConsoleAPI_LogBytes(\"token bytes after OS_ObjectIdAllocateNew\", &token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_ConsoleAPI_Log(\"Calling OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME)\");\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n        OS_ConsoleAPI_Log(\"OS_OBJECT_INIT completed; console ptr=%p\", (void *)console);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        OS_ConsoleAPI_Log(\"Configured console buffer: BufBase=%p BufSize=%zu IsAsync=%d\",\n                           (void *)console->BufBase, (size_t)console->BufSize, (int)console->IsAsync);\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n        OS_ConsoleAPI_Log(\"OS_ConsoleCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        OS_ConsoleAPI_Log(\"OS_ObjectIdFinalizeNew returned %ld; PrintfConsoleId=%ld\",\n                           (long)return_code, (long)OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        OS_ConsoleAPI_Log(\"PrintfEnabled set to true\");\n    }\n\n    OS_ConsoleAPI_Log(\"OS_ConsoleAPI_Init: exit with return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}