{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_ObjectIdAllocateNew declares the name parameter as a non-const pointer (e.g. char *name) while OS_PRINTF_CONSOLE_NAME is a string literal or otherwise not intended to be modified, then passing OS_PRINTF_CONSOLE_NAME to that non-const parameter violates MISRA C 2023 Rule 8.13. Example violating prototype: int32 OS_ObjectIdAllocateNew(uint32 type, char *name, OS_object_token_t *token); \u2014 the parameter should be const char *name (or OS_PRINTF_CONSOLE_NAME should be a writable buffer) to satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleAPI_Init code.\n",
  "test_code": "int32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Probe: log function entry and key static pointers/values */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2253.txt\", \"a\");\n        if (logf != NULL)\n        {\n            /* Log entry and the console name pointer + contents to capture the violation scenario */\n            const char *name_probe = OS_PRINTF_CONSOLE_NAME;\n            fprintf(logf, \"OS_ConsoleAPI_Init: entered\\n\");\n            fprintf(logf, \"OS_PRINTF_CONSOLE_NAME ptr=%p, content=\\\"%s\\\"\\n\", (void *)name_probe, name_probe);\n            fclose(logf);\n        }\n    }\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n\n    /* Probe: log the result of allocation and token value */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2253.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n            fprintf(logf, \"token value after allocate attempt: %ld\\n\", (long)token);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /* Probe: log console pointer and device_name contents */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2253.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_OBJECT_TABLE_GET returned console ptr=%p\\n\", (void *)console);\n\n                /* device_name is implementation-defined storage; attempt to print if available */\n                /* Note: do not modify device_name; only read for logging */\n                fprintf(logf, \"device_name after OS_OBJECT_INIT: \\\"%s\\\"\\n\", console->device_name);\n                fclose(logf);\n            }\n        }\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        /* Probe: log buffer configuration */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2253.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BufBase ptr=%p, BufSize=%zu, IsAsync=%d\\n\",\n                        (void *)console->BufBase, (size_t)console->BufSize, (int)console->IsAsync);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Probe: log result of Create_Impl */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2253.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_ConsoleCreate_Impl returned %ld\\n\", (long)return_code);\n                fclose(logf);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /* Probe: log result of FinalizeNew and PrintfConsoleId */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2253.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_ObjectIdFinalizeNew returned %ld\\n\", (long)return_code);\n                fprintf(logf, \"PrintfConsoleId after finalize: %ld\\n\", (long)OS_SharedGlobalVars.PrintfConsoleId);\n                fclose(logf);\n            }\n        }\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n\n        /* Probe: log that PrintfEnabled was set */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2253.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"PrintfEnabled set to true\\n\");\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final probe: log exit and final return code */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2253.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ConsoleAPI_Init: exiting with return_code=%ld\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}