{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_ConsoleAPI_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2255.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp (human readable) */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char ts[32];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"%s - \", ts);\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    OS_ConsoleAPI_Log(\"OS_ConsoleAPI_Init: entry\");\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n    OS_ConsoleAPI_Log(\"memset: OS_console_table cleared (size=%zu)\", sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    OS_ConsoleAPI_Log(\"OS_ObjectIdAllocateNew returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n        OS_ConsoleAPI_Log(\"OS_OBJECT_TABLE_GET: console pointer = %p\", (void *)console);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n        OS_ConsoleAPI_Log(\"OS_OBJECT_INIT performed for token (init done)\");\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        OS_ConsoleAPI_Log(\"Console buffer configured: BufBase=%p, BufSize=%llu, IsAsync=%d\",\n                          (void *)console->BufBase,\n                          (unsigned long long)console->BufSize,\n                          (int)console->IsAsync);\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n        OS_ConsoleAPI_Log(\"OS_ConsoleCreate_Impl returned %d\", (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        OS_ConsoleAPI_Log(\"OS_ObjectIdFinalizeNew returned %d, PrintfConsoleId=%llu\",\n                          (int)return_code,\n                          (unsigned long long)OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        OS_ConsoleAPI_Log(\"PrintfEnabled set to true\");\n    }\n    else\n    {\n        OS_ConsoleAPI_Log(\"OS_ObjectIdAllocateNew failed with code %d - skipping console setup\", (int)return_code);\n    }\n\n    OS_ConsoleAPI_Log(\"OS_ConsoleAPI_Init: exit with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp5lo6a7rx/src/src/os/shared/src/osapi-printf.c: In function 'OS_ConsoleAPI_Log':\n/tmp/tmp5lo6a7rx/src/src/os/shared/src/osapi-printf.c:103:15: error: storage size of 'tm' isn't known\n  103 |     struct tm tm;\n      |               ^~\n/tmp/tmp5lo6a7rx/src/src/os/shared/src/osapi-printf.c:115:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  115 |     vfprintf(f, fmt, args);\n      |                      ^~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/__/__/os/shared/src/osapi-printf.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4035: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\nstatic void OS_ConsoleAPI_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2255.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp (human readable) */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char ts[32];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"%s - \", ts);\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    /* Some build environments typedef va_list differently (e.g. OCS_va_list). Ensure\n     * the argument passed to vfprintf is of the real va_list type by casting. */\n    vfprintf(f, fmt, (va_list)args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    OS_ConsoleAPI_Log(\"OS_ConsoleAPI_Init: entry\");\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n    OS_ConsoleAPI_Log(\"memset: OS_console_table cleared (size=%zu)\", sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    OS_ConsoleAPI_Log(\"OS_ObjectIdAllocateNew returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n        OS_ConsoleAPI_Log(\"OS_OBJECT_TABLE_GET: console pointer = %p\", (void *)console);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n        OS_ConsoleAPI_Log(\"OS_OBJECT_INIT performed for token (init done)\");\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        OS_ConsoleAPI_Log(\"Console buffer configured: BufBase=%p, BufSize=%llu, IsAsync=%d\",\n                          (void *)console->BufBase,\n                          (unsigned long long)console->BufSize,\n                          (int)console->IsAsync);\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n        OS_ConsoleAPI_Log(\"OS_ConsoleCreate_Impl returned %d\", (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        OS_ConsoleAPI_Log(\"OS_ObjectIdFinalizeNew returned %d, PrintfConsoleId=%llu\",\n                          (int)return_code,\n                          (unsigned long long)OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        OS_ConsoleAPI_Log(\"PrintfEnabled set to true\");\n    }\n    else\n    {\n        OS_ConsoleAPI_Log(\"OS_ObjectIdAllocateNew failed with code %d - skipping console setup\", (int)return_code);\n    }\n\n    OS_ConsoleAPI_Log(\"OS_ConsoleAPI_Init: exit with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "I added the necessary includes (<time.h> and <stdarg.h>, plus common headers) so struct tm and va_list are defined. To address the va_list type mismatch seen in the build (where va_list may be an alternate typedef like OCS_va_list), I cast the args to (va_list) when calling vfprintf. These minimal changes preserve the original logic while fixing the compile errors."
}