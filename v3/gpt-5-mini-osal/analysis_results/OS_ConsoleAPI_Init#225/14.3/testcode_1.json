{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses an invariant controlling expression while (true). This is not one of the permitted exceptions: it is not an intentionally infinite loop (the loop exits via internal break/return conditions and a bounded attempts count) and it is not a do-while with a constant-false Boolean expression. Therefore the controlling expression is invariant and Rule 14.3 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleAPI_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper - appends messages to /tmp/logs/2255.txt */\nstatic void OS_ConsoleAPI_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2255.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp (human readable) */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char ts[32];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"%s - \", ts);\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    OS_ConsoleAPI_Log(\"OS_ConsoleAPI_Init: entry\");\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n    OS_ConsoleAPI_Log(\"memset: OS_console_table cleared (size=%zu)\", sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    OS_ConsoleAPI_Log(\"OS_ObjectIdAllocateNew returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n        OS_ConsoleAPI_Log(\"OS_OBJECT_TABLE_GET: console pointer = %p\", (void *)console);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n        OS_ConsoleAPI_Log(\"OS_OBJECT_INIT performed for token (init done)\");\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        OS_ConsoleAPI_Log(\"Console buffer configured: BufBase=%p, BufSize=%llu, IsAsync=%d\",\n                          (void *)console->BufBase,\n                          (unsigned long long)console->BufSize,\n                          (int)console->IsAsync);\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n        OS_ConsoleAPI_Log(\"OS_ConsoleCreate_Impl returned %d\", (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        OS_ConsoleAPI_Log(\"OS_ObjectIdFinalizeNew returned %d, PrintfConsoleId=%llu\",\n                          (int)return_code,\n                          (unsigned long long)OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        OS_ConsoleAPI_Log(\"PrintfEnabled set to true\");\n    }\n    else\n    {\n        OS_ConsoleAPI_Log(\"OS_ObjectIdAllocateNew failed with code %d - skipping console setup\", (int)return_code);\n    }\n\n    OS_ConsoleAPI_Log(\"OS_ConsoleAPI_Init: exit with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}