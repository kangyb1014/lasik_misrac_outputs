{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo_Impl:\n```c\nint32 OS_CountSemGetInfo_Impl(const OS_object_token_t *token, OS_count_sem_prop_t *count_prop)\n{\n    int                                 sval;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_getvalue(&impl->id, &sval) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* put the info into the structure */\n    count_prop->value = sval;\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemGetInfo_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_count_sem_prop_t\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\ntypedef int32_t   int32\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided code. Specifically:\n\n- The function definition and local declarations (int32 return type, int sval, pointer use) use standard C constructs and typedefs (int32 is a typedef of int32_t), not compiler extensions.\n\n- The macro OS_OBJECT_TABLE_GET(tbl, tok) uses standard macro expansion, address-of (&) and array indexing; its use with *token results in &( *token ) which is equivalent to the original pointer and is valid standard C expression usage.\n\n- The inline helper OS_ObjectIndexFromToken is declared with the standard inline keyword (C99/C11) and uses only a pointer dereference; inline is not a compiler extension in standard C.\n\n- The sem_t type and sem_getvalue call are POSIX API/library usages (not language/compiler extensions) \u2014 POSIX APIs are platform-specific library calls but not compiler language extensions as required by MISRA C Rule 1.2.\n\n- Macros for OS_SUCCESS, OS_SEM_FAILURE and the typedef/struct definitions are standard C constructs.\n\nI also checked for common compiler extensions such as __attribute__, __asm__, typeof, statement-expression ({: ... ;}), nested functions, Microsoft-specific declspecs, or other vendor-specific keywords \u2014 none are present. Therefore there are no code fragments that need investigation under MISRA C 2023 Rule 1.2 (language extensions)."
}