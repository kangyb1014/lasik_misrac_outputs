{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryRewind:\n```c\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRewind_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_DirRewind_Impl(&token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The fragment passes &token (type OS_object_token_t *) to OS_DirRewind_Impl. If the prototype of OS_DirRewind_Impl is non-const, e.g. int32 OS_DirRewind_Impl(OS_object_token_t *token), and the function does not modify the pointed-to object, then a pointer to a non-const type is used when a const-qualified pointer could be used \u2014 this violates MISRA C 2023 Rule 8.13. To fix, declare the parameter as const OS_object_token_t *token (and update the implementation accordingly). If, however, OS_DirRewind_Impl legitimately modifies *token (i.e. its API requires a mutable pointer), then no violation occurs."
}