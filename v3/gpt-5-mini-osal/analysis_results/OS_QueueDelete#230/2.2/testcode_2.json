{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable in OS_ObjectIdConvertToken is initialized to OS_ERROR but every path that uses the variable either returns a literal immediately or assigns a value to return_code before it is read. For example, the function has an early return if !OS_ObjectIdIsValid(expected_id) (so the initial write is never observed), and all loop-exit paths set return_code to OS_SUCCESS, OS_ERR_INVALID_ID or OS_ERR_OBJECT_IN_USE before the final return. Thus the initial assignment int32 return_code = OS_ERROR; is an executed operation whose removal would not affect program behaviour (the variable is overwritten or the function returns prior to use), so it constitutes dead code per MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2302.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete:\n```c\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueDelete code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: write a simple trace line to /tmp/logs/2302.txt.\n * Keeps the original logic intact and only records key state and control-flow\n * decisions so other agents can reproduce and gather evidence. */\nstatic void probe_log(const char *tag, int return_code, int queue_id, const void *token_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/2302.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Simple, portable formatting. Avoids reliance on specific typedefs. */\n        fprintf(f, \"%s: return_code=%d queue_id=%d token_addr=%p\\n\", tag, return_code, queue_id, token_addr);\n        fclose(f);\n    }\n}\n\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with the queue id and the address of the token object.\n     * token is uninitialized here, but logging its address is safe and useful\n     * to correlate subsequent logs for the same stack frame. */\n    probe_log(\"OS_QueueDelete:start\", 0, (int)queue_id, (const void *)&token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    probe_log(\"OS_QueueDelete:after_GetById\", (int)return_code, (int)queue_id, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"OS_QueueDelete:enter_Impl\", 0, (int)queue_id, (const void *)&token);\n\n        return_code = OS_QueueDelete_Impl(&token);\n        probe_log(\"OS_QueueDelete:after_Impl\", (int)return_code, (int)queue_id, (const void *)&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        probe_log(\"OS_QueueDelete:after_FinalizeDelete\", (int)return_code, (int)queue_id, (const void *)&token);\n    }\n    else\n    {\n        probe_log(\"OS_QueueDelete:GetById_failed\", (int)return_code, (int)queue_id, (const void *)&token);\n    }\n\n    probe_log(\"OS_QueueDelete:return\", (int)return_code, (int)queue_id, (const void *)&token);\n    return return_code;\n}\n"
}