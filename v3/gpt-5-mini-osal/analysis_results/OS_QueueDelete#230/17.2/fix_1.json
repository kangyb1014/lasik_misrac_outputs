{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2306.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n    else\n    {\n        fprintf(f, \"[no-time] \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    os_probe_log(\"OS_QueueDelete ENTRY: queue_id=%llu\", (unsigned long long)queue_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    os_probe_log(\"OS_QueueDelete: OS_ObjectIdGetById returned %d for queue_id=%llu (token_addr=%p)\",\n                 (int)return_code, (unsigned long long)queue_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_probe_log(\"OS_QueueDelete: calling OS_QueueDelete_Impl for queue_id=%llu\", (unsigned long long)queue_id);\n        return_code = OS_QueueDelete_Impl(&token);\n        os_probe_log(\"OS_QueueDelete: OS_QueueDelete_Impl returned %d for queue_id=%llu\", (int)return_code, (unsigned long long)queue_id);\n\n        /* Complete the operation via the common routine */\n        os_probe_log(\"OS_QueueDelete: calling OS_ObjectIdFinalizeDelete for queue_id=%llu (pre-finalize rc=%d)\",\n                     (unsigned long long)queue_id, (int)return_code);\n\n        /* The following call may invoke user-supplied callbacks which could re-enter OS APIs. */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        os_probe_log(\"OS_QueueDelete: OS_ObjectIdFinalizeDelete returned %d for queue_id=%llu (post-finalize)\",\n                     (int)return_code, (unsigned long long)queue_id);\n    }\n    else\n    {\n        os_probe_log(\"OS_QueueDelete: skipping delete since OS_ObjectIdGetById failed with %d for queue_id=%llu\",\n                     (int)return_code, (unsigned long long)queue_id);\n    }\n\n    os_probe_log(\"OS_QueueDelete EXIT: queue_id=%llu return_code=%d\", (unsigned long long)queue_id, (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c:1:\n/tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c: In function 'os_probe_log':\n/tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c:147:19: error: invalid use of undefined type 'struct tm'\n  147 |                 tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n      |                   ^~\n/tmp/tmpzwcqa314/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c:147:39: error: invalid use of undefined type 'struct tm'\n  147 |                 tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n      |                                       ^~\n/tmp/tmpzwcqa314/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c:147:55: error: invalid use of undefined type 'struct tm'\n  147 |                 tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n      |                                                       ^~\n/tmp/tmpzwcqa314/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c:148:19: error: invalid use of undefined type 'struct tm'\n  148 |                 tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                   ^~\n/tmp/tmpzwcqa314/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c:148:32: error: invalid use of undefined type 'struct tm'\n  148 |                 tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                ^~\n/tmp/tmpzwcqa314/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c:148:44: error: invalid use of undefined type 'struct tm'\n  148 |                 tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                            ^~\n/tmp/tmpzwcqa314/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpzwcqa314/src/src/os/shared/src/osapi-queue.c:157:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  157 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/__/__/os/shared/src/osapi-queue.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4097: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_QueueDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "/* Fixed osapi-queue.c test fragment - self-contained for compilation\n * Preserves original OS_QueueDelete logic while providing the\n * required declarations so this translation unit compiles by itself.\n * Note: no main(), no macros defined, no mock function implementations.\n */\n\n#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Minimal type aliases to allow compilation while preserving original logic */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\n\n/* Minimal token type (definition provided so taking its address is valid) */\ntypedef struct\n{\n    /* opaque placeholder - actual implementation provides real fields */\n    void *obj;\n} OS_object_token_t;\n\n/* Constants as enum (avoid macros) */\nenum\n{\n    OS_LOCK_MODE_EXCLUSIVE = 1,\n    LOCAL_OBJID_TYPE = 2,\n    OS_SUCCESS = 0\n};\n\n/* Declarations of external functions used by OS_QueueDelete\n * These are declared but not defined here (no mock implementations) so the\n * file compiles and preserves the original call sequences. */\nint32 OS_ObjectIdGetById(int lock_mode, int obj_type, osal_id_t id, OS_object_token_t *token);\nint32 OS_QueueDelete_Impl(OS_object_token_t *token);\nint32 OS_ObjectIdFinalizeDelete(int return_code, OS_object_token_t *token);\n\n/* Logging helper - mirrors original behavior */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2306.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n        /* Use strftime to avoid directly depending on field layout (but fields are available via <time.h>) */\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S \", tm) > 0)\n        {\n            fputs(timestr, f);\n        }\n        else\n        {\n            fputs(\"[time-format-error] \", f);\n        }\n    }\n    else\n    {\n        fprintf(f, \"[no-time] \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    os_probe_log(\"OS_QueueDelete ENTRY: queue_id=%llu\", (unsigned long long)queue_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    os_probe_log(\"OS_QueueDelete: OS_ObjectIdGetById returned %d for queue_id=%llu (token_addr=%p)\",\n                 (int)return_code, (unsigned long long)queue_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_probe_log(\"OS_QueueDelete: calling OS_QueueDelete_Impl for queue_id=%llu\", (unsigned long long)queue_id);\n        return_code = OS_QueueDelete_Impl(&token);\n        os_probe_log(\"OS_QueueDelete: OS_QueueDelete_Impl returned %d for queue_id=%llu\", (int)return_code, (unsigned long long)queue_id);\n\n        /* Complete the operation via the common routine */\n        os_probe_log(\"OS_QueueDelete: calling OS_ObjectIdFinalizeDelete for queue_id=%llu (pre-finalize rc=%d)\",\n                     (unsigned long long)queue_id, (int)return_code);\n\n        /* The following call may invoke user-supplied callbacks which could re-enter OS APIs. */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        os_probe_log(\"OS_QueueDelete: OS_ObjectIdFinalizeDelete returned %d for queue_id=%llu (post-finalize)\",\n                     (int)return_code, (unsigned long long)queue_id);\n    }\n    else\n    {\n        os_probe_log(\"OS_QueueDelete: skipping delete since OS_ObjectIdGetById failed with %d for queue_id=%llu\",\n                     (int)return_code, (unsigned long long)queue_id);\n    }\n\n    os_probe_log(\"OS_QueueDelete EXIT: queue_id=%llu return_code=%d\", (unsigned long long)queue_id, (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "I made this source file self-contained for compilation by adding the necessary #includes (<stdio.h>, <stdarg.h>, <time.h>, <stdint.h>) so struct tm and va_list are properly defined. I replaced the direct tm->field accesses with strftime to format the timestamp (avoiding any issues with incomplete struct tm definitions in some build environments) while keeping the timestamp semantics. I also added minimal typedefs and declarations (int32, osal_id_t, OS_object_token_t) and prototypes for the external OS_* functions so the file compiles without providing mock implementations or changing the original OS_QueueDelete logic."
}