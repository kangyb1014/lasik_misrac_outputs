{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_IdleLoop_Impl:\n```c\nvoid OS_IdleLoop_Impl(void)\n{\n    /*\n     * Unblock signals and wait for something to occur\n     *\n     * Note - \"NormalSigMask\" was calculated during task init to be the original signal mask\n     * of the process PLUS all \"RT\" signals.  The RT signals are used by timers, so we want\n     * to keep them masked here (this is different than the original POSIX impl).  The\n     * timebase objects have a dedicated thread that will be doing \"sigwait\" on those.\n     */\n    sigsuspend(&POSIX_GlobalVars.NormalSigMask);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nsigsuspend(&POSIX_GlobalVars.NormalSigMask);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The POSIX sigsuspend prototype is int sigsuspend(const sigset_t *mask); the function parameter is a pointer to a const-qualified type, so passing &POSIX_GlobalVars.NormalSigMask yields a pointer-to-const as required. (Note: if NormalSigMask is never modified after initialization it could be declared const for clarity, but that is an improvement, not a Rule 8.13 violation of this call.)"
}