{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. If UT_ExecuteBasicHandler is passed as the DefaultHandler (or a DefaultHandler that eventually calls UT_ExecuteBasicHandler), the function registers that handler via UT_SetHandlerFunction and then calls UT_DefaultStubImpl which will invoke the registered final handler. That causes UT_ExecuteBasicHandler to be called again (indirect recursion). Thus the code can result in indirect self-call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1046.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrGetPort_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n\n/* Probe logger: append control-flow and state information to /tmp/logs/1046.txt\n * This function intentionally does not alter program logic; it only records\n * the sa_family, raw port value (network byte order), the converted port\n * number, and the return code at important stages. */\nstatic void UT_LogSocketAddrGetPort(const char *stage, int sa_family, unsigned int raw_port_be, unsigned int portnum, int ret)\n{\n    FILE *fp;\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    char timestr[64] = \"(unknown time)\";\n\n    /* Ensure log directory exists; ignore errors if it can't be created */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    if (t != (time_t)-1)\n    {\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n            {\n                /* keep fallback timestr */\n            }\n        }\n    }\n\n    fp = fopen(\"/tmp/logs/1046.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log format: timestamp | stage | sa_family | raw_port_be | portnum | ret */\n        fprintf(fp, \"%s | stage=%s | sa_family=%d | raw_port_be=0x%04x | portnum=%u | ret=%d\\n\",\n                timestr, stage, sa_family, (unsigned)(raw_port_be & 0xffffu), (unsigned)portnum, ret);\n        fclose(fp);\n    }\n}\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log entry with the sa_family observed */\n    UT_LogSocketAddrGetPort(\"entry\", (int)Accessor->sa.sa_family, 0u, 0u, 0);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            /* Log that AF_INET branch was taken and raw port value (network order) */\n            UT_LogSocketAddrGetPort(\"AF_INET\", (int)Accessor->sa.sa_family, (unsigned)sa_port, 0u, 0);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            /* Log that AF_INET6 branch was taken and raw port value (network order) */\n            UT_LogSocketAddrGetPort(\"AF_INET6\", (int)Accessor->sa.sa_family, (unsigned)sa_port, 0u, 0);\n            break;\n#endif\n        default:\n            /* Log the bad address path and return value before returning */\n            UT_LogSocketAddrGetPort(\"default_bad_address\", (int)Accessor->sa.sa_family, 0u, 0u, (int)OS_ERR_BAD_ADDRESS);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    /* Log success with converted port number and return value */\n    UT_LogSocketAddrGetPort(\"exit_success\", (int)Accessor->sa.sa_family, (unsigned)sa_port, (unsigned)*PortNum, (int)OS_SUCCESS);\n\n    return OS_SUCCESS;\n}\n"
}