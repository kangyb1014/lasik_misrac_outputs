{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketAddrGetPort_Impl:\ntypedef struct\n{\n    size_t            ActualLength; /**< @brief Length of the actual address data */\n    OS_SockAddrData_t AddrData;     /**< @brief Abstract Address data */\n} OS_SockAddr_t\n...\ntypedef union\n{\n    char               data[OS_SOCKADDR_MAX_LEN];\n    struct sockaddr    sa;\n    struct sockaddr_in sa_in;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n    struct sockaddr_in6 sa_in6;\n#endif\n} OS_SockAddr_Accessor_t\n...\ntypedef int32_t   int32\n...\ntypedef uint16_t  uint16\n...\n#define OS_ERR_BAD_ADDRESS (-34)\n...\n#define OS_SUCCESS (0)\n...\n#define OS_NETWORK_SUPPORTS_IPV6 \n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided code. Specifically:\n\n- There are no compiler-specific keywords or built-ins (e.g. __attribute__, __asm__, __builtin_*, typeof, __extension__, statement expressions, inline assembly, nonstandard pragmas, etc.).\n- Preprocessor usage (#ifdef OS_NETWORK_SUPPORTS_IPV6 and the empty #define) is standard C and not a compiler language extension.\n- The cast of &Addr->AddrData to OS_SockAddr_Accessor_t const* is plain C pointer casting (not an extension). While it relies on reinterpretation of storage, that is a portability/aliasing concern, not a compiler-language-extension usage.\n- Types and functions used (in_port_t, struct sockaddr_in/6, ntohs) are platform/OS headers (POSIX/networking) but not compiler language extensions.\n- The union and struct members, typedefs (int32, uint16), macros (OS_ERR_BAD_ADDRESS, OS_SUCCESS) and the switch/case/control-flow constructs are all standard C.\n\nBecause none of the above are compiler-specific language extensions as described in compiler documentation, there are no suspicious fragments to report for MISRA C 2023 Rule 1.2."
}