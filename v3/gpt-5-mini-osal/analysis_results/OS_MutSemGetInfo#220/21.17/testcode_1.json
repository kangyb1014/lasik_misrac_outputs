{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer over-read of the source. The call strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1) copies up to N = sizeof(mut_prop->name)-1 bytes from record->name_entry. If record->name_entry is not NUL-terminated within its own object bounds (or its underlying array is smaller than N), strncpy may attempt to read past the end of record->name_entry, violating Rule 21.17. (Note: the prior memset protects the destination from overflow or lack of NUL-termination, but it does not prevent a read beyond the source buffer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2209.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Helper logging function that appends to the required log file. */\nstatic void OS_MutSemGetInfo_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2209.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    OS_MutSemGetInfo_Log(\"ENTER: OS_MutSemGetInfo sem_id=%p mut_prop=%p\", (void *)(uintptr_t)sem_id, (void *)mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    OS_MutSemGetInfo_Log(\"After memset: mut_prop=%p sizeof(OS_mut_sem_prop_t)=%zu\", (void *)mut_prop, (size_t)sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    OS_MutSemGetInfo_Log(\"OS_ObjectIdGetById returned %ld; token=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        /* Log details that are relevant to the strncpy invocation without dereferencing the source buffer. */\n        size_t name_buf_size = sizeof(mut_prop->name);\n        size_t strncpy_n = (name_buf_size > 0) ? (name_buf_size - 1) : 0;\n\n        OS_MutSemGetInfo_Log(\"Preparing strncpy: dest=mut_prop->name(%p) dest_size=%zu copy_max=%zu source_ptr=%p record=%p\",\n                              (void *)mut_prop->name, name_buf_size, strncpy_n, (void *)((record != NULL) ? record->name_entry : NULL), (void *)record);\n\n        /* Perform the copy as in the original implementation. */\n        strncpy(mut_prop->name, record->name_entry, strncpy_n);\n        mut_prop->creator = record->creator;\n\n        /* Log the destination buffer contents after the copy. The buffer was zeroed by memset previously, so it is safe to print as a NUL-terminated string. */\n        /* Print both string form and hex bytes up to the buffer size to provide evidence of what was written. */\n        OS_MutSemGetInfo_Log(\"After strncpy: mut_prop->name as string=\\\"%s\\\"\", mut_prop->name);\n\n        /* Print hex representation of the destination buffer for exact byte-level evidence. */\n        {\n            char hexline[256];\n            size_t i, pos = 0;\n            for (i = 0; i < name_buf_size && pos + 3 < sizeof(hexline); ++i)\n            {\n                int written = snprintf(&hexline[pos], sizeof(hexline) - pos, \"%02X \", (unsigned char)mut_prop->name[i]);\n                if (written <= 0) break;\n                pos += (size_t)written;\n            }\n            hexline[pos > 0 ? pos - 1 : 0] = '\\0'; /* remove trailing space if any */\n            OS_MutSemGetInfo_Log(\"After strncpy: mut_prop->name hex=[%s]\", hexline);\n        }\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_MutSemGetInfo_Log(\"After OS_MutSemGetInfo_Impl: return_code=%ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_MutSemGetInfo_Log(\"Released token %p for sem_id=%p\", (void *)&token, (void *)(uintptr_t)sem_id);\n    }\n\n    OS_MutSemGetInfo_Log(\"EXIT: OS_MutSemGetInfo sem_id=%p return=%ld\", (void *)(uintptr_t)sem_id, (long)return_code);\n\n    return return_code;\n}\n"
}