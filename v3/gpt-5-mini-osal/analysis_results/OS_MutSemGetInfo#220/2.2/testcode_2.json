{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_MutSemGetInfo_Impl is a no-op (always returns OS_SUCCESS and performs no side effects). It is called from OS_MutSemGetInfo, but neither mut_prop nor any program state is modified by the call; removing the call (and using the same return value) would not change program behaviour. Therefore the executed operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2202.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append diagnostic logs to /tmp/logs/2202.txt */\nstatic void OS_MutSemGetInfo_Probe(const char *stage, osal_id_t sem_id, OS_object_token_t *token, const OS_mut_sem_prop_t *mut_prop, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2202.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not disturb original logic if logging fails */\n    }\n\n    fprintf(f, \"Stage: %s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  sem_id: %u\\n\", (unsigned)sem_id);\n\n    if (token != NULL)\n    {\n        /* Log the token pointer and raw size so callers can correlate tokens without depending on token internals */\n        fprintf(f, \"  token_ptr: %p, token_size: %zu\\n\", (void *)token, sizeof(*token));\n    }\n    else\n    {\n        fprintf(f, \"  token: (null)\\n\");\n    }\n\n    if (mut_prop != NULL)\n    {\n        /* Log observable fields of mut_prop that reflect state */\n        char namebuf[sizeof(mut_prop->name) + 1];\n        /* Ensure null termination when logging */\n        memcpy(namebuf, mut_prop->name, sizeof(mut_prop->name));\n        namebuf[sizeof(mut_prop->name)] = '\\0';\n        fprintf(f, \"  mut_prop->name: '%s'\\n\", namebuf);\n        fprintf(f, \"  mut_prop->creator: %u\\n\", (unsigned)mut_prop->creator);\n    }\n    else\n    {\n        fprintf(f, \"  mut_prop: (null)\\n\");\n    }\n\n    fprintf(f, \"  return_code: %d\\n\", (int)return_code);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    /* Log entry state */\n    OS_MutSemGetInfo_Probe(\"entry\", sem_id, NULL, NULL, 0);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_MutSemGetInfo_Probe(\"after_ObjectIdGetById\", sem_id, &token, mut_prop, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->name[sizeof(mut_prop->name) - 1] = '\\0';\n        mut_prop->creator = record->creator;\n\n        /* Log state just before calling the implementation hook */\n        OS_MutSemGetInfo_Probe(\"before_Impl\", sem_id, &token, mut_prop, return_code);\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        /* Log state after calling the implementation hook */\n        OS_MutSemGetInfo_Probe(\"after_Impl\", sem_id, &token, mut_prop, return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log failure path where ObjectIdGetById did not succeed */\n        OS_MutSemGetInfo_Probe(\"ObjectIdGetById_failed\", sem_id, &token, mut_prop, return_code);\n    }\n\n    /* Log exit state */\n    OS_MutSemGetInfo_Probe(\"exit\", sem_id, &token, mut_prop, return_code);\n\n    return return_code;\n}\n"
}