{
  "user_message": "An agent A claimed that the following OS_MutSemGetInfo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemGetInfo.\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function OS_MutSemGetInfo_Impl is a no-op (always returns OS_SUCCESS and performs no side effects). It is called from OS_MutSemGetInfo, but neither mut_prop nor any program state is modified by the call; removing the call (and using the same return value) would not change program behaviour. Therefore the executed operation is dead code.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nStage: entry\n  sem_id: 3735928559\n  token: (null)\n  mut_prop: (null)\n  return_code: 0\n\nStage: after_ObjectIdGetById\n  sem_id: 3735928559\n  token_ptr: 0x7ffdcd9deb80, token_size: 20\n  mut_prop->name: ''\n  mut_prop->creator: 0\n  return_code: -35\n\nStage: ObjectIdGetById_failed\n  sem_id: 3735928559\n  token_ptr: 0x7ffdcd9deb80, token_size: 20\n  mut_prop->name: ''\n  mut_prop->creator: 0\n  return_code: -35\n\nStage: exit\n  sem_id: 3735928559\n  token_ptr: 0x7ffdcd9deb80, token_size: 20\n  mut_prop->name: ''\n  mut_prop->creator: 0\n  return_code: -35\n\nStage: entry\n  sem_id: 0\n  token: (null)\n  mut_prop: (null)\n  return_code: 0\n\nStage: after_ObjectIdGetById\n  sem_id: 0\n  token_ptr: 0x7ffdcd9deb80, token_size: 20\n  mut_prop->name: ''\n  mut_prop->creator: 0\n  return_code: -35\n\nStage: ObjectIdGetById_failed\n  sem_id: 0\n  token_ptr: 0x7ffdcd9deb80, token_size: 20\n  mut_prop->name: ''\n  mut_prop->creator: 0\n  return_code: -35\n\nStage: exit\n  sem_id: 0\n  token_ptr: 0x7ffdcd9deb80, token_size: 20\n  mut_prop->name: ''\n  mut_prop->creator: 0\n  return_code: -35\n\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemGetInfo:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_SUCCESS (0)\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nextern OS_common_record_t *const OS_global_mutex_table\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n} OS_mut_sem_prop_t\n...\nint32 OS_MutSemGetInfo_Impl(const OS_object_token_t *token, OS_mut_sem_prop_t *mut_prop)\n{\n    return OS_SUCCESS;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's claim is not proven correct as stated. MISRA 2.2 defines dead code as an executed operation whose removal would not affect program behaviour. Two important points prevent concluding a violation from the information given: (1) MISRA explicitly treats timing as part of behaviour (note 1). Even a no-op call changes execution timing (call/return overhead and any compiler/ABI effects); unless you can prove that that timing difference is irrelevant for the system, you cannot automatically treat the call as dead. (2) The global function OS_MutSemGetInfo_Impl is a potential extension point: it is externally visible in the project and could be overridden, instrumented, or given side effects in other build variants. The provided source shows the current compilation unit implements it as a trivial return, but that alone does not prove across the whole project that the call has no effect in every build or that its removal would never change behaviour. If, however, you can prove (by whole-project analysis, link-time information and timing-insensitivity of the caller) that OS_MutSemGetInfo_Impl is always an empty, side-effect-free function and that removing the call cannot affect timing or any observable behaviour, then the call would be dead and the report would be correct. Given only the supplied evidence, the report as stated is not justified."
}