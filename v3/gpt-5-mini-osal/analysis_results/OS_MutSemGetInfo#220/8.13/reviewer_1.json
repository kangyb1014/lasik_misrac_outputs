{
  "user_message": "An agent A claimed that the following OS_MutSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemGetInfo.\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local variable 'record' is declared as OS_common_record_t * and is assigned from OS_OBJECT_TABLE_GET(OS_global_mutex_table, token). The code only reads fields from *record (name_entry, creator) and does not modify the pointee, so the pointer could and should be to a const-qualified type (e.g. const OS_common_record_t *record). Note also that OS_global_mutex_table is declared as 'OS_common_record_t *const' (a const pointer to mutable elements) so the pointee is not const-qualified; therefore the current code does not use a const-qualified pointee even though it could. This violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER OS_MutSemGetInfo: sem_id=3735928559, mut_prop=0x7ffe78760a50\nOS_ObjectIdGetById returned -35 (sem_id=3735928559)\nEXIT OS_MutSemGetInfo: return_code=-35\nENTER OS_MutSemGetInfo: sem_id=0, mut_prop=0x7ffe78760a50\nOS_ObjectIdGetById returned -35 (sem_id=0)\nEXIT OS_MutSemGetInfo: return_code=-35\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemGetInfo:\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n} OS_mut_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_mutex_table\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\nint32 OS_MutSemGetInfo_Impl(const OS_object_token_t *token, OS_mut_sem_prop_t *mut_prop)\n{\n    return OS_SUCCESS;\n}\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_SUCCESS (0)\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_MutSemGetInfo the local variable record is only used for read access (record->name_entry and record->creator) and is not used to modify the pointee or passed to any routine that requires a non-const pointer. Declaring it as const OS_common_record_t *record would be compatible with the result of OS_OBJECT_TABLE_GET (the implicit conversion from OS_common_record_t * to const OS_common_record_t * is allowed) and would satisfy MISRA C 2023 Rule 8.13\u2019s requirement that pointers point to const-qualified types whenever possible. The fact that OS_global_mutex_table is declared as OS_common_record_t *const (a const pointer to mutable elements) does not prevent a local pointer from being const-qualified; it only makes the pointer itself const, not the pointee. Thus the current code violates Rule 8.13 and should change record\u2019s type to const OS_common_record_t *."
}