{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as a mutable pointer to a mutable OS_common_record_t: \"OS_common_record_t *record;\". In this function the pointer is assigned from OS_OBJECT_TABLE_GET(OS_global_mutex_table, token) and is only used to read fields (record->name_entry, record->creator) \u2014 it is never used to modify the pointed object. Therefore the pointer should point to a const-qualified type (for example: \"const OS_common_record_t *record;\") to prevent unintentional modification and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Auxiliary logging helper to capture control flow and state. */\nstatic void OS_MutSemGetInfo_Log(const char *stage, osal_id_t sem_id,\n                                 const OS_common_record_t *record,\n                                 const OS_object_token_t *token,\n                                 int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not alter function behavior. */\n        return;\n    }\n\n    /* Log basic context */\n    (void)fprintf(f, \"[OS_MutSemGetInfo] %s: sem_id=%llu return_code=%ld token_ptr=%p record_ptr=%p\\n\",\n                  stage,\n                  (unsigned long long)sem_id,\n                  (long)return_code,\n                  (const void *)token,\n                  (const void *)record);\n\n    /* If a record is available, log the fields that are read by the function. */\n    if (record != NULL)\n    {\n        /* name_entry is treated as a string; guard against non-terminated content by limiting size if necessary\n         * (here we assume name_entry is a NUL-terminated string as in the original code usage). */\n        const char *name = record->name_entry ? record->name_entry : \"(null)\";\n        (void)fprintf(f, \"[OS_MutSemGetInfo] %s: record->name_entry=\\\"%s\\\" record->creator=%lu\\n\",\n                      stage,\n                      name,\n                      (unsigned long)record->creator);\n    }\n\n    fclose(f);\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    /* Log entry state before resolving the object id */\n    OS_MutSemGetInfo_Log(\"entry\", sem_id, NULL, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of id resolution */\n    OS_MutSemGetInfo_Log(\"after_ObjectIdGetById\", sem_id, NULL, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        /* Log the record pointer and contents as observed (read-only) */\n        OS_MutSemGetInfo_Log(\"after_table_get\", sem_id, (const OS_common_record_t *)record, &token, return_code);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        /* Log properties copied into the output structure */\n        OS_MutSemGetInfo_Log(\"after_copy_to_mut_prop\", sem_id, (const OS_common_record_t *)record, &token, return_code);\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        /* Log result of implementation-specific retrieval */\n        OS_MutSemGetInfo_Log(\"after_Impl\", sem_id, (const OS_common_record_t *)record, &token, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release (final state before return) */\n        OS_MutSemGetInfo_Log(\"after_release\", sem_id, (const OS_common_record_t *)record, &token, return_code);\n    }\n\n    return return_code;\n}\n"
}