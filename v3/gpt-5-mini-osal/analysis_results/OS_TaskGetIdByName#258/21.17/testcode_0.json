{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the LENGTHCHECK macro uses an unbounded string function such as strlen(name) (or strcpy/strcat/etc.) to determine the name length, then passing a char array of size OS_MAX_API_NAME that is not NUL-terminated will cause the string routine to read past the bounds of the object. For example, a buffer exactly OS_MAX_API_NAME bytes long with no terminating '\\0' will make strlen scan beyond the buffer until it finds a NUL, violating MISRA C 2023 Rule 21.17. Using a bounded function (e.g. strnlen with the limit OS_MAX_API_NAME) avoids the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2589.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetIdByName:\n```c\nint32 OS_TaskGetIdByName(osal_id_t *task_id, const char *task_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(task_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, task_name, task_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: logs information about the task_name buffer to a file for debugging\n * This function purposely avoids unbounded string operations (e.g. strlen) and\n * instead searches for a NUL terminator within a bounded range using memchr.\n */\nstatic void OS_TaskGetIdByName_LogProbe(const char *task_name, const void *task_id_ptr)\n{\n    FILE *log = fopen(\"/tmp/logs/2589.txt\", \"a\");\n    if (log == NULL)\n    {\n        return; /* If logging isn't available, do not affect original logic */\n    }\n\n    /* Bound used for checking termination; chosen conservatively */\n    const size_t max_check = 256u;\n    const unsigned char *bytes = (const unsigned char *)task_name;\n\n    fprintf(log, \"--- OS_TaskGetIdByName probe ---\\n\");\n    fprintf(log, \"task_name pointer: %p\\n\", (const void *)task_name);\n    fprintf(log, \"task_id pointer: %p\\n\", task_id_ptr);\n\n    /* Check for NUL within the bounded region using memchr (bounded operation) */\n    void *nul_pos = memchr(task_name, '\\0', max_check);\n    if (nul_pos != NULL)\n    {\n        size_t len = (size_t)((const unsigned char *)nul_pos - bytes);\n        fprintf(log, \"NUL found within %zu bytes at offset: %zu\\n\", max_check, len);\n        fprintf(log, \"reported length (bounded): %zu\\n\", len);\n\n        /* Dump the bytes up to the NUL (or up to a reasonable cap) in hex and printable form */\n        size_t dump_len = (len < 64u) ? len : 64u;\n        fprintf(log, \"first %zu bytes (hex):\", dump_len);\n        for (size_t i = 0; i < dump_len; ++i)\n        {\n            fprintf(log, \" %02X\", (unsigned)bytes[i]);\n        }\n        fprintf(log, \"\\n\");\n\n        fprintf(log, \"first %zu bytes (ascii):\\n\\n\", dump_len);\n        for (size_t i = 0; i < dump_len; ++i)\n        {\n            unsigned char c = bytes[i];\n            fprintf(log, \"%c\", (c >= 32 && c <= 126) ? c : '.');\n        }\n        fprintf(log, \"\\n\");\n    }\n    else\n    {\n        /* No NUL found within the bound -> potential violation scenario evidence */\n        fprintf(log, \"No NUL found within the first %zu bytes -> possible unterminated buffer\\n\", max_check);\n\n        /* Dump the first max_check bytes (or a cap) to help reproduce the issue */\n        size_t dump_len = (max_check < 64u) ? max_check : 64u;\n        fprintf(log, \"first %zu bytes (hex):\", dump_len);\n        for (size_t i = 0; i < dump_len; ++i)\n        {\n            fprintf(log, \" %02X\", (unsigned)bytes[i]);\n        }\n        fprintf(log, \"\\n\");\n\n        fprintf(log, \"(Note: only up to %zu bytes were inspected; if the actual buffer is larger, increase max_check)\\n\", max_check);\n    }\n\n    fprintf(log, \"--- end probe ---\\n\\n\");\n    fclose(log);\n}\n\nint32 OS_TaskGetIdByName(osal_id_t *task_id, const char *task_name)\n{\n    int32 return_code;\n\n    /* Preserve original parameter checks */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(task_name);\n\n    /* Logging probe: capture control flow and buffer state without changing logic */\n    OS_TaskGetIdByName_LogProbe(task_name, (const void *)task_id);\n\n    /* Original operation */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, task_name, task_id);\n\n    /* Log the result code as well for a full trace (append-only) */\n    {\n        FILE *log = fopen(\"/tmp/logs/2589.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdFindByName returned: %d for task_name pointer %p\\n\\n\", (int)return_code, (const void *)task_name);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}