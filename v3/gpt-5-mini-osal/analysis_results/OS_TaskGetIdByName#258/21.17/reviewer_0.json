{
  "user_message": "An agent A claimed that the following OS_TaskGetIdByName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskGetIdByName.\n```c\nint32 OS_TaskGetIdByName(osal_id_t *task_id, const char *task_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(task_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, task_name, task_id);\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the LENGTHCHECK macro uses an unbounded string function such as strlen(name) (or strcpy/strcat/etc.) to determine the name length, then passing a char array of size OS_MAX_API_NAME that is not NUL-terminated will cause the string routine to read past the bounds of the object. For example, a buffer exactly OS_MAX_API_NAME bytes long with no terminating '\\0' will make strlen scan beyond the buffer until it finds a NUL, violating MISRA C 2023 Rule 21.17. Using a bounded function (e.g. strnlen with the limit OS_MAX_API_NAME) avoids the violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n--- OS_TaskGetIdByName probe ---\ntask_name pointer: 0x5654053a1d50\ntask_id pointer: 0x5654051511ec\nNUL found within 256 bytes at offset: 29\nreported length (bounded): 29\nfirst 29 bytes (hex): 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58 58\nfirst 29 bytes (ascii):\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n--- end probe ---\n\nOS_ObjectIdFindByName returned: -13 for task_name pointer 0x5654053a1d50\n\n--- OS_TaskGetIdByName probe ---\ntask_name pointer: 0x565405135975\ntask_id pointer: 0x5654051511f0\nNUL found within 256 bytes at offset: 8\nreported length (bounded): 8\nfirst 8 bytes (hex): 4E 6F 74 46 6F 75 6E 64\nfirst 8 bytes (ascii):\n\nNotFound\n--- end probe ---\n\nOS_ObjectIdFindByName returned: -17 for task_name pointer 0x565405135975\n\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskGetIdByName:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_ObjectIdGetByName(OS_lock_mode_t lock_mode, osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    return OS_ObjectIdGetBySearch(lock_mode, idtype, OS_ObjectNameMatch, (void *)name, token);\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\ntypedef uint32 osal_id_t\n...\ntypedef int32_t   int32\n...\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The target function OS_TaskGetIdByName itself does not call any <string.h> routines; it simply checks pointers and delegates to OS_ObjectIdFindByName. The only place a string length/termination check appears is in the LENGTHCHECK macro (used inside OS_ObjectIdFindByName). If LENGTHCHECK were implemented using an unbounded string routine such as strlen (or strcpy/strcat/etc.), then a non\u2011NUL\u2011terminated buffer could indeed cause a read past the buffer and thus violate MISRA C 2023 Rule 21.17. However, that potential violation would be in the implementation of LENGTHCHECK (or whatever helper uses string.h), not in OS_TaskGetIdByName itself. The evidence provided (execution log) even shows NUL bytes found in the probes, so no overrun occurred in those runs. Therefore the agent A claim \u2014 that OS_TaskGetIdByName violates Rule 21.17 \u2014 is not proven by the code shown. The correct conclusion is that a violation is possible only if LENGTHCHECK uses an unbounded string function; if LENGTHCHECK uses a bounded function (e.g. strnlen) or otherwise enforces bounds correctly, there is no violation. Recommended remediation: ensure LENGTHCHECK uses bounded string operations (strnlen) or otherwise guarantees NUL termination before calling unbounded string.h functions."
}