{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_DirClose_Impl:\n```c\nint32 OS_DirClose_Impl(const OS_object_token_t *token)\n{\n    OS_impl_dir_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    closedir(impl->dp);\n    impl->dp = NULL;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_DirClose_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_dir_internal_record_t OS_impl_dir_table[OS_MAX_NUM_OPEN_DIRS]\n...\ntypedef struct\n{\n    DIR *dp;\n} OS_impl_dir_internal_record_t\n...\nDIR *                          dp = opendir(local_path)\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "DIR *                          dp = opendir(local_path)"
  ],
  "explanation": "I did not flag other fragments because they do not use compiler-specific language extensions: \n- The OS_OBJECT_TABLE_GET macro and its usage (impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token)) use standard C preprocessor and pointer/array semantics; taking the address of &(tok) is valid when tok is an lvalue (here *token yields an lvalue, so &( *token ) is legal). This is not a language extension.\n- Use of closedir(), opendir(), DIR*, and NULL are standard POSIX library features and C types, not compiler language extensions.\n- The typedefs, struct definitions, and the static inline function definition (static inline osal_index_t OS_ObjectIndexFromToken(...)) use standard C (inline is part of ISO C99); these are not compiler-specific extensions.\n- Macro usage, pointer dereference, array indexing (&tbl[index]), and assigning NULL to a pointer are standard C constructs and do not represent compiler extensions.\n- The OS_SUCCESS macro and integer return are ordinary C.\n\nThe only fragment that may indicate a language-extension issue is the initializer calling opendir at the point shown; initializing a static/global pointer with a function call would be non-conforming in standard C (and might rely on a compiler extension), so it was reported for investigation."
}