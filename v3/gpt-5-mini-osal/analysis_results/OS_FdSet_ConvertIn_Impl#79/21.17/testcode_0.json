{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(string) can read bytes until a NUL byte is found; if 'string' is NULL or points to a buffer that is not NUL-terminated within its allocated bounds (for example: char buf[4] = {'a','b','c','d'}; strlen(buf);), strlen will access beyond the object bounds. Because the fragment does not show any guarantee or check that 'string' is a valid NUL-terminated object, this use may violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertIn_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/799.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FdSet_ConvertIn_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertIn_Impl:\n```c\nstatic int32 OS_FdSet_ConvertIn_Impl(int *os_maxfd, fd_set *os_set, const OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n    int32        status;\n\n    status = OS_SUCCESS;\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd >= 0)\n                {\n                    if (osfd >= FD_SETSIZE || !OS_impl_filehandle_table[id].selectable)\n                    {\n                        /* out of range of select() implementation */\n                        status = OS_ERR_OPERATION_NOT_SUPPORTED;\n                    }\n                    else\n                    {\n                        FD_SET(osfd, os_set);\n                        if (osfd > *os_maxfd)\n                        {\n                            *os_maxfd = osfd;\n                        }\n                    }\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_FdSet_ConvertIn_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends control and state information to /tmp/logs/799.txt */\nstatic void OS_FdSet_Probe_Log(const char *tag,\n                               size_t offset,\n                               size_t bit,\n                               unsigned long long id_val,\n                               unsigned int objids_val,\n                               int osfd,\n                               const int *os_maxfd_ptr,\n                               long status_val,\n                               const void *objids_ptr,\n                               const void *os_impl_table_entry)\n{\n    FILE *f = fopen(\"/tmp/logs/799.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: offset=%llu bit=%llu objids=0x%02x id=%llu osfd=%d \",\n                tag,\n                (unsigned long long)offset,\n                (unsigned long long)bit,\n                objids_val,\n                id_val,\n                osfd);\n\n        if (os_maxfd_ptr != NULL)\n        {\n            fprintf(f, \"os_maxfd=*%d \", *os_maxfd_ptr);\n        }\n        else\n        {\n            fprintf(f, \"os_maxfd=NULL \");\n        }\n\n        fprintf(f, \"status=%ld objids_ptr=%p table_entry=%p\\n\",\n                status_val,\n                objids_ptr,\n                os_impl_table_entry);\n\n        fclose(f);\n    }\n}\n\nstatic int32 OS_FdSet_ConvertIn_Impl(int *os_maxfd, fd_set *os_set, const OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n    int32        status;\n\n    /* Log function entry and key parameters */\n    OS_FdSet_Probe_Log(\"ENTRY\", 0, 0, 0ULL, 0U, -1, os_maxfd, (long)0, (const void *)OSAL_set->object_ids, NULL);\n\n    status = OS_SUCCESS;\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n\n        /* Log scanning of this byte from object_ids */\n        OS_FdSet_Probe_Log(\"BYTE_SCAN_START\", offset, bit, 0ULL, (unsigned)objids, -1, os_maxfd, (long)status, (const void *)&OSAL_set->object_ids[offset], NULL);\n\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n\n            /* Log evaluation of the current bit and computed id */\n            OS_FdSet_Probe_Log(\"BIT_EVAL\", offset, bit, (unsigned long long)id, (unsigned)objids, -1, os_maxfd, (long)status, (const void *)&OSAL_set->object_ids[offset], NULL);\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n\n                /* Log retrieved file handle table entry and fd */\n                OS_FdSet_Probe_Log(\"TABLE_LOOKUP\", offset, bit, (unsigned long long)id, (unsigned)objids, osfd, os_maxfd, (long)status, (const void *)&OSAL_set->object_ids[offset], (const void *)&OS_impl_filehandle_table[id]);\n\n                if (osfd >= 0)\n                {\n                    if (osfd >= FD_SETSIZE || !OS_impl_filehandle_table[id].selectable)\n                    {\n                        /* out of range of select() implementation */\n                        status = OS_ERR_OPERATION_NOT_SUPPORTED;\n\n                        /* Log the out-of-range or not-selectable condition */\n                        OS_FdSet_Probe_Log(\"SKIP_OUT_OF_RANGE_OR_NOT_SELECTABLE\", offset, bit, (unsigned long long)id, (unsigned)objids, osfd, os_maxfd, (long)status, (const void *)&OSAL_set->object_ids[offset], (const void *)&OS_impl_filehandle_table[id]);\n                    }\n                    else\n                    {\n                        FD_SET(osfd, os_set);\n                        if (osfd > *os_maxfd)\n                        {\n                            *os_maxfd = osfd;\n                        }\n\n                        /* Log successful FD_SET and updated os_maxfd */\n                        OS_FdSet_Probe_Log(\"FD_SET_DONE\", offset, bit, (unsigned long long)id, (unsigned)objids, osfd, os_maxfd, (long)status, (const void *)&OSAL_set->object_ids[offset], (const void *)&OS_impl_filehandle_table[id]);\n                    }\n                }\n            }\n            ++bit;\n            objids >>= 1;\n\n            /* Log loop progress after bit increment */\n            OS_FdSet_Probe_Log(\"BIT_ADVANCE\", offset, bit, 0ULL, (unsigned)objids, -1, os_maxfd, (long)status, (const void *)&OSAL_set->object_ids[offset], NULL);\n        }\n\n        /* Log end of byte scanning */\n        OS_FdSet_Probe_Log(\"BYTE_SCAN_END\", offset, bit, 0ULL, 0U, -1, os_maxfd, (long)status, (const void *)&OSAL_set->object_ids[offset], NULL);\n    }\n\n    /* Log function exit and final status */\n    OS_FdSet_Probe_Log(\"EXIT\", 0, 0, 0ULL, 0U, -1, os_maxfd, (long)status, (const void *)OSAL_set->object_ids, NULL);\n\n    return status;\n}\n"
}