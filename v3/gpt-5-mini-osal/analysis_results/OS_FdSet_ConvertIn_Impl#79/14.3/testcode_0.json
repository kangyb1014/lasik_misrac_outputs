{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop controlling expression uses sizeof(OSAL_set->object_ids):\nfor (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n\nThe value of sizeof(OSAL_set->object_ids) is invariant (a compile-time size of the array member) and does not change during loop execution. This makes the loop's controlling expression invariant and therefore violates MISRA C 2023 Rule 14.3. Neither exception (an intentional infinite loop, nor the allowed do-while constant-false case) applies here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertIn_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/795.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FdSet_ConvertIn_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertIn_Impl:\n```c\nstatic int32 OS_FdSet_ConvertIn_Impl(int *os_maxfd, fd_set *os_set, const OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n    int32        status;\n\n    status = OS_SUCCESS;\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd >= 0)\n                {\n                    if (osfd >= FD_SETSIZE || !OS_impl_filehandle_table[id].selectable)\n                    {\n                        /* out of range of select() implementation */\n                        status = OS_ERR_OPERATION_NOT_SUPPORTED;\n                    }\n                    else\n                    {\n                        FD_SET(osfd, os_set);\n                        if (osfd > *os_maxfd)\n                        {\n                            *os_maxfd = osfd;\n                        }\n                    }\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_FdSet_ConvertIn_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper - writes to /tmp/logs/795.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/795.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int32 OS_FdSet_ConvertIn_Impl(int *os_maxfd, fd_set *os_set, const OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n    int32        status;\n\n    /* Log function entry and invariant used in the for-loop controlling expression */\n    probe_log(\"OS_FdSet_ConvertIn_Impl ENTER: sizeof(OSAL_set->object_ids)=%zu\", sizeof(OSAL_set->object_ids));\n\n    status = OS_SUCCESS;\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        /* Log loop iteration start */\n        probe_log(\"for-loop offset start: offset=%zu\", offset);\n\n        objids = OSAL_set->object_ids[offset];\n        probe_log(\"  initial objids (byte) = 0x%02x\", (unsigned int)objids);\n\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            probe_log(\"    while-iter: bit=%zu, id=%llu, lsb=(%u)\", bit, (unsigned long long)id, (unsigned int)(objids & 0x01));\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                probe_log(\"      candidate id=%llu -> osfd=%d\", (unsigned long long)id, osfd);\n\n                if (osfd >= 0)\n                {\n                    if (osfd >= FD_SETSIZE || !OS_impl_filehandle_table[id].selectable)\n                    {\n                        /* out of range of select() implementation */\n                        probe_log(\"      out-of-range or not selectable: osfd=%d, FD_SETSIZE=%d, selectable=%d -> status set to OS_ERR_OPERATION_NOT_SUPPORTED\",\n                                  osfd, FD_SETSIZE, (int)OS_impl_filehandle_table[id].selectable);\n                        status = OS_ERR_OPERATION_NOT_SUPPORTED;\n                    }\n                    else\n                    {\n                        FD_SET(osfd, os_set);\n                        probe_log(\"      FD_SET called for osfd=%d\", osfd);\n\n                        if (osfd > *os_maxfd)\n                        {\n                            probe_log(\"      updating os_maxfd: old=%d new=%d\", *os_maxfd, osfd);\n                            *os_maxfd = osfd;\n                        }\n                    }\n                }\n                else\n                {\n                    probe_log(\"      osfd < 0 (closed or invalid): osfd=%d\", osfd);\n                }\n            }\n\n            ++bit;\n            objids >>= 1;\n\n            probe_log(\"    end-while-iter: next bit=%zu, next objids=0x%02x\", bit, (unsigned int)objids);\n        }\n\n        probe_log(\"for-loop offset end: offset=%zu\", offset);\n    }\n\n    probe_log(\"OS_FdSet_ConvertIn_Impl EXIT: status=%ld\", (long)status);\n\n    return status;\n}\n"
}