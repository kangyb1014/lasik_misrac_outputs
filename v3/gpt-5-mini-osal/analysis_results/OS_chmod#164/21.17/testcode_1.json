{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath(local_path) is called with a caller-supplied path buffer but no length is passed; if OS_TranslatePath uses string.h functions (e.g. strcpy(local_path, path), strcat, memcpy(local_path, path, strlen(path)+1), or otherwise copies/appends without bounds checks) and the input path (or the composed translated path) has length >= OS_MAX_LOCAL_PATH_LEN, the function will write beyond local_path and violate Rule 21.17. In other words, unless OS_TranslatePath guarantees it will never write more than OS_MAX_LOCAL_PATH_LEN bytes into local_path, this call is a potential violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1649.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chmod as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chmod code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helpers. These are lightweight and do not change the\n   original control flow of OS_chmod. They append diagnostic records to\n   /tmp/logs/1649.txt for other agents to inspect. */\nstatic void probe_log_before_translate(const char *path)\n{\n    FILE *f = fopen(\"/tmp/logs/1649.txt\", \"a\");\n    if (!f) return;\n\n    /* Log stage and pointer value only \u2014 do not attempt to read the\n       caller-supplied \"path\" string here to avoid doing any out-of-bounds\n       reads on a possibly-invalid caller buffer. */\n    fprintf(f, \"STAGE=before_translate path_ptr=%p\\n\", (const void *)path);\n    fclose(f);\n}\n\nstatic void probe_log_after_translate(int return_code, const char *path, const char *local_path)\n{\n    FILE *f = fopen(\"/tmp/logs/1649.txt\", \"a\");\n    if (!f) return;\n\n    /* Log the return code and the path pointer. */\n    fprintf(f, \"STAGE=after_translate return_code=%d path_ptr=%p\\n\", return_code, (const void *)path);\n\n    /* If TranslatePath reported success, log the translated local_path\n       contents (bounded by OS_MAX_LOCAL_PATH_LEN) so the composed result\n       can be inspected. This reads only from the local_path array which\n       is allocated in this function; it will print at most\n       OS_MAX_LOCAL_PATH_LEN-1 characters. */\n    if (return_code == OS_SUCCESS)\n    {\n        /* Use precision in the format specifier to prevent printing beyond\n           the local_path buffer size. Casting the size to int is safe for\n           the printf precision parameter. */\n        fprintf(f, \"local_path=\\\"\");\n        fprintf(f, \"%.*s\", (int)(OS_MAX_LOCAL_PATH_LEN - 1), local_path);\n        fprintf(f, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(f, \"local_path=<not available>\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic void probe_log_before_impl(const char *path, const char *local_path)\n{\n    FILE *f = fopen(\"/tmp/logs/1649.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"STAGE=before_impl path_ptr=%p local_path_ptr=%p\\n\", (const void *)path, (const void *)local_path);\n    fclose(f);\n}\n\nstatic void probe_log_after_impl(int return_code, const char *path, const char *local_path)\n{\n    FILE *f = fopen(\"/tmp/logs/1649.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"STAGE=after_impl return_code=%d path_ptr=%p local_path_ptr=%p\\n\", return_code, (const void *)path, (const void *)local_path);\n    fclose(f);\n}\n\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    /* Log entry just before calling OS_TranslatePath. Only the pointer is\n       recorded to avoid reading the caller buffer (which could be invalid).\n       This preserves the original semantics and avoids introducing new\n       out-of-bounds reads. */\n    probe_log_before_translate(path);\n\n    /* Original logic preserved: attempt to translate the path into the\n       local buffer. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log after translation. If translation succeeded, this writes the\n       contents of local_path to the log (bounded by\n       OS_MAX_LOCAL_PATH_LEN) so an external reviewer can check whether a\n       buffer overflow could have occurred. */\n    probe_log_after_translate((int)return_code, path, local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the platform-specific implementation. */\n        probe_log_before_impl(path, local_path);\n\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n\n        /* Log the result of the implementation call. */\n        probe_log_after_impl((int)return_code, path, local_path);\n    }\n\n    return return_code;\n}\n"
}