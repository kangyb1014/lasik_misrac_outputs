{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CondVarGetIdByName only checks that var_name != NULL and then passes it to OS_ObjectIdFindByName. That function uses ARGCHECK/LENGTHCHECK on the name; if LENGTHCHECK is implemented using an unbounded string.h call such as strlen (or other functions that read until a NUL), then providing a var_name that is not NUL-terminated within its actual object bounds (or longer than OS_MAX_API_NAME) will cause the string function to read past the end of the object. Thus the call chain (OS_CondVarGetIdByName -> OS_ObjectIdFindByName -> LENGTHCHECK/ARGCHECK) can result in out-of-bounds access of the object referenced by var_name and therefore violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetIdByName:\n```c\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append timestamped messages to /tmp/logs/1359.txt.\n   This helper intentionally does not dereference any pointers provided\n   by callers to avoid introducing out-of-bounds reads. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1359.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Log entry and parameter pointer values (do not dereference var_name). */\n    probe_log(\"ENTER: OS_CondVarGetIdByName called. var_id=%p, var_name=%p\", (void *)var_id, (const void *)var_name);\n\n    /* Check parameters (preserve original checks) */\n    OS_CHECK_POINTER(var_id);\n    probe_log(\"After OS_CHECK_POINTER(var_id)\");\n\n    OS_CHECK_POINTER(var_name);\n    probe_log(\"After OS_CHECK_POINTER(var_name)\");\n\n    /* Log that we are about to call the lookup. This is the critical hand-off where\n       an unbounded string operation downstream could read past the end of var_name. */\n    probe_log(\"About to call OS_ObjectIdFindByName with type=%d and name_ptr=%p\", (int)OS_OBJECT_TYPE_OS_CONDVAR, (const void *)var_name);\n\n    /* Call original function and capture return code. */\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    /* Log result and exit. Do not dereference var_id or var_name. */\n    probe_log(\"EXIT: OS_ObjectIdFindByName returned %d; var_id_ptr=%p\", (int)return_code, (void *)var_id);\n\n    return return_code;\n}\n"
}