{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf malloc fails and returns NULL while ActualSize > 0, the subsequent call memset(NewList, 0, ActualSize) will attempt to write through a NULL pointer (an invalid object), causing an out\u2011of\u2011bounds access of the pointer parameter to memset. The code does not check the return value of malloc before calling memset, so this scenario violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2919.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Create:\n```c\nUtListHead_t *UtList_Create(uint32 NumTags)\n{\n    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };\n    struct ListAllocator *NewList;\n    UtListNode_t *        TagHead;\n    size_t                ActualSize;\n    uint32                i;\n\n    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);\n    NewList    = (struct ListAllocator *)malloc(ActualSize);\n\n    memset(NewList, 0, ActualSize);\n\n    NewList->Head.Tags         = NewList->Tags;\n    NewList->Head.NumberOfTags = NumTags;\n\n    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n    }\n\n    return &NewList->Head;\n}\n```\n</target_code>\nPlease provide the modified UtList_Create code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Minimal type definitions to allow compilation of this translation unit. */\ntypedef uint32_t uint32;\n\ntypedef struct UtListNode\n{\n    uint32 Tag;\n    struct UtListNode *Next;\n    struct UtListNode *Prev;\n} UtListNode_t;\n\ntypedef struct UtListHead\n{\n    UtListNode_t *Tags;\n    uint32 NumberOfTags;\n} UtListHead_t;\n\nUtListHead_t *UtList_Create(uint32 NumTags)\n{\n    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };\n    struct ListAllocator *NewList;\n    UtListNode_t *        TagHead;\n    size_t                ActualSize;\n    uint32                i;\n\n    /* Compute allocation size */\n    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);\n\n    /* Open log file for probes. Best-effort: if opening fails, proceed without logging. */\n    FILE *log = fopen(\"/tmp/logs/2919.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UtList_Create: NumTags=%u, ActualSize=%zu\\n\", (unsigned)NumTags, ActualSize);\n        fflush(log);\n    }\n\n    NewList    = (struct ListAllocator *)malloc(ActualSize);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"malloc returned: %p\\n\", (void *)NewList);\n        fflush(log);\n    }\n\n    /* Probe just before memset to capture pointer and size used. This preserves original control flow. */\n    if (log != NULL)\n    {\n        fprintf(log, \"Calling memset(ptr=%p, size=%zu)\\n\", (void *)NewList, ActualSize);\n        fflush(log);\n    }\n\n    /* Original behavior: call memset regardless of malloc result (this is the potential violation scenario). */\n    memset(NewList, 0, ActualSize);\n\n    if (log != NULL)\n    {\n        /* If NewList is non-NULL we can log the initialized head values; otherwise indicate NULL. */\n        if (NewList != NULL)\n        {\n            fprintf(log, \"After memset: NewList=%p, Head.Tags=%p, Head.NumberOfTags=%u\\n\",\n                    (void *)NewList, (void *)NewList->Head.Tags, (unsigned)NewList->Head.NumberOfTags);\n        }\n        else\n        {\n            fprintf(log, \"After memset: NewList is NULL (memset wrote through NULL)\\n\");\n        }\n        fflush(log);\n        fclose(log);\n    }\n\n    /* Continue with original initialization logic. This will reproduce the crash/violation when malloc returned NULL. */\n    NewList->Head.Tags         = NewList->Tags;\n    NewList->Head.NumberOfTags = NumTags;\n\n    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n    }\n\n    return &NewList->Head;\n}\n"
}