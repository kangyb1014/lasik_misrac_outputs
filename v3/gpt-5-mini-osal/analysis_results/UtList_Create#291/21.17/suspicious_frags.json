{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtList_Create:\n```c\nUtListHead_t *UtList_Create(uint32 NumTags)\n{\n    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };\n    struct ListAllocator *NewList;\n    UtListNode_t *        TagHead;\n    size_t                ActualSize;\n    uint32                i;\n\n    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);\n    NewList    = (struct ListAllocator *)malloc(ActualSize);\n\n    memset(NewList, 0, ActualSize);\n\n    NewList->Head.Tags         = NewList->Tags;\n    NewList->Head.NumberOfTags = NumTags;\n\n    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n    }\n\n    return &NewList->Head;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UtList_Create:\ntypedef struct\n{\n    UtListNode_t *Tags;\n    uint32        NumberOfTags;\n} UtListHead_t\n...\ntypedef struct UtListNodeTag\n{\n    struct UtListNodeTag *Next;\n    struct UtListNodeTag *Prev;\n    void *                Data;\n    uint32                DataSize;\n    uint32                Tag;\n} UtListNode_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };",
    "    memset(NewList, 0, ActualSize);",
    "    NewList    = (struct ListAllocator *)malloc(ActualSize);",
    "    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);",
    "    NewList->Head.Tags         = NewList->Tags;",
    "    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n    }",
    "    return &NewList->Head;"
  ],
  "explanation": "MISRA Rule 21.17 concerns use of string.h functions causing out\u2011of\u2011bounds accesses. The only string.h function used in this function is memset, therefore the memset call and the code that determines its pointer and size must be investigated: the struct with the flexible array member (struct ListAllocator), the ActualSize calculation, the malloc() call that provides the buffer, and any subsequent indexing that depends on that allocation (assignment of Head.Tags, the for-loop indexing of Head.Tags[i], and the return of NewList->Head). Other fragments in the function (variable declarations, simple assignments of members inside the loop such as TagHead->Tag/Next/Prev) do not call string.h functions and do not by themselves cause or prevent out\u2011of\u2011bounds accesses by memset beyond what is already covered by the listed fragments, so they do not need separate investigation for Rule 21.17."
}