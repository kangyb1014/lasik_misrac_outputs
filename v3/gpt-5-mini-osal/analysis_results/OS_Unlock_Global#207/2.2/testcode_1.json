{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe if-block body only contains OS_DEBUG, and OS_DEBUG is defined as an empty macro. Thus the branch has no observable effect (the comparisons are pure reads with no side-effects). Executing the condition and entering the empty block are operations whose removal (i.e. removing the entire if and its body) would not affect program behaviour (aside from timing). Therefore this constitutes dead code in the provided build and violates MISRA C 2023 Rule 2.2. (If OS_DEBUG is non-empty in other builds, then in those builds the code would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2072.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Unlock_Global as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global:\n```c\nvoid OS_Unlock_Global(OS_object_token_t *token)\n{\n    OS_objtype_state_t *objtype;\n\n    if (token->obj_type < OS_OBJECT_TYPE_USER && token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        objtype = &OS_objtype_state[token->obj_type];\n\n        /*\n         * Un-track ownership of this table.  It should only be owned by one\n         * task at a time, and this aids in recovery if the owning task is\n         * deleted or experiences an exception causing it to not be freed.\n         *\n         * This is done before unlocking, while this has exclusive access\n         * to the state object.\n         */\n        if ((objtype->owner_key.key_value & 0xFF000000) != OS_LOCK_KEY_FIXED_VALUE ||\n            objtype->owner_key.key_value != token->lock_key.key_value)\n        {\n            /* this is almost certainly a bug */\n            OS_DEBUG(\"ERROR: global %u released using mismatched key=0x%lx expected=0x%lx\\n\",\n                     (unsigned int)token->obj_type, (unsigned long)token->lock_key.key_value,\n                     (unsigned long)objtype->owner_key.key_value);\n        }\n\n        objtype->owner_key = OS_LOCK_KEY_INVALID;\n        token->lock_key    = OS_LOCK_KEY_INVALID;\n\n        OS_Unlock_Global_Impl(token->obj_type);\n    }\n    else\n    {\n        OS_DEBUG(\"ERROR: cannot unlock global %u for mode %u\\n\", (unsigned int)token->obj_type,\n                 (unsigned int)token->lock_mode);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Unlock_Global code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helpers. These do not alter program logic; they only\n * append textual traces to /tmp/logs/2072.txt so other agents can\n * reproduce and gather evidence for the reported violation scenario.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2072.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic void probe_dump_token(const char *label, const OS_object_token_t *token)\n{\n    if (token == NULL)\n    {\n        probe_log(\"%s: token=NULL\\n\", label);\n        return;\n    }\n\n    probe_log(\"%s: token=%p obj_type=%u lock_mode=%u lock_key=0x%lx\\n\",\n              label, (const void *)token,\n              (unsigned int)token->obj_type,\n              (unsigned int)token->lock_mode,\n              (unsigned long)token->lock_key.key_value);\n}\n\nstatic void probe_dump_objtype(const char *label, const OS_objtype_state_t *objtype)\n{\n    if (objtype == NULL)\n    {\n        probe_log(\"%s: objtype=NULL\\n\", label);\n        return;\n    }\n\n    probe_log(\"%s: objtype=%p owner_key=0x%lx\\n\",\n              label, (const void *)objtype,\n              (unsigned long)objtype->owner_key.key_value);\n}\n\nvoid OS_Unlock_Global(OS_object_token_t *token)\n{\n    OS_objtype_state_t *objtype;\n\n    /* Log entry and token state */\n    probe_dump_token(\"ENTER OS_Unlock_Global\", token);\n\n    if (token->obj_type < OS_OBJECT_TYPE_USER && token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        objtype = &OS_objtype_state[token->obj_type];\n\n        /* Log the resolved objtype state while we have exclusive access */\n        probe_dump_objtype(\"BEFORE owner_key check\", objtype);\n\n        /*\n         * Un-track ownership of this table.  It should only be owned by one\n         * task at a time, and this aids in recovery if the owning task is\n         * deleted or experiences an exception causing it to not be freed.\n         *\n         * This is done before unlocking, while this has exclusive access\n         * to the state object.\n         */\n        if ((objtype->owner_key.key_value & 0xFF000000) != OS_LOCK_KEY_FIXED_VALUE ||\n            objtype->owner_key.key_value != token->lock_key.key_value)\n        {\n            /* this is almost certainly a bug */\n            probe_log(\"MISMATCHED KEY: global=%u token_key=0x%lx owner_key=0x%lx\\n\",\n                      (unsigned int)token->obj_type,\n                      (unsigned long)token->lock_key.key_value,\n                      (unsigned long)objtype->owner_key.key_value);\n\n            OS_DEBUG(\"ERROR: global %u released using mismatched key=0x%lx expected=0x%lx\\n\",\n                     (unsigned int)token->obj_type, (unsigned long)token->lock_key.key_value,\n                     (unsigned long)objtype->owner_key.key_value);\n        }\n\n        /* Log state just prior to clearing ownership */\n        probe_dump_objtype(\"BEFORE clearing owner_key\", objtype);\n        probe_dump_token(\"BEFORE clearing token keys\", token);\n\n        objtype->owner_key = OS_LOCK_KEY_INVALID;\n        token->lock_key    = OS_LOCK_KEY_INVALID;\n\n        /* Log state immediately after clearing ownership */\n        probe_dump_objtype(\"AFTER clearing owner_key\", objtype);\n        probe_dump_token(\"AFTER clearing token keys\", token);\n\n        OS_Unlock_Global_Impl(token->obj_type);\n\n        /* Log exit from the true-branch */\n        probe_log(\"EXIT OS_Unlock_Global: unlocked global %u (true branch)\\n\",\n                  (unsigned int)token->obj_type);\n    }\n    else\n    {\n        /* Log the reason for taking the else branch */\n        probe_log(\"ELSE BRANCH: cannot unlock global %u for mode %u\\n\",\n                  (unsigned int)token->obj_type,\n                  (unsigned int)token->lock_mode);\n\n        OS_DEBUG(\"ERROR: cannot unlock global %u for mode %u\\n\", (unsigned int)token->obj_type,\n                 (unsigned int)token->lock_mode);\n\n        /* Log exit from the else-branch */\n        probe_log(\"EXIT OS_Unlock_Global: did not unlock global %u (else branch)\\n\",\n                  (unsigned int)token->obj_type);\n    }\n}\n"
}