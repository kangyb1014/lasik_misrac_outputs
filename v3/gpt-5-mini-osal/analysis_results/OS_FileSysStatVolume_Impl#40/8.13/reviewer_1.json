{
  "user_message": "An agent A claimed that the following OS_FileSysStatVolume_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileSysStatVolume_Impl.\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'local' is declared as OS_filesys_internal_record_t *local and assigned from OS_OBJECT_TABLE_GET(...). In this function 'local' is only read (used to access local->system_mountpt), so it should be a pointer to a const-qualified type (const OS_filesys_internal_record_t *local) to reflect read-only access. The current non-const pointer therefore violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_FileSysStatVolume_Impl:\ntypedef struct\n{\n    char device_name[OS_FS_DEV_NAME_LEN]; /**< The name of the underlying block device, if applicable */\n    char volume_name[OS_FS_VOL_NAME_LEN];\n    char system_mountpt[OS_MAX_LOCAL_PATH_LEN]; /**< The name/prefix where the contents are accessible in the host\n                                                   operating system */\n    char virtual_mountpt[OS_MAX_PATH_LEN]; /**< The name/prefix in the OSAL Virtual File system exposed to applications\n                                            */\n    char *            address;\n    size_t            blocksize;\n    osal_blockcount_t numblocks;\n    uint8             flags;\n    uint8             fstype;\n} OS_filesys_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    size_t            block_size;   /**< Block size of underlying FS */\n    osal_blockcount_t total_blocks; /**< Total blocks in underlying FS */\n    osal_blockcount_t blocks_free;  /**< Available blocks in underlying FS */\n} OS_statvfs_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In this function 'local' is only used for read access (local->system_mountpt) and never used to modify the OS_filesys_internal_record_t object. MISRA C 2023 Rule 8.13 requires a pointer to point to a const-qualified type whenever possible; here it is possible to make local a pointer-to-const (const OS_filesys_internal_record_t *local). Converting the address-of-a-non-const-object to a pointer-to-const is allowed in C, so declaring local as const would both reflect the intended read-only usage and satisfy the rule. The only reason not to make it const would be an intended modification via this pointer or passing it to an API that requires a non-const pointer, neither of which occurs in the shown code. Therefore the reported violation is correct."
}