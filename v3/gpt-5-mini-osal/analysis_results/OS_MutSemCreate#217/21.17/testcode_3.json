{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_APINAME expands to OS_CHECK_STRING, which (based on typical implementations) must examine the contents/length of the sem_name string using string.h routines. If sem_name is a non-NULL pointer to a char buffer that is not NUL-terminated or that has fewer accessible bytes than the code assumes, functions such as strlen (or other string.h functions) used inside OS_CHECK_STRING could read beyond the bounds of the object. For example, if the caller passes a pointer to a buffer of length N that lacks a terminating '\\0', a strlen(sem_name) inside OS_CHECK_STRING would walk past the buffer boundary and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logger for reproducing violation scenario. Appends logs to /tmp/logs/2179.txt. */\nstatic void OS_2179_Log(const char *stage, void *sem_id_ptr, const char *sem_name, unsigned long options, long return_code, const void *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2179.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Note: do not dereference sem_name to avoid creating the very out-of-bounds access we want to diagnose.\n         * Log pointer values, NULL-ness, options, return codes and token pointer so an external agent can\n         * correlate where a failure (or crash) occurred when OS_CHECK_APINAME inspects the string. */\n        fprintf(f, \"stage=%s sem_id=%p sem_name=%p sem_name_is_null=%d options=%lu return_code=%ld token_ptr=%p\\n\",\n                stage,\n                sem_id_ptr,\n                (const void *)sem_name,\n                (sem_name == NULL) ? 1 : 0,\n                options,\n                return_code,\n                token_ptr);\n        fclose(f);\n    }\n}\n\n/* Modified OS_MutSemCreate with probes inserted. Original logic preserved. */\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n\n    /* Log right after pointer check and before API name check so we can see the state just prior to any string inspection. */\n    OS_2179_Log(\"before_apiname_check\", (void *)sem_id, sem_name, (unsigned long)options, (long)0, (const void *)NULL);\n\n    OS_CHECK_APINAME(sem_name);\n\n    /* Log immediately after the API name check; if the program crashes inside OS_CHECK_APINAME this record will not be present, providing evidence of where the failure occurred. */\n    OS_2179_Log(\"after_apiname_check\", (void *)sem_id, sem_name, (unsigned long)options, (long)0, (const void *)NULL);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt and the token pointer address for correlation. */\n    OS_2179_Log(\"after_objid_allocate\", (void *)sem_id, sem_name, (unsigned long)options, (long)return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_2179_Log(\"before_object_init\", (void *)sem_id, sem_name, (unsigned long)options, (long)return_code, (const void *)&token);\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n        OS_2179_Log(\"after_object_init\", (void *)sem_id, sem_name, (unsigned long)options, (long)return_code, (const void *)&token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_2179_Log(\"before_impl_call\", (void *)sem_id, sem_name, (unsigned long)options, (long)return_code, (const void *)&token);\n        return_code = OS_MutSemCreate_Impl(&token, options);\n        OS_2179_Log(\"after_impl_call\", (void *)sem_id, sem_name, (unsigned long)options, (long)return_code, (const void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        OS_2179_Log(\"after_finalize\", (void *)sem_id, sem_name, (unsigned long)options, (long)return_code, (const void *)&token);\n    }\n\n    OS_2179_Log(\"function_exit\", (void *)sem_id, sem_name, (unsigned long)options, (long)return_code, (const void *)NULL);\n    return return_code;\n}\n"
}