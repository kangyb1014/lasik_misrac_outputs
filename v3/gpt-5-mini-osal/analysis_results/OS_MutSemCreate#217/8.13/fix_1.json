{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_MutSemCreate_Log(const char *stage,\n                                const osal_id_t *sem_id,\n                                const char *sem_name,\n                                uint32 options,\n                                int32 return_code,\n                                OS_object_token_t token)\n{\n    FILE *f = fopen(\"/tmp/logs/2173.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging is unavailable, do not affect behavior */\n    }\n\n    /* Print a safe representation of each parameter.\n     * sem_name is const char* so print it directly (or a placeholder).\n     * sem_id printed as pointer address; token printed as integer via uintptr_t. */\n    fprintf(f,\n            \"[OS_MutSemCreate] %s: sem_id=%p sem_name=%s options=%llu return_code=%lld token=%llu\\n\",\n            stage,\n            (const void *)sem_id,\n            (sem_name != NULL) ? sem_name : \"(null)\",\n            (unsigned long long)options,\n            (long long)return_code,\n            (unsigned long long)(uintptr_t)token);\n\n    fclose(f);\n}\n\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Log function entry with initial parameters. Do not print an uninitialized token. */\n    OS_MutSemCreate_Log(\"entry\", sem_id, sem_name, options, -1, (OS_object_token_t)0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt; token is valid only if return_code == OS_SUCCESS. */\n    OS_MutSemCreate_Log(\"after_allocate\", sem_id, sem_name, options, return_code,\n                        (return_code == OS_SUCCESS) ? token : (OS_object_token_t)0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Log after initialization of table entry */\n        OS_MutSemCreate_Log(\"after_init\", sem_id, sem_name, options, return_code, token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Log after OS-specific implementation */\n        OS_MutSemCreate_Log(\"after_impl\", sem_id, sem_name, options, return_code, token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Final log before return */\n        OS_MutSemCreate_Log(\"before_return\", sem_id, sem_name, options, return_code, token);\n    }\n    else\n    {\n        /* Log failure path where allocation did not succeed */\n        OS_MutSemCreate_Log(\"alloc_failed\", sem_id, sem_name, options, return_code, (OS_object_token_t)0);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpsdzcqtps/src/src/os/shared/src/osapi-mutex.c: In function 'OS_MutSemCreate_Log':\n/tmp/tmpsdzcqtps/src/src/os/shared/src/osapi-mutex.c:118:13: error: aggregate value used where an integer was expected\n  118 |             (unsigned long long)(uintptr_t)token);\n      |             ^\n/tmp/tmpsdzcqtps/src/src/os/shared/src/osapi-mutex.c: In function 'OS_MutSemCreate':\n/tmp/tmpsdzcqtps/src/src/os/shared/src/osapi-mutex.c:130:5: error: conversion to non-scalar type requested\n  130 |     OS_MutSemCreate_Log(\"entry\", sem_id, sem_name, options, -1, (OS_object_token_t)0);\n      |     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpsdzcqtps/src/src/os/shared/src/osapi-mutex.c:141:25: error: conversion to non-scalar type requested\n  141 |                         (return_code == OS_SUCCESS) ? token : (OS_object_token_t)0);\n      |                         ^\n/tmp/tmpsdzcqtps/src/src/os/shared/src/osapi-mutex.c:168:9: error: conversion to non-scalar type requested\n  168 |         OS_MutSemCreate_Log(\"alloc_failed\", sem_id, sem_name, options, return_code, (OS_object_token_t)0);\n      |         ^~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:244: CMakeFiles/osal.dir/src/os/shared/src/osapi-mutex.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_MutSemCreate_Log(const char *stage,\n                                const osal_id_t *sem_id,\n                                const char *sem_name,\n                                uint32 options,\n                                int32 return_code,\n                                const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/2173.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging is unavailable, do not affect behavior */\n    }\n\n    /* Print a safe representation of each parameter.\n     * sem_name is const char* so print it directly (or a placeholder).\n     * sem_id printed as pointer address; token printed as pointer (or NULL).\n     */\n    fprintf(f,\n            \"[OS_MutSemCreate] %s: sem_id=%p sem_name=%s options=%llu return_code=%lld token=%p\\n\",\n            stage,\n            (const void *)sem_id,\n            (sem_name != NULL) ? sem_name : \"(null)\",\n            (unsigned long long)options,\n            (long long)return_code,\n            (const void *)token);\n\n    fclose(f);\n}\n\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Log function entry with initial parameters. Do not print an uninitialized token. */\n    OS_MutSemCreate_Log(\"entry\", sem_id, sem_name, options, -1, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt; token is valid only if return_code == OS_SUCCESS. */\n    OS_MutSemCreate_Log(\"after_allocate\", sem_id, sem_name, options, return_code,\n                        (return_code == OS_SUCCESS) ? &token : NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Log after initialization of table entry */\n        OS_MutSemCreate_Log(\"after_init\", sem_id, sem_name, options, return_code, &token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Log after OS-specific implementation */\n        OS_MutSemCreate_Log(\"after_impl\", sem_id, sem_name, options, return_code, &token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Final log before return */\n        OS_MutSemCreate_Log(\"before_return\", sem_id, sem_name, options, return_code, &token);\n    }\n    else\n    {\n        /* Log failure path where allocation did not succeed */\n        OS_MutSemCreate_Log(\"alloc_failed\", sem_id, sem_name, options, return_code, NULL);\n    }\n\n    return return_code;\n}\n",
  "explanation": "OS_object_token_t is an aggregate type, so treating it as an integer or casting 0 to that type caused compilation errors. I changed OS_MutSemCreate_Log to accept a pointer to OS_object_token_t (const OS_object_token_t *token) and print the token as a pointer (%p). All calls to the logger now pass &token when a valid token exists or NULL when it does not. This avoids invalid casts/conversions while preserving the original logging and control-flow logic."
}