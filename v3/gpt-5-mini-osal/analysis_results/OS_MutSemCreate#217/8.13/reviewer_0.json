{
  "user_message": "An agent A claimed that the following OS_MutSemCreate code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemCreate.\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call casts a const char * (name) to a non-const void *: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This discards the const qualifier and produces a pointer that can be treated as mutable by the callee (OS_ObjectIdFindNextMatch/OS_ObjectNameMatch). Under MISRA C 2023 Rule 8.13 this is a violation because the pointer should point to a const-qualified type whenever possible (the function parameter should accept a const void * or the code should avoid casting away const). This also risks undefined behavior if the callee attempts to modify the pointed-to data (e.g. string literal).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdbb4 sem_name=MutexSem 1 options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdbb4 sem_name=MutexSem 1 options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdbb4 sem_name=MutexSem 1 options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdbb4 sem_name=MutexSem 1 options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdbb4 sem_name=MutexSem 1 options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdbb4 sem_name=MutexSem 1 options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=(nil) sem_name=MutSem1 options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdb60 sem_name=(null) options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdb60 sem_name=XXXXXXXXXXXXXXXXXXXXXXXXXXXXX options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdb60 sem_name=MUTSEM0 options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdb60 sem_name=MUTSEM0 options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdb60 sem_name=MUTSEM0 options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdb64 sem_name=DUPLICATE options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdb64 sem_name=DUPLICATE options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdb64 sem_name=DUPLICATE options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdb60 sem_name=Good options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdb60 sem_name=Good options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdb60 sem_name=Good options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdbb4 sem_name=DeleteTest options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdbb4 sem_name=DeleteTest options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdbb4 sem_name=DeleteTest options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdbb4 sem_name=GiveTest options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdbb4 sem_name=GiveTest options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdbb4 sem_name=GiveTest options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdbb4 sem_name=TakeTest options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdbb4 sem_name=TakeTest options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdbb4 sem_name=TakeTest options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdb8c sem_name=GetIDByName options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdb8c sem_name=GetIDByName options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdb8c sem_name=GetIDByName options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdb9c sem_name=InvalidPtr options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdb9c sem_name=InvalidPtr options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdb9c sem_name=InvalidPtr options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] entry: sem_id=0x7ffd979cdb9c sem_name=GetInfo options=0 return_code=-1 token=(nil)\n[OS_MutSemCreate] after_allocate: sem_id=0x7ffd979cdb9c sem_name=GetInfo options=0 return_code=-35 token=(nil)\n[OS_MutSemCreate] alloc_failed: sem_id=0x7ffd979cdb9c sem_name=GetInfo options=0 return_code=-35 token=(nil)\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemCreate:\ntypedef uint32 osal_id_t\n...\ntypedef uint32_t  uint32\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char      obj_name[OS_MAX_API_NAME];\n    osal_id_t last_owner;\n} OS_mutex_internal_record_t\n...\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n...\nint32 OS_MutSemCreate_Impl(const OS_object_token_t *token, uint32 options)\n{\n    int                              return_code;\n    pthread_mutexattr_t              mutex_attr;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n    ** initialize the attribute with default values\n    */\n    return_code = pthread_mutexattr_init(&mutex_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_init failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    ** Allow the mutex to use priority inheritance\n    */\n    return_code = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_setprotocol failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    **  Set the mutex type to RECURSIVE so a thread can do nested locks\n    */\n    return_code = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_RECURSIVE);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_settype failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    ** create the mutex\n    ** upon successful initialization, the state of the mutex becomes initialized and unlocked\n    */\n    return_code = pthread_mutex_init(&impl->id, &mutex_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. ID = %lu: %s\\n\", OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)),\n                 strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_CHECK_APINAME(str) OS_CHECK_STRING(str,OS_MAX_API_NAME,OS_ERR_NAME_TOO_LONG)\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\n#define OS_OBJECT_INIT(tok, ref, namefield, nameval) {memset(ref,0,sizeof(*ref));strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1);OS_ObjectIdGlobalFromToken(&tok)->name_entry=ref->namefield;}\n...\nOS_mutex_internal_record_t OS_mutex_table[LOCAL_NUM_OBJECTS]\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nOS_common_record_t *OS_ObjectIdGlobalFromToken(const OS_object_token_t *token)\n{\n    uint32 base_idx = OS_GetBaseForObjectType(token->obj_type);\n    return &OS_common_table[base_idx + token->obj_idx];\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_ObjectIdAllocateNew the code calls OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); where name is a const char *. Casting it to void * discards the const qualifier. MISRA C:2023 Rule 8.13 requires pointers to be const-qualified whenever possible (and discourages discarding const). Even if the callee only reads the string, the non-const void * parameter allows modification and the cast explicitly removes the qualifier, which is a MISRA violation and also risks undefined behavior if the callee attempts to modify a string literal. The proper fix is to propagate const correctness: change the OS_ObjectIdFindNextMatch/OS_ObjectNameMatch signatures to accept a const void * (and any related function-pointer types), or otherwise avoid casting away const at the call site."
}