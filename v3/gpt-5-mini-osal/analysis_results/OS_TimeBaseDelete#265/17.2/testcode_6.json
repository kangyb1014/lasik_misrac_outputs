{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion possible: OS_TimeBaseDelete() -> OS_ObjectIdFinalizeDelete() -> OS_NotifyEvent() -> OS_SharedGlobalVars.EventHandler (user callback) -> (calls OS_CleanUpObject() or directly calls OS_TimeBaseDelete()) -> OS_TimeBaseDelete(). This produces an indirect call back to OS_TimeBaseDelete and thus violates Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2656.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseDelete:\n```c\nint32 OS_TimeBaseDelete(osal_id_t timer_id)\n{\n    int32             return_code;\n    osal_objtype_t    objtype;\n    OS_object_token_t token;\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TimeBaseDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Lightweight probe logger that appends to the designated log file.\n * This function intentionally uses only standard C library calls to avoid\n * invoking OS services that could perturb the control flow under test.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2656.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseDelete(osal_id_t timer_id)\n{\n    int32             return_code;\n    osal_objtype_t    objtype;\n    OS_object_token_t token;\n\n    /* Log entry and provided id */\n    probe_log(\"ENTER: OS_TimeBaseDelete - timer_id=%llu\", (unsigned long long)timer_id);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    probe_log(\"Context check: calling task object type = %d\", (int)objtype);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log(\"ERROR: OS_TimeBaseDelete called from a timebase context; returning %d\", (int)OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    probe_log(\"Calling OS_ObjectIdGetById with lock mode=%d, type=%d, id=%llu\",\n              (int)OS_LOCK_MODE_EXCLUSIVE, (int)OS_OBJECT_TYPE_OS_TIMEBASE, (unsigned long long)timer_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    probe_log(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Calling OS_TimeBaseDelete_Impl for id=%llu, token_addr=%p\", (unsigned long long)timer_id, (void *)&token);\n        return_code = OS_TimeBaseDelete_Impl(&token);\n        probe_log(\"OS_TimeBaseDelete_Impl returned %d\", (int)return_code);\n\n        /* Complete the operation via the common routine */\n        probe_log(\"Calling OS_ObjectIdFinalizeDelete with previous return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        probe_log(\"OS_ObjectIdFinalizeDelete returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdGetById failed; skipping delete sequence for id=%llu\", (unsigned long long)timer_id);\n    }\n\n    probe_log(\"EXIT: OS_TimeBaseDelete - returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}