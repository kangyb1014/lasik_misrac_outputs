{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member 'void * AsPtr' is declared as a pointer to non-const. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types when possible \u2014 here AsPtr should be declared as 'const void * AsPtr' (or an equivalent const-qualified pointer) to match its intended use as a read-only default pointer value.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Hook_GetArgPtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Hook_GetArgPtr:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n</target_code>\nPlease provide the modified UT_Hook_GetArgPtr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\nstatic void UT_Hook_Log(const char *Fmt, ...)\n{\n    FILE *F = fopen(\"/tmp/logs/3093.txt\", \"a\");\n    if (F == NULL)\n    {\n        return;\n    }\n\n    va_list Args;\n    va_start(Args, Fmt);\n    vfprintf(F, Fmt, Args);\n    fprintf(F, \"\\n\");\n    va_end(Args);\n\n    fclose(F);\n}\n\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    UT_Hook_Log(\"Enter UT_Hook_GetArgPtr: ContextPtr=%p Name='%s' ExpectedTypeSize=%lu ArgCount=%u\",\n                (const void *)ContextPtr, (Name != NULL ? Name : \"(null)\"), (unsigned long)ExpectedTypeSize,\n                (unsigned)ContextPtr->ArgCount);\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        UT_Hook_Log(\"Loop i=%u MetaPtr=%p Name='%s' Size=%lu Type=%d\",\n                    (unsigned)i, (const void *)MetaPtr, (MetaPtr->Name != NULL ? MetaPtr->Name : \"(null)\"),\n                    (unsigned long)MetaPtr->Size, (int)MetaPtr->Type);\n\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                UT_Hook_Log(\"Match found at index %u: Name='%s' Size=%lu Type=%d\",\n                            (unsigned)i, MetaPtr->Name, (unsigned long)MetaPtr->Size, (int)MetaPtr->Type);\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                    UT_Hook_Log(\"Assigned Result (direct) =&ContextPtr->ArgPtr[%u] => %p\", (unsigned)i, (const void *)&ContextPtr->ArgPtr[i]);\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                    UT_Hook_Log(\"Assigned Result (indirect) = ContextPtr->ArgPtr[%u] => %p\", (unsigned)i, (const void *)ContextPtr->ArgPtr[i]);\n                }\n                UT_Hook_Log(\"Breaking loop after match at index %u\", (unsigned)i);\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UT_Hook_Log(\"No suitable Result found for Name='%s' Size=%lu - calling UtAssert_Failed\",\n                    (Name != NULL ? Name : \"(null)\"), (unsigned long)ExpectedTypeSize);\n\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n            /* Log details about the default value used so investigators can see the union contents and address */\n            UT_Hook_Log(\"Using ARG_DEFAULT_ZERO_VALUE as fallback: address=%p AsInt=%lu AsPtr=%p AsFloat=%f\",\n                        (const void *)&ARG_DEFAULT_ZERO_VALUE,\n                        (unsigned long)ARG_DEFAULT_ZERO_VALUE.AsInt,\n                        (void *)ARG_DEFAULT_ZERO_VALUE.AsPtr,\n                        ARG_DEFAULT_ZERO_VALUE.AsFloat);\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UT_Hook_Log(\"ExpectedTypeSize (%lu) larger than fallback union (%zu) - calling UtAssert_Abort\",\n                        (unsigned long)ExpectedTypeSize, sizeof(ARG_DEFAULT_ZERO_VALUE));\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    UT_Hook_Log(\"Exit UT_Hook_GetArgPtr returning %p\", Result);\n\n    return Result;\n}\n"
}