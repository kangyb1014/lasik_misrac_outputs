{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Ensure the directory exists (best-effort). Ignore errors if it already exists. */\n    /* This uses mkdir syscall via POSIX - if not available it's a harmless attempt. */\n#if defined(__unix__) || defined(__APPLE__)\n    (void)mkdir(\"/tmp/logs\", 0777);\n#endif\n\n    f = fopen(\"/tmp/logs/1469.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If we cannot open the file, fail silently to avoid changing behavior. */\n        return;\n    }\n\n    /* Timestamp each entry to help reconstruct the control flow. */\n    time_t t = time(NULL);\n    struct tm tmbuf;\n#if defined(_MSC_VER)\n    localtime_s(&tmbuf, &t);\n#else\n    localtime_r(&t, &tmbuf);\n#endif\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmbuf);\n\n    fprintf(f, \"[%s] \", timestr);\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_dump_token(const char *label, const OS_object_token_t *token, size_t max_bytes)\n{\n    if (token == NULL)\n    {\n        probe_log(\"%s: token == NULL\", label);\n        return;\n    }\n\n    size_t dump_n = (max_bytes < sizeof(*token)) ? max_bytes : sizeof(*token);\n    probe_log(\"%s: token @ %p size=%zu (dumping %zu bytes)\", label, (const void *)token, sizeof(*token), dump_n);\n\n    FILE *f = NULL;\n#if defined(__unix__) || defined(__APPLE__)\n    (void)mkdir(\"/tmp/logs\", 0777);\n#endif\n    f = fopen(\"/tmp/logs/1469.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"    bytes: \");\n    const unsigned char *p = (const unsigned char *)token;\n    for (size_t i = 0; i < dump_n; ++i)\n    {\n        fprintf(f, \"%02x \", p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with parameter */\n    probe_log(\"OS_CountSemGive ENTRY: sem_id=%d, &token=%p, sizeof(token)=%zu\", (int)sem_id, (void *)&token, sizeof(token));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    probe_log(\"OS_ObjectIdGetById returned %d for sem_id=%d\", (int)return_code, (int)sem_id);\n\n    /* Dump a small portion of the token to help detect invalid or surprising contents. */\n    probe_dump_token(\"After OS_ObjectIdGetById\", &token, 32);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Calling OS_CountSemGive_Impl with token @ %p\", (void *)&token);\n        return_code = OS_CountSemGive_Impl(&token);\n        probe_log(\"OS_CountSemGive_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"Skipping OS_CountSemGive_Impl due to prior error: %d\", (int)return_code);\n    }\n\n    probe_log(\"OS_CountSemGive EXIT: sem_id=%d, return_code=%d\", (int)sem_id, (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpb3k7ot16/src/src/os/shared/src/osapi-countsem.c: In function 'probe_log':\n/tmp/tmpb3k7ot16/src/src/os/shared/src/osapi-countsem.c:173:15: error: storage size of 'tmbuf' isn't known\n  173 |     struct tm tmbuf;\n      |               ^~~~~\n/tmp/tmpb3k7ot16/src/src/os/shared/src/osapi-countsem.c:185:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  185 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/__/__/os/shared/src/osapi-countsem.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3415: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CountSemGive as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Ensure the directory exists (best-effort). Ignore errors if it already exists. */\n    /* This uses mkdir syscall via POSIX - if not available it's a harmless attempt. */\n#if defined(__unix__) || defined(__APPLE__)\n    (void)mkdir(\"/tmp/logs\", 0777);\n#endif\n\n    f = fopen(\"/tmp/logs/1469.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If we cannot open the file, fail silently to avoid changing behavior. */\n        return;\n    }\n\n    /* Timestamp each entry to help reconstruct the control flow. */\n    time_t t = time(NULL);\n    struct tm tmbuf;\n#if defined(_MSC_VER)\n    localtime_s(&tmbuf, &t);\n#else\n    localtime_r(&t, &tmbuf);\n#endif\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmbuf);\n\n    fprintf(f, \"[%s] \", timestr);\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_dump_token(const char *label, const OS_object_token_t *token, size_t max_bytes)\n{\n    if (token == NULL)\n    {\n        probe_log(\"%s: token == NULL\", label);\n        return;\n    }\n\n    size_t dump_n = (max_bytes < sizeof(*token)) ? max_bytes : sizeof(*token);\n    probe_log(\"%s: token @ %p size=%zu (dumping %zu bytes)\", label, (const void *)token, sizeof(*token), dump_n);\n\n    FILE *f = NULL;\n#if defined(__unix__) || defined(__APPLE__)\n    (void)mkdir(\"/tmp/logs\", 0777);\n#endif\n    f = fopen(\"/tmp/logs/1469.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"    bytes: \");\n    const unsigned char *p = (const unsigned char *)token;\n    for (size_t i = 0; i < dump_n; ++i)\n    {\n        fprintf(f, \"%02x \", p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with parameter */\n    probe_log(\"OS_CountSemGive ENTRY: sem_id=%d, &token=%p, sizeof(token)=%zu\", (int)sem_id, (void *)&token, sizeof(token));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    probe_log(\"OS_ObjectIdGetById returned %d for sem_id=%d\", (int)return_code, (int)sem_id);\n\n    /* Dump a small portion of the token to help detect invalid or surprising contents. */\n    probe_dump_token(\"After OS_ObjectIdGetById\", &token, 32);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Calling OS_CountSemGive_Impl with token @ %p\", (void *)&token);\n        return_code = OS_CountSemGive_Impl(&token);\n        probe_log(\"OS_CountSemGive_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"Skipping OS_CountSemGive_Impl due to prior error: %d\", (int)return_code);\n    }\n\n    probe_log(\"OS_CountSemGive EXIT: sem_id=%d, return_code=%d\", (int)sem_id, (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Added the necessary standard headers: <stdio.h>, <stdarg.h>, <time_h>, and <sys/stat.h>. These provide the definitions for FILE, va_list and vfprintf, struct tm and localtime_r/localtime_s, and mkdir respectively. Including these headers fixes the \"storage size of 'tmbuf' isn't known\" and the va_list/type mismatch errors while preserving the original logic of OS_CountSemGive."
}