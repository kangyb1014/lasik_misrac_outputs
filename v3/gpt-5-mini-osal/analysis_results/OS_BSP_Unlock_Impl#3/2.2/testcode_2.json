{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro #define BSP_DEBUG(__VA_ARGS__) expands to nothing. In functions such as OS_BSP_Unlock_Impl (and OS_BSP_Lock_Impl) the statement BSP_DEBUG(\"...\"); therefore becomes an empty/null statement that is executed when the error branch is taken. This executed statement has no effect and its removal would not alter program behaviour, which meets the definition of dead code in MISRA C 2023 Rule 2.2. Thus the project contains dead code introduced by the empty BSP_DEBUG macro expansion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/32.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Unlock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <pthread.h>\n\n/* Minimal forward declaration to allow this translation unit to compile\n   when integrated into the larger project. The real definition is expected\n   to exist elsewhere in the project. */\ntypedef struct\n{\n    pthread_mutex_t AccessMutex;\n    int AccessCancelState;\n} OS_BSP_GenericLinuxGlobal_t;\n\nextern OS_BSP_GenericLinuxGlobal_t OS_BSP_GenericLinuxGlobal;\n\n/* Simple logging helper that appends a timestamped entry to /tmp/logs/32.txt. */\nstatic void OS_BSP_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/32.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n                tm.tm_hour, tm.tm_min, tm.tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        /* Log the error branch with status and human-readable message.\n           Use absolute value for strerror so negative status values do not\n           produce undefined behaviour in the logger. This only affects\n           logging output and preserves the original control flow. */\n        int errnum = (status < 0) ? -status : status;\n        OS_BSP_Log(\"OS_BSP_Unlock_Impl: pthread_mutex_unlock failed: status=%d, strerror=%s\",\n                   status, strerror(errnum));\n\n        /* Original code executed BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n           That macro expands to nothing in the reported scenario; we do not\n           call it here (it would be a no-op) but we provide the above log\n           so the error path is observable. */\n    }\n    else\n    {\n        /* Log success path and the previous cancellability state to help\n           reproduce the control-flow scenario. */\n        OS_BSP_Log(\"OS_BSP_Unlock_Impl: pthread_mutex_unlock succeeded: status=%d, previous_cancel_state=%d\",\n                   status, OS_BSP_GenericLinuxGlobal.AccessCancelState);\n\n        /* Restore previous cancellability state (original behaviour preserved). */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n\n        /* Log after restoring cancel state to show the complete control path. */\n        OS_BSP_Log(\"OS_BSP_Unlock_Impl: pthread_setcancelstate called to restore state=%d\",\n                   OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n"
}