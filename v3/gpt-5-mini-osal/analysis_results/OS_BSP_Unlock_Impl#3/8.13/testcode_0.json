{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strerror(status) returns a char * to a static, read-only error message buffer. The returned pointer is not const-qualified even though the data is not to be modified, so the pointer should be to a const-qualified type (e.g. const char *). Therefore this usage violates MISRA C 2023 Rule 8.13. (Remedy: use a const char * to hold the result, use strerror_r into a const-qualified buffer, or cast the result to const char * with justification.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/33.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Unlock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <pthread.h>\n\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    /* Open log file for probes; don't fail the function if logging fails */\n    FILE *log = fopen(\"/tmp/logs/33.txt\", \"a\");\n\n    if (status < 0)\n    {\n        /* Probe: capture status and the pointer/value returned by strerror()\n           Use const char * for logging to avoid introducing additional non-const pointer usages. */\n        if (log != NULL)\n        {\n            const char *err1 = strerror(status);\n            const char *err2 = strerror(status); /* call again to show if same static buffer is returned */\n\n            fprintf(log, \"OS_BSP_Unlock_Impl: pthread_mutex_unlock returned status=%d\\n\", status);\n            fprintf(log, \"OS_BSP_Unlock_Impl: strerror(status) -> pointer=%p, message=\\\"%s\\\"\\n\",\n                    (void *)err1, (err1 != NULL) ? err1 : \"(null)\");\n            fprintf(log, \"OS_BSP_Unlock_Impl: second strerror(status) -> pointer=%p, message=\\\"%s\\\"\\n\",\n                    (void *)err2, (err2 != NULL) ? err2 : \"(null)\");\n            fprintf(log, \"OS_BSP_Unlock_Impl: pointer equality: %s\\n\",\n                    (err1 == err2) ? \"same\" : \"different\");\n        }\n\n        /* Preserve original behaviour and call site (do not change the BSP_DEBUG usage) */\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n\n        if (log != NULL)\n        {\n            fclose(log);\n        }\n    }\n    else\n    {\n        /* Log success path and cancellability state */\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_BSP_Unlock_Impl: pthread_mutex_unlock succeeded (status=%d). Restoring cancellability state=%d\\n\",\n                    status, OS_BSP_GenericLinuxGlobal.AccessCancelState);\n            fclose(log);\n        }\n\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n"
}