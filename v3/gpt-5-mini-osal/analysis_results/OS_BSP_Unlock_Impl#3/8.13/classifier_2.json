{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nBSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in this fragment. The call uses strerror(status) as an rvalue argument; there is no pointer declaration here that should be const-qualified. (Note: strerror has a legacy signature returning char *; it would be preferable to treat the result as const char * when storing it: e.g. const char *msg = strerror(status); or cast when calling: BSP_DEBUG(\"...%s\\n\", (const char *)strerror(status)); A violation of Rule 8.13 would occur if the code stored the returned pointer into a non-const pointer variable and then treated it as mutable, e.g. char *s = strerror(status); )"
}