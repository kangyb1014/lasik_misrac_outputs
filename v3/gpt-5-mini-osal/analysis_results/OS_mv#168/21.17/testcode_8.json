{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds access when memchr is allowed to scan more bytes than remain in the VirtualPath string. For example, if VirtPathLen was computed as OS_MAX_PATH_LEN-1 (i.e. the string is long, but still accepted) and the last '/' is at index 0 so name_ptr points to VirtualPath+1, then the number of bytes remaining in the object beginning at name_ptr is (OS_MAX_PATH_LEN-1). If OS_MAX_FILE_NAME is greater than that remaining size, memchr(name_ptr, 0, OS_MAX_FILE_NAME) will read beyond the bounds of the VirtualPath object. The code as shown does not explicitly ensure OS_MAX_FILE_NAME cannot exceed the remaining bytes after name_ptr, so this use of memchr can violate MISRA C 2023 Rule 21.17 unless a project-wide guarantee exists that OS_MAX_FILE_NAME <= OS_MAX_PATH_LEN (or equivalent bounds are enforced).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mv code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mv as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mv:\n```c\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_cp(src, dest);\n        if (return_code == OS_SUCCESS)\n        {\n            OS_remove(src);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mv code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/*\n * Probe helpers: write control-flow and state information to a file so\n * other agents can reproduce and gather evidence for any violation\n * scenarios encountered during calls to OS_mv.\n *\n * Logs are appended to: /tmp/logs/1689.txt\n */\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1689.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(__STDC_LIB_EXT1__)\n    /* Use safer localtime_s if available */\n    localtime_s(&tm_buf, &t);\n#else\n    /* Fallback - this is used only for logging */\n    struct tm *tmp = localtime(&t);\n    if (tmp != NULL)\n    {\n        tm_buf = *tmp;\n    }\n    else\n    {\n        memset(&tm_buf, 0, sizeof(tm_buf));\n    }\n#endif\n\n    fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n            tm_buf.tm_year + 1900,\n            tm_buf.tm_mon + 1,\n            tm_buf.tm_mday,\n            tm_buf.tm_hour,\n            tm_buf.tm_min,\n            tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Safely determine the string length up to a provided limit. This avoids\n * calling strlen unboundedly in the logger. The limit is intentionally\n * conservative. Note: this function performs a bounded memchr scan; it\n * mirrors how callers may bound buffer scans when reproducing the\n * reported memchr scenario.\n */\nstatic size_t safe_strnlen(const char *s, size_t max_scan)\n{\n    if (s == NULL)\n    {\n        return 0;\n    }\n\n    const void *p = memchr(s, 0, max_scan);\n    if (p == NULL)\n    {\n        /* Null not found within max_scan; report max_scan to indicate\n         * a potentially unterminated or longer string (useful for\n         * reproducing out-of-bounds scan scenarios). */\n        return max_scan;\n    }\n\n    return (size_t)((const char *)p - s);\n}\n\n/* External OS functions - expected to be provided by the larger project. */\nextern int32 OS_rename(const char *src, const char *dest);\nextern int32 OS_cp(const char *src, const char *dest);\nextern int32 OS_remove(const char *path);\n\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* Log entry and basic state of inputs. We log pointer values and a\n     * conservative bounded length/sample of the strings so other agents\n     * can reason about possible out-of-bounds scans in downstream code. */\n    log_probe(\"OS_mv ENTER: src=%p dest=%p\", (void *)src, (void *)dest);\n\n    /* Use a conservative scan limit for logging to avoid overly-large\n     * reads while still providing useful evidence. */\n    const size_t LOG_SCAN_LIMIT = 1024U;\n    size_t src_len = safe_strnlen(src, LOG_SCAN_LIMIT);\n    size_t dest_len = safe_strnlen(dest, LOG_SCAN_LIMIT);\n\n    /* Log lengths discovered (or the scan limit if the NUL wasn't found).\n     * Also log a short sample of the content for easier reproduction. */\n    log_probe(\"OS_mv INPUTS: src_len=%zu dest_len=%zu\", src_len, dest_len);\n\n    /* Log up to 64 characters of each string (or the full discovered\n     * length if smaller). This helps reproduce cases where the separator\n     * '/' location and subsequent pointer arithmetic might lead to\n     * out-of-bounds memchr scans in other functions. */\n    {\n        char sample[65];\n        size_t n = (src_len < 64U) ? src_len : 64U;\n        if (src != NULL && n > 0)\n        {\n            memcpy(sample, src, n);\n        }\n        sample[n] = '\\0';\n        log_probe(\"OS_mv SRC_SAMPLE(len=%zu): %s\", n, sample);\n\n        n = (dest_len < 64U) ? dest_len : 64U;\n        if (dest != NULL && n > 0)\n        {\n            memcpy(sample, dest, n);\n        }\n        sample[n] = '\\0';\n        log_probe(\"OS_mv DEST_SAMPLE(len=%zu): %s\", n, sample);\n    }\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n    log_probe(\"OS_mv: OS_rename returned %d\", (int)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        log_probe(\"OS_mv: rename failed, attempting copy (OS_cp)\");\n\n        return_code = OS_cp(src, dest);\n        log_probe(\"OS_mv: OS_cp returned %d\", (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            log_probe(\"OS_mv: copy succeeded, calling OS_remove on src=%p\", (void *)src);\n            OS_remove(src);\n            log_probe(\"OS_mv: OS_remove called for src=%p\", (void *)src);\n        }\n        else\n        {\n            log_probe(\"OS_mv: copy failed; src=%p dest=%p\", (void *)src, (void *)dest);\n        }\n    }\n    else\n    {\n        log_probe(\"OS_mv: rename succeeded; no copy/remove necessary\");\n    }\n\n    log_probe(\"OS_mv EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}