{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath calls OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) after only checking that VirtualPath is non-NULL. If a caller passes a pointer to a char object that is smaller than OS_MAX_PATH_LEN and does not contain a NUL within that object (e.g. a two\u2011byte buffer with no terminator), OS_strnlen may attempt to read up to OS_MAX_PATH_LEN bytes and thus access memory beyond the bounds of the object. Example: char *p = malloc(2); p[0]='a'; /* no NUL */ OS_TranslatePath(p, buf); \u2014 OS_strnlen will scan past the allocated 2 bytes and can read out-of-bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mv code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mv as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mv:\n```c\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_cp(src, dest);\n        if (return_code == OS_SUCCESS)\n        {\n            OS_remove(src);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mv code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper: append control-flow and state info to a file.\n * Writes simple records that include a timestamp, a stage name, the\n * src/dest pointer values, and a return code. This helper avoids any\n * string operations that could read beyond caller-provided buffers.\n */\nstatic void OS_mv_log_event(const char *stage, const char *src, const char *dest, int32_t rc)\n{\n    FILE *f = fopen(\"/tmp/logs/1689.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not alter program flow. */\n        return;\n    }\n\n    time_t now = time(NULL);\n    /* Print timestamp, stage, pointer values, and return code. */\n    fprintf(f, \"%ld: stage=%s src=%p dest=%p rc=%d\\n\", (long)now,\n            stage, (const void *)src, (const void *)dest, (int)rc);\n    fclose(f);\n}\n\n/* Original function preserved. Logging probes inserted to capture the\n * control path and state transitions relevant to reproduction of the\n * reported violation (e.g. calls that lead to OS_TranslatePath being\n * exercised in downstream functions).\n *\n * Note: int32 is expected to be defined elsewhere in the project as\n * per the original code base. We use int32_t locally for logging casts\n * to avoid including project-specific headers.\n */\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* Log entry with pointer values. Do not dereference src/dest to avoid\n     * any accidental out-of-bounds reads here. */\n    OS_mv_log_event(\"entry\", src, dest, 0);\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n    OS_mv_log_event(\"after_rename\", src, dest, (int32_t)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_mv_log_event(\"before_cp\", src, dest, (int32_t)return_code);\n        return_code = OS_cp(src, dest);\n        OS_mv_log_event(\"after_cp\", src, dest, (int32_t)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            OS_mv_log_event(\"before_remove\", src, dest, 0);\n            OS_remove(src);\n            OS_mv_log_event(\"after_remove\", src, dest, 0);\n        }\n    }\n\n    OS_mv_log_event(\"exit\", src, dest, (int32_t)return_code);\n\n    return return_code;\n}\n"
}