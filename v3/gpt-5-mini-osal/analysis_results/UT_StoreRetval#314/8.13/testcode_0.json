{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union defines a non-const pointer member `void * Ptr;` while an equivalent const-qualified member exists (`const void * IndirectPtr`). According to MISRA C 2023 Rule 8.13, pointers should be to const-qualified types when possible; therefore `Ptr` should be declared as `const void * Ptr` (or otherwise justified) to avoid allowing modification through a pointer that appears to be intended only for storage/return of pointer values. The current `void * Ptr;` is a violation unless there is a documented, necessary reason to permit modification through that pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_StoreRetval code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_StoreRetval as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_StoreRetval:\n```c\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n            Buf->Integer = *((int8 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n            Buf->Integer = *((int16 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n            Buf->Integer = *((int32 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n            Buf->Integer = *((int64 const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n            Buf->Ptr = *((void *const *)ValuePtr);\n            break;\n\n        default:\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    return true;\n}\n```\n</target_code>\nPlease provide the modified UT_StoreRetval code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe logging helper: append textual trace information to /tmp/logs/3143.txt */\nstatic void UT_StoreRetval_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/3143.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Log entry state */\n    UT_StoreRetval_Log(\"ENTRY: UT_StoreRetval Buf=%p ValuePtr=%p ValueSize=%zu ValueGenre=%d\",\n                       (void *)Buf, ValuePtr, ValueSize, (int)ValueGenre);\n\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    size_t genre_key = UT_GENRE_SIZE(ValueGenre, ValueSize);\n    UT_StoreRetval_Log(\"Computed genre key: %zu\", genre_key);\n\n    switch (genre_key)\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n        {\n            int64_t tmp = (int64_t)(*((int8 const *)ValuePtr));\n            UT_StoreRetval_Log(\"INTEGER (int8) read: 0x%llx (%lld)\", (unsigned long long)tmp, (long long)tmp);\n            Buf->Integer = *((int8 const *)ValuePtr);\n            UT_StoreRetval_Log(\"Stored to Buf->Integer: %lld\", (long long)Buf->Integer);\n            break;\n        }\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n        {\n            int64_t tmp = (int64_t)(*((int16 const *)ValuePtr));\n            UT_StoreRetval_Log(\"INTEGER (int16) read: 0x%llx (%lld)\", (unsigned long long)tmp, (long long)tmp);\n            Buf->Integer = *((int16 const *)ValuePtr);\n            UT_StoreRetval_Log(\"Stored to Buf->Integer: %lld\", (long long)Buf->Integer);\n            break;\n        }\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n        {\n            int64_t tmp = (int64_t)(*((int32 const *)ValuePtr));\n            UT_StoreRetval_Log(\"INTEGER (int32) read: 0x%llx (%lld)\", (unsigned long long)tmp, (long long)tmp);\n            Buf->Integer = *((int32 const *)ValuePtr);\n            UT_StoreRetval_Log(\"Stored to Buf->Integer: %lld\", (long long)Buf->Integer);\n            break;\n        }\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n        {\n            int64_t tmp = (int64_t)(*((int64 const *)ValuePtr));\n            UT_StoreRetval_Log(\"INTEGER (int64) read: 0x%llx (%lld)\", (unsigned long long)tmp, (long long)tmp);\n            Buf->Integer = *((int64 const *)ValuePtr);\n            UT_StoreRetval_Log(\"Stored to Buf->Integer: %lld\", (long long)Buf->Integer);\n            break;\n        }\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n        {\n            float tmp = *((float const *)ValuePtr);\n            UT_StoreRetval_Log(\"FLOAT (float) read: %f\", (double)tmp);\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            UT_StoreRetval_Log(\"Stored to Buf->FloatingPt (as double): %f\", (double)Buf->FloatingPt);\n            break;\n        }\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n        {\n            double tmp = *((double const *)ValuePtr);\n            UT_StoreRetval_Log(\"FLOAT (double) read: %f\", tmp);\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            UT_StoreRetval_Log(\"Stored to Buf->FloatingPt: %f\", (double)Buf->FloatingPt);\n            break;\n        }\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n        {\n            /* Probe the pointer value being copied. This is the key area related to the reported rule 8.13\n             * We intentionally log the pointer read from ValuePtr and the address in Buf where it will be stored,\n             * so the control flow and state demonstrating a non-const pointer member assignment can be observed.\n             */\n            void *read_ptr = *((void *const *)ValuePtr);\n            UT_StoreRetval_Log(\"POINTER case: read pointer value from ValuePtr: %p\", read_ptr);\n            UT_StoreRetval_Log(\"Buf pointer member address: %p\", (void *)&Buf->Ptr);\n\n            /* Perform the original assignment exactly as before. */\n            Buf->Ptr = *((void *const *)ValuePtr);\n\n            UT_StoreRetval_Log(\"Stored to Buf->Ptr: %p\", (void)Buf->Ptr);\n\n            /* Add an explicit log noting the potential const-qualification issue for evidence gathering. */\n            UT_StoreRetval_Log(\"NOTE: Buf->Ptr is a non-const pointer member (void *). If an equivalent const-qualified member exists,\"\n                               \" this write demonstrates a path that allows modification through a non-const pointer.\");\n            break;\n        }\n\n        default:\n            UT_StoreRetval_Log(\"DEFAULT: Invalid ValueSize (%zu) for ValueGenre (%d) - failing\", ValueSize, (int)ValueGenre);\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    UT_StoreRetval_Log(\"EXIT: UT_StoreRetval returning true for Buf=%p\", (void *)Buf);\n    return true;\n}\n"
}