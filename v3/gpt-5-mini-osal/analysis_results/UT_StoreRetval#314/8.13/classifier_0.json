{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_StoreRetval:\n```c\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n            Buf->Integer = *((int8 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n            Buf->Integer = *((int16 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n            Buf->Integer = *((int32 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n            Buf->Integer = *((int64 const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n            Buf->Ptr = *((void *const *)ValuePtr);\n            break;\n\n        default:\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    return true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UT_StoreRetval:\ntypedef union UT_RetvalBuf\n{\n    uint8          Raw[8];\n    const void *   IndirectPtr;\n    void *         Ptr;\n    UT_IntReturn_t Integer;\n    double         FloatingPt;\n} UT_RetvalBuf_t\n...\ntypedef enum UT_ValueGenre\n{\n    UT_ValueGenre_OPAQUE  = 0, /**< The nature of the value is opaque, reference is stored directly (NOT copied!) */\n    UT_ValueGenre_INTEGER = 1, /**< The value is an integer and may be converted to integers of other sizes */\n    UT_ValueGenre_FLOAT   = 2, /**< The value is a floating point and may be converted to floats of other sizes */\n    UT_ValueGenre_POINTER = 3  /**< The value is a pointer and should only be used to fulfill a pointer return */\n} UT_ValueGenre_t\n...\n#define UT_GENRE_SIZE(g, s) (((size_t)g<<8)|s)\n...\ntypedef int8_t    int8\n...\ntypedef int16_t   int16\n...\ntypedef int32_t   int32\n...\ntypedef int64_t   int64\n...\n#define UtAssert_Failed(__VA_ARGS__) UtAssertEx(false,UtAssert_GetContext(),__FILE__,__LINE__,__VA_ARGS__)\n...\nUtAssert_CaseType_t UtAssert_GetContext(void)\n{\n    return DefaultContext;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nvoid *         Ptr;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The union defines a non-const pointer member `void * Ptr;` while an equivalent const-qualified member exists (`const void * IndirectPtr`). According to MISRA C 2023 Rule 8.13, pointers should be to const-qualified types when possible; therefore `Ptr` should be declared as `const void * Ptr` (or otherwise justified) to avoid allowing modification through a pointer that appears to be intended only for storage/return of pointer values. The current `void * Ptr;` is a violation unless there is a documented, necessary reason to permit modification through that pointer."
}