{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the incoming const void * (ValuePtr) to (void *const *) and then stores the dereferenced value into Buf->Ptr (type void *). This discards the const qualification and results in a non-const pointer being stored even though the source was const-qualified. Under MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible; the correct approach would be to preserve the const qualification (for example store into Buf->IndirectPtr or change to use const void * / (const void *const *) when dereferencing), instead of casting away const and assigning to void *.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_StoreRetval code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_StoreRetval as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_StoreRetval:\n```c\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n            Buf->Integer = *((int8 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n            Buf->Integer = *((int16 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n            Buf->Integer = *((int32 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n            Buf->Integer = *((int64 const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n            Buf->Ptr = *((void *const *)ValuePtr);\n            break;\n\n        default:\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    return true;\n}\n```\n</target_code>\nPlease provide the modified UT_StoreRetval code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <sys/stat.h>\n\n/* Helper logging functions. These are simple probes that append human-readable\n * diagnostic information to the required file. They intentionally do not alter\n * the control flow or the semantics of UT_StoreRetval; they only observe and\n * record state. */\nstatic void UT_EnsureLogDir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void UT_AppendLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    UT_EnsureLogDir();\n    f = fopen(\"/tmp/logs/3143.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* The original UT_StoreRetval logic is preserved. Logging calls are added to\n * record the control path and the values observed (addresses and contents)\n * for each branch. This will provide evidence for the scenario where a\n * const-qualified source is ultimately stored into a non-const pointer field. */\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    UT_AppendLog(\"UT_StoreRetval ENTRY: Buf=%p, ValuePtr=%p, ValueSize=%zu, ValueGenre=%d\", (void *)Buf, ValuePtr, ValueSize, (int)ValueGenre);\n\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n        {\n            int8 tmp = *((int8 const *)ValuePtr);\n            UT_AppendLog(\"CASE: INTEGER sizeof(int8). Read value=%d (0x%02x)\", (int)tmp, (unsigned int)tmp & 0xFF);\n            Buf->Integer = tmp;\n            UT_AppendLog(\"WROTE Buf->Integer=%d\", (int)Buf->Integer);\n            break;\n        }\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n        {\n            int16 tmp = *((int16 const *)ValuePtr);\n            UT_AppendLog(\"CASE: INTEGER sizeof(int16). Read value=%d (0x%04x)\", (int)tmp, (unsigned int)tmp & 0xFFFF);\n            Buf->Integer = tmp;\n            UT_AppendLog(\"WROTE Buf->Integer=%d\", (int)Buf->Integer);\n            break;\n        }\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n        {\n            int32 tmp = *((int32 const *)ValuePtr);\n            UT_AppendLog(\"CASE: INTEGER sizeof(int32). Read value=%d (0x%08x)\", (int)tmp, (unsigned int)tmp);\n            Buf->Integer = tmp;\n            UT_AppendLog(\"WROTE Buf->Integer=%d\", (int)Buf->Integer);\n            break;\n        }\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n        {\n            int64 tmp = *((int64 const *)ValuePtr);\n            UT_AppendLog(\"CASE: INTEGER sizeof(int64). Read value=%lld (0x%llx)\", (long long)tmp, (unsigned long long)tmp);\n            Buf->Integer = tmp;\n            UT_AppendLog(\"WROTE Buf->Integer=%lld\", (long long)Buf->Integer);\n            break;\n        }\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n        {\n            float tmp = *((float const *)ValuePtr);\n            UT_AppendLog(\"CASE: FLOAT sizeof(float). Read value=%a (as double %#.17g)\", tmp, (double)tmp);\n            Buf->FloatingPt = tmp;\n            UT_AppendLog(\"WROTE Buf->FloatingPt=%a (as double %#.17g)\", (double)Buf->FloatingPt, (double)Buf->FloatingPt);\n            break;\n        }\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n        {\n            double tmp = *((double const *)ValuePtr);\n            UT_AppendLog(\"CASE: FLOAT sizeof(double). Read value=%a\", tmp);\n            Buf->FloatingPt = tmp;\n            UT_AppendLog(\"WROTE Buf->FloatingPt=%a\", Buf->FloatingPt);\n            break;\n        }\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n        {\n            /* NOTE: The original code casts the incoming const void * to (void *const *)\n             * and then dereferences. That operation discards const qualification.\n             * The following logs capture the incoming pointer-to-pointer address\n             * and the value that is read and then stored into Buf->Ptr.\n             */\n\n            /* Interpret the incoming pointer as pointer-to-const-pointer to avoid\n             * introducing additional casts that could change the scenario. */\n            const void *const *src_const_ptrptr = (const void *const *)ValuePtr;\n            const void *src_value = NULL;\n\n            /* Read the value that will be stored. This mirrors the original\n             * dereference, but keeps the intermediate read as const for logging. */\n            src_value = *src_const_ptrptr;\n            UT_AppendLog(\"CASE: POINTER. ValuePtr (ptr-to-ptr)=%p, pointed-to-const-pointer=%p\", ValuePtr, (void *)src_const_ptrptr);\n            UT_AppendLog(\"READ (as const void*): %p\", src_value);\n\n            /* Perform the original assignment. This reproduces the circumstance\n             * where a const-qualified source is ultimately stored into a non-const\n             * pointer field, as reported by the other agent. */\n            Buf->Ptr = *((void *const *)ValuePtr);\n\n            UT_AppendLog(\"WROTE Buf->Ptr=%p\", (void *)Buf->Ptr);\n            break;\n        }\n\n        default:\n            UT_AppendLog(\"DEFAULT: Cannot store return value - invalid ValueSize=%zu for ValueGenre=%d\", ValueSize, (int)ValueGenre);\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    UT_AppendLog(\"UT_StoreRetval EXIT: returning true\");\n    return true;\n}\n"
}