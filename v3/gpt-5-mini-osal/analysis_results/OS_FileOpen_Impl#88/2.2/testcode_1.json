{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment impl->selectable = ((os_perm & O_NONBLOCK) != 0); is a dead operation if the selectable field is never read anywhere else in the project after OS_FileOpen_Impl returns. In that case removing this single assignment would not change observable program behaviour (no reads of impl->selectable, no timing or side-effects), so the line is dead code. For example, if OS_impl_file_internal_record_t.selectable is never referenced by any other function (no select/poll logic uses it) then this write is executed but has no effect and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/882.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/*\n * Probe logging helper. Appends human-readable trace information to /tmp/logs/882.txt\n * This is intentionally lightweight to avoid changing program behavior beyond the\n * necessary side-effect of writing the log file.\n */\nstatic void OS_FileOpen_ProbeLog(const char *tag, const void *token_ptr, const char *local_path,\n                                 int flags, int access_mode, int os_perm, int os_mode,\n                                 int fd, int saved_errno, int selectable_value, const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/882.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, avoid changing errno for the caller path: nothing more to do */\n        return;\n    }\n\n    fprintf(f, \"[OS_FileOpen] %s\\n\", tag);\n    fprintf(f, \"  token=%p\\n\", token_ptr);\n    fprintf(f, \"  path=\\\"%s\\\"\\n\", local_path ? local_path : \"(null)\");\n    fprintf(f, \"  flags=0x%X access_mode=%d\\n\", flags, access_mode);\n    fprintf(f, \"  os_perm=0x%X os_mode=0%o\\n\", os_perm, os_mode);\n    if (fd >= 0)\n    {\n        fprintf(f, \"  fd=%d\\n\", fd);\n    }\n    else\n    {\n        fprintf(f, \"  fd=%d errno=%d (%s)\\n\", fd, saved_errno, (saved_errno != 0) ? strerror(saved_errno) : \"\");\n    }\n    fprintf(f, \"  selectable_computed=%d\\n\", selectable_value);\n    if (note != NULL)\n    {\n        fprintf(f, \"  note=%s\\n\", note);\n    }\n    fprintf(f, \"---------------------------\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log function entry and initial state */\n    OS_FileOpen_ProbeLog(\"ENTRY\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                         0, 0, -1, 0, -1, \"entry\");\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            /* Log invalid access mode path */\n            OS_FileOpen_ProbeLog(\"BAD_ACCESS_MODE\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                                 0, 0, -1, 0, -1, \"invalid access_mode -> return OS_ERROR\");\n            return OS_ERROR;\n    }\n\n    /* Log after access_mode mapping */\n    OS_FileOpen_ProbeLog(\"AFTER_ACCESS_MODE\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                         os_perm, 0, -1, 0, -1, NULL);\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n        OS_FileOpen_ProbeLog(\"FLAG_CREATE\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                             os_perm, 0, -1, 0, -1, \"O_CREAT added\");\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n        OS_FileOpen_ProbeLog(\"FLAG_TRUNCATE\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                             os_perm, 0, -1, 0, -1, \"O_TRUNC added\");\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    /* Log right before calling open() to capture final os_perm / os_mode */\n    OS_FileOpen_ProbeLog(\"BEFORE_OPEN\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                         os_perm, os_mode, -1, 0, -1, NULL);\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        int saved_errno = errno; /* capture errno immediately */\n        OS_FileOpen_ProbeLog(\"OPEN_FAILED\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                             os_perm, os_mode, impl->fd, saved_errno, -1, \"open failed\");\n\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(saved_errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    int selectable_val = ((os_perm & O_NONBLOCK) != 0);\n\n    /* Log the value computed for selectable before assignment */\n    OS_FileOpen_ProbeLog(\"SELECTABLE_COMPUTED\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                         os_perm, os_mode, impl->fd, 0, selectable_val, \"before assign\");\n\n    impl->selectable = selectable_val;\n\n    /* Log after assignment so callers can see the field write occurred */\n    OS_FileOpen_ProbeLog(\"SELECTABLE_ASSIGNED\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                         os_perm, os_mode, impl->fd, 0, impl->selectable, \"after assign\");\n\n    OS_FileOpen_ProbeLog(\"EXIT_SUCCESS\", (const void *)token, local_path, (int)flags, (int)access_mode,\n                         os_perm, os_mode, impl->fd, 0, impl->selectable, \"return OS_SUCCESS\");\n\n    return OS_SUCCESS;\n}\n"
}