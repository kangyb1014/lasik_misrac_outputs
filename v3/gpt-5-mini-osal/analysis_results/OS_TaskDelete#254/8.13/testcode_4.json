{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is declared as OS_task_internal_record_t * and is initialized from OS_OBJECT_TABLE_GET(OS_task_table, token), which yields a non-const pointer to the global OS_task_table. In the shown code 'task' is only used for read access (reading task->delete_hook_pointer) and is not modified. According to MISRA C 2023 Rule 8.13, the pointer should instead point to a const-qualified type (e.g. const OS_task_internal_record_t *task) so the intent of read-only access is enforced. Additionally, the OS_OBJECT_TABLE_GET macro returns a non-const pointer, which prevents const propagation \u2014 either the pointer or the macro result should be const-qualified to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: write logs to /tmp/logs/2543.txt to capture control flow and state. */\nstatic void OS_TaskDelete_Log(const char *stage,\n                              osal_id_t task_id,\n                              const OS_object_token_t *token,\n                              OS_task_internal_record_t *task,\n                              int delete_hook_present,\n                              int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2543.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_TaskDelete: stage=%s task_id=%llu token_ptr=%p task_ptr=%p delete_hook_present=%d return_code=%ld\\n\",\n                stage,\n                (unsigned long long)task_id,\n                (const void *)token,\n                (const void *)task,\n                delete_hook_present,\n                (long)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Log entry into the routine */\n    OS_TaskDelete_Log(\"entry\", task_id, NULL, NULL, 0, 0);\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TaskDelete_Log(\"after_ObjectIdGetById\", task_id, &token, NULL, 0, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the fetched task pointer before reading delete_hook_pointer */\n        OS_TaskDelete_Log(\"task_fetched\", task_id, &token, task, 0, return_code);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log that delete_hook was read and whether it is present */\n        OS_TaskDelete_Log(\"delete_hook_saved\", task_id, &token, task, (delete_hook != NULL) ? 1 : 0, return_code);\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Log after implementation-level delete */\n        OS_TaskDelete_Log(\"after_TaskDelete_Impl\", task_id, &token, task, (delete_hook != NULL) ? 1 : 0, return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalization */\n        OS_TaskDelete_Log(\"after_ObjectIdFinalizeDelete\", task_id, &token, task, (delete_hook != NULL) ? 1 : 0, return_code);\n    }\n    else\n    {\n        /* Log early exit when ObjectIdGetById failed */\n        OS_TaskDelete_Log(\"ObjectIdGetById_failed\", task_id, &token, NULL, 0, return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        /* Log just before calling the delete hook (no pointer-to-function printed to avoid function/object pointer conversions) */\n        OS_TaskDelete_Log(\"about_to_call_delete_hook\", task_id, &token, NULL, 1, return_code);\n\n        delete_hook();\n\n        /* Log after calling the delete hook */\n        OS_TaskDelete_Log(\"after_call_delete_hook\", task_id, &token, NULL, 1, return_code);\n    }\n\n    /* Final exit log */\n    OS_TaskDelete_Log(\"exit\", task_id, &token, NULL, (delete_hook != NULL) ? 1 : 0, return_code);\n\n    return return_code;\n}\n"
}