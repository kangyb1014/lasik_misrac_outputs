{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization 'delete_hook = NULL;' at function start is dead code: in the success path it is immediately overwritten by 'delete_hook = task->delete_hook_pointer;', and in the failure path (OS_ObjectIdGetById != OS_SUCCESS) the variable is never used because the later check also requires return_code == OS_SUCCESS. Therefore removing the initialization would not change program behaviour, which violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2542.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append a formatted message to the log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2542.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    probe_log(\"OS_TaskDelete ENTRY: task_id=%lu\", (unsigned long)task_id);\n\n    delete_hook = NULL;\n    probe_log(\"After init: delete_hook is NULL\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    probe_log(\"OS_ObjectIdGetById returned: %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n        probe_log(\"In success path: task=%p, saved delete_hook %s\",\n                  (void *)task,\n                  (delete_hook == NULL) ? \"NULL\" : \"NON-NULL\");\n\n        return_code = OS_TaskDelete_Impl(&token);\n        probe_log(\"After OS_TaskDelete_Impl: return_code=%ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        probe_log(\"After OS_ObjectIdFinalizeDelete: return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        probe_log(\"ObjectIdGetById failed; skipping success-path actions\");\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    probe_log(\"Before delete-hook check: return_code=%ld, delete_hook is %s\",\n              (long)return_code,\n              (delete_hook == NULL) ? \"NULL\" : \"NON-NULL\");\n\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        probe_log(\"Calling delete_hook now\");\n        delete_hook();\n        probe_log(\"delete_hook returned\");\n    }\n    else\n    {\n        probe_log(\"Not calling delete_hook (either return_code!=OS_SUCCESS or delete_hook==NULL)\");\n    }\n\n    probe_log(\"OS_TaskDelete EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}