{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_NotifyEvent calls a function pointer OS_SharedGlobalVars.EventHandler. If that pointer were set to OS_NotifyEvent itself (or to any callback that ends up calling OS_NotifyEvent), the call would be an indirect recursive call and thus violate MISRA C 2023 Rule 17.2. For example, if somewhere EventHandler = OS_NotifyEvent; then the branch calls EventHandler(...) which re-enters OS_NotifyEvent leading to indirect self-call (recursion).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2546.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe helpers: append logs to /tmp/logs/2546.txt */\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2546.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)(-1))\n    {\n        fprintf(f, \"[%ld] \", (long)t);\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Simple depth counter to observe re-entrancy / indirect recursion. */\nstatic volatile int OS_TaskDelete_depth = 0;\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n\n    /* Log entry and input parameter */\n    OS_LogProbe(\"ENTER OS_TaskDelete: task_id=%u, depth=%d\", (unsigned)task_id, (int)OS_TaskDelete_depth);\n\n    /* Increment depth (note: not thread-safe, but useful for basic tracing) */\n    OS_TaskDelete_depth++;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_LogProbe(\"OS_ObjectIdGetById returned %d for task_id=%u; token_addr=%p\", (int)return_code, (unsigned)task_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        OS_LogProbe(\"Task found: task_ptr=%p, delete_hook_ptr=%p\", (void *)task, (void *)delete_hook);\n\n        return_code = OS_TaskDelete_Impl(&token);\n        OS_LogProbe(\"OS_TaskDelete_Impl returned %d for token_addr=%p\", (int)return_code, (void *)&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_LogProbe(\"OS_ObjectIdFinalizeDelete returned %d for token_addr=%p\", (int)return_code, (void *)&token);\n    }\n    else\n    {\n        OS_LogProbe(\"OS_ObjectIdGetById failed, skipping deletion: return_code=%d\", (int)return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        /* Log just before calling the hook, including depth so any re-entry is visible */\n        OS_LogProbe(\"About to call delete_hook at %p (depth=%d). task_id=%u, return_code=%d\", (void *)delete_hook, (int)OS_TaskDelete_depth, (unsigned)task_id, (int)return_code);\n\n        /* Call the hook. This is the potential indirect recursion point that we want evidence for. */\n        delete_hook();\n\n        /* Log after hook returns */\n        OS_LogProbe(\"Returned from delete_hook at %p (depth=%d). task_id=%u\", (void *)delete_hook, (int)OS_TaskDelete_depth, (unsigned)task_id);\n    }\n    else\n    {\n        OS_LogProbe(\"No delete_hook called (return_code=%d, delete_hook=%p)\", (int)return_code, (void *)delete_hook);\n    }\n\n    /* Decrement depth and log exit */\n    OS_TaskDelete_depth--;\n    OS_LogProbe(\"EXIT OS_TaskDelete: task_id=%u, final_return=%d, depth=%d\", (unsigned)task_id, (int)return_code, (int)OS_TaskDelete_depth);\n\n    return return_code;\n}\n"
}