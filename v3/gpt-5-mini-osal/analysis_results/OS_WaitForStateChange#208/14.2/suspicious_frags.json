{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_WaitForStateChange:\n```c\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_WaitForStateChange:\nvoid OS_WaitForStateChange_Impl(osal_objtype_t idtype, uint32 attempts)\n{\n    OS_impl_objtype_lock_t *impl;\n    struct timespec         ts;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    /*\n     * because pthread_cond_timedwait() is also a cancellation point,\n     * this pushes a cleanup handler to ensure that if canceled during this call,\n     * the mutex will be released.\n     */\n    pthread_cleanup_push(OS_Posix_ReleaseTableMutex, &impl->mutex);\n\n    clock_gettime(CLOCK_REALTIME, &ts);\n\n    if (attempts <= 10)\n    {\n        /* Wait an increasing amount of time, starting at 10ms */\n        ts.tv_nsec += attempts * attempts * 10000000;\n        if (ts.tv_nsec >= 1000000000)\n        {\n            ts.tv_nsec -= 1000000000;\n            ++ts.tv_sec;\n        }\n    }\n    else\n    {\n        /* wait 1 second (max for polling) */\n        ++ts.tv_sec;\n    }\n\n    pthread_cond_timedwait(&impl->cond, &impl->mutex, &ts);\n\n    pthread_cleanup_pop(false);\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    /* Keep track of the last successfully-issued object ID of each type */\n    osal_id_t last_id_issued;\n\n    /* The number of individual transactions (lock/unlock cycles) on this type */\n    uint32 transaction_count;\n\n    /* The key required to unlock this table */\n    osal_key_t owner_key;\n} OS_objtype_state_t\n...\nOS_objtype_state_t OS_objtype_state[OS_OBJECT_TYPE_USER]\n...\ntypedef struct\n{\n    uint32 key_value;\n} osal_key_t\n...\n#define OS_LOCK_KEY_INVALID ((osal_key_t){0})\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "pthread_cleanup_pop(false);",
    "pthread_cleanup_push(OS_Posix_ReleaseTableMutex, &impl->mutex);"
  ],
  "explanation": "I found no for-statements in the provided source fragments (no occurrences of the 'for' keyword). Therefore there are no explicit for loops in these functions that would directly need checking for MISRA C:2023 Rule 14.2. The other statements in the code (assignments, increments ++ts.tv_sec, if/else, function calls such as pthread_cond_timedwait, array access, and the use of macros like OS_LOCK_KEY_INVALID) do not constitute for-loops and therefore do not fall under Rule 14.2.\n\nThe only elements that warrant further inspection with respect to this rule are the pthread_cleanup_push / pthread_cleanup_pop macro usages. Those are flagged because pthread_cleanup_push/pop are implemented as macros in platform headers and, depending on the implementation, macro expansion could introduce control constructs (including for-statements) not visible in the source shown here. If the build environment's macro expansion shows no for-statement introduced by these macros, then no other fragments in the provided code need investigation for Rule 14.2."
}