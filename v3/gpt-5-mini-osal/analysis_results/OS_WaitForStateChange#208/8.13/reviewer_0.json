{
  "user_message": "An agent A claimed that the following OS_WaitForStateChange code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_WaitForStateChange.\n```c\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nOS_WaitForStateChange accepts a non-const pointer (OS_object_token_t *token) but only reads from the pointed object (uses token->obj_type). Because the function does not modify *token, the parameter should be declared as pointing to a const-qualified type (const OS_object_token_t *token) to comply with MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_WaitForStateChange:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    /* Keep track of the last successfully-issued object ID of each type */\n    osal_id_t last_id_issued;\n\n    /* The number of individual transactions (lock/unlock cycles) on this type */\n    uint32 transaction_count;\n\n    /* The key required to unlock this table */\n    osal_key_t owner_key;\n} OS_objtype_state_t\n...\nOS_objtype_state_t OS_objtype_state[OS_OBJECT_TYPE_USER]\n...\ntypedef struct\n{\n    uint32 key_value;\n} osal_key_t\n...\ntypedef uint32_t  uint32\n...\n#define OS_LOCK_KEY_INVALID ((osal_key_t){0})\n...\nvoid OS_WaitForStateChange_Impl(osal_objtype_t idtype, uint32 attempts)\n{\n    OS_impl_objtype_lock_t *impl;\n    struct timespec         ts;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    /*\n     * because pthread_cond_timedwait() is also a cancellation point,\n     * this pushes a cleanup handler to ensure that if canceled during this call,\n     * the mutex will be released.\n     */\n    pthread_cleanup_push(OS_Posix_ReleaseTableMutex, &impl->mutex);\n\n    clock_gettime(CLOCK_REALTIME, &ts);\n\n    if (attempts <= 10)\n    {\n        /* Wait an increasing amount of time, starting at 10ms */\n        ts.tv_nsec += attempts * attempts * 10000000;\n        if (ts.tv_nsec >= 1000000000)\n        {\n            ts.tv_nsec -= 1000000000;\n            ++ts.tv_sec;\n        }\n    }\n    else\n    {\n        /* wait 1 second (max for polling) */\n        ++ts.tv_sec;\n    }\n\n    pthread_cond_timedwait(&impl->cond, &impl->mutex, &ts);\n\n    pthread_cleanup_pop(false);\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_WaitForStateChange the parameter token is only read (token->obj_type) and is never modified; hence the pointer could and should be to a const-qualified type per MISRA C 2023 Rule 8.13. Making the prototype void OS_WaitForStateChange(const OS_object_token_t *token, uint32 attempts) would satisfy the rule. The function does modify the global objtype table (objtype->owner_key), but that is unrelated to the token pointer itself. There are no evident reasons in the provided code that would prevent adding the const qualification (calls can pass a non-const pointer, which will convert to const), so this is a valid MISRA 8.13 violation."
}