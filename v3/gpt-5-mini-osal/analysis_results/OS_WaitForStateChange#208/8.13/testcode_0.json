{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_WaitForStateChange accepts a non-const pointer (OS_object_token_t *token) but only reads from the pointed object (uses token->obj_type). Because the function does not modify *token, the parameter should be declared as pointing to a const-qualified type (const OS_object_token_t *token) to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_WaitForStateChange code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2083.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_WaitForStateChange as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_WaitForStateChange:\n```c\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n}\n```\n</target_code>\nPlease provide the modified OS_WaitForStateChange code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper: append messages to /tmp/logs/2083.txt\n * Minimal, not changing program control flow.\n */\nstatic void OSW_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2083.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    (void)vfprintf(fp, fmt, args);\n    va_end(args);\n\n    (void)fputc('\\n', fp);\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\n/*\n * Forward declaration of external symbols used by this translation unit.\n * These are expected to be provided by the rest of the system; we do not\n * redefine them here to avoid changing program semantics.\n */\nextern void OS_WaitForStateChange_Impl(unsigned int obj_type, unsigned int attempts);\n\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /* Log entry and input state */\n    OSW_LogProbe(\"OS_WaitForStateChange: ENTRY token=%p attempts=%u\", (void *)token, (unsigned)attempts);\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* Log resolved object type and saved owner key */\n    OSW_LogProbe(\"OS_WaitForStateChange: resolved obj_type=%u token=%p saved_unlock_key=%llu\",\n                 (unsigned)token->obj_type, (void *)token, (unsigned long long)saved_unlock_key);\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /* Log after release */\n    OSW_LogProbe(\"OS_WaitForStateChange: released owner_key for obj_type=%u (now=%llu)\",\n                 (unsigned)token->obj_type, (unsigned long long)objtype->owner_key);\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n\n    /* Log restore and exit */\n    OSW_LogProbe(\"OS_WaitForStateChange: restored owner_key for obj_type=%u token=%p restored_key=%llu - EXIT\",\n                 (unsigned)token->obj_type, (void *)token, (unsigned long long)objtype->owner_key);\n}\n"
}