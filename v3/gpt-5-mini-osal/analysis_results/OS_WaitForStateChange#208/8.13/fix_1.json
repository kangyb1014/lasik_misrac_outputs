{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OSW_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2083.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    (void)vfprintf(fp, fmt, args);\n    va_end(args);\n\n    (void)fputc('\\n', fp);\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /* Log entry and input state */\n    OSW_LogProbe(\"OS_WaitForStateChange: ENTRY token=%p attempts=%u\", (void *)token, (unsigned)attempts);\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* Log resolved object type and saved owner key */\n    OSW_LogProbe(\"OS_WaitForStateChange: resolved obj_type=%u token=%p saved_unlock_key=%llu\",\n                 (unsigned)token->obj_type, (void *)token, (unsigned long long)saved_unlock_key);\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /* Log after release */\n    OSW_LogProbe(\"OS_WaitForStateChange: released owner_key for obj_type=%u (now=%llu)\",\n                 (unsigned)token->obj_type, (unsigned long long)objtype->owner_key);\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n\n    /* Log restore and exit */\n    OSW_LogProbe(\"OS_WaitForStateChange: restored owner_key for obj_type=%u token=%p restored_key=%llu - EXIT\",\n                 (unsigned)token->obj_type, (void *)token, (unsigned long long)objtype->owner_key);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp5zehk9sn/src/src/os/shared/src/osapi-idmap.c: In function 'OS_WaitForStateChange':\n/tmp/tmp5zehk9sn/src/src/os/shared/src/osapi-idmap.c:825:18: error: aggregate value used where an integer was expected\n  825 |                  (unsigned)token->obj_type, (void *)token, (unsigned long long)saved_unlock_key);\n      |                  ^\n/tmp/tmp5zehk9sn/src/src/os/shared/src/osapi-idmap.c:832:18: error: aggregate value used where an integer was expected\n  832 |                  (unsigned)token->obj_type, (unsigned long long)objtype->owner_key);\n      |                  ^\n/tmp/tmp5zehk9sn/src/src/os/shared/src/osapi-idmap.c:849:18: error: aggregate value used where an integer was expected\n  849 |                  (unsigned)token->obj_type, (void *)token, (unsigned long long)objtype->owner_key);\n      |                  ^\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:216: CMakeFiles/osal.dir/src/os/shared/src/osapi-idmap.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_WaitForStateChange as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void OSW_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2083.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    (void)vfprintf(fp, fmt, args);\n    va_end(args);\n\n    (void)fputc('\\n', fp);\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /* Log entry and input state */\n    OSW_LogProbe(\"OS_WaitForStateChange: ENTRY token=%p attempts=%u\", (void *)token, (unsigned)attempts);\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* Log resolved object type and saved owner key */\n    /* saved_unlock_key may be an aggregate type; print its address to avoid treating it as an integer */\n    OSW_LogProbe(\"OS_WaitForStateChange: resolved obj_type=%u token=%p saved_unlock_key=%p\",\n                 (unsigned)token->obj_type, (void *)token, (void *)&saved_unlock_key);\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /* Log after release */\n    OSW_LogProbe(\"OS_WaitForStateChange: released owner_key for obj_type=%u (now=%p)\",\n                 (unsigned)token->obj_type, (void *)&objtype->owner_key);\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n\n    /* Log restore and exit */\n    OSW_LogProbe(\"OS_WaitForStateChange: restored owner_key for obj_type=%u token=%p restored_key=%p - EXIT\",\n                 (unsigned)token->obj_type, (void *)token, (void *)&objtype->owner_key);\n}\n",
  "explanation": "The build errors occurred because osal_key_t is an aggregate type (e.g., a struct), but the code attempted to cast it to an integer type and print with %llu. To avoid treating an aggregate as an integer, I changed the log format to print the address of the key using %p and passed the address (void *)&saved_unlock_key or (void *)&objtype->owner_key. This preserves the original logging intent (to show the key value/location) without forcing an invalid integer cast. I also kept the OSW_LogProbe implementation intact and added the necessary stdio/stdarg includes to ensure vfprintf is declared."
}