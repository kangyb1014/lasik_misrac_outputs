{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Probe: log entry and initial outcome of OS_ObjectIdGetById */\n    {\n        FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_MutSemGive: entered with sem_id=%lu, initial_return_code=%ld\\n\", (unsigned long)sem_id, (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Capture the calling task id as in original code */\n        self_task = OS_TaskGetId();\n\n        /* Evaluate ownership comparison once and reuse for both behavior and logging */\n        int owner_equal = OS_ObjectIdEqual(mutex->last_owner, self_task);\n\n        /* Probe: log mutex state and ownership comparison before any modification */\n        {\n            FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_MutSemGive: token=%lu, mutex_ptr=%p, last_owner=%lu, self_task=%lu, owner_equal=%d\\n\",\n                        (unsigned long)token, (void *)mutex,\n                        (unsigned long)OS_ObjectIdToInteger(mutex->last_owner),\n                        (unsigned long)OS_ObjectIdToInteger(self_task), owner_equal);\n                fclose(log);\n            }\n        }\n\n        if (!owner_equal)\n        {\n            /* Preserve original debug behavior (may be empty macro) */\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n\n            /* Probe: log the warning situation to the file for evidence */\n            {\n                FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_MutSemGive: WARNING logged -> task=%lu giving mutex=%lu while owned_by=%lu\\n\",\n                            (unsigned long)OS_ObjectIdToInteger(self_task), (unsigned long)OS_ObjectIdToInteger(sem_id),\n                            (unsigned long)OS_ObjectIdToInteger(mutex->last_owner));\n                    fclose(log);\n                }\n            }\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n\n        /* Probe: log result of implementation call */\n        {\n            FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_MutSemGive: after Impl call, return_code=%ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Probe: log failure to get object by id */\n        FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_MutSemGive: OS_ObjectIdGetById failed for sem_id=%lu, return_code=%ld\\n\", (unsigned long)sem_id, (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpbl45krcp/src/src/os/shared/src/osapi-mutex.c: In function 'OS_MutSemGive':\n/tmp/tmpbl45krcp/src/src/os/shared/src/osapi-mutex.c:188:25: error: aggregate value used where an integer was expected\n  188 |                         (unsigned long)token, (void *)mutex,\n      |                         ^\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:244: CMakeFiles/osal.dir/src/os/shared/src/osapi-mutex.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemGive as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "int32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Probe: log entry and initial outcome of OS_ObjectIdGetById */\n    {\n        FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_MutSemGive: entered with sem_id=%lu, initial_return_code=%ld\\n\",\n                    (unsigned long)OS_ObjectIdToInteger(sem_id), (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Capture the calling task id as in original code */\n        self_task = OS_TaskGetId();\n\n        /* Evaluate ownership comparison once and reuse for both behavior and logging */\n        int owner_equal = OS_ObjectIdEqual(mutex->last_owner, self_task);\n\n        /* Probe: log mutex state and ownership comparison before any modification */\n        {\n            FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_MutSemGive: token=%p, mutex_ptr=%p, last_owner=%lu, self_task=%lu, owner_equal=%d\\n\",\n                        (void *)&token, (void *)mutex,\n                        (unsigned long)OS_ObjectIdToInteger(mutex->last_owner),\n                        (unsigned long)OS_ObjectIdToInteger(self_task), owner_equal);\n                fclose(log);\n            }\n        }\n\n        if (!owner_equal)\n        {\n            /* Preserve original debug behavior (may be empty macro) */\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n\n            /* Probe: log the warning situation to the file for evidence */\n            {\n                FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_MutSemGive: WARNING logged -> task=%lu giving mutex=%lu while owned_by=%lu\\n\",\n                            (unsigned long)OS_ObjectIdToInteger(self_task), (unsigned long)OS_ObjectIdToInteger(sem_id),\n                            (unsigned long)OS_ObjectIdToInteger(mutex->last_owner));\n                    fclose(log);\n                }\n            }\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n\n        /* Probe: log result of implementation call */\n        {\n            FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_MutSemGive: after Impl call, return_code=%ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Probe: log failure to get object by id */\n        FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_MutSemGive: OS_ObjectIdGetById failed for sem_id=%lu, return_code=%ld\\n\",\n                    (unsigned long)OS_ObjectIdToInteger(sem_id), (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n",
  "explanation": "The build error was caused by attempting to cast an aggregate token value to an integer for fprintf (\"(unsigned long)token\"). I replaced the problematic token print with a pointer print of the token's address (\"%p\", (void *)&token). I also updated other sem_id prints to use OS_ObjectIdToInteger(sem_id) (cast to unsigned long for %lu) to avoid casting potentially non-integer osal_id_t types directly. No logic was changed besides the logging format to ensure the code compiles while preserving original behavior."
}