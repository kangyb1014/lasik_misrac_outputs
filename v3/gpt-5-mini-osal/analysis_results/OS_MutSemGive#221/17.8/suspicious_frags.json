{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGive:\n```c\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemGive:\ntypedef uint32 osal_id_t\n...\ntypedef struct\n{\n    char      obj_name[OS_MAX_API_NAME];\n    osal_id_t last_owner;\n} OS_mutex_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline unsigned long OS_ObjectIdToInteger(osal_id_t object_id)\n{\n#ifdef OSAL_OMIT_DEPRECATED\n    return object_id.v;\n#else\n    return object_id;\n#endif\n}\n...\n#define OS_OBJECT_ID_UNDEFINED ((osal_id_t){0})\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code in OS_MutSemGive modifies any of the function's parameters. The only parameter is sem_id (type osal_id_t) and it is only read (passed to OS_ObjectIdGetById and OS_ObjectIdToInteger); there are no assignments to sem_id nor is its address stored/modified. Other operations that modify state act on local objects or on data pointed to by local pointers: - mutex->last_owner = OS_OBJECT_ID_UNDEFINED modifies the record pointed to by the local pointer mutex (not a function parameter), which is allowed (the rule permits modifying the object referred to by a pointer parameter, and here no pointer parameter exists). - OS_MutSemGive_Impl(&token) and OS_ObjectIdGetById(..., &token) pass the address of the local variable token; modifications to token within those calls would affect a local variable, not a function parameter. - The use of OS_OBJECT_ID_UNDEFINED (a compound literal) and OS_ObjectIdToInteger reads/constructs values but does not modify sem_id. Therefore there are no fragments that violate MISRA C 2023 Rule 17.8 in the provided function."
}