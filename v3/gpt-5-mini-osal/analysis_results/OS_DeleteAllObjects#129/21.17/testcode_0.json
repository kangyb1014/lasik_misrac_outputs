{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code calls OS_strnlen(record->name_entry, buffer_size) and later memcpy(buffer, record->name_entry, name_len) where name_len can be up to buffer_size-1. Nothing in this function bounds the maximum number of bytes read from record->name_entry to the storage size of that object. If the caller supplies buffer_size larger than the actual storage of record->name_entry (or if name_entry is not NUL-terminated within that storage), OS_strnlen may read beyond record->name_entry bounds and memcpy may copy beyond the source object. This can produce out-of-bounds accesses of the source object and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DeleteAllObjects code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1299.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DeleteAllObjects as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DeleteAllObjects:\n```c\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            break;\n        }\n        OS_TaskDelay(5);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_DeleteAllObjects code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <time.h>\n\n/*\n * Probe logging for OS_DeleteAllObjects. Logs are appended to /tmp/logs/1299.txt.\n * This code preserves the original logic and only inserts logging probes.\n */\n\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1299.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Prepend a timestamp for better traceability */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[32];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(fp, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/*\n * Modified OS_DeleteAllObjects with logging probes. Original logic preserved.\n */\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    OS_LogProbe(\"OS_DeleteAllObjects: entry\");\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        OS_LogProbe(\"Iteration %u: start (ObjectCount=%u)\", TryCount, ObjectCount);\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_LogProbe(\"Calling OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB). Before ObjectCount=%u\", ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_LogProbe(\"Returned from OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB). After ObjectCount=%u\", ObjectCount);\n\n        OS_LogProbe(\"Calling OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE). Before ObjectCount=%u\", ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_LogProbe(\"Returned from OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE). After ObjectCount=%u\", ObjectCount);\n\n        OS_LogProbe(\"Calling OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK). Before ObjectCount=%u\", ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_LogProbe(\"Returned from OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK). After ObjectCount=%u\", ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_LogProbe(\"Calling OS_ForEachObject(OS_OBJECT_CREATOR_ANY). Before ObjectCount=%u\", ObjectCount);\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_LogProbe(\"Returned from OS_ForEachObject(OS_OBJECT_CREATOR_ANY). After ObjectCount=%u\", ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            OS_LogProbe(\"Loop exit condition met: ObjectCount=%u, TryCount=%u\", ObjectCount, TryCount);\n            break;\n        }\n\n        OS_LogProbe(\"Objects remain after iteration %u: ObjectCount=%u. Calling OS_TaskDelay(5)\", TryCount, ObjectCount);\n        OS_TaskDelay(5);\n    }\n\n    OS_LogProbe(\"OS_DeleteAllObjects: exit (iterations=%u)\", TryCount);\n}\n"
}