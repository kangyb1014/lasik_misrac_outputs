{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete_Impl:\n```c\nint32 OS_CondVarDelete_Impl(const OS_object_token_t *token)\n{\n    int32                              final_status;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    final_status = OS_SUCCESS;\n    impl         = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_cond_destroy(&impl->cv);\n    if (status != 0)\n    {\n        final_status = OS_ERROR;\n    }\n\n    status = pthread_mutex_destroy(&impl->mut);\n    if (status != 0)\n    {\n        final_status = OS_ERROR;\n    }\n\n    return final_status;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CondVarDelete_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The typedef itself does not violate MISRA C 2023 Rule 8.13. Rule 8.13 concerns pointer declarations (they should point to const-qualified types when the pointee is not modified), not the definition of a struct type. In this code the condvar record contains mutable pthread objects and is accessed via non-const pointers when it is modified (e.g. pthread_cond_destroy(&impl->cv)), so no violation. A potential violation scenario would be if a function only read the record but declared the parameter as OS_impl_condvar_internal_record_t *rec instead of const OS_impl_condvar_internal_record_t *rec; in that case the pointer should be to a const-qualified type."
}