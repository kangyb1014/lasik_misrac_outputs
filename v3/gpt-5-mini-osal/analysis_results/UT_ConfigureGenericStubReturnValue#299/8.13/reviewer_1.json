{
  "user_message": "An agent A claimed that the following UT_ConfigureGenericStubReturnValue code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UT_ConfigureGenericStubReturnValue.\n```c\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n        }\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf StubPtr->Data.Rvc.Buf.IndirectPtr is declared as a non-const pointer type (e.g. void *), then assigning the parameter ValuePtr (declared const void *) to it discards the const qualification. This loses the constness of the pointee and therefore violates MISRA C 2023 Rule 8.13. (If IndirectPtr is already declared as const void *, there is no violation.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nUT_ConfigureGenericStubReturnValue | enter | FuncKey=0x5589af6037fa | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=(nil)\nUT_ConfigureGenericStubReturnValue | post-req-type | FuncKey=0x5589af6037fa | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=(nil)\nUT_ConfigureGenericStubReturnValue | after-ensure-stubptr | FuncKey=0x5589af6037fa | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af61af80\nUT_ConfigureGenericStubReturnValue | before-store-retval | FuncKey=0x5589af6037fa | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af61af80\nUT_ConfigureGenericStubReturnValue | after-store-retval | FuncKey=0x5589af6037fa | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af61af80\nUT_ConfigureGenericStubReturnValue | exit | FuncKey=0x5589af6037fa | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=0xffffffffffffffff | StubPtr=0x5589af61af80\nUT_ConfigureGenericStubReturnValue | enter | FuncKey=0x5589af602d7a | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=(nil)\nUT_ConfigureGenericStubReturnValue | post-req-type | FuncKey=0x5589af602d7a | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=(nil)\nUT_ConfigureGenericStubReturnValue | after-ensure-stubptr | FuncKey=0x5589af602d7a | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af621dc0\nUT_ConfigureGenericStubReturnValue | before-store-retval | FuncKey=0x5589af602d7a | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af621dc0\nUT_ConfigureGenericStubReturnValue | after-store-retval | FuncKey=0x5589af602d7a | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af621dc0\nUT_ConfigureGenericStubReturnValue | exit | FuncKey=0x5589af602d7a | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=0xfffffffffffffffa | StubPtr=0x5589af621dc0\nUT_ConfigureGenericStubReturnValue | enter | FuncKey=0x5589af603bc1 | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=(nil)\nUT_ConfigureGenericStubReturnValue | post-req-type | FuncKey=0x5589af603bc1 | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=(nil)\nUT_ConfigureGenericStubReturnValue | after-ensure-stubptr | FuncKey=0x5589af603bc1 | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af619000\nUT_ConfigureGenericStubReturnValue | before-store-retval | FuncKey=0x5589af603bc1 | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af619000\nUT_ConfigureGenericStubReturnValue | after-store-retval | FuncKey=0x5589af603bc1 | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=(nil) | StubPtr=0x5589af619000\nUT_ConfigureGenericStubReturnValue | exit | FuncKey=0x5589af603bc1 | ValuePtr=0x7ffc8d027750 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(null) | IndirectPtr(before/after)=0xffffffffffffffff | StubPtr=0x5589af619000\nUT_ConfigureGenericStubReturnValue | enter | FuncKey=0x5589af602d19 | ValuePtr=0x7ffc8d027740 | ValueSize=8 | ValueGenre=1 | Counter=0 | TypeName=(n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function parameter ValuePtr is declared as const void *. If StubPtr->Data.Rvc.Buf.IndirectPtr is declared as a non-const pointer (for example void *), the assignment StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr discards the const qualification of the pointee. That both violates the intent of MISRA C:2023 Rule 8.13 (pointers should point to const-qualified types whenever possible) and is an unsafe qualifier-discarding conversion (ISO C does not permit implicit conversion from const T * to T *). If IndirectPtr were declared as const void * there would be no violation. The correct remediation is to change IndirectPtr to a pointer to const (e.g. const void *) so the const qualification is preserved; using a cast to silence the qualifier loss would be inappropriate under MISRA."
}