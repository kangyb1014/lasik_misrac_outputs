{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Rvc.Buf.IndirectPtr is declared as a non-const pointer type (e.g. void *), then assigning the parameter ValuePtr (declared const void *) to it discards the const qualification. This loses the constness of the pointee and therefore violates MISRA C 2023 Rule 8.13. (If IndirectPtr is already declared as const void *, there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ConfigureGenericStubReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ConfigureGenericStubReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ConfigureGenericStubReturnValue:\n```c\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_ConfigureGenericStubReturnValue code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Helper logging function: append a single-line record to /tmp/logs/2993.txt\n * Use types that avoid depending on the project's internal typedefs. */\nstatic void UT_LogState(const char *stage, unsigned long long FuncKey_val, const void *ValuePtr,\n                        size_t ValueSize, int ValueGenre_int, int Counter, const char *TypeName,\n                        const void *IndirectPtr, const void *StubPtr)\n{\n    FILE *f = fopen(\"/tmp/logs/2993.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"UT_ConfigureGenericStubReturnValue | %s | FuncKey=0x%llx | ValuePtr=%p | ValueSize=%zu | ValueGenre=%d | Counter=%d | TypeName=%s | IndirectPtr(before/after)=%p | StubPtr=%p\\n\",\n                stage,\n                FuncKey_val,\n                ValuePtr,\n                ValueSize,\n                ValueGenre_int,\n                Counter,\n                (TypeName != NULL) ? TypeName : \"(null)\",\n                IndirectPtr,\n                StubPtr);\n        fclose(f);\n    }\n}\n\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* Log entry into function with initial parameters. Cast FuncKey to unsigned long long for stable printing. */\n    UT_LogState(\"enter\", (unsigned long long)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, NULL, NULL);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    /* Log after deciding ReqEntryType and initial StubPtr lookup */\n    UT_LogState(\"post-req-type\", (unsigned long long)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, NULL, (const void *)StubPtr);\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    /* Log after second attempt to obtain StubPtr */\n    UT_LogState(\"after-ensure-stubptr\", (unsigned long long)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName,\n                /* IndirectPtr unknown yet */ NULL, (const void *)StubPtr);\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* Log immediately before performing the direct pointer assignment. Capture the current IndirectPtr value. */\n            UT_LogState(\"before-opaque-assign\", (unsigned long long)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName,\n                        StubPtr->Data.Rvc.Buf.IndirectPtr, (const void *)StubPtr);\n\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n\n            /* Log immediately after the assignment to show the stored pointer value.\n             * This is the key evidence line for the reported const-discard scenario: it shows that the\n             * pointer value provided as a const void* (ValuePtr) has been stored into IndirectPtr. */\n            UT_LogState(\"after-opaque-assign\", (unsigned long long)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName,\n                        StubPtr->Data.Rvc.Buf.IndirectPtr, (const void *)StubPtr);\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_LogState(\"before-store-retval\", (unsigned long long)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName,\n                        /* IndirectPtr not involved here */ NULL, (const void *)StubPtr);\n\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n\n            /* Log after storing the retval to capture that a copy path was taken */\n            UT_LogState(\"after-store-retval\", (unsigned long long)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName,\n                        /* IndirectPtr not involved here */ NULL, (const void *)StubPtr);\n        }\n    }\n\n    /* Log exit */\n    UT_LogState(\"exit\", (unsigned long long)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName,\n                /* best-effort show IndirectPtr if available */ (StubPtr != NULL) ? StubPtr->Data.Rvc.Buf.IndirectPtr : NULL,\n                (const void *)StubPtr);\n}\n"
}