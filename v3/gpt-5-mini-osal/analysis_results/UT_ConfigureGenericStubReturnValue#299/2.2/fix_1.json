{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    FILE *log = fopen(\"/tmp/logs/2992.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log function entry and key parameters. Cast FuncKey to uintptr_t for printing portability. */\n        fprintf(log, \"ENTER: UT_ConfigureGenericStubReturnValue FuncKey=%\" PRIuPTR \" Counter=%d ValueSize=%zu ValueGenre=%d TypeName=%s\\n\",\n                (uintptr_t)FuncKey, Counter, ValueSize, (int)ValueGenre, (TypeName != NULL) ? TypeName : \"(null)\");\n    }\n\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* First probe: record the initial unused entry returned */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    UT_StubTableEntry_t *InitialStubPtr = StubPtr;\n    if (log != NULL)\n    {\n        fprintf(log, \"Initial UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) returned %p\\n\", (void *)InitialStubPtr);\n    }\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n\n        /* Probe: record that the deferred branch sets StubPtr to NULL */\n        StubPtr      = NULL;\n        if (log != NULL)\n        {\n            fprintf(log, \"Counter > 0 branch: set ReqEntryType=UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED; StubPtr set to NULL (InitialStubPtr=%p)\\n\",\n                    (void *)InitialStubPtr);\n        }\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n\n        /* Probe: record the result of requesting a CONSTANT entry */\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n        if (log != NULL)\n        {\n            fprintf(log, \"Constant branch: UT_GetStubEntry(UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT) returned %p\\n\", (void *)StubPtr);\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"StubPtr is NULL before second unused lookup; calling UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) again\\n\");\n        }\n\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Second UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) returned %p\\n\", (void *)StubPtr);\n\n            if (InitialStubPtr == StubPtr)\n            {\n                fprintf(log, \"Observation: InitialStubPtr (%p) == StubPtr after re-call (%p) -- suggests the assignment 'StubPtr = NULL;' did not change final selection.\\n\",\n                        (void *)InitialStubPtr, (void *)StubPtr);\n            }\n            else\n            {\n                fprintf(log, \"Observation: InitialStubPtr (%p) != StubPtr after re-call (%p) -- the second lookup returned a different entry.\\n\",\n                        (void *)InitialStubPtr, (void *)StubPtr);\n            }\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"ERROR: Cannot configure return value - UT_GetStubEntry returned NULL even after retry.\\n\");\n            fclose(log);\n        }\n\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Configuring stub at %p: FuncKey=%\" PRIuPTR \" ReqEntryType=%d Counter=%d ValueSize=%zu\\n\",\n                    (void *)StubPtr, (uintptr_t)FuncKey, (int)ReqEntryType, (int)Counter, ValueSize);\n        }\n\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n            if (log != NULL)\n            {\n                fprintf(log, \"Stored opaque pointer %p into stub buffer (IndirectPtr).\\n\", ValuePtr);\n            }\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n            if (log != NULL)\n            {\n                fprintf(log, \"Stored retval buffer via UT_StoreRetval.\\n\");\n            }\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Configuration complete for stub %p.\\n\", (void *)StubPtr);\n            fclose(log);\n        }\n    }\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp73t5uq0n/src/ut_assert/src/utstubs.c: In function 'UT_ConfigureGenericStubReturnValue':\n/tmp/tmp73t5uq0n/src/ut_assert/src/utstubs.c:369:75: error: expected ')' before 'PRIuPTR'\n  369 |         fprintf(log, \"ENTER: UT_ConfigureGenericStubReturnValue FuncKey=%\" PRIuPTR \" Counter=%d ValueSize=%zu ValueGenre=%d TypeName=%s\\n\",\n      |                ~                                                          ^~~~~~~~\n      |                                                                           )\n/tmp/tmp73t5uq0n/src/ut_assert/src/utstubs.c:51:1: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   50 | #include \"utbsp.h\"\n  +++ |+#include <inttypes.h>\n   51 | \n/tmp/tmp73t5uq0n/src/ut_assert/src/utstubs.c:453:61: error: expected ')' before 'PRIuPTR'\n  453 |             fprintf(log, \"Configuring stub at %p: FuncKey=%\" PRIuPTR \" ReqEntryType=%d Counter=%d ValueSize=%zu\\n\",\n      |                    ~                                        ^~~~~~~~\n      |                                                             )\n/tmp/tmp73t5uq0n/src/ut_assert/src/utstubs.c:453:62: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  453 |             fprintf(log, \"Configuring stub at %p: FuncKey=%\" PRIuPTR \" ReqEntryType=%d Counter=%d ValueSize=%zu\\n\",\n      |                                                              ^~~~~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:104: ut_assert/CMakeFiles/ut_assert.dir/src/utstubs.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UT_ConfigureGenericStubReturnValue as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Minimal type and prototype definitions so this translation unit compiles\n * while preserving the original function logic. These are intentionally\n * lightweight and only declare what UT_ConfigureGenericStubReturnValue uses. */\n\ntypedef uintptr_t UT_EntryKey_t;\ntypedef int32_t int32;\n\ntypedef enum\n{\n    UT_ENTRYTYPE_UNUSED = 0,\n    UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED = 1,\n    UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT = 2\n} UT_EntryType_t;\n\ntypedef enum\n{\n    UT_ValueGenre_OPAQUE = 0,\n    /* other genres may exist in the real project */\n} UT_ValueGenre_t;\n\ntypedef struct\n{\n    void *IndirectPtr;\n    /* real implementation likely contains additional storage */\n} UT_RetvalBuf_t;\n\ntypedef struct\n{\n    UT_ValueGenre_t Genre;\n    int32 Counter;\n    size_t ActualSz;\n    const char *TypeName;\n    UT_RetvalBuf_t Buf;\n} UT_RetvalConfig_t;\n\ntypedef struct UT_StubTableEntry_s\n{\n    UT_EntryKey_t FuncKey;\n    UT_EntryType_t EntryType;\n    union\n    {\n        UT_RetvalConfig_t Rvc;\n        /* other entry types omitted */\n    } Data;\n} UT_StubTableEntry_t;\n\n/* External functions used by UT_ConfigureGenericStubReturnValue; real\n * definitions live elsewhere in the project. */\nextern UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t Type);\nextern void UT_StoreRetval(void *BufPtr, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre);\nextern void UtAssert_Abort(const char *Message);\n\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    FILE *log = fopen(\"/tmp/logs/2992.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log function entry and key parameters. Cast FuncKey to uintptr_t for printing portability. */\n        fprintf(log, \"ENTER: UT_ConfigureGenericStubReturnValue FuncKey=%\" PRIuPTR \" Counter=%d ValueSize=%zu ValueGenre=%d TypeName=%s\\n\",\n                (uintptr_t)FuncKey, Counter, ValueSize, (int)ValueGenre, (TypeName != NULL) ? TypeName : \"(null)\");\n    }\n\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* First probe: record the initial unused entry returned */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    UT_StubTableEntry_t *InitialStubPtr = StubPtr;\n    if (log != NULL)\n    {\n        fprintf(log, \"Initial UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) returned %p\\n\", (void *)InitialStubPtr);\n    }\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n\n        /* Probe: record that the deferred branch sets StubPtr to NULL */\n        StubPtr      = NULL;\n        if (log != NULL)\n        {\n            fprintf(log, \"Counter > 0 branch: set ReqEntryType=UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED; StubPtr set to NULL (InitialStubPtr=%p)\\n\",\n                    (void *)InitialStubPtr);\n        }\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n\n        /* Probe: record the result of requesting a CONSTANT entry */\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n        if (log != NULL)\n        {\n            fprintf(log, \"Constant branch: UT_GetStubEntry(UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT) returned %p\\n\", (void *)StubPtr);\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"StubPtr is NULL before second unused lookup; calling UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) again\\n\");\n        }\n\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Second UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) returned %p\\n\", (void *)StubPtr);\n\n            if (InitialStubPtr == StubPtr)\n            {\n                fprintf(log, \"Observation: InitialStubPtr (%p) == StubPtr after re-call (%p) -- suggests the assignment 'StubPtr = NULL;' did not change final selection.\\n\",\n                        (void *)InitialStubPtr, (void *)StubPtr);\n            }\n            else\n            {\n                fprintf(log, \"Observation: InitialStubPtr (%p) != StubPtr after re-call (%p) -- the second lookup returned a different entry.\\n\",\n                        (void *)InitialStubPtr, (void *)StubPtr);\n            }\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"ERROR: Cannot configure return value - UT_GetStubEntry returned NULL even after retry.\\n\");\n            fclose(log);\n        }\n\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Configuring stub at %p: FuncKey=%\" PRIuPTR \" ReqEntryType=%d Counter=%d ValueSize=%zu\\n\",\n                    (void *)StubPtr, (uintptr_t)FuncKey, (int)ReqEntryType, (int)Counter, ValueSize);\n        }\n\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = (void *)ValuePtr;\n            if (log != NULL)\n            {\n                fprintf(log, \"Stored opaque pointer %p into stub buffer (IndirectPtr).\\n\", ValuePtr);\n            }\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n            if (log != NULL)\n            {\n                fprintf(log, \"Stored retval buffer via UT_StoreRetval.\\n\");\n            }\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Configuration complete for stub %p.\\n\", (void *)StubPtr);\n            fclose(log);\n        }\n    }\n}\n",
  "explanation": "The compile error was caused by use of the PRIuPTR macro without including <inttypes.h>. I added the necessary standard includes (<inttypes.h>, <stdint.h>, <stddef.h>, <stdio.h>) and provided minimal typedefs and forward declarations for the types and external functions referenced by UT_ConfigureGenericStubReturnValue (e.g. UT_EntryKey_t, UT_StubTableEntry_t, UT_GetStubEntry, UT_StoreRetval, UtAssert_Abort). These additions allow the function to compile unchanged in logic while avoiding adding any mock implementations or a main function."
}