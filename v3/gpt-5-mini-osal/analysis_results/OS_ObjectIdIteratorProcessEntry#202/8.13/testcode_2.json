{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct OS_object_iter_t contains pointer members that are not const-qualified even though they are used only for read access. For example, iter->base is set to &OS_common_table[...] in OS_ObjectIdIteratorInit and is used by the iterator to read table entries; it should be declared as const OS_common_record_t *base to prevent accidental modification. Similarly, iter->arg is a context pointer passed to handlers that are expected to only read it; if the argument is not modified by the handlers it should be declared const void *arg. Declaring these pointers const whenever they are only used for reading would satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorProcessEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorProcessEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorProcessEntry:\n```c\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /*\n     * This needs to temporarily unlock the global,\n     * call the handler function, then re-lock.\n     */\n    OS_Unlock_Global(&iter->token);\n    status = func(OS_ObjectIdFromToken(&iter->token), iter->arg);\n    OS_Lock_Global(&iter->token);\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorProcessEntry code.\n",
  "test_code": "static void OS_ObjectIdIterator_Log(const char *stage, OS_object_iter_t *iter, osal_id_t id, int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/2023.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, iterator pointer, token address, resolved id, arg pointer and status */\n        fprintf(f, \"Stage=%s; iter=%p; token=%p; id=%lu; arg=%p; status=%ld\\n\",\n                stage,\n                (void *)iter,\n                (void *)&iter->token,\n                (unsigned long)id,\n                (void *)iter->arg,\n                (long)status);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n    osal_id_t id = 0u;\n\n    /* Log entry and iterator state before unlocking */\n    OS_ObjectIdIterator_Log(\"before_unlock\", iter, id, 0);\n\n    /*\n     * This needs to temporarily unlock the global,\n     * call the handler function, then re-lock.\n     */\n    OS_Unlock_Global(&iter->token);\n\n    /* Resolve the object id after unlocking (preserve original timing) */\n    id = OS_ObjectIdFromToken(&iter->token);\n\n    /* Log state immediately before calling handler */\n    OS_ObjectIdIterator_Log(\"before_handler_call\", iter, id, 0);\n\n    status = func(id, iter->arg);\n\n    /* Log state immediately after handler returns */\n    OS_ObjectIdIterator_Log(\"after_handler_return\", iter, id, status);\n\n    OS_Lock_Global(&iter->token);\n\n    /* Log state after re-locking */\n    OS_ObjectIdIterator_Log(\"after_relock\", iter, id, status);\n\n    return status;\n}"
}