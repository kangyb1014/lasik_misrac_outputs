{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtList_Destroy:\n```c\nvoid UtList_Destroy(UtListHead_t *ListHead)\n{\n    uint32 i;\n\n    for (i = 0; i < ListHead->NumberOfTags; ++i)\n    {\n        UtList_Reset(&ListHead->Tags[i]);\n    }\n    free(ListHead);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UtList_Destroy:\nvoid UtList_Reset(UtListNode_t *TagHead)\n{\n    while (!UtList_IsEmpty(TagHead))\n    {\n        UtList_DeleteNode(TagHead->Next);\n    }\n}\n...\nvoid UtList_DeleteNode(UtListNode_t *DeleteNode)\n{\n    UtList_Extract(DeleteNode);\n\n    /* non-data/header nodes shouldn't be free()'ed */\n    if (DeleteNode->Data != NULL)\n    {\n        free(DeleteNode);\n    }\n}\n...\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nvoid UtList_Reset(UtListNode_t *TagHead)\n{\n    while (!UtList_IsEmpty(TagHead))\n    {\n        UtList_DeleteNode(TagHead->Next);\n    }\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. UtList_Reset calls UtList_IsEmpty and UtList_DeleteNode; the provided definition of UtList_DeleteNode calls UtList_Extract and free() and does not call UtList_Reset (nor is there any other shown call chain that would lead back to UtList_Reset). Therefore there is no direct or indirect recursive call to UtList_Reset and MISRA C 2023 Rule 17.2 is not violated."
}