{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketSendTo the local variable is declared as:\n\n    OS_stream_internal_record_t *stream;\n\nWithin the shown function the pointer is only used to read members (e.g. stream->socket_type) and is not used to modify the pointee. Therefore the pointer could and should be declared pointing to a const-qualified type (const OS_stream_internal_record_t *stream). As written it does not use const and thus violates MISRA C 2023 Rule 8.13. (If elsewhere in the function or via APIs the pointee is actually modified, then a non-const pointer would be required and no violation would occur.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo:\n```c\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/2513.txt */\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and parameters */\n    OS_LogProbe(\"OS_SocketSendTo ENTRY: sock_id=%llu, buffer=%p, buflen=%llu, RemoteAddr=%p\",\n                (unsigned long long)sock_id, (const void *)buffer, (unsigned long long)buflen, (const void *)RemoteAddr);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_LogProbe(\"OS_ObjectIdGetById returned %d for sock_id=%llu (token_addr=%p)\", return_code, (unsigned long long)sock_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n        OS_LogProbe(\"Resolved stream pointer: %p (token_addr=%p)\", (void *)stream, (void *)&token);\n\n        /* Log the accessed member(s) to provide evidence they are only read */\n        /* stream->socket_type is read to determine datagram vs. other */\n        OS_LogProbe(\"stream->socket_type = %d (checking against OS_SocketType_DATAGRAM=%d)\", (int)stream->socket_type, (int)OS_SocketType_DATAGRAM);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            OS_LogProbe(\"Branch: not DATAGRAM -> returning OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            OS_LogProbe(\"Branch: DATAGRAM -> calling OS_SocketSendTo_Impl\");\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n            OS_LogProbe(\"OS_SocketSendTo_Impl returned %d\", return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_LogProbe(\"OS_ObjectIdRelease called for token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_LogProbe(\"OS_ObjectIdGetById failed with %d, skipping lookup and send\", return_code);\n    }\n\n    OS_LogProbe(\"OS_SocketSendTo EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n"
}