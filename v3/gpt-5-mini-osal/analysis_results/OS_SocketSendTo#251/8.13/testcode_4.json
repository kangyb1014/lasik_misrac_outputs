{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'stream' is declared as a non-const pointer (OS_stream_internal_record_t *stream) but in this function it is only used for reading (e.g. checking stream->socket_type). Therefore the pointer could and should be declared to point to a const-qualified type (const OS_stream_internal_record_t *). The assignment via OS_OBJECT_TABLE_GET therefore results in a non-const pointer where a pointer-to-const would suffice, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo:\n```c\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/2513.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2513.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging cannot be opened, do not interfere with normal operation */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and parameters */\n    OS_ProbeLog(\"OS_SocketSendTo ENTRY: sock_id=%llu, buffer=%p, buflen=%zu, RemoteAddr=%p\",\n                (unsigned long long)(uintptr_t)sock_id,\n                buffer,\n                buflen,\n                (const void *)RemoteAddr);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    OS_ProbeLog(\"OS_SocketSendTo: OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the obtained stream pointer */\n        OS_ProbeLog(\"OS_SocketSendTo: Obtained stream pointer %p\", (const void *)stream);\n\n        /* If stream is non-NULL, log the socket_type value. Do not alter behavior. */\n        if (stream != NULL)\n        {\n            /* socket_type is an enum/int; print as unsigned int for readability */\n            OS_ProbeLog(\"OS_SocketSendTo: stream->socket_type = %u\",\n                        (unsigned int)stream->socket_type);\n        }\n        else\n        {\n            OS_ProbeLog(\"OS_SocketSendTo: stream is NULL (unexpected)\");\n        }\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            OS_ProbeLog(\"OS_SocketSendTo: incorrect object type (not DATAGRAM), setting return_code = OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            OS_ProbeLog(\"OS_SocketSendTo: socket type is DATAGRAM, calling OS_SocketSendTo_Impl\");\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n            OS_ProbeLog(\"OS_SocketSendTo: OS_SocketSendTo_Impl returned %d\", (int)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ProbeLog(\"OS_SocketSendTo: Released token\");\n    }\n\n    OS_ProbeLog(\"OS_SocketSendTo EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}