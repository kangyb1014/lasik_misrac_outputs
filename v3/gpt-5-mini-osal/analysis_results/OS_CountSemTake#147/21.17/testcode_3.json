{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without any checks that both pointers are non-NULL and that both point to valid null-terminated character arrays. If either TypeName or StubPtr->Data.Buff.ContentTypeStr is NULL or not NUL-terminated (for example, if a caller supplies a non-terminated buffer or the stub entry was not properly initialized/was cleared), strcmp may read past the end of the object(s), causing out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake:\n```c\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Modified OS_CountSemTake with logging probes.\n * Logs are appended to /tmp/logs/1479.txt to capture control flow and state.\n * This preserves the original control flow and calls the original implementation.\n */\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Probe: log the result of object id lookup and token location (do not dereference token contents).\n     * Avoid reading potential uninitialized or internal fields of token to prevent introducing new issues.\n     */\n    {\n        FILE *log = fopen(\"/tmp/logs/1479.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"[OS_CountSemTake] enter: sem_id=%llu, OS_ObjectIdGetById_return=%d\\n\",\n                    (unsigned long long)sem_id, (int)return_code);\n            fprintf(log, \"[OS_CountSemTake] token_addr=%p, token_size=%zu\\n\",\n                    (void *)&token, sizeof(token));\n            if (return_code == OS_SUCCESS)\n            {\n                fprintf(log, \"[OS_CountSemTake] OS_ObjectIdGetById succeeded, will call OS_CountSemTake_Impl\\n\");\n            }\n            else\n            {\n                fprintf(log, \"[OS_CountSemTake] OS_ObjectIdGetById failed, skipping OS_CountSemTake_Impl\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTake_Impl(&token);\n\n        /* Probe: log the result returned by the implementation */\n        FILE *log = fopen(\"/tmp/logs/1479.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"[OS_CountSemTake] OS_CountSemTake_Impl returned %d for sem_id=%llu\\n\",\n                    (int)return_code, (unsigned long long)sem_id);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}