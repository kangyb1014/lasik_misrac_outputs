{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via the debug path: OS_printf calls OS_DEBUG(\"BUG: ... %s\", String). If OS_DEBUG is implemented by calling OS_printf (for example as a macro or wrapper that forwards to OS_printf), then the call chain OS_printf -> OS_DEBUG -> OS_printf occurs, which is an indirect self-call and therefore violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2196.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetIdByName:\n```c\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper - writes control flow/state to /tmp/logs/2196.txt */\nstatic void OS_MutSemGetIdByName_Log(const char *stage, const void *sem_id_ptr, const char *sem_name, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2196.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Do not assume sem_name is non-NULL */\n        fprintf(f, \"OS_MutSemGetIdByName: stage=%s, sem_id_ptr=%p, sem_name=%s, return_code=%d\\n\",\n                stage,\n                sem_id_ptr,\n                (sem_name != NULL) ? sem_name : \"<NULL>\",\n                return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code = -1;\n\n    /* Log entry before parameter checks to capture the call even if a check triggers debug output. */\n    OS_MutSemGetIdByName_Log(\"entry\", (const void *)sem_id, sem_name, return_code);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    /* Log just before the lookup call */\n    OS_MutSemGetIdByName_Log(\"before_OS_ObjectIdFindByName\", (const void *)sem_id, sem_name, return_code);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    /* Log after the lookup with the returned code and the resulting sem_id value */\n    OS_MutSemGetIdByName_Log(\"after_OS_ObjectIdFindByName\", (const void *)sem_id, sem_name, return_code);\n\n    return return_code;\n}\n"
}