{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtList_Merge:\n```c\nvoid UtList_Merge(UtListNode_t *TagHead1, UtListNode_t *TagHead2)\n{\n    UtListNode_t *Tail1 = TagHead1->Prev;\n    UtListNode_t *Tail2 = TagHead2->Prev;\n\n    Tail1->Next    = TagHead2;\n    Tail2->Next    = TagHead1;\n    TagHead1->Prev = Tail2;\n    TagHead2->Prev = Tail1;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n    TagHead2->Prev = Tail1;\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The statement TagHead2->Prev = Tail1 modifies the object pointed to by the parameter TagHead2 (its Prev member), not the pointer parameter itself. Rule 17.8 allows modifying the object referred to by a pointer parameter but forbids modifying the pointer variable (e.g. reassigning TagHead2). Therefore this fragment does not violate MISRA C 2023 Rule 17.8."
}