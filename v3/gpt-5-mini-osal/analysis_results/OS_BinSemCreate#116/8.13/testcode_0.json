{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away const: OS_ObjectIdFindNextMatch has a parameter of type void * (non-const), but the variable name is const char *name. The code does (void *)name which removes the const qualifier from the pointer. This discards const and therefore violates MISRA C 2023 Rule 8.13. A compliant fix is to change the callee to take a const void * (or otherwise preserve const) and remove the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Helper: append a log entry recording the current state. */\n    static void os_binsem_log(const char *stage, const osal_id_t *id, const char *name, uint32 init_val, uint32 opts, int32 rc, const void *token_ptr)\n    {\n        FILE *f = fopen(\"/tmp/logs/1163.txt\", \"a\");\n        if (f != NULL)\n        {\n            /* Write a compact single-line record for easy parsing by other agents. */\n            fprintf(f, \"stage=%s sem_id_ptr=%p sem_name=%s sem_initial_value=%u options=%u return_code=%d token_ptr=%p\\n\",\n                    stage,\n                    (const void *)id,\n                    (name != NULL) ? name : \"(null)\",\n                    (unsigned)init_val,\n                    (unsigned)opts,\n                    (int)rc,\n                    token_ptr);\n            fclose(f);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Log: parameters validated */\n    os_binsem_log(\"params_validated\", sem_id, sem_name, sem_initial_value, options, -1, NULL);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    os_binsem_log(\"before_allocate\", sem_id, sem_name, sem_initial_value, options, -1, NULL);\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    os_binsem_log(\"after_allocate\", sem_id, sem_name, sem_initial_value, options, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        os_binsem_log(\"before_impl\", sem_id, sem_name, sem_initial_value, options, -1, &token);\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n        os_binsem_log(\"after_impl\", sem_id, sem_name, sem_initial_value, options, return_code, &token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        os_binsem_log(\"after_finalize\", sem_id, sem_name, sem_initial_value, options, return_code, &token);\n    }\n    else\n    {\n        /* Log allocation failure path */\n        os_binsem_log(\"allocate_failed\", sem_id, sem_name, sem_initial_value, options, return_code, &token);\n    }\n\n    /* Final log before return */\n    os_binsem_log(\"return\", sem_id, sem_name, sem_initial_value, options, return_code, &token);\n\n    return return_code;\n}\n"
}