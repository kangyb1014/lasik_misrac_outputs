{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_OBJECT_INIT(token, binsem, obj_name, sem_name) likely copies the string sem_name into a fixed-size field binsem->obj_name. If the macro expands to an unchecked string copy (for example strcpy, or memcpy using strlen(sem_name)) and sem_name is longer than the destination array, this will write beyond the bounds of binsem->obj_name and thus violate MISRA C 2023 Rule 21.17. (If, instead, the macro performs a bounded copy that ensures no more than the destination size bytes are written and guarantees NUL termination, then the rule would not be violated.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1169.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helpers to log control flow and state for the potential string-copy issue. */\nstatic size_t safe_strnlen(const char *s, size_t maxlen)\n{\n    size_t i = 0U;\n    if (s == NULL)\n    {\n        return 0U;\n    }\n    while ((i < maxlen) && (s[i] != '\\0'))\n    {\n        ++i;\n    }\n    return i;\n}\n\nstatic void hex_dump_bytes(const void *ptr, size_t len, FILE *f)\n{\n    const unsigned char *p = (const unsigned char *)ptr;\n    size_t i;\n    for (i = 0U; i < len; ++i)\n    {\n        fprintf(f, \"%02X\", p[i]);\n        if ((i + 1U) < len)\n            fprintf(f, \" \");\n    }\n}\n\nstatic void os_log_open_and_write(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\n/* Granular logging function that appends to the log file and tries to avoid\n   any unbounded string operations on unknown-size buffers. */\nstatic void os_log_state_before_init(const char *sem_name, uint32_t sem_initial_value, uint32_t options)\n{\n    FILE *f = fopen(\"/tmp/logs/1169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_BinSemCreate] Entered. sem_name=%p\\n\", (const void *)sem_name);\n    if (sem_name != NULL)\n    {\n        /* Use strlen carefully after null check */\n        size_t name_len = strlen(sem_name);\n        fprintf(f, \"[OS_BinSemCreate] sem_name (len=%zu)='%s'\\n\", name_len, sem_name);\n    }\n    else\n    {\n        fprintf(f, \"[OS_BinSemCreate] sem_name is NULL\\n\");\n    }\n\n    fprintf(f, \"[OS_BinSemCreate] sem_initial_value=%u, options=%u\\n\", (unsigned)sem_initial_value, (unsigned)options);\n    fclose(f);\n}\n\nstatic void os_log_after_allocate(int32_t return_code, const void *token_ptr, size_t token_size)\n{\n    FILE *f = fopen(\"/tmp/logs/1169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_BinSemCreate] After OS_ObjectIdAllocateNew: return_code=%ld\\n\", (long)return_code);\n    fprintf(f, \"[OS_BinSemCreate] token at %p, size=%zu\\n\", token_ptr, token_size);\n    if (token_ptr != NULL && token_size > 0U)\n    {\n        size_t dump_len = token_size;\n        if (dump_len > 64U)\n            dump_len = 64U;\n        fprintf(f, \"[OS_BinSemCreate] token bytes (first %zu): \", dump_len);\n        hex_dump_bytes(token_ptr, dump_len, f);\n        fprintf(f, \"\\n\");\n    }\n    fclose(f);\n}\n\nstatic void os_log_before_object_init(const char *sem_name, const void *binsem_ptr, size_t dest_size)\n{\n    FILE *f = fopen(\"/tmp/logs/1169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_BinSemCreate] About to initialize object at %p\\n\", binsem_ptr);\n    fprintf(f, \"[OS_BinSemCreate] Destination field size (bytes) = %zu\\n\", dest_size);\n    if (sem_name != NULL)\n    {\n        size_t src_len = strlen(sem_name);\n        fprintf(f, \"[OS_BinSemCreate] Source name length = %zu\\n\", src_len);\n        if (src_len >= dest_size)\n        {\n            fprintf(f, \"[OS_BinSemCreate] WARNING: source length >= destination size -> potential overflow\\n\");\n        }\n    }\n    else\n    {\n        fprintf(f, \"[OS_BinSemCreate] sem_name is NULL before init\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic void os_log_after_object_init(const void *binsem_ptr, const char *obj_name_field, size_t dest_size)\n{\n    FILE *f = fopen(\"/tmp/logs/1169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_BinSemCreate] After OS_OBJECT_INIT for object at %p\\n\", binsem_ptr);\n    if (obj_name_field != NULL && dest_size > 0U)\n    {\n        size_t copied = safe_strnlen(obj_name_field, dest_size);\n        fprintf(f, \"[OS_BinSemCreate] obj_name_field (copied_len=%zu): '%.*s'\\n\", copied, (int)((copied > 0U) ? copied : 0), obj_name_field);\n        fprintf(f, \"[OS_BinSemCreate] obj_name_field bytes (up to %zu): \", dest_size);\n        /* Print bytes up to dest_size or a reasonable cap */\n        {\n            size_t dump = dest_size;\n            if (dump > 64U)\n                dump = 64U;\n            hex_dump_bytes(obj_name_field, dump, f);\n            fprintf(f, \"\\n\");\n        }\n    }\n    else\n    {\n        fprintf(f, \"[OS_BinSemCreate] obj_name_field is NULL or dest_size==0\\n\");\n    }\n\n    fclose(f);\n}\n\n/* The original function with inserted probes. Logic and flow preserved. */\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Log entry state after parameter checks */\n    os_log_state_before_init(sem_name, sem_initial_value, options);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log outcome of allocation and token bytes if available */\n    os_log_after_allocate(return_code, (const void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        /* Probe destination size if possible, then call original macro */\n        {\n            size_t dest_size = 0U;\n\n            /* Attempt to determine size of the obj_name field; if it doesn't exist or is a pointer,\n               sizeof will still produce a compile-time result consistent with the type. */\n            dest_size = sizeof(binsem->obj_name);\n\n            os_log_before_object_init(sem_name, (const void *)binsem, dest_size);\n\n            /* Original call preserved */\n            OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n            /* After init, examine what was written into obj_name up to dest_size */\n            os_log_after_object_init((const void *)binsem, binsem->obj_name, dest_size);\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Log final return code */\n        {\n            char msg[128];\n            (void)snprintf(msg, sizeof(msg), \"[OS_BinSemCreate] Final return_code=%ld\", (long)return_code);\n            os_log_open_and_write(msg);\n        }\n    }\n\n    return return_code;\n}\n"
}