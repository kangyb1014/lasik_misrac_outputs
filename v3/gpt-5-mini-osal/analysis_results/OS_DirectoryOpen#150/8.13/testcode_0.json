{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a const-qualified pointer to a non-const void* when calling OS_ObjectIdFindNextMatch: (void *)name where name has type const char *. This discards the const qualifier and produces a non-const pointer to data that is originally const, violating the requirement that pointers should point to const-qualified types whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryOpen code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append structured logs to /tmp/logs/1503.txt.\n * Uses only const-qualified pointer casts when printing pointer values to avoid\n * discarding const qualifiers at runtime.\n */\nstatic void OS_DirOpen_ProbeLog(const char *stage,\n                                const char *path,\n                                const char *local_path,\n                                const void *token_ptr,\n                                long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1503.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    fprintf(f, \"OS_DirectoryOpen - %s\\n\", stage);\n    if (path != NULL)\n    {\n        fprintf(f, \"  path ptr=%p\\n\", (const void *)path);\n        fprintf(f, \"  path value='%s'\\n\", path);\n    }\n    else\n    {\n        fprintf(f, \"  path ptr=(null)\\n\");\n    }\n\n    if (local_path != NULL)\n    {\n        fprintf(f, \"  local_path='%s'\\n\", local_path);\n    }\n    else\n    {\n        fprintf(f, \"  local_path=(not available)\\n\");\n    }\n\n    if (token_ptr != NULL)\n    {\n        fprintf(f, \"  token ptr=%p\\n\", token_ptr);\n    }\n    else\n    {\n        fprintf(f, \"  token ptr=(not allocated)\\n\");\n    }\n\n    fprintf(f, \"  return_code=%ld\\n\", return_code);\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* ENTRY probe: record incoming path pointer and value */\n    OS_DirOpen_ProbeLog(\"entry\", path, NULL, NULL, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of path translation and contents of local_path */\n    OS_DirOpen_ProbeLog(\"after TranslatePath\", path, local_path, NULL, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        /* Log allocation attempt and token address (if any) */\n        OS_DirOpen_ProbeLog(\"after ObjectIdAllocateNew\", path, local_path, &token, (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            /* Probe just before initializing object table entry with the name pointer. */\n            OS_DirOpen_ProbeLog(\"before OS_OBJECT_INIT (name save)\", path, local_path, &token, (long)return_code);\n\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Log post-implementation state: token, local_path and result. */\n            OS_DirOpen_ProbeLog(\"after OS_DirOpen_Impl\", path, local_path, &token, (long)return_code);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n\n            /* Finalize probe: include the dir_id pointer (if available) and final return code. */\n            OS_DirOpen_ProbeLog(\"after ObjectIdFinalizeNew\", path, local_path, dir_id, (long)return_code);\n        }\n    }\n\n    /* Exit probe: final return value */\n    OS_DirOpen_ProbeLog(\"exit\", path, local_path, dir_id, (long)return_code);\n\n    return return_code;\n}\n"
}