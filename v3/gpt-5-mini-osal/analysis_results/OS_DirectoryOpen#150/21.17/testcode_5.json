{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen is implemented as memchr(s, 0, maxlen) which reads up to maxlen bytes from the pointer. The call VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN); therefore allows memchr to read OS_MAX_PATH_LEN bytes from VirtualPath. OS_CHECK_POINTER only verifies the pointer is non-NULL, not that the underlying object is at least OS_MAX_PATH_LEN bytes long. If a caller supplies a shorter buffer (for example: char small[8] = \"foo\"; and passes small as VirtualPath while OS_MAX_PATH_LEN is 64), memchr will read past the end of small, causing an out-of-bounds access. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1509.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe/log helper - appends human readable trace information to the log file.\n * This function intentionally avoids dereferencing the caller-supplied `path`\n * pointer (except to print its address) to avoid introducing new out-of-bounds\n * reads. It will print the contents of local_path only when the caller\n * indicates the translate step succeeded (so local_path is expected to be\n * initialized by OS_TranslatePath).\n */\nstatic void OS_DirOpen_Probe(const char *stage,\n                             const void *dir_id_ptr,\n                             const void *path_ptr,\n                             size_t requested_maxlen,\n                             int return_code,\n                             const char *local_path,\n                             size_t local_path_buflen)\n{\n    FILE *f = fopen(\"/tmp/logs/1509.txt\", \"a\");\n    if (!f)\n    {\n        return; /* best effort logging only */\n    }\n\n    fprintf(f, \"[OS_DirectoryOpen] stage=%s dir_id=%p path=%p requested_maxlen=%zu return_code=%d\\n\",\n            stage, dir_id_ptr, path_ptr, requested_maxlen, return_code);\n\n    /* If local_path is provided and return_code indicates success, print it safely.\n     * We print up to local_path_buflen-1 characters and guarantee a trailing NUL in the\n     * logged output by printing as a sequence of bytes (escaped as hex) and also attempting\n     * a bounded string print when safe.\n     */\n    if (local_path != NULL && local_path_buflen > 0 && return_code == 0)\n    {\n        /* bounded string print (best-effort) */\n        size_t i;\n        fprintf(f, \"[OS_DirectoryOpen] local_path_bytes=\");\n        for (i = 0; i < local_path_buflen; ++i)\n        {\n            unsigned char c = (unsigned char)local_path[i];\n            /* stop if encountered NUL - safe because we are iterating only up to local_path_buflen */\n            if (c == '\\0')\n            {\n                fprintf(f, \"00\");\n                break;\n            }\n            fprintf(f, \"%02x\", c);\n        }\n        fprintf(f, \"\\n\");\n\n        /* also attempt a safe truncated ASCII print if there is a NUL within the buffer */\n        for (i = 0; i < local_path_buflen; ++i)\n        {\n            if (local_path[i] == '\\0')\n            {\n                fprintf(f, \"[OS_DirectoryOpen] local_path_str=%s\\n\", local_path);\n                break;\n            }\n        }\n    }\n\n    fclose(f);\n}\n\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Log entry with pointers and requested max length used by other callers. */\n    OS_DirOpen_Probe(\"entry\", (const void *)dir_id, (const void *)path, (size_t)OS_MAX_PATH_LEN, -1, NULL, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translate and the local_path buffer (if translate succeeded) */\n    OS_DirOpen_Probe(\"after_translate\", (const void *)dir_id, (const void *)path, (size_t)OS_MAX_PATH_LEN, return_code, (return_code == OS_SUCCESS) ? local_path : NULL, OS_MAX_LOCAL_PATH_LEN);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        OS_DirOpen_Probe(\"after_allocate\", (const void *)dir_id, (const void *)path, (size_t)OS_MAX_PATH_LEN, return_code, local_path, OS_MAX_LOCAL_PATH_LEN);\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Log just before calling the OS-specific implementation. This is where\n             * code paths that use functions like strnlen/memchr with OS_MAX_PATH_LEN\n             * would operate on the supplied path/virtual path. We capture the pointers\n             * and the local_path contents to help reproduce out-of-bounds reads. */\n            OS_DirOpen_Probe(\"before_impl\", (const void *)dir_id, (const void *)path, (size_t)OS_MAX_PATH_LEN, return_code, local_path, OS_MAX_LOCAL_PATH_LEN);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            OS_DirOpen_Probe(\"after_impl\", (const void *)dir_id, (const void *)path, (size_t)OS_MAX_PATH_LEN, return_code, local_path, OS_MAX_LOCAL_PATH_LEN);\n\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n\n            OS_DirOpen_Probe(\"after_finalize\", (const void *)dir_id, (const void *)path, (size_t)OS_MAX_PATH_LEN, return_code, local_path, OS_MAX_LOCAL_PATH_LEN);\n        }\n    }\n\n    return return_code;\n}\n"
}