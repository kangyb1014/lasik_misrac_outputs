{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the OS_DEBUG facility invoked inside OS_printf is implemented by calling OS_printf (e.g. OS_DEBUG -> OS_printf), then calling OS_printf when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER will cause an indirect recursive call chain: OS_printf -> OS_DEBUG -> OS_printf. This constitutes indirect recursion and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1506.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stdint.h>\n\n/*\n * Probe logging utilities. These are lightweight append-only logs to a file\n * so that other agents can observe the control flow and key state values\n * inside OS_DirectoryOpen without invoking OSAL facilities that might\n * themselves call OS_printf (and potentially trigger the reported\n * indirect recursion).\n *\n * The functions intentionally use plain stdio calls (fopen/fprintf/fclose)\n * to reduce dependency on OSAL logging paths.\n */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1506.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If the log file cannot be opened, silently return to avoid\n         * disturbing the normal control flow of the target function.\n         */\n        return;\n    }\n\n    /* Timestamp and process id (if available) to help ordering events. */\n    time_t t = time(NULL);\n    fprintf(fp, \"[%ld] \", (long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* A convenience wrapper to print a C string safely (handles NULL). */\nstatic const char *probe_safe_str(const char *s)\n{\n    return (s != NULL) ? s : \"(null)\";\n}\n\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Entry log */\n    probe_logf(\"ENTER OS_DirectoryOpen: dir_id=%p, path='%s'\",\n               (void *)dir_id, probe_safe_str(path));\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    probe_logf(\"After OS_TranslatePath: return_code=%ld, local_path='%s'\",\n               (long)return_code, probe_safe_str(local_path));\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        probe_logf(\"After OS_ObjectIdAllocateNew: return_code=%ld\", (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n            probe_logf(\"OS_OBJECT_TABLE_GET -> dir pointer=%p\", (void *)dir);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n            probe_logf(\"After OS_OBJECT_INIT: saved dir_name='%s'\", probe_safe_str(path));\n\n            /* Now call the OS-specific implementation.  */\n            probe_logf(\"Calling OS_DirOpen_Impl with local_path='%s'\", probe_safe_str(local_path));\n            return_code = OS_DirOpen_Impl(&token, local_path);\n            probe_logf(\"After OS_DirOpen_Impl: return_code=%ld\", (long)return_code);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n            probe_logf(\"After OS_ObjectIdFinalizeNew: return_code=%ld, dir_id(out)=%p\",\n                       (long)return_code, (void *)(dir_id ? *dir_id : 0));\n        }\n        else\n        {\n            probe_logf(\"OS_ObjectIdAllocateNew failed, skipping allocation finalization\");\n        }\n    }\n    else\n    {\n        probe_logf(\"OS_TranslatePath failed, not attempting allocation or impl call\");\n    }\n\n    probe_logf(\"EXIT OS_DirectoryOpen: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}