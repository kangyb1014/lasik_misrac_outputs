{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdFinalizeDelete calls OS_NotifyEvent, which invokes the application EventHandler via OS_SharedGlobalVars.EventHandler. If that handler calls back into the OS API (for example OS_TimeBaseDelete or OS_TimerDelete), the call chain can be: OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> EventHandler -> OS_TimeBaseDelete -> OS_ObjectIdGetById -> ... -> OS_ObjectIdFinalizeDelete. This causes OS_ObjectIdFinalizeDelete to be invoked indirectly by itself, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2736.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerDelete:\n```c\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        OS_TimeBaseDelete(dedicated_timebase_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <unistd.h>\n\n/* Probe logging helper: append timestamped messages to /tmp/logs/2736.txt */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2736.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm = localtime_r(&t, &tm_buf);\n    if (tm != NULL)\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] pid=%d: \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec,\n                (int)getpid());\n    }\n    else\n    {\n        fprintf(f, \"[unknown-time] pid=%d: \", (int)getpid());\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    /* Log entry and initial state */\n    os_log_probe(\"Enter OS_TimerDelete: timer_id=%lu\", (unsigned long)timer_id);\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    os_log_probe(\"Context check: current objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        os_log_probe(\"Abort: called from timebase callback context\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    os_log_probe(\"OS_ObjectIdGetById returned %d for timer_id=%lu; timecb_token_ptr=%p\", return_code, (unsigned long)timer_id, (void *)&timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        os_log_probe(\"Located timecb=%p, timebase=%p, timecb->flags=0x%08x\", (void *)timecb, (void *)timebase, (unsigned int)timecb->flags);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n        os_log_probe(\"Transferred timebase token: timecb->timebase_token_ptr=%p, timebase_token_ptr=%p\", (void *)&timecb->timebase_token, (void *)&timebase_token);\n\n        os_log_probe(\"Locking timebase (token_ptr=%p)\", (void *)&timecb->timebase_token);\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n        os_log_probe(\"Timebase locked (token_ptr=%p)\", (void *)&timecb->timebase_token);\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n            os_log_probe(\"Timer uses dedicated timebase: dedicated_timebase_id=%lu\", (unsigned long)dedicated_timebase_id);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        os_log_probe(\"Ring before removal: timebase->first_cb=%lu, timecb_token_id=%lu, timecb->next_cb=%lu\", (unsigned long)timebase->first_cb, (unsigned long)OS_ObjectIdFromToken(&timecb_token), (unsigned long)timecb->next_cb);\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n                os_log_probe(\"Removed only callback: set timebase->first_cb=UNDEFINED\");\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n                os_log_probe(\"Removed head callback: set timebase->first_cb=%lu\", (unsigned long)timebase->first_cb);\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n            os_log_probe(\"Patched prev callback (id=%lu) next_cb=%lu\", (unsigned long)timecb->prev_cb, (unsigned long)list_timecb->next_cb);\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n            os_log_probe(\"Patched next callback (id=%lu) prev_cb=%lu\", (unsigned long)timecb->next_cb, (unsigned long)list_timecb->prev_cb);\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        os_log_probe(\"Reinitialized removed timecb links to self: next_cb=%lu, prev_cb=%lu\", (unsigned long)timecb->next_cb, (unsigned long)timecb->prev_cb);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n        os_log_probe(\"Timebase unlocked (token_ptr=%p)\", (void *)&timecb->timebase_token);\n\n        /* Complete the operation via the common routine */\n        os_log_probe(\"Calling OS_ObjectIdFinalizeDelete for timecb_token_ptr=%p\", (void *)&timecb_token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n        os_log_probe(\"OS_ObjectIdFinalizeDelete returned %d\", return_code);\n    }\n    else\n    {\n        os_log_probe(\"OS_ObjectIdGetById failed, skipping delete steps. return_code=%d\", return_code);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    os_log_probe(\"Releasing timebase token (token_ptr=%p)\", (void *)&timebase_token);\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        os_log_probe(\"About to delete dedicated timebase id=%lu\", (unsigned long)dedicated_timebase_id);\n        OS_TimeBaseDelete(dedicated_timebase_id);\n        os_log_probe(\"Returned from OS_TimeBaseDelete dedicated id=%lu\", (unsigned long)dedicated_timebase_id);\n    }\n\n    os_log_probe(\"Exit OS_TimerDelete: return_code=%d\", return_code);\n    return return_code;\n}\n"
}