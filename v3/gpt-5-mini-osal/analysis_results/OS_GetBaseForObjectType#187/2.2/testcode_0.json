{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. In OS_ObjectIdFindNextFree when max_id == 0 the code sets serial = 0 but execution never uses that value (the subsequent for-loop is skipped because max_id is 0 and no code path reads serial before function returns an error). The assignment serial = 0 therefore is an operation whose removal would not affect program behaviour and is dead code, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetBaseForObjectType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1872.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetBaseForObjectType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetBaseForObjectType:\n```c\nuint32 OS_GetBaseForObjectType(osal_objtype_t idtype)\n{\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return OS_TASK_BASE;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return OS_QUEUE_BASE;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return OS_BINSEM_BASE;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return OS_COUNTSEM_BASE;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return OS_MUTEX_BASE;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return OS_STREAM_BASE;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return OS_DIR_BASE;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return OS_TIMEBASE_BASE;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            return OS_TIMECB_BASE;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return OS_MODULE_BASE;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return OS_FILESYS_BASE;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            return OS_CONSOLE_BASE;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return OS_CONDVAR_BASE;\n        default:\n            return 0;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_GetBaseForObjectType code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging function: logs the input idtype and the computed base value to a file.\n * This preserves the original behavior of OS_GetBaseForObjectType while providing\n * control-flow/state information for debugging. */\nstatic void OS_GetBaseForObjectType_Log(osal_objtype_t idtype, uint32 result)\n{\n    FILE *f = fopen(\"/tmp/logs/1872.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Cast to unsigned long for portable printing of unknown typedefs in this context */\n        (void)fprintf(f, \"OS_GetBaseForObjectType: idtype=%lu result=0x%08lx\\n\",\n                      (unsigned long)idtype, (unsigned long)result);\n        (void)fclose(f);\n    }\n}\n\nuint32 OS_GetBaseForObjectType(osal_objtype_t idtype)\n{\n    uint32 result = 0;\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            result = OS_TASK_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            result = OS_QUEUE_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            result = OS_BINSEM_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            result = OS_COUNTSEM_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            result = OS_MUTEX_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            result = OS_STREAM_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            result = OS_DIR_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            result = OS_TIMEBASE_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            result = OS_TIMECB_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            result = OS_MODULE_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            result = OS_FILESYS_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            result = OS_CONSOLE_BASE;\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            result = OS_CONDVAR_BASE;\n            break;\n        default:\n            result = 0;\n            break;\n    }\n\n    /* Log the control path and the computed base before returning. */\n    OS_GetBaseForObjectType_Log(idtype, result);\n\n    return result;\n}\n"
}