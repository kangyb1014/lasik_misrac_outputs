{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds read of the source string: strncpy is called with n = sizeof(UtTestDataBaseEntry.TestName) - 1. If the caller supplies TestName that is not properly null-terminated or whose allocated length is < n, strncpy may read up to n bytes from TestName and therefore read beyond the bounds of the source object. (The destination is safe because the struct was zeroed beforehand, but the source can be over-read.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3249.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddCommon code.\n",
  "test_code": "void UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    /* Logging helpers: declare prototypes to avoid depending on includes in this file. */\n    extern FILE *fopen(const char *, const char *);\n    extern int fprintf(FILE *, const char *, ...);\n    extern int fclose(FILE *);\n\n    FILE *log = NULL;\n\n    /* Log entry and state before zeroing/copying */\n    log = fopen(\"/tmp/logs/3249.txt\", \"a\");\n    if (log != NULL)\n    {\n        (void)fprintf(log, \"ENTER UtTest_AddCommon: stack_entry_addr=%p, Test_ptr=%p, EntryType=%u\\n\",\n                      (void *)&UtTestDataBaseEntry, (void *)Test, (unsigned)EntryType);\n        (void)fprintf(log, \"  TestName param pointer=%p\\n\", (void *)TestName);\n        (void)fclose(log);\n        log = NULL;\n    }\n\n    /* Preserve original initialization logic */\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n\n    if (TestName != NULL)\n    {\n        /* Prepare to log intended copy size and result. Do not change the strncpy call. */\n        size_t n = sizeof(UtTestDataBaseEntry.TestName) - 1U;\n\n        log = fopen(\"/tmp/logs/3249.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"  About to call strncpy: dest_addr=%p, src_ptr=%p, n=%u\\n\",\n                          (void *)UtTestDataBaseEntry.TestName, (void *)TestName, (unsigned)n);\n            (void)fclose(log);\n            log = NULL;\n        }\n\n        /* Original (potentially problematic) call retained exactly as before */\n        strncpy(UtTestDataBaseEntry.TestName, TestName, n);\n\n        /* After strncpy, log the contents of the destination buffer (safe: inside local object) */\n        log = fopen(\"/tmp/logs/3249.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"  After strncpy: dest_addr=%p, dumped up to %u bytes:\\n\",\n                          (void *)UtTestDataBaseEntry.TestName, (unsigned)n);\n\n            /* Hex dump of the copied bytes (safe: reading inside local object) */\n            for (size_t i = 0U; i < n; ++i)\n            {\n                (void)fprintf(log, \"%02x \", (unsigned int)(unsigned char)UtTestDataBaseEntry.TestName[i]);\n            }\n            (void)fprintf(log, \"\\n\");\n\n            /* Provide a readable representation up to the first null (or up to n) */\n            (void)fprintf(log, \"  As string (up to %u bytes): '\", (unsigned)n);\n            int null_found = 0;\n            for (size_t i = 0U; i < n; ++i)\n            {\n                unsigned char c = (unsigned char)UtTestDataBaseEntry.TestName[i];\n                if (c == '\\0')\n                {\n                    null_found = 1;\n                    (void)fprintf(log, \"\\\\0\");\n                    break;\n                }\n                /* Print printable ASCII chars; otherwise show hex escape */\n                if ((c >= 0x20U) && (c <= 0x7EU))\n                {\n                    (void)fprintf(log, \"%c\", (int)c);\n                }\n                else\n                {\n                    (void)fprintf(log, \"\\\\x%02x\", (unsigned int)c);\n                }\n            }\n            if (!null_found)\n            {\n                (void)fprintf(log, \" (no null within first %u bytes)\", (unsigned)n);\n            }\n            (void)fprintf(log, \"'\\n\");\n\n            /* Report whether a null terminator was present within the first n bytes of the destination.\n               If not, strncpy copied n bytes and did not null-terminate the destination \u2014 this indicates\n               that the source either was not null-terminated within n bytes or that strncpy read beyond the\n               source's bounds to obtain n bytes. This log is evidence for the reported scenario. */\n            (void)fprintf(log, \"  Null terminator within first %u bytes of dest: %s\\n\",\n                          (unsigned)n, (null_found ? \"YES\" : \"NO\"));\n\n            (void)fclose(log);\n            log = NULL;\n        }\n    }\n\n    /* Preserve original critical section logic */\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n"
}