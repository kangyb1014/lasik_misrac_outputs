{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'record' is only used for read-only access (record->active_id) and passed to a matcher function; it could be declared as const OS_common_record_t *record. Declaring it as a non-const pointer when no modification is performed violates MISRA C 2023 Rule 8.13, which requires pointers to point to const-qualified types whenever possible. (If, however, OS_OBJECT_TABLE_GET or iter->match require a non-const pointer, making it const may be infeasible.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2003.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe logging helper: append a single formatted line to the log file. */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2003.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fclose(f);\n}\n\n/* Structured state logger for the iterator. Do not change program logic by logging. */\nstatic void os_log_iterator_state(const OS_object_iter_t *iter,\n                                  OS_common_record_t *record,\n                                  bool match_was_null,\n                                  bool match_result,\n                                  const char *stage)\n{\n    /* Log key integer fields as signed long for portability, and pointers as %p. */\n    long idx = (long)iter->token.obj_idx;\n    long lim = (long)iter->limit;\n    long objid = (long)iter->token.obj_id;\n    long active = (record != NULL) ? (long)record->active_id : -1L;\n\n    os_probe_log(\"%s: stage=%s obj_idx=%ld limit=%ld obj_id=%ld record=%p active_id=%ld match_null=%d match_res=%d\\n\",\n                 __func__, stage, idx, lim, objid, (void *)record, active, match_was_null ? 1 : 0, match_result ? 1 : 0);\n}\n\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n    bool                match_result;\n    bool                match_was_null;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log initial state before entering the loop. */\n    os_log_iterator_state(iter, NULL, /*match_was_null*/(iter->match == NULL), /*match_result*/false, \"enter\");\n\n    do\n    {\n        ++iter->token.obj_idx;\n        os_log_iterator_state(iter, NULL, (iter->match == NULL), false, \"after_increment\");\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            os_log_iterator_state(iter, NULL, (iter->match == NULL), false, \"limit_reached\");\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        os_log_iterator_state(iter, record, (iter->match == NULL), false, \"got_record_before_match\");\n\n        match_was_null = (iter->match == NULL);\n        if (match_was_null)\n        {\n            /* Match is considered true when NULL (keeps original semantics: || short-circuit). */\n            match_result = true;\n            os_log_iterator_state(iter, record, match_was_null, match_result, \"match_null_taken\");\n        }\n        else\n        {\n            /* Call the matcher exactly once, preserving original behavior. */\n            match_result = iter->match(iter->arg, &iter->token, record);\n            os_log_iterator_state(iter, record, match_was_null, match_result, \"match_called\");\n        }\n\n        if (match_result)\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n            os_log_iterator_state(iter, record, match_was_null, match_result, \"accepted\");\n        }\n    } while (!got_next);\n\n    os_log_iterator_state(iter, (got_next ? OS_OBJECT_TABLE_GET(iter->base, iter->token) : NULL), (iter->match == NULL), got_next, \"exit\");\n\n    return got_next;\n}\n"
}