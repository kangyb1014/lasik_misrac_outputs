{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as a mutable pointer (OS_common_record_t *record) but in this function it is only dereferenced for reading (record->active_id) and passed to iter->match for inspection. If neither OS_OBJECT_TABLE_GET nor iter->match need to modify the pointed-to record, the pointer should be declared to point to a const-qualified type (const OS_common_record_t *record). Therefore, unless OS_OBJECT_TABLE_GET or iter->match require a mutable pointer, this use violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2003.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a structured log entry to /tmp/logs/2003.txt */\nstatic void OS_ObjectIdIterator_LogProbe(const char *stage,\n                                         const OS_object_iter_t *iter,\n                                         const OS_common_record_t *record,\n                                         int match_res)\n{\n    FILE *f = fopen(\"/tmp/logs/2003.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic iterator state */\n    fprintf(f, \"Stage=%s\\n\", stage);\n    if (iter != NULL)\n    {\n        fprintf(f, \"  token.obj_idx=%ld\\n\", (long)iter->token.obj_idx);\n        fprintf(f, \"  token.obj_id=%llu\\n\", (unsigned long long)iter->token.obj_id);\n        fprintf(f, \"  limit=%lu\\n\", (unsigned long)iter->limit);\n        fprintf(f, \"  base=%p\\n\", (void *)iter->base);\n    }\n    else\n    {\n        fprintf(f, \"  iter=NULL\\n\");\n    }\n\n    /* Record state (if available) */\n    if (record != NULL)\n    {\n        fprintf(f, \"  record=%p\\n\", (void *)record);\n        fprintf(f, \"  record->active_id=%llu\\n\", (unsigned long long)record->active_id);\n    }\n    else\n    {\n        fprintf(f, \"  record=NULL\\n\");\n    }\n\n    if (match_res >= 0)\n    {\n        fprintf(f, \"  match_res=%d\\n\", match_res);\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    /* Log entry into the function with initial state */\n    OS_ObjectIdIterator_LogProbe(\"enter\", iter, NULL, -1);\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n\n        /* Log after advancing the index */\n        OS_ObjectIdIterator_LogProbe(\"after_increment\", iter, NULL, -1);\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            /* Log that we've reached the limit and will break out */\n            OS_ObjectIdIterator_LogProbe(\"limit_reached\", iter, NULL, -1);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n\n        /* Log the record obtained from the table */\n        OS_ObjectIdIterator_LogProbe(\"after_get\", iter, record, -1);\n\n        if (iter->match == NULL)\n        {\n            /* No matcher: accept the record */\n            OS_ObjectIdIterator_LogProbe(\"match_null\", iter, record, -1);\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n        else\n        {\n            /* Call the matcher and log its result */\n            int match_res = (int)iter->match(iter->arg, &iter->token, record);\n            OS_ObjectIdIterator_LogProbe(\"after_match\", iter, record, match_res);\n\n            if (match_res)\n            {\n                iter->token.obj_id = record->active_id;\n                got_next           = true;\n            }\n        }\n    } while (!got_next);\n\n    /* Final state before returning */\n    OS_ObjectIdIterator_LogProbe(\"exit\", iter, (got_next ? record : NULL), (got_next ? 1 : 0));\n\n    return got_next;\n}\n"
}