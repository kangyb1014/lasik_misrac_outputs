{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * but is only used for read-only access (accessing record->active_id and passing it to iter->match). It could be declared as 'const OS_common_record_t *record', so using a non-const pointer here violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2003.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n    FILE *log_fp = fopen(\"/tmp/logs/2003.txt\", \"a\");\n\n    if (log_fp != NULL)\n    {\n        fprintf(log_fp, \"OS_ObjectIdIteratorGetNext: entry - obj_idx=%lu, limit=%lu, base=%p\\n\",\n                (unsigned long)iter->token.obj_idx, (unsigned long)iter->limit, (void *)iter->base);\n    }\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (log_fp != NULL)\n        {\n            fprintf(log_fp, \"iter: incremented obj_idx=%lu\\n\", (unsigned long)iter->token.obj_idx);\n        }\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            if (log_fp != NULL)\n            {\n                fprintf(log_fp, \"iter: obj_idx >= limit (%lu >= %lu) - break\\n\",\n                        (unsigned long)iter->token.obj_idx, (unsigned long)iter->limit);\n            }\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (log_fp != NULL)\n        {\n            fprintf(log_fp, \"iter: fetched record=%p\\n\", (void *)record);\n        }\n\n        if (iter->match == NULL)\n        {\n            /* Log that match is NULL and record->active_id will be used */\n            if (log_fp != NULL)\n            {\n                fprintf(log_fp, \"iter: match is NULL; using record->active_id=%lu\\n\",\n                        (unsigned long)record->active_id);\n            }\n\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n        else\n        {\n            /* Call match once and log its result and the record state */\n            bool match_result = iter->match(iter->arg, &iter->token, record);\n\n            if (log_fp != NULL)\n            {\n                fprintf(log_fp, \"iter: match called -> result=%d, record->active_id=%lu\\n\",\n                        match_result ? 1 : 0, (unsigned long)record->active_id);\n            }\n\n            if (match_result)\n            {\n                iter->token.obj_id = record->active_id;\n                got_next           = true;\n            }\n        }\n    } while (!got_next);\n\n    if (log_fp != NULL)\n    {\n        fprintf(log_fp, \"OS_ObjectIdIteratorGetNext: exit - got_next=%d, token.obj_id=%lu, final_obj_idx=%lu\\n\",\n                got_next ? 1 : 0, (unsigned long)iter->token.obj_id, (unsigned long)iter->token.obj_idx);\n        fclose(log_fp);\n    }\n\n    return got_next;\n}\n"
}