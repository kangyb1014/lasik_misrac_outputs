{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf record->name_entry points to a string stored in a smaller fixed-size buffer (for example a table entry with max name length N) and the caller passes a larger buffer_size (M > N), OS_strnlen(record->name_entry, buffer_size) may read up to M bytes from record->name_entry. If the source storage does not contain a NUL within its actual allocated size (N), this will read past the end of the object and thus violate Rule 21.17. In other words, using the destination buffer_size as the strnlen limit instead of the actual size of the object pointed to by record->name_entry can cause out-of-bounds reads.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers. These are kept minimal to avoid changing logic. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1579.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n    int              iter_count = 0;\n\n    /* Entry log */\n    probe_log(\"OS_CloseAllFiles: enter\\n\");\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    probe_log(\"OS_CloseAllFiles: iterator initialized at %p\\n\", (void *)&iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        iter_count++;\n        probe_log(\"OS_CloseAllFiles: iteration %d: iterator advanced\\n\", iter_count);\n\n        /* Log intent to process the current entry. We log the callback name rather than\n         * attempting to print the function pointer (to avoid portability/undefined behavior).\n         */\n        probe_log(\"OS_CloseAllFiles: iteration %d: about to call OS_ObjectIdIteratorProcessEntry with callback=OS_FileIteratorClose\\n\", iter_count);\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n        probe_log(\"OS_CloseAllFiles: iteration %d: OS_ObjectIdIteratorProcessEntry returned %d\\n\", iter_count, (int)close_code);\n\n        if (close_code != OS_SUCCESS)\n        {\n            probe_log(\"OS_CloseAllFiles: iteration %d: encountered error code %d, setting return_code\\n\", iter_count, (int)close_code);\n            return_code = close_code;\n        }\n    }\n\n    probe_log(\"OS_CloseAllFiles: destroying iterator after %d iterations\\n\", iter_count);\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_CloseAllFiles: exit, return_code=%d, iterations=%d\\n\", (int)return_code, iter_count);\n\n    return return_code;\n}\n"
}