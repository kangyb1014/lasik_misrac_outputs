{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call strcmp(stream->stream_name, Filename) uses two char* inputs without any bounds/termination checks on Filename (only OS_CHECK_POINTER was called). If the caller supplies a non\u2011NUL\u2011terminated Filename buffer (or one longer than its allocated size) strcmp may read past the end of that buffer. Likewise, if stream->stream_name were ever not NUL\u2011terminated (e.g. corruption or improper initialization) strcmp could read past its bounds. Either case would result in accesses beyond the objects referenced by the pointer parameters, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Probe logging helpers. Keep static to avoid external linkage. */\nstatic FILE *open_log(void)\n{\n    FILE *fp = fopen(\"/tmp/logs/1579.txt\", \"a\");\n    if (fp)\n    {\n        /* Prefix to make entries easier to correlate. */\n        fprintf(fp, \"---- OS_CloseAllFiles probe entry ----\\n\");\n        fflush(fp);\n    }\n    return fp;\n}\n\nstatic void close_log(FILE *fp)\n{\n    if (fp)\n    {\n        fprintf(fp, \"---- end probe entry ----\\n\\n\");\n        fclose(fp);\n    }\n}\n\n/*\n * Modified OS_CloseAllFiles with logging probes added. The original logic\n * is preserved; the probes only append informational logs to\n * \"/tmp/logs/1579.txt\" to aid reproducing/observing failure scenarios.\n */\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n    FILE *log_fp = open_log();\n\n    return_code = OS_SUCCESS;\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_CloseAllFiles: called. return_code initial=%\" PRId32 \"\\n\", return_code);\n        fprintf(log_fp, \"OS_object_iter_t address=%p\\n\", (void *)&iter);\n        fflush(log_fp);\n    }\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_ObjectIdIterateActive returned; ready to iterate.\\n\");\n        fflush(log_fp);\n    }\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        if (log_fp)\n        {\n            fprintf(log_fp, \"Iterator advanced: iter address=%p\\n\", (void *)&iter);\n            fflush(log_fp);\n        }\n\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n        if (log_fp)\n        {\n            fprintf(log_fp, \"OS_ObjectIdIteratorProcessEntry returned close_code=%\" PRId32 \"\\n\", close_code);\n            fflush(log_fp);\n        }\n\n        if (close_code != OS_SUCCESS)\n        {\n            if (log_fp)\n            {\n                fprintf(log_fp, \"Non-success close_code encountered: %\" PRId32 \" - recording as return_code\\n\", close_code);\n                fflush(log_fp);\n            }\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_ObjectIdIteratorDestroy called. final return_code=%\" PRId32 \"\\n\", return_code);\n        fflush(log_fp);\n    }\n\n    close_log(log_fp);\n\n    return return_code;\n}\n"
}