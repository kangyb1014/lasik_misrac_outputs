{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1) can read beyond the bounds of record->name_entry if record->name_entry is not NUL-terminated within the first (sizeof(fd_prop->Path) - 1) bytes. strncpy reads up to the specified count from the source (stopping early only if it finds a NUL); if the source buffer is smaller than that count or not NUL-terminated within that range, this call may access bytes past the end of record->name_entry, causing undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function: appends human-readable logs to /tmp/logs/1579.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1579.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n    int              iter_count = 0;\n    int              has_next;\n\n    return_code = OS_SUCCESS;\n\n    probe_log(\"OS_CloseAllFiles: start; return_code initialized to %ld\", (long)return_code);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    probe_log(\"OS_CloseAllFiles: OS_ObjectIdIterateActive called; iterator address=%p, iterator_size=%zu\", (void *)&iter, sizeof(iter));\n\n    /* Use an explicit fetch so we can log each GetNext invocation and the control flow */\n    has_next = OS_ObjectIdIteratorGetNext(&iter);\n    probe_log(\"OS_CloseAllFiles: first OS_ObjectIdIteratorGetNext() -> %d\", has_next);\n\n    while (has_next)\n    {\n        iter_count++;\n        probe_log(\"OS_CloseAllFiles: entering iteration %d\", iter_count);\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        probe_log(\"OS_CloseAllFiles: iteration %d - OS_ObjectIdIteratorProcessEntry returned %ld\", iter_count, (long)close_code);\n\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n            probe_log(\"OS_CloseAllFiles: iteration %d - non-success close_code=%ld; return_code updated to %ld\", iter_count, (long)close_code, (long)return_code);\n        }\n\n        /* advance iterator and log result for next loop decision */\n        has_next = OS_ObjectIdIteratorGetNext(&iter);\n        probe_log(\"OS_CloseAllFiles: iteration %d - next OS_ObjectIdIteratorGetNext() -> %d\", iter_count, has_next);\n    }\n\n    probe_log(\"OS_CloseAllFiles: completed loop after %d iterations; cleaning up iterator\", iter_count);\n\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"OS_CloseAllFiles: OS_ObjectIdIteratorDestroy called; returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}