{
  "user_message": "An agent A claimed that the following OS_BSP_ConsoleOutput_Impl code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BSP_ConsoleOutput_Impl.\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls strlen(OutputMessage) without first ensuring that OutputMessage is non-NULL and points to a null-terminated array. If OutputMessage is NULL or refers to a buffer that is not null-terminated (or shorter than expected), strlen will scan past the object's bounds (or dereference NULL), reading beyond the buffer until a 0 byte is found and thus violating MISRA C 2023 Rule 21.17. This also leads to subsequent uses of MsgLen and OutputMessage[MsgLen-1] potentially accessing out-of-bounds memory.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393efb, DataLen=1\nbounded_strlen: no terminator found within DataLen=1. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393efb, requested=1, written=1\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x7ffc79965780, DataLen=7\nbounded_strlen: no terminator found within DataLen=7. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x7ffc79965780, requested=7, written=7\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393f03, DataLen=1\nbounded_strlen: no terminator found within DataLen=1. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393f03, requested=1, written=1\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393ee9, DataLen=9\nbounded_strlen: no terminator found within DataLen=9. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393ee9, requested=9, written=9\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393efb, DataLen=1\nbounded_strlen: no terminator found within DataLen=1. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393efb, requested=1, written=1\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393efb, DataLen=1\nbounded_strlen: no terminator found within DataLen=1. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393efb, requested=1, written=1\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x7ffc799656c0, DataLen=7\nbounded_strlen: no terminator found within DataLen=7. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x7ffc799656c0, requested=7, written=7\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393f03, DataLen=1\nbounded_strlen: no terminator found within DataLen=1. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393f03, requested=1, written=1\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x7ffc79965700, DataLen=8\nbounded_strlen: no terminator found within DataLen=8. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x7ffc79965700, requested=8, written=8\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393efb, DataLen=1\nbounded_strlen: no terminator found within DataLen=1. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393efb, requested=1, written=1\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x7ffc799656f0, DataLen=7\nbounded_strlen: no terminator found within DataLen=7. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x7ffc799656f0, requested=7, written=7\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393f03, DataLen=1\nbounded_strlen: no terminator found within DataLen=1. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393f03, requested=1, written=1\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393878, DataLen=14\nbounded_strlen: no terminator found within DataLen=14. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393878, requested=14, written=14\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393efb, DataLen=1\nbounded_strlen: no terminator found within DataLen=1. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x557dfc393efb, requested=1, written=1\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x7ffc79965690, DataLen=7\nbounded_strlen: no terminator found within DataLen=7. A call to strlen(Str) would read past the intended buffer.\nwrite() called: Str=0x7ffc79965690, requested=7, written=7\nOS_BSP_ConsoleOutput_Impl exit\nOS_BSP_ConsoleOutput_Impl enter: Str=0x557dfc393f03, DataLen=1\nbounded_strlen: no terminator found wit\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BSP_ConsoleOutput_Impl:\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    OS_BSP_Lock_Impl();\n\n    while (StartPos != EndPos)\n    {\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n}\n...\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n...\nvoid UT_BSP_EndTest(const UtAssert_TestCounter_t *TestCounters)\n{\n    char Message[128];\n\n    /*\n     * Only output a \"summary\" if there is more than one test Segment.\n     * Otherwise it is a duplicate of the report already given.\n     */\n    if (TestCounters->TestSegmentCount > 1)\n    {\n        UtAssert_DoTestSegmentReport(\"SUMMARY\", TestCounters);\n    }\n\n    snprintf(Message, sizeof(Message), \"COMPLETE: %u tests Segment(s) executed\\n\\n\",\n             (unsigned int)TestCounters->TestSegmentCount);\n\n    UT_BSP_Lock();\n    OS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n    UT_BSP_Unlock();\n\n    if ((TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE] > 0) ||\n        (TestCounters->CaseCount[UTASSERT_CASETYPE_TSF] > 0) || (TestCounters->CaseCount[UTASSERT_CASETYPE_TTF] > 0))\n    {\n        OS_BSP_SetExitCode(OS_ERROR);\n    }\n    else\n    {\n        OS_BSP_SetExitCode(OS_SUCCESS);\n    }\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The OS_BSP_ConsoleOutput_Impl function itself does not call any <string.h> functions \u2014 it uses write() and explicit pointer/length arithmetic \u2014 so that function does not violate MISRA C 2023 Rule 21.17. However, the code shown in the additional context (UT_BSP_DoText) does call strlen(OutputMessage) without checking OutputMessage for NULL or otherwise ensuring that the referenced object is null-terminated within its accessible bounds. That use of strlen can read past the bounds of the object (or dereference NULL) and therefore can violate Rule 21.17. The execution log entries labelled \"bounded_strlen: no terminator found within DataLen=...\" corroborate that computing MsgLen via strlen on unbounded data is unsafe. In summary: the reported function OS_BSP_ConsoleOutput_Impl is not the offender (the report is incorrect as written), but there is a valid Rule 21.17 concern in UT_BSP_DoText where strlen(OutputMessage) is used unsafely."
}