{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "WriteLen = write(STDOUT_FILENO, Str, DataLen);",
    "ssize_t WriteLen;"
  ],
  "explanation": "The remaining code constructs are standard ISO C and do not represent compiler language extensions and therefore do not need investigation for MISRA C 2023 Rule 1.2: - Function signature using const char * and size_t: both are standard C types (size_t is standard from <stddef.h>/<stdio.h>). - while loop, if statement, break, arithmetic on pointers and integers (Str += WriteLen; DataLen -= WriteLen;) and comparison operators are all standard C language features. - The use of identifiers like DataLen, Str and WriteLen, and the overall control flow are ordinary C and contain no compiler-specific keywords (no __attribute__, __asm__, __extension__, __builtin_*, or other vendor-specific tokens). The only items that may be platform or library extensions (and thus worth investigating for conformity with Rule 1.2) are the use of the POSIX-style type/function/macros shown in the reported fragments (ssize_t, write, STDOUT_FILENO). No other lines in the snippet introduce language/compiler extensions."
}