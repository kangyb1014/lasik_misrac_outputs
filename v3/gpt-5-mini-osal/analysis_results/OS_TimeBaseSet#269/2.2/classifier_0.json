{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseSet:\n```c\nint32 OS_TimeBaseSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Internally the implementation represents the interval as a\n     * signed 32-bit integer, but the parameter is unsigned because a negative interval\n     * does not make sense.\n     *\n     * Note that the units are intentionally left unspecified.  The external sync period\n     * could be measured in microseconds or hours -- it is whatever the application requires.\n     */\n    ARGCHECK(start_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Need to take the time base lock to ensure that no ticks are currently being processed */\n        OS_TimeBaseLock_Impl(&token);\n\n        return_code = OS_TimeBaseSet_Impl(&token, start_time, interval_time);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Save the value since we were successful */\n            timebase->nominal_start_time    = start_time;\n            timebase->nominal_interval_time = interval_time;\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TimeBaseSet:\n#define OS_TIMER_ERR_INVALID_ARGS (-29)\n...\nstatic inline osal_objtype_t OS_ObjectIdToType_Impl(osal_id_t id)\n{\n    return (OS_ObjectIdToInteger(id) >> OS_OBJECT_TYPE_SHIFT);\n}\n...\nosal_id_t OS_TaskGetId_Impl(void)\n{\n    OS_VoidPtrValueWrapper_t self_record;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    self_record.opaque_arg = pthread_getspecific(POSIX_GlobalVars.ThreadKey);\n\n    return self_record.id;\n}\n...\n#define OS_OBJECT_TYPE_OS_TIMEBASE 0x08\n...\n#define OS_ERR_INCORRECT_OBJ_STATE (-35)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_SUCCESS (0)\n...\nOS_timebase_internal_record_t OS_timebase_table[OS_MAX_TIMEBASES]\n...\nvoid OS_TimeBaseLock_Impl(const OS_object_token_t *token)\n{\n    OS_impl_timebase_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n\n    pthread_mutex_lock(&impl->handler_mutex);\n}\n...\nint32 OS_TimeBaseSet_Impl(const OS_object_token_t *token, uint32 start_time, uint32 interval_time)\n{\n    OS_impl_timebase_internal_record_t *local;\n    struct itimerspec                   timeout;\n    int32                               return_code;\n    int                                 status;\n    OS_timebase_internal_record_t *     timebase;\n\n    local       = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n    timebase    = OS_OBJECT_TABLE_GET(OS_timebase_table, *token);\n    return_code = OS_SUCCESS;\n\n    /* There is only something to do here if we are generating a simulated tick */\n    if (local->assigned_signal != 0)\n    {\n        /*\n        ** Convert from Microseconds to timespec structures\n        */\n        memset(&timeout, 0, sizeof(timeout));\n        OS_UsecToTimespec(start_time, &timeout.it_value);\n        OS_UsecToTimespec(interval_time, &timeout.it_interval);\n\n        /*\n        ** Program the real timer\n        */\n        status = timer_settime(local->host_timerid, 0, /* Flags field can be zero */\n                               &timeout,               /* struct itimerspec */\n                               NULL);                  /* Oldvalue */\n\n        if (status < 0)\n        {\n            OS_DEBUG(\"Error in timer_settime: %s\\n\", strerror(errno));\n            return_code = OS_TIMER_ERR_INTERNAL;\n        }\n        else if (interval_time > 0)\n        {\n            timebase->accuracy_usec = (uint32)((timeout.it_interval.tv_nsec + 999) / 1000);\n        }\n        else\n        {\n            timebase->accuracy_usec = (uint32)((timeout.it_value.tv_nsec + 999) / 1000);\n        }\n    }\n\n    local->reset_flag = (return_code == OS_SUCCESS);\n    return return_code;\n}\n...\nvoid OS_TimeBaseUnlock_Impl(const OS_object_token_t *token)\n{\n    OS_impl_timebase_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n\n    pthread_mutex_unlock(&impl->handler_mutex);\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\nvoid OS_ObjectIdTransactionFinish(OS_object_token_t *token, const osal_id_t *final_id)\n{\n    OS_common_record_t *record;\n\n    if (token->lock_mode == OS_LOCK_MODE_NONE)\n    {\n        /* nothing to do */\n        return;\n    }\n\n    record = OS_ObjectIdGlobalFromToken(token);\n\n    /* re-acquire global table lock to adjust refcount */\n    if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE || token->lock_mode == OS_LOCK_MODE_REFCOUNT)\n    {\n        OS_Lock_Global(token);\n    }\n\n    if (record->refcount > 0)\n    {\n        --record->refcount;\n    }\n\n    /*\n     * at this point the global mutex is always held, either\n     * from re-acquiring it above or it is still held from\n     * the original lock when using OS_LOCK_MODE_GLOBAL.\n     *\n     * If an ID update was pending (i.e. for a create/delete op)\n     * then do the ID update now while holding the mutex.\n     */\n    if (final_id != NULL)\n    {\n        record->active_id = *final_id;\n    }\n    else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n    {\n        /*\n         * If the lock type was EXCLUSIVE, it means that the ID in the record\n         * was reset to OS_OBJECT_ID_RESERVED.  This must restore the original\n         * object ID from the token.\n         */\n        record->active_id = token->obj_id;\n    }\n\n    /* always unlock (this also covers OS_LOCK_MODE_GLOBAL case) */\n    OS_Unlock_Global(token);\n\n    /*\n     * Setting to \"NONE\" indicates that this token has been\n     * released, and should not be released again.\n     */\n    token->lock_mode = OS_LOCK_MODE_NONE;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntimebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the timebase pointer retrieved by timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token) is used later in the successful path to update timebase->nominal_start_time and nominal_interval_time. Therefore the assignment is not dead code (removing it would change program behaviour when OS_ObjectIdGetById returns OS_SUCCESS and OS_TimeBaseSet_Impl succeeds)."
}