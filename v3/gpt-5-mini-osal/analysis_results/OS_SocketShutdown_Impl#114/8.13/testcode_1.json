{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer conn_impl is declared as a pointer to a non-const OS_impl_file_internal_record_t but is only used for read access (conn_impl->fd) and is not modified via this pointer. According to MISRA C 2023 Rule 8.13, it should be declared as a pointer to a const-qualified type (const OS_impl_file_internal_record_t *conn_impl). Therefore the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketShutdown_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketShutdown_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketShutdown_Impl:\n```c\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketShutdown_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/socket.h>\n\n/* Probe/logging helpers - keep them static to limit scope. */\nstatic void log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1143.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp each log line to help trace control flow. */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm *tm = localtime(&t);\n        if (tm != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified OS_SocketShutdown_Impl with logging probes that record the\n * control path and relevant state to /tmp/logs/1143.txt. The original\n * logic is preserved.\n */\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    log_printf(\"ENTER: OS_SocketShutdown_Impl called, token=%p, Mode=%d\", (void *)token, (int)Mode);\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    log_printf(\"After OS_OBJECT_TABLE_GET: conn_impl=%p\", (void *)conn_impl);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n        log_printf(\"Mode: SHUT_READ -> how=%d\", how);\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n        log_printf(\"Mode: SHUT_WRITE -> how=%d\", how);\n    }\n    else\n    {\n        how = SHUT_RDWR;\n        log_printf(\"Mode: SHUT_RDWR (default) -> how=%d\", how);\n    }\n\n    /* Log the file descriptor value that will be used for shutdown. */\n    if (conn_impl != NULL)\n    {\n        /* fd is observed/read but not modified here; this documents the read-use of conn_impl. */\n        log_printf(\"About to call shutdown on fd=%d (conn_impl=%p), how=%d\", (int)conn_impl->fd, (void *)conn_impl, how);\n    }\n    else\n    {\n        log_printf(\"About to call shutdown but conn_impl is NULL (will dereference and likely fail)\");\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n        log_printf(\"shutdown returned 0 -> OS_SUCCESS\");\n    }\n    else\n    {\n        int saved_errno = errno;\n        return_code = OS_ERROR;\n        log_printf(\"shutdown failed, return=-1, errno=%d (%s) -> OS_ERROR\", saved_errno, strerror(saved_errno));\n    }\n\n    log_printf(\"EXIT: OS_SocketShutdown_Impl returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}