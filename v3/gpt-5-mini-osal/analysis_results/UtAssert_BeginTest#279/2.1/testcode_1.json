{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe code tests 'status < 0' after calling pthread_mutex_lock. On POSIX pthread_mutex_lock returns 0 on success and a positive error number on failure, so the condition 'status < 0' will never be true on a conforming POSIX implementation. Consequently the BSP_DEBUG error branch is effectively unreachable (and thus remains dead code). This violates MISRA C 2023 Rule 2.1. (Fix: test 'status != 0' or use the documented pthread return semantics.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2791.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    /* Open a probe log to capture control flow and state for debugging */\n    FILE *ut_log = fopen(\"/tmp/logs/2791.txt\", \"a\");\n    if (ut_log != NULL)\n    {\n        fprintf(ut_log, \"UtAssert_BeginTest: Entering. SegmentName='%s'\\n\",\n                (SegmentName != NULL) ? SegmentName : \"(null)\");\n        /* Attempt to log a snapshot of relevant globals (best-effort) */\n        /* Guard reads in case symbols exist in the build */\n        fprintf(ut_log, \"Pre-Lock: UT_TotalCounters.TestSegmentCount=%u\\n\",\n                (unsigned)UT_TotalCounters.TestSegmentCount);\n        fflush(ut_log);\n    }\n\n    UT_BSP_Lock();\n\n    if (ut_log != NULL)\n    {\n        fprintf(ut_log, \"After UT_BSP_Lock: lock acquired (or lock-call returned).\\n\");\n        /* Log that we are about to zero the segment counters */\n        fprintf(ut_log, \"About to memset UT_SegmentCounters at %p -> zeroing %zu bytes\\n\",\n                (void *)&UT_SegmentCounters, sizeof(UT_SegmentCounters));\n        fflush(ut_log);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    if (ut_log != NULL)\n    {\n        fprintf(ut_log, \"CurrentSegment set to '%s'\\n\", CurrentSegment);\n        fprintf(ut_log, \"Computing TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount\\n\");\n        fflush(ut_log);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    if (ut_log != NULL)\n    {\n        fprintf(ut_log, \"TestSegmentCount computed = %u\\n\", (unsigned)TestSegmentCount);\n        fflush(ut_log);\n    }\n\n    UT_BSP_Unlock();\n\n    if (ut_log != NULL)\n    {\n        fprintf(ut_log,\n                \"After UT_BSP_Unlock: calling UT_BSP_StartTestSegment(TestSegmentCount=%u, SegmentName='%s')\\n\",\n                (unsigned)TestSegmentCount,\n                (SegmentName != NULL) ? SegmentName : \"(null)\");\n        fclose(ut_log);\n    }\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}