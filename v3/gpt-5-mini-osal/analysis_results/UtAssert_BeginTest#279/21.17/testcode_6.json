{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf SegmentName does not contain a NUL within the first sizeof(CurrentSegment)-1 (63) bytes \u2014 for example, if SegmentName points to a shorter character buffer that is not NUL-terminated \u2014 strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) will attempt to read up to 63 bytes from SegmentName and thus may read beyond the bounds of the object referenced by SegmentName. Although the destination writes are bounded and the code forces termination by setting CurrentSegment[63]=0, the read access performed by strncpy can still go out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2799.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n    FILE *log = fopen(\"/tmp/logs/2799.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtAssert_BeginTest: called. SegmentName=%p\\n\", (const void *)SegmentName);\n    }\n\n    UT_BSP_Lock();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtAssert_BeginTest: lock acquired\\n\");\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtAssert_BeginTest: UT_SegmentCounters cleared (memset)\\n\");\n        fprintf(log, \"UtAssert_BeginTest: about to call strncpy with max_len=%zu\\n\", (size_t)(sizeof(CurrentSegment) - 1));\n        fflush(log);\n    }\n\n    /* Original potentially-unsafe copy retained to preserve behavior */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    if (log != NULL)\n    {\n        /* Printing CurrentSegment is safe because we ensured NUL termination above. */\n        fprintf(log, \"UtAssert_BeginTest: CurrentSegment after strncpy='%s'\\n\", CurrentSegment);\n        fflush(log);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtAssert_BeginTest: computed TestSegmentCount=%u\\n\", (unsigned)TestSegmentCount);\n        fclose(log);\n    }\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}