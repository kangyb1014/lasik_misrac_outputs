{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of UT_BSP_StartTestSegment is declared to take a non-const char * (e.g. void UT_BSP_StartTestSegment(uint32, char *)), then passing SegmentName (a const char *) discards the const qualifier and violates MISRA C 2023 Rule 8.13. If, however, UT_BSP_StartTestSegment is declared to accept a const char * for that parameter (e.g. void UT_BSP_StartTestSegment(uint32, const char *)), then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2793.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Probe helper: append logs to the specified file. Keep simple and local. */\nstatic void UtAssert_WriteLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2793.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Original function preserved as much as possible; probes added to capture\n * control flow and state relevant to the const-discard violation scenario.\n */\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    /* Log entry and incoming parameter info */\n    UtAssert_WriteLog(\"ENTER: UtAssert_BeginTest\");\n    if (SegmentName != NULL)\n    {\n        /* Log pointer and content without casting away const */\n        UtAssert_WriteLog(\"SegmentName ptr=%p\", (const void *)SegmentName);\n        UtAssert_WriteLog(\"SegmentName content=\\\"%s\\\"\", SegmentName);\n        /* Note in log that this parameter is const in this translation unit */\n        UtAssert_WriteLog(\"Note: in UtAssert_BeginTest prototype, SegmentName is const char *\");\n    }\n    else\n    {\n        UtAssert_WriteLog(\"SegmentName is NULL\");\n    }\n\n    UtAssert_WriteLog(\"Calling UT_BSP_Lock()\");\n    UT_BSP_Lock();\n    UtAssert_WriteLog(\"Returned from UT_BSP_Lock()\");\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    UtAssert_WriteLog(\"Cleared UT_SegmentCounters at %p\", (void *)&UT_SegmentCounters);\n\n    /* Preserve original strncpy behavior */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    UtAssert_WriteLog(\"CurrentSegment after strncpy=\\\"%s\\\"\", CurrentSegment);\n\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n    UtAssert_WriteLog(\"Computed TestSegmentCount=%u (UT_TotalCounters.TestSegmentCount=%u)\",\n                      (unsigned)TestSegmentCount,\n                      (unsigned)UT_TotalCounters.TestSegmentCount);\n\n    UtAssert_WriteLog(\"Calling UT_BSP_Unlock()\");\n    UT_BSP_Unlock();\n    UtAssert_WriteLog(\"Returned from UT_BSP_Unlock()\");\n\n    /*\n     * Final probe immediately before calling UT_BSP_StartTestSegment so the\n     * logs show the exact argument values that are passed. This is the site\n     * relevant to the MISRA Rule 8.13 report (const discard if prototype\n     * elsewhere takes non-const char *).\n     */\n    UtAssert_WriteLog(\"About to call UT_BSP_StartTestSegment(TestSegmentCount=%u, SegmentName ptr=%p)\",\n                      (unsigned)TestSegmentCount,\n                      (const void *)SegmentName);\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n\n    UtAssert_WriteLog(\"Returned from UT_BSP_StartTestSegment\");\n    UtAssert_WriteLog(\"EXIT: UtAssert_BeginTest\");\n}\n"
}