{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextMatch the code sets token->obj_id = OS_OBJECT_ID_UNDEFINED immediately after OS_ObjectIdTransactionInit has been called. OS_ObjectIdTransactionInit performs memset(token, 0, sizeof(*token)), which already initializes token->obj_id to zero. OS_ObjectIdDefined/related code treat the undefined ID as zero, so the explicit assignment is redundant \u2014 removing it would not change program behaviour. Therefore this executed assignment is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1992.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Probe/logging helpers\n * These functions append records to /tmp/logs/1992.txt to capture control flow\n * and token state for debugging the reported dead-assignment scenario.\n */\nstatic void os_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1992.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void log_token_state(const char *stage, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1992.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /*\n     * Print the stage label, token pointer and the token->obj_id field.\n     * The presence of obj_id is assumed from the surrounding codebase\n     * and the reported violation scenario.\n     */\n    fprintf(f, \"[%s] token=%p obj_id=%lu\\n\", stage, (void *)token, (unsigned long)token->obj_id);\n    fclose(f);\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    os_logf(\"Enter OS_ObjectIdGetBySearch lock_mode=%lu idtype=%lu token=%p\", (unsigned long)lock_mode, (unsigned long)idtype, (void *)token);\n\n    /* Log token state before transaction init to capture any pre-existing value */\n    log_token_state(\"before_init\", token);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    /* Log token state after transaction init to document effects of the init (e.g. memset to zero) */\n    log_token_state(\"after_init\", token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    os_logf(\"After OS_ObjectIdFindNextMatch return_code=%ld token=%p\", (long)return_code, (void *)token);\n    log_token_state(\"after_findnext\", token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        os_logf(\"Calling OS_ObjectIdConvertToken token=%p\", (void *)token);\n        return_code = OS_ObjectIdConvertToken(token);\n        os_logf(\"After OS_ObjectIdConvertToken return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        os_logf(\"Calling OS_ObjectIdTransactionCancel token=%p\", (void *)token);\n        OS_ObjectIdTransactionCancel(token);\n        os_logf(\"After OS_ObjectIdTransactionCancel\");\n    }\n\n    os_logf(\"Exit OS_ObjectIdGetBySearch return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}