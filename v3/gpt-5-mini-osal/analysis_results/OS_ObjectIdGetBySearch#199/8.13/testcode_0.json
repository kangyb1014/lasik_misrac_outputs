{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointers 'base' and 'record' are declared as OS_common_record_t * but in this function they are only used for read-only access (reading record->active_id and passing record to MatchFunc which expects a const OS_common_record_t *). Therefore they could and should be declared as const OS_common_record_t *base and const OS_common_record_t *record to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: appends a log line describing the control flow and key state.\n * Logs are written to /tmp/logs/1993.txt. This helper keeps the original\n * function semantics unchanged and only observes parameters and return codes.\n */\nstatic void OS_ObjectIdGetBySearch_Log(const char *stage,\n                                       int lock_mode_int,\n                                       int idtype_int,\n                                       void *arg,\n                                       const void *token_ptr,\n                                       int32_t rc)\n{\n    FILE *f = fopen(\"/tmp/logs/1993.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* stage: textual marker of where we are in the function\n         * lock_mode_int/idtype_int: integer representations of enum/typedef\n         * arg/token_ptr: pointer values that help trace the match invocation\n         * rc: the most-recent return code (0 if not yet set)\n         */\n        fprintf(f, \"OS_ObjectIdGetBySearch - %s: lock_mode=%d idtype=%d arg=%p token=%p rc=%d\\n\",\n                stage, lock_mode_int, idtype_int, arg, token_ptr, rc);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry with parameter snapshots (cast enums/typedefs to int for printing) */\n    OS_ObjectIdGetBySearch_Log(\"entry\", (int)lock_mode, (int)idtype, arg, (const void *)token, 0);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    /* Log immediately after transaction init */\n    OS_ObjectIdGetBySearch_Log(\"after_init\", (int)lock_mode, (int)idtype, arg, (const void *)token, 0);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    /* Log the result of the match attempt */\n    OS_ObjectIdGetBySearch_Log(\"after_find_next_match\", (int)lock_mode, (int)idtype, arg, (const void *)token, (int32_t)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n\n        /* Log the result after converting the token on success path */\n        OS_ObjectIdGetBySearch_Log(\"after_convert_token\", (int)lock_mode, (int)idtype, arg, (const void *)token, (int32_t)return_code);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n\n        /* Log the cancel action and keep the non-success return code */\n        OS_ObjectIdGetBySearch_Log(\"after_transaction_cancel\", (int)lock_mode, (int)idtype, arg, (const void *)token, (int32_t)return_code);\n    }\n\n    /* Final return log */\n    OS_ObjectIdGetBySearch_Log(\"exit\", (int)lock_mode, (int)idtype, arg, (const void *)token, (int32_t)return_code);\n\n    return return_code;\n}\n"
}