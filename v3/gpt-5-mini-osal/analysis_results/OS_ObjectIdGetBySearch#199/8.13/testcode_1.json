{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns a non-const pointer to a table entry: `record = OS_OBJECT_TABLE_GET(base, *token);`. In OS_ObjectIdFindNextMatch the pointer is only used for read-only access (e.g. `record->active_id`) and then passed to MatchFunc whose prototype takes `const OS_common_record_t *obj`. Therefore `record` (and arguably `base`) could and should be declared as `const OS_common_record_t *` to reflect immutability. Leaving it as a non-const pointer allows accidental modification and violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append logs to /tmp/logs/1993.txt. */\nstatic void OS_ObjectIdGetBySearch_Log(const char *stage, OS_lock_mode_t lock_mode, osal_objtype_t idtype,\n                                       OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token,\n                                       int32 return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/1993.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best-effort logging only. */\n    }\n\n    /* Print high-level state and pointers that help reproduce the control flow. */\n    fprintf(fp, \"Stage: %s\\n\", stage);\n    fprintf(fp, \"  lock_mode: %d\\n\", (int)lock_mode);\n    fprintf(fp, \"  idtype: %d\\n\", (int)idtype);\n    fprintf(fp, \"  MatchFunc: %p\\n\", (const void *)MatchFunc);\n    fprintf(fp, \"  arg: %p\\n\", arg);\n    fprintf(fp, \"  token ptr: %p\\n\", (const void *)token);\n    fprintf(fp, \"  return_code (probe): %ld\\n\", (long)return_code);\n    fprintf(fp, \"\\n\");\n\n    fclose(fp);\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry and input state */\n    OS_ObjectIdGetBySearch_Log(\"enter\", lock_mode, idtype, MatchFunc, arg, token, -1);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    /* Log after transaction init */\n    OS_ObjectIdGetBySearch_Log(\"after_init\", lock_mode, idtype, MatchFunc, arg, token, -1);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    /* Log result of find-next-match including token pointer and return code */\n    OS_ObjectIdGetBySearch_Log(\"after_find\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        OS_ObjectIdGetBySearch_Log(\"before_convert\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n\n        return_code = OS_ObjectIdConvertToken(token);\n\n        /* Log after convert finishes (final return_code at this point) */\n        OS_ObjectIdGetBySearch_Log(\"after_convert\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n    }\n    else\n    {\n        OS_ObjectIdGetBySearch_Log(\"before_cancel\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n\n        OS_ObjectIdTransactionCancel(token);\n\n        OS_ObjectIdGetBySearch_Log(\"after_cancel\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n    }\n\n    /* Final log right before returning */\n    OS_ObjectIdGetBySearch_Log(\"exit\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n\n    return return_code;\n}\n"
}