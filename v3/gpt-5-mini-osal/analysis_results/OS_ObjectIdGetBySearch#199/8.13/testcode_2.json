{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'base' is declared as a mutable OS_common_record_t * but in this function it is only used for read access (used to index the global table and obtain records passed to MatchFunc, which expects a const OS_common_record_t *). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. Here 'base' (and similarly 'record') could and should be declared as const OS_common_record_t * to reflect read-only access, so the current code violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1993.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry and parameters (do not print function pointer to avoid portability issues) */\n    os_log_probe(\"ENTER: OS_ObjectIdGetBySearch lock_mode=%d idtype=%d arg=%p token=%p\",\n                 (int)lock_mode, (int)idtype, arg, (const void *)token);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    os_log_probe(\"After TransactionInit token=%p\", (const void *)token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    os_log_probe(\"After FindNextMatch return_code=%ld token=%p\", (long)return_code, (const void *)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        os_log_probe(\"Calling ConvertToken token=%p\", (const void *)token);\n        return_code = OS_ObjectIdConvertToken(token);\n        os_log_probe(\"After ConvertToken return_code=%ld token=%p\", (long)return_code, (const void *)token);\n    }\n    else\n    {\n        os_log_probe(\"No match found, cancelling transaction token=%p\", (const void *)token);\n        OS_ObjectIdTransactionCancel(token);\n        os_log_probe(\"After TransactionCancel token=%p\", (const void *)token);\n    }\n\n    os_log_probe(\"EXIT: OS_ObjectIdGetBySearch return=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}