{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function pointer typedef uses a non-const void *ref parameter: typedef bool (*OS_ObjectMatchFunc_t)(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj). The other pointer parameters are const-qualified, indicating the match callback is intended to examine but not modify the token or object. If the callback does not need to modify the data referenced by ref, that parameter should be const-qualified (const void *ref). As written, callers holding const data must cast away const to pass it, undermining const-correctness and violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/1993.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and basic parameter state */\n        fprintf(log, \"ENTER: OS_ObjectIdGetBySearch lock_mode=%d idtype=%d arg=%p token=%p\\n\",\n                (int)lock_mode, (int)idtype, arg, (const void *)token);\n\n        /* If an argument pointer is provided, attempt a small hex dump to help show what callers pass in.\n         * NOTE: This reads memory at 'arg' which is the caller's responsibility to provide correctly.\n         */\n        if (arg != NULL)\n        {\n            unsigned char *p = (unsigned char *)arg;\n            size_t i;\n\n            fprintf(log, \"arg dump (first 16 bytes):\");\n            for (i = 0; i < 16; ++i)\n            {\n                /* Print bytes in hex; this can help show if callers passed e.g. a pointer to a string literal (likely const) */\n                fprintf(log, \" %02X\", (unsigned)p[i]);\n            }\n            fprintf(log, \"\\n\");\n        }\n        fflush(log);\n    }\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"After OS_ObjectIdTransactionInit\\n\");\n        fflush(log);\n    }\n\n    /* Call remains unchanged; record entry to the Finder routine */\n    if (log != NULL)\n    {\n        fprintf(log, \"Calling OS_ObjectIdFindNextMatch with arg=%p\\n\", arg);\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdFindNextMatch returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        if (log != NULL)\n        {\n            fprintf(log, \"Match found: calling OS_ObjectIdConvertToken\\n\");\n            fflush(log);\n        }\n\n        return_code = OS_ObjectIdConvertToken(token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdConvertToken returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"No match: calling OS_ObjectIdTransactionCancel\\n\");\n            fflush(log);\n        }\n\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: OS_ObjectIdGetBySearch return_code=%d\\n\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}