{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtMemFill:\n```c\nvoid UtMemFill(void *Memory, uint32 Length)\n{\n    uint32 i;\n    uint8 *Byte_ptr = Memory;\n\n    for (i = 0; i < Length; i++)\n    {\n        Byte_ptr[i] = i;\n    }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nuint8 *Byte_ptr = Memory;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. In this function Byte_ptr is used to modify the memory (Byte_ptr[i] = i;), so it must point to a non-const uint8. Rule 8.13 would be violated if the pointer were used only for read access but was not declared to point to a const-qualified type (e.g. if the code only read from Memory it should use const uint8 *Byte_ptr = Memory;)."
}