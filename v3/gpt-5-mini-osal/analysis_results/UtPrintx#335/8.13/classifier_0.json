{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtPrintx:\n```c\nvoid UtPrintx(const void *Memory, uint32 Length)\n{\n    uint32       i;\n    uint32       j;\n    const uint8 *Byte_ptr = Memory;\n    char         OutputLine[80];\n    char *       OutPtr;\n\n    i = 0;\n    while (i < Length)\n    {\n        snprintf(OutputLine, sizeof(OutputLine), \"%16lx: \", (unsigned long)&Byte_ptr[i]);\n        OutPtr = OutputLine;\n        OutPtr += strlen(OutputLine);\n        for (j = 0; j < 16 && i < Length; j++, i++)\n        {\n            sprintf(OutPtr, \"%02X  \", Byte_ptr[i]);\n            OutPtr += 3;\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_INFO, OutputLine);\n    }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nchar *       OutPtr;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. OutPtr is used as a pointer into OutputLine and is the destination for sprintf writes (it is incremented and used to modify the contents of OutputLine), so it must point to a modifiable char buffer. Rule 8.13 requires const qualification only when the pointed-to object is not modified; that is not the case here."
}