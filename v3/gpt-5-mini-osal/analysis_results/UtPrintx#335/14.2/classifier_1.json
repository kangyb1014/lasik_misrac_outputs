{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtPrintx:\n```c\nvoid UtPrintx(const void *Memory, uint32 Length)\n{\n    uint32       i;\n    uint32       j;\n    const uint8 *Byte_ptr = Memory;\n    char         OutputLine[80];\n    char *       OutPtr;\n\n    i = 0;\n    while (i < Length)\n    {\n        snprintf(OutputLine, sizeof(OutputLine), \"%16lx: \", (unsigned long)&Byte_ptr[i]);\n        OutPtr = OutputLine;\n        OutPtr += strlen(OutputLine);\n        for (j = 0; j < 16 && i < Length; j++, i++)\n        {\n            sprintf(OutPtr, \"%02X  \", Byte_ptr[i]);\n            OutPtr += 3;\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_INFO, OutputLine);\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UtPrintx:\nuint32       i\n...\nuint32       j\n...\nuint32 Length\n...\nconst uint8 *Byte_ptr = Memory\n...\nchar *       OutPtr\n...\nchar         OutputLine[80]\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nwhile (i < Length)\n    {\n```\nFocus on the above code fragment and judge whether it violates the rule 14.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation for the fragment itself: 'while (i < Length)' is not a for statement, so MISRA C 2023 Rule 14.2 (which applies to for loops) is not applicable to that line. Note however that the function contains a for statement: for (j = 0; j < 16 && i < Length; j++, i++). That for statement would violate Rule 14.2 because it effectively uses two loop counters (j and i), the loop condition uses i while i is also modified by the loop (i++ in the third clause), and more than one loop counter is being modified in the for header/behaviour \u2014 contrary to the rule\u2019s requirement of a single loop counter and no modification of other objects used in the condition."
}