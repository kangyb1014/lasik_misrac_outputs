{
  "user_message": "An agent A claimed that the following OS_ObjectIdFindNextMatch code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFindNextMatch.\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'base' is initialized from the global OS_common_table and only used to read records (used to compute 'record' and read record->active_id). It is never used to modify the pointed objects, so it could and should be declared as pointing to a const-qualified type (const OS_common_record_t *base). Declaring it without const therefore violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER OS_ObjectIdFindNextMatch: obj_type=0, initial_obj_idx=0, obj_count=0, base=0x56443ad8e340\nITER: obj_idx=1\nITER: obj_idx (1) >= obj_count (0) -> breaking\nEXIT OS_ObjectIdFindNextMatch: return_code=-17, final_obj_idx=1, obj_id=0\nENTER OS_ObjectIdFindNextMatch: obj_type=0, initial_obj_idx=0, obj_count=0, base=0x56443ad8e340\nITER: obj_idx=1\nITER: obj_idx (1) >= obj_count (0) -> breaking\nEXIT OS_ObjectIdFindNextMatch: return_code=-17, final_obj_idx=1, obj_id=0\nENTER OS_ObjectIdFindNextMatch: obj_type=0, initial_obj_idx=0, obj_count=0, base=0x56443ad8e340\nITER: obj_idx=1\nITER: obj_idx (1) >= obj_count (0) -> breaking\nEXIT OS_ObjectIdFindNextMatch: return_code=-17, final_obj_idx=1, obj_id=0\nENTER OS_ObjectIdFindNextMatch: obj_type=0, initial_obj_idx=0, obj_count=0, base=0x56443ad8e340\nITER: obj_idx=1\nITER: obj_idx (1) >= obj_count (0) -> breaking\nEXIT OS_ObjectIdFindNextMatch: return_code=-17, final_obj_idx=1, obj_id=0\nENTER OS_ObjectIdFindNextMatch: obj_type=0, initial_obj_idx=0, obj_count=0, base=0x56443ad8e340\nITER: obj_idx=1\nITER: obj_idx (1) >= obj_count (0) -> breaking\nEXIT OS_ObjectIdFindNextMatch: return_code=-17, final_obj_idx=1, obj_id=0\nENTER OS_ObjectIdFindNextMatch: obj_type=0, initial_obj_idx=0, obj_count=0, base=0x56443ad8e340\nITER: obj_idx=1\nITER: obj_idx (1) >= obj_count (0) -> breaking\nEXIT OS_ObjectIdFindNextMatch: return_code=-17, final_obj_idx=1, obj_id=0\nENTER OS_ObjectIdFindNextMatch: obj_type=0, initial_obj_idx=0, obj_count=0, base=0x56443ad8e340\nITER: obj_idx=1\nITER: obj_idx (1) >= obj_count (0) -> breaking\nEXIT OS_ObjectIdFindNextMatch: return_code=-17, final_obj_idx=1, obj_id=0\nENTER OS_ObjectIdFindNextMatch: obj_type=0, initial_obj_idx=0, obj_count=0, base=0x56443ad8e340\nITER: obj_idx=1\nITER: obj_idx (1) >= obj_count (0) -> breaking\nEXIT OS_ObjectIdFindNextMatch: return_code=-17, final_obj_idx=1, obj_id=0\nENTER OS_ObjectIdFindNextMatch: obj_type=11, initial_obj_idx=4294967295, obj_count=14, base=0x56443ad8fd38\nITER: obj_idx=0\nITER: record=0x56443ad8fd38\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=0\nITER: obj_idx=1\nITER: record=0x56443ad8fd50\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=1\nITER: obj_idx=2\nITER: record=0x56443ad8fd68\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=2\nITER: obj_idx=3\nITER: record=0x56443ad8fd80\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=3\nITER: obj_idx=4\nITER: record=0x56443ad8fd98\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=4\nITER: obj_idx=5\nITER: record=0x56443ad8fdb0\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=5\nITER: obj_idx=6\nITER: record=0x56443ad8fdc8\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=6\nITER: obj_idx=7\nITER: record=0x56443ad8fde0\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=7\nITER: obj_idx=8\nITER: record=0x56443ad8fdf8\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=8\nITER: obj_idx=9\nITER: record=0x56443ad8fe10\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=9\nITER: obj_idx=10\nITER: record=0x56443ad8fe28\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=10\nITER: obj_idx=11\nITER: record=0x56443ad8fe40\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=11\nITER: obj_idx=12\nITER: record=0x56443ad8fe58\nITER: record->active_id=0, active_defined=0\nITER: Not a match (active_defined=0, match_result=0) for obj_idx=12\nITER: obj_idx=13\nITER: record=0x56443ad8fe70\nITER: record->active_id=0, active_defined=0\nITER: Not a mat\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ObjectIdFindNextMatch:\ntypedef bool (*OS_ObjectMatchFunc_t)(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\nstatic OS_common_record_t OS_common_table[OS_MAX_TOTAL_RECORDS]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. Rule 8.13 requires pointers to be declared as pointing to const-qualified types when they are only used for reading. In OS_ObjectIdFindNextMatch the variable base is initialized from the global OS_common_table and is only used to index/read records (it is never used to modify the pointed data). Likewise the record pointer is only read and is passed to MatchFunc, whose prototype already expects a const OS_common_record_t * for its third argument. Therefore base (and in fact record) could and should be declared as const OS_common_record_t * (and the record variable changed accordingly) to comply with MISRA C 2023 Rule 8.13. Consequently the agent A report that the code violates Rule 8.13 is correct."
}