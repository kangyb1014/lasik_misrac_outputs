{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'record' is declared as OS_common_record_t * but is only used for read-only access (checked via OS_ObjectIdDefined(record->active_id) and passed to MatchFunc which expects a const OS_common_record_t *). It could therefore be declared as const OS_common_record_t *record; to prevent modification via this pointer and satisfy the intent of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/1973.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1973.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified OS_ObjectIdFindNextMatch: preserves original logic but adds\n * logging to capture control flow and state related to the reported\n * Rule 8.13 scenario (read-only use of 'record').\n */\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    /* Entry log */\n    log_probe(\"ENTER: OS_ObjectIdFindNextMatch: token->obj_type=%u, token->obj_idx=%lu\", (unsigned)token->obj_type, (unsigned long)token->obj_idx);\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    log_probe(\"Init: base=%p, obj_count=%lu, token->obj_id=%lu\", (void *)base, (unsigned long)obj_count, (unsigned long)token->obj_id);\n\n    while (true)\n    {\n        ++token->obj_idx;\n        log_probe(\"Loop: advanced token->obj_idx=%lu (obj_count=%lu)\", (unsigned long)token->obj_idx, (unsigned long)obj_count);\n\n        if (token->obj_idx >= obj_count)\n        {\n            log_probe(\"Loop: token->obj_idx >= obj_count, breaking out\");\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n        log_probe(\"Record retrieved: record=%p\", (void *)record);\n\n        /* Evaluate the conditions in the same order as original code, but\n         * capture intermediate results for logging. */\n        bool is_defined = false;\n        bool matches = false;\n\n        /* Guard access to record pointer for logging; assume record non-NULL as original code */\n        if (record != NULL)\n        {\n            /* log the active_id value (printed as unsigned long long to be generic) */\n            log_probe(\"Record state: active_id=%llu\", (unsigned long long)record->active_id);\n\n            is_defined = OS_ObjectIdDefined(record->active_id);\n            log_probe(\"OS_ObjectIdDefined(record->active_id) -> %s\", is_defined ? \"true\" : \"false\");\n\n            if (is_defined)\n            {\n                /* Call MatchFunc only if active id is defined, preserving original short-circuit behavior */\n                matches = (MatchFunc(arg, token, record) != 0);\n                log_probe(\"MatchFunc returned -> %s\", matches ? \"true\" : \"false\");\n            }\n        }\n        else\n        {\n            log_probe(\"Warning: record is NULL\");\n        }\n\n        if (is_defined && matches)\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            log_probe(\"Match found: return_code=OS_SUCCESS, token->obj_id=%llu\", (unsigned long long)token->obj_id);\n            break;\n        }\n        else\n        {\n            log_probe(\"No match at this index: continuing search\");\n        }\n    }\n\n    log_probe(\"EXIT: OS_ObjectIdFindNextMatch: return_code=%ld, token->obj_id=%llu\", (long)return_code, (unsigned long long)token->obj_id);\n    return return_code;\n}\n"
}