{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'record' is declared as OS_common_record_t * but is only used for read-only access (used to read record->active_id and passed to MatchFunc which expects a const OS_common_record_t *). Therefore the pointer could and should be declared as const OS_common_record_t *; additionally the OS_OBJECT_TABLE_GET macro returns a non-const pointer. This violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper. Appends a single line to /tmp/logs/1973.txt. */\nstatic void OS_ObjectIdFindNextMatch_Log(const char *stage,\n                                         const void *record_ptr,\n                                         unsigned long obj_idx,\n                                         unsigned long obj_count,\n                                         unsigned long obj_id,\n                                         unsigned long obj_type,\n                                         int match_result)\n{\n    FILE *f = fopen(\"/tmp/logs/1973.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log fields relevant to reproducing the violation scenario. */\n    fprintf(f, \"%s: record=%p obj_idx=%lu obj_count=%lu obj_id=%lu obj_type=%lu match=%d\\n\",\n            stage, record_ptr, obj_idx, obj_count, obj_id, obj_type, match_result);\n\n    fclose(f);\n}\n\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log initial state before entering loop */\n    OS_ObjectIdFindNextMatch_Log(\"start\", (void *)base, (unsigned long)token->obj_idx,\n                                 (unsigned long)obj_count, (unsigned long)token->obj_id,\n                                 (unsigned long)token->obj_type, -1);\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            OS_ObjectIdFindNextMatch_Log(\"end_loop_out_of_range\", (void *)NULL,\n                                         (unsigned long)token->obj_idx,\n                                         (unsigned long)obj_count,\n                                         (unsigned long)token->obj_id,\n                                         (unsigned long)token->obj_type,\n                                         -1);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        /* Log the record pointer and its active_id before checks */\n        OS_ObjectIdFindNextMatch_Log(\"checked_record_ptr\", (void *)record,\n                                     (unsigned long)token->obj_idx,\n                                     (unsigned long)obj_count,\n                                     (unsigned long)token->obj_id,\n                                     (unsigned long)token->obj_type,\n                                     -1);\n\n        /* Preserve original short-circuit order: check active_id then call MatchFunc. */\n        if (OS_ObjectIdDefined(record->active_id))\n        {\n            int match_res = MatchFunc(arg, token, record) ? 1 : 0;\n\n            /* Log result of MatchFunc and the active_id value */\n            OS_ObjectIdFindNextMatch_Log(\"after_match_check\", (void *)record,\n                                         (unsigned long)token->obj_idx,\n                                         (unsigned long)obj_count,\n                                         (unsigned long)record->active_id,\n                                         (unsigned long)token->obj_type,\n                                         match_res);\n\n            if (match_res)\n            {\n                return_code   = OS_SUCCESS;\n                token->obj_id = record->active_id;\n\n                OS_ObjectIdFindNextMatch_Log(\"found_match\", (void *)record,\n                                             (unsigned long)token->obj_idx,\n                                             (unsigned long)obj_count,\n                                             (unsigned long)token->obj_id,\n                                             (unsigned long)token->obj_type,\n                                             match_res);\n                break;\n            }\n        }\n        else\n        {\n            /* Log that the record had an undefined id */\n            OS_ObjectIdFindNextMatch_Log(\"undefined_active_id\", (void *)record,\n                                         (unsigned long)token->obj_idx,\n                                         (unsigned long)obj_count,\n                                         (unsigned long)record->active_id,\n                                         (unsigned long)token->obj_type,\n                                         0);\n        }\n    }\n\n    return return_code;\n}\n"
}