{
  "user_message": "An agent A claimed that the following OS_ObjectIdFindNextMatch code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFindNextMatch.\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'record' is declared as OS_common_record_t * but is only used for read-only access (checked via OS_ObjectIdDefined(record->active_id) and passed to MatchFunc which expects a const OS_common_record_t *). It could therefore be declared as const OS_common_record_t *record; to prevent modification via this pointer and satisfy the intent of Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=0, token->obj_idx=0\nInit: base=0x5619678f7300, obj_count=0, token->obj_id=0\nLoop: advanced token->obj_idx=1 (obj_count=0)\nLoop: token->obj_idx >= obj_count, breaking out\nEXIT: OS_ObjectIdFindNextMatch: return_code=-17, token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=0, token->obj_idx=0\nInit: base=0x5619678f7300, obj_count=0, token->obj_id=0\nLoop: advanced token->obj_idx=1 (obj_count=0)\nLoop: token->obj_idx >= obj_count, breaking out\nEXIT: OS_ObjectIdFindNextMatch: return_code=-17, token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=0, token->obj_idx=0\nInit: base=0x5619678f7300, obj_count=0, token->obj_id=0\nLoop: advanced token->obj_idx=1 (obj_count=0)\nLoop: token->obj_idx >= obj_count, breaking out\nEXIT: OS_ObjectIdFindNextMatch: return_code=-17, token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=0, token->obj_idx=0\nInit: base=0x5619678f7300, obj_count=0, token->obj_id=0\nLoop: advanced token->obj_idx=1 (obj_count=0)\nLoop: token->obj_idx >= obj_count, breaking out\nEXIT: OS_ObjectIdFindNextMatch: return_code=-17, token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=0, token->obj_idx=0\nInit: base=0x5619678f7300, obj_count=0, token->obj_id=0\nLoop: advanced token->obj_idx=1 (obj_count=0)\nLoop: token->obj_idx >= obj_count, breaking out\nEXIT: OS_ObjectIdFindNextMatch: return_code=-17, token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=0, token->obj_idx=0\nInit: base=0x5619678f7300, obj_count=0, token->obj_id=0\nLoop: advanced token->obj_idx=1 (obj_count=0)\nLoop: token->obj_idx >= obj_count, breaking out\nEXIT: OS_ObjectIdFindNextMatch: return_code=-17, token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=0, token->obj_idx=0\nInit: base=0x5619678f7300, obj_count=0, token->obj_id=0\nLoop: advanced token->obj_idx=1 (obj_count=0)\nLoop: token->obj_idx >= obj_count, breaking out\nEXIT: OS_ObjectIdFindNextMatch: return_code=-17, token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=0, token->obj_idx=0\nInit: base=0x5619678f7300, obj_count=0, token->obj_id=0\nLoop: advanced token->obj_idx=1 (obj_count=0)\nLoop: token->obj_idx >= obj_count, breaking out\nEXIT: OS_ObjectIdFindNextMatch: return_code=-17, token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch: token->obj_type=11, token->obj_idx=4294967295\nInit: base=0x5619678f8cf8, obj_count=14, token->obj_id=0\nLoop: advanced token->obj_idx=0 (obj_count=14)\nRecord retrieved: record=0x5619678f8cf8\nRecord state: active_id=0\nOS_ObjectIdDefined(record->active_id) -> false\nNo match at this index: continuing search\nLoop: advanced token->obj_idx=1 (obj_count=14)\nRecord retrieved: record=0x5619678f8d10\nRecord state: active_id=0\nOS_ObjectIdDefined(record->active_id) -> false\nNo match at this index: continuing search\nLoop: advanced token->obj_idx=2 (obj_count=14)\nRecord retrieved: record=0x5619678f8d28\nRecord state: active_id=0\nOS_ObjectIdDefined(record->active_id) -> false\nNo match at this index: continuing search\nLoop: advanced token->obj_idx=3 (obj_count=14)\nRecord retrieved: record=0x5619678f8d40\nRecord state: active_id=0\nOS_ObjectIdDefined(record->active_id) -> false\nNo match at this index: continuing search\nLoop: advanced token->obj_idx=4 (obj_count=14)\nRecord retrieved: record=0x5619678f8d58\nRecord state: active_id=0\nOS_ObjectIdDefined(record->active_id) -> false\nNo match at this index: continuing search\nLoop: advanced token->obj_idx=5 (obj_count=14)\nRecord retrieved: record=0x5619678f8d70\nRecord state: active_id=0\nOS_ObjectIdDefined(record->active_id) -> false\nNo match at this index: continuing search\nLoop: advanced token->obj_idx=6 (obj_count=14)\nRecord retrieved: record=0x5619678f8d88\nRecord state: active_id=0\nOS_ObjectIdDefined(record->active_id) -> false\nNo match at this index: continuing search\nLoop: advanced token->obj_idx=7 (obj_count=14)\nRecord retrieved: record=0x5619678f8da0\nRecord state: active_id=0\nOS_ObjectIdDefined(record->active_id) -> false\nNo match at this index: continuing search\nLoop: advanced token->obj_idx=8 (obj_count=14)\nRecord retrieved: record=\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ObjectIdFindNextMatch:\ntypedef bool (*OS_ObjectMatchFunc_t)(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\nstatic OS_common_record_t OS_common_table[OS_MAX_TOTAL_RECORDS]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_ObjectIdFindNextMatch the local pointer variable 'record' is only used for read-only access: its active_id field is inspected and the pointer is passed to MatchFunc, which already takes a const OS_common_record_t *. There are no writes through 'record' in the function. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so 'record' should be declared as const OS_common_record_t *record. This change is safe: assigning the address returned by OS_OBJECT_TABLE_GET (an OS_common_record_t *) to a const OS_common_record_t * is allowed, and the macro usage and MatchFunc prototype are compatible. (Optionally 'base' could also be made const if it is never used to modify objects here.)"
}