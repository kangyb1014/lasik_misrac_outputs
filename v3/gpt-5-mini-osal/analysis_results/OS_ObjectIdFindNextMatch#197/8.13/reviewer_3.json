{
  "user_message": "An agent A claimed that the following OS_ObjectIdFindNextMatch code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFindNextMatch.\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'base' is declared as a mutable pointer (OS_common_record_t *base) but is only used for read-only access in this function (it is assigned from the global OS_common_table and only indexed/read via OS_OBJECT_TABLE_GET). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (e.g. const OS_common_record_t *base). Thus the assignment 'base = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];' violates the rule (the pointer could and should be declared const). Note: similarly, 'record' could be declared const OS_common_record_t *record and passed unchanged to MatchFunc which accepts a const pointer.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: OS_ObjectIdFindNextMatch token->obj_type=0 token->obj_idx=0 token->obj_id=0\nbase=0x555704bba300 obj_count=0 base_index=0\nloop: token->obj_idx=1 (after increment)\nloop-exit: token->obj_idx >= obj_count (1 >= 0)\nEXIT: return_code=-17 token->obj_idx=1 token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch token->obj_type=0 token->obj_idx=0 token->obj_id=0\nbase=0x555704bba300 obj_count=0 base_index=0\nloop: token->obj_idx=1 (after increment)\nloop-exit: token->obj_idx >= obj_count (1 >= 0)\nEXIT: return_code=-17 token->obj_idx=1 token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch token->obj_type=0 token->obj_idx=0 token->obj_id=0\nbase=0x555704bba300 obj_count=0 base_index=0\nloop: token->obj_idx=1 (after increment)\nloop-exit: token->obj_idx >= obj_count (1 >= 0)\nEXIT: return_code=-17 token->obj_idx=1 token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch token->obj_type=0 token->obj_idx=0 token->obj_id=0\nbase=0x555704bba300 obj_count=0 base_index=0\nloop: token->obj_idx=1 (after increment)\nloop-exit: token->obj_idx >= obj_count (1 >= 0)\nEXIT: return_code=-17 token->obj_idx=1 token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch token->obj_type=0 token->obj_idx=0 token->obj_id=0\nbase=0x555704bba300 obj_count=0 base_index=0\nloop: token->obj_idx=1 (after increment)\nloop-exit: token->obj_idx >= obj_count (1 >= 0)\nEXIT: return_code=-17 token->obj_idx=1 token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch token->obj_type=0 token->obj_idx=0 token->obj_id=0\nbase=0x555704bba300 obj_count=0 base_index=0\nloop: token->obj_idx=1 (after increment)\nloop-exit: token->obj_idx >= obj_count (1 >= 0)\nEXIT: return_code=-17 token->obj_idx=1 token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch token->obj_type=0 token->obj_idx=0 token->obj_id=0\nbase=0x555704bba300 obj_count=0 base_index=0\nloop: token->obj_idx=1 (after increment)\nloop-exit: token->obj_idx >= obj_count (1 >= 0)\nEXIT: return_code=-17 token->obj_idx=1 token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch token->obj_type=0 token->obj_idx=0 token->obj_id=0\nbase=0x555704bba300 obj_count=0 base_index=0\nloop: token->obj_idx=1 (after increment)\nloop-exit: token->obj_idx >= obj_count (1 >= 0)\nEXIT: return_code=-17 token->obj_idx=1 token->obj_id=0\nENTER: OS_ObjectIdFindNextMatch token->obj_type=11 token->obj_idx=-1 token->obj_id=0\nbase=0x555704bbbcf8 obj_count=14 base_index=277\nloop: token->obj_idx=0 (after increment)\nrecord=0x555704bbbcf8 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 0 (active_id=0)\nloop: token->obj_idx=1 (after increment)\nrecord=0x555704bbbd10 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 1 (active_id=0)\nloop: token->obj_idx=2 (after increment)\nrecord=0x555704bbbd28 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 2 (active_id=0)\nloop: token->obj_idx=3 (after increment)\nrecord=0x555704bbbd40 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 3 (active_id=0)\nloop: token->obj_idx=4 (after increment)\nrecord=0x555704bbbd58 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 4 (active_id=0)\nloop: token->obj_idx=5 (after increment)\nrecord=0x555704bbbd70 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 5 (active_id=0)\nloop: token->obj_idx=6 (after increment)\nrecord=0x555704bbbd88 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 6 (active_id=0)\nloop: token->obj_idx=7 (after increment)\nrecord=0x555704bbbda0 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 7 (active_id=0)\nloop: token->obj_idx=8 (after increment)\nrecord=0x555704bbbdb8 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 8 (active_id=0)\nloop: token->obj_idx=9 (after increment)\nrecord=0x555704bbbdd0 record->active_id=0\nOS_ObjectIdDefined(record->active_id)=0\nrecord not defined at index 9 (active_id=0)\nloop: token->obj_idx=10 (after increment)\nrecord=0x555704bbbde8 record->active_id=0\nOS_ObjectIdDefined(record->active\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ObjectIdFindNextMatch:\ntypedef bool (*OS_ObjectMatchFunc_t)(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\nstatic OS_common_record_t OS_common_table[OS_MAX_TOTAL_RECORDS]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In this function both local pointers (base and record) are only used for read-only access: base is assigned from the global OS_common_table and only indexed/read via OS_OBJECT_TABLE_GET, and record is only dereferenced to read fields and then passed to MatchFunc which already expects a const OS_common_record_t *. Therefore both could and should be declared const (e.g. const OS_common_record_t *base; const OS_common_record_t *record;) to comply with MISRA C 2023 Rule 8.13. Assigning the address of a non-const object to a pointer-to-const is allowed, and the existing macro and MatchFunc prototype are compatible with making these pointers const. No evidence in the shown code prevents making them const-qualified."
}