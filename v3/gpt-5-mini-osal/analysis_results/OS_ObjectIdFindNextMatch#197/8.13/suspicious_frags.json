{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ObjectIdFindNextMatch:\ntypedef bool (*OS_ObjectMatchFunc_t)(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\nstatic OS_common_record_t OS_common_table[OS_MAX_TOTAL_RECORDS]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "static OS_common_record_t OS_common_table[OS_MAX_TOTAL_RECORDS]",
    "OS_common_record_t *record;",
    "base = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];",
    "OS_common_record_t *base;",
    "record = OS_OBJECT_TABLE_GET(base, *token);",
    "if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))"
  ],
  "explanation": "Fragments not selected for investigation: the function parameter 'OS_object_token_t *token' is intentionally non-const because the function modifies token->obj_idx and token->obj_id; therefore it must remain mutable. The callback typedef OS_ObjectMatchFunc_t already declares its token and object parameters as const (const OS_object_token_t *token, const OS_common_record_t *obj), so calls to the callback are type-compatible when passing non-const pointers (a pointer to non-const can be passed to a parameter expecting pointer-to-const). The 'void *arg' parameter is an opaque user reference for the callback and may legitimately be non-const because callbacks might need to modify pointed-to data. Other local uses (incrementing token->obj_idx, assigning token->obj_id, loop control) all require mutable state and therefore are not appropriate to change to const. The listed fragments are the places where pointers to OS_common_record_t (and the table/macro that produce them) are declared or used without const qualification and thus should be investigated to determine whether they can be safely changed to point to const-qualified types under MISRA C 2023 Rule 8.13."
}