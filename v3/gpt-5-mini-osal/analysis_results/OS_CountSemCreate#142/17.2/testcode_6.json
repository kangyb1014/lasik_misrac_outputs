{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via event callback: OS_CountSemCreate calls OS_ObjectIdAllocateNew, which calls OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, ...). OS_NotifyEvent invokes the application-provided EventHandler callback. If that EventHandler calls OS_CountSemCreate (or any other OS API that leads back to OS_ObjectIdAllocateNew/OS_CountSemCreate), an indirect recursive call chain occurs: OS_CountSemCreate -> OS_ObjectIdAllocateNew -> OS_NotifyEvent -> EventHandler -> OS_CountSemCreate. This constitutes an indirect self-call and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1426.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Helper probe function: append a structured log line to /tmp/logs/1426.txt */\nstatic void os_countsem_log(const char *stage,\n                            int reentrancy,\n                            long return_code,\n                            const void *token_addr,\n                            size_t token_size,\n                            const void *countsem_ptr,\n                            const void *sem_id_ptr,\n                            const char *sem_name,\n                            unsigned sem_initial_value,\n                            unsigned options)\n{\n    FILE *f = fopen(\"/tmp/logs/1426.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Timestamp-like marker not used to avoid dependencies; each line marks a stage */\n        fprintf(f,\n                \"[OS_CountSemCreate] stage=%s reentrancy=%d return_code=%ld token_addr=%p token_size=%zu countsem_ptr=%p sem_id_ptr=%p sem_name=%s sem_initial=%u options=%u\\n\",\n                stage,\n                reentrancy,\n                return_code,\n                token_addr,\n                token_size,\n                countsem_ptr,\n                sem_id_ptr,\n                (sem_name != NULL) ? sem_name : \"(null)\",\n                sem_initial_value,\n                options);\n        fclose(f);\n    }\n}\n\n/* Re-entrant-aware wrapper inserted into the original function to capture nested calls. */\nstatic int os_countsem_reentrancy_counter = 0;\n\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Log entry and increment reentrancy counter so nested invocations are visible in the log. */\n    os_countsem_reentrancy_counter += 1;\n    os_countsem_log(\"entry\",\n                    os_countsem_reentrancy_counter,\n                    (long)0,\n                    (const void *)&token,\n                    sizeof(token),\n                    NULL,\n                    (const void *)sem_id,\n                    sem_name,\n                    (unsigned)sem_initial_value,\n                    (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt and token address/size. */\n    os_countsem_log(\"after_ObjectIdAllocateNew\",\n                    os_countsem_reentrancy_counter,\n                    (long)return_code,\n                    (const void *)&token,\n                    sizeof(token),\n                    NULL,\n                    (const void *)sem_id,\n                    sem_name,\n                    (unsigned)sem_initial_value,\n                    (unsigned)options);\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Log the table lookup result (pointer to internal record). */\n        os_countsem_log(\"after_OBJECT_TABLE_GET\",\n                        os_countsem_reentrancy_counter,\n                        (long)return_code,\n                        (const void *)&token,\n                        sizeof(token),\n                        (const void *)countsem,\n                        (const void *)sem_id,\n                        sem_name,\n                        (unsigned)sem_initial_value,\n                        (unsigned)options);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Log after initialization of object table entry. */\n        os_countsem_log(\"after_OBJECT_INIT\",\n                        os_countsem_reentrancy_counter,\n                        (long)return_code,\n                        (const void *)&token,\n                        sizeof(token),\n                        (const void *)countsem,\n                        (const void *)sem_id,\n                        sem_name,\n                        (unsigned)sem_initial_value,\n                        (unsigned)options);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        os_countsem_log(\"before_CountSemCreate_Impl\",\n                        os_countsem_reentrancy_counter,\n                        (long)return_code,\n                        (const void *)&token,\n                        sizeof(token),\n                        (const void *)countsem,\n                        (const void *)sem_id,\n                        sem_name,\n                        (unsigned)sem_initial_value,\n                        (unsigned)options);\n\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Log result of OS-specific implementation. */\n        os_countsem_log(\"after_CountSemCreate_Impl\",\n                        os_countsem_reentrancy_counter,\n                        (long)return_code,\n                        (const void *)&token,\n                        sizeof(token),\n                        (const void *)countsem,\n                        (const void *)sem_id,\n                        sem_name,\n                        (unsigned)sem_initial_value,\n                        (unsigned)options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Log after finalization. Do not attempt to dereference sem_id; just log pointer. */\n        os_countsem_log(\"after_ObjectIdFinalizeNew\",\n                        os_countsem_reentrancy_counter,\n                        (long)return_code,\n                        (const void *)&token,\n                        sizeof(token),\n                        (const void *)countsem,\n                        (const void *)sem_id,\n                        sem_name,\n                        (unsigned)sem_initial_value,\n                        (unsigned)options);\n    }\n\n    /* Decrement reentrancy counter and log exit state. */\n    os_countsem_reentrancy_counter -= 1;\n    os_countsem_log(\"exit\",\n                    os_countsem_reentrancy_counter,\n                    (long)return_code,\n                    (const void *)&token,\n                    sizeof(token),\n                    (const void *)((return_code == OS_SUCCESS) ? countsem : NULL),\n                    (const void *)sem_id,\n                    sem_name,\n                    (unsigned)sem_initial_value,\n                    (unsigned)options);\n\n    return return_code;\n}\n"
}