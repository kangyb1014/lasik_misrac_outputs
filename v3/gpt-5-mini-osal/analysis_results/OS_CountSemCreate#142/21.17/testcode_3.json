{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro calls strncpy(ref->namefield, nameval, sizeof(ref->namefield)-1) without ensuring the source object (nameval) is valid for at least that many bytes. strncpy may read up to n bytes from nameval; if the caller passes a pointer to a shorter/non\u2011nul\u2011terminated buffer (for example, a char array of length 10 while sizeof(ref->namefield)-1 is 19) this will cause reads beyond the bounds of the source object. Although memset ensures the destination is large enough and will remain NUL-terminated, the macro itself does not guarantee the source buffer size/termination, so the code can violate Rule 21.17 in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1429.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <string.h>\n\n/*\n * Probe logging helper - append human-readable trace lines to /tmp/logs/1429.txt\n * This helper does not read the contents of sem_name (to avoid causing additional\n * out-of-bounds accesses). It logs pointer values, sizes computed from destination\n * objects (compile-time sizeof on members), and return codes to provide evidence\n * of the control flow that may lead to the reported strncpy over-read scenario.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    /* Ensure the directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1429.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Log entry and parameters (do not dereference sem_name) */\n    probe_log(\"ENTER OS_CountSemCreate: sem_id=%p sem_name=%p sem_initial_value=%u options=%u\",\n              (void *)sem_id, (void *)sem_name, (unsigned)sem_initial_value, (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    probe_log(\"OS_ObjectIdAllocateNew returned %d, token=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n        probe_log(\"Allocated table entry: countsem=%p\", (void *)countsem);\n\n        /* Log size information for the destination namefield used by OS_OBJECT_INIT.\n         * We use sizeof on the destination member (compile-time) to determine the\n         * number of bytes that OS_OBJECT_INIT is likely to request when it copies\n         * the provided sem_name (e.g. via strncpy(..., sizeof(dest)-1)).\n         * NOTE: We DO NOT read sem_name contents here to avoid any additional\n         * potential out-of-bounds reads; we only log the pointer and the destination\n         * size so that downstream analysis can determine whether the source buffer\n         * could be too small for the requested copy length.\n         */\n        {\n            size_t dest_size = sizeof(countsem->obj_name);\n            size_t requested_n = (dest_size > 0) ? (dest_size - 1) : 0;\n\n            probe_log(\"OS_OBJECT_INIT about to run: countsem=%p obj_name_dest_size=%zu requested_copy_n=%zu sem_name_ptr=%p\",\n                      (void *)countsem, dest_size, requested_n, (void *)sem_name);\n\n            /* If the requested_n is large, record that the macro will request that many\n             * bytes from sem_name and that the source's actual length is not verified here.\n             */\n            if (requested_n > 0)\n            {\n                probe_log(\"WARNING: OS_OBJECT_INIT will copy up to %zu bytes from sem_name. The source buffer length is not verified here; this may cause reads beyond the source bounds if sem_name is shorter than %zu.\",\n                          requested_n, requested_n);\n            }\n        }\n\n        /* Reset the table entry and save the name (this is where the implementation\n         * macro typically performs the strncpy). We keep the original logic but add\n         * logging before/after to capture the control flow.\n         */\n        probe_log(\"Calling OS_OBJECT_INIT(token=%p, countsem=%p, obj_name, sem_name=%p)\", (void *)&token, (void *)countsem, (void *)sem_name);\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n        probe_log(\"Returned from OS_OBJECT_INIT\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        probe_log(\"Calling OS_CountSemCreate_Impl(token=%p, sem_initial_value=%u, options=%u)\", (void *)&token, (unsigned)sem_initial_value, (unsigned)options);\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n        probe_log(\"OS_CountSemCreate_Impl returned %d\", (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        probe_log(\"OS_ObjectIdFinalizeNew returned %d final_sem_id=%p\", (int)return_code, (void *)sem_id);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdAllocateNew failed with %d; skipping allocation/finalize\", (int)return_code);\n    }\n\n    probe_log(\"EXIT OS_CountSemCreate returning %d\", (int)return_code);\n    return return_code;\n}\n"
}