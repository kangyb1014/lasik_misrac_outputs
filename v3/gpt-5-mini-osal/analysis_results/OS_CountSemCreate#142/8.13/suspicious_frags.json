{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemCreate:\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char obj_name[OS_MAX_API_NAME];\n} OS_count_sem_internal_record_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);",
    "return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);",
    "return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);"
  ],
  "explanation": "Other pointer uses in this function do not need investigation for Rule 8.13: \n- The parameter sem_name is already a pointer-to-const (const char *), so it complies with the rule.\n- The parameter sem_id is an output parameter (osal_id_t *sem_id) that the function writes to; making it a pointer-to-const would prevent the intended update, so it should remain non-const.\n- The local pointer OS_count_sem_internal_record_t *countsem is subsequently initialized and modified (OS_OBJECT_INIT writes into the record's obj_name), so it must be a pointer to a mutable object and should not be converted to pointer-to-const.\n- The macros OS_CHECK_POINTER and OS_OBJECT_INIT operate on the above pointers/objects in ways that require mutable access or only perform checks; they do not indicate missing const qualification.\n\nThe three call sites listed in suspicious_frags pass the address of the local token object to other routines. Those callee parameter types cannot be confirmed from this snippet; they should be investigated to determine whether the corresponding pointer parameters in the callee prototypes could be const-qualified (i.e., whether the callees only read from the token and do not modify it)."
}