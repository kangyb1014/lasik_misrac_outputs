{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'timebase' is declared as a pointer to a non-const OS_timebase_internal_record_t (OS_timebase_internal_record_t *timebase) but is only used for reading fields (nominal_interval_time, freerun_time, accuracy_usec). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Declaring it as 'const OS_timebase_internal_record_t *timebase' would satisfy the rule. Assigning the address of the non-const global array (OS_timebase_table) to a pointer-to-const is permitted, so changing the declaration has no negative effect.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "static void OS_TimeBaseGetInfo_Log(const char *stage, osal_id_t timebase_id, OS_common_record_t *record, const OS_timebase_internal_record_t *timebase, int32 return_code, const OS_object_token_t *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2683.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic control-flow / state snapshot */\n    fprintf(f, \"[OS_TimeBaseGetInfo] stage=%s timebase_id=%llu return_code=%d token_ptr=%p record_ptr=%p timebase_ptr=%p\\n\",\n            stage,\n            (unsigned long long)timebase_id,\n            (int)return_code,\n            (const void *)token_ptr,\n            (const void *)record,\n            (const void *)timebase);\n\n    if (record != NULL)\n    {\n        /* record->name_entry is expected to be a NUL-terminated string */\n        fprintf(f, \"  record->name_entry='%s' creator=%llu\\n\",\n                record->name_entry != NULL ? record->name_entry : \"(null)\",\n                (unsigned long long)record->creator);\n    }\n\n    if (timebase != NULL)\n    {\n        /* Log fields that are read by the function so callers can see they're only read */\n        fprintf(f, \"  timebase->nominal_interval_time=%llu freerun_time=%llu accuracy_usec=%llu\\n\",\n                (unsigned long long)timebase->nominal_interval_time,\n                (unsigned long long)timebase->freerun_time,\n                (unsigned long long)timebase->accuracy_usec);\n    }\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /* Log after parameter check */\n    OS_TimeBaseGetInfo_Log(\"after_param_check\", timebase_id, NULL, NULL, 0, NULL);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log incorrect object state path */\n        OS_TimeBaseGetInfo_Log(\"incorrect_obj_state\", timebase_id, NULL, NULL, OS_ERR_INCORRECT_OBJ_STATE, NULL);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    /* Attempt to get the object by id */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TimeBaseGetInfo_Log(\"after_ObjectIdGetById\", timebase_id, NULL, NULL, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the record and timebase contents read from tables */\n        OS_TimeBaseGetInfo_Log(\"before_populate_prop\", timebase_id, record, timebase, return_code, &token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        /* Log after calling the implementation hook */\n        OS_TimeBaseGetInfo_Log(\"after_Impl_call\", timebase_id, record, timebase, return_code, &token);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_TimeBaseGetInfo_Log(\"after_release\", timebase_id, record, timebase, return_code, NULL);\n    }\n    else\n    {\n        /* Log failure path from ObjectIdGetById */\n        OS_TimeBaseGetInfo_Log(\"ObjectIdGetById_failed\", timebase_id, NULL, NULL, return_code, NULL);\n    }\n\n    /* Final return code logged for completeness */\n    OS_TimeBaseGetInfo_Log(\"function_exit\", timebase_id, NULL, NULL, return_code, NULL);\n\n    return return_code;\n}\n"
}