{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'timebase' is declared as a non-const pointer (OS_timebase_internal_record_t *timebase) but is assigned from OS_OBJECT_TABLE_GET(OS_timebase_table, token) and only used for read-only accesses (nominal_interval_time, freerun_time, accuracy_usec). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (i.e. declared as const OS_timebase_internal_record_t *timebase).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper - append-only to avoid interfering with program state */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2683.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    probe_log(\"ENTRY: OS_TimeBaseGetInfo called: timebase_id=%llu, timebase_prop=%p\",\n              (unsigned long long)(uintptr_t)timebase_id,\n              (void *)timebase_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n    probe_log(\"After OS_CHECK_POINTER\");\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    probe_log(\"Context check: objtype=%u\", (unsigned)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log(\"Early return: called from a timebase callback (incorrect obj state)\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    probe_log(\"Zeroed output structure at %p (size=%zu)\", (void *)timebase_prop, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    probe_log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        probe_log(\"Lookups: record=%p, timebase=%p, token_local_addr=%p\",\n                  (void *)record, (void *)timebase, (void *)&token);\n\n        /* Log record contents that are safe to read */\n        if (record != NULL)\n        {\n            /* record->name_entry is expected to be a string buffer */\n            probe_log(\"Record: name_entry=\\\"%s\\\", creator=%llu\",\n                      record->name_entry != NULL ? record->name_entry : \"(null)\",\n                      (unsigned long long)(uintptr_t)record->creator);\n        }\n        else\n        {\n            probe_log(\"Record pointer is NULL\");\n        }\n\n        /* Log timebase internals (read-only accesses in the original code) */\n        if (timebase != NULL)\n        {\n            probe_log(\"Timebase internals: nominal_interval_time=%llu, freerun_time=%llu, accuracy_usec=%llu\",\n                      (unsigned long long)(uintptr_t)timebase->nominal_interval_time,\n                      (unsigned long long)(uintptr_t)timebase->freerun_time,\n                      (unsigned long long)(uintptr_t)timebase->accuracy_usec);\n        }\n        else\n        {\n            probe_log(\"Timebase pointer is NULL\");\n        }\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        probe_log(\"Filled output: name=\\\"%s\\\", creator=%llu, nominal_interval_time=%llu, freerun_time=%llu, accuracy=%llu\",\n                  timebase_prop->name,\n                  (unsigned long long)(uintptr_t)timebase_prop->creator,\n                  (unsigned long long)(uintptr_t)timebase_prop->nominal_interval_time,\n                  (unsigned long long)(uintptr_t)timebase_prop->freerun_time,\n                  (unsigned long long)(uintptr_t)timebase_prop->accuracy);\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n        probe_log(\"OS_TimeBaseGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Released object token\");\n    }\n    else\n    {\n        probe_log(\"ObjectIdGetById failed, skipping lookups and leaving return_code=%ld\", (long)return_code);\n    }\n\n    probe_log(\"EXIT: OS_TimeBaseGetInfo returning %ld\", (long)return_code);\n    return return_code;\n}\n"
}