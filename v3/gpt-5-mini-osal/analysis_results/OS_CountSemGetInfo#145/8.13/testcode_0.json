{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'record' is assigned via OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token) which yields an OS_common_record_t *; in this function 'record' is only used for reading (strncpy from record->name_entry and reading record->creator). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (i.e. const OS_common_record_t *record). The underlying declaration OS_global_count_sem_table is OS_common_record_t *const (pointer is const but pointee is not), so the macro and table should instead provide a pointer to const (e.g. const OS_common_record_t * const) to avoid this violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n#include <string.h>\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    FILE *logf = fopen(\"/tmp/logs/1453.txt\", \"a\");\n    time_t now = time(NULL);\n    if (logf)\n    {\n        fprintf(logf, \"[%lld] Enter OS_CountSemGetInfo: sem_id=%llu, count_prop=%p\\n\",\n                (long long)now, (unsigned long long)sem_id, (void *)count_prop);\n    }\n\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n    if (logf)\n    {\n        fprintf(logf, \"[%lld] Parameter check passed (count_prop != NULL)\\n\", (long long)time(NULL));\n    }\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n    if (logf)\n    {\n        fprintf(logf, \"[%lld] count_prop zeroed\\n\", (long long)time(NULL));\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (logf)\n    {\n        fprintf(logf, \"[%lld] OS_ObjectIdGetById returned %ld\\n\", (long long)time(NULL), (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture the record pointer returned from the global table */\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n        if (logf)\n        {\n            fprintf(logf, \"[%lld] OS_OBJECT_TABLE_GET returned record=%p\\n\", (long long)time(NULL), (void *)record);\n        }\n\n        /* The original logic reads from record here; keep the same control flow and behavior. */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        if (logf)\n        {\n            fprintf(logf, \"[%lld] After copy: count_prop->name=\\\"%s\\\", count_prop->creator=%llu\\n\",\n                    (long long)time(NULL), (char *)count_prop->name, (unsigned long long)count_prop->creator);\n        }\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n        if (logf)\n        {\n            fprintf(logf, \"[%lld] OS_CountSemGetInfo_Impl returned %ld\\n\", (long long)time(NULL), (long)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n        if (logf)\n        {\n            fprintf(logf, \"[%lld] OS_ObjectIdRelease called for token=%p\\n\", (long long)time(NULL), (void *)&token);\n        }\n    }\n    else\n    {\n        if (logf)\n        {\n            fprintf(logf, \"[%lld] OS_CountSemGetInfo: ObjectIdGetById failed, skipping record access\\n\", (long long)time(NULL));\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"[%lld] Exit OS_CountSemGetInfo returning %ld\\n\", (long long)time(NULL), (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}