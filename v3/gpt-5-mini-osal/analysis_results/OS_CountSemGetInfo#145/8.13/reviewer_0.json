{
  "user_message": "An agent A claimed that the following OS_CountSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemGetInfo.\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'record' is assigned via OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token) which yields an OS_common_record_t *; in this function 'record' is only used for reading (strncpy from record->name_entry and reading record->creator). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (i.e. const OS_common_record_t *record). The underlying declaration OS_global_count_sem_table is OS_common_record_t *const (pointer is const but pointee is not), so the macro and table should instead provide a pointer to const (e.g. const OS_common_record_t * const) to avoid this violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1756098030] Enter OS_CountSemGetInfo: sem_id=3735928559, count_prop=0x7fff2c841540\n[1756098030] Parameter check passed (count_prop != NULL)\n[1756098030] count_prop zeroed\n[1756098030] OS_ObjectIdGetById returned -35\n[1756098030] OS_CountSemGetInfo: ObjectIdGetById failed, skipping record access\n[1756098030] Exit OS_CountSemGetInfo returning -35\n[1756098030] Enter OS_CountSemGetInfo: sem_id=0, count_prop=0x7fff2c841540\n[1756098030] Parameter check passed (count_prop != NULL)\n[1756098030] count_prop zeroed\n[1756098030] OS_ObjectIdGetById returned -35\n[1756098030] OS_CountSemGetInfo: ObjectIdGetById failed, skipping record access\n[1756098030] Exit OS_CountSemGetInfo returning -35\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemGetInfo:\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_count_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_count_sem_table\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nint32 OS_CountSemGetInfo_Impl(const OS_object_token_t *token, OS_count_sem_prop_t *count_prop)\n{\n    int                                 sval;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_getvalue(&impl->id, &sval) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* put the info into the structure */\n    count_prop->value = sval;\n    return OS_SUCCESS;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_SUCCESS (0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_CountSemGetInfo the local variable record is used only for reads (strncpy from record->name_entry and reading record->creator) and is not modified. Per MISRA C 2023 Rule 8.13 a pointer that is not used to modify its pointee should be declared to point to a const-qualified type. The current declaration OS_common_record_t *record does not qualify the pointee as const. Note that OS_global_count_sem_table is declared as OS_common_record_t *const, which makes the pointer-to-table itself const but does not make the table elements (the pointees) const; therefore the macro OS_OBJECT_TABLE_GET yields an OS_common_record_t * (non-const), so the local variable should be declared as const OS_common_record_t *record (assigning a non-const pointer to a pointer-to-const is allowed). Alternatively, the table/macro could be changed to expose const-qualified pointees (e.g. const OS_common_record_t * const) if the records are intended to be read-only. Either way, the current code violates Rule 8.13."
}