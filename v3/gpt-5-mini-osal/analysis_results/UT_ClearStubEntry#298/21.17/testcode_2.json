{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy source length is computed as ActualCopy = TotalSize - Position without validating that Position <= TotalSize and without checking BasePtr != NULL. If Position > TotalSize (e.g. TotalSize = 10, Position = 20) the subtraction underflows to a huge size_t value; if MaxSize does not constrain this to a safe value, memcpy(LocalBuffer, &BasePtr[Position], ActualCopy) will read beyond the allocated BasePtr (out-of-bounds). Also if BasePtr is NULL there is no null check before indexing. This can result in accesses beyond the bounds of the objects passed to memcpy, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2989.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\nPlease provide the modified UT_ClearStubEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/*\n * Modified UT_ClearStubEntry with logging probes to capture control flow and\n * state relevant to potential out-of-bounds string/memory operations.\n * Logs are appended to: /tmp/logs/2989.txt\n *\n * NOTE: This function preserves the original logic and condition checks.\n * It intentionally evaluates the same expressions as the original code so\n * behavior (including potential crashes on NULL StubPtr) remains unchanged.\n */\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    FILE *log = fopen(\"/tmp/logs/2989.txt\", \"a\");\n\n    /* Log entry and pointer value first */\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_ClearStubEntry called: StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    /*\n     * Preserve original behavior: evaluate the same condition as before.\n     * Note: dereferencing StubPtr here follows the original function's\n     * dereferences (i.e. no extra NULL check to avoid changing behavior).\n     */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        /* Log the values that decided to call free */\n        if (log != NULL)\n        {\n            fprintf(log, \"  Condition true -> free will be called\\n\");\n            fprintf(log, \"    EntryType=0x%lx\\n\", (unsigned long)StubPtr->EntryType);\n            fprintf(log, \"    ModeFlags=0x%lx\\n\", (unsigned long)StubPtr->ModeFlags);\n            fprintf(log, \"    BasePtr=%p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fflush(log);\n        }\n\n        /* Free the allocated buffer as in the original implementation */\n        free(StubPtr->Data.Buff.BasePtr);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  free() returned for BasePtr=%p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"  Condition false -> free not called\\n\");\n            /* Try to log the fields that influenced the decision; if StubPtr is invalid this will\n             * have already crashed earlier as in the original code, so this is only reached when\n             * safe to dereference. */\n            fprintf(log, \"    EntryType=0x%lx\\n\", (unsigned long)StubPtr->EntryType);\n            fprintf(log, \"    ModeFlags=0x%lx\\n\", (unsigned long)StubPtr->ModeFlags);\n            fprintf(log, \"    BasePtr=%p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fflush(log);\n        }\n    }\n\n    /* Clear the stub entry as in the original implementation */\n    memset(StubPtr, 0, sizeof(*StubPtr));\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  memset performed on StubPtr=%p (sizeof=*StubPtr=%zu)\\n\", (void *)StubPtr, sizeof(*StubPtr));\n        fprintf(log, \"UT_ClearStubEntry exit\\n\\n\");\n        fclose(log);\n    }\n}\n"
}