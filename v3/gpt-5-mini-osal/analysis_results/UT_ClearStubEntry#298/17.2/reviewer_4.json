{
  "user_message": "An agent A claimed that the following UT_ClearStubEntry code violates the MISRA C 2023 rule 17.2.\n<misra_rule>\nMISRA C 2023 Rule 17.2 is Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<target_code>\nHere is the original code of UT_ClearStubEntry.\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code invokes function-pointer callbacks (SimpleHandler/VaHandler) that may be set to the same function (UT_DefaultStubImplWithArgs) or to another function that eventually calls UT_DefaultStubImplWithArgs. If a registered callback is the default stub implementation itself (or a function that calls it), the call here creates an indirect recursive call chain (UT_DefaultStubImplWithArgs -> callback -> UT_DefaultStubImplWithArgs), which violates MISRA C 2023 Rule 17.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nUT_ClearStubEntry_enter: StubPtr=0x5645269a4ca0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a4ca0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a4dc0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a4dc0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a4ee0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a4ee0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5000, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5000, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5120, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5120, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5240, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5240, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5360, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5360, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5480, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5480, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a55a0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a55a0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a56c0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a56c0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a57e0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a57e0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5900, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5900, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5a20, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5a20, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5b40, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5b40, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5c60, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5c60, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5d80, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5d80, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5ea0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5ea0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a5fc0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a5fc0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a60e0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a60e0, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a6200, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_after_clear: StubPtr=0x5645269a6200, EntryType=0, ModeFlags=0x00000000, BasePtr=(nil)\nUT_ClearStubEntry_enter: StubPtr=0x5645269a6320, EntryTy\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function UT_ClearStubEntry:\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n...\nvoid UT_ClearDeferredRetcode(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    while (true)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);\n        if (StubPtr == NULL)\n        {\n            break;\n        }\n        UT_ClearStubEntry(StubPtr);\n    }\n}\n...\nvoid UT_ClearDefaultReturnValue(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);\n    if (StubPtr != NULL)\n    {\n        UT_ClearStubEntry(StubPtr);\n    }\n}\n...\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (ReturnSize > 0)\n    {\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n            StubPtr = NULL;\n        }\n\n        if (StubPtr == NULL)\n        {\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n            if (StubPtr == NULL)\n            {\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            StubPtr->Data.Buff.Position       = 0;\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n        }\n    }\n}\n...\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n...\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n...\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n...\nint32 UT_DefaultStubImplWithArgs(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, va_list ArgList)\n{\n    const char *         RetcodeString;\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *ContextTblPtr;\n    UT_StubTableEntry_t *RvcPtr;\n    UT_StubContext_t     LocalContext;\n    uint32               Counter;\n    va_list              ArgListCopy;\n    bool                 GotInt32StatusFromHook;\n\n    /*\n     * In this implementation a context is _always_ needed.\n     *\n     * First see if the stub has an already-registered context.  Any non-trivial stub\n     * should already have registered some arguments and/or a return code buffer.\n     *\n     * To handle an old-style/incomplete stub function or simple void/void stubs that\n     * do not have any arguments, a blank entry can be created on the fly.\n     */\n    ContextTblPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (ContextTblPtr != NULL)\n    {\n        LocalContext = ContextTblPtr->Data.Context;\n\n        /* Always clear the context entry -- the next call will have a different one */\n        UT_ClearStubEntry(ContextTblPtr);\n    }\n    else\n    {\n        memset(&LocalContext, 0, sizeof(LocalContext));\n    }\n\n    RvcPtr = UT_Stub_FindRetvalConfig(FuncKey);\n\n    /* For legacy compatibility, determine the int32 status code (this may or may not be relevent) */\n    if (RvcPtr != NULL && UT_Stub_IsValueCompatible(&RvcPtr->Data.Rvc, \"int32\", UT_ValueGenre_INTEGER))\n    {\n        LocalContext.Int32StatusIsSet =\n            UT_LoadRetval(&LocalContext.Int32StatusCode, sizeof(LocalContext.Int32StatusCode), &RvcPtr->Data.Rvc.Buf,\n                          UT_ValueGenre_INTEGER);\n    }\n\n    if (!LocalContext.Int32StatusIsSet)\n    {\n        LocalContext.Int32StatusCode = DefaultRc;\n    }\n\n    if (FunctionName != NULL)\n    {\n        if (!LocalContext.Int32StatusIsSet)\n        {\n            RetcodeString = \"DEFAULT\";\n        }\n        else\n        {\n            /* Indicate that this invocation got a non-default return code */\n            RetcodeString = \"*SPECIAL*\";\n        }\n\n        UtDebug(\"%s called (%s,%ld)\", FunctionName, RetcodeString, (long)LocalContext.Int32StatusCode);\n    }\n\n    Counter = 0;\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr == NULL)\n    {\n        /* Creating counter entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set counter - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->EntryType = UT_ENTRYTYPE_COUNTER;\n        StubPtr->FuncKey   = FuncKey;\n        Counter            = StubPtr->Data.Rc.Count;\n        ++StubPtr->Data.Rc.Count;\n        StubPtr->Data.Rc.Value = LocalContext.Int32StatusCode;\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_HOOK);\n    if (StubPtr != NULL)\n    {\n        if (StubPtr->Data.Cb.IsVarg)\n        {\n            va_copy(ArgListCopy, ArgList);\n            LocalContext.Int32StatusCode = StubPtr->Data.Cb.Ptr.VaHook(\n                StubPtr->Data.Cb.CallbackArg, LocalContext.Int32StatusCode, Counter, &LocalContext, ArgListCopy);\n            va_end(ArgListCopy);\n        }\n        else\n        {\n            LocalContext.Int32StatusCode = StubPtr->Data.Cb.Ptr.SimpleHook(\n                StubPtr->Data.Cb.CallbackArg, LocalContext.Int32StatusCode, Counter, &LocalContext);\n        }\n\n        GotInt32StatusFromHook        = true;\n        LocalContext.Int32StatusIsSet = true;\n    }\n    else\n    {\n        GotInt32StatusFromHook = false;\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    if (StubPtr != NULL)\n    {\n        if (StubPtr->Data.Cb.IsVarg)\n        {\n            StubPtr->Data.Cb.Ptr.VaHandler(StubPtr->Data.Cb.CallbackArg, FuncKey, &LocalContext, ArgList);\n        }\n        else\n        {\n            StubPtr->Data.Cb.Ptr.SimpleHandler(StubPtr->Data.Cb.CallbackArg, FuncKey, &LocalContext);\n        }\n    }\n\n    /*\n     * Handle propagation of return code.\n     *\n     *   \"old style\" stubs will translate the int32 return value from this function.\n     *     - Return Buffer will always be unset with these stubs\n     *     - This should continue to work with no special handling.\n     *\n     *   \"new style\" stubs will provide a return value buffer via UT_ENTRYTYPE_RETURN_BUFFER in the context.\n     *     - In this pattern the int32 return value of this function is _IGNORED_ by the calling stub.\n     *     - The only way to return a value to the caller is via the buffer.\n     *     - If the handler did _not_ populate the return value, then attempt to translate the local\n     *       Retcode here to the return value buffer.  This eases the transition, as the vast majority\n     *       of functions do return an int32, this can be the automatic case.\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL && StubPtr->Data.Buff.Position == 0)\n    {\n        /* If a hook function was used, it is expected that this will override any configured retval */\n        if (GotInt32StatusFromHook && StubPtr->Data.Buff.TotalSize == sizeof(LocalContext.Int32StatusCode))\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, &LocalContext.Int32StatusCode, StubPtr->Data.Buff.TotalSize);\n            StubPtr->Data.Buff.Position = StubPtr->Data.Buff.TotalSize;\n        }\n        else if (RvcPtr != NULL)\n        {\n            /*\n             * Opaque values allow for arbitrarily large return values, but size must match exactly\n             * to what is expected, it cannot be truncated or expanded if there is a mismatch\n             * between the test and the stub.  Conversely, numeric values can be size-adjusted\n             * if the test supplied one size but the stub needs a different size, such as 32-bit\n             * to 16-bit or 64-bit ints.  Note that historically UT assert only supported 32-bit\n             * integer return values to be directly configured, so older test cases are likely to\n             * set a 32-bit value even if the return value is a different size.\n             */\n            if (RvcPtr->Data.Rvc.Genre == UT_ValueGenre_OPAQUE)\n            {\n                if (StubPtr->Data.Rvc.ActualSz != StubPtr->Data.Buff.TotalSize)\n                {\n                    UtAssert_Failed(\"Stub %s opaque return size mismatch, expected %lu, got %lu, type=%s\", FunctionName,\n                                    (unsigned long)StubPtr->Data.Buff.TotalSize,\n                                    (unsigned long)StubPtr->Data.Rvc.ActualSz, StubPtr->Data.Buff.ContentTypeStr);\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, StubPtr->Data.Rvc.Buf.IndirectPtr, StubPtr->Data.Buff.TotalSize);\n                    StubPtr->Data.Buff.Position = StubPtr->Data.Buff.TotalSize;\n                }\n            }\n            else if (UT_LoadRetval(StubPtr->Data.Buff.BasePtr, StubPtr->Data.Buff.TotalSize, &RvcPtr->Data.Rvc.Buf,\n                                   RvcPtr->Data.Rvc.Genre))\n            {\n                StubPtr->Data.Buff.Position = StubPtr->Data.Buff.TotalSize;\n            }\n        }\n\n        if (StubPtr->Data.Buff.Position == 0)\n        {\n            /*\n             * This means that no suitable return value was configured for this call.\n             * The final fallback in this case is to zero-fill it.\n             *\n             * For logical values this should become \"false\", for pointers it is \"NULL\", and for any numeric\n             * value - signed, unsigned, or float - it should become 0.\n             */\n            memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize);\n            StubPtr->Data.Buff.Position = StubPtr->Data.Buff.TotalSize;\n        }\n    }\n\n    /*\n     * Deferred retval configs should be expunged after they are used, so the next call will\n     * get the next config (if applicable).  Constant return values are NOT cleared, they may\n     * be re-used if the same stub is invoked again.\n     */\n    if (RvcPtr != NULL && RvcPtr->EntryType == UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED)\n    {\n        UT_ClearStubEntry(RvcPtr);\n    }\n\n    return LocalContext.Int32StatusCode;\n}\n...\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            StubPtr = NULL;\n            break;\n        }\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            break;\n        }\n        ++Idx;\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            Idx = 0;\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_MaxStubSearchLen = SearchLen;\n    }\n\n    return StubPtr;\n}\n...\nUT_StubTableEntry_t *UT_Stub_FindRetvalConfig(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubEntryPtr;\n\n    StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);\n    if (StubEntryPtr != NULL)\n    {\n        /*\n         * The counter on a deferred retval config indicates the number of times it should\n         * be skipped/not used.   Decrement the counter now, and if it is not yet 0, do not\n         * return this yet, and go to a fallback - which could either be a constant value\n         * configuration, or the default fallback of 0.\n         *\n         * By definition, deferred retvals are only used once and then deleted.\n         */\n        --StubEntryPtr->Data.Rvc.Counter;\n\n        if (StubEntryPtr->Data.Rvc.Counter > 0)\n        {\n            StubEntryPtr = NULL;\n        }\n    }\n\n    if (StubEntryPtr == NULL)\n    {\n        StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);\n        if (StubEntryPtr != NULL)\n        {\n            /*\n             * the counter on a constant retval config will track the number of\n             * times the value was actually used, so it is incremented here.  Unlike\n             * deferred retval configs, these values may be used multiple times during\n             * a test.\n             */\n            ++StubEntryPtr->Data.Rvc.Counter;\n        }\n    }\n\n    return StubEntryPtr;\n}\n...\nvoid UtAssert_Abort(const char *Message)\n{\n    UT_BSP_DoText(UTASSERT_CASETYPE_ABORT, Message);\n}\n...\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n...\nUtAssert_CaseType_t UtAssert_GetContext(void)\n{\n    return DefaultContext;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. UT_ClearStubEntry only calls free() and memset() and does not invoke any project callbacks or UT_DefaultStubImplWithArgs. MISRA C 2023 Rule 17.2 forbids direct or indirect recursion (a function calling itself). There is no call chain from UT_ClearStubEntry back to itself: it does not call any function that could reasonably call UT_ClearStubEntry, so it is not involved in a recursive cycle.\n\nThe scenario described by agent A (UT_DefaultStubImplWithArgs -> callback -> UT_DefaultStubImplWithArgs) would, if true, be an indirect recursion concern for UT_DefaultStubImplWithArgs (or for whoever is actually in the recursive cycle), not for UT_ClearStubEntry. In short, UT_ClearStubEntry does not violate Rule 17.2; the alleged indirect recursion is misattributed to this function."
}