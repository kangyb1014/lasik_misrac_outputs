{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code invokes function-pointer callbacks (SimpleHandler/VaHandler) that may be set to the same function (UT_DefaultStubImplWithArgs) or to another function that eventually calls UT_DefaultStubImplWithArgs. If a registered callback is the default stub implementation itself (or a function that calls it), the call here creates an indirect recursive call chain (UT_DefaultStubImplWithArgs -> callback -> UT_DefaultStubImplWithArgs), which violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2986.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\nPlease provide the modified UT_ClearStubEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: log stub state to /tmp/logs/2986.txt. Keep simple and robust. */\nstatic void UT_LogStubState(const char *stage, const void *stubPtr, unsigned int entryType, unsigned int modeFlags, const void *basePtr)\n{\n    FILE *fp = fopen(\"/tmp/logs/2986.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log stage, pointer addresses and key numeric fields. */\n        fprintf(fp, \"%s: StubPtr=%p, EntryType=%u, ModeFlags=0x%08x, BasePtr=%p\\n\",\n                stage, stubPtr, entryType, modeFlags, basePtr);\n        fclose(fp);\n    }\n}\n\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Log entry into function and current state */\n    UT_LogStubState(\"UT_ClearStubEntry_enter\", (const void *)StubPtr,\n                    (unsigned int)StubPtr->EntryType,\n                    (unsigned int)StubPtr->ModeFlags,\n                    (const void *)StubPtr->Data.Buff.BasePtr);\n\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        /* Log right before free */\n        UT_LogStubState(\"UT_ClearStubEntry_before_free\", (const void *)StubPtr,\n                        (unsigned int)StubPtr->EntryType,\n                        (unsigned int)StubPtr->ModeFlags,\n                        (const void *)StubPtr->Data.Buff.BasePtr);\n\n        free(StubPtr->Data.Buff.BasePtr);\n\n        /* Log immediately after free (pointer value still as before clearing; memory freed) */\n        UT_LogStubState(\"UT_ClearStubEntry_after_free\", (const void *)StubPtr,\n                        (unsigned int)StubPtr->EntryType,\n                        (unsigned int)StubPtr->ModeFlags,\n                        (const void *)StubPtr->Data.Buff.BasePtr);\n    }\n\n    memset(StubPtr, 0, sizeof(*StubPtr));\n\n    /* Log final cleared state */\n    UT_LogStubState(\"UT_ClearStubEntry_after_clear\", (const void *)StubPtr,\n                    (unsigned int)StubPtr->EntryType,\n                    (unsigned int)StubPtr->ModeFlags,\n                    (const void *)StubPtr->Data.Buff.BasePtr);\n}\n"
}