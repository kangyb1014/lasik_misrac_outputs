{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ref' is declared as void * but is only used for read access (assigned to OS_creator_filter_t *filter and only read ->creator_id). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. Here the function does not modify the object pointed to by ref, so the signature should use a const-qualified pointer (e.g. const void *ref or const OS_creator_filter_t *ref and const OS_creator_filter_t *filter = ref). The other parameters (token, obj) are already const-qualified and are fine.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachFilterCreator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachFilterCreator:\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachFilterCreator code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdbool.h>\n\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    /* Keep the original logic but treat the local view as const since we only read it. */\n    const OS_creator_filter_t *filter = (const OS_creator_filter_t *)ref;\n\n    /* Evaluate sub-expressions once so we can both use them and log them. */\n    int is_valid = OS_ObjectIdIsValid(obj->active_id) ? 1 : 0;\n    int eq_any = OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ? 1 : 0;\n    int eq_creator = OS_ObjectIdEqual(obj->creator, filter->creator_id) ? 1 : 0;\n    int result = (is_valid && (eq_any || eq_creator)) ? 1 : 0;\n\n    /* Probe: append runtime information to the log file for reproduction/evidence. */\n    FILE *log = fopen(\"/tmp/logs/1853.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log pointers so callers and addresses are visible. Concrete field values may have different\n         * types; logging addresses and boolean outcomes avoids type-mismatch diagnostics while providing\n         * useful trace information about control flow and the comparisons performed. */\n        fprintf(log, \"OS_ForEachFilterCreator called\\n\");\n        fprintf(log, \"  ref=%p, filter=%p, token=%p, obj=%p\\n\",\n                (void *)ref, (const void *)filter, (const void *)token, (const void *)obj);\n        fprintf(log, \"  &filter->creator_id=%p, &obj->active_id=%p, &obj->creator=%p\\n\",\n                (const void *)&filter->creator_id, (const void *)&obj->active_id, (const void *)&obj->creator);\n        fprintf(log, \"  is_valid=%d, eq_any=%d, eq_creator=%d, result=%d\\n\",\n                is_valid, eq_any, eq_creator, result);\n        fclose(log);\n    }\n\n    /* Preserve original return logic exactly. */\n    return (bool)result;\n}\n"
}