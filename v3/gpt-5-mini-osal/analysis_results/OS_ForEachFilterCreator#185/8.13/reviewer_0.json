{
  "user_message": "An agent A claimed that the following OS_ForEachFilterCreator code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ForEachFilterCreator.\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe struct contains a non-const pointer member (void *user_arg) and the code that uses the struct (OS_ForEachFilterCreator) takes a non-const void *ref and casts it to OS_creator_filter_t * even though it only reads fields. If the user_arg and the passed ref are intended to be read-only by the OS, they should be declared const (e.g. const void *user_arg, const void *ref and const OS_creator_filter_t *filter). As written, the non-const pointer types violate MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ForEachFilterCreator:\ntypedef struct\n{\n    osal_id_t        creator_id;\n    OS_ArgCallback_t user_callback;\n    void *           user_arg;\n} OS_creator_filter_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\nstatic inline bool OS_ObjectIdEqual(osal_id_t object_id1, osal_id_t object_id2)\n{\n    return (OS_ObjectIdToInteger(object_id1) == OS_ObjectIdToInteger(object_id2));\n}\n...\nstatic inline bool OS_ObjectIdIsValid(osal_id_t object_id)\n{\n    osal_objtype_t objtype = OS_ObjectIdToType_Impl(object_id);\n    return (objtype > OS_OBJECT_TYPE_UNDEFINED && objtype < OS_OBJECT_TYPE_USER);\n}\n...\n#define OS_OBJECT_CREATOR_ANY OS_OBJECT_ID_UNDEFINED\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is essentially correct: OS_ForEachFilterCreator takes a non-const void *ref and casts it to a non-const OS_creator_filter_t * even though the function only reads fields from that object. Under MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever it can be so qualified; here the parameter could be declared as const void *ref and the local pointer as const OS_creator_filter_t *filter, which would satisfy the rule.\n\nCaveat: if OS_ForEachFilterCreator must conform to an externally mandated callback prototype that requires a non-const void *ref (i.e. the function signature is fixed by an API), then the non-const parameter is unavoidable and the use is justifiable; in that case the code would not be considered a violation (the API constraint is a legitimate justification). No such justification was provided in the supplied code, so absent that, the agent A report is correct."
}