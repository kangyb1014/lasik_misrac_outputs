{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ForEachFilterCreator the parameter ref is a void * and is assigned to a non-const pointer: OS_creator_filter_t *filter = ref;. The function only reads filter->creator_id (no modification), so per MISRA C:2023 Rule 8.13 the pointer should be to a const-qualified type (e.g. const OS_creator_filter_t *filter or the parameter should be const void *ref). The current non-const declaration therefore violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachFilterCreator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachFilterCreator:\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachFilterCreator code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    /* Preserve original assignment (non-const) to demonstrate the reported violation scenario */\n    OS_creator_filter_t *filter = ref;\n\n    /* Evaluate the original logic into temporaries so we can log the intermediate state. */\n    bool id_valid = OS_ObjectIdIsValid(obj->active_id);\n    bool creator_any = OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY);\n    bool creator_match = OS_ObjectIdEqual(obj->creator, filter->creator_id);\n    bool result = (id_valid && (creator_any || creator_match));\n\n    /* Probe: append a detailed log entry so other agents can reproduce and observe the violation scenario.\n     * The log contains control flow decisions and key state observed during this function call.\n     */\n    FILE *log = fopen(\"/tmp/logs/1853.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ForEachFilterCreator called\\n\");\n        fprintf(log, \"  ref=%p, filter=%p, token=%p, obj=%p\\n\", ref, (void *)filter, (const void *)token, (const void *)obj);\n        /* We avoid assuming integer types for id fields; report pointer locations of those fields and boolean results */\n        fprintf(log, \"  &obj->active_id=%p, &obj->creator=%p, &filter->creator_id=%p\\n\",\n                (const void *)&obj->active_id, (const void *)&obj->creator, (const void *)&filter->creator_id);\n        fprintf(log, \"  id_valid=%d, creator_any=%d, creator_match=%d, result=%d\\n\",\n                (int)id_valid, (int)creator_any, (int)creator_match, (int)result);\n        fprintf(log, \"  Note: filter was assigned from void *ref to non-const OS_creator_filter_t *filter (no const qualification).\\n\");\n        fclose(log);\n    }\n\n    return result;\n}\n"
}