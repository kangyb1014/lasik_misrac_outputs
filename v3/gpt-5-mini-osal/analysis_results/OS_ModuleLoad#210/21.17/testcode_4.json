{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read a fixed number of bytes starting at name_ptr without guaranteeing that that many bytes are valid within the VirtualPath object. name_ptr is derived from strrchr(VirtualPath,'/') and may point near the end of the VirtualPath string. If the remaining bytes from name_ptr to the end of the VirtualPath buffer are less than OS_MAX_FILE_NAME (for example VirtualPath = \"/a\" and OS_MAX_FILE_NAME is large), memchr will access bytes beyond the bounds of the VirtualPath object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2109.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad code.\n",
  "test_code": "/* Probe-enhanced OS_ModuleLoad\n * Appends diagnostic logs to /tmp/logs/2109.txt to capture control flow and\n * state useful to reproduce memchr/read-beyond-bounds scenarios.\n * This preserves original logic and only inserts safe probes.\n */\n\n/* Local safe helper - avoid reliance on strnlen (keeps self-contained). */\nstatic size_t OS_ModuleLoad_safe_strnlen(const char *s, size_t max)\n{\n    size_t i = 0;\n    if (s == NULL)\n    {\n        return 0;\n    }\n    while ((i < max) && (s[i] != '\\0'))\n    {\n        ++i;\n    }\n    return i;\n}\n\nstatic void OS_ModuleLoad_log_state(const char *stage,\n                                    const char *module_name,\n                                    const char *filename,\n                                    const char *translated_path,\n                                    int filename_status,\n                                    const void *token_ptr,\n                                    void *module_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2109.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_ModuleLoad LOG: %s ---\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"module_name: %s\\n\", module_name ? module_name : \"(null)\");\n    fprintf(f, \"filename: %s\\n\", filename ? filename : \"(null)\");\n\n    if (translated_path != NULL)\n    {\n        size_t tlen = OS_ModuleLoad_safe_strnlen(translated_path, (size_t)OS_MAX_LOCAL_PATH_LEN);\n        fprintf(f, \"translated_path (addr=%p) len=%zu max_buf=%u contents='%.*s'\\n\",\n                (const void *)translated_path,\n                tlen,\n                (unsigned)OS_MAX_LOCAL_PATH_LEN,\n                (int)tlen,\n                translated_path);\n\n        /* For debugging memchr-style usage, log pointer to last '/'. */\n        {\n            const char *last_slash = strrchr(translated_path, '/');\n            if (last_slash != NULL)\n            {\n                size_t offset = (size_t)(last_slash - translated_path);\n                size_t remaining = 0;\n                if (offset < tlen)\n                {\n                    remaining = tlen - offset; /* bytes from slash to terminating NUL within buffer */\n                }\n                /* Also log the value of OS_MAX_FILE_NAME so we can see potential over-read size. */\n                fprintf(f, \"translated_path last '/' at addr=%p offset=%zu remaining_bytes_within_buffer=%zu OS_MAX_FILE_NAME=%u\\n\",\n                        (const void *)last_slash,\n                        offset,\n                        remaining,\n                        (unsigned)OS_MAX_FILE_NAME);\n            }\n            else\n            {\n                fprintf(f, \"translated_path contains no '/'\\n\");\n            }\n        }\n    }\n    else\n    {\n        fprintf(f, \"translated_path: (null)\\n\");\n    }\n\n    fprintf(f, \"filename_status: %d\\n\", filename_status);\n\n    fprintf(f, \"token ptr: %p\\n\", token_ptr);\n    fprintf(f, \"module ptr: %p\\n\", module_ptr);\n\n    /* If we have a module pointer, try to safely log its file_name buffer contents/size.\n     * Use only the known buffer size to avoid any risk of reading past bounds. */\n    if (module_ptr != NULL)\n    {\n        OS_module_internal_record_t *m = (OS_module_internal_record_t *)module_ptr;\n        /* Use safe length bounded by the array size from the type. */\n        size_t fname_buf_size = sizeof(m->file_name);\n        size_t name_len = OS_ModuleLoad_safe_strnlen(m->file_name, fname_buf_size);\n        fprintf(f, \"module->file_name (buf_size=%zu) len=%zu contents='%.*s'\\n\",\n                fname_buf_size,\n                name_len,\n                (int)name_len,\n                m->file_name);\n        fprintf(f, \"module->flags: 0x%08x\\n\", (unsigned)m->flags);\n        fprintf(f, \"module->module_type: %d\\n\", (int)m->module_type);\n    }\n\n    fprintf(f, \"--- end log ---\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Probe: log state after path translation. This helps reproduce scenarios where\n     * translated_path is shorter than OS_MAX_FILE_NAME and later code might call memchr/memcpy\n     * with a larger fixed size starting from an interior pointer. */\n    OS_ModuleLoad_log_state(\"after_translate\", module_name, filename, translated_path, filename_status, NULL, NULL);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /* Probe: log state after allocation/initialization */\n        OS_ModuleLoad_log_state(\"after_alloc_init\", module_name, filename, translated_path, filename_status, (const void *)&token, (void *)module);\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Probe: log right before calling the OS-specific implementation. This captures\n                 * the translated_path and module state that OS_ModuleLoad_Impl will observe. */\n                OS_ModuleLoad_log_state(\"before_impl\", module_name, filename, translated_path, filename_status, (const void *)&token, (void *)module);\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n\n                /* Probe: log immediately after returning from impl to record outcomes. */\n                OS_ModuleLoad_log_state(\"after_impl\", module_name, filename, translated_path, filename_status, (const void *)&token, (void *)module);\n            }\n        }\n\n        /* Probe: log before finalizing new object so we have a record of the final inputs. */\n        OS_ModuleLoad_log_state(\"before_finalize\", module_name, filename, translated_path, filename_status, (const void *)&token, (void *)module);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n\n        /* Final probe: log final return_code and object id pointer. */\n        OS_ModuleLoad_log_state(\"after_finalize\", module_name, filename, translated_path, filename_status, (const void *)&token, (void *)module);\n    }\n\n    return return_code;\n}\n"
}