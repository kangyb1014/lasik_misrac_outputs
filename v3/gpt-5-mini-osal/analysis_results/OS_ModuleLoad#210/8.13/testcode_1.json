{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away the const qualifier of the parameter VirtualPath (declared const char *VirtualPath) by using (void *)VirtualPath in the call to OS_ObjectIdGetBySearch. This removes the const from the pointer being passed to a function that takes a non-const void *, which violates the requirement that pointers should point to const-qualified types whenever possible (i.e. the callee/search API should accept a const void * or the argument should not be cast away).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/*\n * Probe/logging helper for OS_ModuleLoad.\n * This is intentionally conservative: it treats opaque objects as const void *\n * and only prints pointer values and string parameters. It does not modify\n * program state and preserves the original behavior.\n */\nstatic void OS_ModuleLoad_LogState(const char *stage,\n                                  const void *module_id_ptr,\n                                  const char *module_name,\n                                  const char *filename,\n                                  const char *translated_path,\n                                  int filename_status,\n                                  int32 return_code,\n                                  const void *token_ptr,\n                                  const void *module_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2103.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not alter program behavior. */\n        return;\n    }\n\n    /* Log stage and key pointer/state values. Strings may be NULL. */\n    fprintf(f, \"[OS_ModuleLoad] stage=%s\\n\", stage);\n    fprintf(f, \"  module_id_ptr=%p\\n\", module_id_ptr);\n    fprintf(f, \"  module_name=%s\\n\", (module_name != NULL) ? module_name : \"(null)\");\n    fprintf(f, \"  filename=%s\\n\", (filename != NULL) ? filename : \"(null)\");\n    fprintf(f, \"  translated_path=%s\\n\", (translated_path != NULL) ? translated_path : \"(null)\");\n    fprintf(f, \"  filename_status=%d\\n\", filename_status);\n    fprintf(f, \"  return_code(before)=%d\\n\", (int)return_code);\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"  module_ptr=%p\\n\", module_ptr);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Entry probe */\n    OS_ModuleLoad_LogState(\"entry\", (const void *)module_id, module_name, filename, \"(not translated)\", -1, -1, (const void *)&token, NULL);\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Log after path translation */\n    OS_ModuleLoad_LogState(\"after_translate\", (const void *)module_id, module_name, filename, translated_path, filename_status, -1, (const void *)&token, NULL);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n\n    /* Log after allocation attempt */\n    OS_ModuleLoad_LogState(\"after_allocate\", (const void *)module_id, module_name, filename, translated_path, filename_status, return_code, (const void *)&token, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n\n        /* Log after static check */\n        OS_ModuleLoad_LogState(\"after_static_check\", (const void *)module_id, module_name, filename, translated_path, filename_status, return_code, (const void *)&token, (const void *)module);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n\n                /* Log invalid filename scenario */\n                OS_ModuleLoad_LogState(\"filename_invalid\", (const void *)module_id, module_name, filename, translated_path, filename_status, return_code, (const void *)&token, (const void *)module);\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                /* Log just before calling the OS-specific loader */\n                OS_ModuleLoad_LogState(\"before_impl\", (const void *)module_id, module_name, filename, translated_path, filename_status, -1, (const void *)&token, (const void *)module);\n\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n\n                /* Log after impl attempt */\n                OS_ModuleLoad_LogState(\"after_impl\", (const void *)module_id, module_name, filename, translated_path, filename_status, return_code, (const void *)&token, (const void *)module);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n\n        /* Final log before return */\n        OS_ModuleLoad_LogState(\"finalize\", (const void *)module_id, module_name, filename, translated_path, filename_status, return_code, (const void *)&token, (const void *)module);\n    }\n\n    return return_code;\n}\n"
}