{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_dir_internal_record_t *impl;) even though in this function it is only used for read access (impl->dp is read and not modified). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. Changing the declaration to 'const OS_impl_dir_internal_record_t *impl;' would satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirRead_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirRead_Impl:\n```c\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n    if (de == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirRead_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <dirent.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/933.txt */\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/933.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* simple timestamp */\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    if (tm_info != NULL)\n    {\n        char ts[32];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", tm_info) > 0)\n        {\n            fprintf(f, \"[%s] \", ts);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n\n    OS_Probe_Log(\"OS_DirRead_Impl ENTRY: token=%p, dirent=%p\", (void *)token, (void *)dirent);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* Log the impl pointer and (if available) the DIR* inside it. */\n    OS_Probe_Log(\"impl=%p\", (void *)impl);\n    /* Avoid dereferencing impl in the log unless impl is non-NULL to prevent altering crash timing. */\n    if (impl != NULL)\n    {\n        OS_Probe_Log(\"impl->dp=%p\", (void *)impl->dp);\n    }\n    else\n    {\n        OS_Probe_Log(\"impl is NULL\");\n    }\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n\n    OS_Probe_Log(\"calling readdir(impl->dp)\");\n    de = readdir(impl->dp);\n    if (de == NULL)\n    {\n        OS_Probe_Log(\"readdir returned NULL, errno=%d (%s)\", errno, strerror(errno));\n        return OS_ERROR;\n    }\n\n    OS_Probe_Log(\"readdir returned de=%p, d_name=%s\", (void *)de, de->d_name ? de->d_name : \"(null)\");\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    OS_Probe_Log(\"copied FileName='%s' into dirent (%p)\", dirent->FileName, (void *)dirent);\n    OS_Probe_Log(\"OS_DirRead_Impl EXIT: OS_SUCCESS\");\n\n    return OS_SUCCESS;\n}\n"
}