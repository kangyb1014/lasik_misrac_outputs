{
  "user_message": "An agent A claimed that the following OS_DirRead_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_DirRead_Impl.\n```c\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n    if (de == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_dir_internal_record_t *impl;) even though in this function it is only used for read access (impl->dp is read and not modified). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. Changing the declaration to 'const OS_impl_dir_internal_record_t *impl;' would satisfy the rule.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_DirRead_Impl the local variable impl is only read (impl = OS_OBJECT_TABLE_GET(...); then impl->dp is accessed), so per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible. Changing the declaration to const OS_impl_dir_internal_record_t *impl is feasible here: assigning a non-const pointer to a pointer-to-const is allowed, and making the pointee const does not prevent passing the member impl->dp to readdir. (Note: declaring the structure pointer as pointer-to-const makes the member expression impl->dp have a top-level const on the pointer-to-member, e.g. DIR * const, which is compatible with a parameter of type DIR * when passed by value.) Unless there is some external API or macro constraint that requires a non-const pointer in this function (which is not shown), this is a legitimate violation of Rule 8.13."
}