{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_DirRead_Impl:\n```c\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n    if (de == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_DirRead_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nextern OS_impl_dir_internal_record_t OS_impl_dir_table[OS_MAX_NUM_OPEN_DIRS]\n...\ntypedef struct\n{\n    DIR *dp;\n} OS_impl_dir_internal_record_t\n...\ntypedef struct\n{\n    char FileName[OS_MAX_FILE_NAME];\n} os_dirent_t\n...\nos_dirent_t *dirent\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n...\nint32 OS_DirectoryRead(osal_id_t dir_id, os_dirent_t *dirent)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dirent);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Call the underlying implementation to perform the read\n         *\n         * NOTE: This does not map \"virtual mount points\" that\n         * may appear in the dir listing back to the virtualized\n         * name.  For instance, if the (real) /eeprom directory\n         * is virtualized to /cf via the OS_VolumeTable, and one\n         * reads the \"/\" directory, the application will see the\n         * real name (eeprom) and not the virtualized name (cf).\n         */\n        return_code = OS_DirRead_Impl(&token, dirent);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the inline accessor OS_ObjectIndexFromToken is actually used via the OS_OBJECT_TABLE_GET macro (e.g. in OS_DirRead_Impl). It returns token->obj_idx to index the object table; removing the function (or the call) would change program behaviour. Although the function is trivial and may be inlined/optimized by the compiler, that does not make it dead code under MISRA C 2023 Rule 2.2."
}