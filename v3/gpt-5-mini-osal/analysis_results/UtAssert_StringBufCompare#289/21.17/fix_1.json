{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic const size_t UTASSERT_STRINGBUF_NULL_TERM = (size_t)-1;\nstatic const int UTASSERT_CASETYPE_FAILURE = 1;\nstatic void UtAssert_LogProbe(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Best-effort create directory */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic bool UtAssertEx(bool Result, int CaseType, const char *File, uint32_t Line, const char *Fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Ensure log directory exists (best-effort). Ignoring errors intentionally. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return Result;\n    }\n\n    fprintf(f, \"UtAssertEx called: Result=%d CaseType=%d File=%s Line=%u\\n\", (int)Result, CaseType, File ? File : \"(null)\", (unsigned)Line);\n    fprintf(f, \"Message: \");\n    va_start(ap, Fmt);\n    vfprintf(f, Fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\\n\");\n    fclose(f);\n\n    return Result;\n}\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32_t Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Log entry and parameters */\n    UtAssert_LogProbe(\"ENTER UtAssert_StringBufCompare: String1=%p String1Max=%zu String2=%p String2Max=%zu CompareType=%d File=%s Line=%u\",\n                      (const void *)String1, String1Max, (const void *)String2, String2Max, (int)CompareType,\n                      File ? File : \"(null)\", (unsigned)Line);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        UtAssert_LogProbe(\"String1 is NULL\");\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        UtAssert_LogProbe(\"String1 non-NULL and String1Max indicates NUL-terminated sentinel. About to call strlen(String1). Pointer=%p\",\n                          (const void *)String1);\n        /* The call below is the location referred to in the violation scenario. */\n        EndPtr1 = String1 + strlen(String1);\n        UtAssert_LogProbe(\"strlen(String1) returned length=%zu; EndPtr1=%p\", EndPtr1 - String1, (const void *)EndPtr1);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"String1 non-NULL and bounded length provided. Calling memchr(String1,0,String1Max). Pointer=%p Max=%zu\",\n                          (const void *)String1, String1Max);\n        EndPtr1 = memchr(String1, 0, String1Max);\n        UtAssert_LogProbe(\"memchr result for String1: EndPtr1=%p\", (const void *)EndPtr1);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n    UtAssert_LogProbe(\"Computed FormatLen1=%zu\", FormatLen1);\n\n    if (String2 == NULL)\n    {\n        UtAssert_LogProbe(\"String2 is NULL\");\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        UtAssert_LogProbe(\"String2 non-NULL and String2Max indicates NUL-terminated sentinel. About to call strlen(String2). Pointer=%p\",\n                          (const void *)String2);\n        EndPtr2 = String2 + strlen(String2);\n        UtAssert_LogProbe(\"strlen(String2) returned length=%zu; EndPtr2=%p\", EndPtr2 - String2, (const void *)EndPtr2);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"String2 non-NULL and bounded length provided. Calling memchr(String2,0,String2Max). Pointer=%p Max=%zu\",\n                          (const void *)String2, String2Max);\n        EndPtr2 = memchr(String2, 0, String2Max);\n        UtAssert_LogProbe(\"memchr result for String2: EndPtr2=%p\", (const void *)EndPtr2);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n    UtAssert_LogProbe(\"Computed FormatLen2=%zu\", FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        UtAssert_LogProbe(\"Both format lengths 0 -> Compare set to 0\");\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            UtAssert_LogProbe(\"Comparing memcmp(String1,String2,FormatLen1=%zu)\", FormatLen1);\n            Compare = memcmp(String1, String2, FormatLen1);\n            UtAssert_LogProbe(\"memcmp result=%d\", Compare);\n        }\n        else\n        {\n            UtAssert_LogProbe(\"Comparing memcmp(String1,String2,FormatLen2=%zu)\", FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n            UtAssert_LogProbe(\"memcmp result=%d\", Compare);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            UtAssert_LogProbe(\"Initial content equal; Adjusted Compare by length: FormatLen1=%zu FormatLen2=%zu Compare=%d\",\n                              FormatLen1, FormatLen2, Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n    UtAssert_LogProbe(\"After CompareType evaluation: Compare=%d Result=%d\", Compare, (int)Result);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        UtAssert_LogProbe(\"Searching for newline in String1 within FormatLen1=%zu\", FormatLen1);\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            UtAssert_LogProbe(\"Newline found in String1 at %p; new FormatLen1=%zu\", (const void *)EndPtr1, FormatLen1);\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n    UtAssert_LogProbe(\"ScrubbedString1='%s' (len=%zu)\", ScrubbedString1, FormatLen1);\n\n    if (FormatLen2 > 0)\n    {\n        UtAssert_LogProbe(\"Searching for newline in String2 within FormatLen2=%zu\", FormatLen2);\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            UtAssert_LogProbe(\"Newline found in String2 at %p; new FormatLen2=%zu\", (const void *)EndPtr2, FormatLen2);\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n    UtAssert_LogProbe(\"ScrubbedString2='%s' (len=%zu)\", ScrubbedString2, FormatLen2);\n\n    UtAssert_LogProbe(\"About to call UtAssertEx with final Result=%d\", (int)Result);\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,\n                 from /tmp/tmpmoxq3suu/src/ut_assert/src/utassert.c:4:\n/tmp/tmpmoxq3suu/src/ut_assert/inc/utassert.h:55:38: error: expected identifier or '(' before numeric constant\n   55 | #define UTASSERT_STRINGBUF_NULL_TERM SIZE_MAX\n      |                                      ^~~~~~~~\n/tmp/tmpmoxq3suu/src/ut_assert/src/utassert.c:217:21: note: in expansion of macro 'UTASSERT_STRINGBUF_NULL_TERM'\n  217 | static const size_t UTASSERT_STRINGBUF_NULL_TERM = (size_t)-1;\n      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmoxq3suu/src/ut_assert/src/utassert.c:218:18: error: 'UTASSERT_CASETYPE_FAILURE' redeclared as different kind of symbol\n  218 | static const int UTASSERT_CASETYPE_FAILURE = 1;\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpmoxq3suu/src/ut_assert/src/utassert.c:46:\n/tmp/tmpmoxq3suu/src/ut_assert/inc/utassert.h:77:5: note: previous definition of 'UTASSERT_CASETYPE_FAILURE' with type 'enum <anonymous>'\n   77 |     UTASSERT_CASETYPE_FAILURE, /**< Test case failure status messages */\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmoxq3suu/src/ut_assert/src/utassert.c:239:13: error: conflicting types for 'UtAssertEx'; have '_Bool(_Bool,  int,  const char *, uint32_t,  const char *, ...)' {aka '_Bool(_Bool,  int,  const char *, unsigned int,  const char *, ...)'}\n  239 | static bool UtAssertEx(bool Result, int CaseType, const char *File, uint32_t Line, const char *Fmt, ...)\n      |             ^~~~~~~~~~\nIn file included from /tmp/tmpmoxq3suu/src/ut_assert/src/utassert.c:46:\n/tmp/tmpmoxq3suu/src/ut_assert/inc/utassert.h:911:6: note: previous declaration of 'UtAssertEx' with type '_Bool(_Bool,  UtAssert_CaseType_t,  const char *, uint32,  const char *, ...)' {aka '_Bool(_Bool,  UtAssert_CaseType_t,  const char *, unsigned int,  const char *, ...)'}\n  911 | bool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n      |      ^~~~~~~~~~\n/tmp/tmpmoxq3suu/src/ut_assert/src/utassert.c: In function 'UtAssert_GetCaseTypeAbbrev':\n/tmp/tmpmoxq3suu/src/ut_assert/src/utassert.c:278:9: error: case label does not reduce to an integer constant\n  278 |         case UTASSERT_CASETYPE_FAILURE:\n      |         ^~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:76: ut_assert/CMakeFiles/ut_assert.dir/src/utassert.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n#include \"utassert.h\"\n\nstatic void UtAssert_LogProbe(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Best-effort create directory */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32_t Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Log entry and parameters */\n    UtAssert_LogProbe(\"ENTER UtAssert_StringBufCompare: String1=%p String1Max=%zu String2=%p String2Max=%zu CompareType=%d File=%s Line=%u\",\n                      (const void *)String1, String1Max, (const void *)String2, String2Max, (int)CompareType,\n                      File ? File : \"(null)\", (unsigned)Line);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        UtAssert_LogProbe(\"String1 is NULL\");\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        UtAssert_LogProbe(\"String1 non-NULL and String1Max indicates NUL-terminated sentinel. About to call strlen(String1). Pointer=%p\",\n                          (const void *)String1);\n        /* The call below is the location referred to in the violation scenario. */\n        EndPtr1 = String1 + strlen(String1);\n        UtAssert_LogProbe(\"strlen(String1) returned length=%zu; EndPtr1=%p\", EndPtr1 - String1, (const void *)EndPtr1);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"String1 non-NULL and bounded length provided. Calling memchr(String1,0,String1Max). Pointer=%p Max=%zu\",\n                          (const void *)String1, String1Max);\n        EndPtr1 = memchr(String1, 0, String1Max);\n        UtAssert_LogProbe(\"memchr result for String1: EndPtr1=%p\", (const void *)EndPtr1);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n    UtAssert_LogProbe(\"Computed FormatLen1=%zu\", FormatLen1);\n\n    if (String2 == NULL)\n    {\n        UtAssert_LogProbe(\"String2 is NULL\");\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        UtAssert_LogProbe(\"String2 non-NULL and String2Max indicates NUL-terminated sentinel. About to call strlen(String2). Pointer=%p\",\n                          (const void *)String2);\n        EndPtr2 = String2 + strlen(String2);\n        UtAssert_LogProbe(\"strlen(String2) returned length=%zu; EndPtr2=%p\", EndPtr2 - String2, (const void *)EndPtr2);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"String2 non-NULL and bounded length provided. Calling memchr(String2,0,String2Max). Pointer=%p Max=%zu\",\n                          (const void *)String2, String2Max);\n        EndPtr2 = memchr(String2, 0, String2Max);\n        UtAssert_LogProbe(\"memchr result for String2: EndPtr2=%p\", (const void *)EndPtr2);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n    UtAssert_LogProbe(\"Computed FormatLen2=%zu\", FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        UtAssert_LogProbe(\"Both format lengths 0 -> Compare set to 0\");\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            UtAssert_LogProbe(\"Comparing memcmp(String1,String2,FormatLen1=%zu)\", FormatLen1);\n            Compare = memcmp(String1, String2, FormatLen1);\n            UtAssert_LogProbe(\"memcmp result=%d\", Compare);\n        }\n        else\n        {\n            UtAssert_LogProbe(\"Comparing memcmp(String1,String2,FormatLen2=%zu)\", FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n            UtAssert_LogProbe(\"memcmp result=%d\", Compare);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            UtAssert_LogProbe(\"Initial content equal; Adjusted Compare by length: FormatLen1=%zu FormatLen2=%zu Compare=%d\",\n                              FormatLen1, FormatLen2, Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n    UtAssert_LogProbe(\"After CompareType evaluation: Compare=%d Result=%d\", Compare, (int)Result);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        UtAssert_LogProbe(\"Searching for newline in String1 within FormatLen1=%zu\", FormatLen1);\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            UtAssert_LogProbe(\"Newline found in String1 at %p; new FormatLen1=%zu\", (const void *)EndPtr1, FormatLen1);\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n    UtAssert_LogProbe(\"ScrubbedString1='%s' (len=%zu)\", ScrubbedString1, FormatLen1);\n\n    if (FormatLen2 > 0)\n    {\n        UtAssert_LogProbe(\"Searching for newline in String2 within FormatLen2=%zu\", FormatLen2);\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            UtAssert_LogProbe(\"Newline found in String2 at %p; new FormatLen2=%zu\", (const void *)EndPtr2, FormatLen2);\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n    UtAssert_LogProbe(\"ScrubbedString2='%s' (len=%zu)\", ScrubbedString2, FormatLen2);\n\n    UtAssert_LogProbe(\"About to call UtAssertEx with final Result=%d\", (int)Result);\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n",
  "explanation": "Removed conflicting local definitions that duplicated symbols from the project header and relied on the header's declarations instead:\n\n- Removed the static const definitions of UTASSERT_STRINGBUF_NULL_TERM and UTASSERT_CASETYPE_FAILURE which conflicted with the definitions in utassert.h.\n- Removed the local implementation of UtAssertEx (it was already declared in utassert.h), so the file now uses the header-provided UtAssertEx.\n\nKept the UtAssert_LogProbe helper and preserved the original logic of UtAssert_StringBufCompare. Added the necessary standard includes and included \"utassert.h\" so the code compiles without symbol redefinition errors."
}