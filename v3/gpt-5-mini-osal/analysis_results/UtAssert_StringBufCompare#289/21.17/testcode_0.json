{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf String1 is NULL but String1Max > 0, EndPtr1 is set to NULL and FormatLen1 becomes String1Max. If String2 is non-NULL with a greater length (so FormatLen2 > FormatLen1), the code takes the branch memcmp(String1, String2, FormatLen1). For example: UtAssert_StringBufCompare(NULL, 5, \"hello world\", 11, ... ) leads to memcmp(NULL, \"hello world\", 5) which dereferences a NULL pointer (and thus accesses beyond the object bounds). This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Open log file to capture control flow and state for debugging */\n    FILE *log = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"--- UtAssert_StringBufCompare called ---\\n\");\n        fprintf(log, \"String1=%p, String1Max=%zu, String2=%p, String2Max=%zu, CompareType=%d, File=%p, Line=%u\\n\",\n                (void *)String1, String1Max, (void *)String2, String2Max, (int)CompareType, (const void *)File, (unsigned)Line);\n        fflush(log);\n    }\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n        if (log)\n        {\n            fprintf(log, \"String1 is NULL -> EndPtr1 = NULL\\n\");\n            fflush(log);\n        }\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        if (log)\n        {\n            fprintf(log, \"String1 non-NULL and NULL_TERM -> EndPtr1 points to (String1 + strlen) = %p (strlen=%zu)\\n\",\n                    (void *)EndPtr1, strlen(String1));\n            fflush(log);\n        }\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n        if (log)\n        {\n            fprintf(log, \"String1 non-NULL and bounded -> memchr returned EndPtr1=%p\\n\", (void *)EndPtr1);\n            fflush(log);\n        }\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Computed FormatLen1=%zu (EndPtr1=%p)\\n\", FormatLen1, (void *)EndPtr1);\n        fflush(log);\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n        if (log)\n        {\n            fprintf(log, \"String2 is NULL -> EndPtr2 = NULL\\n\");\n            fflush(log);\n        }\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n        if (log)\n        {\n            fprintf(log, \"String2 non-NULL and NULL_TERM -> EndPtr2 points to (String2 + strlen) = %p (strlen=%zu)\\n\",\n                    (void *)EndPtr2, strlen(String2));\n            fflush(log);\n        }\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n        if (log)\n        {\n            fprintf(log, \"String2 non-NULL and bounded -> memchr returned EndPtr2=%p\\n\", (void *)EndPtr2);\n            fflush(log);\n        }\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Computed FormatLen2=%zu (EndPtr2=%p)\\n\", FormatLen2, (void *)EndPtr2);\n        fflush(log);\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        if (log)\n        {\n            fprintf(log, \"Both formats length 0 -> Compare=0\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            if (log)\n            {\n                fprintf(log, \"Comparing first FormatLen1 (%zu) bytes: memcmp(String1=%p, String2=%p, %zu)\\n\",\n                        FormatLen1, (void *)String1, (void *)String2, FormatLen1);\n                fflush(log);\n            }\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"Comparing first FormatLen2 (%zu) bytes: memcmp(String1=%p, String2=%p, %zu)\\n\",\n                        FormatLen2, (void *)String1, (void *)String2, FormatLen2);\n                fflush(log);\n            }\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        if (log)\n        {\n            fprintf(log, \"memcmp returned %d\\n\", Compare);\n            fflush(log);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            if (log)\n            {\n                fprintf(log, \"Initial content equal, length difference Compare = FormatLen1 - FormatLen2 = %zd - %zd = %d\\n\",\n                        (ssize_t)FormatLen1, (ssize_t)FormatLen2, Compare);\n                fflush(log);\n            }\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"After compare type handling -> Result=%d\\n\", (int)Result);\n        fflush(log);\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        if (log)\n        {\n            fprintf(log, \"Preparing to scrub String1: String1=%p, FormatLen1=%zu\\n\", (void *)String1, FormatLen1);\n            fflush(log);\n        }\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            if (log)\n            {\n                fprintf(log, \"Found newline in String1 at %p -> new FormatLen1=%zu\\n\", (void *)EndPtr1, FormatLen1);\n                fflush(log);\n            }\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        if (log)\n        {\n            fprintf(log, \"Preparing to scrub String2: String2=%p, FormatLen2=%zu\\n\", (void *)String2, FormatLen2);\n            fflush(log);\n        }\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            if (log)\n            {\n                fprintf(log, \"Found newline in String2 at %p -> new FormatLen2=%zu\\n\", (void *)EndPtr2, FormatLen2);\n                fflush(log);\n            }\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    if (log)\n    {\n        fprintf(log, \"Final scrubbed strings: '%s' (len=%zu), '%s' (len=%zu)\\n\", ScrubbedString1, FormatLen1, ScrubbedString2,\n                FormatLen2);\n        fprintf(log, \"----------------------------------------\\n\");\n        fflush(log);\n        fclose(log);\n    }\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '\\%s' == '\\%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}