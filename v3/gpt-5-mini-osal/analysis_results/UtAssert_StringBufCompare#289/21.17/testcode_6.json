{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code writes a terminator at index FormatLen1 into ScrubbedString1 without bounding FormatLen1 to the destination size. If FormatLen1 >= 256 (sizeof(ScrubbedString1)) this is an out-of-bounds write. Example: if String1Max >= 256 and memchr(String1,0,String1Max) returns NULL (so FormatLen1 = String1Max), or if String1Max == UTASSERT_STRINGBUF_NULL_TERM and strlen(String1) >= 256, then ScrubbedString1[FormatLen1] = 0 writes beyond the ScrubbedString1 buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logger - appends control flow and state information to /tmp/logs/2899.txt */\nstatic void UtAssert_LogProbe(const char *stage, const char *String1, size_t String1Max, const char *EndPtr1,\n                              size_t FormatLen1, const char *String2, size_t String2Max, const char *EndPtr2,\n                              size_t FormatLen2, const char *File, unsigned Line)\n{\n    FILE *f = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    fprintf(f, \"--- UtAssert_StringBufCompare Probe: %s ---\\n\", stage);\n    fprintf(f, \"File=%s Line=%u\\n\", File ? File : \"(null)\", Line);\n\n    fprintf(f, \"String1 ptr=%p, String1Max=%zu, EndPtr1=%p, FormatLen1=%zu\\n\",\n            (const void *)String1, String1Max, (const void *)EndPtr1, FormatLen1);\n    if (String1 != NULL && EndPtr1 != NULL)\n    {\n        fprintf(f, \"String1: EndPtr1 - String1 = %td\\n\", (ptrdiff_t)(EndPtr1 - String1));\n    }\n    else if (String1 != NULL && EndPtr1 == NULL)\n    {\n        fprintf(f, \"String1: EndPtr1 is NULL (no NUL found within String1Max)\\n\");\n    }\n    else\n    {\n        fprintf(f, \"String1 is NULL\\n\");\n    }\n\n    fprintf(f, \"String2 ptr=%p, String2Max=%zu, EndPtr2=%p, FormatLen2=%zu\\n\",\n            (const void *)String2, String2Max, (const void *)EndPtr2, FormatLen2);\n    if (String2 != NULL && EndPtr2 != NULL)\n    {\n        fprintf(f, \"String2: EndPtr2 - String2 = %td\\n\", (ptrdiff_t)(EndPtr2 - String2));\n    }\n    else if (String2 != NULL && EndPtr2 == NULL)\n    {\n        fprintf(f, \"String2: EndPtr2 is NULL (no NUL found within String2Max)\\n\");\n    }\n    else\n    {\n        fprintf(f, \"String2 is NULL\\n\");\n    }\n\n    fprintf(f, \"sizeof(ScrubbedString1)=%zu\\n\", (size_t)256);\n\n    /* Warn about potential out-of-bounds condition (does not change program behavior) */\n    if (FormatLen1 >= 256)\n    {\n        fprintf(f, \"WARNING: FormatLen1 (%zu) >= ScrubbedString1 size (256) -> potential OOB on terminator/write\\n\",\n                FormatLen1);\n    }\n    if (FormatLen2 >= 256)\n    {\n        fprintf(f, \"WARNING: FormatLen2 (%zu) >= ScrubbedString2 size (256) -> potential OOB on terminator/write\\n\",\n                FormatLen2);\n    }\n\n    fprintf(f, \"--- end probe (%s) ---\\n\\n\", stage);\n    fflush(f);\n    fclose(f);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    /* Log after computing the formats so the values that determine copies are captured */\n    UtAssert_LogProbe(\"FormatsComputed\", String1, String1Max, EndPtr1, FormatLen1, String2, String2Max, EndPtr2,\n                      FormatLen2, File, (unsigned)Line);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n\n        /* Log just prior to the first memcpy to capture pre-copy state */\n        UtAssert_LogProbe(\"PreCopy1\", String1, String1Max, EndPtr1, FormatLen1, String2, String2Max, EndPtr2,\n                          FormatLen2, File, (unsigned)Line);\n\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n\n    /* Log immediately before writing the terminator to capture potential OOB condition */\n    UtAssert_LogProbe(\"BeforeTerminate1\", String1, String1Max, EndPtr1, FormatLen1, String2, String2Max, EndPtr2,\n                      FormatLen2, File, (unsigned)Line);\n\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n\n        /* Log just prior to the second memcpy to capture pre-copy state */\n        UtAssert_LogProbe(\"PreCopy2\", String1, String1Max, EndPtr1, FormatLen1, String2, String2Max, EndPtr2,\n                          FormatLen2, File, (unsigned)Line);\n\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n\n    /* Log immediately before writing the second terminator */\n    UtAssert_LogProbe(\"BeforeTerminate2\", String1, String1Max, EndPtr1, FormatLen1, String2, String2Max, EndPtr2,\n                      FormatLen2, File, (unsigned)Line);\n\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}"
}