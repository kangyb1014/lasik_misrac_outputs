{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(String1) when String1Max == UTASSERT_STRINGBUF_NULL_TERM and String1 != NULL. This relies on the caller guaranteeing that the object pointed to by String1 is NUL-terminated within its allocated bounds. If that guarantee is not upheld (i.e. String1 does not contain a terminating '\\0' within the allocated object), strlen will read past the object's bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Minimal stubs so this unit compiles as a standalone test module. */\ntypedef enum\n{\n    UtAssert_Compare_EQ,\n    UtAssert_Compare_NEQ,\n    UtAssert_Compare_LT,\n    UtAssert_Compare_GT,\n    UtAssert_Compare_LTEQ,\n    UtAssert_Compare_GTEQ\n} UtAssert_Compare_t;\n\nstatic const size_t UTASSERT_STRINGBUF_NULL_TERM = (size_t)-1;\nstatic const int UTASSERT_CASETYPE_FAILURE = 1;\n\n/* Simple UtAssertEx stub: log its invocation and return the provided result. */\nstatic bool UtAssertEx(bool Result, int CaseType, const char *File, uint32_t Line, const char *Fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Ensure log directory exists (best-effort). Ignoring errors intentionally. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return Result;\n    }\n\n    fprintf(f, \"UtAssertEx called: Result=%d CaseType=%d File=%s Line=%u\\n\", (int)Result, CaseType, File ? File : \"(null)\", (unsigned)Line);\n    fprintf(f, \"Message: \");\n    va_start(ap, Fmt);\n    vfprintf(f, Fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\\n\");\n    fclose(f);\n\n    return Result;\n}\n\n/* Logging helper used throughout the function to capture control flow and state. */\nstatic void UtAssert_LogProbe(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Best-effort create directory */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32_t Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Log entry and parameters */\n    UtAssert_LogProbe(\"ENTER UtAssert_StringBufCompare: String1=%p String1Max=%zu String2=%p String2Max=%zu CompareType=%d File=%s Line=%u\",\n                      (const void *)String1, String1Max, (const void *)String2, String2Max, (int)CompareType,\n                      File ? File : \"(null)\", (unsigned)Line);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        UtAssert_LogProbe(\"String1 is NULL\");\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        UtAssert_LogProbe(\"String1 non-NULL and String1Max indicates NUL-terminated sentinel. About to call strlen(String1). Pointer=%p\",\n                          (const void *)String1);\n        /* The call below is the location referred to in the violation scenario. */\n        EndPtr1 = String1 + strlen(String1);\n        UtAssert_LogProbe(\"strlen(String1) returned length=%zu; EndPtr1=%p\", EndPtr1 - String1, (const void *)EndPtr1);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"String1 non-NULL and bounded length provided. Calling memchr(String1,0,String1Max). Pointer=%p Max=%zu\",\n                          (const void *)String1, String1Max);\n        EndPtr1 = memchr(String1, 0, String1Max);\n        UtAssert_LogProbe(\"memchr result for String1: EndPtr1=%p\", (const void *)EndPtr1);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n    UtAssert_LogProbe(\"Computed FormatLen1=%zu\", FormatLen1);\n\n    if (String2 == NULL)\n    {\n        UtAssert_LogProbe(\"String2 is NULL\");\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        UtAssert_LogProbe(\"String2 non-NULL and String2Max indicates NUL-terminated sentinel. About to call strlen(String2). Pointer=%p\",\n                          (const void *)String2);\n        EndPtr2 = String2 + strlen(String2);\n        UtAssert_LogProbe(\"strlen(String2) returned length=%zu; EndPtr2=%p\", EndPtr2 - String2, (const void *)EndPtr2);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"String2 non-NULL and bounded length provided. Calling memchr(String2,0,String2Max). Pointer=%p Max=%zu\",\n                          (const void *)String2, String2Max);\n        EndPtr2 = memchr(String2, 0, String2Max);\n        UtAssert_LogProbe(\"memchr result for String2: EndPtr2=%p\", (const void *)EndPtr2);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n    UtAssert_LogProbe(\"Computed FormatLen2=%zu\", FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        UtAssert_LogProbe(\"Both format lengths 0 -> Compare set to 0\");\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            UtAssert_LogProbe(\"Comparing memcmp(String1,String2,FormatLen1=%zu)\", FormatLen1);\n            Compare = memcmp(String1, String2, FormatLen1);\n            UtAssert_LogProbe(\"memcmp result=%d\", Compare);\n        }\n        else\n        {\n            UtAssert_LogProbe(\"Comparing memcmp(String1,String2,FormatLen2=%zu)\", FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n            UtAssert_LogProbe(\"memcmp result=%d\", Compare);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            UtAssert_LogProbe(\"Initial content equal; Adjusted Compare by length: FormatLen1=%zu FormatLen2=%zu Compare=%d\",\n                              FormatLen1, FormatLen2, Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n    UtAssert_LogProbe(\"After CompareType evaluation: Compare=%d Result=%d\", Compare, (int)Result);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        UtAssert_LogProbe(\"Searching for newline in String1 within FormatLen1=%zu\", FormatLen1);\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            UtAssert_LogProbe(\"Newline found in String1 at %p; new FormatLen1=%zu\", (const void *)EndPtr1, FormatLen1);\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n    UtAssert_LogProbe(\"ScrubbedString1='%s' (len=%zu)\", ScrubbedString1, FormatLen1);\n\n    if (FormatLen2 > 0)\n    {\n        UtAssert_LogProbe(\"Searching for newline in String2 within FormatLen2=%zu\", FormatLen2);\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            UtAssert_LogProbe(\"Newline found in String2 at %p; new FormatLen2=%zu\", (const void *)EndPtr2, FormatLen2);\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n    UtAssert_LogProbe(\"ScrubbedString2='%s' (len=%zu)\", ScrubbedString2, FormatLen2);\n\n    UtAssert_LogProbe(\"About to call UtAssertEx with final Result=%d\", (int)Result);\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}