{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_Posix_FileSysAPI_Impl_Init() contains only a return OS_SUCCESS; statement and has no side effects. It is called from OS_API_Impl_Init() when idtype == OS_OBJECT_TYPE_OS_FILESYS. Removing this call (and/or the function) would not change program behaviour, so the executed operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Impl_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/172.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Impl_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Impl_Init:\n```c\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            break;\n        default:\n            break;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Impl_Init code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to record control flow and state to /tmp/logs/172.txt */\nstatic void os_api_probe_log(const char *stage, osal_objtype_t idtype, int32 code)\n{\n    FILE *f = fopen(\"/tmp/logs/172.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log a simple record: stage, idtype, return code */\n        fprintf(f, \"%s: idtype=%d return=%d\\n\", stage, (int)idtype, (int)code);\n        fclose(f);\n    }\n}\n\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    os_api_probe_log(\"ENTRY\", idtype, 0);\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    os_api_probe_log(\"After_TableMutex_Init\", idtype, return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        os_api_probe_log(\"TableMutex_Init_Failed_Return\", idtype, return_code);\n        return return_code;\n    }\n\n    os_api_probe_log(\"Before_Switch\", idtype, return_code);\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            os_api_probe_log(\"Before_Call_TaskAPI\", idtype, return_code);\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_TaskAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            os_api_probe_log(\"Before_Call_QueueAPI\", idtype, return_code);\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_QueueAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            os_api_probe_log(\"Before_Call_BinSemAPI\", idtype, return_code);\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_BinSemAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            os_api_probe_log(\"Before_Call_CountSemAPI\", idtype, return_code);\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_CountSemAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            os_api_probe_log(\"Before_Call_MutexAPI\", idtype, return_code);\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_MutexAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            os_api_probe_log(\"Before_Call_ModuleAPI\", idtype, return_code);\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_ModuleAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            os_api_probe_log(\"Before_Call_TimeBaseAPI\", idtype, return_code);\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_TimeBaseAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            os_api_probe_log(\"Before_Call_StreamAPI\", idtype, return_code);\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_StreamAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            os_api_probe_log(\"Before_Call_DirAPI\", idtype, return_code);\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_DirAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            /* This is the case reported as a potential dead executed operation. */\n            os_api_probe_log(\"Before_Call_FileSysAPI\", idtype, return_code);\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_FileSysAPI\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            os_api_probe_log(\"Before_Call_CondVarAPI\", idtype, return_code);\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            os_api_probe_log(\"After_Call_CondVarAPI\", idtype, return_code);\n            break;\n        default:\n            os_api_probe_log(\"Switch_Default\", idtype, return_code);\n            break;\n    }\n\n    os_api_probe_log(\"EXIT\", idtype, return_code);\n    return return_code;\n}\n"
}