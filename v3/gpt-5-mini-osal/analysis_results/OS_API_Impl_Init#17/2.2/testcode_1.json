{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe two memset(&sched_fifo_limits, 0, ...) and memset(&sched_rr_limits, 0, ...) calls are executed but their removal would not affect program behaviour. The subsequent OS_Posix_GetSchedulerParams() calls fully initialize these structs (setting PriorityMax and PriorityMin) before those values are used, and the structs are only referenced when the corresponding 'sched_*_valid' flag is true. If the functions fail the flags are false and the structs are not used. Therefore the memset operations are redundant (likely only present to silence a false uninitialized warning) and constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Impl_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/172.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Impl_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Impl_Init:\n```c\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            break;\n        default:\n            break;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Impl_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void OS_API_Impl_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/172.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    OS_API_Impl_Log(\"OS_API_Impl_Init: entry idtype=%d\", (int)idtype);\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    OS_API_Impl_Log(\"OS_Posix_TableMutex_Init returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_API_Impl_Log(\"OS_API_Impl_Init: early return due to TableMutex_Init failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_TASK init\");\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_TaskAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_QUEUE init\");\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_QueueAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_BINSEM init\");\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_BinSemAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_COUNTSEM init\");\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_CountSemAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_MUTEX init\");\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_MutexAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_MODULE init\");\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_ModuleAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_TIMEBASE init\");\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_TimeBaseAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_STREAM init\");\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_StreamAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_DIR init\");\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_DirAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_FILESYS init\");\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_FileSysAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: dispatching OS_CONDVAR init\");\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            OS_API_Impl_Log(\"OS_Posix_CondVarAPI_Impl_Init returned %d\", (int)return_code);\n            break;\n        default:\n            OS_API_Impl_Log(\"OS_API_Impl_Init: unknown idtype %d, no specific init called\", (int)idtype);\n            break;\n    }\n\n    OS_API_Impl_Log(\"OS_API_Impl_Init: exiting with return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}