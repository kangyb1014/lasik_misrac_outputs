{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_global_module_table is declared as 'OS_common_record_t *const' (a const pointer to non-const OS_common_record_t). The macro OS_OBJECT_TABLE_GET(&token) yields '&OS_global_module_table[index]' which has type 'OS_common_record_t *' and is assigned to 'record' (OS_common_record_t *). In the call site record is used only for read-only access (e.g. record->name_entry passed to strncpy), so the pointee could and should be const (e.g. 'const OS_common_record_t *' or the table declared as 'const OS_common_record_t *const'). Because the pointer points to non-const data when it could be const-qualified, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: write logs to /tmp/logs/2093.txt capturing control flow and state. */\nstatic void OS_ModuleInfo_LogProbe(osal_id_t module_id, OS_object_token_t *token, OS_common_record_t *record, OS_module_internal_record_t *module, int32 stage_code, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create directory then reopen. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n        if (f == NULL)\n        {\n            /* If still fails, give up silently to avoid disrupting behavior. */\n            return;\n        }\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    char tb[32];\n    if (t != (time_t)-1)\n    {\n        struct tm tmv;\n        if (localtime_r(&t, &tmv) != NULL)\n        {\n            (void)strftime(tb, sizeof(tb), \"%Y-%m-%d %H:%M:%S\", &tmv);\n        }\n        else\n        {\n            tb[0] = '\\0';\n        }\n    }\n    else\n    {\n        tb[0] = '\\0';\n    }\n\n    fprintf(f, \"[%s] OS_ModuleInfo probe: stage=%d return_code=%d module_id=%d\\n\", tb, stage_code, return_code, (int)module_id);\n\n    if (token != NULL)\n    {\n        /* Print token pointer value to help map to table indexing in implementation-specific token formats. */\n        fprintf(f, \"  token_ptr=%p\\n\", (void *)token);\n    }\n    else\n    {\n        fprintf(f, \"  token_ptr=NULL\\n\");\n    }\n\n    if (record != NULL)\n    {\n        fprintf(f, \"  record_ptr=%p\\n\", (void *)record);\n\n        /* Attempt to compute index relative to global module table if available. */\n        /* Note: OS_global_module_table is referenced here because the original code uses it. */\n#ifdef OS_global_module_table\n        /* If OS_global_module_table is visible as an array/pointer, compute difference. */\n        ptrdiff_t idx = (ptrdiff_t)(record - OS_global_module_table);\n        fprintf(f, \"  computed_index_from_global_table=%td\\n\", idx);\n#endif\n\n        /* Log some read-only fields that are used later in OS_ModuleInfo. */\n        if (record->name_entry != NULL)\n        {\n            fprintf(f, \"  record->name_entry=%s\\n\", record->name_entry);\n        }\n        else\n        {\n            fprintf(f, \"  record->name_entry=NULL\\n\");\n        }\n    }\n    else\n    {\n        fprintf(f, \"  record_ptr=NULL\\n\");\n    }\n\n    if (module != NULL)\n    {\n        fprintf(f, \"  module_ptr=%p\\n\", (void *)module);\n        if (module->file_name != NULL)\n        {\n            fprintf(f, \"  module->file_name=%s\\n\", module->file_name);\n        }\n        else\n        {\n            fprintf(f, \"  module->file_name=NULL\\n\");\n        }\n    }\n    else\n    {\n        fprintf(f, \"  module_ptr=NULL\\n\");\n    }\n\n    fprintf(f, \"  note: record is treated read-only (no writes performed) in OS_ModuleInfo; this probes addresses and read-only fields.\\n\\n\");\n\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    /* Probe: before obtaining object id */\n    OS_ModuleInfo_LogProbe(module_id, NULL, NULL, NULL, 0, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Resolve records as in original code */\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Probe: after resolving pointers, before copying strings */\n        OS_ModuleInfo_LogProbe(module_id, &token, record, module, 1, return_code);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Probe: after populating module_prop and before impl call */\n        OS_ModuleInfo_LogProbe(module_id, &token, record, module, 2, return_code);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Probe: after impl call and before releasing token */\n        OS_ModuleInfo_LogProbe(module_id, &token, record, module, 3, return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Probe: failure to get id */\n        OS_ModuleInfo_LogProbe(module_id, NULL, NULL, NULL, -1, return_code);\n    }\n\n    return return_code;\n}\n"
}