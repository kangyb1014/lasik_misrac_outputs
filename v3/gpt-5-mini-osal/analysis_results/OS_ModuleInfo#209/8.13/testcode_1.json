{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'module' is declared as OS_module_internal_record_t * and is assigned from &OS_module_table[index] via OS_OBJECT_TABLE_GET. In this function 'module' is only read (e.g. module->file_name) and there is no need to modify the table element, so the pointer could and should be declared const OS_module_internal_record_t *module (assigning a non-const object address to a pointer-to-const is allowed). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper for OS_ModuleInfo\n * Appends control flow and state information to /tmp/logs/2093.txt\n */\nstatic void OS_ModuleInfo_Log(const char *stage,\n                              osal_id_t module_id,\n                              int32 return_code,\n                              const OS_common_record_t *record,\n                              const OS_module_internal_record_t *module,\n                              const OS_object_token_t *token,\n                              const OS_module_prop_t *module_prop)\n{\n    FILE *fp = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not change behavior of the function */\n        return;\n    }\n\n    fprintf(fp, \"[OS_ModuleInfo] stage=%s module_id=%ld return_code=%ld\\n\",\n            (stage != NULL) ? stage : \"(null)\", (long)module_id, (long)return_code);\n\n    if (token != NULL)\n    {\n        /* Print address of token object (value may be opaque) */\n        fprintf(fp, \"  token_addr=%p\\n\", (const void *)token);\n    }\n\n    if (record != NULL)\n    {\n        /* record->name_entry is expected to be a string; print safely */\n        fprintf(fp, \"  record_addr=%p name_entry=\\\"%s\\\"\\n\",\n                (const void *)record,\n                (record->name_entry != NULL) ? record->name_entry : \"(null)\");\n    }\n    else\n    {\n        fprintf(fp, \"  record_addr=(null)\\n\");\n    }\n\n    if (module != NULL)\n    {\n        /* module->file_name is expected to be a string; print safely */\n        fprintf(fp, \"  module_addr=%p file_name=\\\"%s\\\"\\n\",\n                (const void *)module,\n                (module->file_name != NULL) ? module->file_name : \"(null)\");\n    }\n    else\n    {\n        fprintf(fp, \"  module_addr=(null)\\n\");\n    }\n\n    if (module_prop != NULL)\n    {\n        /* Print the destination property buffers to show what was copied */\n        fprintf(fp, \"  module_prop_addr=%p name=\\\"%s\\\" filename=\\\"%s\\\"\\n\",\n                (const void *)module_prop,\n                (module_prop->name != NULL) ? module_prop->name : \"(null)\",\n                (module_prop->filename != NULL) ? module_prop->filename : \"(null)\");\n    }\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    /* Log entry and input state */\n    OS_ModuleInfo_Log(\"entry\", module_id, -1, NULL, NULL, NULL, module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    /* Log after clearing output buffer */\n    OS_ModuleInfo_Log(\"after_memset\", module_id, -1, NULL, NULL, NULL, module_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_ModuleInfo_Log(\"after_ObjectIdGetById\", module_id, return_code, NULL, NULL, &token, module_prop);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log pointers and contents read from the tables before copying */\n        OS_ModuleInfo_Log(\"before_strncpy\", module_id, return_code, record, module, &token, module_prop);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log after copying the strings into module_prop */\n        OS_ModuleInfo_Log(\"after_strncpy\", module_id, return_code, record, module, &token, module_prop);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log after calling platform-specific implementation */\n        OS_ModuleInfo_Log(\"after_Impl\", module_id, return_code, record, module, &token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing token */\n        OS_ModuleInfo_Log(\"after_Release\", module_id, return_code, record, module, &token, module_prop);\n    }\n    else\n    {\n        /* Log early return case */\n        OS_ModuleInfo_Log(\"error_no_id\", module_id, return_code, NULL, NULL, &token, module_prop);\n    }\n\n    return return_code;\n}\n"
}