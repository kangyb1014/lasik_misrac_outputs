{
  "user_message": "An agent A claimed that the following OS_ModuleInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleInfo.\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'module' is only used to read fields (e.g. strncpy(module_prop->filename, module->file_name, ...)) and is assigned from a non-const array element via OS_OBJECT_TABLE_GET. Because the pointer is not modified through and only read, it could and should be declared as const OS_module_internal_record_t *module to indicate read-only access. Assigning the non-const table element to a pointer-to-const is allowed, so the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleInfo:\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char             module_name[OS_MAX_API_NAME];\n    char             file_name[OS_MAX_PATH_LEN];\n    OS_module_type_t module_type;\n    uint32           flags;\n    cpuaddr          entry_point;\n} OS_module_internal_record_t\n...\ntypedef struct\n{\n    cpuaddr             entry_point;\n    cpuaddr             host_module_id;\n    char                filename[OS_MAX_PATH_LEN];\n    char                name[OS_MAX_API_NAME];\n    OS_module_address_t addr;\n} OS_module_prop_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_module_table\n...\nOS_module_internal_record_t OS_module_table[OS_MAX_MODULES]\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_ModuleInfo the local pointer 'module' is only used to read fields (strncpy(module_prop->filename, module->file_name, ...)) and is not used to modify the pointed object. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the pointer should be declared as const OS_module_internal_record_t *module. The macro OS_OBJECT_TABLE_GET yields the address of a non-const array element (&OS_module_table[index]); assigning that to a pointer-to-const is allowed, so there is no obstacle to adding the const. (Note: if the pointer were later used to modify the object or passed to APIs requiring a non-const pointer, const could not be applied \u2014 but in the shown function it is safe and advisable.)"
}