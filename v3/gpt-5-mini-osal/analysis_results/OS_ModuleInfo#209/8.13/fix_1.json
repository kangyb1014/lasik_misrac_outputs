{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_ModuleInfo_Log(const char *stage, const void *token_addr, const char *record_name, const char *module_file, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not alter behavior on failure */\n    }\n\n    time_t now = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&now, &tm_buf) == NULL)\n    {\n        fprintf(f, \"[OS_ModuleInfo] %s: time=unknown\\n\", stage);\n    }\n    else\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) != 0)\n        {\n            fprintf(f, \"[OS_ModuleInfo] %s: time=%s\\n\", stage, timestr);\n        }\n        else\n        {\n            fprintf(f, \"[OS_ModuleInfo] %s: time=unknown\\n\", stage);\n        }\n    }\n\n    /* token_addr is logged as its address to show where the token was stored on the stack */\n    fprintf(f, \"  token_addr=%p, return_code=%d\\n\", token_addr, (int)return_code);\n\n    /* Log the record name and module file name if available */\n    if (record_name != NULL)\n    {\n        /* Ensure the string is safely logged */\n        fprintf(f, \"  record->name_entry='%s'\\n\", record_name);\n    }\n    else\n    {\n        fprintf(f, \"  record->name_entry=(null)\\n\");\n    }\n\n    if (module_file != NULL)\n    {\n        fprintf(f, \"  module->file_name='%s'\\n\", module_file);\n    }\n    else\n    {\n        fprintf(f, \"  module->file_name=(null)\\n\");\n    }\n\n    fprintf(f, \"  ---\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    /* Log before attempting to get object id */\n    OS_ModuleInfo_Log(\"before OS_ObjectIdGetById\", &token, NULL, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of OS_ObjectIdGetById */\n    OS_ModuleInfo_Log(\"after OS_ObjectIdGetById\", &token, NULL, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log the pointers and relevant string fields before copying */\n        OS_ModuleInfo_Log(\"before strncpy copies\", &token,\n                          (record != NULL) ? record->name_entry : NULL,\n                          (module != NULL) ? module->file_name : NULL,\n                          return_code);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log after strncpy copies to capture values that were read */\n        OS_ModuleInfo_Log(\"after strncpy copies\", &token,\n                          (record != NULL) ? record->name_entry : NULL,\n                          (module != NULL) ? module->file_name : NULL,\n                          return_code);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log result of implementation call and resulting prop filename (state read) */\n        OS_ModuleInfo_Log(\"after OS_ModuleGetInfo_Impl\", &token,\n                          (record != NULL) ? record->name_entry : NULL,\n                          (module_prop != NULL) ? module_prop->filename : NULL,\n                          return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Final log after releasing token */\n        OS_ModuleInfo_Log(\"after OS_ObjectIdRelease\", &token,\n                          (record != NULL) ? record->name_entry : NULL,\n                          (module_prop != NULL) ? module_prop->filename : NULL,\n                          return_code);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpoq_al7fx/src/src/os/shared/src/osapi-module.c: In function 'OS_ModuleInfo_Log':\n/tmp/tmpoq_al7fx/src/src/os/shared/src/osapi-module.c:316:15: error: storage size of 'tm_buf' isn't known\n  316 |     struct tm tm_buf;\n      |               ^~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/__/__/os/shared/src/osapi-module.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3849: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <time.h>\n\nstatic void OS_ModuleInfo_Log(const char *stage, const void *token_addr, const char *record_name, const char *module_file, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not alter behavior on failure */\n    }\n\n    time_t now = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&now, &tm_buf) == NULL)\n    {\n        fprintf(f, \"[OS_ModuleInfo] %s: time=unknown\\n\", stage);\n    }\n    else\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) != 0)\n        {\n            fprintf(f, \"[OS_ModuleInfo] %s: time=%s\\n\", stage, timestr);\n        }\n        else\n        {\n            fprintf(f, \"[OS_ModuleInfo] %s: time=unknown\\n\", stage);\n        }\n    }\n\n    /* token_addr is logged as its address to show where the token was stored on the stack */\n    fprintf(f, \"  token_addr=%p, return_code=%d\\n\", token_addr, (int)return_code);\n\n    /* Log the record name and module file name if available */\n    if (record_name != NULL)\n    {\n        /* Ensure the string is safely logged */\n        fprintf(f, \"  record->name_entry='%s'\\n\", record_name);\n    }\n    else\n    {\n        fprintf(f, \"  record->name_entry=(null)\\n\");\n    }\n\n    if (module_file != NULL)\n    {\n        fprintf(f, \"  module->file_name='%s'\\n\", module_file);\n    }\n    else\n    {\n        fprintf(f, \"  module->file_name=(null)\\n\");\n    }\n\n    fprintf(f, \"  ---\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    /* Log before attempting to get object id */\n    OS_ModuleInfo_Log(\"before OS_ObjectIdGetById\", &token, NULL, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of OS_ObjectIdGetById */\n    OS_ModuleInfo_Log(\"after OS_ObjectIdGetById\", &token, NULL, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log the pointers and relevant string fields before copying */\n        OS_ModuleInfo_Log(\"before strncpy copies\", &token,\n                          (record != NULL) ? record->name_entry : NULL,\n                          (module != NULL) ? module->file_name : NULL,\n                          return_code);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log after strncpy copies to capture values that were read */\n        OS_ModuleInfo_Log(\"after strncpy copies\", &token,\n                          (record != NULL) ? record->name_entry : NULL,\n                          (module != NULL) ? module->file_name : NULL,\n                          return_code);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log result of implementation call and resulting prop filename (state read) */\n        OS_ModuleInfo_Log(\"after OS_ModuleGetInfo_Impl\", &token,\n                          (record != NULL) ? record->name_entry : NULL,\n                          (module_prop != NULL) ? module_prop->filename : NULL,\n                          return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Final log after releasing token */\n        OS_ModuleInfo_Log(\"after OS_ObjectIdRelease\", &token,\n                          (record != NULL) ? record->name_entry : NULL,\n                          (module_prop != NULL) ? module_prop->filename : NULL,\n                          return_code);\n    }\n\n    return return_code;\n}\n",
  "explanation": "The compile error was due to an incomplete declaration of struct tm because <time.h> was not included. I added #include <time.h> at the top so that time_t, struct tm, localtime_r, and strftime are properly declared. No other logic was changed."
}