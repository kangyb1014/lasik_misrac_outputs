{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ModuleInfo:\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char             module_name[OS_MAX_API_NAME];\n    char             file_name[OS_MAX_PATH_LEN];\n    OS_module_type_t module_type;\n    uint32           flags;\n    cpuaddr          entry_point;\n} OS_module_internal_record_t\n...\ntypedef struct\n{\n    cpuaddr             entry_point;\n    cpuaddr             host_module_id;\n    char                filename[OS_MAX_PATH_LEN];\n    char                name[OS_MAX_API_NAME];\n    OS_module_address_t addr;\n} OS_module_prop_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_module_table\n...\nOS_module_internal_record_t OS_module_table[OS_MAX_MODULES]\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "module = OS_OBJECT_TABLE_GET(OS_module_table, token);",
    "extern OS_common_record_t *const OS_global_module_table",
    "strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);",
    "OS_common_record_t *         record;",
    "strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);",
    "record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);",
    "OS_module_internal_record_t OS_module_table[OS_MAX_MODULES]",
    "OS_module_internal_record_t *module;"
  ],
  "explanation": "The selected fragments are the places where non-const pointers (or table definitions that yield non-const pointers) are obtained and used only for read access; these should be investigated to determine whether the pointers (or the table element types) could/should be const-qualified per MISRA C 2023 Rule 8.13. Other code fragments in the provided function and definitions were not selected because they do not present candidate pointer declarations that could be made to point to const-qualified types: - The function parameter OS_module_prop_t *module_prop is an output buffer and is written to (memset, strncpy), so it must remain a non-const pointer. - OS_CHECK_POINTER(module_prop), memset(module_prop,...), and the strncpy destinations operate on module_prop (a writable target), not on read-only sources. - The variable token is not a pointer-to-object type that would be const-qualified here; it is used as an object token value passed by address to object APIs. - Calls such as OS_ObjectIdGetById, OS_ObjectIdRelease, and OS_ModuleGetInfo_Impl manipulate tokens and module_prop and do not introduce pointer declarations that could be const-qualified in this scope. - The return_code/local scalar variables are not pointer types. - The macro OS_OBJECT_TABLE_GET itself is generic; the suspicious aspect is its use with non-const tables (which is why the table declarations and the uses were selected). These other fragments therefore do not need investigation for Rule 8.13 beyond the selected items."
}