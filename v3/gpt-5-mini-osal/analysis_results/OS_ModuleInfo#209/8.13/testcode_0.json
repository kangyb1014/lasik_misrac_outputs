{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro yields a pointer to the table element type without const qualification. For example, in OS_ModuleInfo the call record = OS_OBJECT_TABLE_GET(OS_global_module_table, token); produces a value of type OS_common_record_t * that points into the global table. The global table elements are intended to be read-only, so the pointer should be to const (e.g. const OS_common_record_t *). Because the macro always returns a non-const pointer to the element, it enables non-const access to data that should be const-qualified and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "static void OS_ModuleInfo_LogProbe(const char *stage, const OS_object_token_t *token, const OS_common_record_t *record, const OS_module_internal_record_t *module, const OS_module_prop_t *module_prop, int32 rc)\n{\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_ModuleInfo log ---\\n\");\n    fprintf(f, \"Stage: %s\\n\", stage != NULL ? stage : \"(null)\");\n    fprintf(f, \"return_code: %ld\\n\", (long)rc);\n    fprintf(f, \"module_prop ptr: %p\\n\", (const void *)module_prop);\n    fprintf(f, \"token addr: %p\\n\", (const void *)token);\n    fprintf(f, \"record ptr: %p\\n\", (const void *)record);\n    fprintf(f, \"module ptr: %p\\n\", (const void *)module);\n\n    /* Log contents that are safe to read (module_prop is zeroed before use) */\n    if (module_prop != NULL)\n    {\n        fprintf(f, \"module_prop->name: \\\"%s\\\"\\n\", module_prop->name);\n        fprintf(f, \"module_prop->filename: \\\"%s\\\"\\n\", module_prop->filename);\n    }\n\n    /* If record or module are non-NULL, attempt to log the source strings that come from the table.\n       These fields are used by the original code (record->name_entry and module->file_name).\n       Logging them here helps demonstrate that the data in module_prop originated from the (global) tables. */\n    if (record != NULL && record->name_entry != NULL)\n    {\n        fprintf(f, \"record->name_entry: \\\"%s\\\"\\n\", record->name_entry);\n    }\n\n    if (module != NULL && module->file_name != NULL)\n    {\n        fprintf(f, \"module->file_name: \\\"%s\\\"\\n\", module->file_name);\n    }\n\n    fprintf(f, \"--- end log ---\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    /* Log entry into the function and the provided parameters */\n    OS_ModuleInfo_LogProbe(\"entry_after_memset\", NULL, NULL, NULL, module_prop, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log successful lookup (token available) before table access */\n        OS_ModuleInfo_LogProbe(\"after_ObjectIdGetById\", &token, NULL, NULL, module_prop, return_code);\n\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log pointers returned from the table getters to show they reference the global tables */\n        OS_ModuleInfo_LogProbe(\"after_table_get_before_copy\", &token, record, module, module_prop, return_code);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log after copying table contents into the output structure to show provenance of data */\n        OS_ModuleInfo_LogProbe(\"after_copy_to_module_prop\", &token, record, module, module_prop, return_code);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log return from implementation hook */\n        OS_ModuleInfo_LogProbe(\"after_Impl_call\", &token, record, module, module_prop, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_ModuleInfo_LogProbe(\"after_release\", NULL, record, module, module_prop, return_code);\n    }\n    else\n    {\n        /* Log failure to obtain object id */\n        OS_ModuleInfo_LogProbe(\"ObjectIdGetById_failed\", NULL, NULL, NULL, module_prop, return_code);\n    }\n\n    return return_code;\n}"
}