{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration is a const pointer to a non-const object: 'extern OS_common_record_t *const OS_global_module_table'. Rule 8.13 requires pointers to point to const-qualified types whenever possible, so the pointed-to type should be const if the table is intended to be read-only. Example fix: 'extern const OS_common_record_t *const OS_global_module_table;'. If the records are intentionally mutable (code must modify the pointed-to records), then making them const would be incorrect and no violation occurs; otherwise this declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n    FILE *                       fp = NULL;\n\n    /* Open log file for appending control-flow and state info */\n    fp = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log entry and basic parameters */\n        (void)fprintf(fp, \"[OS_ModuleInfo] entry: module_id=%\" PRIuPTR \", module_prop=%p\\n\",\n                      (uintptr_t)module_id, (void *)module_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    if (fp != NULL)\n    {\n        (void)fprintf(fp, \"[OS_ModuleInfo] parameter check passed\\n\");\n    }\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (fp != NULL)\n    {\n        (void)fprintf(fp, \"[OS_ModuleInfo] OS_ObjectIdGetById returned %ld, token at %p\\n\",\n                      (long)return_code, (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        if (fp != NULL)\n        {\n            /* Log the raw pointers retrieved from the object tables */\n            (void)fprintf(fp, \"[OS_ModuleInfo] record=%p, module=%p\\n\",\n                          (void *)record, (void *)module);\n\n            /* Safely copy and log identifiable string fields if present */\n            {\n                char namebuf[sizeof(module_prop->name)];\n                char filebuf[sizeof(module_prop->filename)];\n\n                if (record != NULL && record->name_entry != NULL)\n                {\n                    strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n                    namebuf[sizeof(namebuf) - 1] = '\\0';\n                }\n                else\n                {\n                    namebuf[0] = '\\0';\n                }\n\n                if (module != NULL && module->file_name != NULL)\n                {\n                    strncpy(filebuf, module->file_name, sizeof(filebuf) - 1);\n                    filebuf[sizeof(filebuf) - 1] = '\\0';\n                }\n                else\n                {\n                    filebuf[0] = '\\0';\n                }\n\n                (void)fprintf(fp, \"[OS_ModuleInfo] record->name_entry=\\\"%s\\\", module->file_name=\\\"%s\\\"\\n\",\n                              namebuf, filebuf);\n            }\n        }\n\n        /* Preserve original logic: copy names into module_prop */\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        if (fp != NULL)\n        {\n            (void)fprintf(fp, \"[OS_ModuleInfo] copied fields into module_prop (pre-impl)\\n\");\n        }\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        if (fp != NULL)\n        {\n            /* Log the result of implementation-specific info retrieval */\n            (void)fprintf(fp, \"[OS_ModuleInfo] OS_ModuleGetInfo_Impl returned %ld\\n\", (long)return_code);\n\n            /* Log resulting module_prop summary */\n            (void)fprintf(fp, \"[OS_ModuleInfo] module_prop->name=\\\"%s\\\", module_prop->filename=\\\"%s\\\"\\n\",\n                          module_prop->name, module_prop->filename);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (fp != NULL)\n        {\n            (void)fprintf(fp, \"[OS_ModuleInfo] token released\\n\");\n        }\n    }\n    else\n    {\n        if (fp != NULL)\n        {\n            (void)fprintf(fp, \"[OS_ModuleInfo] early exit with return_code=%ld\\n\", (long)return_code);\n        }\n    }\n\n    if (fp != NULL)\n    {\n        (void)fprintf(fp, \"[OS_ModuleInfo] exit: return_code=%ld\\n\", (long)return_code);\n        (void)fclose(fp);\n    }\n\n    return return_code;\n}\n"
}