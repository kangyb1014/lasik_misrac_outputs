{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'record' is declared as 'OS_common_record_t *record;' but it is only used for read access (e.g. strncpy(module_prop->name, record->name_entry, ...)) and points into the global module table. According to MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type, e.g. 'const OS_common_record_t *record;'. Therefore the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper to capture control flow and state for OS_ModuleInfo. */\nstatic void OS_ModuleInfo_LogState(const char *phase, osal_id_t module_id,\n                                   OS_common_record_t *record,\n                                   OS_module_internal_record_t *module,\n                                   int32 return_code,\n                                   const OS_object_token_t *token,\n                                   const OS_module_prop_t *module_prop)\n{\n    FILE *fp = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Print basic phase and ids */\n    fprintf(fp, \"OS_ModuleInfo - Phase: %s\\n\", phase);\n    fprintf(fp, \"  module_id (raw): %lu\\n\", (unsigned long)module_id);\n    fprintf(fp, \"  return_code (raw): %ld\\n\", (long)return_code);\n    fprintf(fp, \"  token ptr: %p\\n\", (const void *)token);\n\n    /* Record state (read-only fields only) */\n    if (record != NULL)\n    {\n        char name_buf[64];\n        /* Defensive copy to ensure we don't read beyond assumed bounds */\n        name_buf[0] = '\\0';\n        if (record->name_entry != NULL)\n        {\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n        }\n        fprintf(fp, \"  record ptr: %p\\n\", (const void *)record);\n        fprintf(fp, \"  record->name_entry (copied): \\\"%s\\\"\\n\", name_buf);\n    }\n    else\n    {\n        fprintf(fp, \"  record: NULL\\n\");\n    }\n\n    if (module != NULL)\n    {\n        char file_buf[128];\n        file_buf[0] = '\\0';\n        if (module->file_name != NULL)\n        {\n            strncpy(file_buf, module->file_name, sizeof(file_buf) - 1);\n            file_buf[sizeof(file_buf) - 1] = '\\0';\n        }\n        fprintf(fp, \"  module ptr: %p\\n\", (const void *)module);\n        fprintf(fp, \"  module->file_name (copied): \\\"%s\\\"\\n\", file_buf);\n    }\n    else\n    {\n        fprintf(fp, \"  module: NULL\\n\");\n    }\n\n    if (module_prop != NULL)\n    {\n        char mname[sizeof(module_prop->name)];\n        char mfile[sizeof(module_prop->filename)];\n        /* Copy safely to avoid over-reads */\n        memset(mname, 0, sizeof(mname));\n        memset(mfile, 0, sizeof(mfile));\n        strncpy(mname, module_prop->name, sizeof(mname) - 1);\n        strncpy(mfile, module_prop->filename, sizeof(mfile) - 1);\n        fprintf(fp, \"  module_prop->name (copied): \\\"%s\\\"\\n\", mname);\n        fprintf(fp, \"  module_prop->filename (copied): \\\"%s\\\"\\n\", mfile);\n    }\n    else\n    {\n        fprintf(fp, \"  module_prop: NULL\\n\");\n    }\n\n    fprintf(fp, \"--\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry */\n    OS_ModuleInfo_LogState(\"entry\", module_id, NULL, NULL, 0, NULL, module_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    /* Log after clearing output structure */\n    OS_ModuleInfo_LogState(\"after_memset\", module_id, NULL, NULL, 0, NULL, module_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_ModuleInfo_LogState(\"after_ObjectIdGetById\", module_id, NULL, NULL, return_code, &token, module_prop);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log pointers retrieved from object tables before any use */\n        OS_ModuleInfo_LogState(\"after_table_get\", module_id, record, module, return_code, &token, module_prop);\n\n        /* Preserve original logic: copy name and filename into module_prop (read-only access to record) */\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        module_prop->name[sizeof(module_prop->name) - 1] = '\\0';\n\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n        module_prop->filename[sizeof(module_prop->filename) - 1] = '\\0';\n\n        /* Log state after copying into module_prop (evidence of read-only access to record) */\n        OS_ModuleInfo_LogState(\"after_strncpy\", module_id, record, module, return_code, &token, module_prop);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log result of implementation-specific get info */\n        OS_ModuleInfo_LogState(\"after_Impl\", module_id, record, module, return_code, &token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing token */\n        OS_ModuleInfo_LogState(\"after_release\", module_id, record, module, return_code, &token, module_prop);\n    }\n\n    return return_code;\n}\n"
}