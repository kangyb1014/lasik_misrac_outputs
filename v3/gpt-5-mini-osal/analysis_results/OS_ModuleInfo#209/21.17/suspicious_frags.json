{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ModuleInfo:\ntypedef struct\n{\n    cpuaddr             entry_point;\n    cpuaddr             host_module_id;\n    char                filename[OS_MAX_PATH_LEN];\n    char                name[OS_MAX_API_NAME];\n    OS_module_address_t addr;\n} OS_module_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char             module_name[OS_MAX_API_NAME];\n    char             file_name[OS_MAX_PATH_LEN];\n    OS_module_type_t module_type;\n    uint32           flags;\n    cpuaddr          entry_point;\n} OS_module_internal_record_t\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nextern OS_common_record_t *const OS_global_module_table\n...\nOS_module_internal_record_t OS_module_table[OS_MAX_MODULES]\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "memset(module_prop, 0, sizeof(OS_module_prop_t));",
    "strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);",
    "strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);"
  ],
  "explanation": "Other lines in the function do not invoke the <string.h> functions listed by MISRA C 2023 Rule 21.17 and thus are outside the scope of this rule. For example, OS_CHECK_POINTER is a macro that only validates the pointer (no string.h usage), the calls to OS_ObjectIdGetById, OS_ObjectIdRelease, and OS_ModuleGetInfo_Impl are API/transaction calls that do not directly perform string.h operations in this fragment, and the table/index macros (OS_OBJECT_TABLE_GET, OS_ObjectIndexFromToken) merely compute addresses rather than perform string or memory operations from <string.h>. The declarations and assignments of local pointers/integers likewise do not use the listed string functions. Therefore only the explicit uses of memset and strncpy in this function need further investigation under Rule 21.17."
}