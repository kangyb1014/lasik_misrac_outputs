{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the field ContentTypeStr is declared as a non-const pointer (e.g. char *ContentTypeStr), then assigning a const char * (TypeName) to it discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. The correct fix is to declare the field as const char *ContentTypeStr so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_RegisterReturnType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_RegisterReturnType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_RegisterReturnType:\n```c\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (ReturnSize > 0)\n    {\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n            StubPtr = NULL;\n        }\n\n        if (StubPtr == NULL)\n        {\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n            if (StubPtr == NULL)\n            {\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            StubPtr->Data.Buff.Position       = 0;\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_RegisterReturnType code.\n",
  "test_code": "/* Probe-enhanced UT_Stub_RegisterReturnType for logging control flow and state to /tmp/logs/3233.txt */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n/* Helper to log state. Keep parameters typed to match surrounding code. */\nstatic void UT_Log_State(const char *stage, UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName, UT_StubTableEntry_t *StubPtr)\n{\n    FILE *f = fopen(\"/tmp/logs/3233.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    char timebuf[32] = \"\";\n    if (t != (time_t)(-1))\n    {\n        struct tm tmv;\n        if (localtime_r(&t, &tmv) != NULL)\n        {\n            strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tmv);\n        }\n    }\n\n    fprintf(f, \"[%s] Stage: %s\\n\", timebuf[0] ? timebuf : \"time-unavailable\", stage);\n    fprintf(f, \"  FuncKey: %lu\\n\", (unsigned long)FuncKey);\n    fprintf(f, \"  ReturnSize: %zu\\n\", ReturnSize);\n    if (TypeName != NULL)\n    {\n        /* Print pointer value and string content (safely) */\n        fprintf(f, \"  TypeName ptr: %p\\n\", (const void *)TypeName);\n        fprintf(f, \"  TypeName str: '%s'\\n\", TypeName);\n    }\n    else\n    {\n        fprintf(f, \"  TypeName: NULL\\n\");\n    }\n\n    if (StubPtr == NULL)\n    {\n        fprintf(f, \"  StubPtr: NULL\\n\");\n    }\n    else\n    {\n        /* Be defensive: only access members if StubPtr is non-NULL. */\n        fprintf(f, \"  StubPtr ptr: %p\\n\", (const void *)StubPtr);\n        /* Many of these fields are implementation-defined; guard prints. */\n        fprintf(f, \"  EntryType: %d\\n\", (int)StubPtr->EntryType);\n        fprintf(f, \"  FuncKey (entry): %lu\\n\", (unsigned long)StubPtr->FuncKey);\n        /* Buffer-related details (if present) */\n        fprintf(f, \"  Data.Buff.BasePtr: %p\\n\", (const void *)StubPtr->Data.Buff.BasePtr);\n        fprintf(f, \"  Data.Buff.TotalSize: %zu\\n\", StubPtr->Data.Buff.TotalSize);\n        fprintf(f, \"  Data.Buff.Position: %zu\\n\", StubPtr->Data.Buff.Position);\n        fprintf(f, \"  Data.Buff.ContentTypeStr ptr: %p\\n\", (const void *)StubPtr->Data.Buff.ContentTypeStr);\n        if (StubPtr->Data.Buff.ContentTypeStr != NULL)\n        {\n            /* Print the current content type string safely */\n            fprintf(f, \"  Data.Buff.ContentTypeStr str: '%s'\\n\", StubPtr->Data.Buff.ContentTypeStr);\n        }\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry parameters */\n    UT_Log_State(\"entry\", FuncKey, ReturnSize, TypeName, NULL);\n\n    if (ReturnSize > 0)\n    {\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n        /* Log after attempting to get existing return buffer */\n        UT_Log_State(\"after_get_existing_return_buffer\", FuncKey, ReturnSize, TypeName, StubPtr);\n\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            /* Log mismatch before clearing */\n            UT_Log_State(\"mismatch_total_size_before_clear\", FuncKey, ReturnSize, TypeName, StubPtr);\n\n            UT_ClearStubEntry(StubPtr);\n            StubPtr = NULL;\n\n            /* Log after clear and nullify */\n            UT_Log_State(\"after_clear_and_nullify\", FuncKey, ReturnSize, TypeName, NULL);\n        }\n\n        if (StubPtr == NULL)\n        {\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n            /* Log after getting unused entry */\n            UT_Log_State(\"after_get_unused_entry\", FuncKey, ReturnSize, TypeName, StubPtr);\n\n            if (StubPtr == NULL)\n            {\n                UT_Log_State(\"abort_cannot_set_return_buffer\", FuncKey, ReturnSize, TypeName, NULL);\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n\n                /* Log after allocation attempt */\n                UT_Log_State(\"after_malloc\", FuncKey, ReturnSize, TypeName, StubPtr);\n\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UT_Log_State(\"abort_malloc_failed\", FuncKey, ReturnSize, TypeName, StubPtr);\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n\n                    /* Log after successful allocation and memset */\n                    UT_Log_State(\"after_successful_alloc_and_memset\", FuncKey, ReturnSize, TypeName, StubPtr);\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n\n                /* Log after setting TotalSize */\n                UT_Log_State(\"after_set_total_size\", FuncKey, ReturnSize, TypeName, StubPtr);\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            StubPtr->Data.Buff.Position = 0;\n\n            /* Log state right before assigning ContentTypeStr */\n            UT_Log_State(\"before_assign_contenttypestr\", FuncKey, ReturnSize, TypeName, StubPtr);\n\n            /*\n             * Here the original code assigns the incoming const char *TypeName\n             * to StubPtr->Data.Buff.ContentTypeStr. This operation is the\n             * focal point for the reported MISRA Rule 8.13 violation when\n             * ContentTypeStr is declared as a non-const char * because it\n             * discards the const qualifier from TypeName. We log the pointer\n             * and string to provide evidence of the assignment and context.\n             */\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n\n            /* Log state immediately after assignment */\n            UT_Log_State(\"after_assign_contenttypestr\", FuncKey, ReturnSize, TypeName, StubPtr);\n        }\n    }\n}\n"
}