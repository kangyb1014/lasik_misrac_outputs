{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketListen_Impl the local pointer 'OS_impl_file_internal_record_t *impl;' is only used to read impl->fd (passed to listen) and the pointed object is not modified in this function. According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified (e.g. 'const OS_impl_file_internal_record_t *impl;'). Declaring it non-const therefore violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen:\n```c\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketListen_Impl(&token);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper to record control flow and state for the listen path. */\nstatic void OS_SocketListen_Log(const char *stage, osal_id_t sock_id, OS_stream_internal_record_t *stream, OS_object_token_t *token, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2483.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"Stage: %s\\n\", stage);\n    fprintf(f, \"  sock_id=%d return_code=%d token_addr=%p stream_ptr=%p\\n\",\n            (int)sock_id, (int)return_code, (void *)token, (void *)stream);\n\n    if (stream != NULL)\n    {\n        /* Log the fields used by this function so callers can see that the stream\n         * object is only read (helpful evidence for the const-pointer discussion).\n         */\n        fprintf(f, \"  stream->socket_domain=%d socket_type=%d stream_state=0x%08X\\n\",\n                (int)stream->socket_domain,\n                (int)stream->socket_type,\n                (unsigned)stream->stream_state);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    OS_SocketListen_Log(\"entry\", sock_id, NULL, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_SocketListen_Log(\"after_ObjectIdGetById\", sock_id, NULL, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n        OS_SocketListen_Log(\"got_stream\", sock_id, stream, &token, return_code);\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_SocketListen_Log(\"not_stream_socket\", sock_id, stream, &token, return_code);\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketListen_Log(\"not_bound\", sock_id, stream, &token, return_code);\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketListen_Log(\"already_listening_or_connected\", sock_id, stream, &token, return_code);\n        }\n        else\n        {\n            OS_SocketListen_Log(\"before_ImplCall\", sock_id, stream, &token, return_code);\n            return_code = OS_SocketListen_Impl(&token);\n            OS_SocketListen_Log(\"after_ImplCall\", sock_id, stream, &token, return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n                OS_SocketListen_Log(\"set_listening_state\", sock_id, stream, &token, return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_SocketListen_Log(\"after_Release\", sock_id, stream, &token, return_code);\n    }\n\n    OS_SocketListen_Log(\"exit\", sock_id, NULL, NULL, return_code);\n    return return_code;\n}\n"
}