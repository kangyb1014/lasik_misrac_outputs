{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) can read up to sizeof(CurrentSegment)-1 bytes from SegmentName. If the object referenced by SegmentName is shorter than that and is not null-terminated within that length (e.g. SegmentName points to a 10-byte buffer without a terminating '\\0'), strncpy will read beyond the bounds of the source object, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2839.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\nPlease provide the modified UtAssert_EndTest code.\n",
  "test_code": "/* Probe helpers inserted to capture control flow and state for debugging.\n * Logs are appended to /tmp/logs/2839.txt\n */\nstatic void UtAssert_Log_PreEntry(void)\n{\n    FILE *f = fopen(\"/tmp/logs/2839.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"\\n=== UtAssert_EndTest PRE ===\\n\");\n\n    /* Log high-level counters that are used to make control-flow decisions */\n    fprintf(f, \"UT_SegmentCounters.TotalTestCases = %lu\\n\", (unsigned long)UT_SegmentCounters.TotalTestCases);\n    fprintf(f, \"UT_SegmentCounters.TestSegmentCount = %lu\\n\", (unsigned long)UT_SegmentCounters.TestSegmentCount);\n\n    /* Log information about the CurrentSegment buffer (address and compile-time size) */\n    fprintf(f, \"CurrentSegment @ %p, sizeof(CurrentSegment) = %zu\\n\", (void *)CurrentSegment, (size_t)sizeof(CurrentSegment));\n\n    /* Search for a NUL within the bounds of CurrentSegment without using strlen (safe) */\n    {\n        void *nul = memchr(CurrentSegment, '\\0', sizeof(CurrentSegment));\n        if (nul)\n        {\n            size_t idx = (const unsigned char *)nul - (const unsigned char *)CurrentSegment;\n            fprintf(f, \"NUL found inside CurrentSegment at index %zu\\n\", idx);\n        }\n        else\n        {\n            fprintf(f, \"NO NUL found within CurrentSegment buffer (up to sizeof(CurrentSegment)).\\n\");\n        }\n    }\n\n    /* Dump the first up to 64 bytes of CurrentSegment in hex to provide content/suspect data */\n    {\n        size_t dump = sizeof(CurrentSegment) < 64 ? sizeof(CurrentSegment) : 64;\n        fprintf(f, \"CurrentSegment (first %zu bytes in hex):\", dump);\n        for (size_t i = 0; i < dump; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned char)CurrentSegment[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic void UtAssert_Log_PostCopy(const char *LocalNameBuf, size_t LocalNameSize)\n{\n    FILE *f = fopen(\"/tmp/logs/2839.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"\\n=== UtAssert_EndTest POST-COPY ===\\n\");\n    fprintf(f, \"Local_SegmentName @ %p, size = %zu\\n\", (void *)LocalNameBuf, LocalNameSize);\n\n    /* Check for NUL inside the Local_SegmentName buffer (safe bounds) */\n    {\n        void *nul = memchr(LocalNameBuf, '\\0', LocalNameSize);\n        if (nul)\n        {\n            size_t idx = (const unsigned char *)nul - (const unsigned char *)LocalNameBuf;\n            fprintf(f, \"NUL found inside Local_SegmentName at index %zu\\n\", idx);\n        }\n        else\n        {\n            fprintf(f, \"NO NUL found within Local_SegmentName buffer (up to its size).\\n\");\n        }\n    }\n\n    /* Dump the first up to 64 bytes of Local_SegmentName in hex to observe copied content */\n    {\n        size_t dump = LocalNameSize < 64 ? LocalNameSize : 64;\n        fprintf(f, \"Local_SegmentName (first %zu bytes in hex):\", dump);\n        for (size_t i = 0; i < dump; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned char)LocalNameBuf[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    /* Log initial state relevant to decision and safety before any mutation/copy */\n    UtAssert_Log_PreEntry();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        /* Log the state after performing the copy so that any absence of NUL can be observed */\n        UtAssert_Log_PostCopy(Local_SegmentName, sizeof(Local_SegmentName));\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n"
}