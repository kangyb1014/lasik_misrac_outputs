{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function UtAssert_DoTestSegmentReport is declared to take non-const pointers (e.g. void UtAssert_DoTestSegmentReport(char *segmentName, UtAssert_TestCounter_t *counters)) but it only reads from the name and the counters, then Rule 8.13 is violated. Both Local_SegmentName and Local_SegmentCounters are used as input-only for reporting and therefore the corresponding parameters should be declared as const (const char * and const UtAssert_TestCounter_t *) so the pointers point to const-qualified types.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\nPlease provide the modified UtAssert_EndTest code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <stdarg.h>\n\n/*\n * Probe helpers: append diagnostic logs to /tmp/logs/2833.txt\n * These helpers are intentionally lightweight and do not change\n * the logic of UtAssert_EndTest; they only record state for\n * reproducing the Rule 8.13 violation scenario.\n */\nstatic void Probe_AppendLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2833.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void Probe_DumpBytes(const char *label, const void *ptr, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)ptr;\n    FILE *f = fopen(\"/tmp/logs/2833.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: size=%zu bytes:\\n\", label, len);\n    for (size_t i = 0; i < len; ++i)\n    {\n        fprintf(f, \"%02X\", p[i]);\n        if ((i & 0x0F) == 0x0F || i + 1 == len)\n        {\n            fprintf(f, \"\\n\");\n        }\n        else\n        {\n            fprintf(f, \" \");\n        }\n    }\n    fclose(f);\n}\n\n/*\n * Modified UtAssert_EndTest: original logic preserved, with probes inserted\n * to capture control flow and state for reproducing the violation scenario.\n */\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    /* Log entry */\n    Probe_AppendLog(\"UtAssert_EndTest: enter\");\n\n    UT_BSP_Lock();\n\n    /* capture pre-state */\n    Probe_AppendLog(\"Pre-lock state: UT_SegmentCounters.TotalTestCases=%u\", (unsigned)UT_SegmentCounters.TotalTestCases);\n    Probe_DumpBytes(\"Pre-lock UT_SegmentCounters\", &UT_SegmentCounters, sizeof(UT_SegmentCounters));\n    Probe_DumpBytes(\"Pre-lock UT_TotalCounters\", &UT_TotalCounters, sizeof(UT_TotalCounters));\n    Probe_AppendLog(\"CurrentSegment (pre): '%s'\", CurrentSegment);\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    Probe_AppendLog(\"Computed SegmentValid=%u\", (unsigned)SegmentValid);\n\n    if (SegmentValid)\n    {\n        /* Log values before modification */\n        Probe_AppendLog(\"Before update: UT_TotalCounters.TestSegmentCount=%u, UT_SegmentCounters.TestSegmentCount=%u, UT_SegmentCounters.TotalTestCases=%u\",\n                        (unsigned)UT_TotalCounters.TestSegmentCount,\n                        (unsigned)UT_SegmentCounters.TestSegmentCount,\n                        (unsigned)UT_SegmentCounters.TotalTestCases);\n\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        /* Log values after modification */\n        Probe_AppendLog(\"After update: UT_TotalCounters.TestSegmentCount=%u, UT_SegmentCounters.TestSegmentCount=%u, UT_TotalCounters.TotalTestCases=%u\",\n                        (unsigned)UT_TotalCounters.TestSegmentCount,\n                        (unsigned)UT_SegmentCounters.TestSegmentCount,\n                        (unsigned)UT_TotalCounters.TotalTestCases);\n\n        Probe_AppendLog(\"Local_SegmentName='%s'\", Local_SegmentName);\n        Probe_DumpBytes(\"Local_SegmentCounters\", &Local_SegmentCounters, sizeof(Local_SegmentCounters));\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    Probe_DumpBytes(\"Post-memset UT_SegmentCounters\", &UT_SegmentCounters, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    Probe_AppendLog(\"After unlock: SegmentValid=%u\", (unsigned)SegmentValid);\n\n    if (SegmentValid)\n    {\n        /*\n         * Log exactly what is being passed to UtAssert_DoTestSegmentReport to capture\n         * evidence that the function is invoked with non-const pointers that are\n         * only read by the callee (the suspected Rule 8.13 violation).\n         */\n        Probe_AppendLog(\"Calling UtAssert_DoTestSegmentReport with Local_SegmentName='%s' and address Local_SegmentCounters=%p\",\n                        Local_SegmentName, (void *)&Local_SegmentCounters);\n        Probe_DumpBytes(\"Payload passed to UtAssert_DoTestSegmentReport (Local_SegmentCounters)\", &Local_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n\n        Probe_AppendLog(\"Returned from UtAssert_DoTestSegmentReport\");\n    }\n    else\n    {\n        Probe_AppendLog(\"No test cases: invoking UT_BSP_DoText\");\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n\n    Probe_AppendLog(\"UtAssert_EndTest: exit\");\n}\n"
}