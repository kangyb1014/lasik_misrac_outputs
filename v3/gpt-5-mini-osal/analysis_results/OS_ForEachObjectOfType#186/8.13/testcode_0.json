{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer iter->arg (declared as void *) is passed to func(...) in the fragment. iter->arg is assigned from the match argument (&filter) and is only read by the match callback (OS_ForEachFilterCreator) and the do-callback (OS_ForEachDoCallback). Therefore iter->arg and the callback parameter could be declared as pointing to a const-qualified type (e.g. const void * and int32 (*func)(osal_id_t, const void *)). Because the current declarations use non-const pointers, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends timestamped messages to /tmp/logs/1863.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timebuf[64];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s - \", timebuf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* The original function with logging probes inserted. */\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    /* Populate the filter exactly as before */\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log entry state: values and addresses relevant to the violation scenario. */\n    probe_log(\"ENTER OS_ForEachObjectOfType: idtype=%u, creator_id=%llu, callback_ptr=%p, callback_arg=%p, &filter=%p\",\n              (unsigned)idtype, (unsigned long long)creator_id, (void *)callback_ptr, (void *)callback_arg, (void *)&filter);\n\n    int init_res = OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter);\n    probe_log(\"OS_ObjectIdIteratorInit returned %d (iter_addr=%p)\", init_res, (void *)&iter);\n\n    if (init_res == OS_SUCCESS)\n    {\n        unsigned iteration_count = 0u;\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Log each iteration and the relationship between iterator and filter addresses.\n               This helps reproduce evidence that the 'match' argument (&filter) is passed through\n               the iterator and later used by the do-callback. */\n            iteration_count++;\n            probe_log(\"ITERATION %u: About to process entry (iter_addr=%p, filter_addr=%p, user_callback=%p, user_arg=%p)\",\n                      iteration_count, (void *)&iter, (void *)&filter, (void *)filter.user_callback, (void *)filter.user_arg);\n\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            probe_log(\"ITERATION %u: ProcessEntry completed (iter_addr=%p)\", iteration_count, (void *)&iter);\n        }\n\n        probe_log(\"Completed iterations: %u for creator_id=%llu (filter_addr=%p)\", iteration_count, (unsigned long long)creator_id, (void *)&filter);\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        probe_log(\"OS_ObjectIdIteratorDestroy called (iter_addr=%p)\", (void *)&iter);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdIteratorInit failed with %d; skipping iteration (filter_addr=%p)\", init_res, (void *)&filter);\n    }\n\n    probe_log(\"EXIT OS_ForEachObjectOfType: idtype=%u, creator_id=%llu\", (unsigned)idtype, (unsigned long long)creator_id);\n}\n"
}