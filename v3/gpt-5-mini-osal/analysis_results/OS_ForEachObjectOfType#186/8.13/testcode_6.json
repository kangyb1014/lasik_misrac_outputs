{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator stores a read-only context pointer in OS_object_iter_t::arg (declared as void *), and OS_ObjectIdIteratorInit assigns the incoming matcharg (void *) to it. The iterator only passes this pointer to match and callback functions (e.g. iter->match(iter->arg, ...) and OS_ObjectIdIteratorProcessEntry(..., iter->arg)) and those functions (OS_ForEachFilterCreator and OS_ForEachDoCallback) treat the referenced data as read-only. Therefore the pointer should be const-qualified (e.g. const void *matcharg and const void *arg, and corresponding function prototypes updated to accept const void *) to conform to MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers that log control flow/state to /tmp/logs/1863.txt */\nstatic void probe_log_open(FILE **out)\n{\n    if (out == NULL)\n    {\n        return;\n    }\n\n    *out = fopen(\"/tmp/logs/1863.txt\", \"a\");\n}\n\nstatic void probe_log_close(FILE *fp)\n{\n    if (fp != NULL)\n    {\n        fflush(fp);\n        fclose(fp);\n    }\n}\n\nstatic void probe_log_event(const char *msg, void *p1, void *p2, unsigned long v1, unsigned long v2)\n{\n    FILE *fp = NULL;\n    probe_log_open(&fp);\n    if (fp != NULL)\n    {\n        /* Log a generic event line with pointers and integer values. */\n        fprintf(fp, \"%s p1=%p p2=%p v1=%lu v2=%lu\\n\", msg, p1, p2, v1, v2);\n        probe_log_close(fp);\n    }\n}\n\n/* Modified OS_ForEachObjectOfType with probes inserted.\n   Original logic and calls are preserved; probes only add logging. */\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log entry parameters and the user-supplied callback_arg pointer value.\n       This helps to correlate the read-only argument passed through the iterator. */\n    probe_log_event(\"OS_ForEachObjectOfType - entry\", (void *)callback_ptr, callback_arg,\n                    (unsigned long)idtype, (unsigned long)creator_id);\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        /* Log that iterator init succeeded and the address of the filter structure. */\n        probe_log_event(\"OS_ObjectIdIteratorInit - success (filter addr)\", &filter, NULL, 0UL, 0UL);\n\n        unsigned int iteration_count = 0U;\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            iteration_count++;\n\n            /* Log each iteration. We cannot assume the internals of OS_object_iter_t, so\n               log the address of the iter variable and the original filter user_arg\n               that should be passed through the iterator to match/callback functions. */\n            probe_log_event(\"OS_ForEachObjectOfType - iter next\", (void *)&iter, filter.user_arg,\n                            (unsigned long)iteration_count, 0UL);\n\n            /* Preserve original behavior: call ProcessEntry as before. */\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            /* Log after processing the entry to capture control flow progress. */\n            probe_log_event(\"OS_ForEachObjectOfType - after process entry\", (void *)&iter, filter.user_arg,\n                            (unsigned long)iteration_count, 0UL);\n        }\n\n        /* Log iterator completion and how many entries were processed. */\n        probe_log_event(\"OS_ForEachObjectOfType - iterator complete\", NULL, NULL,\n                        (unsigned long)iteration_count, 0UL);\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        /* Log that the iterator was destroyed. */\n        probe_log_event(\"OS_ObjectIdIteratorDestroy - done\", NULL, NULL, 0UL, 0UL);\n    }\n    else\n    {\n        /* Log failure to initialize iterator so callers can see that init path was not taken. */\n        probe_log_event(\"OS_ObjectIdIteratorInit - failure\", NULL, NULL, (unsigned long)idtype, (unsigned long)creator_id);\n    }\n}\n"
}