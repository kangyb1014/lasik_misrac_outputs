{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1866.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    /* Fallback for environments without localtime_r */\n    struct tm *tmptr = localtime(&t);\n    if (tmptr != NULL)\n    {\n        tm_buf = *tmptr;\n    }\n    else\n    {\n        tm_buf.tm_year = 0;\n        tm_buf.tm_mon = 0;\n        tm_buf.tm_mday = 0;\n        tm_buf.tm_hour = 0;\n        tm_buf.tm_min = 0;\n        tm_buf.tm_sec = 0;\n    }\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    /* Log entry into function and parameters */\n    probe_log(\"ENTER OS_ForEachObjectOfType: idtype=%lu, creator_id=%lu, callback_ptr=%p, callback_arg=%p\",\n              (unsigned long)(uintptr_t)idtype,\n              (unsigned long)(uintptr_t)creator_id,\n              (void *)(uintptr_t)callback_ptr,\n              callback_arg);\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    probe_log(\"Filter prepared: creator_id=%lu, user_callback=%p, user_arg=%p\",\n              (unsigned long)(uintptr_t)filter.creator_id,\n              (void *)(uintptr_t)filter.user_callback,\n              filter.user_arg);\n\n    int init_status = OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter);\n    probe_log(\"OS_ObjectIdIteratorInit returned %d for idtype=%lu (iter@%p)\",\n              init_status,\n              (unsigned long)(uintptr_t)idtype,\n              (void *)&iter);\n\n    if (init_status == OS_SUCCESS)\n    {\n        int iter_count = 0;\n        int has_next = OS_ObjectIdIteratorGetNext(&iter);\n        probe_log(\"First OS_ObjectIdIteratorGetNext returned %d (iter@%p)\", has_next, (void *)&iter);\n\n        while (has_next)\n        {\n            iter_count++;\n            probe_log(\"Iteration %d: about to call OS_ObjectIdIteratorProcessEntry (iter@%p). Filter.user_callback=%p, filter.user_arg=%p\",\n                      iter_count,\n                      (void *)&iter,\n                      (void *)(uintptr_t)filter.user_callback,\n                      filter.user_arg);\n\n            /* Call the original processing function */\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            probe_log(\"Iteration %d: returned from OS_ObjectIdIteratorProcessEntry (iter@%p)\", iter_count, (void *)&iter);\n\n            /* Get next and log the result to capture control flow */\n            has_next = OS_ObjectIdIteratorGetNext(&iter);\n            probe_log(\"OS_ObjectIdIteratorGetNext returned %d (iter@%p) after iteration %d\", has_next, (void *)&iter, iter_count);\n        }\n\n        probe_log(\"Loop complete: total iterations=%d. Now destroying iterator (iter@%p)\", iter_count, (void *)&iter);\n        OS_ObjectIdIteratorDestroy(&iter);\n        probe_log(\"Iterator destroyed (iter@%p)\", (void *)&iter);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdIteratorInit failed with status=%d - skipping iteration\", init_status);\n    }\n\n    probe_log(\"EXIT OS_ForEachObjectOfType: idtype=%lu, creator_id=%lu\",\n              (unsigned long)(uintptr_t)idtype,\n              (unsigned long)(uintptr_t)creator_id);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpfewjhwnh/src/src/os/shared/src/osapi-idmap.c: In function 'probe_log':\n/tmp/tmpfewjhwnh/src/src/os/shared/src/osapi-idmap.c:1379:15: error: storage size of 'tm_buf' isn't known\n 1379 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpfewjhwnh/src/src/os/shared/src/osapi-idmap.c:1387:18: error: invalid use of undefined type 'struct tm'\n 1387 |         tm_buf = *tmptr;\n      |                  ^\n/tmp/tmpfewjhwnh/src/src/os/shared/src/osapi-idmap.c:1406:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n 1406 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/__/__/os/shared/src/osapi-idmap.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3787: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1866.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    /* Fallback for environments without localtime_r */\n    struct tm *tmptr = localtime(&t);\n    if (tmptr != NULL)\n    {\n        tm_buf = *tmptr;\n    }\n    else\n    {\n        tm_buf.tm_year = 0;\n        tm_buf.tm_mon = 0;\n        tm_buf.tm_mday = 0;\n        tm_buf.tm_hour = 0;\n        tm_buf.tm_min = 0;\n        tm_buf.tm_sec = 0;\n    }\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    /* Log entry into function and parameters */\n    probe_log(\"ENTER OS_ForEachObjectOfType: idtype=%lu, creator_id=%lu, callback_ptr=%p, callback_arg=%p\",\n              (unsigned long)(uintptr_t)idtype,\n              (unsigned long)(uintptr_t)creator_id,\n              (void *)(uintptr_t)callback_ptr,\n              callback_arg);\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    probe_log(\"Filter prepared: creator_id=%lu, user_callback=%p, user_arg=%p\",\n              (unsigned long)(uintptr_t)filter.creator_id,\n              (void *)(uintptr_t)filter.user_callback,\n              filter.user_arg);\n\n    int init_status = OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter);\n    probe_log(\"OS_ObjectIdIteratorInit returned %d for idtype=%lu (iter@%p)\",\n              init_status,\n              (unsigned long)(uintptr_t)idtype,\n              (void *)&iter);\n\n    if (init_status == OS_SUCCESS)\n    {\n        int iter_count = 0;\n        int has_next = OS_ObjectIdIteratorGetNext(&iter);\n        probe_log(\"First OS_ObjectIdIteratorGetNext returned %d (iter@%p)\", has_next, (void *)&iter);\n\n        while (has_next)\n        {\n            iter_count++;\n            probe_log(\"Iteration %d: about to call OS_ObjectIdIteratorProcessEntry (iter@%p). Filter.user_callback=%p, filter.user_arg=%p\",\n                      iter_count,\n                      (void *)&iter,\n                      (void *)(uintptr_t)filter.user_callback,\n                      filter.user_arg);\n\n            /* Call the original processing function */\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            probe_log(\"Iteration %d: returned from OS_ObjectIdIteratorProcessEntry (iter@%p)\", iter_count, (void *)&iter);\n\n            /* Get next and log the result to capture control flow */\n            has_next = OS_ObjectIdIteratorGetNext(&iter);\n            probe_log(\"OS_ObjectIdIteratorGetNext returned %d (iter@%p) after iteration %d\", has_next, (void *)&iter, iter_count);\n        }\n\n        probe_log(\"Loop complete: total iterations=%d. Now destroying iterator (iter@%p)\", iter_count, (void *)&iter);\n        OS_ObjectIdIteratorDestroy(&iter);\n        probe_log(\"Iterator destroyed (iter@%p)\", (void *)&iter);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdIteratorInit failed with status=%d - skipping iteration\", init_status);\n    }\n\n    probe_log(\"EXIT OS_ForEachObjectOfType: idtype=%lu, creator_id=%lu\",\n              (unsigned long)(uintptr_t)idtype,\n              (unsigned long)(uintptr_t)creator_id);\n}\n",
  "explanation": "I added the standard headers <stdio.h>, <stdarg.h>, <time.h>, and <stdint.h> at the top of the file. Including <time.h> ensures struct tm is fully defined so tm_buf can be instantiated and assigned. Including <stdarg.h> (and <stdio.h>) ensures the va_list type and the vfprintf prototype match, resolving the type mismatch error for the variadic handling. No logic in OS_ForEachObjectOfType was changed; only the necessary standard headers were included to fix the compilation errors."
}