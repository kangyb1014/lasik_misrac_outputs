{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion occurs if OS_DEBUG is implemented in terms of OS_printf. In the path when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER, OS_printf calls OS_DEBUG(\"...\", String). If OS_DEBUG expands to or invokes OS_printf, this yields OS_printf -> OS_DEBUG -> OS_printf (indirect recursion), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2436.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBind:\n```c\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n#include <pthread.h>\n\n/* Probe logging helpers: append control-flow/state information to the log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2436.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) == NULL)\n    {\n        fclose(fp);\n        return;\n    }\n\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    pid_t pid = getpid();\n    unsigned long tid = (unsigned long)pthread_self();\n\n    fprintf(fp, \"%s pid=%d tid=%lu: \", timebuf, (int)pid, tid);\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/*\n * Modified OS_SocketBind with lightweight probes inserted. The original logic is\n * preserved; probes only log entry/exit and important state/return codes to\n * /tmp/logs/2436.txt so other agents can reproduce and observe the control path.\n */\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    probe_log(\"ENTER OS_SocketBind: sock_id=%d Addr=%p\", (int)sock_id, (const void *)Addr);\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    probe_log(\"After OS_SocketBindAddress: return_code=%d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"OS_SocketBindAddress succeeded; calling OS_SocketListen for sock_id=%d\", (int)sock_id);\n        return_code = OS_SocketListen(sock_id);\n        probe_log(\"After OS_SocketListen: return_code=%d\", (int)return_code);\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            probe_log(\"OS_SocketListen returned OS_ERR_INCORRECT_OBJ_TYPE for sock_id=%d; treating as OS_SUCCESS\", (int)sock_id);\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    probe_log(\"EXIT OS_SocketBind: sock_id=%d final_return=%d\", (int)sock_id, (int)return_code);\n    return return_code;\n}\n"
}