{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name)) and then calls snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"...\", ...). If OS_strnlen returns sizeof(sock->stream_name) (which can happen if the buffer contains no NUL within the given limit or was filled completely by OS_SocketAddrToString_Impl), then len == sizeof(..) and &sock->stream_name[len] points one-past-the-end of the array. Passing that pointer to snprintf (and similarly for the parent_name append) can result in accesses beyond the bounds of the object; likewise if the remaining space is insufficient for the appended text there is a risk of overflow if the initial length calculation is incorrect. This scenario violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2439.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBind:\n```c\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper: append human-readable log entries to /tmp/logs/2439.txt.\n * Uses only safe stdio/varargs functions and does not change program logic.\n * This helper is deliberately local (static) so it won't clash with other symbols.\n */\nstatic void os_socket_probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2439.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If the log file cannot be opened, do not change behavior of the caller. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    /* Log entry and the pointer to the address structure so callers can\n     * reproduce scenarios where the address contents or pointer are unusual.\n     */\n    os_socket_probe_log(\"ENTER OS_SocketBind: sock_id=%lu Addr=%p\", (unsigned long)sock_id, (const void *)Addr);\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    os_socket_probe_log(\"OS_SocketBindAddress returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_socket_probe_log(\"OS_SocketBind: calling OS_SocketListen for sock_id=%lu\", (unsigned long)sock_id);\n        return_code = OS_SocketListen(sock_id);\n        os_socket_probe_log(\"OS_SocketListen returned %ld\", (long)return_code);\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            os_socket_probe_log(\"OS_SocketBind: OS_ERR_INCORRECT_OBJ_TYPE -> mapping to OS_SUCCESS for sock_id=%lu\", (unsigned long)sock_id);\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    os_socket_probe_log(\"EXIT OS_SocketBind: sock_id=%lu return_code=%ld\", (unsigned long)sock_id, (long)return_code);\n    return return_code;\n}\n"
}