{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) is made without validating that 'token' is a valid, non-NULL pointer to an object at least sizeof(OS_object_token_t) bytes long. If a caller passes token == NULL (or a pointer to a smaller object), the memset will write out of bounds (e.g. a caller mistakenly calls OS_ObjectIdTransactionInit(..., NULL)), causing an access beyond the referenced object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1229.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTake:\n```c\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends entries to /tmp/logs/1229.txt. If the file\n * cannot be opened the probe silently does nothing to avoid changing program\n * behavior. */\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1229.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry: function called and local token address/size */\n    OS_LogProbe(\"OS_BinSemTake: called sem_id=%d, &token=%p, token_size=%zu\",\n                (int)sem_id, (void *)&token, sizeof(token));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    OS_LogProbe(\"OS_ObjectIdGetById returned %d for sem_id=%d\", return_code, (int)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling implementation with pointer value */\n        OS_LogProbe(\"About to call OS_BinSemTake_Impl with token_ptr=%p, token_size=%zu\",\n                    (void *)&token, sizeof(token));\n\n        return_code = OS_BinSemTake_Impl(&token);\n\n        OS_LogProbe(\"OS_BinSemTake_Impl returned %d\", return_code);\n    }\n    else\n    {\n        OS_LogProbe(\"OS_BinSemTake: skipping Impl call due to return_code=%d\", return_code);\n    }\n\n    OS_LogProbe(\"OS_BinSemTake: exiting with return_code=%d\", return_code);\n    return return_code;\n}\n"
}