{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_BinSemTake_Impl is declared to take a non-const pointer (e.g. int32 OS_BinSemTake_Impl(OS_object_token_t *token)) but does not modify the object referred to, then the pointer parameter should be to a const-qualified type. In that case passing &token here represents a violation of MISRA C 2023 Rule 8.13 because the function parameter could and should be declared as const OS_object_token_t * to convey immutability.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTake:\n```c\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <time.h>\n\n/* Probe helper: write control-flow and state information to /tmp/logs/1223.txt */\nstatic void OS_BinSemTake_LogProbe(const char *stage, unsigned long sem_id_val, const void *token_ptr, size_t token_size, int return_code, int impl_called)\n{\n    FILE *f = NULL;\n    struct timespec ts;\n\n    /* Ensure directory exists (best-effort). Ignore errors other than checking existence. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the primary path cannot be opened, attempt a fallback in /tmp for visibility. */\n        f = fopen(\"/tmp/1223.txt\", \"a\");\n    }\n\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, return silently to avoid changing program behavior. */\n        return;\n    }\n\n    /* timestamp */\n    if (timespec_get(&ts, TIME_UTC) == 0)\n    {\n        ts.tv_sec = 0;\n        ts.tv_nsec = 0;\n    }\n\n    fprintf(f, \"[%ld.%09ld] stage=%s sem_id=%lu token_ptr=%p token_size=%zu return_code=%d impl_called=%d\\n\",\n            (long)ts.tv_sec, (long)ts.tv_nsec, stage, sem_id_val, token_ptr, token_size, return_code, impl_called);\n\n    fclose(f);\n}\n\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with sem_id; token not yet populated */\n    OS_BinSemTake_LogProbe(\"enter\", (unsigned long)sem_id, NULL, 0u, 0, 0);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and the token address/size to show what is passed later */\n    OS_BinSemTake_LogProbe(\"after_getbyid\", (unsigned long)sem_id, (const void *)&token, sizeof(token), (int)return_code, 0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation to capture the exact pointer passed */\n        OS_BinSemTake_LogProbe(\"before_impl\", (unsigned long)sem_id, (const void *)&token, sizeof(token), (int)return_code, 1);\n\n        return_code = OS_BinSemTake_Impl(&token);\n\n        /* Log after the implementation returns to capture final return code */\n        OS_BinSemTake_LogProbe(\"after_impl\", (unsigned long)sem_id, (const void *)&token, sizeof(token), (int)return_code, 1);\n    }\n\n    /* Final return; also log exit */\n    OS_BinSemTake_LogProbe(\"exit\", (unsigned long)sem_id, (const void *)&token, sizeof(token), (int)return_code, 0);\n\n    return return_code;\n}\n"
}