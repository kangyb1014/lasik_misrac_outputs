{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char tbuf[64];\n        if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s \", tbuf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic size_t safe_nlen(const char *s, size_t max)\n{\n    size_t i;\n    for (i = 0; i < max; ++i)\n    {\n        if (s[i] == '\\0')\n            return i;\n    }\n    return max;\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and the important parameters. Do not dereference var_name here to\n     * avoid reading caller memory that may be shorter than expected. We log the\n     * pointer value so downstream investigators can correlate addresses.\n     */\n    log_probe(\"ENTER OS_CondVarCreate: var_id=%p var_name=%p options=%u\",\n              (void *)var_id, (void *)var_name, (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    log_probe(\"OS_ObjectIdAllocateNew returned %ld (token=%p)\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n        log_probe(\"OS_OBJECT_TABLE_GET -> condvar=%p\", (void *)condvar);\n\n        /* Reset the table entry and save the name */\n        log_probe(\"About to OS_OBJECT_INIT(token=%p, condvar=%p, obj_name, var_name=%p)\",\n                  (void *)&token, (void *)condvar, (void *)var_name);\n\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* After the INIT we can safely inspect the destination buffer (condvar->obj_name)\n         * because it resides in the OS-managed table memory. This allows us to detect the\n         * condition where the destination buffer does not contain a terminating NUL\n         * (indicative that the source may not have had a NUL within the copied range).\n         */\n        {\n            size_t name_size = sizeof(condvar->obj_name);\n            size_t name_len = 0;\n            size_t i, dump_len;\n\n            /* compute length up to name_size (safe, does not read beyond the array) */\n            name_len = safe_nlen(condvar->obj_name, name_size);\n\n            log_probe(\"After OS_OBJECT_INIT: condvar=%p obj_name_size=%zu obj_name_len=%zu\",\n                      (void *)condvar, name_size, name_len);\n\n            /* Hex-dump up to a reasonable amount to aid in reproduction/evidence */\n            dump_len = (name_size < 64) ? name_size : 64;\n            {\n                char hexbuf[3 * 64 + 1];\n                char *hp = hexbuf;\n                for (i = 0; i < dump_len; ++i)\n                {\n                    unsigned char c = (unsigned char)condvar->obj_name[i];\n                    int n = snprintf(hp, (size_t)(sizeof(hexbuf) - (hp - hexbuf)), \"%02X \", c);\n                    if (n <= 0) break;\n                    hp += n;\n                }\n                *hp = '\\0';\n                log_probe(\"obj_name[0..%zu] (hex): %s\", dump_len, hexbuf);\n            }\n\n            /* If the buffer was filled without an internal NUL, this is strong evidence that\n             * the source (var_name) did not contain a terminating NUL within the copied range\n             * and that a strncpy-style copy likely read up to the provided length. Report this\n             * explicitly for downstream analysis.\n             */\n            if (name_len == name_size)\n            {\n                log_probe(\"POSSIBLE_VIOLATION: obj_name has no NUL within its buffer (size=%zu).\"\n                          \" This suggests the source may have lacked a NUL within the copy length.\",\n                          name_size);\n            }\n            else\n            {\n                log_probe(\"obj_name is NUL-terminated at index %zu\", name_len);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        log_probe(\"OS_CondVarCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        log_probe(\"OS_ObjectIdFinalizeNew returned %ld final var_id=%p\", (long)return_code, (void *)var_id);\n    }\n\n    log_probe(\"EXIT OS_CondVarCreate: return %ld\", (long)return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpg5oqbjea/src/src/os/shared/src/osapi-condvar.c: In function 'log_probe':\n/tmp/tmpg5oqbjea/src/src/os/shared/src/osapi-condvar.c:99:15: error: storage size of 'tm_buf' isn't known\n   99 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpg5oqbjea/src/src/os/shared/src/osapi-condvar.c:111:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  111 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/__/__/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3353: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdarg.h>\n#include <stddef.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char tbuf[64];\n        if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s \", tbuf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the platform's va_list to avoid ABI/type mismatches between\n     * project-specific va_list typedefs and the libc declaration of vfprintf. */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic size_t safe_nlen(const char *s, size_t max)\n{\n    size_t i;\n    for (i = 0; i < max; ++i)\n    {\n        if (s[i] == '\\0')\n            return i;\n    }\n    return max;\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and the important parameters. Do not dereference var_name here to\n     * avoid reading caller memory that may be shorter than expected. We log the\n     * pointer value so downstream investigators can correlate addresses.\n     */\n    log_probe(\"ENTER OS_CondVarCreate: var_id=%p var_name=%p options=%u\",\n              (void *)var_id, (void *)var_name, (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    log_probe(\"OS_ObjectIdAllocateNew returned %ld (token=%p)\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n        log_probe(\"OS_OBJECT_TABLE_GET -> condvar=%p\", (void *)condvar);\n\n        /* Reset the table entry and save the name */\n        log_probe(\"About to OS_OBJECT_INIT(token=%p, condvar=%p, obj_name, var_name=%p)\",\n                  (void *)&token, (void *)condvar, (void *)var_name);\n\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* After the INIT we can safely inspect the destination buffer (condvar->obj_name)\n         * because it resides in the OS-managed table memory. This allows us to detect the\n         * condition where the destination buffer does not contain a terminating NUL\n         * (indicative that the source may not have had a NUL within the copied range).\n         */\n        {\n            size_t name_size = sizeof(condvar->obj_name);\n            size_t name_len = 0;\n            size_t i, dump_len;\n\n            /* compute length up to name_size (safe, does not read beyond the array) */\n            name_len = safe_nlen(condvar->obj_name, name_size);\n\n            log_probe(\"After OS_OBJECT_INIT: condvar=%p obj_name_size=%zu obj_name_len=%zu\",\n                      (void *)condvar, name_size, name_len);\n\n            /* Hex-dump up to a reasonable amount to aid in reproduction/evidence */\n            dump_len = (name_size < 64) ? name_size : 64;\n            {\n                char hexbuf[3 * 64 + 1];\n                char *hp = hexbuf;\n                for (i = 0; i < dump_len; ++i)\n                {\n                    unsigned char c = (unsigned char)condvar->obj_name[i];\n                    int n = snprintf(hp, (size_t)(sizeof(hexbuf) - (hp - hexbuf)), \"%02X \", c);\n                    if (n <= 0) break;\n                    hp += n;\n                }\n                *hp = '\\0';\n                log_probe(\"obj_name[0..%zu] (hex): %s\", dump_len, hexbuf);\n            }\n\n            /* If the buffer was filled without an internal NUL, this is strong evidence that\n             * the source (var_name) did not contain a terminating NUL within the copied range\n             * and that a strncpy-style copy likely read up to the provided length. Report this\n             * explicitly for downstream analysis.\n             */\n            if (name_len == name_size)\n            {\n                log_probe(\"POSSIBLE_VIOLATION: obj_name has no NUL within its buffer (size=%zu).\"\n                          \" This suggests the source may have lacked a NUL within the copy length.\",\n                          name_size);\n            }\n            else\n            {\n                log_probe(\"obj_name is NUL-terminated at index %zu\", name_len);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        log_probe(\"OS_CondVarCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        log_probe(\"OS_ObjectIdFinalizeNew returned %ld final var_id=%p\", (long)return_code, (void *)var_id);\n    }\n\n    log_probe(\"EXIT OS_CondVarCreate: return %ld\", (long)return_code);\n    return return_code;\n}\n",
  "explanation": "I added the necessary includes (<stdio.h>, <time.h>, <stdarg.h>, <stddef.h>) so struct tm and va_list are defined. To address the va_list/ABI mismatch reported by the compiler, I cast the va_list when passing it to vfprintf: vfprintf(f, fmt, (va_list)ap);. This preserves the original logic while resolving the type/storage-size compilation errors."
}