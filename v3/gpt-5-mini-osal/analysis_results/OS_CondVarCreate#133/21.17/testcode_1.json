{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses strncpy(ref->namefield, nameval, sizeof(ref->namefield)-1). If nameval does not contain a NUL within the first sizeof(ref->namefield)-1 bytes (for example nameval points to a shorter/non\u2011terminated buffer, e.g. a caller-supplied char buf[8] that is not NUL-terminated while sizeof(ref->namefield) is 32), strncpy will read up to that many bytes from the source and can access memory beyond the bounds of the object referenced by nameval. Thus the use of strncpy here can result in out-of-bounds accesses unless the caller/preceding checks guarantee the source length/termination.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1339.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Probe / logging helpers -------------------------------------------------- */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char tbuf[64];\n        if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s \", tbuf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Safe bounded scan for a NUL in a buffer that is known to be of 'max' length.\n * This does not read beyond 'max' bytes and so is safe for reading array members.\n */\nstatic size_t safe_nlen(const char *s, size_t max)\n{\n    size_t i;\n    for (i = 0; i < max; ++i)\n    {\n        if (s[i] == '\\0')\n            return i;\n    }\n    return max;\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and the important parameters. Do not dereference var_name here to\n     * avoid reading caller memory that may be shorter than expected. We log the\n     * pointer value so downstream investigators can correlate addresses.\n     */\n    log_probe(\"ENTER OS_CondVarCreate: var_id=%p var_name=%p options=%u\",\n              (void *)var_id, (void *)var_name, (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    log_probe(\"OS_ObjectIdAllocateNew returned %ld (token=%p)\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n        log_probe(\"OS_OBJECT_TABLE_GET -> condvar=%p\", (void *)condvar);\n\n        /* Reset the table entry and save the name */\n        log_probe(\"About to OS_OBJECT_INIT(token=%p, condvar=%p, obj_name, var_name=%p)\",\n                  (void *)&token, (void *)condvar, (void *)var_name);\n\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* After the INIT we can safely inspect the destination buffer (condvar->obj_name)\n         * because it resides in the OS-managed table memory. This allows us to detect the\n         * condition where the destination buffer does not contain a terminating NUL\n         * (indicative that the source may not have had a NUL within the copied range).\n         */\n        {\n            size_t name_size = sizeof(condvar->obj_name);\n            size_t name_len = 0;\n            size_t i, dump_len;\n\n            /* compute length up to name_size (safe, does not read beyond the array) */\n            name_len = safe_nlen(condvar->obj_name, name_size);\n\n            log_probe(\"After OS_OBJECT_INIT: condvar=%p obj_name_size=%zu obj_name_len=%zu\",\n                      (void *)condvar, name_size, name_len);\n\n            /* Hex-dump up to a reasonable amount to aid in reproduction/evidence */\n            dump_len = (name_size < 64) ? name_size : 64;\n            {\n                char hexbuf[3 * 64 + 1];\n                char *hp = hexbuf;\n                for (i = 0; i < dump_len; ++i)\n                {\n                    unsigned char c = (unsigned char)condvar->obj_name[i];\n                    int n = snprintf(hp, (size_t)(sizeof(hexbuf) - (hp - hexbuf)), \"%02X \", c);\n                    if (n <= 0) break;\n                    hp += n;\n                }\n                *hp = '\\0';\n                log_probe(\"obj_name[0..%zu] (hex): %s\", dump_len, hexbuf);\n            }\n\n            /* If the buffer was filled without an internal NUL, this is strong evidence that\n             * the source (var_name) did not contain a terminating NUL within the copied range\n             * and that a strncpy-style copy likely read up to the provided length. Report this\n             * explicitly for downstream analysis.\n             */\n            if (name_len == name_size)\n            {\n                log_probe(\"POSSIBLE_VIOLATION: obj_name has no NUL within its buffer (size=%zu).\"\n                          \" This suggests the source may have lacked a NUL within the copy length.\",\n                          name_size);\n            }\n            else\n            {\n                log_probe(\"obj_name is NUL-terminated at index %zu\", name_len);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        log_probe(\"OS_CondVarCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        log_probe(\"OS_ObjectIdFinalizeNew returned %ld final var_id=%p\", (long)return_code, (void *)var_id);\n    }\n\n    log_probe(\"EXIT OS_CondVarCreate: return %ld\", (long)return_code);\n    return return_code;\n}\n"
}