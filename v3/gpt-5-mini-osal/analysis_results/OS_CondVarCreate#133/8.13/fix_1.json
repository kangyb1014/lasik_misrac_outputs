{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1333.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n        fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n                tm->tm_year + 1900,\n                tm->tm_mon + 1,\n                tm->tm_mday,\n                tm->tm_hour,\n                tm->tm_min,\n                tm->tm_sec);\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and parameters */\n    log_probe(\"Entering OS_CondVarCreate: var_id=%p, var_name=%p, var_name_str='%s', options=0x%08x\",\n              (void *)var_id, (const void *)var_name, (var_name != NULL) ? var_name : \"(null)\", (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    log_probe(\"Parameters passed checks: var_id=%p, var_name=%p\", (void *)var_id, (const void *)var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    log_probe(\"After OS_ObjectIdAllocateNew: return_code=%d, token_address=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n        log_probe(\"Allocated token maps to condvar pointer=%p\", (void *)condvar);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n        log_probe(\"OS_OBJECT_INIT called for token; name saved='%s'\", (var_name != NULL) ? var_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        log_probe(\"After OS_CondVarCreate_Impl: return_code=%d\", return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        log_probe(\"After OS_ObjectIdFinalizeNew: final_return_code=%d, var_id=%p (%p)\", return_code, (void *)var_id, (void *)(var_id ? (void *)*var_id : NULL));\n    }\n    else\n    {\n        log_probe(\"OS_ObjectIdAllocateNew failed: return_code=%d\", return_code);\n    }\n\n    log_probe(\"Exiting OS_CondVarCreate with return_code=%d\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c:1:\n/tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c: In function 'log_probe':\n/tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c:100:19: error: invalid use of undefined type 'struct tm'\n  100 |                 tm->tm_year + 1900,\n      |                   ^~\n/tmp/tmpp7w7ereq/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c:101:19: error: invalid use of undefined type 'struct tm'\n  101 |                 tm->tm_mon + 1,\n      |                   ^~\n/tmp/tmpp7w7ereq/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c:102:19: error: invalid use of undefined type 'struct tm'\n  102 |                 tm->tm_mday,\n      |                   ^~\n/tmp/tmpp7w7ereq/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c:103:19: error: invalid use of undefined type 'struct tm'\n  103 |                 tm->tm_hour,\n      |                   ^~\n/tmp/tmpp7w7ereq/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c:104:19: error: invalid use of undefined type 'struct tm'\n  104 |                 tm->tm_min,\n      |                   ^~\n/tmp/tmpp7w7ereq/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c:105:19: error: invalid use of undefined type 'struct tm'\n  105 |                 tm->tm_sec);\n      |                   ^~\n/tmp/tmpp7w7ereq/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpp7w7ereq/src/src/os/shared/src/osapi-condvar.c:110:23: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  110 |     vfprintf(fp, fmt, args);\n      |                       ^~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/__/__/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3353: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1333.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n        fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n                tm->tm_year + 1900,\n                tm->tm_mon + 1,\n                tm->tm_mday,\n                tm->tm_hour,\n                tm->tm_min,\n                tm->tm_sec);\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    /* Cast args to the implementation's va_list type expected by vfprintf to avoid\n       mismatches introduced by testing/override headers that redefine va_list. */\n    vfprintf(fp, fmt, (va_list)args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and parameters */\n    log_probe(\"Entering OS_CondVarCreate: var_id=%p, var_name=%p, var_name_str='%s', options=0x%08x\",\n              (void *)var_id, (const void *)var_name, (var_name != NULL) ? var_name : \"(null)\", (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    log_probe(\"Parameters passed checks: var_id=%p, var_name=%p\", (void *)var_id, (const void *)var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    log_probe(\"After OS_ObjectIdAllocateNew: return_code=%d, token_address=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n        log_probe(\"Allocated token maps to condvar pointer=%p\", (void *)condvar);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n        log_probe(\"OS_OBJECT_INIT called for token; name saved='%s'\", (var_name != NULL) ? var_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        log_probe(\"After OS_CondVarCreate_Impl: return_code=%d\", return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        log_probe(\"After OS_ObjectIdFinalizeNew: final_return_code=%d, var_id=%p (%p)\", return_code, (void *)var_id, (void *)(var_id ? (void *)*var_id : NULL));\n    }\n    else\n    {\n        log_probe(\"OS_ObjectIdAllocateNew failed: return_code=%d\", return_code);\n    }\n\n    log_probe(\"Exiting OS_CondVarCreate with return_code=%d\", return_code);\n    return return_code;\n}\n",
  "explanation": "Included the proper standard headers (<stdio.h>, <stdarg.h>, <time.h>) so struct tm is a complete type and va_list is declared. To address the va_list/type-mismatch introduced by test/override headers, cast the local args to (va_list) when calling vfprintf. These changes preserve the original logic while resolving the compilation errors."
}