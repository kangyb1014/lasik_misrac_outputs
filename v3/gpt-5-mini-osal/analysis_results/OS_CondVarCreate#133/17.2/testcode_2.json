{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur via the event-callback path. Example: OS_CondVarCreate() calls OS_ObjectIdAllocateNew(), which executes the fragment OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL); OS_NotifyEvent() invokes the application-provided EventHandler (OS_SharedGlobalVars.EventHandler). If that EventHandler calls back into an OS API that allocates objects (for example OS_CondVarCreate() or OS_ObjectIdAllocateNew()), this results in OS_ObjectIdAllocateNew -> OS_NotifyEvent -> EventHandler -> OS_CondVarCreate -> OS_ObjectIdAllocateNew ..., i.e. indirect recursive re-entry of the same function. This violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1336.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <unistd.h>\n\n/* Probe helper - append logs to /tmp/logs/1336.txt */\nstatic void OS_1336_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1336.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Prefix each log line with the PID for easier correlation */\n    fprintf(f, \"[PID=%d] \", (int)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* A simple re-entry counter to help detect indirect recursion/re-entry into this function.\n * Note: this is a process-global counter and may reflect cross-thread activity as well.\n */\nstatic int OS_1336_reentry_counter = 0;\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and parameters */\n    OS_1336_reentry_counter++;\n    OS_1336_log(\"ENTER OS_CondVarCreate: reentry=%d, var_id=%p, var_name=%p (%s), options=0x%08X\",\n                OS_1336_reentry_counter, (void *)var_id, (const void *)var_name, (var_name ? var_name : \"(null)\"), (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_1336_log(\"Calling OS_ObjectIdAllocateNew for type OS_OBJECT_TYPE_OS_CONDVAR, name='%s'\", var_name ? var_name : \"(null)\");\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    OS_1336_log(\"OS_ObjectIdAllocateNew returned %d, token_addr=%p, token_size=%zu\",\n                (int)return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        OS_1336_log(\"OS_OBJECT_TABLE_GET -> condvar=%p\", (void *)condvar);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n        OS_1336_log(\"OS_OBJECT_INIT completed for token=%p, obj_name='%s'\", (void *)&token, var_name ? var_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_1336_log(\"Calling OS_CondVarCreate_Impl for token=%p, options=0x%08X\", (void *)&token, (unsigned)options);\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        OS_1336_log(\"OS_CondVarCreate_Impl returned %d for token=%p\", (int)return_code, (void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        OS_1336_log(\"OS_ObjectIdFinalizeNew completed, final return_code=%d, var_id=%p\", (int)return_code, (void *)var_id);\n    }\n    else\n    {\n        OS_1336_log(\"Skipping remaining steps due to OS_ObjectIdAllocateNew failure: %d\", (int)return_code);\n    }\n\n    OS_1336_log(\"EXIT OS_CondVarCreate: reentry=%d, return_code=%d\", OS_1336_reentry_counter, (int)return_code);\n    OS_1336_reentry_counter--;\n\n    return return_code;\n}\n"
}