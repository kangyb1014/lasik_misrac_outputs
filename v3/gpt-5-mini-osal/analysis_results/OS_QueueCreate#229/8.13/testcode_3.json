{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_QueueCreate_Impl the variable 'queue' is declared as OS_queue_internal_record_t *queue and assigned via queue = OS_OBJECT_TABLE_GET(OS_queue_table, *token); but within this function it is only used for read-only access (queue->max_depth, queue->max_size, queue->queue_name). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible; here it could and should be declared as const OS_queue_internal_record_t *queue to reflect intended read-only use.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueCreate:\n```c\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging function to capture control flow and state for OS_QueueCreate\n * Writes human-readable trace information to /tmp/logs/2293.txt\n * Uses only read-only access to the queue record (takes a const pointer)\n */\nstatic void OS_QueueCreate_LogProbe(const char *event, const void *queue_ptr, void *token_ptr,\n                                    int32 return_code, uint32 flags)\n{\n    FILE *f = fopen(\"/tmp/logs/2293.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"Event: %s\\n\", event);\n    fprintf(f, \"  token addr: %p\\n\", token_ptr);\n    fprintf(f, \"  queue ptr : %p\\n\", queue_ptr);\n\n    /* The following block attempts to safely print fields if queue_ptr is non-NULL.\n     * Cast to a generic struct pointer to avoid depending on full type here; the\n     * calling code passes an OS_queue_internal_record_t* so these field accesses\n     * are intended to match the real structure layout in the build environment.\n     */\n    if (queue_ptr != NULL)\n    {\n        /* Define a local proxy type matching the fields we read. This avoids\n         * introducing additional dependencies while allowing safe reads of the\n         * expected fields used in the function under test.\n         */\n        struct __probe_queue_proxy\n        {\n            uint64_t max_depth;\n            uint64_t max_size;\n            const char *queue_name;\n        };\n\n        const struct __probe_queue_proxy *q = (const struct __probe_queue_proxy *)queue_ptr;\n\n        fprintf(f, \"  max_depth : %"
}