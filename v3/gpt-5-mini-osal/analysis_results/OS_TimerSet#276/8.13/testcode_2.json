{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe structure member 'callback_arg' is declared as a plain void * in OS_timecb_internal_record_t. Under MISRA C 2023 Rule 8.13 a pointer should be const-qualified whenever possible; if the stored argument is not modified by the OS (i.e. it is only passed to callbacks for read-only use), it should be declared as 'const void *callback_arg'. As written (void *) the code is more permissive than necessary and therefore violates Rule 8.13 unless there is a documented need for the OS to modify the pointed-to object (in which case a justification should be provided).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerSet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2763.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerSet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerSet:\n```c\nint32 OS_TimerSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    OS_timecb_internal_record_t *timecb;\n    int32                        return_code;\n    osal_objtype_t               objtype;\n    osal_id_t                    dedicated_timebase_id;\n    OS_object_token_t            token;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n\n    ARGCHECK(start_time < (UINT32_MAX / 2), OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < (UINT32_MAX / 2), OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(start_time != 0 || interval_time != 0, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n        }\n\n        timecb->wait_time     = (int32)start_time;\n        timecb->interval_time = (int32)interval_time;\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /*\n     * If the timer uses a dedicated time base, then also change that to the same interval.\n     *\n     * This is not perfect in the sense that the update is not all done atomically.  If this\n     * is not the first call to TimerSet, then weirdness can happen:\n     *  - a timer tick could occur between setting the callback times above and now\n     *  - the call to OS_TimeBaseSet() could fail leaving us in a mixed state\n     *\n     * However, the notion of multiple TimerSet() calls is a gray area to begin with, since\n     * timer ticks can occur at any moment - there is never a guarantee your new TimerSet values\n     * will get applied before the old timer expires.  Therefore by definition an application\n     * MUST be able to handle a possible \"spurious\" callback in these circumstances.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        return_code = OS_TimeBaseSet(dedicated_timebase_id, start_time, interval_time);\n    }\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerSet code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helpers - writes append-only to /tmp/logs/2763.txt */\nstatic void OS_TimerSet_Log_Impl(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2763.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\n/*\n * Modified OS_TimerSet with non-intrusive probes that log control flow and\n * relevant state to /tmp/logs/2763.txt. The original logic is preserved.\n */\nint32 OS_TimerSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    OS_timecb_internal_record_t *timecb;\n    int32                        return_code;\n    osal_objtype_t               objtype;\n    osal_id_t                    dedicated_timebase_id;\n    OS_object_token_t            token;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n\n    OS_TimerSet_Log_Impl(\"ENTRY: timer_id=%u start_time=%u interval_time=%u\\n\",\n                         (unsigned)timer_id, (unsigned)start_time, (unsigned)interval_time);\n\n    ARGCHECK(start_time < (UINT32_MAX / 2), OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < (UINT32_MAX / 2), OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(start_time != 0 || interval_time != 0, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimerSet_Log_Impl(\"Context check: objtype=%u\\n\", (unsigned)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerSet_Log_Impl(\"EXIT: Not allowed in timebase context - returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    OS_TimerSet_Log_Impl(\"OS_ObjectIdGetById returned %d for timer_id=%u\\n\", (int)return_code, (unsigned)timer_id);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n\n        OS_TimerSet_Log_Impl(\"Obtained timecb at %p token_addr=%p\\n\", (const void *)timecb, (const void *)&token);\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        /* Log dedicated timebase flag and current callback argument pointer (read-only probe) */\n        OS_TimerSet_Log_Impl(\"timecb->flags=0x%08x\\n\", (unsigned)timecb->flags);\n        OS_TimerSet_Log_Impl(\"timecb->callback_arg (read-only)=%p\\n\", (const void *)timecb->callback_arg);\n        OS_TimerSet_Log_Impl(\"timecb previous wait_time=%d interval_time=%d\\n\", (int)timecb->wait_time, (int)timecb->interval_time);\n\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n            OS_TimerSet_Log_Impl(\"Dedicated timebase detected: id=%u\\n\", (unsigned)dedicated_timebase_id);\n        }\n\n        /* Preserve original logic: update the stored times */\n        timecb->wait_time     = (int32)start_time;\n        timecb->interval_time = (int32)interval_time;\n\n        OS_TimerSet_Log_Impl(\"timecb new wait_time=%d interval_time=%d\\n\", (int)timecb->wait_time, (int)timecb->interval_time);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_TimerSet_Log_Impl(\"Released token at %p\\n\", (const void *)&token);\n    }\n\n    /*\n     * If the timer uses a dedicated time base, then also change that to the same interval.\n     *\n     * This is not perfect in the sense that the update is not all done atomically.  If this\n     * is not the first call to TimerSet, then weirdness can happen:\n     *  - a timer tick could occur between setting the callback times above and now\n     *  - the call to OS_TimeBaseSet() could fail leaving us in a mixed state\n     *\n     * However, the notion of multiple TimerSet() calls is a gray area to begin with, since\n     * timer ticks can occur at any moment - there is never a guarantee your new TimerSet values\n     * will get applied before the old timer expires.  Therefore by definition an application\n     * MUST be able to handle a possible \"spurious\" callback in these circumstances.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        OS_TimerSet_Log_Impl(\"Calling OS_TimeBaseSet for dedicated_timebase_id=%u\\n\", (unsigned)dedicated_timebase_id);\n        return_code = OS_TimeBaseSet(dedicated_timebase_id, start_time, interval_time);\n        OS_TimerSet_Log_Impl(\"OS_TimeBaseSet returned %d for dedicated_timebase_id=%u\\n\", (int)return_code, (unsigned)dedicated_timebase_id);\n    }\n\n    OS_TimerSet_Log_Impl(\"EXIT: return_code=%d\\n\", (int)return_code);\n    return return_code;\n}\n"
}