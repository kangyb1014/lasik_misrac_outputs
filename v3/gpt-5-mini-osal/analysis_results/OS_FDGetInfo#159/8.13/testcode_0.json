{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET expands to &tbl[...], yielding a pointer of type OS_common_record_t * (mutable). In callers such as OS_FDGetInfo the returned pointer is only used for read access (record->name_entry, record->creator). Therefore the pointer should be to a const-qualified type (const OS_common_record_t *). The current macro and the declaration extern OS_common_record_t *const OS_global_stream_table do not provide a const-qualified pointee, permitting accidental modification and violating MISRA C 2023 Rule 8.13. A fix is to make the table/pointer-to-pointee const (e.g. extern const OS_common_record_t *const OS_global_stream_table) or have the macro/call-sites use a const-qualified pointer when only read access is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe helper to append logs. Keep simple and robust. */\nstatic void OS_FDGetInfo_log_append(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1593.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void OS_FDGetInfo_log_state(const char *stage,\n                                   osal_id_t filedes,\n                                   int32 return_code,\n                                   const void *record_ptr,\n                                   const char *name_entry,\n                                   unsigned long long creator,\n                                   const char *path)\n{\n    FILE *f = fopen(\"/tmp/logs/1593.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log a compact structured line for easier parsing */\n    fprintf(f, \"[OS_FDGetInfo] stage=%s filedes=%llu return_code=%d record=%p name_present=%s creator=%llu path=\\\"\");\n\n    /* name_present and actual name (if present) */\n    if (name_entry != NULL)\n    {\n        fprintf(f, \"1 name=\\\"%.*s\\\" \", 256, name_entry);\n    }\n    else\n    {\n        fprintf(f, \"0 \");\n    }\n\n    /* path (if any) */\n    if (path != NULL && path[0] != '\\0')\n    {\n        fprintf(f, \"path=\\\"%.*s\\\"\\n\", 256, path);\n    }\n    else\n    {\n        fprintf(f, \"path=\\\"\\\"\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    /* Log entry with incoming filedes */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"OS_FDGetInfo ENTRY: filedes=%llu\", (unsigned long long)filedes);\n        OS_FDGetInfo_log_append(buf);\n    }\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log result of object lookup */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"OS_FDGetInfo: OS_ObjectIdGetById returned %d\", (int)return_code);\n        OS_FDGetInfo_log_append(buf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log pointer to the retrieved record */\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"OS_FDGetInfo: record ptr=%p\", (void *)record);\n            OS_FDGetInfo_log_append(buf);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* Log the name_entry before copy (truncate to safe length) */\n            {\n                char buf[512];\n                size_t n = strnlen(record->name_entry, sizeof(fd_prop->Path) - 1);\n                /* Use %.*s to avoid over-read */\n                (void)snprintf(buf, sizeof(buf), \"OS_FDGetInfo: name_entry present length=%zu value=\\\"%.*s\\\"\",\n                               n, (int)n, record->name_entry);\n                OS_FDGetInfo_log_append(buf);\n            }\n\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n\n            /* Log the fd_prop->Path after copy */\n            {\n                char buf[512];\n                (void)snprintf(buf, sizeof(buf), \"OS_FDGetInfo: copied Path=\\\"%s\\\"\", fd_prop->Path);\n                OS_FDGetInfo_log_append(buf);\n            }\n        }\n        else\n        {\n            OS_FDGetInfo_log_append(\"OS_FDGetInfo: name_entry is NULL\");\n        }\n\n        /* Log creator and IsValid assignment */\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"OS_FDGetInfo: creator=%llu IsValid=%d\",\n                           (unsigned long long)record->creator, (int)fd_prop->IsValid);\n            OS_FDGetInfo_log_append(buf);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_FDGetInfo_log_append(\"OS_FDGetInfo: token released\");\n    }\n\n    /* Final state log before return */\n    {\n        char buf[512];\n        (void)snprintf(buf, sizeof(buf), \"OS_FDGetInfo EXIT: filedes=%llu return_code=%d Path=\\\"%s\\\" User=%llu IsValid=%d\",\n                       (unsigned long long)filedes,\n                       (int)return_code,\n                       (fd_prop != NULL) ? fd_prop->Path : \"\",\n                       (unsigned long long)fd_prop->User,\n                       (int)fd_prop->IsValid);\n        OS_FDGetInfo_log_append(buf);\n    }\n\n    return return_code;\n}\n"
}