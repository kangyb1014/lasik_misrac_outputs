{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_fdgetinfo_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1593.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and input parameter */\n    os_fdgetinfo_log(\"OS_FDGetInfo ENTRY: filedes=%lld, fd_prop=%p\", (long long)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n    os_fdgetinfo_log(\"fd_prop cleared (memset)\\n\");\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    os_fdgetinfo_log(\"OS_ObjectIdGetById returned: %d, token=%lld\", return_code, (long long)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        os_fdgetinfo_log(\"OS_OBJECT_TABLE_GET returned record=%p\", (void *)record);\n\n        /* The original logic reads fields from *record and does not modify it. Log those reads. */\n        if (record->name_entry != NULL)\n        {\n            /* Log the name entry content (truncate to reasonable length for logs) */\n            char name_buf[128];\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n            os_fdgetinfo_log(\"record->name_entry: '%s'\", name_buf);\n\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            os_fdgetinfo_log(\"fd_prop->Path set from record->name_entry\");\n        }\n        else\n        {\n            os_fdgetinfo_log(\"record->name_entry is NULL\");\n        }\n\n        os_fdgetinfo_log(\"record->creator: %u\", (unsigned)record->creator);\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n        os_fdgetinfo_log(\"fd_prop->User set, fd_prop->IsValid set to true\");\n\n        OS_ObjectIdRelease(&token);\n        os_fdgetinfo_log(\"OS_ObjectIdRelease called for token=%lld\", (long long)token);\n    }\n\n    os_fdgetinfo_log(\"OS_FDGetInfo EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp5ubc54qq/src/src/os/shared/src/osapi-file.c: In function 'OS_FDGetInfo':\n/tmp/tmp5ubc54qq/src/src/os/shared/src/osapi-file.c:522:5: error: aggregate value used where an integer was expected\n  522 |     os_fdgetinfo_log(\"OS_ObjectIdGetById returned: %d, token=%lld\", return_code, (long long)token);\n      |     ^~~~~~~~~~~~~~~~\n/tmp/tmp5ubc54qq/src/src/os/shared/src/osapi-file.c:552:9: error: aggregate value used where an integer was expected\n  552 |         os_fdgetinfo_log(\"OS_ObjectIdRelease called for token=%lld\", (long long)token);\n      |         ^~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdbool.h>\n\nstatic void os_fdgetinfo_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1593.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and input parameter */\n    os_fdgetinfo_log(\"OS_FDGetInfo ENTRY: filedes=%lld, fd_prop=%p\", (long long)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n    os_fdgetinfo_log(\"fd_prop cleared (memset)\\n\");\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    /* token is an aggregate type; print its address instead of casting to an integer */\n    os_fdgetinfo_log(\"OS_ObjectIdGetById returned: %d, token=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        os_fdgetinfo_log(\"OS_OBJECT_TABLE_GET returned record=%p\", (void *)record);\n\n        /* The original logic reads fields from *record and does not modify it. Log those reads. */\n        if (record->name_entry != NULL)\n        {\n            /* Log the name entry content (truncate to reasonable length for logs) */\n            char name_buf[128];\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n            os_fdgetinfo_log(\"record->name_entry: '%s'\", name_buf);\n\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            os_fdgetinfo_log(\"fd_prop->Path set from record->name_entry\");\n        }\n        else\n        {\n            os_fdgetinfo_log(\"record->name_entry is NULL\");\n        }\n\n        os_fdgetinfo_log(\"record->creator: %u\", (unsigned)record->creator);\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n        os_fdgetinfo_log(\"fd_prop->User set, fd_prop->IsValid set to true\");\n\n        OS_ObjectIdRelease(&token);\n        /* print token address instead of casting aggregate to integer */\n        os_fdgetinfo_log(\"OS_ObjectIdRelease called for token=%p\", (void *)&token);\n    }\n\n    os_fdgetinfo_log(\"OS_FDGetInfo EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n",
  "explanation": "The build errors occurred because OS_object_token_t is an aggregate type (not an integer), so casting it to (long long) and using %lld was invalid. I changed the log calls to print the token's address using %p and (void *)&token, which avoids casting the aggregate to an integer while preserving useful diagnostic information. No other logic was changed."
}