{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration uses a const pointer to mutable records: extern OS_common_record_t *const OS_global_stream_table. Rule 8.13 expects the pointee to be const-qualified when possible. In OS_FDGetInfo the code only reads from the table (record->name_entry, record->creator), so the table could be declared as const OS_common_record_t *const OS_global_stream_table. Because the pointee is not const-qualified even though it could be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted log entries to /tmp/logs/1593.txt */\nstatic void OS_FDGetInfo_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1593.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry */\n    OS_FDGetInfo_log(\"OS_FDGetInfo ENTRY: filedes=%ld, OS_global_stream_table=%p\", (long)filedes, (void *)OS_global_stream_table);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    OS_FDGetInfo_log(\"fd_prop cleared at %p\", (void *)fd_prop);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    OS_FDGetInfo_log(\"OS_ObjectIdGetById returned %ld for filedes=%ld, token_addr=%p\", (long)return_code, (long)filedes, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        OS_FDGetInfo_log(\"OS_OBJECT_TABLE_GET returned record=%p\", (void *)record);\n\n        if (record != NULL && record->name_entry != NULL)\n        {\n            OS_FDGetInfo_log(\"record->name_entry=%p, name=\\\"%s\\\"\", (void *)record->name_entry, record->name_entry);\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        else\n        {\n            OS_FDGetInfo_log(\"record->name_entry is NULL (record=%p)\", (void *)record);\n        }\n\n        /* Log creator value before assignment */\n        OS_FDGetInfo_log(\"record->creator=%lu (record=%p)\", (unsigned long)record->creator, (void *)record);\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_FDGetInfo_log(\"fd_prop after fill: Path=\\\"%s\\\", User=%lu, IsValid=%d\", fd_prop->Path, (unsigned long)fd_prop->User, (int)fd_prop->IsValid);\n\n        OS_ObjectIdRelease(&token);\n        OS_FDGetInfo_log(\"OS_ObjectIdRelease called for token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_FDGetInfo_log(\"OS_FDGetInfo returning error code %ld for filedes=%ld\", (long)return_code, (long)filedes);\n    }\n\n    OS_FDGetInfo_log(\"OS_FDGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}