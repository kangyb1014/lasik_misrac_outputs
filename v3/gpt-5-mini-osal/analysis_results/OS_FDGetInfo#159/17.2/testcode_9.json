{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS not initialized. If OS_DEBUG is implemented by calling OS_printf (directly or via another routine that eventually calls OS_printf), this creates an indirect recursive call: OS_printf -> OS_DEBUG -> OS_printf, violating MISRA C 2023 Rule 17.2. A concrete violation occurs when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER and OS_DEBUG is enabled and implemented using OS_printf (or any call chain that returns to OS_printf).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1596.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends lines to /tmp/logs/1596.txt\n * Uses standard C file I/O (avoids calling any OS_* logging functions)\n * so it does not participate in the OS_printf -> OS_DEBUG recursion scenario.\n */\nstatic void os_fd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1596.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fputc('\\n', f);\n        fclose(f);\n    }\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and parameters */\n    os_fd_probe_log(\"OS_FDGetInfo ENTRY: filedes=%ld, fd_prop=%p\", (long)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    /* Log after pointer check */\n    os_fd_probe_log(\"OS_FDGetInfo: fd_prop pointer validated\");\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n    os_fd_probe_log(\"OS_FDGetInfo: fd_prop zeroed (size=%zu)\", sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    os_fd_probe_log(\"OS_FDGetInfo: calling OS_ObjectIdGetById(...) for filedes=%ld\", (long)filedes);\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    os_fd_probe_log(\"OS_FDGetInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        os_fd_probe_log(\"OS_FDGetInfo: record obtained=%p\", (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            /* Preserve original logic: copy path */\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            /* Log the path that was copied (safely) */\n            os_fd_probe_log(\"OS_FDGetInfo: copied Path='%s'\", fd_prop->Path);\n        }\n        else\n        {\n            os_fd_probe_log(\"OS_FDGetInfo: record->name_entry is NULL\");\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        os_fd_probe_log(\"OS_FDGetInfo: set User=%u, IsValid=%s\", (unsigned)fd_prop->User, fd_prop->IsValid ? \"true\" : \"false\");\n\n        OS_ObjectIdRelease(&token);\n        os_fd_probe_log(\"OS_FDGetInfo: released object token\");\n    }\n    else\n    {\n        os_fd_probe_log(\"OS_FDGetInfo: returning with error code %ld before obtaining record\", (long)return_code);\n    }\n\n    os_fd_probe_log(\"OS_FDGetInfo EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}