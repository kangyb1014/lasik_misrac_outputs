{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize) without validating that BasePtr points to a buffer of at least TotalSize bytes (or is non-NULL). If a UT_ENTRYTYPE_RETURN_BUFFER entry exists with Data.Buff.Position == 0 but Data.Buff.BasePtr == NULL, or Data.Buff.TotalSize is larger than the actual allocated buffer (e.g. misconfigured or previously freed/short allocation), the memset will write outside the bounds (or dereference NULL), causing undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3009.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\nPlease provide the modified UT_DefaultStubImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n#include <stdint.h>\n\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    /* Start varargs as in the original implementation */\n    va_start(va, DefaultRc);\n\n    /*\n     * Probe / logging: capture the call site, key values and a raw dump of the\n     * va_list representation to help reproduce scenarios where pointers passed\n     * via varargs (e.g. buffer base pointer/size) lead to out-of-bounds access.\n     * The raw va_list bytes are implementation-defined but can be useful for\n     * forensic debugging without changing program behavior.\n     */\n    {\n        /* Make a copy so we do not disturb the original va that will be\n         * forwarded to UT_DefaultStubImplWithArgs. */\n        va_list va_copy_for_dump;\n        va_copy(va_copy_for_dump, va);\n\n        FILE *f = fopen(\"/tmp/logs/3009.txt\", \"a\");\n        if (f != NULL)\n        {\n            time_t now = time(NULL);\n\n            /* Log basic call information */\n            fprintf(f, \"--- UT_DefaultStubImpl entry ---\\n\");\n            fprintf(f, \"time=%ld\\n\", (long)now);\n            if (FunctionName != NULL)\n            {\n                /* Print both pointer and string when available */\n                fprintf(f, \"FunctionName=%p (%s)\\n\", (void *)FunctionName, FunctionName);\n            }\n            else\n            {\n                fprintf(f, \"FunctionName=%p (NULL)\\n\", (void *)FunctionName);\n            }\n\n            /* Print FuncKey as an integer-sized hex value for broad compatibility */\n            fprintf(f, \"FuncKey=0x%llx\\n\", (unsigned long long)(uintptr_t)FuncKey);\n            fprintf(f, \"DefaultRc=%ld\\n\", (long)DefaultRc);\n\n            /* Dump raw va_list bytes to help reconstruct what was passed */\n            {\n                size_t vsz = sizeof(va_list);\n                unsigned char vbuf[sizeof(va_list)];\n\n                /* Safe memcpy of the va_list object representation */\n                memcpy(vbuf, &va_copy_for_dump, vsz);\n\n                fprintf(f, \"va_list raw (%zu bytes):\", vsz);\n                for (size_t i = 0; i < vsz; ++i)\n                {\n                    fprintf(f, \" %02x\", (unsigned int)vbuf[i]);\n                }\n                fprintf(f, \"\\n\");\n            }\n\n            fprintf(f, \"--- end probe ---\\n\\n\");\n            fclose(f);\n        }\n\n        va_end(va_copy_for_dump);\n    }\n\n    /* Call the real implementation (preserve original behavior) */\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n\n    /* Log the return code to aid in reproducing control flow */\n    {\n        FILE *f = fopen(\"/tmp/logs/3009.txt\", \"a\");\n        if (f != NULL)\n        {\n            time_t now = time(NULL);\n            fprintf(f, \"UT_DefaultStubImpl returned: time=%ld, Retcode=%ld\\n\\n\", (long)now, (long)Retcode);\n            fclose(f);\n        }\n    }\n\n    va_end(va);\n\n    return Retcode;\n}\n"
}