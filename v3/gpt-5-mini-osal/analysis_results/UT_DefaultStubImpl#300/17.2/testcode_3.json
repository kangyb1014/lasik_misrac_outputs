{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: UT_ExecuteVaHandler calls UT_DefaultStubImplWithArgs(...). UT_DefaultStubImplWithArgs looks up the UT_ENTRYTYPE_FINAL_HANDLER entry and, if present, invokes that final handler (via the VaHandler function pointer). If that final handler is UT_ExecuteVaHandler (either because it was previously registered for the same FuncKey, or because DefaultHandler passed to UT_ExecuteVaHandler is UT_ExecuteVaHandler and gets registered via UT_SetVaHandlerFunction), the call chain becomes UT_ExecuteVaHandler -> UT_DefaultStubImplWithArgs -> (final handler) UT_ExecuteVaHandler, i.e. indirect recursion. This violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3006.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\nPlease provide the modified UT_DefaultStubImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n#include <string.h>\n\n/*\n * Probing helpers: keep these static to this translation unit.\n * They append human-readable logs to /tmp/logs/3006.txt describing\n * the control flow and state for calls to UT_DefaultStubImpl.\n */\nstatic void UT_Probe_LogState(const char *stage,\n                              const char *FunctionName,\n                              const void *FuncKey_bytes,\n                              size_t FuncKey_size,\n                              int Retcode,\n                              int depth)\n{\n    FILE *f = fopen(\"/tmp/logs/3006.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    /* Build a printable representation of the first bytes of FuncKey\n     * without assuming the underlying type of UT_EntryKey_t.\n     */\n    uintptr_t key_repr = 0U;\n    if (FuncKey_bytes != NULL)\n    {\n        size_t copy = (FuncKey_size < sizeof(key_repr)) ? FuncKey_size : sizeof(key_repr);\n        (void)memcpy(&key_repr, FuncKey_bytes, copy);\n    }\n\n    fprintf(f,\n            \"[%ld] %s depth=%d FunctionName=%s FunctionName_ptr=%p FuncKey_repr=0x%\" PRIxPTR \" Retcode=%d\\n\",\n            (long)t,\n            (stage != NULL) ? stage : \"?\",\n            depth,\n            (FunctionName != NULL) ? FunctionName : \"(null)\",\n            (void *)FunctionName,\n            key_repr,\n            Retcode);\n\n    fclose(f);\n}\n\n/*\n * Preserve original function signature and behaviour, but add probes\n * before and after the call to UT_DefaultStubImplWithArgs so callers\n * (including UT_ExecuteVaHandler) will produce logs that can show\n * nested/indirect recursion sequences.\n */\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    /* Depth counter: shows nesting level for re-entrancy/recursion evidence. */\n    static int depth = 0;\n\n    /* Log entry. We pass a pointer to FuncKey and its size so the helper\n     * can produce a reproducible (but non-invasive) representation.\n     */\n    depth++;\n    UT_Probe_LogState(\"ENTER\", FunctionName, (const void *)&FuncKey, sizeof(FuncKey), 0, depth);\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    /* Log exit including returned value. */\n    UT_Probe_LogState(\"EXIT\", FunctionName, (const void *)&FuncKey, sizeof(FuncKey), Retcode, depth);\n    depth--;\n\n    return Retcode;\n}\n"
}