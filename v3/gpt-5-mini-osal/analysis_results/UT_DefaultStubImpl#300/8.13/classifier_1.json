{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nUT_EntryKey_t FuncKey\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The identifier FuncKey is declared as type UT_EntryKey_t (i.e. a value, not a pointer) in the fragment. Rule 8.13 applies to pointer types that should be const-qualified when possible. As written this declaration does not show a pointer, so it does not violate Rule 8.13. (If UT_EntryKey_t were actually a typedef for a pointer type, e.g. typedef SomeType *UT_EntryKey_t, then a non-const pointer could potentially violate the rule and should be reviewed to see if it can point to a const-qualified type.)"
}