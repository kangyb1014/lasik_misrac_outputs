{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtTestDataBaseEntry is used only for read access (checking and invoking the Setup function pointer) but is declared as a non-const pointer. The pointer could be const-qualified (e.g. const UtTestDataBaseEntry_t *UtTestDataBaseEntry) to reflect that the database entry is not modified here. Therefore this code violates Rule 8.13. (If the invoked Setup function or other code in scope is intended to modify the database entry itself, then const qualification would be inappropriate.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *logf = NULL;\n\n    UT_BSP_Lock();\n\n    /* Log entry into the function */\n    logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: Enter\\n\");\n        fclose(logf);\n        logf = NULL;\n    }\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n\n    logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: Initial merged head = %p\\n\", (void *)UtListMain);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: After merges, merged head = %p\\n\", (void *)UtListMain);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"UtTest_Run: Visiting node=%p, entry_ptr=%p\\n\", (void *)UtListNode, (void *)UtTestDataBaseEntry);\n            fclose(logf);\n            logf = NULL;\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log test name and pointers available for read */\n            logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"UtTest_Run: TestName='%s', Setup_present=%s, Test_present=%s, Teardown_present=%s, ExecutedCount=%u\\n\",\n                        (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                        (UtTestDataBaseEntry->Setup != NULL) ? \"yes\" : \"no\",\n                        (UtTestDataBaseEntry->Test != NULL) ? \"yes\" : \"no\",\n                        (UtTestDataBaseEntry->Teardown != NULL) ? \"yes\" : \"no\",\n                        (unsigned)UtAssert_Global.ExecutedCount);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"UtTest_Run: Calling Setup for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fclose(logf);\n                    logf = NULL;\n                }\n\n                UtTestDataBaseEntry->Setup();\n\n                logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"UtTest_Run: Returned from Setup for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fclose(logf);\n                    logf = NULL;\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"UtTest_Run: Calling Test for '%s' (before) ExecutedCount=%u\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                            (unsigned)UtAssert_Global.ExecutedCount);\n                    fclose(logf);\n                    logf = NULL;\n                }\n\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n\n                logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"UtTest_Run: Returned from Test for '%s' (after) ExecutedCount=%u\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                            (unsigned)UtAssert_Global.ExecutedCount);\n                    fclose(logf);\n                    logf = NULL;\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"UtTest_Run: Calling Teardown for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fclose(logf);\n                    logf = NULL;\n                }\n\n                UtTestDataBaseEntry->Teardown();\n\n                logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"UtTest_Run: Returned from Teardown for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fclose(logf);\n                    logf = NULL;\n                }\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n\n    logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: Destroying database at %p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: Exit\\n\");\n        fclose(logf);\n        logf = NULL;\n    }\n}\n"
}