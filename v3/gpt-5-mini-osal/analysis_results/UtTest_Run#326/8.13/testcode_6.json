{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtListNode is used only to traverse the list and is never used to modify the list node contents in this function (only passed to UtList_GetNext, UtList_IsEnd and UtList_GetObject). Therefore it can be declared as a pointer to const (const UtListNode_t *UtListNode), satisfying MISRA C 2023 Rule 8.13. The current declaration UtListNode_t *UtListNode omits the const qualification and thus violates Rule 8.13 in this usage scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    /* Probe log file. If fopen fails, logging is skipped silently. */\n    FILE *probe_log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: enter\\n\");\n        fflush(probe_log);\n    }\n\n    UT_BSP_Lock();\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: after UT_BSP_Lock\\n\");\n        fflush(probe_log);\n    }\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: UtListMain (head default) = %p\\n\", (void *)UtListMain);\n        fflush(probe_log);\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: merged SETUP into UtListMain\\n\");\n        fflush(probe_log);\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: merged TEST into UtListMain\\n\");\n        fflush(probe_log);\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: merged TEARDOWN into UtListMain\\n\");\n        fflush(probe_log);\n    }\n\n    UT_BSP_Unlock();\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: after UT_BSP_Unlock\\n\");\n        fflush(probe_log);\n    }\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        if (probe_log != NULL)\n        {\n            fprintf(probe_log, \"UtTest_Run: loop iteration - UtListNode = %p\\n\", (void *)UtListNode);\n            fflush(probe_log);\n        }\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (probe_log != NULL)\n        {\n            fprintf(probe_log, \"UtTest_Run: UtTestDataBaseEntry = %p\\n\", (void *)UtTestDataBaseEntry);\n            if (UtTestDataBaseEntry != NULL)\n            {\n                const char *name = UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\";\n                fprintf(probe_log, \"UtTest_Run: TestName = %s\\n\", name);\n            }\n            fflush(probe_log);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            if (probe_log != NULL)\n            {\n                fprintf(probe_log, \"UtTest_Run: BeginTest called for %p\\n\", (void *)UtTestDataBaseEntry->TestName);\n                fflush(probe_log);\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (probe_log != NULL)\n                {\n                    fprintf(probe_log, \"UtTest_Run: calling Setup at %p\\n\", (void *)UtTestDataBaseEntry->Setup);\n                    fflush(probe_log);\n                }\n\n                UtTestDataBaseEntry->Setup();\n\n                if (probe_log != NULL)\n                {\n                    fprintf(probe_log, \"UtTest_Run: returned from Setup\\n\");\n                    fflush(probe_log);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (probe_log != NULL)\n                {\n                    fprintf(probe_log, \"UtTest_Run: calling Test at %p\\n\", (void *)UtTestDataBaseEntry->Test);\n                    fflush(probe_log);\n                }\n\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n\n                if (probe_log != NULL)\n                {\n                    fprintf(probe_log, \"UtTest_Run: returned from Test; ExecutedCount=%u\\n\", (unsigned)UtAssert_Global.ExecutedCount);\n                    fflush(probe_log);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (probe_log != NULL)\n                {\n                    fprintf(probe_log, \"UtTest_Run: calling Teardown at %p\\n\", (void *)UtTestDataBaseEntry->Teardown);\n                    fflush(probe_log);\n                }\n\n                UtTestDataBaseEntry->Teardown();\n\n                if (probe_log != NULL)\n                {\n                    fprintf(probe_log, \"UtTest_Run: returned from Teardown\\n\");\n                    fflush(probe_log);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            if (probe_log != NULL)\n            {\n                fprintf(probe_log, \"UtTest_Run: EndTest called\\n\");\n                fflush(probe_log);\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: before UtList_Destroy; DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fflush(probe_log);\n    }\n\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: after UtList_Destroy and UT_BSP_Unlock\\n\");\n        fflush(probe_log);\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"UtTest_Run: UT_BSP_EndTest called; exiting\\n\");\n        fclose(probe_log);\n    }\n}\n"
}