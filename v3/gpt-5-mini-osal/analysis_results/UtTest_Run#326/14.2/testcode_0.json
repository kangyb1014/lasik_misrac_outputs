{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses UtListMain in the loop condition (!UtList_IsEnd(UtListMain, UtListNode)) and UtListNode as the single loop counter (updated by UtList_GetNext in the third clause). The loop body invokes a user-supplied function pointer (UtTestDataBaseEntry->Test()). Because the behavior of called functions is part of the loop body, that call may modify objects used in the second or third clause (for example the list structure: the current node's Next/Prev links, or even UtListNode/UtListMain). If the Test function modifies UtListNode or the list links, the second clause would be using an object modified in the body and/or the third clause would be operating on an object modified in the body, which violates MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3264.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *logf = NULL;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /* Open log for probes (append so repeated runs accumulate evidence) */\n    logf = fopen(\"/tmp/logs/3264.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"===== UtTest_Run START =====\\n\");\n        fprintf(logf, \"UtListMain=%p\\n\", (void *)UtListMain);\n        fflush(logf);\n    }\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtListNode_t *next_before = NULL;\n        UtListNode_t *next_after = NULL;\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (logf)\n        {\n            fprintf(logf, \"LOOP_TOP: UtListNode=%p is_end=%d\\n\",\n                    (void *)UtListNode,\n                    (int)!(!UtListNode || UtList_IsEnd(UtListMain, UtListNode)));\n            /* Probe the next pointer as observed before the body executes */\n            next_before = UtList_GetNext(UtListNode);\n            fprintf(logf, \"LOOP_TOP: next_before=%p\\n\", (void *)next_before);\n            fflush(logf);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (logf)\n                {\n                    fprintf(logf, \"CALL_SETUP: test=%p name=\\\"%s\\\"\\n\",\n                            (void *)UtTestDataBaseEntry->Test, UtTestDataBaseEntry->TestName);\n                    fflush(logf);\n                }\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (logf)\n                {\n                    fprintf(logf, \"CALL_TEST: test_fn=%p test_name=\\\"%s\\\" current_node=%p\\n\",\n                            (void *)UtTestDataBaseEntry->Test, UtTestDataBaseEntry->TestName,\n                            (void *)UtListNode);\n                    fflush(logf);\n                }\n\n                /* Invoke the test (the potentially harmful user-supplied function) */\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n\n                /* Probe the list state after the test has run */\n                if (logf)\n                {\n                    /* Attempt to observe whether the list links changed for the current node */\n                    next_after = UtList_GetNext(UtListNode);\n                    fprintf(logf, \"AFTER_TEST: current_node=%p next_before=%p next_after=%p UtListMain=%p ExecutedCount=%u\\n\",\n                            (void *)UtListNode, (void *)next_before, (void *)next_after,\n                            (void *)UtListMain, (unsigned)UtAssert_Global.ExecutedCount);\n\n                    /* Also record whether the loop would consider this node at end now */\n                    fprintf(logf, \"AFTER_TEST: is_end_now=%d\\n\", (int)UtList_IsEnd(UtListMain, UtListNode));\n                    fflush(logf);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (logf)\n                {\n                    fprintf(logf, \"CALL_TEARDOWN: test=%p name=\\\"%s\\\"\\n\",\n                            (void *)UtTestDataBaseEntry->Teardown, UtTestDataBaseEntry->TestName);\n                    fflush(logf);\n                }\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n\n        if (logf)\n        {\n            /* Log the next node that the for-loop will take (re-evaluate as original loop does) */\n            UtListNode_t *next_will = UtList_GetNext(UtListNode);\n            fprintf(logf, \"LOOP_END: current=%p next_will=%p\\n\",\n                    (void *)UtListNode, (void *)next_will);\n            fflush(logf);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"===== UtTest_Run END (before destroy) ExecutedCount=%u =====\\n\",\n                (unsigned)UtAssert_Global.ExecutedCount);\n        fflush(logf);\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    if (logf)\n    {\n        fprintf(logf, \"Destroyed database ptr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fprintf(logf, \"===== UtTest_Run COMPLETED =====\\n\\n\\n\");\n        fclose(logf);\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}