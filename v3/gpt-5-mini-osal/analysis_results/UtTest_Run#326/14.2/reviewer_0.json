{
  "user_message": "An agent A claimed that the following UtTest_Run code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of UtTest_Run.\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for loop uses UtListMain in the loop condition (!UtList_IsEnd(UtListMain, UtListNode)) and UtListNode as the single loop counter (updated by UtList_GetNext in the third clause). The loop body invokes a user-supplied function pointer (UtTestDataBaseEntry->Test()). Because the behavior of called functions is part of the loop body, that call may modify objects used in the second or third clause (for example the list structure: the current node's Next/Prev links, or even UtListNode/UtListMain). If the Test function modifies UtListNode or the list links, the second clause would be using an object modified in the body and/or the third clause would be operating on an object modified in the body, which violates MISRA C 2023 Rule 14.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n===== UtTest_Run START =====\nUtListMain=0x55fb5532c8a0\nLOOP_TOP: UtListNode=0x55fb5532c8c0 is_end=1\nLOOP_TOP: next_before=0x55fb5532c8e0\nLOOP_END: current=0x55fb5532c8c0 next_will=0x55fb5532c8e0\nLOOP_TOP: UtListNode=0x55fb5532c8e0 is_end=1\nLOOP_TOP: next_before=0x55fb5532c930\nLOOP_END: current=0x55fb5532c8e0 next_will=0x55fb5532c930\nLOOP_TOP: UtListNode=0x55fb5532c930 is_end=1\nLOOP_TOP: next_before=0x55fb5532c9a0\nCALL_SETUP: test=0x55fb25b75879 name=\"OS_VxWorks_BinSemAPI_Impl_Init\"\nCALL_TEST: test_fn=0x55fb25b75879 test_name=\"OS_VxWorks_BinSemAPI_Impl_Init\" current_node=0x55fb5532c930\nAFTER_TEST: current_node=0x55fb5532c930 next_before=0x55fb5532c9a0 next_after=0x55fb5532c9a0 UtListMain=0x55fb5532c8a0 ExecutedCount=1\nAFTER_TEST: is_end_now=0\nCALL_TEARDOWN: test=0x55fb25b76573 name=\"OS_VxWorks_BinSemAPI_Impl_Init\"\nLOOP_END: current=0x55fb5532c930 next_will=0x55fb5532c9a0\nLOOP_TOP: UtListNode=0x55fb5532c9a0 is_end=1\nLOOP_TOP: next_before=0x55fb5532ca10\nCALL_SETUP: test=0x55fb25b75941 name=\"OS_BinSemCreate_Impl\"\nCALL_TEST: test_fn=0x55fb25b75941 test_name=\"OS_BinSemCreate_Impl\" current_node=0x55fb5532c9a0\nAFTER_TEST: current_node=0x55fb5532c9a0 next_before=0x55fb5532ca10 next_after=0x55fb5532ca10 UtListMain=0x55fb5532c8a0 ExecutedCount=2\nAFTER_TEST: is_end_now=0\nCALL_TEARDOWN: test=0x55fb25b76573 name=\"OS_BinSemCreate_Impl\"\nLOOP_END: current=0x55fb5532c9a0 next_will=0x55fb5532ca10\nLOOP_TOP: UtListNode=0x55fb5532ca10 is_end=1\nLOOP_TOP: next_before=0x55fb5532ca80\nCALL_SETUP: test=0x55fb25b75b31 name=\"OS_BinSemDelete_Impl\"\nCALL_TEST: test_fn=0x55fb25b75b31 test_name=\"OS_BinSemDelete_Impl\" current_node=0x55fb5532ca10\nAFTER_TEST: current_node=0x55fb5532ca10 next_before=0x55fb5532ca80 next_after=0x55fb5532ca80 UtListMain=0x55fb5532c8a0 ExecutedCount=3\nAFTER_TEST: is_end_now=0\nCALL_TEARDOWN: test=0x55fb25b76573 name=\"OS_BinSemDelete_Impl\"\nLOOP_END: current=0x55fb5532ca10 next_will=0x55fb5532ca80\nLOOP_TOP: UtListNode=0x55fb5532ca80 is_end=1\nLOOP_TOP: next_before=0x55fb5532caf0\nCALL_SETUP: test=0x55fb25b75c41 name=\"OS_BinSemGive_Impl\"\nCALL_TEST: test_fn=0x55fb25b75c41 test_name=\"OS_BinSemGive_Impl\" current_node=0x55fb5532ca80\nAFTER_TEST: current_node=0x55fb5532ca80 next_before=0x55fb5532caf0 next_after=0x55fb5532caf0 UtListMain=0x55fb5532c8a0 ExecutedCount=4\nAFTER_TEST: is_end_now=0\nCALL_TEARDOWN: test=0x55fb25b76573 name=\"OS_BinSemGive_Impl\"\nLOOP_END: current=0x55fb5532ca80 next_will=0x55fb5532caf0\nLOOP_TOP: UtListNode=0x55fb5532caf0 is_end=1\nLOOP_TOP: next_before=0x55fb5532cb60\nCALL_SETUP: test=0x55fb25b75e1d name=\"OS_BinSemFlush_Impl\"\nCALL_TEST: test_fn=0x55fb25b75e1d test_name=\"OS_BinSemFlush_Impl\" current_node=0x55fb5532caf0\nAFTER_TEST: current_node=0x55fb5532caf0 next_before=0x55fb5532cb60 next_after=0x55fb5532cb60 UtListMain=0x55fb5532c8a0 ExecutedCount=5\nAFTER_TEST: is_end_now=0\nCALL_TEARDOWN: test=0x55fb25b76573 name=\"OS_BinSemFlush_Impl\"\nLOOP_END: current=0x55fb5532caf0 next_will=0x55fb5532cb60\nLOOP_TOP: UtListNode=0x55fb5532cb60 is_end=1\nLOOP_TOP: next_before=0x55fb5532cbd0\nCALL_SETUP: test=0x55fb25b75ff9 name=\"OS_BinSemTake_Impl\"\nCALL_TEST: test_fn=0x55fb25b75ff9 test_name=\"OS_BinSemTake_Impl\" current_node=0x55fb5532cb60\nAFTER_TEST: current_node=0x55fb5532cb60 next_before=0x55fb5532cbd0 next_after=0x55fb5532cbd0 UtListMain=0x55fb5532c8a0 ExecutedCount=6\nAFTER_TEST: is_end_now=0\nCALL_TEARDOWN: test=0x55fb25b76573 name=\"OS_BinSemTake_Impl\"\nLOOP_END: current=0x55fb5532cb60 next_will=0x55fb5532cbd0\nLOOP_TOP: UtListNode=0x55fb5532cbd0 is_end=1\nLOOP_TOP: next_before=0x55fb5532cc40\nCALL_SETUP: test=0x55fb25b76109 name=\"OS_BinSemTimedWait_Impl\"\nCALL_TEST: test_fn=0x55fb25b76109 test_name=\"OS_BinSemTimedWait_Impl\" current_node=0x55fb5532cbd0\nAFTER_TEST: current_node=0x55fb5532cbd0 next_before=0x55fb5532cc40 next_after=0x55fb5532cc40 UtListMain=0x55fb5532c8a0 ExecutedCount=7\nAFTER_TEST: is_end_now=0\nCALL_TEARDOWN: test=0x55fb25b76573 name=\"OS_BinSemTimedWait_Impl\"\nLOOP_END: current=0x55fb5532cbd0 next_will=0x55fb5532cc40\nLOOP_TOP: UtListNode=0x55fb5532cc40 is_end=1\nLOOP_TOP: next_before=0x55fb5532c900\nCALL_SETUP: test=0x55fb25b763\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function UtTest_Run:\nUtListNode_t *UtList_GetNext(UtListNode_t *ListNode)\n{\n    return ListNode->Next;\n}\n...\nbool UtList_IsEnd(UtListNode_t *TagHead, UtListNode_t *ListNode)\n{\n    return (TagHead == ListNode);\n}\n...\nvoid *UtList_GetObject(UtListNode_t *ListNode)\n{\n    return ListNode->Data;\n}\n...\nUtListNode_t *UtList_GetHead(UtListHead_t *ListHead, uint32 Tag)\n{\n    if (Tag >= ListHead->NumberOfTags)\n    {\n        return NULL;\n    }\n    return &ListHead->Tags[Tag];\n}\n...\nvoid UtList_Merge(UtListNode_t *TagHead1, UtListNode_t *TagHead2)\n{\n    UtListNode_t *Tail1 = TagHead1->Prev;\n    UtListNode_t *Tail2 = TagHead2->Prev;\n\n    Tail1->Next    = TagHead2;\n    Tail2->Next    = TagHead1;\n    TagHead1->Prev = Tail2;\n    TagHead2->Prev = Tail1;\n}\n...\ntypedef struct UtListNodeTag\n{\n    struct UtListNodeTag *Next;\n    struct UtListNodeTag *Prev;\n    void *                Data;\n    uint32                DataSize;\n    uint32                Tag;\n} UtListNode_t\n...\ntypedef struct\n{\n    void (*Test)(void);\n    void (*Setup)(void);\n    void (*Teardown)(void);\n\n    /* Note - the name entry should be long enough to support a GroupName.TestName pattern,\n     * hence why it uses double the OS_MAX_API_NAME length */\n    char TestName[OS_MAX_API_NAME * 2];\n} UtTestDataBaseEntry_t\n...\nUtAssert_Global_t UtAssert_Global\n...\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n...\nvoid UtAssert_SetContext(UtAssert_CaseType_t Context)\n{\n    DefaultContext = Context;\n}\n...\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n...\nvoid UT_BSP_Lock(void)\n{\n    OS_BSP_Lock_Impl();\n}\n...\nvoid UT_BSP_Unlock(void)\n{\n    OS_BSP_Unlock_Impl();\n}\n...\nvoid UT_BSP_StartTestSegment(uint32 SegmentNumber, const char *SegmentName)\n{\n    char ReportBuffer[128];\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u %s\", (unsigned int)SegmentNumber, SegmentName);\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, ReportBuffer);\n}\n...\nvoid UtAssert_DoTestSegmentReport(const char *SegmentName, const UtAssert_TestCounter_t *TestCounters)\n{\n    char ReportBuffer[144];\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%-22s ABORT::%-4u  WARN::%-4u  FLOW::%-4u  DEBUG::%-4u  N/A::%-4u\",\n             \"\",\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_ABORT],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_WARN],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FLOW],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_DEBUG],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_NA]);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_INFO, ReportBuffer);\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%02u %-20s TOTAL::%-4u  PASS::%-4u  FAIL::%-4u  MIR::%-4u  TSF::%-4u  TTF::%-4u\",\n             (unsigned int)TestCounters->TestSegmentCount, SegmentName, (unsigned int)TestCounters->TotalTestCases,\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_PASS],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_MIR],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_END, ReportBuffer);\n}\n...\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 14.2 requires that the second clause only uses the loop counter (and optional loop-control flags) and not any object that may be modified by the loop body, and that the third clause only modifies the loop counter and must not use objects that may be modified by the body. In this for statement the loop counter is UtListNode, but the second clause uses UtListMain and UtListNode, and the third clause evaluates UtList_GetNext(UtListNode) (i.e. it dereferences ListNode->Next). The loop body invokes user-supplied function pointers (Setup/Test/Teardown) whose behaviour is part of the loop body; those functions have prototype void (*)(void) and therefore may legitimately modify the list structure or nodes (or even UtListNode/UtListMain) via global APIs. Because there is no static guarantee those functions cannot modify the objects used in the second or third clause, the loop is not provably well-formed under Rule 14.2 and thus the reported violation is correct."
}