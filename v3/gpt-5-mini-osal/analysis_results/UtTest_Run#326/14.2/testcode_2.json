{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call UtTestDataBaseEntry->Setup() is invoked from within the for loop body. That function pointer has external/user-provided code and may modify the list head (UtListMain) or nodes (e.g. insert/remove nodes, call UtList_Merge or UtList_Destroy, or change Next/Prev pointers) or even modify the loop counter (UtListNode) indirectly. Because the second clause uses UtListMain and UtListNode and the third clause advances UtListNode, if the Setup function can modify those objects the for loop no longer meets MISRA C 2023 Rule 14.2 (the loop condition/iteration expressions must not depend on objects that are modified by the loop body or by functions it calls).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3264.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "#include <stdio.h>\n\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *log = NULL;\n    unsigned long iter_count = 0UL;\n\n    /* Attempt to open log file for appending; if not possible, continue without logging */\n    log = fopen(\"/tmp/logs/3264.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"\\n=== UtTest_Run START ===\\n\");\n    }\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    if (log)\n    {\n        fprintf(log, \"After merge: UtListMain=%p\\n\", (void *)UtListMain);\n        /* Log the head next pointer (best-effort) */\n        fprintf(log, \"Head next (GetNext(UtListMain))=%p\\n\", (void *)UtList_GetNext(UtListMain));\n    }\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log iteration entry and the pointers/state before any user callbacks */\n            if (log)\n            {\n                fprintf(log, \"\\n-- Iteration %lu START --\\n\", iter_count);\n                fprintf(log, \"Current UtListMain=%p, UtListNode=%p\\n\", (void *)UtListMain, (void *)UtListNode);\n                fprintf(log, \"Object entry ptr=%p, TestName=%s\\n\",\n                        (void *)UtTestDataBaseEntry,\n                        (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                /* Best-effort record of the node that the loop's iteration expression will use next */\n                fprintf(log, \"Next node (GetNext(UtListNode)) BEFORE callbacks=%p\\n\", (void *)UtList_GetNext(UtListNode));\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (log)\n                {\n                    fprintf(log, \"Calling Setup() at %p\\n\", (void *)UtTestDataBaseEntry->Setup);\n                    fflush(log);\n                }\n\n                /* Call into user-provided Setup (may mutate list or nodes) */\n                UtTestDataBaseEntry->Setup();\n\n                if (log)\n                {\n                    /* Capture state immediately after Setup to detect modifications */\n                    fprintf(log, \"Returned from Setup()\\n\");\n                    fprintf(log, \"Post-Setup: UtListMain=%p, UtListNode=%p\\n\", (void *)UtListMain, (void *)UtListNode);\n                    fprintf(log, \"Post-Setup: GetNext(UtListNode)=%p\\n\", (void *)UtList_GetNext(UtListNode));\n                    fprintf(log, \"Post-Setup: GetNext(UtListMain)=%p\\n\", (void *)UtList_GetNext(UtListMain));\n                    fflush(log);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (log)\n                {\n                    fprintf(log, \"Calling Teardown() at %p\\n\", (void *)UtTestDataBaseEntry->Teardown);\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Teardown();\n                if (log)\n                {\n                    fprintf(log, \"Returned from Teardown()\\n\");\n                    fflush(log);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            if (log)\n            {\n                /* Record the pointer that the loop will advance to in its iteration expression */\n                fprintf(log, \"Iteration %lu END: Loop will advance to GetNext(current UtListNode)=%p\\n\",\n                        iter_count, (void *)UtList_GetNext(UtListNode));\n                fprintf(log, \"ExecutedCount=%u\\n\", UtAssert_Global.ExecutedCount);\n                fflush(log);\n            }\n\n            iter_count++;\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    if (log)\n    {\n        fprintf(log, \"After destroy: UtListMain=%p\\n\", (void *)UtListMain);\n        fprintf(log, \"Total iterations logged=%lu\\n\", iter_count);\n        fprintf(log, \"=== UtTest_Run END ===\\n\");\n        fclose(log);\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}