{
  "user_message": "An agent A claimed that the following UtTest_Run code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of UtTest_Run.\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call UtTestDataBaseEntry->Setup() is invoked from within the for loop body. That function pointer has external/user-provided code and may modify the list head (UtListMain) or nodes (e.g. insert/remove nodes, call UtList_Merge or UtList_Destroy, or change Next/Prev pointers) or even modify the loop counter (UtListNode) indirectly. Because the second clause uses UtListMain and UtListNode and the third clause advances UtListNode, if the Setup function can modify those objects the for loop no longer meets MISRA C 2023 Rule 14.2 (the loop condition/iteration expressions must not depend on objects that are modified by the loop body or by functions it calls).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n\n=== UtTest_Run START ===\nAfter merge: UtListMain=0x56082891b8a0\nHead next (GetNext(UtListMain))=0x56082891b8c0\n\n-- Iteration 0 START --\nCurrent UtListMain=0x56082891b8a0, UtListNode=0x56082891b930\nObject entry ptr=0x56082891b950, TestName=OS_VxWorks_BinSemAPI_Impl_Init\nNext node (GetNext(UtListNode)) BEFORE callbacks=0x56082891b9a0\nCalling Setup() at 0x56080a4c04ed\nReturned from Setup()\nPost-Setup: UtListMain=0x56082891b8a0, UtListNode=0x56082891b930\nPost-Setup: GetNext(UtListNode)=0x56082891b9a0\nPost-Setup: GetNext(UtListMain)=0x56082891b8c0\nCalling Teardown() at 0x56080a4c0573\nReturned from Teardown()\nIteration 0 END: Loop will advance to GetNext(current UtListNode)=0x56082891b9a0\nExecutedCount=1\n\n-- Iteration 1 START --\nCurrent UtListMain=0x56082891b8a0, UtListNode=0x56082891b9a0\nObject entry ptr=0x56082891b9c0, TestName=OS_BinSemCreate_Impl\nNext node (GetNext(UtListNode)) BEFORE callbacks=0x56082891ba10\nCalling Setup() at 0x56080a4c04ed\nReturned from Setup()\nPost-Setup: UtListMain=0x56082891b8a0, UtListNode=0x56082891b9a0\nPost-Setup: GetNext(UtListNode)=0x56082891ba10\nPost-Setup: GetNext(UtListMain)=0x56082891b8c0\nCalling Teardown() at 0x56080a4c0573\nReturned from Teardown()\nIteration 1 END: Loop will advance to GetNext(current UtListNode)=0x56082891ba10\nExecutedCount=2\n\n-- Iteration 2 START --\nCurrent UtListMain=0x56082891b8a0, UtListNode=0x56082891ba10\nObject entry ptr=0x56082891ba30, TestName=OS_BinSemDelete_Impl\nNext node (GetNext(UtListNode)) BEFORE callbacks=0x56082891ba80\nCalling Setup() at 0x56080a4c04ed\nReturned from Setup()\nPost-Setup: UtListMain=0x56082891b8a0, UtListNode=0x56082891ba10\nPost-Setup: GetNext(UtListNode)=0x56082891ba80\nPost-Setup: GetNext(UtListMain)=0x56082891b8c0\nCalling Teardown() at 0x56080a4c0573\nReturned from Teardown()\nIteration 2 END: Loop will advance to GetNext(current UtListNode)=0x56082891ba80\nExecutedCount=3\n\n-- Iteration 3 START --\nCurrent UtListMain=0x56082891b8a0, UtListNode=0x56082891ba80\nObject entry ptr=0x56082891baa0, TestName=OS_BinSemGive_Impl\nNext node (GetNext(UtListNode)) BEFORE callbacks=0x56082891baf0\nCalling Setup() at 0x56080a4c04ed\nReturned from Setup()\nPost-Setup: UtListMain=0x56082891b8a0, UtListNode=0x56082891ba80\nPost-Setup: GetNext(UtListNode)=0x56082891baf0\nPost-Setup: GetNext(UtListMain)=0x56082891b8c0\nCalling Teardown() at 0x56080a4c0573\nReturned from Teardown()\nIteration 3 END: Loop will advance to GetNext(current UtListNode)=0x56082891baf0\nExecutedCount=4\n\n-- Iteration 4 START --\nCurrent UtListMain=0x56082891b8a0, UtListNode=0x56082891baf0\nObject entry ptr=0x56082891bb10, TestName=OS_BinSemFlush_Impl\nNext node (GetNext(UtListNode)) BEFORE callbacks=0x56082891bb60\nCalling Setup() at 0x56080a4c04ed\nReturned from Setup()\nPost-Setup: UtListMain=0x56082891b8a0, UtListNode=0x56082891baf0\nPost-Setup: GetNext(UtListNode)=0x56082891bb60\nPost-Setup: GetNext(UtListMain)=0x56082891b8c0\nCalling Teardown() at 0x56080a4c0573\nReturned from Teardown()\nIteration 4 END: Loop will advance to GetNext(current UtListNode)=0x56082891bb60\nExecutedCount=5\n\n-- Iteration 5 START --\nCurrent UtListMain=0x56082891b8a0, UtListNode=0x56082891bb60\nObject entry ptr=0x56082891bb80, TestName=OS_BinSemTake_Impl\nNext node (GetNext(UtListNode)) BEFORE callbacks=0x56082891bbd0\nCalling Setup() at 0x56080a4c04ed\nReturned from Setup()\nPost-Setup: UtListMain=0x56082891b8a0, UtListNode=0x56082891bb60\nPost-Setup: GetNext(UtListNode)=0x56082891bbd0\nPost-Setup: GetNext(UtListMain)=0x56082891b8c0\nCalling Teardown() at 0x56080a4c0573\nReturned from Teardown()\nIteration 5 END: Loop will advance to GetNext(current UtListNode)=0x56082891bbd0\nExecutedCount=6\n\n-- Iteration 6 START --\nCurrent UtListMain=0x56082891b8a0, UtListNode=0x56082891bbd0\nObject entry ptr=0x56082891bbf0, TestName=OS_BinSemTimedWait_Impl\nNext node (GetNext(UtListNode)) BEFORE callbacks=0x56082891bc40\nCalling Setup() at 0x56080a4c04ed\nReturned from Setup()\nPost-Setup: UtListMain=0x56082891b8a0, UtListNode=0x56082891bbd0\nPost-Setup: GetNext(UtListNode)=0x56082891bc40\nPost-Setup: GetNext(UtListMain)=0x56082891b8c0\nCalling Teardown() at 0x56\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function UtTest_Run:\nUtListNode_t *UtList_GetNext(UtListNode_t *ListNode)\n{\n    return ListNode->Next;\n}\n...\nbool UtList_IsEnd(UtListNode_t *TagHead, UtListNode_t *ListNode)\n{\n    return (TagHead == ListNode);\n}\n...\nvoid *UtList_GetObject(UtListNode_t *ListNode)\n{\n    return ListNode->Data;\n}\n...\nUtListNode_t *UtList_GetHead(UtListHead_t *ListHead, uint32 Tag)\n{\n    if (Tag >= ListHead->NumberOfTags)\n    {\n        return NULL;\n    }\n    return &ListHead->Tags[Tag];\n}\n...\nvoid UtList_Merge(UtListNode_t *TagHead1, UtListNode_t *TagHead2)\n{\n    UtListNode_t *Tail1 = TagHead1->Prev;\n    UtListNode_t *Tail2 = TagHead2->Prev;\n\n    Tail1->Next    = TagHead2;\n    Tail2->Next    = TagHead1;\n    TagHead1->Prev = Tail2;\n    TagHead2->Prev = Tail1;\n}\n...\ntypedef struct UtListNodeTag\n{\n    struct UtListNodeTag *Next;\n    struct UtListNodeTag *Prev;\n    void *                Data;\n    uint32                DataSize;\n    uint32                Tag;\n} UtListNode_t\n...\ntypedef struct\n{\n    void (*Test)(void);\n    void (*Setup)(void);\n    void (*Teardown)(void);\n\n    /* Note - the name entry should be long enough to support a GroupName.TestName pattern,\n     * hence why it uses double the OS_MAX_API_NAME length */\n    char TestName[OS_MAX_API_NAME * 2];\n} UtTestDataBaseEntry_t\n...\nUtAssert_Global_t UtAssert_Global\n...\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n...\nvoid UtAssert_SetContext(UtAssert_CaseType_t Context)\n{\n    DefaultContext = Context;\n}\n...\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n...\nvoid UT_BSP_Lock(void)\n{\n    OS_BSP_Lock_Impl();\n}\n...\nvoid UT_BSP_Unlock(void)\n{\n    OS_BSP_Unlock_Impl();\n}\n...\nvoid UT_BSP_StartTestSegment(uint32 SegmentNumber, const char *SegmentName)\n{\n    char ReportBuffer[128];\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u %s\", (unsigned int)SegmentNumber, SegmentName);\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, ReportBuffer);\n}\n...\nvoid UtAssert_DoTestSegmentReport(const char *SegmentName, const UtAssert_TestCounter_t *TestCounters)\n{\n    char ReportBuffer[144];\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%-22s ABORT::%-4u  WARN::%-4u  FLOW::%-4u  DEBUG::%-4u  N/A::%-4u\",\n             \"\",\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_ABORT],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_WARN],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FLOW],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_DEBUG],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_NA]);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_INFO, ReportBuffer);\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%02u %-20s TOTAL::%-4u  PASS::%-4u  FAIL::%-4u  MIR::%-4u  TSF::%-4u  TTF::%-4u\",\n             (unsigned int)TestCounters->TestSegmentCount, SegmentName, (unsigned int)TestCounters->TotalTestCases,\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_PASS],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_MIR],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_END, ReportBuffer);\n}\n...\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The for loop is not provably well-formed per MISRA C 2023 Rule 14.2. The loop header is:\nfor (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode); UtListNode = UtList_GetNext(UtListNode))\nThe second clause (!UtList_IsEnd(UtListMain, UtListNode)) uses UtListMain (in addition to the loop counter UtListNode). MISRA Rule 14.2 requires the second clause to use only the loop counter and optionally loop control flags and not to use any other object that is modified by the loop body (including by functions called from the body). The loop body calls external function pointers (Setup/Test/Teardown) whose implementations are not constrained here and therefore may modify the list head (UtListMain) or node pointers. Because the behavior of called functions is part of the loop body, the second clause may depend on an object (UtListMain) that can be modified by the body, which violates Rule 14.2. \n\n(If there is a provable guarantee that the callbacks cannot modify the list or its nodes, the code could be considered compliant; but as presented there is no such guarantee, so the reported violation is correct.)"
}