{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf any UtTestDataBaseEntry->Setup (or Test/Teardown) function pointer is set to UtTest_Run (or to a function that eventually calls UtTest_Run), UtTest_Run will call itself indirectly. For example, registering UtTest_Run as a test's Setup: entry.Setup = UtTest_Run; then when UtTest_Run executes entry.Setup() it will recursively call UtTest_Run, violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3266.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *log = NULL;\n\n    /* Open log file for appending probe information about control flow/state */\n    log = fopen(\"/tmp/logs/3266.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"\\n===== Entering UtTest_Run() =====\\n\");\n        fflush(log);\n    }\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    if (log)\n    {\n        fprintf(log, \"UtListMain initial head=%p\\n\", (void *)UtListMain);\n        fflush(log);\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    if (log)\n    {\n        fprintf(log, \"After merge UtListMain=%p DataBasePtr=%p\\n\",\n                (void *)UtListMain, (void *)UtAssert_Global.DataBasePtr);\n        fflush(log);\n    }\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        if (log)\n        {\n            fprintf(log, \"Iterating node=%p\\n\", (void *)UtListNode);\n            fflush(log);\n        }\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            if (log)\n            {\n                fprintf(log, \"Found entry=%p Name=%s Setup=%p Test=%p Teardown=%p\\n\",\n                        (void *)UtTestDataBaseEntry,\n                        (UtTestDataBaseEntry->TestName) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                        (void *)UtTestDataBaseEntry->Setup,\n                        (void *)UtTestDataBaseEntry->Test,\n                        (void *)UtTestDataBaseEntry->Teardown);\n                /* Detect direct self-call registration (address-equality to UtTest_Run) */\n                fprintf(log, \"UtTest_Run addr=%p\\n\", (void *)UtTest_Run);\n                if (UtTestDataBaseEntry->Setup == UtTest_Run)\n                {\n                    fprintf(log, \"NOTE: Setup pointer equals UtTest_Run (direct recursive registration)\\n\");\n                }\n                if (UtTestDataBaseEntry->Test == UtTest_Run)\n                {\n                    fprintf(log, \"NOTE: Test pointer equals UtTest_Run (direct recursive registration)\\n\");\n                }\n                if (UtTestDataBaseEntry->Teardown == UtTest_Run)\n                {\n                    fprintf(log, \"NOTE: Teardown pointer equals UtTest_Run (direct recursive registration)\\n\");\n                }\n                fflush(log);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (log)\n                {\n                    fprintf(log, \"About to call Setup() at %p for entry %p\\n\",\n                            (void *)UtTestDataBaseEntry->Setup, (void *)UtTestDataBaseEntry);\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Setup();\n                if (log)\n                {\n                    fprintf(log, \"Returned from Setup() at %p for entry %p\\n\",\n                            (void *)UtTestDataBaseEntry->Setup, (void *)UtTestDataBaseEntry);\n                    fflush(log);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (log)\n                {\n                    fprintf(log, \"About to call Test() at %p for entry %p\\n\",\n                            (void *)UtTestDataBaseEntry->Test, (void *)UtTestDataBaseEntry);\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n                if (log)\n                {\n                    fprintf(log, \"Returned from Test() at %p for entry %p; ExecutedCount=%u\\n\",\n                            (void *)UtTestDataBaseEntry->Test, (void *)UtTestDataBaseEntry,\n                            (unsigned int)UtAssert_Global.ExecutedCount);\n                    fflush(log);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (log)\n                {\n                    fprintf(log, \"About to call Teardown() at %p for entry %p\\n\",\n                            (void *)UtTestDataBaseEntry->Teardown, (void *)UtTestDataBaseEntry);\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Teardown();\n                if (log)\n                {\n                    fprintf(log, \"Returned from Teardown() at %p for entry %p\\n\",\n                            (void *)UtTestDataBaseEntry->Teardown, (void *)UtTestDataBaseEntry);\n                    fflush(log);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            if (log)\n            {\n                fprintf(log, \"Completed processing entry=%p Name=%s\\n\",\n                        (void *)UtTestDataBaseEntry,\n                        (UtTestDataBaseEntry->TestName) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"UtTestDataBaseEntry is NULL for node=%p\\n\", (void *)UtListNode);\n                fflush(log);\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n    if (log)\n    {\n        fprintf(log, \"About to destroy DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fflush(log);\n    }\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    if (log)\n    {\n        fprintf(log, \"Calling UT_BSP_EndTest with counters=%p\\n\", (void *)UtAssert_GetCounters());\n        fprintf(log, \"===== Exiting UtTest_Run() =====\\n\");\n        fclose(log);\n        log = NULL;\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}