{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes VirtualPath pointing to an object smaller than OS_MAX_PATH_LEN (for example a char array of length 10 that does not contain a '\\0' within the first OS_MAX_PATH_LEN bytes), OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) may read up to OS_MAX_PATH_LEN bytes and thus access memory beyond the bounds of that object, causing undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1709.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - writes to /tmp/logs/1709.txt */\nstatic void os_rename_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1709.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and pointer values only (do not dereference old/new here) */\n    os_rename_log(\"OS_rename ENTRY: old=%p new=%p\", (const void *)old, (const void *)new);\n\n    return_code = OS_TranslatePath(old, old_path);\n    os_rename_log(\"OS_TranslatePath(old) returned %d; old_path='%s'\", return_code, old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        os_rename_log(\"OS_TranslatePath(new) returned %d; new_path='%s'\", return_code, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        os_rename_log(\"OS_FileRename_Impl(old_path='%s', new_path='%s') returned %d\", old_path, new_path, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_rename_log(\"OS_rename: rename success, iterating open streams to update names (old ptr=%p)\", (const void *)old);\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log stream metadata before comparison */\n            os_rename_log(\"Stream token=%u socket_domain=%d stream_name='%s'\", (unsigned)iter.token, (int)stream->socket_domain, stream->stream_name);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID)\n            {\n                /* Perform the same strcmp as original code but capture result to log it. */\n                int cmp_result = strcmp(stream->stream_name, old);\n                os_rename_log(\"strcmp(stream->stream_name, old) result=%d (stream_ptr=%p old_ptr=%p)\", cmp_result, (const void *)stream->stream_name, (const void *)old);\n\n                if (cmp_result == 0)\n                {\n                    os_rename_log(\"Match found for token=%u; performing strncpy to update stream_name (new ptr=%p)\", (unsigned)iter.token, (const void *)new);\n                    strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                    stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n                    os_rename_log(\"Updated stream token=%u name='%s'\", (unsigned)iter.token, stream->stream_name);\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        os_rename_log(\"OS_rename: finished iterating streams\");\n    }\n\n    os_rename_log(\"OS_rename EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}