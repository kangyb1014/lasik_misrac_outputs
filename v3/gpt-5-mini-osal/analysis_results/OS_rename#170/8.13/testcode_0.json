{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe structure contains a plain void *arg which is used to pass a const char * without modification (see OS_TranslatePath: OS_ObjectIdGetBySearch(..., (void *)VirtualPath, &token) \u2014 a const is cast away). This indicates arg should be const-qualified (e.g. const void *arg) so callers can pass const pointers without casts. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1703.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/1703.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1703.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) == NULL)\n    {\n        fprintf(f, \"[unknown-time] \");\n    }\n    else\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"[%s] \", timestr);\n        }\n        else\n        {\n            fprintf(f, \"[time-format-failed] \");\n        }\n    }\n\n    /* Formatted message */\n    va_list ap;\n    va_start(ap, fmt);\n    char buf[512];\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"%s\\n\", buf);\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and incoming pointers/strings */\n    log_probe(\"OS_rename ENTRY: old_ptr=%p old_str='%s' new_ptr=%p new_str='%s'\",\n              (const void *)old, (old != NULL ? old : \"(null)\"), (const void *)new,\n              (new != NULL ? new : \"(null)\"));\n\n    return_code = OS_TranslatePath(old, old_path);\n    log_probe(\"After OS_TranslatePath(old): return_code=%d old_path='%s'\",\n              return_code, (return_code == OS_SUCCESS ? old_path : \"(invalid)\"));\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        log_probe(\"After OS_TranslatePath(new): return_code=%d new_path='%s'\",\n                  return_code, (return_code == OS_SUCCESS ? new_path : \"(invalid)\"));\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_probe(\"Calling OS_FileRename_Impl with old_path='%s' new_path='%s'\",\n                  old_path, new_path);\n\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        log_probe(\"OS_FileRename_Impl returned %d\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_probe(\"File rename successful; iterating object table to update stream names\");\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log current iterator token and stream state */\n            if (stream != NULL)\n            {\n                log_probe(\"Iter token=%u stream_ptr=%p socket_domain=%d stream_name='%s'\",\n                          (unsigned int)iter.token, (const void *)stream,\n                          (int)stream->socket_domain,\n                          (stream->stream_name != NULL ? stream->stream_name : \"(null)\"));\n\n                if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n                {\n                    log_probe(\"Match found: stream->stream_name matches old ('%s'). Renaming to '%s'\",\n                              old, new);\n\n                    strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                    stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                    log_probe(\"After rename: stream_ptr=%p new_stream_name='%s'\",\n                              (const void *)stream, stream->stream_name);\n                }\n            }\n            else\n            {\n                log_probe(\"Iter token=%u returned NULL stream pointer\", (unsigned int)iter.token);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        log_probe(\"Finished iterating object table\");\n    }\n\n    log_probe(\"OS_rename EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n"
}