{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *fp = NULL;\n    va_list ap;\n\n    /* Ensure directory exists (best-effort). Ignore errors if unable to create. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    fp = fopen(\"/tmp/logs/1703.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If opening fails, best-effort write to stderr to avoid silent drop */\n        fp = stderr;\n    }\n\n    /* timestamp */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(fp, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    if (fp != stderr)\n    {\n        fclose(fp);\n    }\n}\nstruct OS_object_iter;\nOS_stream_internal_record_t *OS_OBJECT_TABLE_GET(void *table, int token);\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and pointer/state information */\n    log_probe(\"Entered OS_rename: old=%p \\\"%s\\\" new=%p \\\"%s\\\"\\n\",\n              (const void *)old, (old != NULL) ? old : \"(null)\",\n              (const void *)new, (new != NULL) ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    log_probe(\"OS_TranslatePath(old) returned %d, old_path=%p \\\"%s\\\"\\n\",\n              return_code, (void *)old_path, old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        log_probe(\"OS_TranslatePath(new) returned %d, new_path=%p \\\"%s\\\"\\n\",\n                  return_code, (void *)new_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_probe(\"Calling OS_FileRename_Impl with old_path=%p \\\"%s\\\" new_path=%p \\\"%s\\\"\\n\",\n                  (void *)old_path, old_path, (void *)new_path, new_path);\n\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        log_probe(\"OS_FileRename_Impl returned %d\\n\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_probe(\"Rename succeeded, beginning object ID iteration\\n\");\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(NULL, iter.token);\n\n            /* Log details about the stream object and the comparison */\n            log_probe(\"Iterator token=%d stream_ptr=%p socket_domain=%d stream_name_ptr=%p \\\"%s\\\"\\n\",\n                      iter.token, (void *)stream,\n                      (stream != NULL) ? stream->socket_domain : -1,\n                      (stream != NULL) ? (void *)stream->stream_name : (void *)0,\n                      (stream != NULL) ? stream->stream_name : \"(null)\");\n\n            if (stream != NULL && stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                log_probe(\"Match found: stream->stream_name == old. About to strncpy to update name.\\n\");\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                log_probe(\"Updated stream name at %p to \\\"%s\\\"\\n\",\n                          (void *)stream->stream_name, stream->stream_name);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        log_probe(\"Object iterator destroyed\\n\");\n    }\n\n    log_probe(\"Exiting OS_rename with return_code=%d\\n\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpbcw0qpg7/src/src/os/shared/src/osapi-file.c:51:\n/tmp/tmpbcw0qpg7/src/src/os/shared/inc/os-shared-idmap.h:100:40: error: expected identifier or '(' before '&' token\n  100 | #define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n      |                                        ^\n/tmp/tmpbcw0qpg7/src/src/os/shared/src/osapi-file.c:395:30: note: in expansion of macro 'OS_OBJECT_TABLE_GET'\n  395 | OS_stream_internal_record_t *OS_OBJECT_TABLE_GET(void *table, int token);\n      |                              ^~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_rename as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void log_probe(const char *fmt, ...)\n{\n    FILE *fp = NULL;\n    va_list ap;\n\n    /* Ensure directory exists (best-effort). Ignore errors if unable to create. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    fp = fopen(\"/tmp/logs/1703.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If opening fails, best-effort write to stderr to avoid silent drop */\n        fp = stderr;\n    }\n\n    /* timestamp */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(fp, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    if (fp != stderr)\n    {\n        fclose(fp);\n    }\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and pointer/state information */\n    log_probe(\"Entered OS_rename: old=%p \\\"%s\\\" new=%p \\\"%s\\\"\\n\",\n              (const void *)old, (old != NULL) ? old : \"(null)\",\n              (const void *)new, (new != NULL) ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    log_probe(\"OS_TranslatePath(old) returned %d, old_path=%p \\\"%s\\\"\\n\",\n              return_code, (void *)old_path, old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        log_probe(\"OS_TranslatePath(new) returned %d, new_path=%p \\\"%s\\\"\\n\",\n                  return_code, (void *)new_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_probe(\"Calling OS_FileRename_Impl with old_path=%p \\\"%s\\\" new_path=%p \\\"%s\\\"\\n\",\n                  (void *)old_path, old_path, (void *)new_path, new_path);\n\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        log_probe(\"OS_FileRename_Impl returned %d\\n\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_probe(\"Rename succeeded, beginning object ID iteration\\n\");\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(NULL, iter.token);\n\n            /* Log details about the stream object and the comparison */\n            log_probe(\"Iterator token=%d stream_ptr=%p socket_domain=%d stream_name_ptr=%p \\\"%s\\\"\\n\",\n                      iter.token, (void *)stream,\n                      (stream != NULL) ? stream->socket_domain : -1,\n                      (stream != NULL) ? (void *)stream->stream_name : (void *)0,\n                      (stream != NULL) ? stream->stream_name : \"(null)\");\n\n            if (stream != NULL && stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                log_probe(\"Match found: stream->stream_name == old. About to strncpy to update name.\\n\");\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                log_probe(\"Updated stream name at %p to \\\"%s\\\"\\n\",\n                          (void *)stream->stream_name, stream->stream_name);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        log_probe(\"Object iterator destroyed\\n\");\n    }\n\n    log_probe(\"Exiting OS_rename with return_code=%d\\n\", return_code);\n    return return_code;\n}\n",
  "explanation": "The compile error was caused by a conflicting forward declaration using the name OS_OBJECT_TABLE_GET, which is a macro in the included headers. I removed the prototype/forward-declaration lines that attempted to declare OS_OBJECT_TABLE_GET as a function. The code now relies on the macro provided by the headers as intended. No other logic changes were made."
}