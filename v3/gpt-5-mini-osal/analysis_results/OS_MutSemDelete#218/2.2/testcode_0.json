{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(token, 0, sizeof(*token)) is executed at the start of OS_ObjectIdTransactionInit but all token members that are subsequently read are explicitly assigned before use (token->lock_mode, token->obj_type, token->obj_idx and later token->obj_id). No observable behavior depends on the initial zeroing of the remaining bytes of the automatic token object in the current code paths, so removing the memset would not change program behaviour. Therefore this memset constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2182.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete:\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/*\n * Probe helpers for logging the token state and control flow to /tmp/logs/2182.txt\n * These helpers are lightweight and do not change the logic of OS_MutSemDelete.\n */\nstatic void os_2182_ensure_log_dir(void)\n{\n    /* best-effort create directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void os_2182_log_token_state(const char *stage, const void *token_ptr, size_t token_size, int32_t rc)\n{\n    FILE *f;\n    const unsigned char *p = (const unsigned char *)token_ptr;\n    size_t i;\n\n    os_2182_ensure_log_dir();\n    f = fopen(\"/tmp/logs/2182.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_MutSemDelete probe: %s ---\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \" return_code=%d\\n\", (int)rc);\n    fprintf(f, \" token_addr=%p size=%zu\\n\", token_ptr, token_size);\n\n    if (token_ptr != NULL && token_size > 0)\n    {\n        fprintf(f, \" token_bytes=\");\n        for (i = 0; i < token_size; ++i)\n        {\n            fprintf(f, \"%02X\", (unsigned int)p[i]);\n        }\n        fprintf(f, \"\\n\");\n\n        /* check whether all bytes are zero (evidence of memset) */\n        int all_zero = 1;\n        for (i = 0; i < token_size; ++i)\n        {\n            if (p[i] != 0)\n            {\n                all_zero = 0;\n                break;\n            }\n        }\n        fprintf(f, \" all_bytes_zero=%d\\n\", all_zero);\n    }\n\n    fprintf(f, \"-----------------------------\\n\");\n    fclose(f);\n}\n\nstatic void os_2182_log_simple(const char *stage, osal_id_t sem_id, int32_t rc)\n{\n    FILE *f;\n    os_2182_ensure_log_dir();\n    f = fopen(\"/tmp/logs/2182.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"OS_MutSemDelete: %s sem_id=%lu return_code=%d\\n\", stage ? stage : \"(null)\", (unsigned long)sem_id, (int)rc);\n    fclose(f);\n}\n\n/*\n * Modified OS_MutSemDelete with probes inserted. The original logic is preserved.\n */\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Call into the lookup/transaction init (this is where a memset may occur).\n     * After the call succeeds we safely inspect the token contents and log them. */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token state immediately after successful GetById (this will show if the token\n         * memory is all zeros, which is evidence the memset inside OS_ObjectIdTransactionInit executed). */\n        os_2182_log_token_state(\"after_GetById\", &token, sizeof(token), return_code);\n\n        /* Preserve original behavior: call the implementation-specific delete. */\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Log token state after Impl call to capture any changes made by the implementation. */\n        os_2182_log_token_state(\"after_MutSemDelete_Impl\", &token, sizeof(token), return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Final log after finalize to capture final state and final return code. */\n        os_2182_log_token_state(\"after_FinalizeDelete\", &token, sizeof(token), return_code);\n    }\n    else\n    {\n        /* Log the failed lookup path so control flow is evident. */\n        os_2182_log_simple(\"GetById_failed\", sem_id, return_code);\n    }\n\n    return return_code;\n}\n"
}