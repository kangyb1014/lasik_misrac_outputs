{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the memset can write out of bounds if the caller passes an invalid pointer. OS_ObjectIdTransactionInit does memset(token, 0, sizeof(*token)) without validating that token is non-NULL and points to an object at least sizeof(OS_object_token_t). If token == NULL (or points to a smaller object / wrong type), this will cause writes beyond the bounds of the referenced object (undefined behavior). Although the provided call path (caller uses a local OS_object_token_t and passes &token) is safe, the function itself does not enforce that precondition, so the fragment can violate MISRA C 2023 Rule 21.17 in general use.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete:\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Probe helper: append logs to /tmp/logs/2189.txt\n * This helper is deliberately conservative: it logs only addresses,\n * sizes and return codes; it does not attempt to dereference\n * or inspect potentially invalid pointers. */\nstatic void OS_Probe_Log_State(const char *stage, uintptr_t sem_id_val, const void *token_ptr, size_t token_size, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the stage, semaphore id (as hex), the token pointer, token size (0 if unknown), and the return code */\n        fprintf(f, \"[%s] sem_id=0x%\" PRIxPTR \" token_ptr=%p token_size=%zu return_code=%d\\n\",\n                stage, sem_id_val, token_ptr, token_size, return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry to the function. token is a local object; log its address and size so that\n     * an external reviewer can verify that callers which pass &token supply a valid object\n     * of at least this size. */\n    OS_Probe_Log_State(\"ENTRY\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), 0);\n\n    /* Before calling OS_ObjectIdGetById: record state */\n    OS_Probe_Log_State(\"BEFORE_OS_ObjectIdGetById\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* After OS_ObjectIdGetById: capture the return code and token address/size */\n    OS_Probe_Log_State(\"AFTER_OS_ObjectIdGetById\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation routine that may call memset on the token pointer */\n        OS_Probe_Log_State(\"BEFORE_OS_MutSemDelete_Impl\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Log result from implementation */\n        OS_Probe_Log_State(\"AFTER_OS_MutSemDelete_Impl\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n        /* Complete the operation via the common routine */\n        OS_Probe_Log_State(\"BEFORE_OS_ObjectIdFinalizeDelete\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_Probe_Log_State(\"AFTER_OS_ObjectIdFinalizeDelete\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n    }\n    else\n    {\n        /* Log failure path */\n        OS_Probe_Log_State(\"EXIT_ERROR\", (uintptr_t)sem_id, NULL, 0, return_code);\n    }\n\n    /* Final exit log */\n    OS_Probe_Log_State(\"EXIT\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n    return return_code;\n}\n"
}