{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_Probe_Log_State(const char *stage, uintptr_t sem_id_val, const void *token_ptr, size_t token_size, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the stage, semaphore id (as hex), the token pointer, token size (0 if unknown), and the return code */\n        fprintf(f, \"[%s] sem_id=0x%\" PRIxPTR \" token_ptr=%p token_size=%zu return_code=%d\\n\",\n                stage, sem_id_val, token_ptr, token_size, return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry to the function. token is a local object; log its address and size so that\n     * an external reviewer can verify that callers which pass &token supply a valid object\n     * of at least this size. */\n    OS_Probe_Log_State(\"ENTRY\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), 0);\n\n    /* Before calling OS_ObjectIdGetById: record state */\n    OS_Probe_Log_State(\"BEFORE_OS_ObjectIdGetById\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* After OS_ObjectIdGetById: capture the return code and token address/size */\n    OS_Probe_Log_State(\"AFTER_OS_ObjectIdGetById\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation routine that may call memset on the token pointer */\n        OS_Probe_Log_State(\"BEFORE_OS_MutSemDelete_Impl\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Log result from implementation */\n        OS_Probe_Log_State(\"AFTER_OS_MutSemDelete_Impl\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n        /* Complete the operation via the common routine */\n        OS_Probe_Log_State(\"BEFORE_OS_ObjectIdFinalizeDelete\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_Probe_Log_State(\"AFTER_OS_ObjectIdFinalizeDelete\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n    }\n    else\n    {\n        /* Log failure path */\n        OS_Probe_Log_State(\"EXIT_ERROR\", (uintptr_t)sem_id, NULL, 0, return_code);\n    }\n\n    /* Final exit log */\n    OS_Probe_Log_State(\"EXIT\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpu7cv7zxo/src/src/os/shared/src/osapi-mutex.c:1:\n/tmp/tmpu7cv7zxo/src/src/os/shared/src/osapi-mutex.c: In function 'OS_Probe_Log_State':\n/tmp/tmpu7cv7zxo/src/src/os/shared/src/osapi-mutex.c:138:38: error: expected ')' before 'PRIxPTR'\n  138 |         fprintf(f, \"[%s] sem_id=0x%\" PRIxPTR \" token_ptr=%p token_size=%zu return_code=%d\\n\",\n      |                                      ^~~~~~~\n/tmp/tmpu7cv7zxo/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpu7cv7zxo/src/src/os/shared/src/osapi-mutex.c:55:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   54 | #include \"osapi-task.h\"\n  +++ |+#include <inttypes.h>\n   55 | \nIn file included from /tmp/tmpu7cv7zxo/src/src/os/shared/src/osapi-mutex.c:1:\n/tmp/tmpu7cv7zxo/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpu7cv7zxo/src/src/os/shared/src/osapi-mutex.c:138:9: note: in expansion of macro 'fprintf'\n  138 |         fprintf(f, \"[%s] sem_id=0x%\" PRIxPTR \" token_ptr=%p token_size=%zu return_code=%d\\n\",\n      |         ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/__/__/os/shared/src/osapi-mutex.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3911: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include \"osapi-task.h\"\n#include <inttypes.h>\n\nstatic void OS_Probe_Log_State(const char *stage, uintptr_t sem_id_val, const void *token_ptr, size_t token_size, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2189.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the stage, semaphore id (as hex), the token pointer, token size (0 if unknown), and the return code */\n        fprintf(f, \"[%s] sem_id=0x%\" PRIxPTR \" token_ptr=%p token_size=%zu return_code=%d\\n\",\n                stage, sem_id_val, token_ptr, token_size, return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry to the function. token is a local object; log its address and size so that\n     * an external reviewer can verify that callers which pass &token supply a valid object\n     * of at least this size. */\n    OS_Probe_Log_State(\"ENTRY\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), 0);\n\n    /* Before calling OS_ObjectIdGetById: record state */\n    OS_Probe_Log_State(\"BEFORE_OS_ObjectIdGetById\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* After OS_ObjectIdGetById: capture the return code and token address/size */\n    OS_Probe_Log_State(\"AFTER_OS_ObjectIdGetById\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation routine that may call memset on the token pointer */\n        OS_Probe_Log_State(\"BEFORE_OS_MutSemDelete_Impl\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Log result from implementation */\n        OS_Probe_Log_State(\"AFTER_OS_MutSemDelete_Impl\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n        /* Complete the operation via the common routine */\n        OS_Probe_Log_State(\"BEFORE_OS_ObjectIdFinalizeDelete\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_Probe_Log_State(\"AFTER_OS_ObjectIdFinalizeDelete\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n    }\n    else\n    {\n        /* Log failure path */\n        OS_Probe_Log_State(\"EXIT_ERROR\", (uintptr_t)sem_id, NULL, 0, return_code);\n    }\n\n    /* Final exit log */\n    OS_Probe_Log_State(\"EXIT\", (uintptr_t)sem_id, (const void *)&token, sizeof(token), return_code);\n\n    return return_code;\n}\n",
  "explanation": "I added #include <inttypes.h> to ensure the PRIxPTR macro is defined. This fixes the format-string expansion error in fprintf while preserving the original logic and structure of OS_MutSemDelete and OS_Probe_Log_State."
}