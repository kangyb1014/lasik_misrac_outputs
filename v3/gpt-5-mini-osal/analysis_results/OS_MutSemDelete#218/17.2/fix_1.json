{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_DebugLog_Probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2186.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nint32_t OS_MutSemDelete(uintptr_t sem_id)\n{\n    /* Note: types mirrored from original snippet but using portable integer types for logging. */\n    void *token; /* OS_object_token_t token; (opaque here) */\n    int32_t return_code;\n\n    OS_DebugLog_Probe(\"ENTER: OS_MutSemDelete(sem_id=0x%08\" PRIxPTR \")\", (uintptr_t)sem_id);\n\n    return_code = OS_ObjectIdGetById(/* OS_LOCK_MODE_EXCLUSIVE */ 1, /* LOCAL_OBJID_TYPE */ 1, sem_id, &token);\n    OS_DebugLog_Probe(\"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\", return_code, (void *)&token);\n\n    if (return_code == 0) /* OS_SUCCESS == 0 (assumed) */\n    {\n        OS_DebugLog_Probe(\"Calling OS_MutSemDelete_Impl: impl_addr=%p\", (void *)OS_MutSemDelete_Impl);\n        return_code = OS_MutSemDelete_Impl(&token);\n        OS_DebugLog_Probe(\"Returned from OS_MutSemDelete_Impl: return_code=%d\", return_code);\n\n        /* Complete the operation via the common routine */\n        OS_DebugLog_Probe(\"Calling OS_ObjectIdFinalizeDelete: finalize_addr=%p\", (void *)OS_ObjectIdFinalizeDelete);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_DebugLog_Probe(\"Returned from OS_ObjectIdFinalizeDelete: final_return_code=%d\", return_code);\n    }\n    else\n    {\n        OS_DebugLog_Probe(\"Skipping delete implementation since ObjectIdGetById returned %d\", return_code);\n    }\n\n    OS_DebugLog_Probe(\"EXIT: OS_MutSemDelete -> %d\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp4815qi1j/src/src/os/shared/src/osapi-mutex.c:149:9: error: conflicting types for 'OS_MutSemDelete'; have 'int32_t(uintptr_t)' {aka 'int(long unsigned int)'}\n  149 | int32_t OS_MutSemDelete(uintptr_t sem_id)\n      |         ^~~~~~~~~~~~~~~\nIn file included from /tmp/tmp4815qi1j/src/src/os/shared/inc/os-shared-mutex.h:29,\n                 from /tmp/tmp4815qi1j/src/src/os/shared/src/osapi-mutex.c:49:\n/tmp/tmp4815qi1j/src/src/os/inc/osapi-mutex.h:112:7: note: previous declaration of 'OS_MutSemDelete' with type 'int32(osal_id_t)' {aka 'int(unsigned int)'}\n  112 | int32 OS_MutSemDelete(osal_id_t sem_id);\n      |       ^~~~~~~~~~~~~~~\n/tmp/tmp4815qi1j/src/src/os/shared/src/osapi-mutex.c: In function 'OS_MutSemDelete':\n/tmp/tmp4815qi1j/src/src/os/shared/src/osapi-mutex.c:155:60: error: expected ')' before 'PRIxPTR'\n  155 |     OS_DebugLog_Probe(\"ENTER: OS_MutSemDelete(sem_id=0x%08\" PRIxPTR \")\", (uintptr_t)sem_id);\n      |                      ~                                     ^~~~~~~~\n      |                                                            )\n/tmp/tmp4815qi1j/src/src/os/shared/src/osapi-mutex.c:55:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   54 | #include \"osapi-task.h\"\n  +++ |+#include <inttypes.h>\n   55 | \ngmake[2]: *** [CMakeFiles/osal.dir/build.make:244: CMakeFiles/osal.dir/src/os/shared/src/osapi-mutex.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void OS_DebugLog_Probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2186.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    /* Note: types mirrored from original snippet but using portable integer types for logging. */\n    void *token; /* OS_object_token_t token; (opaque here) */\n    int32 return_code;\n\n    /* Use %u for osal_id_t (typically an unsigned int) to match the prototype in the header */\n    OS_DebugLog_Probe(\"ENTER: OS_MutSemDelete(sem_id=%u)\", (unsigned)sem_id);\n\n    return_code = OS_ObjectIdGetById(/* OS_LOCK_MODE_EXCLUSIVE */ 1, /* LOCAL_OBJID_TYPE */ 1, sem_id, &token);\n    OS_DebugLog_Probe(\"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\", return_code, (void *)&token);\n\n    if (return_code == 0) /* OS_SUCCESS == 0 (assumed) */\n    {\n        OS_DebugLog_Probe(\"Calling OS_MutSemDelete_Impl: impl_addr=%p\", (void *)OS_MutSemDelete_Impl);\n        return_code = OS_MutSemDelete_Impl(&token);\n        OS_DebugLog_Probe(\"Returned from OS_MutSemDelete_Impl: return_code=%d\", return_code);\n\n        /* Complete the operation via the common routine */\n        OS_DebugLog_Probe(\"Calling OS_ObjectIdFinalizeDelete: finalize_addr=%p\", (void *)OS_ObjectIdFinalizeDelete);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_DebugLog_Probe(\"Returned from OS_ObjectIdFinalizeDelete: final_return_code=%d\", return_code);\n    }\n    else\n    {\n        OS_DebugLog_Probe(\"Skipping delete implementation since ObjectIdGetById returned %d\", return_code);\n    }\n\n    OS_DebugLog_Probe(\"EXIT: OS_MutSemDelete -> %d\", return_code);\n    return return_code;\n}\n",
  "explanation": "Two compilation issues were fixed:\n\n1. Signature mismatch: The function prototype in the included header declares OS_MutSemDelete as int32 OS_MutSemDelete(osal_id_t). I changed the definition to match that exact signature (int32 and osal_id_t) to remove the conflicting-types error.\n\n2. Format-specifier error: The original used PRIxPTR in the debug printf which required <inttypes.h> and a uintptr_t cast. To avoid the missing-include error and keep the code compatible with the header's osal_id_t, I replaced the format with %u and cast the id to (unsigned). This preserves the logging intent while preventing the PRIxPTR-related compile error.\n\nI left the logic of OS_MutSemDelete intact (calls to OS_ObjectIdGetById, OS_MutSemDelete_Impl, and OS_ObjectIdFinalizeDelete and the debug logging) and added standard includes for stdio.h and stdarg.h used by the local logging helper."
}