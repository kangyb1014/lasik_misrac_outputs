{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleSetMode_Impl:\n```c\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided function. Specifically:\n- No GCC/Clang/MSC keywords or tokens such as __attribute__, __asm, __extension__, __builtin_*, __typeof__, __thread, __stdcall, etc.\n- No statement-expressions ({ ...; }) used as expressions, no inline assembly, no named or anonymous bit-fields that rely on implementation-defined layout, no variable length arrays, and no compiler-specific pragmas.\n- All operators and constructs used (bitwise &, comparisons, function calls, fixed-size array char param[32], snprintf, sizeof, struct member access) are standard C.\n- The identifier uint32 appears to be a project typedef rather than a compiler extension; typedefs are not language extensions themselves. If uint32 were actually a compiler-provided nonstandard type, that would need verification, but nothing in this snippet explicitly invokes a documented compiler extension.\n- Macros and function calls (OS_BSP_CONSOLEMODE_TO_ANSICOLOR, OS_BSP_ExecTput) are normal preprocessor and call-site usage; any extension inside those macros/functions is outside the shown fragment and should be checked in their definitions if needed.\n\nTherefore there are no code fragments in this function that warrant investigation under MISRA C 2023 Rule 1.2 (language extensions). If you want, I can also inspect related headers/definitions (typedef of uint32, the macro definitions, or implementations of called functions) to ensure they do not rely on compiler extensions."
}