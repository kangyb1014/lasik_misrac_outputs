{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_BSP_ExecTput is declared with a non-const parameter for the capability name (for example: void OS_BSP_ExecTput(char *capname, char *param);), then passing the string literal \"rmso\" binds a non-const pointer to an object that should be treated as const. This is a violation of MISRA C 2023 Rule 8.13. The correct declaration should be e.g. void OS_BSP_ExecTput(const char *capname, const char *param);\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleSetMode_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleSetMode_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleSetMode_Impl:\n```c\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleSetMode_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper. Appends control flow and state information to /tmp/logs/53.txt */\nstatic void OS_BSP_LogConsoleEvent(const char *stage, uint32_t ModeBits, const char *capname, const char *param)\n{\n    FILE *f = fopen(\"/tmp/logs/53.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"Stage=%s ModeBits=0x%08lX capname=%s param=%s\\n\",\n                stage,\n                (unsigned long)ModeBits,\n                (capname != NULL) ? capname : \"(null)\",\n                (param != NULL) ? param : \"(null)\");\n        fclose(f);\n    }\n}\n\n/* Modified implementation with probes. Original logic preserved. */\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    OS_BSP_LogConsoleEvent(\"enter\", ModeBits, NULL, NULL);\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        OS_BSP_LogConsoleEvent(\"enable_term_control_true\", ModeBits, NULL, NULL);\n\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_LogConsoleEvent(\"call_sgr0\", ModeBits, \"sgr0\", NULL);\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_LogConsoleEvent(\"call_rmso\", ModeBits, \"rmso\", NULL);\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_LogConsoleEvent(\"call_smso\", ModeBits, \"smso\", NULL);\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            /* compute ANSI color parameter and call setaf */\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_LogConsoleEvent(\"call_setaf\", ModeBits, \"setaf\", param);\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n    else\n    {\n        OS_BSP_LogConsoleEvent(\"enable_term_control_false\", ModeBits, NULL, NULL);\n    }\n\n    OS_BSP_LogConsoleEvent(\"exit\", ModeBits, NULL, NULL);\n}\n"
}