{
  "user_message": "An agent A claimed that the following OS_BSP_ConsoleSetMode_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_BSP_ConsoleSetMode_Impl.\n```c\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the function OS_BSP_ExecTput is declared to accept non-const pointers (for example: void OS_BSP_ExecTput(char *cap, char *arg);) then this call violates MISRA C 2023 Rule 8.13. Neither the string literal \"setaf\" nor the local buffer param are modified by the call, so the parameters should be declared as const-qualified pointers (e.g. const char *cap, const char *arg). Passing read-only data to non-const pointer parameters therefore breaches the rule.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffe7bb89c30\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffe7bb89c30\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffd241b0b30\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffd241b0b30\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7fff8ea0f4c0\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7fff8ea0f4c0\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffc9b60da70\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffc9b60da70\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffd2cc12f60\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffd2cc12f60\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffd7db472c0\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffd7db472c0\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffee0df1b80\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffee0df1b80\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffecab1a100\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffecab1a100\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7fff5a18b080\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7fff5a18b080\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffcda3b5bb0\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffcda3b5bb0\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7fff8e9e0300\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7fff8e9e0300\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffd8aac2f20\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffd8aac2f20\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffc007f7a10\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffc007f7a10\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffe3028e0b0\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffe3028e0b0\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=0\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=9, EnableTermControl=0, param_addr=0x7ffd147f5840\nOS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=9\nOS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=0, EnableTermControl=0, param_addr=0x7ffd147f5840\nOS_BSP_ConsoleSetMode_Impl EXI\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in the described scenario. MISRA C 2023 Rule 8.13 requires pointer types to be const-qualified whenever possible. In the shown code the calls to OS_BSP_ExecTput pass string literals (\"sgr0\", \"rmso\", \"smso\", \"setaf\") and a local buffer (param). If the OS_BSP_ExecTput prototype is declared as void OS_BSP_ExecTput(char *cap, char *arg); (non-const pointers) then the API accepts non-const pointers even though the data passed is not modified by the calls. That situation breaches the intent of 8.13: the parameters should be declared as const char * (e.g. void OS_BSP_ExecTput(const char *cap, const char *arg);) unless the function actually modifies the pointed-to data. Note this is a problem in the function declaration (the API), not in the call sites themselves; the call sites are fine for a const-qualified prototype (char param[] can convert to const char *). If OS_BSP_ExecTput genuinely needs to modify the strings, then non-const is appropriate and no violation occurs. Without the actual prototype/implementation of OS_BSP_ExecTput the violation cannot be proven, but given the scenario provided by A, the report is correct and the prototype should be changed to use const if modification is not required."
}