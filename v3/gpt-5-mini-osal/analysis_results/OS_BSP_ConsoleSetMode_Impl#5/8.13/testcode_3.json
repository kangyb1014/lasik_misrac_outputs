{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment passes a string literal to a non-const pointer parameter. If OS_BSP_ExecTput is declared as something like void OS_BSP_ExecTput(char *capname, char *param) (i.e. taking non-const char *), then passing the literal \"sgr0\" (which should be treated as const data) causes a pointer to point to a non-const-qualified type and thus violates MISRA C 2023 Rule 8.13. (If the function is declared to take const char * then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleSetMode_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleSetMode_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleSetMode_Impl:\n```c\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleSetMode_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable trace information to /tmp/logs/53.txt */\nstatic void os_bsp_log_probe(const char *event, const char *capname, const char *param, uint32 ModeBits)\n{\n    FILE *f = fopen(\"/tmp/logs/53.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[%s] ModeBits=0x%08X capname=%s param=%s cap_ptr=%p param_ptr=%p\\n\",\n                event,\n                (unsigned)ModeBits,\n                (capname != NULL) ? capname : \"(NULL)\",\n                (param != NULL) ? param : \"(NULL)\",\n                (void *)capname,\n                (void *)param);\n        fclose(f);\n    }\n}\n\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    /* Log entry and current ModeBits and terminal-control enable flag */\n    os_bsp_log_probe(\"enter\", \"OS_BSP_ConsoleSetMode_Impl\", NULL, ModeBits);\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        os_bsp_log_probe(\"branch\", \"EnableTermControl=true\", NULL, ModeBits);\n\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            /* Log the exact arguments about to be passed (string literal and NULL) */\n            os_bsp_log_probe(\"call\", \"sgr0\", NULL, ModeBits);\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                os_bsp_log_probe(\"call\", \"rmso\", NULL, ModeBits);\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                os_bsp_log_probe(\"call\", \"smso\", NULL, ModeBits);\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            /* Log the numeric parameter produced and its buffer address */\n            os_bsp_log_probe(\"param\", \"setaf\", param, ModeBits);\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n    else\n    {\n        os_bsp_log_probe(\"branch\", \"EnableTermControl=false\", NULL, ModeBits);\n    }\n}\n"
}