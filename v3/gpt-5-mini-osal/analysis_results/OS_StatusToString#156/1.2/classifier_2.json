{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_StatusToString:\n```c\nchar *OS_StatusToString(osal_status_t status, os_status_string_t *status_string)\n{\n    char *string = NULL;\n\n    if (status_string != NULL)\n    {\n        snprintf(*status_string, sizeof(*status_string), \"%ld\", OS_StatusToInteger(status));\n        string = *status_string;\n    }\n    return string;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_StatusToString:\ntypedef char os_status_string_t[OS_STATUS_STRING_LENGTH]\n...\ntypedef int32 osal_status_t\n...\nstatic inline long OS_StatusToInteger(osal_status_t Status)\n{\n    return (long)Status;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nchar *OS_StatusToString(osal_status_t status, os_status_string_t *status_string)\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The declaration uses only standard C constructs: a function returning char *, a parameter of typedefed array pointer type (os_status_string_t is typedef char[OS_STATUS_STRING_LENGTH], so os_status_string_t * is a pointer to an array), and a typedefed integer type (osal_status_t). These are standard C features (array typedefs, pointers, typedefs, and inline function usage shown elsewhere) and do not rely on any compiler-specific language extensions."
}