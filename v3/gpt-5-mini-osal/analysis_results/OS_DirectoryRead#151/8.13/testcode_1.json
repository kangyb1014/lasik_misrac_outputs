{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable de is declared as a non-const pointer (struct dirent *de) and is assigned the result of readdir(impl->dp). The code only reads from de (uses de->d_name) and does not modify the object pointed to, so de could/should be declared as const struct dirent *de; thus the pointer is not const-qualified when it could be, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryRead code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryRead as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryRead:\n```c\nint32 OS_DirectoryRead(osal_id_t dir_id, os_dirent_t *dirent)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dirent);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Call the underlying implementation to perform the read\n         *\n         * NOTE: This does not map \"virtual mount points\" that\n         * may appear in the dir listing back to the virtualized\n         * name.  For instance, if the (real) /eeprom directory\n         * is virtualized to /cf via the OS_VolumeTable, and one\n         * reads the \"/\" directory, the application will see the\n         * real name (eeprom) and not the virtualized name (cf).\n         */\n        return_code = OS_DirRead_Impl(&token, dirent);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryRead code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1513.txt */\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1513.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp and pid for easier correlation */\n    time_t t = time(NULL);\n    struct tm tm;\n    (void)localtime_r(&t, &tm);\n\n    fprintf(f, \"%04d-%02d-%02dT%02d:%02d:%02d pid=%ld: \",\n            tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n            tm.tm_hour, tm.tm_min, tm.tm_sec, (long)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_DirectoryRead(osal_id_t dir_id, os_dirent_t *dirent)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry and the parameters */\n    OS_LogProbe(\"Enter OS_DirectoryRead: dir_id=%lu, dirent=%p\",\n                (unsigned long)dir_id, (void *)dirent);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dirent);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, dir_id, &token);\n    OS_LogProbe(\"OS_ObjectIdGetById returned %ld for dir_id=%lu\",\n                (long)return_code, (unsigned long)dir_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token address to trace the resource being used */\n        OS_LogProbe(\"Acquired token at %p for dir_id=%lu\", (void *)&token, (unsigned long)dir_id);\n\n        /*\n         * Call the underlying implementation to perform the read\n         *\n         * NOTE: This does not map \"virtual mount points\" that\n         * may appear in the dir listing back to the virtualized\n         * name.  For instance, if the (real) /eeprom directory\n         * is virtualized to /cf via the OS_VolumeTable, and one\n         * reads the \"/\" directory, the application will see the\n         * real name (eeprom) and not the virtualized name (cf).\n         */\n        OS_LogProbe(\"Calling OS_DirRead_Impl with dirent=%p\", (void *)dirent);\n        return_code = OS_DirRead_Impl(&token, dirent);\n        OS_LogProbe(\"OS_DirRead_Impl returned %ld for dir_id=%lu, dirent=%p\",\n                    (long)return_code, (unsigned long)dir_id, (void *)dirent);\n\n        OS_ObjectIdRelease(&token);\n        OS_LogProbe(\"Released token for dir_id=%lu\", (unsigned long)dir_id);\n    }\n    else\n    {\n        OS_LogProbe(\"Skipping OS_DirRead_Impl due to object lookup failure for dir_id=%lu\", (unsigned long)dir_id);\n    }\n\n    OS_LogProbe(\"Exit OS_DirectoryRead: dir_id=%lu returning %ld\", (unsigned long)dir_id, (long)return_code);\n\n    return return_code;\n}\n"
}