{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) can write beyond the bounds of the object referenced by token if token is NULL or does not point to a valid OS_object_token_t. For example, if a caller passes NULL for token (or a pointer to a smaller buffer), the memset will access invalid memory \u2014 this violates MISRA C 2023 Rule 21.17. Although one caller (OS_ObjectIdGetById) passes a valid local token, OS_ObjectIdTransactionInit itself does not validate the pointer, so the use of memset is not guaranteed safe for all call sites.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemFlush code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemFlush as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemFlush:\n```c\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemFlush_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemFlush code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logger: write control flow and token state to a log file for reproduction. */\nstatic void OS_BinSemFlush_Probe(const char *stage, osal_id_t sem_id, const void *token_ptr, size_t token_size, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1189.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not affect original logic. */\n    }\n\n    /* Log stage, sem_id (as numeric and pointer form), return code, token address and size. */\n    fprintf(f, \"[OS_BinSemFlush] stage=%s sem_id_num=%llu sem_id_ptr=%p return=%d token_addr=%p token_size=%zu\\n\",\n            stage,\n            (unsigned long long) (uintptr_t) sem_id,\n            (void *) (uintptr_t) sem_id,\n            (int) return_code,\n            token_ptr,\n            token_size);\n\n    /* Hex-dump up to a reasonable prefix of the token object to avoid excessive output.\n       This reads only within the bounds of the token object (token_size bytes). */\n    if (token_ptr != NULL && token_size > 0)\n    {\n        const unsigned char *bytes = (const unsigned char *)token_ptr;\n        size_t i;\n        size_t max_dump = token_size;\n        if (max_dump > 64U) max_dump = 64U; /* limit to first 64 bytes */\n        fprintf(f, \"[OS_BinSemFlush] token_dump (\");\n        for (i = 0U; i < max_dump; ++i)\n        {\n            fprintf(f, \"%02X\", (unsigned)bytes[i]);\n            if (i + 1U < max_dump) fprintf(f, \" \");\n        }\n        if (token_size > max_dump)\n        {\n            fprintf(f, \" ... (%zu bytes total)\", token_size);\n        }\n        fprintf(f, \")\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and the uninitialized token address/size before calling GetById. */\n    OS_BinSemFlush_Probe(\"entry_before_GetById\", sem_id, &token, sizeof(token), -1);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of GetById and token contents/state after the call. */\n    OS_BinSemFlush_Probe(\"after_GetById\", sem_id, &token, sizeof(token), return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before invoking the implementation. */\n        OS_BinSemFlush_Probe(\"before_Impl\", sem_id, &token, sizeof(token), return_code);\n\n        return_code = OS_BinSemFlush_Impl(&token);\n\n        /* Log after implementation returns. */\n        OS_BinSemFlush_Probe(\"after_Impl\", sem_id, &token, sizeof(token), return_code);\n    }\n\n    /* Final exit log. */\n    OS_BinSemFlush_Probe(\"exit\", sem_id, &token, sizeof(token), return_code);\n\n    return return_code;\n}\n"
}