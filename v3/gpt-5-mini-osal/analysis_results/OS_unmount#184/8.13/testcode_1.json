{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'ref' is declared as void * (non-const) and is cast to a const-qualified pointer inside the function: const char *target = (const char *)ref; This hides the fact that the referenced data is not intended to be modified. According to MISRA C 2023 Rule 8.13 the parameter should be declared to point to a const-qualified type (e.g. const void *ref) so callers and the API reflect that the data will not be modified. The correct fix is to change the function prototype to take const void *ref and remove the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1843.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_unmount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers - append-only to avoid interfering with program state. */\nstatic void OS_unmount_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1843.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Log entry and incoming parameter state */\n    OS_unmount_log_probe(\"OS_unmount ENTRY: mountpoint=%p; mountpoint_str=\\\"%s\\\"\",\n                         (void *)mountpoint, (mountpoint != NULL) ? mountpoint : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    OS_unmount_log_probe(\"OS_unmount: after OS_CHECK_STRING\");\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    OS_unmount_log_probe(\"OS_unmount: OS_ObjectIdGetBySearch returned %d; token_addr=%p\",\n                         return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        OS_unmount_log_probe(\"OS_unmount: filesys=%p\", (void *)filesys);\n        if (filesys != NULL)\n        {\n            OS_unmount_log_probe(\"OS_unmount: filesys->flags=0x%llx\",\n                                 (unsigned long long)filesys->flags);\n        }\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            OS_unmount_log_probe(\"OS_unmount: incorrect object state - flags=0x%llx\",\n                                 (unsigned long long)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            OS_unmount_log_probe(\"OS_unmount: calling OS_FileSysUnmountVolume_Impl for token_addr=%p\",\n                                 (void *)&token);\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n            OS_unmount_log_probe(\"OS_unmount: OS_FileSysUnmountVolume_Impl returned %d\", return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            unsigned long long old_flags = (unsigned long long)filesys->flags;\n            OS_unmount_log_probe(\"OS_unmount: clearing mount flags; old_flags=0x%llx\", old_flags);\n\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n\n            OS_unmount_log_probe(\"OS_unmount: new flags=0x%llx\", (unsigned long long)filesys->flags);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_unmount_log_probe(\"OS_unmount: released token\");\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_unmount_log_probe(\"OS_unmount: mapping return_code %d to OS_ERR_NAME_NOT_FOUND\", return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    OS_unmount_log_probe(\"OS_unmount EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}