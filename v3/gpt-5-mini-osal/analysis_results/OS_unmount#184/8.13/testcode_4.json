{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. The function OS_ObjectIdGetBySearch takes a non-const void *arg, but callers pass a const char * (OS_unmount casts (void *)mountpoint) and the match function OS_FileSys_FindVirtMountPoint treats the argument as a const char * (const char *target = (const char *)ref). This discards the const qualifier and permits passing a const object through a non-const pointer. The parameter should be declared const void *arg (and match functions should take const void *ref) to avoid casting away const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1843.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_unmount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void os_unmount_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1843.txt\", \"a\");\n    if (!fp)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fclose(fp);\n}\n\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Log entry and input state */\n    os_unmount_log(\"OS_unmount ENTER: mountpoint='%s' ptr=%p\\n\", mountpoint, (const void *)mountpoint);\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    os_unmount_log(\"Calling OS_ObjectIdGetBySearch with a cast (void*) from const char* (possible const discard). mountpoint ptr=%p\\n\",\n                    (const void *)mountpoint);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    os_unmount_log(\"OS_ObjectIdGetBySearch returned %d\\n\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        os_unmount_log(\"Found filesys record at %p; flags=0x%08x\\n\", (void *)filesys,\n                        (unsigned int)filesys->flags);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            os_unmount_log(\"Filesys flags indicate incorrect state for unmount. flags=0x%08x\\n\",\n                            (unsigned int)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            os_unmount_log(\"Calling OS_FileSysUnmountVolume_Impl for token.\\n\");\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n            os_unmount_log(\"OS_FileSysUnmountVolume_Impl returned %d\\n\", (int)return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            unsigned int old_flags = filesys->flags;\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n            os_unmount_log(\"Cleared mounted flags: before=0x%08x after=0x%08x\\n\", old_flags,\n                            (unsigned int)filesys->flags);\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_unmount_log(\"Released token for filesys.\\n\");\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        os_unmount_log(\"OS_unmount finalizing with non-success return_code=%d -> setting OS_ERR_NAME_NOT_FOUND\\n\",\n                        (int)return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    os_unmount_log(\"OS_unmount EXIT: return_code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}