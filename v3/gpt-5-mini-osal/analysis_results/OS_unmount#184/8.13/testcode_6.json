{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_unmount the const char *mountpoint is cast to void * and passed to OS_ObjectIdFindNextMatch/OS_ObjectIdGetBySearch (return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token); where arg is (void *)mountpoint). This discards the const qualifier from the pointer even though the match function (OS_FileSys_FindVirtMountPoint) treats the argument as a const char * and does not modify it. The API/type should use a const-qualified pointer (e.g. const void *) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1843.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_unmount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: log messages to /tmp/logs/1843.txt. Keep minimal and non-intrusive. */\nstatic void OS_unmount_log_probe(const char *stage, const char *mountpoint, void *arg_cast, void *token_ptr,\n                                 void *filesys_ptr, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1843.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    fprintf(f, \"[OS_unmount] %s\\n\", stage);\n    if (mountpoint != NULL)\n    {\n        /* print both pointer value and string content (best-effort) */\n        fprintf(f, \"  mountpoint pointer: %p\\n\", (void *)mountpoint);\n        fprintf(f, \"  mountpoint string: '%s'\\n\", mountpoint);\n    }\n    else\n    {\n        fprintf(f, \"  mountpoint: (NULL)\\n\");\n    }\n\n    /* arg_cast is the value passed to the search API (cast to void* in original code) */\n    fprintf(f, \"  argument passed to search API (after cast): %p\\n\", arg_cast);\n\n    /* token_ptr is address of token variable (or NULL if not available) */\n    fprintf(f, \"  token (address or value): %p\\n\", token_ptr);\n\n    /* filesys_ptr may be NULL or real pointer from OS_OBJECT_TABLE_GET */\n    fprintf(f, \"  filesys pointer: %p\\n\", filesys_ptr);\n\n    fprintf(f, \"  return_code: %d\\n\", (int)return_code);\n    fprintf(f, \"----------------------------------------\\n\");\n\n    fclose(f);\n}\n\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* Log entry and parameter state before calling the search API */\n    OS_unmount_log_probe(\"ENTRY (before ObjectIdGetBySearch)\", mountpoint, (void *)mountpoint, NULL, NULL, 0);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    /* Log result of the search API call (note: arg was cast to void* as in original code) */\n    OS_unmount_log_probe(\"After ObjectIdGetBySearch\", mountpoint, (void *)mountpoint, (void *)&token, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log the obtained filesys pointer and flags (best-effort: print pointer only, flags printed below if available) */\n        OS_unmount_log_probe(\"Found object (after OS_OBJECT_TABLE_GET)\", mountpoint, (void *)mountpoint, (void *)&token, (void *)filesys, return_code);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            OS_unmount_log_probe(\"Incorrect state for unmount\", mountpoint, (void *)mountpoint, (void *)&token, (void *)filesys, return_code);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            OS_unmount_log_probe(\"Calling OS_FileSysUnmountVolume_Impl\", mountpoint, (void *)mountpoint, (void *)&token, (void *)filesys, return_code);\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n            OS_unmount_log_probe(\"Returned from OS_FileSysUnmountVolume_Impl\", mountpoint, (void *)mountpoint, (void *)&token, (void *)filesys, return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n\n            /* Log flags change (best-effort; print pointer and that flags were updated) */\n            OS_unmount_log_probe(\"Unmount success; flags cleared\", mountpoint, (void *)mountpoint, (void *)&token, (void *)filesys, return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_unmount_log_probe(\"After OS_ObjectIdRelease\", mountpoint, (void *)mountpoint, (void *)&token, (void *)filesys, return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_unmount_log_probe(\"Mapping non-success to OS_ERR_NAME_NOT_FOUND\", mountpoint, (void *)mountpoint, NULL, NULL, return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    OS_unmount_log_probe(\"EXIT\", mountpoint, (void *)mountpoint, NULL, NULL, return_code);\n\n    return return_code;\n}\n"
}