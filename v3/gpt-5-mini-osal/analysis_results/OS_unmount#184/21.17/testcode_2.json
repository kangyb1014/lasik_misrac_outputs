{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strncmp(target, filesys->virtual_mountpt, mplen) where mplen is derived from the length of filesys->virtual_mountpt. Only filesys->virtual_mountpt is guaranteed to have at least mplen bytes (mplen < sizeof(filesys->virtual_mountpt) is checked). The target (mountpoint) may be shorter than mplen, so calling strncmp with n = mplen can cause reads beyond the bounds of the object referenced by target (for example, filesys->virtual_mountpt has length mplen = 12 but the input mountpoint string has length 5). This can result in out\u2011of\u2011bounds accesses depending on implementation, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1849.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_unmount code.\n",
  "test_code": "/* Inserted logging probes to help reproduce an out-of-bounds read in the virtual mountpoint comparison.\n * Logs are appended to /tmp/logs/1849.txt. This file should capture the mountpoint provided,\n * the maximum allowed mountpoint size (as used by OS_CHECK_STRING), the result of the search,\n * and the filesystem record's virtual_mountpt and its length so that a mismatch (where the\n * filesystem's mountpoint is longer than the provided mountpoint) can be observed.\n *\n * This file preserves the original logic of OS_unmount and only adds logging. No new\n * behavior or side-effects are introduced except for writing to the log file.\n */\n\n#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Note: The project already defines int32, OS_object_token_t, OS_filesys_internal_record_t,\n * and the OS_* functions/macros used below. This file only adds logging.\n */\n\nstatic void OS_unmount_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1849.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* Log the validated mountpoint and relevant limits so we can reproduce the mismatch condition.\n     * Because OS_CHECK_STRING was executed above, it is expected that 'mountpoint' is NUL-terminated\n     * within sizeof(filesys->virtual_mountpt) bytes, so calling strlen here is safe and will not\n     * itself read out-of-bounds.\n     */\n    {\n        size_t max_allowed = sizeof(((OS_filesys_internal_record_t *)0)->virtual_mountpt);\n        size_t mount_len = 0;\n\n        if (mountpoint != NULL)\n        {\n            /* Safe: OS_CHECK_STRING ensures a NUL within max_allowed bytes. */\n            mount_len = strlen(mountpoint);\n        }\n\n        OS_unmount_log(\"OS_unmount: entry\");\n        OS_unmount_log(\"  mountpoint ptr: %p\", (void *)mountpoint);\n        if (mountpoint != NULL)\n        {\n            /* Limit printed mountpoint length to a reasonable amount to avoid huge logs. */\n            char mount_preview[256];\n            size_t to_copy = (mount_len < (sizeof(mount_preview) - 1)) ? mount_len : (sizeof(mount_preview) - 1);\n            memcpy(mount_preview, mountpoint, to_copy);\n            mount_preview[to_copy] = '\\0';\n            OS_unmount_log(\"  mountpoint (preview): '%s'\", mount_preview);\n        }\n        OS_unmount_log(\"  mountpoint length (strlen): %zu\", mount_len);\n        OS_unmount_log(\"  max_allowed (sizeof virtual_mountpt): %zu\", max_allowed);\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    OS_unmount_log(\"OS_unmount: OS_ObjectIdGetBySearch returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log the filesystem record's virtual_mountpt and its length to provide evidence\n         * that the filesystem's stored virtual_mountpt can be longer than the provided\n         * mountpoint. If the filesystem's virtual_mountpt length (vlen) is greater than\n         * the provided mountpoint length, a strncmp(filesys->virtual_mountpt, mountpoint, vlen)\n         * inside the search would read beyond the bounds of 'mountpoint'.\n         */\n        {\n            size_t max_vlen = sizeof(filesys->virtual_mountpt);\n            size_t vlen = 0;\n\n            /* Find NUL within bounds to avoid reading beyond the array. */\n            void *nul = memchr(filesys->virtual_mountpt, '\\0', max_vlen);\n            if (nul != NULL)\n            {\n                vlen = (size_t)((char *)nul - (char *)filesys->virtual_mountpt);\n            }\n            else\n            {\n                /* No NUL found within the array; treat length as the entire array size. */\n                vlen = max_vlen;\n            }\n\n            /* For mountpoint length we can safely recompute (OS_CHECK_STRING ran earlier). */\n            size_t mount_len = (mountpoint != NULL) ? strlen(mountpoint) : 0;\n\n            /* Prepare a preview of the virtual_mountpt for the log (bounded). */\n            char vm_preview[256];\n            size_t to_copy = (vlen < (sizeof(vm_preview) - 1)) ? vlen : (sizeof(vm_preview) - 1);\n            memcpy(vm_preview, filesys->virtual_mountpt, to_copy);\n            vm_preview[to_copy] = '\\0';\n\n            OS_unmount_log(\"  filesys ptr: %p\", (void *)filesys);\n            OS_unmount_log(\"  virtual_mountpt (preview): '%s'\", vm_preview);\n            OS_unmount_log(\"  virtual_mountpt length (bounded): %zu\", vlen);\n            OS_unmount_log(\"  provided mountpoint length: %zu\", mount_len);\n\n            if (vlen > mount_len)\n            {\n                OS_unmount_log(\"  POTENTIAL VIOLATION: virtual_mountpt length (%zu) > provided mountpoint length (%zu)\", vlen, mount_len);\n                OS_unmount_log(\"  This suggests a call like strncmp(target, filesys->virtual_mountpt, %zu) could read beyond target when 'target' is the shorter provided mountpoint.\", vlen);\n            }\n            else\n            {\n                OS_unmount_log(\"  virtual_mountpt length does not exceed provided mountpoint length; no immediate evidence of the described violation here.\");\n            }\n        }\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_unmount_log(\"  filesystem flags indicate incorrect state: 0x%08x\", (unsigned)filesys->flags);\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n            OS_unmount_log(\"  OS_FileSysUnmountVolume_Impl returned %d\", (int)return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n            OS_unmount_log(\"  unmounted: cleared MOUNTED flags; new flags 0x%08x\", (unsigned)filesys->flags);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        OS_unmount_log(\"OS_unmount: final return code (mapped) %d\", (int)return_code);\n    }\n\n    return return_code;\n}\n"
}