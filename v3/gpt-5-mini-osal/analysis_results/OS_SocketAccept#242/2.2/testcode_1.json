{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&sock_token, 0, sizeof(sock_token)); is redundant. On the successful path OS_ObjectIdGetById(...) will initialize/overwrite the token before any use; on the failure path the token is never used (OS_ObjectIdRelease is only called inside the success branch). Therefore removing the memset would not change program behaviour \u2014 it is an executed operation whose removal has no effect, i.e. dead code. (It appears to be present only to placate static analysis.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2422.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept:\n```c\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/*\n * Probe / logging helpers. These are intentionally minimal and\n * placed as static functions so they do not change program linkage.\n * They log human-readable messages and hex-dumps of memory to the\n * file /tmp/logs/2422.txt to allow reproduction and inspection of\n * the scenario where the initial memset of sock_token might be\n * redundant.\n */\nstatic void OS_SocketAccept_LogMsg(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2422.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void OS_SocketAccept_DumpBytes(const char *label, const void *ptr, size_t size)\n{\n    if (ptr == NULL || size == 0)\n    {\n        OS_SocketAccept_LogMsg(\"%s: <null or zero-size>\", label);\n        return;\n    }\n\n    FILE *f = fopen(\"/tmp/logs/2422.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    const unsigned char *b = (const unsigned char *)ptr;\n    fprintf(f, \"%s: \", label);\n    for (size_t i = 0; i < size; ++i)\n    {\n        fprintf(f, \"%02X\", b[i]);\n        if (i + 1 < size)\n        {\n            fprintf(f, \" \");\n        }\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n\n    /* Log entry and parameters */\n    OS_SocketAccept_LogMsg(\"OS_SocketAccept ENTRY: sock_id=%lu connsock_id=%p Addr=%p timeout=%ld\",\n                           (unsigned long)sock_id, (void *)connsock_id, (void *)Addr, (long)timeout);\n\n    OS_SocketAccept_LogMsg(\"About to zero sock_token and conn_token (the memset that is reported as potentially redundant)\");\n\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    /* Dump the tokens after the memset so we can determine whether the memset had any effect later */\n    OS_SocketAccept_DumpBytes(\"sock_token after memset\", &sock_token, sizeof(sock_token));\n    OS_SocketAccept_DumpBytes(\"conn_token after memset\", &conn_token, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n\n    OS_SocketAccept_LogMsg(\"After OS_ObjectIdGetById: return_code=%ld\", (long)return_code);\n    /* Dump the sock_token after the call so the logs show whether it was overwritten */\n    OS_SocketAccept_DumpBytes(\"sock_token after OS_ObjectIdGetById\", &sock_token, sizeof(sock_token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        OS_SocketAccept_LogMsg(\"OS_ObjectIdGetById success: sock_record=%p sock=%p socket_type=%d stream_state=0x%08lX\",\n                               (void *)sock_record, (void *)sock, (int)sock->socket_type, (unsigned long)sock->stream_state);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            OS_SocketAccept_LogMsg(\"Socket type incorrect: expected STREAM, got %d\", (int)sock->socket_type);\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            OS_SocketAccept_LogMsg(\"Socket state incorrect: stream_state=0x%08lX\", (unsigned long)sock->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            OS_SocketAccept_LogMsg(\"After OS_ObjectIdAllocateNew: return_code=%ld\", (long)return_code);\n            OS_SocketAccept_DumpBytes(\"conn_token after allocate\", &conn_token, sizeof(conn_token));\n\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                OS_SocketAccept_LogMsg(\"About to zero new conn record via memset(conn,0,...) (to record pending operation)\");\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n                OS_SocketAccept_DumpBytes(\"conn (first bytes) after memset\", conn, sizeof(OS_stream_internal_record_t) > 64 ? 64 : sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n                OS_SocketAccept_LogMsg(\"After OS_SocketAccept_Impl: return_code=%ld\", (long)return_code);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                    OS_SocketAccept_LogMsg(\"Accept succeeded: conn_record=%p conn=%p stream_state=0x%08lX\",\n                                           (void *)conn_record, (void *)conn, (unsigned long)conn->stream_state);\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n                OS_SocketAccept_LogMsg(\"After OS_ObjectIdFinalizeNew: return_code=%ld connsock_id=%p\", (long)return_code, (void *)connsock_id);\n            }\n        }\n\n        OS_SocketAccept_LogMsg(\"Releasing sock_token via OS_ObjectIdRelease\");\n        OS_ObjectIdRelease(&sock_token);\n    }\n    else\n    {\n        OS_SocketAccept_LogMsg(\"OS_ObjectIdGetById failed; sock_token should not be used. Exiting with %ld\", (long)return_code);\n    }\n\n    OS_SocketAccept_LogMsg(\"OS_SocketAccept EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}