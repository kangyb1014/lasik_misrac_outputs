{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can dereference pointers that might be NULL or not point to a valid null-terminated buffer. For example, if a stub entry exists but its ContentTypeStr was never set (ContentTypeStr == NULL) or the caller passed TypeName == NULL, strcmp will read through an invalid pointer and thus may access memory beyond the bounds of the referenced object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemTimedWait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTimedWait:\n```c\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemTimedWait code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe logging helper: appends a small trace to /tmp/logs/1239.txt.\n   This helper intentionally does not inspect or dereference opaque\n   objects such as OS_object_token_t to avoid changing program behavior\n   or introducing further pointer-related issues. */\nstatic void OS_Probe_Log(osal_id_t sem_id, uint32 msecs, const char *stage, const OS_object_token_t *token, int32 return_code)\n{\n    FILE *fp;\n    time_t now;\n\n    /* Try to ensure the directory exists; ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/1239.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging cannot be performed, do not alter program flow. */\n        return;\n    }\n\n    now = time(NULL);\n    if (now == (time_t)-1)\n    {\n        (void)fprintf(fp, \"[unknown time] \");\n    }\n    else\n    {\n        (void)fprintf(fp, \"%ld \", (long)now);\n    }\n\n    /* Log the stage, input parameters, token address and return code.\n       Avoid dereferencing token or any pointers that might be NULL. */\n    (void)fprintf(fp, \"%s: sem_id=%llu msecs=%u token_addr=%p return_code=%d\\n\",\n                  stage,\n                  (unsigned long long)sem_id,\n                  (unsigned int)msecs,\n                  (const void *)token,\n                  (int)return_code);\n\n    (void)fclose(fp);\n}\n\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Probe: entry with initial parameters */\n    OS_Probe_Log(sem_id, msecs, \"OS_BinSemTimedWait_entry\", &token, -1);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Probe: after attempting to get object id */\n    OS_Probe_Log(sem_id, msecs, \"OS_BinSemTimedWait_after_ObjectIdGetById\", &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Probe: about to call Impl */\n        OS_Probe_Log(sem_id, msecs, \"OS_BinSemTimedWait_before_Impl\", &token, return_code);\n\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n\n        /* Probe: after Impl returns */\n        OS_Probe_Log(sem_id, msecs, \"OS_BinSemTimedWait_after_Impl\", &token, return_code);\n    }\n\n    /* Probe: exit with final return_code */\n    OS_Probe_Log(sem_id, msecs, \"OS_BinSemTimedWait_exit\", &token, return_code);\n\n    return return_code;\n}\n"
}