{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'default: break;' clause in the switch within OS_API_Init is executed for any idtype values not matched by the explicit cases, but it performs no action. Removing this default branch would not change program behaviour, therefore the operation is dead code and violates MISRA C 2023 Rule 2.2. (Fix: remove the redundant default or replace it with a meaningful action such as an error handler or assertion.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1232.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemTimedWait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTimedWait:\n```c\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemTimedWait code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1232.txt */\nstatic void os_1232_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1232.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[%s] \", tag);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with parameters */\n    os_1232_log(\"ENTRY\", \"OS_BinSemTimedWait called: sem_id=%llu msecs=%llu\",\n                (unsigned long long)sem_id, (unsigned long long)msecs);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of parameter check and token address (token contents are opaque) */\n    os_1232_log(\"ObjectIdGetById\", \"return_code=%lld token_addr=%p\",\n                (long long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling implementation */\n        os_1232_log(\"PRE_IMPL\", \"Calling OS_BinSemTimedWait_Impl with token=%p msecs=%llu\",\n                    (void *)&token, (unsigned long long)msecs);\n\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n\n        /* Log after implementation call */\n        os_1232_log(\"POST_IMPL\", \"OS_BinSemTimedWait_Impl returned %lld\",\n                    (long long)return_code);\n    }\n    else\n    {\n        /* Log early return path */\n        os_1232_log(\"EARLY_RETURN\", \"Parameter check failed; returning %lld\",\n                    (long long)return_code);\n    }\n\n    /* Final return value logged */\n    os_1232_log(\"EXIT\", \"OS_BinSemTimedWait returning %lld\",\n                (long long)return_code);\n\n    return return_code;\n}\n"
}