{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_BinSemTimedWait_Impl is declared to take a non-const pointer (for example: int32 OS_BinSemTimedWait_Impl(OS_object_token_t *token, uint32 msecs)) but the implementation only reads from *token (does not modify it), then Rule 8.13 is violated. The pointer should instead be to a const-qualified type (const OS_object_token_t *). If the implementation genuinely needs to modify the token, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemTimedWait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTimedWait:\n```c\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemTimedWait code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe helpers to log control flow and token state to /tmp/logs/1233.txt */\nstatic void log_bytes(FILE *f, const char *label, const void *buf, size_t len)\n{\n    const unsigned char *b = (const unsigned char *)buf;\n    fprintf(f, \"%s (len=%zu):\", label, len);\n    for (size_t i = 0; i < len; ++i)\n    {\n        if ((i % 16) == 0)\n            fprintf(f, \"\\n  \");\n        fprintf(f, \"%02X \", b[i]);\n    }\n    fprintf(f, \"\\n\");\n}\n\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    FILE *log = fopen(\"/tmp/logs/1233.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_BinSemTimedWait: sem_id=%llu, msecs=%llu\\n\",\n                (unsigned long long) sem_id, (unsigned long long) msecs);\n        fprintf(log, \"token address = %p, sizeof(token) = %zu\\n\", (void *)&token, sizeof(token));\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %lld\\n\", (long long)return_code);\n        /* Dump the token content as obtained from OS_ObjectIdGetById */\n        log_bytes(log, \"token BEFORE calling Impl\", &token, sizeof(token));\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Snapshot token to detect whether the implementation modifies it */\n        unsigned char *snapshot = NULL;\n        size_t tok_size = sizeof(token);\n        if (tok_size > 0)\n        {\n            snapshot = (unsigned char *)malloc(tok_size);\n            if (snapshot != NULL)\n            {\n                memcpy(snapshot, &token, tok_size);\n            }\n            else if (log)\n            {\n                fprintf(log, \"WARNING: failed to allocate snapshot buffer of size %zu\\n\", tok_size);\n            }\n        }\n\n        /* Call the implementation as original code does */\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n\n        if (log)\n        {\n            fprintf(log, \"OS_BinSemTimedWait_Impl returned %lld\\n\", (long long)return_code);\n            log_bytes(log, \"token AFTER calling Impl\", &token, sizeof(token));\n\n            if (snapshot != NULL)\n            {\n                if (memcmp(snapshot, &token, tok_size) == 0)\n                {\n                    fprintf(log, \"RESULT: token memory UNCHANGED by Impl (evidence for non-modifying use => pointer could be const)\\n\");\n                }\n                else\n                {\n                    fprintf(log, \"RESULT: token memory MODIFIED by Impl\\n\");\n                }\n            }\n            else\n            {\n                fprintf(log, \"RESULT: no snapshot available; cannot determine if token was modified\\n\");\n            }\n        }\n\n        if (snapshot)\n        {\n            /* Zero and free snapshot to avoid leaking token data */\n            memset(snapshot, 0, tok_size);\n            free(snapshot);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_BinSemTimedWait: return_code=%lld\\n\\n\", (long long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}