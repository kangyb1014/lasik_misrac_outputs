{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTimedWait:\n```c\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_object_token_t token;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Insufficient information to be certain from this fragment alone, but based on how token is used it is not a violation: token is obtained via OS_ObjectIdGetById(&token) and then passed by address to OS_BinSemTimedWait_Impl(&token), so token is an output/modifiable object and must be non-const. Rule 8.13 would be violated only if OS_object_token_t is a pointer type that should be to a const-qualified target but is not. For example, if OS_object_token_t were typedef struct OS_object_token * OS_object_token_t and the code only ever reads through that pointer (i.e. the pointee is immutable), then declaring a non-const pointer here would violate Rule 8.13 \u2014 it should be declared as pointer to const (e.g. const struct OS_object_token *)."
}