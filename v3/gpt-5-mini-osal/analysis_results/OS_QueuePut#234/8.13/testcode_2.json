{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'queue' is declared as a pointer to a non-const type (OS_queue_internal_record_t *queue;) but in this function it is only used for read-only access (e.g. checking queue->max_size). According to MISRA C 2023 Rule 8.13 it should be declared as a pointer to a const-qualified type (const OS_queue_internal_record_t *queue) when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueuePut as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut:\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueuePut code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/2343.txt */\nstatic void OS_QueuePut_LogEntry(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    FILE *f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n    if (f)\n    {\n        (void)fprintf(f, \"OS_QueuePut ENTRY: queue_id=%llu, data=%p, size=%llu, flags=%llu\\n\",\n                      (unsigned long long)queue_id,\n                      data,\n                      (unsigned long long)size,\n                      (unsigned long long)flags);\n        (void)fclose(f);\n    }\n}\n\nstatic void OS_QueuePut_LogObjectGetResult(int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n    if (f)\n    {\n        (void)fprintf(f, \"OS_QueuePut: OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        (void)fclose(f);\n    }\n}\n\nstatic void OS_QueuePut_LogQueueState(const OS_queue_internal_record_t *queue, size_t size)\n{\n    FILE *f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n    if (f)\n    {\n        if (queue != NULL)\n        {\n            (void)fprintf(f, \"OS_QueuePut: queue=%p, queue->max_size=%llu, requested size=%llu\\n\",\n                          (const void *)queue,\n                          (unsigned long long)queue->max_size,\n                          (unsigned long long)size);\n        }\n        else\n        {\n            (void)fprintf(f, \"OS_QueuePut: queue is NULL\\n\");\n        }\n        (void)fclose(f);\n    }\n}\n\nstatic void OS_QueuePut_LogDecision(const char *decision, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n    if (f)\n    {\n        (void)fprintf(f, \"OS_QueuePut DECISION: %s, return_code=%ld\\n\", decision, (long)return_code);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and parameters */\n    OS_QueuePut_LogEntry(queue_id, data, size, flags);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log result of object lookup */\n    OS_QueuePut_LogObjectGetResult(return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log queue state before decision */\n        OS_QueuePut_LogQueueState(queue, size);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n            OS_QueuePut_LogDecision(\"INVALID_SIZE\", return_code);\n        }\n        else\n        {\n            OS_QueuePut_LogDecision(\"CALL_IMPL\", return_code);\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n            /* Log after impl call */\n            OS_QueuePut_LogDecision(\"AFTER_IMPL\", return_code);\n        }\n    }\n\n    /* Final return value */\n    {\n        FILE *f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n        if (f)\n        {\n            (void)fprintf(f, \"OS_QueuePut EXIT: return_code=%ld\\n\\n\", (long)return_code);\n            (void)fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}