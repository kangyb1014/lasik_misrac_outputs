{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_QueuePut_Impl is declared to take a non-const pointer (for example: int32 OS_QueuePut_Impl(OS_object_token_t *token, void *data, size_t size, uint32 flags)), then passing the local parameter data which is declared as const void * discards the const qualifier. That constitutes a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when the data is not modified. To fix, declare OS_QueuePut_Impl to accept a const void * for the data parameter (or otherwise ensure the callee actually needs to modify the data and change the caller accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueuePut as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut:\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueuePut code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n#include <stdarg.h>\n\n/* Probe logging helpers -------------------------------------------------- */\nstatic void probe_log_fmt(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    /* Format into local buffer first to avoid partial writes */\n    (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    FILE *f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n    if (f != NULL)\n    {\n        (void)fprintf(f, \"%s\\n\", buf);\n        (void)fclose(f);\n    }\n}\n\n/* Modified OS_QueuePut with probes -------------------------------------- */\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and parameters. Note: data is declared const in this caller. */\n    probe_log_fmt(\"OS_QueuePut: entered (queue_id=%llu, data_ptr=%\" PRIuPTR \", size=%llu, flags=%u) - caller declares data as const\",\n                  (unsigned long long)queue_id,\n                  (uintptr_t)data,\n                  (unsigned long long)size,\n                  (unsigned)flags);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    probe_log_fmt(\"OS_QueuePut: OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        probe_log_fmt(\"OS_QueuePut: resolved queue pointer=%\" PRIuPTR \", queue->max_size=%llu\",\n                      (uintptr_t)queue,\n                      (unsigned long long)queue->max_size);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            probe_log_fmt(\"OS_QueuePut: size (%llu) > queue->max_size (%llu) -> returning OS_QUEUE_INVALID_SIZE\",\n                          (unsigned long long)size,\n                          (unsigned long long)queue->max_size);\n\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            /* Log just before calling the implementation. This is the spot\n               where a prototype mismatch (callee taking non-const void*) would\n               constitute a const-discard at the call site. We record that the\n               caller's parameter is const and the pointer value. */\n            probe_log_fmt(\"OS_QueuePut: calling OS_QueuePut_Impl with token_addr=%\" PRIuPTR \", data_ptr=%\" PRIuPTR \", size=%llu, flags=%u (caller data is const)\",\n                          (uintptr_t)&token,\n                          (uintptr_t)data,\n                          (unsigned long long)size,\n                          (unsigned)flags);\n\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n\n            probe_log_fmt(\"OS_QueuePut: OS_QueuePut_Impl returned %d\", (int)return_code);\n        }\n    }\n\n    probe_log_fmt(\"OS_QueuePut: exiting with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}