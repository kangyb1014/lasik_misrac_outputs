{
  "user_message": "An agent A claimed that the following OS_TaskFindIdBySystemData code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskFindIdBySystemData.\n```c\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'ref' is declared as void *ref but is not modified and is immediately cast to const pthread_t *target. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 here the function should accept a const void *ref (and the OS_ObjectMatchFunc_t typedef should use a const-qualified argument) or otherwise document/justify why the non-const signature is required by the surrounding API. As written this is a violation (non-const pointer used where const would be appropriate).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_TaskFindIdBySystemData: entry\n  task_id pointer: (nil)\n  sysdata pointer: 0x7fffc08a3463\n  sysdata_size: 1\nOS_TaskFindIdBySystemData: entry\n  task_id pointer: 0x7fffc08a3464\n  sysdata pointer: (nil)\n  sysdata_size: 1\nOS_TaskValidateSystemData_Impl returned: -2\nOS_TaskFindIdBySystemData: validation failed, returning -2\nOS_TaskFindIdBySystemData: entry\n  task_id pointer: 0x7fffc08a3464\n  sysdata pointer: 0x7fffc08a3463\n  sysdata_size: 0\nOS_TaskValidateSystemData_Impl returned: -2\nOS_TaskFindIdBySystemData: validation failed, returning -2\nOS_TaskFindIdBySystemData: entry\n  task_id pointer: (nil)\n  sysdata pointer: 0x7fffc08a3463\n  sysdata_size: 1\nOS_TaskFindIdBySystemData: entry\n  task_id pointer: 0x7fffc08a3464\n  sysdata pointer: (nil)\n  sysdata_size: 1\nOS_TaskValidateSystemData_Impl returned: -2\nOS_TaskFindIdBySystemData: validation failed, returning -2\nOS_TaskFindIdBySystemData: entry\n  task_id pointer: 0x7fffc08a3464\n  sysdata pointer: 0x7fffc08a3463\n  sysdata_size: 0\nOS_TaskValidateSystemData_Impl returned: -2\nOS_TaskFindIdBySystemData: validation failed, returning -2\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskFindIdBySystemData:\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nbool OS_TaskIdMatchSystemData_Impl(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    const pthread_t *               target = (const pthread_t *)ref;\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return (pthread_equal(*target, impl->id) != 0);\n}\n...\nint32 OS_TaskValidateSystemData_Impl(const void *sysdata, size_t sysdata_size)\n{\n    if (sysdata == NULL || sysdata_size != sizeof(pthread_t))\n    {\n        return OS_INVALID_POINTER;\n    }\n    return OS_SUCCESS;\n}\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent's report is correct. The code discards const-qualification: OS_TaskFindIdBySystemData takes a const void *sysdata but passes it to OS_ObjectIdGetBySearch as (void *)sysdata, and the match callback OS_TaskIdMatchSystemData_Impl declares its first parameter as void *ref even though it does not modify the pointed-to object (it immediately casts ref to const pthread_t *). MISRA C 2023 R8.13 requires pointers to point to const-qualified types whenever possible; here the argument could and should be const-qualified (either change OS_ObjectIdGetBySearch/OS_ObjectMatchFunc_t to take a const void *arg and the callback to take const void *ref, or provide a documented justification for the non-const prototype). As written, and without justification, this is a violation of R8.13."
}