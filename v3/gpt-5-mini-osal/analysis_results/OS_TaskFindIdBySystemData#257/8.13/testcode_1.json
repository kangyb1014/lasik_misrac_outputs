{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ref' is declared as void *ref but is not modified and is immediately cast to const pthread_t *target. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 here the function should accept a const void *ref (and the OS_ObjectMatchFunc_t typedef should use a const-qualified argument) or otherwise document/justify why the non-const signature is required by the surrounding API. As written this is a violation (non-const pointer used where const would be appropriate).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskFindIdBySystemData code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2573.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskFindIdBySystemData as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskFindIdBySystemData:\n```c\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskFindIdBySystemData code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helpers: keep static to limit scope */\nstatic void OS_TaskFindIdBySystemData_LogBytes(const void *data, size_t size)\n{\n    FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n    if (f == NULL || data == NULL || size == 0)\n    {\n        if (f != NULL) fclose(f);\n        return;\n    }\n\n    const unsigned char *bytes = (const unsigned char *)data;\n    size_t i;\n    /* Limit amount of bytes written to avoid huge logs */\n    size_t max_bytes = (size > 64u) ? 64u : size;\n\n    fprintf(f, \"data[%zu] = \", max_bytes);\n    for (i = 0; i < max_bytes; ++i)\n    {\n        fprintf(f, \"%02X\", bytes[i]);\n        if (i + 1 < max_bytes) fprintf(f, \" \");\n    }\n    if (size > max_bytes)\n    {\n        fprintf(f, \" ... (total %zu bytes)\", size);\n    }\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nstatic void OS_TaskFindIdBySystemData_LogSimple(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n    if (f == NULL) return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry and parameters */\n    {\n        FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_TaskFindIdBySystemData: entry\\n\");\n            fprintf(f, \"  task_id pointer: %p\\n\", (void *)task_id);\n            fprintf(f, \"  sysdata pointer: %p\\n\", (void *)sysdata);\n            fprintf(f, \"  sysdata_size: %zu\\n\", sysdata_size);\n            fclose(f);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n\n    {\n        FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_TaskValidateSystemData_Impl returned: %d\\n\", (int)return_code);\n            fclose(f);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log the early return reason and preserve original behavior */\n        FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_TaskFindIdBySystemData: validation failed, returning %d\\n\", (int)return_code);\n            fclose(f);\n        }\n\n        return return_code;\n    }\n\n    /* Log contents of sysdata (first up to 64 bytes) to provide evidence of what was passed\n       This does not modify sysdata and reads it through a const-qualified pointer. */\n    if (sysdata != NULL && sysdata_size > 0)\n    {\n        FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"Preparing to call OS_ObjectIdGetBySearch with a (void *) cast of sysdata -> address %p\\n\", (void *)sysdata);\n            fclose(f);\n        }\n        OS_TaskFindIdBySystemData_LogBytes(sysdata, sysdata_size);\n    }\n    else\n    {\n        OS_TaskFindIdBySystemData_LogSimple(\"sysdata is NULL or size is 0\");\n    }\n\n    /* Call the underlying object search. Note: original code casts away const here; keep original logic. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n\n    {\n        FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ObjectIdGetBySearch returned: %d\\n\", (int)return_code);\n            fprintf(f, \"  token address: %p\\n\", (void *)&token);\n            fclose(f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        {\n            FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n            if (f != NULL)\n            {\n                /* Log the resolved task id value */\n                fprintf(f, \"OS_TaskFindIdBySystemData: found task id = %lu\\n\", (unsigned long)*task_id);\n                fclose(f);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_TaskFindIdBySystemData_LogSimple(\"OS_ObjectIdRelease called on token\");\n    }\n\n    {\n        FILE *f = fopen(\"/tmp/logs/2573.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_TaskFindIdBySystemData: exiting with return_code = %d\\n\", (int)return_code);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}