{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS is not initialized. If OS_DEBUG is implemented to call OS_printf (e.g. as a logging wrapper or macro that forwards to OS_printf), this creates indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating Rule 17.2 (functions shall not call themselves, directly or indirectly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskFindIdBySystemData code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2576.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskFindIdBySystemData as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskFindIdBySystemData:\n```c\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskFindIdBySystemData code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helpers that write directly to a file to avoid any dependency\n * on the system logging facilities (e.g. OS_printf / OS_DEBUG) which might\n * introduce indirect recursion. The logs go to /tmp/logs/2576.txt. */\nstatic void probe_ensure_log_dir(void)\n{\n    const char *dir = \"/tmp/logs\";\n    struct stat st;\n\n    if (stat(dir, &st) == 0)\n    {\n        if (S_ISDIR(st.st_mode))\n        {\n            return; /* already exists */\n        }\n        /* If something else exists with that name, we won't clobber it; just return */\n        return;\n    }\n\n    /* Try to create directory; ignore errors except when it is critical */\n    (void)mkdir(dir, 0775);\n}\n\nstatic void probe_log_msg(const char *fmt, ...)\n{\n    probe_ensure_log_dir();\n\n    FILE *f = fopen(\"/tmp/logs/2576.txt\", \"a\");\n    if (!f)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    char timestr[64];\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n        {\n            timestr[0] = '\\0';\n        }\n    }\n    else\n    {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s PID=%ld: \", timestr, (long)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function preserved as much as possible with probes inserted. */\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry and parameters */\n    probe_log_msg(\"ENTER OS_TaskFindIdBySystemData: task_id=%p, sysdata=%p, sysdata_size=%zu\",\n                  (void *)task_id, sysdata, sysdata_size);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    probe_log_msg(\"OS_TaskValidateSystemData_Impl returned %ld\", (long)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log_msg(\"EXIT OS_TaskFindIdBySystemData early with return_code=%ld\", (long)return_code);\n        return return_code;\n    }\n\n    probe_log_msg(\"Calling OS_ObjectIdGetBySearch: lock=OS_LOCK_MODE_GLOBAL, type=LOCAL_OBJID_TYPE, matcher=OS_TaskIdMatchSystemData_Impl, sysdata=%p\",\n                  sysdata);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n\n    probe_log_msg(\"OS_ObjectIdGetBySearch returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n        probe_log_msg(\"Match found: token_addr=%p, assigned task_id=%#lx\", (void *)&token, (unsigned long)(*task_id));\n\n        OS_ObjectIdRelease(&token);\n        probe_log_msg(\"Released token at %p\", (void *)&token);\n    }\n    else\n    {\n        probe_log_msg(\"No match found for sysdata=%p\", sysdata);\n    }\n\n    probe_log_msg(\"EXIT OS_TaskFindIdBySystemData with return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}