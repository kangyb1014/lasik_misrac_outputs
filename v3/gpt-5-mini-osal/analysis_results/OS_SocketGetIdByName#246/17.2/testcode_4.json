{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdRelease(token) calls OS_ObjectIdTransactionFinish(token, NULL). If OS_ObjectIdTransactionFinish performs any logging or console output (for example it calls OS_printf), the call chain can be: OS_ObjectIdRelease -> OS_ObjectIdTransactionFinish -> OS_printf -> OS_ConsoleWrite -> OS_ObjectIdGetById -> OS_ObjectIdRelease, which returns to the original function. This is an indirect recursive call cycle and therefore violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2466.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetIdByName:\n```c\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper to log control flow and state. Writes to /tmp/logs/2466.txt */\nstatic void OS_SocketGetIdByName_Probe(const char *stage, const osal_id_t *sock_id, const char *sock_name, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2466.txt\", \"a\");\n    if (f != NULL)\n    {\n        unsigned long id_val = 0UL;\n        /* Only attempt to read the pointed-to id after the find call to avoid reading uninitialized memory. */\n        if (stage != NULL && strcmp(stage, \"AFTER_FIND\") == 0)\n        {\n            if (sock_id != NULL)\n            {\n                id_val = (unsigned long)(*sock_id);\n            }\n        }\n\n        fprintf(f, \"OS_SocketGetIdByName_probe: stage=%s, sock_id_ptr=%p, sock_id_val=%lu, sock_name=\\\"%s\\\", return_code=%ld\\n\",\n                (stage ? stage : \"(null)\"), (void *)sock_id, id_val, (sock_name ? sock_name : \"(null)\"), (long)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Log entry (do not dereference sock_id here) */\n    OS_SocketGetIdByName_Probe(\"ENTER\", sock_id, sock_name, 0);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    /* Log just before calling the underlying object-id lookup */\n    OS_SocketGetIdByName_Probe(\"BEFORE_FIND\", sock_id, sock_name, 0);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    /* Log after the find call, include return code and the resolved id if available */\n    OS_SocketGetIdByName_Probe(\"AFTER_FIND\", sock_id, sock_name, return_code);\n\n    return return_code;\n}\n"
}