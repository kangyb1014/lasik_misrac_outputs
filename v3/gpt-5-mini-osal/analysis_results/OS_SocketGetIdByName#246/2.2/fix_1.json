{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_socket_log_probe(const char *stage, const void *sock_id_ptr, const char *sock_name, long rc)\n{\n    FILE *f = NULL;\n    struct stat st;\n\n    /* Ensure directory exists (best-effort). Ignore errors to avoid changing behavior. */\n    if (stat(\"/tmp/logs\", &st) != 0)\n    {\n        /* Try to create directory; if it fails, continue without crashing. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n    }\n\n    f = fopen(\"/tmp/logs/2462.txt\", \"a\");\n    if (!f)\n    {\n        /* If logging fails, do not affect program flow. */\n        return;\n    }\n\n    /* Timestamp */\n    {\n        time_t t = time(NULL);\n        char timestr[32];\n        if (t != (time_t)-1)\n        {\n            struct tm tm_buf;\n            if (localtime_r(&t, &tm_buf) != NULL)\n            {\n                strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n            }\n            else\n            {\n                strncpy(timestr, \"(time)\", sizeof(timestr));\n                timestr[sizeof(timestr)-1] = '\\0';\n            }\n        }\n        else\n        {\n            strncpy(timestr, \"(time)\", sizeof(timestr));\n            timestr[sizeof(timestr)-1] = '\\0';\n        }\n\n        /* Limit how much of the name we print to avoid buffer issues */\n        char name_preview[129] = {0};\n        if (sock_name != NULL)\n        {\n            /* Copy up to 128 chars, ensure NUL-termination */\n            strncpy(name_preview, sock_name, sizeof(name_preview)-1);\n            name_preview[sizeof(name_preview)-1] = '\\0';\n        }\n        else\n        {\n            strncpy(name_preview, \"(NULL)\", sizeof(name_preview)-1);\n        }\n\n        /* Write a single line with stage, pointers, name preview and rc */\n        fprintf(f, \"%s | stage=%s | sock_id=%p | sock_name_ptr=%p | sock_name=\\\"%s\\\" | rc=%ld\\n\",\n                timestr, stage, sock_id_ptr, (const void *)sock_name, name_preview, rc);\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Log entry and parameter values before checks */\n    os_socket_log_probe(\"enter\", (const void *)sock_id, sock_name, (long)0);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    os_socket_log_probe(\"after_check_sock_id\", (const void *)sock_id, sock_name, (long)0);\n\n    OS_CHECK_POINTER(sock_name);\n    os_socket_log_probe(\"after_check_sock_name\", (const void *)sock_id, sock_name, (long)0);\n\n    /* Call the underlying lookup and log the result */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n    os_socket_log_probe(\"after_find_by_name\", (const void *)sock_id, sock_name, (long)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp2rvi70tk/src/src/os/shared/src/osapi-sockets.c: In function 'os_socket_log_probe':\n/tmp/tmp2rvi70tk/src/src/os/shared/src/osapi-sockets.c:587:23: error: storage size of 'tm_buf' isn't known\n  587 |             struct tm tm_buf;\n      |                       ^~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/__/__/os/shared/src/osapi-sockets.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4221: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketGetIdByName as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <string.h>\n#include <time.h>\n#include <unistd.h>\n\nstatic void os_socket_log_probe(const char *stage, const void *sock_id_ptr, const char *sock_name, long rc)\n{\n    FILE *f = NULL;\n    struct stat st;\n\n    /* Ensure directory exists (best-effort). Ignore errors to avoid changing behavior. */\n    if (stat(\"/tmp/logs\", &st) != 0)\n    {\n        /* Try to create directory; if it fails, continue without crashing. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n    }\n\n    f = fopen(\"/tmp/logs/2462.txt\", \"a\");\n    if (!f)\n    {\n        /* If logging fails, do not affect program flow. */\n        return;\n    }\n\n    /* Timestamp */\n    {\n        time_t t = time(NULL);\n        char timestr[32];\n        if (t != (time_t)-1)\n        {\n            struct tm tm_buf;\n            if (localtime_r(&t, &tm_buf) != NULL)\n            {\n                strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n            }\n            else\n            {\n                strncpy(timestr, \"(time)\", sizeof(timestr));\n                timestr[sizeof(timestr)-1] = '\\0';\n            }\n        }\n        else\n        {\n            strncpy(timestr, \"(time)\", sizeof(timestr));\n            timestr[sizeof(timestr)-1] = '\\0';\n        }\n\n        /* Limit how much of the name we print to avoid buffer issues */\n        char name_preview[129] = {0};\n        if (sock_name != NULL)\n        {\n            /* Copy up to 128 chars, ensure NUL-termination */\n            strncpy(name_preview, sock_name, sizeof(name_preview)-1);\n            name_preview[sizeof(name_preview)-1] = '\\0';\n        }\n        else\n        {\n            strncpy(name_preview, \"(NULL)\", sizeof(name_preview)-1);\n        }\n\n        /* Write a single line with stage, pointers, name preview and rc */\n        fprintf(f, \"%s | stage=%s | sock_id=%p | sock_name_ptr=%p | sock_name=\\\"%s\\\" | rc=%ld\\n\",\n                timestr, stage, sock_id_ptr, (const void *)sock_name, name_preview, rc);\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Log entry and parameter values before checks */\n    os_socket_log_probe(\"enter\", (const void *)sock_id, sock_name, (long)0);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    os_socket_log_probe(\"after_check_sock_id\", (const void *)sock_id, sock_name, (long)0);\n\n    OS_CHECK_POINTER(sock_name);\n    os_socket_log_probe(\"after_check_sock_name\", (const void *)sock_id, sock_name, (long)0);\n\n    /* Call the underlying lookup and log the result */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n    os_socket_log_probe(\"after_find_by_name\", (const void *)sock_id, sock_name, (long)return_code);\n\n    return return_code;\n}\n",
  "explanation": "The compilation error was caused by the compiler not knowing the definition of struct tm. I added the appropriate standard headers (<time.h>) so struct tm and time functions are defined. I also included <stdio.h>, <sys/stat.h>, <string.h>, and <unistd.h> to ensure the used functions and types (FILE, stat/mkdir, strncpy, etc.) are declared. No logic of the original functions was changed."
}