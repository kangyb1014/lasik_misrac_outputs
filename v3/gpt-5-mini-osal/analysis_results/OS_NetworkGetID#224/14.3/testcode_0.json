{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression 'OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS' is effectively invariant: OS_NetworkGetID_Impl always returns OS_SUCCESS (0), so the comparison is always false. This is not an infinite-loop or the permitted do-while constant-false case, so Rule 14.3 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetID code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2245.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NetworkGetID as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetID:\n```c\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n\n    /* always delegate to low-level API */\n    if (OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS)\n    {\n        /* return a hardcoded value on failure */\n        return -1;\n    }\n\n    return IdBuf;\n}\n```\n</target_code>\nPlease provide the modified OS_NetworkGetID code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper logging function that appends probe information to the log file. */\nstatic void OS_NetworkGetID_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2245.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging; do not alter program flow */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n    int32 rc;\n\n    OS_NetworkGetID_log(\"ENTER: OS_NetworkGetID\");\n    OS_NetworkGetID_log(\"CALL: OS_NetworkGetID_Impl(&IdBuf)\");\n\n    /* always delegate to low-level API */\n    rc = OS_NetworkGetID_Impl(&IdBuf);\n\n    OS_NetworkGetID_log(\"RETURNED: OS_NetworkGetID_Impl -> rc=%d\", rc);\n    OS_NetworkGetID_log(\"STATE: IdBuf=%d\", IdBuf);\n\n    if (rc != OS_SUCCESS)\n    {\n        OS_NetworkGetID_log(\"BRANCH: rc != OS_SUCCESS -> returning -1\");\n        /* return a hardcoded value on failure */\n        return -1;\n    }\n\n    OS_NetworkGetID_log(\"BRANCH: rc == OS_SUCCESS -> returning IdBuf=%d\", IdBuf);\n    return IdBuf;\n}\n"
}