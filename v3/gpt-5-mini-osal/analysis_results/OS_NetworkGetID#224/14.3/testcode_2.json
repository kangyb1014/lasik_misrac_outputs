{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nOS_NetworkGetID_Impl always returns the constant OS_SUCCESS (0). As a result the controlling expression in the caller if (OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS) is invariant (always false). This is not one of the permitted exceptions (not an infinite loop nor the permitted do-while pattern), so Rule 14.3 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetID code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2245.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NetworkGetID as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetID:\n```c\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n\n    /* always delegate to low-level API */\n    if (OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS)\n    {\n        /* return a hardcoded value on failure */\n        return -1;\n    }\n\n    return IdBuf;\n}\n```\n</target_code>\nPlease provide the modified OS_NetworkGetID code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Minimal type to match surrounding codebase expectations */\ntypedef int32_t int32;\n\n/* Provide a local definition for OS_SUCCESS to make this translation unit self-contained.\n   This matches the reported scenario where the low-level implementation returns 0. */\nstatic const int OS_SUCCESS = 0;\n\n/* Prototype for the low-level implementation. The real implementation is provided elsewhere. */\nextern int32 OS_NetworkGetID_Impl(int32 *IdBuf);\n\n/* Simple probe logger that appends messages to the required log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2245.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging is not possible, preserve original behavior. */\n    }\n\n    /* Timestamp for easier ordering of events */\n    time_t t = time(NULL);\n    struct tm tmv;\n    if (localtime_r(&t, &tmv) == NULL)\n    {\n        fprintf(f, \"[unknown time] \");\n    }\n    else\n    {\n        char buf[64];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tmv) > 0)\n        {\n            fprintf(f, \"%s \", buf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n\n    probe_log(\"OS_NetworkGetID: entered; &IdBuf=%p\", (void *)&IdBuf);\n\n    /* always delegate to low-level API */\n    int32 impl_result = OS_NetworkGetID_Impl(&IdBuf);\n    probe_log(\"OS_NetworkGetID: OS_NetworkGetID_Impl returned %d; IdBuf (raw)=%d\", (int)impl_result, (int)IdBuf);\n\n    if (impl_result != OS_SUCCESS)\n    {\n        /* Log the taken failure path and value returned to caller. */\n        probe_log(\"OS_NetworkGetID: impl_result (%d) != OS_SUCCESS (%d) -> returning -1\", (int)impl_result, (int)OS_SUCCESS);\n\n        /* return a hardcoded value on failure */\n        return -1;\n    }\n\n    probe_log(\"OS_NetworkGetID: impl_result == OS_SUCCESS (%d) -> returning IdBuf=%d\", (int)OS_SUCCESS, (int)IdBuf);\n\n    return IdBuf;\n}\n"
}