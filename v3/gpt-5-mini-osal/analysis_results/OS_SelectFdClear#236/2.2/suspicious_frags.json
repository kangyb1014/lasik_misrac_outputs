{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdClear:\n```c\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SelectFdClear:\nsize_t size\n...\nint32 OS_SelectFdAdd(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Sets the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift sets the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] |= 1 << (local_id & 0x7);\n    }\n\n    return return_code;\n}\n...\nbool OS_SelectFdIsSet(const OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    BUGCHECK(Set != NULL, false);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code != OS_SUCCESS)\n    {\n        return false;\n    }\n\n    /*\n     * Returns boolean for if the bit in the uint8 object_ids array that corresponds\n     * to the local_id is set where local_id >> 3 determines the array element,\n     * and the mask/shift checks the bit within that element.\n     */\n    return ((Set->object_ids[local_id >> 3] >> (local_id & 0x7)) & 0x1);\n}\n...\nint32 OS_SelectFdZero(OS_FdSet *Set)\n{\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    memset(Set, 0, sizeof(OS_FdSet));\n    return OS_SUCCESS;\n}\n...\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n...\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "memset(Set, 0, sizeof(OS_FdSet));",
    "Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));",
    "OS_ObjectIdRelease(&token);",
    "return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);",
    "Set->object_ids[local_id >> 3] |= 1 << (local_id & 0x7);",
    "return ((Set->object_ids[local_id >> 3] >> (local_id & 0x7)) & 0x1);"
  ],
  "explanation": "I flagged the explicit bit-manipulation lines (set/clear/check) and the memset because these are data-modifying operations that could be dead (i.e. executed but have no observable effect on program behaviour) if the fd set being modified is not subsequently used or if the surrounding checks/macros become no-ops in some build configurations. I also flagged the wrapper call to OS_SelectMultiple_Impl and the OS_ObjectIdRelease(&token) call because thin wrapper functions or token-release calls sometimes become redundant (no-op) in alternate builds or configurations and thus merit investigation for possible dead code.\n\nOther code fragments are not flagged because they are necessary control/validation operations or clearly have observable behaviour: variable declarations, parameter checks (OS_CHECK_POINTER / BUGCHECK), the calls that map/validate object IDs (OS_ObjectIdToArrayIndex, OS_ObjectIdGetById), the conditional tests on return_code, and the final return statements all affect control flow or error propagation and therefore are unlikely to be dead code. Comments and explanatory text are non-executable and not relevant to this rule. These non-flagged areas should not need investigation for Rule 2.2 based on the provided snippets."
}