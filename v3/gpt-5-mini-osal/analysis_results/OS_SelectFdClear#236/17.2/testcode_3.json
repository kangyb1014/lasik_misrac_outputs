{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG. If OS_DEBUG is implemented using OS_printf (or otherwise invokes OS_printf, e.g. OS_DEBUG -> OS_printf or a chain that leads back to OS_printf), this produces an indirect recursive call sequence: OS_printf -> OS_DEBUG -> ... -> OS_printf, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectFdClear code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2366.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectFdClear as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdClear:\n```c\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectFdClear code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - writes human-readable log lines to /tmp/logs/2366.txt\n * Does not call any OS_ APIs to avoid contaminating any potential OS_printf/OS_DEBUG\n * call chains. Uses standard C file I/O only. */\nstatic void OS_SelectFdClear_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2366.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* Log entry and incoming parameters */\n    OS_SelectFdClear_Log(\"ENTER: OS_SelectFdClear Set=%p objid=%u\", (void *)Set, (unsigned) objid);\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n\n    /* Log result of ObjectId->ArrayIndex translation */\n    OS_SelectFdClear_Log(\"After OS_ObjectIdToArrayIndex: return_code=%d local_id=%u\", (int) return_code, (unsigned) local_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        unsigned idx = (unsigned)(local_id >> 3);\n        unsigned bit  = (unsigned)(local_id & 0x7);\n        unsigned mask = (1u << bit);\n        unsigned before = 0u;\n        unsigned after  = 0u;\n\n        /* Capture the value before modification, if possible */\n        /* Protect against unlikely invalid idx by attempting to read; keep original logic otherwise. */\n        before = (unsigned) Set->object_ids[idx];\n        after  = (unsigned) (before & ~mask);\n\n        /* Log the calculation that will be performed */\n        OS_SelectFdClear_Log(\"Clearing bit: local_id=%u idx=%u bit=%u mask=0x%02X before=0x%02X will_become=0x%02X\",\n                             (unsigned) local_id, idx, bit, mask, before, after);\n\n        /* Perform the original operation (preserve original logic) */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n\n        /* Log final state after modification */\n        OS_SelectFdClear_Log(\"UPDATED: idx=%u new_value=0x%02X\", idx, (unsigned) Set->object_ids[idx]);\n    }\n    else\n    {\n        OS_SelectFdClear_Log(\"No update performed because return_code != OS_SUCCESS\");\n    }\n\n    OS_SelectFdClear_Log(\"EXIT: OS_SelectFdClear return_code=%d\", (int) return_code);\n\n    return return_code;\n}\n"
}