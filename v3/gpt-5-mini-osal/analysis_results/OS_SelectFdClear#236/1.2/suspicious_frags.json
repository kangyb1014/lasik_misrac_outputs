{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdClear:\n```c\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SelectFdClear:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\ntypedef struct\n{\n    uint8 object_ids[(OS_MAX_NUM_OPEN_FILES + 7) / 8];\n} OS_FdSet\n...\ntypedef uint32 osal_id_t\n...\ntypedef uint32 osal_index_t\n...\ntypedef int32_t   int32\n...\n#define OS_OBJECT_TYPE_OS_STREAM 0x06\n...\n#define OS_SUCCESS (0)\n...\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I inspected the provided function OS_SelectFdClear and the related code. I found no uses of compiler-specific language extensions that are explicitly documented as extensions (for example: __asm__, __attribute__, __extension__, typeof, statement-expressions ({ ... }), nested functions, zero-length arrays, compiler-specific keywords or pragmas, GCC/clang/MSVC-specific builtins, or other non-standard tokens). Specific notes:\n\n- Bitwise operations and shifts (local_id >> 3, 1 << (local_id & 0x7)) are standard C, not compiler extensions. (Potential undefined-behavior concerns due to large shifts are correctness issues, not language-extension usage.)\n- The array declaration uint8 object_ids[(OS_MAX_NUM_OPEN_FILES + 7) / 8]; uses a macro expression for size \u2014 this is a normal compile-time constant expression if OS_MAX_NUM_OPEN_FILES is a macro/constant, and is not an extension.\n- Variadic functions and va_list/vsnprintf usage in OS_printf are standard C library facilities.\n- Macros shown (OS_CHECK_POINTER, BUGCHECK, BUGCHECK_VOID) are not expanded in the snippets, but their visible expansions do not show any compiler-extension tokens; nothing in the shown expansions indicates use of extensions.\n\nBecause none of the above constructs are compiler-specific extensions, there are no code fragments to report for investigation under MISRA C 2023 Rule 1.2."
}