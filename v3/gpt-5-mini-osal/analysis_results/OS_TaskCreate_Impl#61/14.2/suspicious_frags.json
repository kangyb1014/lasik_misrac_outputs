{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate_Impl:\n```c\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TaskCreate_Impl:\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nextern OS_task_internal_record_t OS_task_table[OS_MAX_TASKS]\n...\nOS_impl_task_internal_record_t OS_impl_task_table[OS_MAX_TASKS]\n...\nint32 OS_Posix_InternalTaskCreate_Impl(pthread_t *pthr, osal_priority_t priority, size_t stacksz,\n                                       PthreadFuncPtr_t entry, void *entry_arg)\n{\n    int                return_code = 0;\n    pthread_attr_t     custom_attr;\n    struct sched_param priority_holder;\n\n    /*\n     ** Initialize the pthread_attr structure.\n     ** The structure is used to set the stack and priority\n     */\n    memset(&custom_attr, 0, sizeof(custom_attr));\n    return_code = pthread_attr_init(&custom_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_init error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     * Adjust the stack size parameter.\n     *\n     * POSIX has additional restrictions/limitations on the stack size of tasks that\n     * other RTOS environments may not have.  Specifically POSIX says that the stack\n     * size must be at least PTHREAD_STACK_MIN and may also need to be a multiple of the\n     * system page size.\n     *\n     * Rounding up means the user might get a bigger stack than they requested, but\n     * that should not break anything aside from consuming extra memory.\n     */\n    if (stacksz < PTHREAD_STACK_MIN)\n    {\n        stacksz = PTHREAD_STACK_MIN;\n    }\n\n    stacksz += POSIX_GlobalVars.PageSize - 1;\n    stacksz -= stacksz % POSIX_GlobalVars.PageSize;\n\n    /*\n    ** Set the Stack Size\n    */\n    return_code = pthread_attr_setstacksize(&custom_attr, stacksz);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_setstacksize error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Set the thread to be joinable by default\n    */\n    return_code = pthread_attr_setdetachstate(&custom_attr, PTHREAD_CREATE_JOINABLE);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_setdetachstate error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Test to see if the original main task scheduling priority worked.\n    ** If so, then also set the attributes for this task.  Otherwise attributes\n    ** are left at default.\n    */\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /*\n        ** Set the scheduling inherit attribute to EXPLICIT\n        */\n        return_code = pthread_attr_setinheritsched(&custom_attr, PTHREAD_EXPLICIT_SCHED);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setinheritsched error in OS_TaskCreate, errno = %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set the scheduling policy\n        ** The best policy is determined during initialization\n        */\n        return_code = pthread_attr_setschedpolicy(&custom_attr, POSIX_GlobalVars.SelectedRtScheduler);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setschedpolity error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set priority\n        */\n        return_code = pthread_attr_getschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_getschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        priority_holder.sched_priority = OS_PriorityRemap(priority);\n        return_code                    = pthread_attr_setschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n    } /* End if user is root */\n\n    /*\n     ** Create thread\n     */\n    return_code = pthread_create(pthr, &custom_attr, entry, entry_arg);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_create error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     ** Free the resources that are no longer needed\n     ** Since the task is now running - pthread_create() was successful -\n     ** Do not treat anything bad that happens after this point as fatal.\n     ** The task is running, after all - better to leave well enough alone.\n     */\n    return_code = pthread_attr_destroy(&custom_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_destroy error in OS_TaskCreate: %s\\n\", strerror(return_code));\n    }\n\n    return OS_SUCCESS;\n}\n...\nstatic int OS_PriorityRemap(osal_priority_t InputPri)\n{\n    int OutputPri;\n\n    if (InputPri == 0)\n    {\n        /* use the \"MAX\" local priority only for OSAL tasks with priority=0 */\n        OutputPri = POSIX_GlobalVars.PriLimits.PriorityMax;\n    }\n    else if (InputPri >= OS_MAX_TASK_PRIORITY)\n    {\n        /* use the \"MIN\" local priority only for OSAL tasks with priority=255 */\n        OutputPri = POSIX_GlobalVars.PriLimits.PriorityMin;\n    }\n    else\n    {\n        /*\n         * Spread the remainder of OSAL priorities over the remainder of local priorities\n         *\n         * Note OSAL priorities use the VxWorks style with zero being the\n         * highest and OS_MAX_TASK_PRIORITY being the lowest, this inverts it\n         */\n        OutputPri = (OS_MAX_TASK_PRIORITY - 1) - (int)InputPri;\n\n        OutputPri *= (POSIX_GlobalVars.PriLimits.PriorityMax - POSIX_GlobalVars.PriLimits.PriorityMin) - 2;\n        OutputPri += OS_MAX_TASK_PRIORITY / 2;\n        OutputPri /= (OS_MAX_TASK_PRIORITY - 2);\n        OutputPri += POSIX_GlobalVars.PriLimits.PriorityMin + 1;\n    }\n\n    return OutputPri;\n}\n...\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no for statements in the provided target function OS_TaskCreate_Impl or in any of the supplied related functions (OS_Posix_InternalTaskCreate_Impl, OS_PriorityRemap, OS_PthreadTaskEntry, OS_ObjectIdFromToken, OS_ObjectIndexFromToken). MISRA C 2023 Rule 14.2 concerns the form of for loops; because there are no for loops present in the given code fragments, there are no code fragments that require investigation for this rule. Note: if any macros referenced here (for example OS_OBJECT_TABLE_GET) expand to code containing for statements, those macro expansions would need to be inspected; no such macro definitions or other files containing for loops were provided, so they cannot be flagged from the supplied source."
}