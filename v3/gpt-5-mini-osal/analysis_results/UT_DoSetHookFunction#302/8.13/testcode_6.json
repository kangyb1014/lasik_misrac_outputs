{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member 'void * Addr;' is used merely to hold and compare addresses (e.g. Value.Addr is compared to NULL and stored in stub entries) and is not used to modify the object pointed to. According to MISRA C 2023 Rule 8.13, such pointers should be const-qualified when possible (e.g. 'const void * Addr;'). Because the pointer type is not const-qualified even though the code only observes/stores the address (does not modify the pointee), this is a violation. (Fix: declare the member as 'const void * Addr' where compatible with the rest of the code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "static void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *logf = fopen(\"/tmp/logs/3023.txt\", \"a\");\n\n    /* Log entry and key pieces of state relevant to the reported violation */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_DoSetHookFunction ENTRY: Value.Addr=%p UserObj=%p IsVarg=%d\\n\",\n                (void *)Value.Addr, UserObj, (int)IsVarg);\n        fflush(logf);\n    }\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After first UT_GetStubEntry: StubPtr=%p (looking for FuncKey/EntryType)\\n\", (void *)StubPtr);\n        fflush(logf);\n    }\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"No existing stub and Value.Addr != NULL -> search for UNUSED slot\\n\");\n            fflush(logf);\n        }\n\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After UT_GetStubEntry(UNUSED): StubPtr=%p\\n\", (void *)StubPtr);\n            fflush(logf);\n        }\n\n        if (StubPtr == NULL)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Abort: cannot allocate stub - UT_MAX_FUNC_STUBS too low\\n\");\n                fflush(logf);\n                fclose(logf);\n            }\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n            return; /* In case UtAssert_Abort returns, preserve function flow */\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Before final branch: Value.Addr=%p StubPtr=%p\\n\", (void *)Value.Addr, (void *)StubPtr);\n        fflush(logf);\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Deleting stub entry at %p (Value.Addr is NULL)\\n\", (void *)StubPtr);\n            fflush(logf);\n        }\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Setting stub entry at %p: UserObj=%p Value.Addr=%p IsVarg=%d\\n\",\n                    (void *)StubPtr, UserObj, (void *)Value.Addr, (int)IsVarg);\n            fflush(logf);\n        }\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Stub entry set successfully at %p\\n\", (void *)StubPtr);\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fclose(logf);\n    }\n}\n"
}