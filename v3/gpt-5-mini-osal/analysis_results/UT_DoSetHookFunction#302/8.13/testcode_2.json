{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe condition tests Value.Addr (declared as void * in UT_HookFuncPtr_t) against NULL. Since Addr is only inspected and copied (not used to modify the pointee), it could/should be declared as const void * and therefore the current non-const declaration violates MISRA C 2023 Rule 8.13. (If Addr is intentionally used to hold pointers to mutable data or to function pointers that must not be const-qualified, then making it const may be inappropriate; but based on the shown usage the non-const pointer is avoidable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = fopen(\"/tmp/logs/3023.txt\", \"a\");\n\n    /* Log function entry and parameter state */\n    if (log != NULL)\n    {\n        /* Print basic inputs and pointer values relevant to the violation scenario */\n        fprintf(log, \"UT_DoSetHookFunction ENTRY: FuncKey=%u EntryType=%u Value.Addr=%p UserObj=%p IsVarg=%d\\n\",\n                (unsigned)FuncKey, (unsigned)EntryType, (void *)Value.Addr, UserObj, IsVarg ? 1 : 0);\n        fflush(log);\n    }\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (log != NULL)\n    {\n        fprintf(log, \"After UT_GetStubEntry(primary): StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Branch: no existing entry and Value.Addr != NULL -> search for unused slot\\n\");\n            fflush(log);\n        }\n\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (log != NULL)\n        {\n            fprintf(log, \"After UT_GetStubEntry(UNUSED): StubPtr=%p\\n\", (void *)StubPtr);\n            fflush(log);\n        }\n\n        if (StubPtr == NULL)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Abort condition reached: cannot set hook function - UT_MAX_FUNC_STUBS too low?\\n\");\n                fclose(log);\n            }\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n            return;\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        if (log != NULL)\n        {\n            fprintf(log, \"Branch: delete entry (Value.Addr == NULL && StubPtr != NULL). Clearing entry at %p\\n\", (void *)StubPtr);\n            fflush(log);\n        }\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        if (log != NULL)\n        {\n            fprintf(log, \"Branch: set entry at %p. Setting FuncKey=%u EntryType=%u CallbackArg=%p Ptr.Addr=%p IsVarg=%d\\n\",\n                    (void *)StubPtr, (unsigned)FuncKey, (unsigned)EntryType, UserObj, (void *)Value.Addr, IsVarg ? 1 : 0);\n            fflush(log);\n        }\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        if (log != NULL)\n        {\n            /* Log the resulting state that was just stored (print pointer values of interest) */\n            fprintf(log, \"After set: entry at %p now has FuncKey=%u EntryType=%u CallbackArg=%p Ptr.Addr=%p IsVarg=%d\\n\",\n                    (void *)StubPtr, (unsigned)StubPtr->FuncKey, (unsigned)StubPtr->EntryType, (void *)StubPtr->Data.Cb.CallbackArg,\n                    (void *)StubPtr->Data.Cb.Ptr.Addr, StubPtr->Data.Cb.IsVarg ? 1 : 0);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fclose(log);\n    }\n}\n"
}