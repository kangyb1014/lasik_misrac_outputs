{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *UserObj' is not const-qualified even though UT_DoSetHookFunction does not modify the pointed-to object (it only stores the pointer into StubPtr->Data.Cb.CallbackArg). Per MISRA C 2023 Rule 8.13 this should be 'const void *UserObj' (and the stored CallbackArg adjusted accordingly) unless the function or later users actually modify the pointee. Thus the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe logging helper - writes control flow/state to /tmp/logs/3023.txt */\nstatic void UT_LogHook(const char *stage, UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj, bool IsVarg, UT_StubTableEntry_t *StubPtr)\n{\n    FILE *f = fopen(\"/tmp/logs/3023.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not disturb normal flow */\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] Stage: %s\\n\", (long)t, stage ? stage : \"(null)\");\n\n    /* Log the incoming parameters */\n    /* Cast numeric/enum-like types to unsigned long long for portability in printing */\n    fprintf(f, \"  FuncKey=%llu EntryType=%llu Value.Addr=%p UserObj=%p IsVarg=%d StubPtr=%p\\n\",\n            (unsigned long long)FuncKey,\n            (unsigned long long)EntryType,\n            (void *)Value.Addr,\n            UserObj,\n            (int)IsVarg,\n            (void *)StubPtr);\n\n    /* If a stub entry exists, attempt to log its contents (keeps same field names as original code) */\n    if (StubPtr != NULL)\n    {\n        /* Some fields are pointers, some are likely integer/enum types */\n        fprintf(f, \"  StubPtr->FuncKey=%llu StubPtr->EntryType=%llu\\n\",\n                (unsigned long long)StubPtr->FuncKey,\n                (unsigned long long)StubPtr->EntryType);\n\n        /* Log callback-specific data if present in the struct */\n        /* Accessing these fields mirrors the original function and therefore should be valid here */\n        fprintf(f, \"  StubPtr->Data.Cb.CallbackArg=%p StubPtr->Data.Cb.Ptr=%p StubPtr->Data.Cb.IsVarg=%d\\n\",\n                StubPtr->Data.Cb.CallbackArg,\n                (void *)StubPtr->Data.Cb.Ptr,\n                (int)StubPtr->Data.Cb.IsVarg);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry with initial parameters */\n    UT_LogHook(\"entry\", FuncKey, EntryType, Value, UserObj, IsVarg, NULL);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n\n    /* Log after initial search */\n    UT_LogHook(\"after_initial_search\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        /* Log after attempting to allocate unused slot */\n        UT_LogHook(\"after_allocate_unused\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        if (StubPtr == NULL)\n        {\n            UT_LogHook(\"abort_cannot_set_hook\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_LogHook(\"deleting_entry\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n        UT_ClearStubEntry(StubPtr);\n\n        /* Log state after delete */\n        UT_LogHook(\"after_delete\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_LogHook(\"setting_entry_before\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        /* Log state after set */\n        UT_LogHook(\"setting_entry_after\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n    }\n\n    /* Final log for exit path */\n    UT_LogHook(\"exit\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n}\n"
}