{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_SymbolTableDump_Impl is declared to take a non-const char * (for example: int32 OS_SymbolTableDump_Impl(char *filename, size_t SizeLimit)) but does not modify the string contents, then this is a violation of MISRA C 2023 Rule 8.13. The pointer parameter should be declared as const char *filename whenever the function does not modify the pointed-to data. (If, instead, OS_SymbolTableDump_Impl is already declared to take const char *, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append messages to /tmp/logs/2163.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2163.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fclose(f);\n}\n\n/* Safe string length limited to OS_MAX_LOCAL_PATH_LEN if that macro is available. */\nstatic size_t safe_strnlen(const char *s, size_t maxlen)\n{\n    size_t i = 0;\n    if (s == NULL)\n    {\n        return 0u;\n    }\n    while ((i < maxlen) && (s[i] != '\\0'))\n    {\n        ++i;\n    }\n    return i;\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /* Log entry and input state */\n    probe_log(\"[ENTRY] OS_SymbolTableDump called\\n\");\n    probe_log(\"  input filename pointer=%p\\n\", (void *)filename);\n    if (filename != NULL)\n    {\n        /* Limit how much we log from filename to avoid overruns in logs */\n        size_t fn_len = safe_strnlen(filename, OS_MAX_LOCAL_PATH_LEN);\n        probe_log(\"  input filename (len=%zu)='%.*s'\\n\", fn_len, (int)fn_len, filename);\n    }\n    probe_log(\"  input SizeLimit=%zu\\n\", SizeLimit);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    probe_log(\"  OS_TranslatePath returned %d\\n\", return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"[EXIT] OS_SymbolTableDump early return after TranslatePath: %d\\n\", return_code);\n        return return_code;\n    }\n\n    /* Log the translated path (before any further operations) */\n    {\n        size_t tlen = safe_strnlen(translated_path, OS_MAX_LOCAL_PATH_LEN);\n        probe_log(\"  translated_path addr=%p len=%zu content='%.*s'\\n\",\n                  (void *)translated_path, tlen, (int)tlen, translated_path);\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    probe_log(\"  OS_ObjectIdTransactionInit returned %d token_addr=%p\\n\", return_code, (void *)&token);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"[EXIT] OS_SymbolTableDump early return after TransactionInit: %d\\n\", return_code);\n        return return_code;\n    }\n\n    /*\n     * Probe: record translated_path before calling implementation\n     * and after calling it to detect whether the impl modifies the buffer.\n     */\n    {\n        size_t before_len = safe_strnlen(translated_path, OS_MAX_LOCAL_PATH_LEN);\n        probe_log(\"  BEFORE Impl: translated_path addr=%p len=%zu content='%.*s'\\n\",\n                  (void *)translated_path, before_len, (int)before_len, translated_path);\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    /* Log return and probe translated_path afterwards to detect modifications */\n    probe_log(\"  OS_SymbolTableDump_Impl returned %d\\n\", return_code);\n    {\n        size_t after_len = safe_strnlen(translated_path, OS_MAX_LOCAL_PATH_LEN);\n        probe_log(\"  AFTER Impl: translated_path addr=%p len=%zu content='%.*s'\\n\",\n                  (void *)translated_path, after_len, (int)after_len, translated_path);\n    }\n\n    OS_ObjectIdTransactionCancel(&token);\n    probe_log(\"  OS_ObjectIdTransactionCancel called token_addr=%p\\n\", (void *)&token);\n\n    probe_log(\"[EXIT] OS_SymbolTableDump returning %d\\n\", return_code);\n\n    return return_code;\n}\n"
}