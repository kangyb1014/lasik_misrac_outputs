{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr. Nothing in the code guarantees that the object backing VirtualPath (and therefore the subobject starting at name_ptr) has at least OS_MAX_FILE_NAME accessible bytes. If name_ptr points near the end of the caller-provided buffer, memchr may access bytes beyond that object (for example: VirtualPath is a tight allocation whose null terminator occurs before name_ptr + OS_MAX_FILE_NAME but the allocated array does not extend that far). This would be an out-of-bounds access and thus a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2169.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper - writes an entry to /tmp/logs/2169.txt with a timestamp.\n * Kept small and self-contained so it can be compiled into the file with the\n * original OS_SymbolTableDump implementation. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)(-1))\n    {\n        struct tm tm_buff;\n        if (localtime_r(&t, &tm_buff) != NULL)\n        {\n            char timebuf[32];\n            if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buff) > 0)\n            {\n                fprintf(f, \"%s - \", timebuf);\n            }\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* A small safe string-print helper to limit output length of character arrays. */\nstatic void probe_log_str(const char *label, const char *s, size_t maxlen)\n{\n    size_t len = 0;\n    if (s != NULL)\n    {\n        /* Use strnlen to avoid reading beyond the buffer provided */\n        len = strnlen(s, maxlen);\n    }\n    probe_log(\"%s (len=%zu): %.*s\", label, len, (int)len, (s != NULL) ? s : \"(null)\");\n}\n\n/* The original function with inserted probes. Logic and control flow retained. */\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Log entry and parameters */\n    probe_log(\"ENTER: OS_SymbolTableDump called. filename=%p, SizeLimit=%zu\", (const void *)filename, SizeLimit);\n    if (filename != NULL)\n    {\n        /* Log the user-provided filename up to a reasonable length to avoid over-read */\n        probe_log_str(\"filename\", filename, 1024);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n    probe_log(\"After OS_CHECK_POINTER\");\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    probe_log(\"OS_TranslatePath returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"EXIT: OS_SymbolTableDump due to TranslatePath failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    /* Log the translated path safely */\n    probe_log_str(\"translated_path\", translated_path, sizeof(translated_path));\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    probe_log(\"Attempting OS_ObjectIdTransactionInit (global lock)\");\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    probe_log(\"OS_ObjectIdTransactionInit returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"EXIT: OS_SymbolTableDump due to ObjectIdTransactionInit failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    /* Log token properties without assuming internal layout; print size and address */\n    probe_log(\"Token address=%p, token_size=%zu\", (void *)&token, sizeof(token));\n\n    probe_log(\"Calling OS_SymbolTableDump_Impl with SizeLimit=%zu\", SizeLimit);\n    probe_log_str(\"OS_SymbolTableDump_Impl translated_path\", translated_path, sizeof(translated_path));\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n    probe_log(\"OS_SymbolTableDump_Impl returned %d\", (int)return_code);\n\n    OS_ObjectIdTransactionCancel(&token);\n    probe_log(\"OS_ObjectIdTransactionCancel called\");\n\n    probe_log(\"EXIT: OS_SymbolTableDump returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}