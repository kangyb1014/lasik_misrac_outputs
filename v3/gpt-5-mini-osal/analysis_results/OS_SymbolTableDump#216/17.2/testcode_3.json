{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf can call OS_DEBUG when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER. If the OS_DEBUG macro/function is implemented by invoking OS_printf (common in logging systems), this produces indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating MISRA C 2023 Rule 17.2. (Similarly, BUGCHECK_VOID could invoke a logging path that calls OS_printf, producing the same indirect recursive scenario.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2166.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends diagnostics to /tmp/logs/2166.txt.\n * Uses only standard C file I/O to avoid any project logging helpers\n * (so as not to trigger indirect recursion with OS_printf/OS_DEBUG).\n */\nstatic void os_symtab_dump_log(const char *event, const char *filename_in, const char *translated_path, int return_code, size_t SizeLimit, const void *token)\n{\n    FILE *f = fopen(\"/tmp/logs/2166.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_SymbolTableDump] %s\\n\", event);\n    fprintf(f, \"  filename_in   = %s\\n\", filename_in ? filename_in : \"(null)\");\n    fprintf(f, \"  translated    = %s\\n\", translated_path ? translated_path : \"(null)\");\n    fprintf(f, \"  SizeLimit     = %zu\\n\", SizeLimit);\n    fprintf(f, \"  return_code   = %d\\n\", return_code);\n    fprintf(f, \"  token addr    = %p\\n\", token);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Log entry and input state */\n    os_symtab_dump_log(\"entry\", filename, NULL, 0, SizeLimit, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    /* Log result of path translation */\n    os_symtab_dump_log(\"after OS_TranslatePath\", filename, translated_path, (int)return_code, SizeLimit, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log early return due to translation failure */\n        os_symtab_dump_log(\"return (translate failure)\", filename, translated_path, (int)return_code, SizeLimit, NULL);\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    /* Log result of transaction init and token address */\n    os_symtab_dump_log(\"after OS_ObjectIdTransactionInit\", filename, translated_path, (int)return_code, SizeLimit, (const void *)&token);\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log early return due to transaction init failure */\n        os_symtab_dump_log(\"return (transaction init failure)\", filename, translated_path, (int)return_code, SizeLimit, (const void *)&token);\n        return return_code;\n    }\n\n    /* Call the implementation and log before/after */\n    os_symtab_dump_log(\"before OS_SymbolTableDump_Impl\", filename, translated_path, 0, SizeLimit, (const void *)&token);\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n    os_symtab_dump_log(\"after OS_SymbolTableDump_Impl\", filename, translated_path, (int)return_code, SizeLimit, (const void *)&token);\n\n    OS_ObjectIdTransactionCancel(&token);\n    /* Log that we've cancelled the transaction */\n    os_symtab_dump_log(\"after OS_ObjectIdTransactionCancel\", filename, translated_path, (int)return_code, SizeLimit, (const void *)&token);\n\n    /* Final return value */\n    os_symtab_dump_log(\"exit\", filename, translated_path, (int)return_code, SizeLimit, (const void *)&token);\n\n    return return_code;\n}\n"
}