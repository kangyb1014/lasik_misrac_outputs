{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter Data is declared as void * in UtList_Add and is passed to UtList_NewNode(Data, DataSize). If UtList_NewNode only reads from the memory pointed to by Data (i.e. it treats it as input-only), Data should be declared const void * and passed as such. Having Data as a non-const pointer therefore violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2903.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function: logs control-flow and state for UtList_Add to /tmp/logs/2903.txt */\nstatic void UtList_Add_Log(const char *event, void *ListHead, void *Data, unsigned long DataSize, unsigned long Tag, void *TagHead, void *NewNode)\n{\n    FILE *f = fopen(\"/tmp/logs/2903.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the main control-state values */\n        fprintf(f, \"%s: ListHead=%p Data=%p DataSize=%lu Tag=%lu TagHead=%p NewNode=%p\\n\",\n                event, ListHead, Data, DataSize, Tag, TagHead, NewNode);\n\n        /* If Data is present, log up to the first 16 bytes to provide evidence of read-only use */\n        if ((Data != NULL) && (DataSize > 0u))\n        {\n            unsigned long bytesToDump = (DataSize > 16u) ? 16u : DataSize;\n            const unsigned char *p = (const unsigned char *)Data;\n            unsigned long i;\n\n            fprintf(f, \"%s: Data[0..%lu):\", event, bytesToDump);\n            for (i = 0u; i < bytesToDump; ++i)\n            {\n                fprintf(f, \" %02X\", (unsigned)p[i]);\n            }\n            fprintf(f, \"\\n\");\n        }\n\n        fclose(f);\n    }\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Log entry with initial parameters */\n    UtList_Add_Log(\"ENTRY\", (void *)ListHead, Data, (unsigned long)DataSize, (unsigned long)Tag, (void *)0, (void *)0);\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    /* Log result of GetHead */\n    UtList_Add_Log(\"AFTER_GetHead\", (void *)ListHead, Data, (unsigned long)DataSize, (unsigned long)Tag, (void *)TagHead, (void *)0);\n\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n\n        /* Log after NewNode creation to capture pointer returned and arguments used */\n        UtList_Add_Log(\"AFTER_NewNode\", (void *)ListHead, Data, (unsigned long)DataSize, (unsigned long)Tag, (void *)TagHead, (void *)NewNode);\n\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n\n        /* Log after insertion */\n        UtList_Add_Log(\"AFTER_Insert\", (void *)ListHead, Data, (unsigned long)DataSize, (unsigned long)Tag, (void *)TagHead, (void *)NewNode);\n    }\n    else\n    {\n        /* Log that no action was taken because TagHead was NULL */\n        UtList_Add_Log(\"NO_ACTION_TagHead_NULL\", (void *)ListHead, Data, (unsigned long)DataSize, (unsigned long)Tag, (void *)TagHead, (void *)0);\n    }\n}\n"
}