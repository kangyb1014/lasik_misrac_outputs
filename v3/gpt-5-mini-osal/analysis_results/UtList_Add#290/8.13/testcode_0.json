{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'Data' is declared as void * but is only passed to UtList_NewNode and never modified in UtList_Add; if the function (and the called UtList_NewNode) do not modify the pointed-to object, 'Data' should be declared const void * to satisfy MISRA C 2023 Rule 8.13. (ListHead is likely non-const because the list may be modified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2903.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n    FILE *fp = fopen(\"/tmp/logs/2903.txt\", \"a\");\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"UtList_Add ENTRY: ListHead=%p, Data=%p, DataSize=%u, Tag=%u\\n\",\n                (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag);\n    }\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"UtList_Add: UtList_GetHead returned TagHead=%p\\n\", (void *)TagHead);\n    }\n\n    if (TagHead != NULL)\n    {\n        if (fp != NULL)\n        {\n            fprintf(fp, \"UtList_Add: TagHead non-NULL, calling UtList_NewNode\\n\");\n        }\n\n        NewNode = UtList_NewNode(Data, DataSize);\n\n        if (fp != NULL)\n        {\n            fprintf(fp, \"UtList_Add: UtList_NewNode returned NewNode=%p\\n\", (void *)NewNode);\n        }\n\n        NewNode->Tag = Tag;\n\n        if (fp != NULL)\n        {\n            fprintf(fp, \"UtList_Add: Set NewNode->Tag=%u, calling UtList_Insert_Before(TagHead=%p, NewNode=%p)\\n\",\n                    (unsigned)Tag, (void *)TagHead, (void *)NewNode);\n        }\n\n        UtList_Insert_Before(TagHead, NewNode);\n\n        if (fp != NULL)\n        {\n            fprintf(fp, \"UtList_Add: After UtList_Insert_Before\\n\");\n        }\n    }\n    else\n    {\n        if (fp != NULL)\n        {\n            fprintf(fp, \"UtList_Add: TagHead is NULL, no node added\\n\");\n        }\n    }\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"UtList_Add EXIT\\n\\n\");\n        fclose(fp);\n    }\n}\n"
}