{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 memset(AllocNode, 0, sizeof(union NodeAllocator)) can write out of the allocated block in some real-world cases. AllocNode is obtained with malloc(sizeof(union NodeAllocator) + DataSize) but the code does not check the return value of malloc (malloc may return NULL \u2192 calling memset with a NULL pointer and non\u2011zero size is an invalid access). Also the size expression can overflow/wrap (e.g. very large DataSize) so malloc may allocate less than sizeof(union NodeAllocator); the subsequent memset of sizeof(union NodeAllocator) would then access beyond the allocated object. Both situations cause accesses beyond the bounds of the object referenced by the pointer parameter, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2909.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function that appends information to /tmp/logs/2909.txt */\nstatic void UtList_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2909.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not change program control flow if logging fails */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Log entry and parameters */\n    UtList_Log(\"UtList_Add called: ListHead=%p Data=%p DataSize=%lu Tag=%lu\",\n               (void *)ListHead, Data, (unsigned long)DataSize, (unsigned long)Tag);\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    UtList_Log(\"UtList_GetHead returned TagHead=%p for Tag=%lu\", (void *)TagHead, (unsigned long)Tag);\n\n    if (TagHead != NULL)\n    {\n        UtList_Log(\"TagHead != NULL, preparing to allocate new node with DataSize=%lu\", (unsigned long)DataSize);\n\n        NewNode = UtList_NewNode(Data, DataSize);\n\n        /* Log the result of allocation/creation. This will capture NULL (malloc failure) or a pointer that\n           may point to a too-small allocation in case of overflow in the allocator. */\n        UtList_Log(\"UtList_NewNode returned NewNode=%p for Data=%p DataSize=%lu\",\n                   (void *)NewNode, Data, (unsigned long)DataSize);\n\n        /* Keep original behavior: the original code assigns NewNode->Tag unconditionally.\n           We log a warning if NewNode is NULL but do not alter control flow so that\n           any subsequent dereference reproduces the original behavior/issue. */\n        if (NewNode == NULL)\n        {\n            UtList_Log(\"Warning: NewNode is NULL. Subsequent dereference (NewNode->Tag) will follow original behavior and may crash.\");\n        }\n\n        NewNode->Tag = Tag; /* preserved original logic (may be UB if NewNode is NULL) */\n\n        UtList_Log(\"Calling UtList_Insert_Before(TagHead=%p, NewNode=%p)\", (void *)TagHead, (void *)NewNode);\n        UtList_Insert_Before(TagHead, NewNode);\n        UtList_Log(\"UtList_Insert_Before returned\");\n    }\n\n    UtList_Log(\"UtList_Add exit\");\n}\n"
}