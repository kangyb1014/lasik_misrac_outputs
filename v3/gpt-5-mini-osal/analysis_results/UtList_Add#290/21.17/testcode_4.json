{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. UtList_NewNode calls memcpy(AllocNode->Node.Data, Data, DataSize) (and earlier memset(AllocNode,0, sizeof(union))) without validating the pointer/size inputs. This can read/write out of bounds. Example violations: (1) Caller does UtList_Add(&head, &some_uint32, sizeof(uint64_t), tag) \u2014 Data points to a 4\u2011byte object but DataSize==8, so memcpy reads 8 bytes past the source object. (2) Caller passes Data == NULL with DataSize > 0, or malloc returns NULL so AllocNode is NULL \u2014 then memset/memcpy are invoked on an invalid pointer. In these cases the use of memcpy/memset can access beyond the bounds of the objects referenced by their pointer parameters, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2909.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging function: append control-flow and state information to /tmp/logs/2909.txt */\nstatic void UtList_LogProbe(const char *stage, void *ListHead, void *Data, unsigned long long DataSize, unsigned Tag, void *TagHead, void *NewNode)\n{\n    FILE *f = fopen(\"/tmp/logs/2909.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: ListHead=%p Data=%p DataSize=%llu Tag=%u TagHead=%p NewNode=%p\\n\",\n                stage, ListHead, Data, DataSize, Tag, TagHead, NewNode);\n        if (Data == NULL && DataSize > 0)\n        {\n            fprintf(f, \"WARNING: Data == NULL but DataSize > 0 (possible read from NULL)\\n\");\n        }\n        if (TagHead == NULL)\n        {\n            fprintf(f, \"INFO: TagHead is NULL, nothing will be added for Tag=%u\\n\", Tag);\n        }\n        if (NewNode == NULL && TagHead != NULL)\n        {\n            fprintf(f, \"INFO: UtList_NewNode returned NULL (allocation failure or other error)\\n\");\n        }\n        fclose(f);\n    }\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Record evaluation of TagHead */\n    TagHead = UtList_GetHead(ListHead, Tag);\n    UtList_LogProbe(\"TAGHEAD_EVALUATED\", (void *)ListHead, Data, (unsigned long long)DataSize, (unsigned)Tag, (void *)TagHead, NULL);\n\n    if (TagHead != NULL)\n    {\n        /* Log just before creating a new node */\n        UtList_LogProbe(\"ABOUT_TO_CALL_NewNode\", (void *)ListHead, Data, (unsigned long long)DataSize, (unsigned)Tag, (void *)TagHead, NULL);\n\n        NewNode      = UtList_NewNode(Data, DataSize);\n\n        /* Log immediately after NewNode creation attempt */\n        UtList_LogProbe(\"AFTER_CALL_NewNode\", (void *)ListHead, Data, (unsigned long long)DataSize, (unsigned)Tag, (void *)TagHead, (void *)NewNode);\n\n        /* Preserve original logic: set Tag and insert before TagHead */\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n\n        /* Log completion of insertion */\n        UtList_LogProbe(\"INSERT_BEFORE_DONE\", (void *)ListHead, Data, (unsigned long long)DataSize, (unsigned)Tag, (void *)TagHead, (void *)NewNode);\n    }\n    else\n    {\n        /* Explicitly log the branch where TagHead is NULL */\n        UtList_LogProbe(\"TAGHEAD_NULL_EXIT\", (void *)ListHead, Data, (unsigned long long)DataSize, (unsigned)Tag, (void *)TagHead, NULL);\n    }\n}\n"
}