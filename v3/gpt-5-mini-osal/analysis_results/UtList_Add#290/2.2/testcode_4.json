{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn UtList_NewNode the call memset(AllocNode, 0, sizeof(union NodeAllocator)) writes zeros into the union storage, but immediately afterwards the code assigns AllocNode->Node.Data, AllocNode->Node.DataSize and sets AllocNode->Node.Next/Prev. In the only shown caller (UtList_Add) the caller then sets NewNode->Tag. Thus all bytes zeroed by the memset are subsequently overwritten (or set by the caller) before any use. Removing the memset would not change program behaviour in the provided code paths, so the memset is an executed operation that is redundant (dead) and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2902.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger to capture control flow and relevant pointers/state for the violation scenario.\n   Appends log lines to /tmp/logs/2902.txt. */\nstatic void UtList_LogState(const char *stage,\n                            void *ListHead_ptr,\n                            void *Data_ptr,\n                            unsigned DataSize_val,\n                            unsigned Tag_val,\n                            void *TagHead_ptr,\n                            void *NewNode_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2902.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage and pointer/state values. Keep formatting simple and robust. */\n        (void)fprintf(f,\n                      \"%s: ListHead=%p Data=%p DataSize=%u Tag=%u TagHead=%p NewNode=%p\\n\",\n                      stage,\n                      ListHead_ptr,\n                      Data_ptr,\n                      DataSize_val,\n                      Tag_val,\n                      TagHead_ptr,\n                      NewNode_ptr);\n        (void)fclose(f);\n    }\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Log entry with initial parameters */\n    UtList_LogState(\"Enter_UtList_Add\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag, NULL, NULL);\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    /* Log result of UtList_GetHead */\n    UtList_LogState(\"After_UtList_GetHead\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag, (void *)TagHead, NULL);\n\n    if (TagHead != NULL)\n    {\n        /* Log before creating new node */\n        UtList_LogState(\"Before_UtList_NewNode\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag, (void *)TagHead, NULL);\n\n        NewNode      = UtList_NewNode(Data, DataSize);\n\n        /* Log after creating new node (NewNode may be NULL) */\n        UtList_LogState(\"After_UtList_NewNode\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag, (void *)TagHead, (void *)NewNode);\n\n        /* Preserve original behaviour: set Tag and insert. Log around these operations. */\n        if (NewNode != NULL)\n        {\n            NewNode->Tag = Tag;\n            UtList_LogState(\"After_SetTag\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag, (void *)TagHead, (void *)NewNode);\n        }\n        else\n        {\n            UtList_LogState(\"NewNode_NULL\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag, (void *)TagHead, NULL);\n        }\n\n        UtList_Insert_Before(TagHead, NewNode);\n\n        /* Log after insert to capture final state */\n        UtList_LogState(\"After_UtList_Insert_Before\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag, (void *)TagHead, (void *)NewNode);\n    }\n    else\n    {\n        /* Log that TagHead was NULL and no action was taken */\n        UtList_LogState(\"TagHead_NULL_NoAction\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag, NULL, NULL);\n    }\n}\n"
}