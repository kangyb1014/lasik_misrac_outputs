{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment NewNode->Tag = Tag; in UtList_Add is not read or used by any of the shown code paths. List operations select/merge using the list head array (UtList_GetHead / UtList_Merge) and iteration/execution use UtList_GetNext / UtList_IsEnd / UtList_GetObject; none of the provided functions read the node->Tag field. Therefore removing this assignment would not change the observable behaviour of the program as shown, so the operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2902.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper to write logs for control flow and state. */\nstatic void UtList_Add_Probe(const void *ListHeadPtr,\n                              void *DataPtr,\n                              unsigned int DataSizeVal,\n                              unsigned int TagVal,\n                              const void *TagHeadPtr,\n                              const void *NewNodePtr,\n                              const char *stage)\n{\n    FILE *f;\n\n    /* Best-effort create directory for logs; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2902.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log control stage and key pointers/values. */\n    fprintf(f, \"UtList_Add: stage=%s ListHead=%p Tag=%u Data=%p DataSize=%u TagHead=%p NewNode=%p\\n\",\n            stage,\n            ListHeadPtr,\n            TagVal,\n            DataPtr,\n            DataSizeVal,\n            TagHeadPtr,\n            NewNodePtr);\n\n    /* If a new node exists, try to log its Tag field value (best-effort). */\n    if (NewNodePtr != NULL)\n    {\n        /* The exact type of NewNodePtr is unknown here; however, the original\n         * code uses NewNode->Tag. We will attempt to read an unsigned int at\n         * the expected offset by casting to unsigned int* to show the value\n         * after assignment. This mirrors the original behavior as closely as\n         * possible without changing program logic. */\n        unsigned int nodeTagValue = *((unsigned int *)((char *)NewNodePtr + 0));\n        fprintf(f, \"UtList_Add: stage=%s NewNode->Tag(after read)=%u\\n\", stage, nodeTagValue);\n    }\n\n    fclose(f);\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Log entry */\n    UtList_Add_Probe(ListHead, Data, (unsigned int)DataSize, (unsigned int)Tag, NULL, NULL, \"entry\");\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    /* Log result of getting the head for this Tag */\n    UtList_Add_Probe(ListHead, Data, (unsigned int)DataSize, (unsigned int)Tag, TagHead, NULL, \"after_gethead\");\n\n    if (TagHead != NULL)\n    {\n        NewNode = UtList_NewNode(Data, DataSize);\n\n        /* Log after allocation, before assignment */\n        UtList_Add_Probe(ListHead, Data, (unsigned int)DataSize, (unsigned int)Tag, TagHead, NewNode, \"after_newnode_before_assign\");\n\n        /* This is the assignment under scrutiny. Keep as original. */\n        NewNode->Tag = Tag;\n\n        /* Log after assignment to capture value written into the node. */\n        UtList_Add_Probe(ListHead, Data, (unsigned int)DataSize, (unsigned int)Tag, TagHead, NewNode, \"after_assign\");\n\n        UtList_Insert_Before(TagHead, NewNode);\n\n        /* Log after insertion to show completed control path. */\n        UtList_Add_Probe(ListHead, Data, (unsigned int)DataSize, (unsigned int)Tag, TagHead, NewNode, \"after_insert\");\n    }\n    else\n    {\n        /* Log path where no TagHead existed. */\n        UtList_Add_Probe(ListHead, Data, (unsigned int)DataSize, (unsigned int)Tag, TagHead, NULL, \"taghead_null\");\n    }\n}\n"
}