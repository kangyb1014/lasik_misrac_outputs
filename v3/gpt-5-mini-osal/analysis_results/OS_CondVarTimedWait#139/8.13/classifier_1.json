{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait:\n```c\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CondVarTimedWait:\nint32 OS_CondVarTimedWait_Impl(const OS_object_token_t *token, const OS_time_t *abs_wakeup_time)\n{\n    struct timespec                    limit;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);\n    limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);\n\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);\n    pthread_cleanup_pop(false);\n\n    if (status == ETIMEDOUT)\n    {\n        return OS_ERROR_TIMEOUT;\n    }\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\ntypedef struct\n{\n    int64 ticks; /**< Ticks elapsed since reference point */\n} OS_time_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef uint32 osal_id_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nimpl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The token parameter in OS_CondVarTimedWait_Impl is declared as const (const OS_object_token_t *token), so the pointer already points to a const-qualified type. The impl pointer is non-const intentionally because the function needs to access and modify the condvar internals (e.g. take the mutex &impl->mut), so it must not be const. Thus Rule 8.13 is not violated. (A violation would occur if a pointer-to-data that is not modified were left unqualified instead of being declared const \u2014 for example, if abs_wakeup_time were a non-const pointer despite not being modified.)"
}