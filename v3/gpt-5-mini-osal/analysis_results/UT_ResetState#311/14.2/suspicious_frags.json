{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_ResetState:\n```c\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "++StubPtr;",
    "UT_ClearStubEntry(StubPtr);",
    "StubPtr = UT_StubTable;",
    "for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)"
  ],
  "explanation": "The for-header alone appears to conform at surface (first clause assigns the loop counter, second clause uses only the loop counter and a constant, third clause increments only the loop counter). However the loop body modifies the pointer StubPtr each iteration (StubPtr = UT_StubTable; and ++StubPtr;), which effectively acts as a secondary iteration variable and therefore should be investigated to determine whether this constitutes a second loop counter (MISRA forbids more than one loop counter and the loop counter must not be modified in the loop body). Also the call UT_ClearStubEntry(StubPtr) must be inspected because the behaviour of called functions is part of the loop body \u2014 the function must not produce persistent side effects that affect objects used in the for clauses (for example modify the loop counter, UT_MAX_FUNC_STUBS, or any object used in the loop conditions). Other lines in the function (the if (FuncKey == 0) check inside the loop, the final if (FuncKey == 0) { UT_MaxStubSearchLen = 0; }) do not affect the well-formedness of the for loop under Rule 14.2 and therefore do not need investigation for this rule."
}