{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_ResetState:\n```c\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UT_ResetState:\nstatic UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}\n...\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\n#define UT_MAX_FUNC_STUBS 200\n...\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n...\nstatic uint32              UT_MaxStubSearchLen             = 0\n...\ntypedef cpuaddr UT_EntryKey_t\n...\nstatic uint32              UT_MaxStubSearchLen             = 0\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nStubPtr = UT_StubTable;\nfor (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n{\n    if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n    {\n        UT_ClearStubEntry(StubPtr);\n    }\n    ++StubPtr;\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the loop calls UT_ClearStubEntry conditionally based on the FuncKey parameter and the per-entry FuncKey, and UT_ClearStubEntry performs observable side-effects (free() of buffers and a memset to clear the entry). Removing the loop body or the call would therefore change program behaviour when entries contain allocated buffers or non-zero state. The condition is not statically always true or false given the parameter and table contents, so the operations are not dead code. (Note: if, in the entire project, UT_StubTable were guaranteed always all-zero and never modified and FuncKey always 0, the calls would be no-ops \u2014 but that is a project-wide property not provable from the shown code.)"
}