{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ObjectIdTransactionInit calls memset(token, 0, sizeof(*token)) without validating that 'token' is non-NULL. If a caller passes token == NULL (or an invalid/too-small pointer), the memset will access memory outside the bounds of the referenced object (for example, writing to address 0 when token is NULL), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1659.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_close:\n```c\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_close code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe logging helper. Writes append-only logs to /tmp/logs/1659.txt. */\nstatic void OS_close_log(const char *stage, unsigned long filedes, int32_t return_code, const void *token_ptr, size_t token_size, int dump_contents)\n{\n    FILE *f = fopen(\"/tmp/logs/1659.txt\", \"a\");\n    if (!f)\n    {\n        /* Try to create directory then reopen */\n        /* Ignore errors here to avoid changing program control flow. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/1659.txt\", \"a\");\n        if (!f)\n        {\n            return; /* best-effort logging only */\n        }\n    }\n\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    char timestr[64] = \"\";\n    if (tm_info)\n    {\n        strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm_info);\n    }\n\n    fprintf(f, \"%s | stage=%s | filedes=%lu | return_code=%d | token_ptr=%p | token_size=%zu\\n\",\n            timestr[0] ? timestr : \"(no-time)\", stage, filedes, return_code, token_ptr, token_size);\n\n    if (dump_contents && token_ptr != NULL && token_size > 0)\n    {\n        /* Dump up to 64 bytes of the token object for inspection (hex). */\n        size_t dump = token_size < 64 ? token_size : 64;\n        const unsigned char *p = (const unsigned char *)token_ptr;\n        fprintf(f, \"%s | token_bytes=\", timestr[0] ? timestr : \"(no-time)\");\n        for (size_t i = 0; i < dump; ++i)\n        {\n            fprintf(f, \"%02x\", p[i]);\n            if (i + 1 < dump) fprintf(f, \" \");\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\n/* Keep original function signature. Insert only logging probes. */\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log: about to call OS_ObjectIdGetById. Do not read token contents (uninitialized). */\n    OS_close_log(\"before_getbyid\", (unsigned long)filedes, -1, (const void *)&token, sizeof(token), 0);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log result of GetById. If success, dump token contents (initialized by GetById). */\n    OS_close_log(\"after_getbyid\", (unsigned long)filedes, return_code, (const void *)&token,\n                 sizeof(token), return_code == OS_SUCCESS ? 1 : 0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before GenericClose */\n        OS_close_log(\"before_genericclose\", (unsigned long)filedes, return_code, (const void *)&token, sizeof(token), 1);\n\n        return_code = OS_GenericClose_Impl(&token);\n\n        /* Log after GenericClose */\n        OS_close_log(\"after_genericclose\", (unsigned long)filedes, return_code, (const void *)&token, sizeof(token), 1);\n\n        /* Complete the operation via the common routine */\n        OS_close_log(\"before_finalize\", (unsigned long)filedes, return_code, (const void *)&token, sizeof(token), 1);\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize (final return code) */\n        OS_close_log(\"after_finalize\", (unsigned long)filedes, return_code, (const void *)&token, sizeof(token), 1);\n    }\n    else\n    {\n        /* Log that GetById failed and we are returning early */\n        OS_close_log(\"getbyid_failed\", (unsigned long)filedes, return_code, (const void *)&token, sizeof(token), 0);\n    }\n\n    return return_code;\n}\n"
}