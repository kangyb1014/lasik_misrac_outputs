{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGive_Impl:\n```c\nint32 OS_CountSemGive_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_post(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemGive_Impl:\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);"
  ],
  "explanation": "MISRA C 2023 Rule 21.17 concerns uses of the <string.h> functions (memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn, etc.) that may access beyond object bounds. In the provided function body there are no direct calls to any <string.h> functions. The sem_post call is a POSIX semaphore operation and not part of <string.h>, so it is not relevant to Rule 21.17. The inline helper OS_ObjectIndexFromToken shown only reads token->obj_idx and does not use string functions. The macro/constants (OS_SEM_FAILURE, OS_SUCCESS) are simple integer definitions and are not relevant.\n\nThe only fragment that merits investigation under Rule 21.17 is the use of OS_OBJECT_TABLE_GET, because its expansion/implementation is not provided here and it could internally perform memory operations (for example copying or indexing) that rely on <string.h> functions or perform out-of-bounds accesses. Therefore the line that invokes OS_OBJECT_TABLE_GET should be inspected to ensure it does not call any of the string.h functions or otherwise access memory beyond object bounds. No other fragments in the supplied code require investigation for Rule 21.17."
}