{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible via the event callback: OS_TaskExit -> OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> EventHandler (user-supplied) -> OS_TaskExit. If the registered EventHandler calls OS_TaskExit, this causes an indirect call back to OS_TaskExit, violating Rule 17.2. (If no EventHandler is registered, or the handler does not call OS_TaskExit, no recursion occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskExit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2566.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskExit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskExit:\n```c\nvoid OS_TaskExit()\n{\n    osal_id_t         task_id;\n    OS_object_token_t token;\n\n    task_id = OS_TaskGetId_Impl();\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token) == OS_SUCCESS)\n    {\n        OS_TaskDetach_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token);\n    }\n\n    /* call the implementation */\n    OS_TaskExit_Impl();\n\n    /* Impl function never returns */\n}\n```\n</target_code>\nPlease provide the modified OS_TaskExit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Probe logging utility used only to collect evidence of control flow\n * Writes append-only logs to /tmp/logs/2566.txt so external agents can\n * inspect the sequence of calls and detect indirect recursion. */\nstatic void os_taskexit_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2566.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        fprintf(f, \"[%ld] \", (long)t);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_TaskExit()\n{\n    osal_id_t         task_id;\n    OS_object_token_t token;\n\n    /* Track re-entrancy to capture indirect recursion evidence. This counter\n     * is incremented on each entry; it will be higher if a nested/indirect\n     * call to OS_TaskExit occurs before the first call completes. */\n    static int os_taskexit_reentrancy = 0;\n    os_taskexit_reentrancy++;\n    os_taskexit_log(\"ENTER OS_TaskExit: reentrancy=%d\", os_taskexit_reentrancy);\n\n    task_id = OS_TaskGetId_Impl();\n    os_taskexit_log(\"OS_TaskGetId_Impl returned id=%lu\", (unsigned long)task_id);\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token) == OS_SUCCESS)\n    {\n        /* Log token address/representation so an investigator can correlate\n         * the object being finalized with any callbacks that run during\n         * finalization. Printing the address of the local token storage\n         * is a best-effort identifier for the instance in the log. */\n        os_taskexit_log(\"OS_ObjectIdGetById succeeded; token_addr=%p\", (void *)&token);\n\n        OS_TaskDetach_Impl(&token);\n        os_taskexit_log(\"OS_TaskDetach_Impl completed for token_addr=%p\", (void *)&token);\n\n        /* Complete the operation via the common routine */\n        os_taskexit_log(\"Calling OS_ObjectIdFinalizeDelete from OS_TaskExit for token_addr=%p\", (void *)&token);\n        OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token);\n        /* If the registered EventHandler triggers OS_TaskExit, it will be\n         * observable by additional ENTER OS_TaskExit log entries written\n         * before this call returns. */\n        os_taskexit_log(\"Returned from OS_ObjectIdFinalizeDelete for token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        os_taskexit_log(\"OS_ObjectIdGetById failed for id=%lu\", (unsigned long)task_id);\n    }\n\n    /* call the implementation */\n    os_taskexit_log(\"Calling OS_TaskExit_Impl (expected not to return). Current reentrancy=%d\", os_taskexit_reentrancy);\n    OS_TaskExit_Impl();\n\n    /* Impl function never returns; if it ever did, decrement the counter. */\n    /* Note: not expected to execute */\n    os_taskexit_reentrancy--;\n}\n"
}