{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: memchr(dev_name, 0, sizeof(filesys->volume_name)) can read up to sizeof(volume_name) bytes starting at dev_name, which is a pointer into phys_path. Nothing guarantees that the remaining bytes of the phys_path object (from dev_name to the end of that object) are at least sizeof(filesys->volume_name). If the basename (dev_name) is shorter than sizeof(volume_name) the call will read past the end of the phys_path object (past its terminating NUL) and thus access beyond the bounds of the object \u2014 violating MISRA C 2023 Rule 21.17. A safe alternative is to use strnlen(dev_name, sizeof(filesys->volume_name)) or ensure the phys_path object is known to be at least that large before calling memchr.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1739.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysAddFixedMap code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe helper: append debugging information to /tmp/logs/1739.txt */\nstatic void OS_FileSysAddFixedMap_LogProbe(const char *phys_path, const char *dev_name, size_t vol_name_size, const void *memchr_result)\n{\n    FILE *fp = fopen(\"/tmp/logs/1739.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    char timestr[64] = \"\";\n    if (now != (time_t)-1)\n    {\n        struct tm tmv;\n        if (localtime_r(&now, &tmv) != NULL)\n        {\n            strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n        }\n    }\n\n    /* Compute safe lengths using the phys_path NUL-termination (strnlen won't read past the object string's NUL) */\n    size_t phys_len = strnlen(phys_path, 4096);\n    ptrdiff_t offset = dev_name - phys_path;\n    size_t remaining = 0;\n    if (offset >= 0 && (size_t)offset <= phys_len)\n    {\n        remaining = phys_len - (size_t)offset;\n    }\n\n    fprintf(fp, \"[%s] OS_FileSysAddFixedMap probe:\\n\", timestr[0] ? timestr : \"(no-time)\");\n    fprintf(fp, \"  phys_path ptr=%p\\n\", (const void *)phys_path);\n    fprintf(fp, \"  dev_name  ptr=%p\\n\", (const void *)dev_name);\n    fprintf(fp, \"  dev_name offset in phys_path=%td\\n\", offset);\n    fprintf(fp, \"  phys_path reported length (strnlen cap=4096)=%zu\\n\", phys_len);\n    fprintf(fp, \"  computed remaining bytes in phys_path from dev_name=%zu\\n\", remaining);\n    fprintf(fp, \"  sizeof(volume_name) used for memchr=%zu\\n\", vol_name_size);\n\n    if (memchr_result == NULL)\n    {\n        fprintf(fp, \"  memchr(...) returned: NULL (no NUL found within the checked range)\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"  memchr(...) returned non-NULL ptr=%p\\n\", memchr_result);\n    }\n\n    /* Dump a safe preview of the dev_name bytes (only up to 'remaining' bytes to avoid reading past phys_path object) */\n    const size_t preview_cap = 192;\n    size_t preview_len = remaining;\n    if (preview_len > preview_cap)\n    {\n        preview_len = preview_cap;\n    }\n\n    if (preview_len > 0)\n    {\n        /* copy into a local buffer so we can NUL-terminate safely */\n        char buf[193];\n        size_t to_copy = (preview_len < sizeof(buf) - 1) ? preview_len : sizeof(buf) - 1;\n        memcpy(buf, dev_name, to_copy);\n        buf[to_copy] = '\\0';\n        /* Print as a quoted string and also hex for non-printable visibility */\n        fprintf(fp, \"  dev_name preview (as string, limited)='%s'\\n\", buf);\n\n        fprintf(fp, \"  dev_name preview (hex):\");\n        for (size_t i = 0; i < to_copy; ++i)\n        {\n            fprintf(fp, \" %02X\", (unsigned char)buf[i]);\n        }\n        fprintf(fp, \"\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"  dev_name preview: <no bytes available or offset invalid>\\n\");\n    }\n\n    fprintf(fp, \"---\\n\");\n    fclose(fp);\n}\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    /*\n     * Probe logging: capture the values used for the memchr check and surrounding state.  This\n     * helps reproduce the scenario where memchr may read beyond the end of the phys_path object.\n     */\n    /* Use the same size expression as the original code to avoid changing behaviour */\n    size_t vol_name_size = sizeof(filesys->volume_name);\n\n    /* Perform the memchr as in the original code, but capture the result for logging. */\n    void *memchr_result = memchr(dev_name, 0, vol_name_size);\n\n    /* Log the probe information (does not alter original control flow) */\n    OS_FileSysAddFixedMap_LogProbe(phys_path, dev_name, vol_name_size, memchr_result);\n\n    if (memchr_result == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n"
}