{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without first validating either pointer or ensuring both point to NUL-terminated strings. For example, if UT_Stub_RegisterReturnType was previously called with TypeName == NULL (it assigns ContentTypeStr = TypeName without checking), then a later call to UT_Stub_GetReturnValuePtr(..., TypeName2) will perform strcmp(TypeName2, NULL) and dereference a NULL pointer (or if either pointer points to a non-NUL-terminated buffer, strcmp can overrun the buffer). This can result in accesses beyond the bounds of the referenced objects.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarSignal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1389.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarSignal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarSignal:\n```c\nint32 OS_CondVarSignal(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarSignal_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarSignal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helpers for logging control flow and state to /tmp/logs/1389.txt\n * These functions are inserted to help reproduce and gather evidence for\n * potential string-handling issues reported elsewhere in the codebase.\n * They do not change program logic and only append diagnostic information.\n */\n\nstatic void UT_Log_Append(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1389.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%s\", msg);\n        fclose(f);\n    }\n}\n\nstatic void UT_Log_StateBeforeGetById(osal_id_t var_id, const void *token_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/1389.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"[OS_CondVarSignal] Enter: var_id=%d, token_addr=%p\\n\", (int)var_id, token_addr);\n    fclose(f);\n}\n\nstatic void UT_Log_StateAfterGetById(int32 return_code, const void *token_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/1389.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"[OS_CondVarSignal] After OS_ObjectIdGetById: return_code=%d, token_addr=%p\\n\",\n            (int)return_code, token_addr);\n    fclose(f);\n}\n\nstatic void UT_Log_BeforeImplCall(int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1389.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"[OS_CondVarSignal] Before OS_CondVarSignal_Impl: incoming_return_code=%d\\n\",\n            (int)return_code);\n    fclose(f);\n}\n\n/* Utility to safely log two string pointers that may be NULL or non-NUL-terminated.\n * It does NOT call any string.h functions that can overrun buffers (no strcmp/strcpy).\n * Instead it probes up to 'max_probe' bytes looking for a NUL terminator using memchr.\n */\nstatic void UT_Log_StrcmpOperands(const char *a, const char *b)\n{\n    const size_t max_probe = 256;\n    FILE *f = fopen(\"/tmp/logs/1389.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"[UT_Log_StrcmpOperands] operand_a_ptr=%p, operand_b_ptr=%p\\n\", (const void *)a, (const void *)b);\n\n    if (a == NULL)\n    {\n        fprintf(f, \"[UT_Log_StrcmpOperands] operand_a is NULL\\n\");\n    }\n    else\n    {\n        /* Check for a NUL within max_probe bytes */\n        const void *nul = memchr(a, '\\0', max_probe);\n        if (nul)\n        {\n            size_t len = (const char *)nul - a;\n            fprintf(f, \"[UT_Log_StrcmpOperands] operand_a is NUL-terminated within %zu bytes; length=%zu; sample=\\\"%.*s\\\"\\n\",\n                    max_probe, len, (int)(len < 120 ? len : 120), a);\n        }\n        else\n        {\n            /* No NUL found within probe length */\n            fprintf(f, \"[UT_Log_StrcmpOperands] operand_a has NO NUL within %zu bytes; logging up to %d bytes sample\\n\",\n                    max_probe, 120);\n            fprintf(f, \"[UT_Log_StrcmpOperands] sample_a=\\\"\");\n            fwrite(a, 1, 120, f);\n            fprintf(f, \"\\\"\\n\");\n        }\n    }\n\n    if (b == NULL)\n    {\n        fprintf(f, \"[UT_Log_StrcmpOperands] operand_b is NULL\\n\");\n    }\n    else\n    {\n        const void *nul = memchr(b, '\\0', max_probe);\n        if (nul)\n        {\n            size_t len = (const char *)nul - b;\n            fprintf(f, \"[UT_Log_StrcmpOperands] operand_b is NUL-terminated within %zu bytes; length=%zu; sample=\\\"%.*s\\\"\\n\",\n                    max_probe, len, (int)(len < 120 ? len : 120), b);\n        }\n        else\n        {\n            fprintf(f, \"[UT_Log_StrcmpOperands] operand_b has NO NUL within %zu bytes; logging up to %d bytes sample\\n\",\n                    max_probe, 120);\n            fprintf(f, \"[UT_Log_StrcmpOperands] sample_b=\\\"\");\n            fwrite(b, 1, 120, f);\n            fprintf(f, \"\\\"\\n\");\n        }\n    }\n\n    fclose(f);\n}\n\n/* Original function with minimal probes inserted. The original logic is preserved. */\nint32 OS_CondVarSignal(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and token address (token is uninitialized at this point; address is for correlation) */\n    UT_Log_StateBeforeGetById(var_id, (const void *)&token);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of lookup */\n    UT_Log_StateAfterGetById(return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        UT_Log_BeforeImplCall(return_code);\n        return_code = OS_CondVarSignal_Impl(&token);\n        /* Log completion of impl call */\n        {\n            char buf[128];\n            int n = snprintf(buf, sizeof(buf), \"[OS_CondVarSignal] OS_CondVarSignal_Impl returned %d\\n\", (int)return_code);\n            if (n > 0) UT_Log_Append(buf);\n        }\n    }\n\n    return return_code;\n}\n"
}