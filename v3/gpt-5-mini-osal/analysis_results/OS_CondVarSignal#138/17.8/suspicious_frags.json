{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarSignal:\n```c\nint32 OS_CondVarSignal(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarSignal_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarSignal:\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef int32_t   int32\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_CondVarSignal_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_cond_signal(&impl->cv);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\n#define OS_OBJECT_TYPE_OS_CONDVAR 0x0D\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments that modify a function parameter identifier itself. Specifics:\n\n- OS_CondVarSignal(osal_id_t var_id): The parameter var_id is only passed to OS_ObjectIdGetById and is not assigned to or otherwise modified in this function.\n\n- OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token): The token parameter is a pointer; the function assigns to members of the object pointed to (token->obj_idx, token->obj_id). Per the rule this is allowed (the object referred to by a pointer parameter may be modified). There are no assignments to the token parameter itself (no token = ..., token++ etc.). Other parameters (lock_mode, idtype, id) are not modified.\n\n- OS_CondVarSignal_Impl(const OS_object_token_t *token): The parameter is a pointer to const; the code dereferences it to index the object table but does not modify the pointer or the pointed-to object. The call to pthread_cond_signal operates on impl->cv (an object obtained via the token), not on the token parameter itself.\n\n- Macro usage (OS_OBJECT_TABLE_GET(..., *token)) and passing &token to functions operate on the object/values referred to and do not reassign parameter variables.\n\nTherefore, no fragments violate MISRA C 2023 Rule 17.8 in the provided code."
}