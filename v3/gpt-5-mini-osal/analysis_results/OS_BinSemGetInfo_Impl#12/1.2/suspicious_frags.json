{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo_Impl:\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BinSemGetInfo_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_binsem_internal_record_t OS_impl_bin_sem_table[OS_MAX_BIN_SEMAPHORES]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n...\ntypedef struct\n{\n    pthread_mutex_t       id;\n    pthread_cond_t        cv;\n    volatile sig_atomic_t flush_request;\n    volatile sig_atomic_t current_value;\n} OS_impl_binsem_internal_record_t\n...\n#define OS_SUCCESS (0)\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler language extensions (things explicitly documented as compiler-specific extensions such as GCC\u2019s __attribute__, __asm__, typeof, statement-expressions ({:}), nested functions, unnamed/zero-length bit-fields as extensions, nonstandard storage-class specifiers, or other vendor-specific keywords). Specific items examined and why they are NOT suspicious: \n\n- OS_OBJECT_TABLE_GET macro and its use: pure macro expansion using standard & and array indexing; no extension syntax is used. The pattern (&tbl[OS_ObjectIndexFromToken(&(tok))]) is valid standard C (the extra ampersand is applied to the macro parameter and resolves to a pointer). \n- OS_impl_bin_sem_table declaration: a plain array definition; array sizing via macro OS_MAX_BIN_SEMAPHORES is standard. \n- typedefs and struct definitions (OS_object_token_t, OS_bin_sem_prop_t, OS_impl_binsem_internal_record_t): only standard C constructs (char arrays, standard types, pthread types). \n- pthread_mutex_t / pthread_cond_t usage: these are POSIX types (library/API), not language extensions. Using POSIX APIs is not a C language extension. \n- volatile sig_atomic_t: sig_atomic_t is a standard type from <signal.h>; marking it volatile is standard C. \n- static inline OS_ObjectIndexFromToken(...): the inline keyword is a standard C feature (C99 and later); this is not a vendor-specific extension. \n- Macro use of token dereference (*token) and address-of (&) in the call site and macro expansion: standard C macro/operand usage. \n- Assignment sem_prop->value = sem->current_value; converts from sig_atomic_t to int32: this is standard implicit conversion (not a compiler extension). \n\nNo occurrences of explicit compiler-specific keywords or constructs were found in the provided code. Therefore there are no fragments to flag under MISRA C 2023 Rule 1.2 (language extensions)."
}