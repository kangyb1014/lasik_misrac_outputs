{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo_Impl.\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'sem' is declared as OS_impl_binsem_internal_record_t *sem but is only used for read access (sem->current_value). According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type whenever possible (e.g. const OS_impl_binsem_internal_record_t *sem). The sem_prop pointer is non-const correctly because it is written to. The statement sem_prop->value = sem->current_value itself is fine, but the non-const declaration of 'sem' (assigned from OS_OBJECT_TABLE_GET(...)) violates the rule.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BinSemGetInfo_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_binsem_internal_record_t OS_impl_bin_sem_table[OS_MAX_BIN_SEMAPHORES]\n...\ntypedef struct\n{\n    pthread_mutex_t       id;\n    pthread_cond_t        cv;\n    volatile sig_atomic_t flush_request;\n    volatile sig_atomic_t current_value;\n} OS_impl_binsem_internal_record_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_BinSemGetInfo_Impl the local pointer sem is used only for read access (sem->current_value) and there is no write through sem. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible. Declaring sem as const OS_impl_binsem_internal_record_t *sem would satisfy the rule. The fact that the table array is non-const does not prevent assigning its address to a pointer-to-const (adding const is allowed). Also, the presence of volatile members in the struct is compatible with making the pointer point to a const-qualified struct type (i.e. const OS_impl_binsem_internal_record_t *sem still allows reading the volatile current_value). Therefore the reported violation is valid and the code should be changed to make sem point to a const-qualified type."
}