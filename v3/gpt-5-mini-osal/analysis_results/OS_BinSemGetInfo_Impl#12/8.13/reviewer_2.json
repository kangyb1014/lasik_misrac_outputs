{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo_Impl.\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'sem' is declared as a non-const pointer (OS_impl_binsem_internal_record_t *sem) but the function only reads from the pointed-to object (sem->current_value). Therefore the pointer could and should be const-qualified (e.g. const volatile OS_impl_binsem_internal_record_t *sem to preserve the member-volatility). Declaring it non-const when no modification is performed violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BinSemGetInfo_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_binsem_internal_record_t OS_impl_bin_sem_table[OS_MAX_BIN_SEMAPHORES]\n...\ntypedef struct\n{\n    pthread_mutex_t       id;\n    pthread_cond_t        cv;\n    volatile sig_atomic_t flush_request;\n    volatile sig_atomic_t current_value;\n} OS_impl_binsem_internal_record_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is essentially correct: the local pointer 'sem' is only used to read the object, so per MISRA C 2023 Rule 8.13 it should point to a const-qualified type. The macro returns the address of a non-const table element, but assigning the address of a non-const object to a pointer-to-const is allowed, so the pointer can and should be declared const in this function (for example: const OS_impl_binsem_internal_record_t *sem = OS_OBJECT_TABLE_GET(...);).\n\nOne minor correction to the agent's suggestion: adding a top-level volatile qualifier (const volatile ...) is not necessary here to \u201cpreserve the member-volatility\u201d, because the struct members that are volatile (flush_request and current_value) are already declared volatile within the struct definition. Declaring the pointer as const OS_impl_binsem_internal_record_t *sem is sufficient.\n\nTherefore the report that the code violates Rule 8.13 is correct (the pointer should be to a const-qualified type)."
}