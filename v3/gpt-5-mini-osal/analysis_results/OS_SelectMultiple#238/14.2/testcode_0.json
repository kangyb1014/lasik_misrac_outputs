{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop condition uses sizeof(OSAL_set->object_ids), which syntactically refers to the same object (OSAL_set->object_ids) whose elements are modified inside the loop body (OSAL_set->object_ids[offset] &= ~(1 << bit)). Clause 2 of MISRA C 2023 Rule 14.2 forbids the second clause from using any object that is modified in the for-loop body, so this violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2384.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/*\n * Probe/logging helpers\n * These functions add non-intrusive logging to a file so that callers and\n * other agents can observe the control flow and the state of the pointers\n * passed to OS_SelectMultiple. The original logic is preserved and the\n * implementation is only augmented with logging.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2384.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    /* Print a simple timestamp and the message */\n    fprintf(f, \"%lld: \", (long long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_dump_bytes(const void *ptr, size_t count)\n{\n    const unsigned char *p = (const unsigned char *)ptr;\n    size_t i;\n    FILE *f = fopen(\"/tmp/logs/2384.txt\", \"a\");\n    if (f == NULL || ptr == NULL)\n    {\n        if (f != NULL)\n        {\n            fprintf(f, \"(no dump)\\n\");\n            fclose(f);\n        }\n        return;\n    }\n\n    for (i = 0U; i < count; ++i)\n    {\n        fprintf(f, \"%02X\", (unsigned int)p[i]);\n        if ((i + 1U) % 16U == 0U)\n        {\n            fprintf(f, \"\\n\");\n        }\n        else if (i + 1U < count)\n        {\n            fprintf(f, \" \");\n        }\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Forward declaration of the implementation function. The real declaration\n * is expected to exist elsewhere in the project; this mirrors the original\n * usage so the wrapper compiles in-place.\n */\nextern int32_t OS_SelectMultiple_Impl(void *ReadSet, void *WriteSet, int32_t msecs);\n\n/*\n * Modified OS_SelectMultiple: adds logging before and after delegating to the\n * implementation. The original behavior (returning the return code) is\n * preserved exactly.\n */\nint32_t OS_SelectMultiple(void *ReadSet, void *WriteSet, int32_t msecs)\n{\n    int32_t return_code;\n\n    /* Log entry and parameter values (addresses and msecs) */\n    probe_log(\"ENTER OS_SelectMultiple: ReadSet=%p, WriteSet=%p, msecs=%d\",\n              (void *)ReadSet, (void *)WriteSet, (int)msecs);\n\n    /* If non-null, dump the first bytes of the sets to help reproduce\n     * scenarios where the for-loop condition/size relates to the internal\n     * layout. Keep the dump small to avoid reading too much memory. */\n    if (ReadSet != NULL)\n    {\n        probe_log(\"Dumping first 16 bytes of ReadSet (%p):\", (void *)ReadSet);\n        probe_dump_bytes(ReadSet, 16U);\n    }\n    else\n    {\n        probe_log(\"ReadSet is NULL\");\n    }\n\n    if (WriteSet != NULL)\n    {\n        probe_log(\"Dumping first 16 bytes of WriteSet (%p):\", (void *)WriteSet);\n        probe_dump_bytes(WriteSet, 16U);\n    }\n    else\n    {\n        probe_log(\"WriteSet is NULL\");\n    }\n\n    /*\n     * Preserve original logic: delegate to the implementation.\n     * The call is left unchanged so behavior remains the same.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Log exit and return code */\n    probe_log(\"EXIT OS_SelectMultiple: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}