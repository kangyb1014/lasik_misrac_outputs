{
  "user_message": "An agent A claimed that the following OS_SelectMultiple code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_SelectMultiple.\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function takes pointer parameters ReadSet and WriteSet but does not modify the objects they point to (it simply forwards them to OS_SelectMultiple_Impl and returns). Since the pointers are used as input-only, they should be declared pointing-to-const (e.g. const OS_FdSet *ReadSet, const OS_FdSet *WriteSet). Therefore Rule 8.13 is violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1756099302] OS_SelectMultiple ENTRY\n    ReadSet pointer:  (nil) (NULL)\n    WriteSet pointer: 0x7ffe8d1fdf81 (non-NULL)\n    msecs: 1\n    Note: probes do not dereference the pointers; they are logged only as addresses.\n\n[1756099302] OS_SelectMultiple BEFORE calling OS_SelectMultiple_Impl\n    Forwarding ReadSet: (nil)\n    Forwarding WriteSet: 0x7ffe8d1fdf81\n    Forwarding msecs: 1\n\n[1756099302] OS_SelectMultiple RETURN\n    return_code: -16\n\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not justified based on the provided code and evidence. Rule 8.13 advocates that pointers should point to a const-qualified type when they are used purely for input. In this function OS_SelectMultiple the parameters are simply forwarded to OS_SelectMultiple_Impl; whether they can be const depends on what the callee expects. If OS_SelectMultiple_Impl takes non-const OS_FdSet * and may modify the sets (or the API semantics require modification, as with many select-style APIs), then it is not possible/appropriate for the wrapper to change its parameters to const without changing the callee/API. The provided execution log only shows the addresses being forwarded and does not prove the underlying objects are not modified. Therefore, on the basis of the snippet and log alone, the claim that Rule 8.13 is violated is not proven and so the report is incorrect."
}