{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes pointer parameters ReadSet and WriteSet but does not modify the objects they point to (it simply forwards them to OS_SelectMultiple_Impl and returns). Since the pointers are used as input-only, they should be declared pointing-to-const (e.g. const OS_FdSet *ReadSet, const OS_FdSet *WriteSet). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/*\n * Probe logging helper functions.\n * These functions intentionally avoid dereferencing ReadSet/WriteSet because\n * their concrete type (OS_FdSet) is part of the broader project. The probes\n * only log pointer values, nullness, and the timeout to demonstrate that the\n * pointers are used as input-only (they are forwarded to the implementation\n * without modification).\n */\nstatic void probe_log_entry(const void *readPtr, const void *writePtr, int32 msecs)\n{\n    FILE *f = fopen(\"/tmp/logs/2383.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program behavior. */\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"[%ld] OS_SelectMultiple ENTRY\\n\", (long)now);\n    fprintf(f, \"    ReadSet pointer:  %p (%s)\\n\", readPtr, (readPtr == NULL) ? \"NULL\" : \"non-NULL\");\n    fprintf(f, \"    WriteSet pointer: %p (%s)\\n\", writePtr, (writePtr == NULL) ? \"NULL\" : \"non-NULL\");\n    fprintf(f, \"    msecs: %d\\n\", (int)msecs);\n    fprintf(f, \"    Note: probes do not dereference the pointers; they are logged only as addresses.\\n\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_before_impl(const void *readPtr, const void *writePtr, int32 msecs)\n{\n    FILE *f = fopen(\"/tmp/logs/2383.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"[%ld] OS_SelectMultiple BEFORE calling OS_SelectMultiple_Impl\\n\", (long)now);\n    fprintf(f, \"    Forwarding ReadSet: %p\\n\", readPtr);\n    fprintf(f, \"    Forwarding WriteSet: %p\\n\", writePtr);\n    fprintf(f, \"    Forwarding msecs: %d\\n\\n\", (int)msecs);\n    fclose(f);\n}\n\nstatic void probe_log_after_impl(int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2383.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"[%ld] OS_SelectMultiple RETURN\\n\", (long)now);\n    fprintf(f, \"    return_code: %d\\n\\n\", (int)return_code);\n    fclose(f);\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /* Log entry state: pointer values and timeout */\n    probe_log_entry((const void *)ReadSet, (const void *)WriteSet, msecs);\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n\n    /* Log just before calling the implementation */\n    probe_log_before_impl((const void *)ReadSet, (const void *)WriteSet, msecs);\n\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Log the return/exit state */\n    probe_log_after_impl(return_code);\n\n    return return_code;\n}\n"
}