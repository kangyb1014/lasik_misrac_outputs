{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_QueueGetInfo:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_SUCCESS (0)\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_queue_table\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n} OS_queue_prop_t\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\nif (return_code == OS_SUCCESS)\n{\n    token->obj_id = id;\n\n    /*\n     * The \"ConvertToken\" routine will return with the global lock\n     * in a state appropriate for returning to the caller, as indicated\n     * by the \"check_mode\" parameter.\n     *\n     * Note If this operation fails, then it always unlocks the global for\n     * all check_mode's other than NONE.\n     */\n    return_code = OS_ObjectIdConvertToken(token);\n}\n\nif (return_code != OS_SUCCESS)\n{\n    OS_ObjectIdTransactionCancel(token);\n}\n",
    "BUGCHECK_VOID(String != NULL)",
    "memset(queue_prop, 0, sizeof(OS_queue_prop_t));",
    "return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\nif (return_code == OS_SUCCESS)\n{\n    record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n    strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n    queue_prop->creator = record->creator;\n\n    /*\n     * Currently there are no additional queue details provided by the impl layer -\n     * But this could be added in the future (i.e. current/max depth, msg size, etc)\n     */\n\n    OS_ObjectIdRelease(&token);\n}",
    "OS_CHECK_POINTER(queue_prop);",
    "return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\nif (return_code != OS_SUCCESS)\n{\n    return return_code;\n}",
    "if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n{\n    /*\n     * Catch some historical mis-use of the OS_printf() call.\n     *\n     * Typically OS_printf() should NOT be called before OS_API_Init().\n     *\n     * This was never guaranteed to work, particularly on a VxWorks\n     * deployment where the utility task was enabled.\n     *\n     * However, some PSPs do this, particularly those that used POSIX\n     * where it happened to work (because OS_printf just called printf).\n     *\n     * As a workaround, use the OS_DEBUG facility to dump the message,\n     * along with a clue that this API is being used inappropriately.\n     *\n     * If debugging is not enabled, then this message will be silently\n     * discarded.\n     */\n    OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n}\nelse if (OS_SharedGlobalVars.PrintfEnabled)\n{\n    /* Format and determine the size of string to write */\n    va_start(va, String);\n    actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n    va_end(va);\n\n    if (actualsz < 0)\n    {\n        /* unlikely: vsnprintf failed */\n        actualsz = 0;\n    }\n    else if (actualsz >= OS_BUFFER_SIZE)\n    {\n        /* truncate */\n        actualsz = OS_BUFFER_SIZE - 1;\n    }\n\n    msg_buffer[actualsz] = 0;\n\n    OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n}"
  ],
  "explanation": "I focused on code locations where control-flow may be disrupted by macros or early returns, or where conditional structures could make parts of the code effectively unreachable. The fragments selected are places that should be investigated further to ensure no unreachable code exists (e.g. BUGCHECK/BUGCHECK_VOID macros that might not return, early returns from transaction init that skip later code, and conditional branches in OS_printf that may bypass significant code paths).\n\nWhy other fragments were not selected:\n- Definitions and simple constants (e.g. #define OS_SUCCESS (0), typedefs, extern declarations) are not themselves control-flow code and therefore not directly relevant to unreachable code checks.\n- Simple assignments and declarations (e.g. variable declarations at the top of OS_QueueGetInfo) are not control-flow constructs and cannot be unreachable on their own.\n- The strncpy and assignment lines were included as part of the if-block fragment above; other isolated uses of these functions elsewhere in the additional code are either obviously reachable within their control context or are not shown as being behind any non-returning macro.\n- Macro definitions unrelated to control flow were not included (for example OS_CHECK_POINTER was included as a usage site because it can affect reachability, but other macros whose definitions are not shown or which do not affect flow were not flagged).\n\nIf you want, I can also expand investigation to cover other macros (e.g. the precise definitions of BUGCHECK and BUGCHECK_VOID) and any functions called from the flagged fragments (OS_ObjectIdTransactionInit, OS_ObjectIdConvertToken, OS_ObjectIdTransactionCancel, OS_ObjectIdRelease, OS_DEBUG, OS_ConsoleWrite) to determine whether they include non-returning behavior that would cause unreachable code elsewhere."
}