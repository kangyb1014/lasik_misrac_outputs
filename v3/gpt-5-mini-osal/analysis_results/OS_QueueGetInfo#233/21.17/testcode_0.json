{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1) may read up to sizeof(queue_prop->name)-1 bytes from record->name_entry. If record->name_entry is not guaranteed to be at least that long or to contain a NUL within its own bounds (for example, record->name_entry is a smaller buffer or not NUL-terminated), strncpy can read beyond the source buffer and thus access out-of-bounds memory. Although the destination is pre-zeroed and the chosen length prevents writing past the destination, the source-read case is not guaranteed safe from the shown code, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2339.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append textual logs to /tmp/logs/2339.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2339.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    /* Log entry and parameter state */\n    log_probe(\"OS_QueueGetInfo ENTER: queue_id=0x%llx, queue_prop=%p\",\n              (unsigned long long)(uintptr_t)queue_id, (void *)queue_prop);\n\n    /* Preserve original behavior: clear the output structure */\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    /* Log that the destination has been zeroed and record expected name size */\n    {\n        size_t name_size = sizeof(((OS_queue_prop_t *)0)->name);\n        log_probe(\"memset done: queue_prop=%p, sizeof(OS_queue_prop_t)=%zu, name_size=%zu\",\n                  (void *)queue_prop, (size_t)sizeof(OS_queue_prop_t), name_size);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    log_probe(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        /* Log record and its name_entry pointer prior to the copy */\n        log_probe(\"record=%p, record->name_entry=%p, record->creator=(unknown)\",\n                  (void *)record,\n                  /* Print name_entry pointer if available as pointer, do not dereference */\n                  (void *)((record) ? (void *)record->name_entry : NULL));\n\n        /* Compute the intended copy length exactly as in the original code */\n        size_t name_size = sizeof(((OS_queue_prop_t *)0)->name);\n        size_t copy_len = (name_size > 0) ? (name_size - 1) : 0;\n        log_probe(\"About to strncpy: dest=%p, src=%p, copy_len=%zu\",\n                  (void *)&queue_prop->name, (void *)((record) ? (void *)record->name_entry : NULL), copy_len);\n\n        /* ORIGINAL OPERATION: perform the copy (preserve original logic) */\n        strncpy(queue_prop->name, record->name_entry, copy_len);\n        queue_prop->creator = record->creator;\n\n        /* After the copy, log the resulting destination contents and related state. */\n        /* Reading queue_prop->name is safe because it was memset to 0 above. */\n        log_probe(\"strncpy done: dest=%p, dest_name='%s', copy_len=%zu, creator=%llu\",\n                  (void *)&queue_prop->name,\n                  (queue_prop->name[0] ? queue_prop->name : \"\"),\n                  copy_len,\n                  (unsigned long long)queue_prop->creator);\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    log_probe(\"OS_QueueGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}