{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_common_record_t *record;",
    "strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);",
    "record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);",
    "queue_prop->creator = record->creator;"
  ],
  "explanation": "Other code fragments do not need investigation for Rule 8.13 because they involve pointers that are intentionally used for modification or are not pointer-to-object cases: 1) The parameter OS_queue_prop_t *queue_prop is written to (memset, strncpy, assignment), so it cannot be const-qualified. 2) The memset(queue_prop, ...) and strncpy(...) calls show queue_prop and its name field are destinations that must be modifiable. 3) The token variable (OS_object_token_t token) is a non-pointer local, and its address is passed to ObjectId APIs for output/management\u2014such usage is for mutation/ownership handling, not a candidate for pointing to const-qualified types. 4) Calls to OS_ObjectIdGetById(...) and OS_ObjectIdRelease(&token) perform object lookup/release operations and involve API semantics where token/address mutability is required. 5) Local scalar variables (return_code, etc.) are not pointer types and thus not relevant to Rule 8.13. Therefore only the record-related accesses (declaration and reads from record, including record->name_entry and record->creator) merit investigation to determine whether the pointed-to data could/should be const-qualified."
}