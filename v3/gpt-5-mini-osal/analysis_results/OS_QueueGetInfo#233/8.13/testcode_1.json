{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes record->name_entry as the source to strncpy. If record->name_entry is declared without const (for example: char name_entry[...] or char *name_entry), then the pointer is not const-qualified even though it is not modified and should be. That situation violates MISRA C 2023 Rule 8.13. Fix: declare the source as const (e.g. const char name_entry[] or const char *name_entry) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Probe logging helpers for OS_QueueGetInfo\n * Writes diagnostic information to /tmp/logs/2333.txt\n */\nstatic void OS_QueueGetInfo_LogProbe(const char *stage, osal_id_t queue_id,\n                                     const OS_common_record_t *record,\n                                     const OS_queue_prop_t *queue_prop,\n                                     const char *note)\n{\n    FILE *fp = fopen(\"/tmp/logs/2333.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Print basic stage and id info */\n    (void)fprintf(fp, \"Stage: %s | queue_id: %lu | note: %s\\n\",\n                  stage, (unsigned long)queue_id, (note != NULL) ? note : \"\");\n\n    /* Log queue_prop pointer and its name buffer if available */\n    if (queue_prop != NULL)\n    {\n        (void)fprintf(fp, \"  queue_prop ptr: %p\\n\", (const void *)queue_prop);\n        /* Show current content of name buffer (safe copy up to 64 chars) */\n        char qname_sample[65] = {0};\n        /* Use memcpy/ strncpy carefully to avoid reading out-of-bounds */\n        (void)memcpy(qname_sample, queue_prop->name, sizeof(qname_sample) - 1);\n        qname_sample[64] = '\\0';\n        (void)fprintf(fp, \"  queue_prop->name (sample): '%s'\\n\", qname_sample);\n    }\n\n    /* Log record information if available */\n    if (record != NULL)\n    {\n        (void)fprintf(fp, \"  record ptr: %p\\n\", (const void *)record);\n\n        /* Log name_entry pointer and a safe sample of its content */\n        const char *name_entry = record->name_entry;\n        (void)fprintf(fp, \"  record->name_entry ptr: %p\\n\", (const void *)name_entry);\n        if (name_entry != NULL)\n        {\n            char sample[65] = {0};\n            /* Safely copy up to 64 bytes for inspection */\n            (void)memcpy(sample, name_entry, sizeof(sample) - 1);\n            sample[64] = '\\0';\n            (void)fprintf(fp, \"  record->name_entry (sample): '%s'\\n\", sample);\n        }\n\n        /* Log creator if present */\n        (void)fprintf(fp, \"  record->creator: %lu\\n\", (unsigned long)record->creator);\n    }\n\n    (void)fprintf(fp, \"\\n\");\n    (void)fclose(fp);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    /* Log entry and initial state */\n    OS_QueueGetInfo_LogProbe(\"ENTER\", queue_id, NULL, queue_prop, \"entry into OS_QueueGetInfo\");\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    /* Log after clearing the output structure */\n    OS_QueueGetInfo_LogProbe(\"AFTER_MEMSET\", queue_id, NULL, queue_prop, \"after memset of queue_prop\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        /* Log state right before the strncpy that is under investigation */\n        OS_QueueGetInfo_LogProbe(\"PRE_STRNCPY\", queue_id, record, queue_prop, \"about to call strncpy\");\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->name[sizeof(queue_prop->name) - 1] = '\\0';\n        queue_prop->creator = record->creator;\n\n        /* Log state right after the strncpy */\n        OS_QueueGetInfo_LogProbe(\"POST_STRNCPY\", queue_id, record, queue_prop, \"after strncpy and assign creator\");\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log failure to locate the object id */\n        OS_QueueGetInfo_LogProbe(\"OBJECT_NOT_FOUND\", queue_id, NULL, queue_prop, \"ObjectIdGetById failed\");\n    }\n\n    /* Final exit log */\n    OS_QueueGetInfo_LogProbe(\"EXIT\", queue_id, (return_code == OS_SUCCESS) ? record : NULL, queue_prop,\n                            (return_code == OS_SUCCESS) ? \"exiting success\" : \"exiting failure\");\n\n    return return_code;\n}\n"
}