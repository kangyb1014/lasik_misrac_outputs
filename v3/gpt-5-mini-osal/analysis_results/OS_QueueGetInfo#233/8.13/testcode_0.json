{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'record' is declared as OS_common_record_t * but is only used to read object fields (record->name_entry and record->creator). It could and should be declared as const OS_common_record_t *record to indicate read-only access (and to comply with \"A pointer should point to a const-qualified type whenever possible\").\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/2333.txt */\nstatic void OS_QueueGetInfo_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2333.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Best-effort only; do not alter program flow if logging fails */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\n/* Probe helper to safely log the record contents (read-only) */\nstatic void OS_QueueGetInfo_LogRecord(const void *rec_ptr, const char *name_entry, unsigned long long creator)\n{\n    /* Make a local, null-terminated copy of the name for safe logging */\n    char namebuf[128];\n    if (name_entry != NULL)\n    {\n        /* Ensure termination */\n        strncpy(namebuf, name_entry, sizeof(namebuf) - 1);\n        namebuf[sizeof(namebuf) - 1] = '\\0';\n    }\n    else\n    {\n        namebuf[0] = '\\0';\n    }\n\n    OS_QueueGetInfo_Log(\"OS_QueueGetInfo: record=%p, name_entry=\\\"%s\\\", creator=%llu\", rec_ptr, namebuf, creator);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry with the provided queue_id */\n    OS_QueueGetInfo_Log(\"OS_QueueGetInfo: enter, queue_id=%llu\", (unsigned long long)queue_id);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log result of ID lookup */\n    OS_QueueGetInfo_Log(\"OS_QueueGetInfo: OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        /* Log the record state before copying into queue_prop (read-only access) */\n        if (record != NULL)\n        {\n            /* Note: record->name_entry and record->creator are read-only observations for logging */\n            OS_QueueGetInfo_LogRecord((void *)record, record->name_entry, (unsigned long long)record->creator);\n        }\n        else\n        {\n            OS_QueueGetInfo_Log(\"OS_QueueGetInfo: record is NULL for token\");\n        }\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log that we released the token and are about to return success */\n        OS_QueueGetInfo_Log(\"OS_QueueGetInfo: released token and returning %d\", (int)return_code);\n    }\n    else\n    {\n        /* Log failure path */\n        OS_QueueGetInfo_Log(\"OS_QueueGetInfo: failing path, returning %d\", (int)return_code);\n    }\n\n    return return_code;\n}\n"
}