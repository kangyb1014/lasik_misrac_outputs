{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as 'OS_common_record_t *record' but is only used to read fields (record->name_entry, record->creator) after being obtained via OS_OBJECT_TABLE_GET. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified whenever possible (e.g. 'const OS_common_record_t *record'), so the non-const declaration constitutes a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helpers to log control flow and state for OS_QueueGetInfo. */\nstatic void OS_QueueGetInfo_log_record(const void *record_ptr, const void *token_ptr, unsigned long queue_id, long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2333.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_QueueGetInfo] queue_id=%lu return_code=%ld token_addr=%p record_addr=%p\\n\",\n            queue_id, return_code, token_ptr, record_ptr);\n\n    fclose(f);\n}\n\nstatic void OS_QueueGetInfo_log_record_fields(const char *name_entry, unsigned long creator)\n{\n    FILE *f = fopen(\"/tmp/logs/2333.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the fields that are read from the record. This provides evidence that the\n       record pointer is only used for reads (name_entry, creator) which is the subject\n       of the Rule 8.13 violation report. */\n    fprintf(f, \"[OS_QueueGetInfo] record->name_entry=\\\"%s\\\" record->creator=%lu\\n\",\n            (name_entry != NULL) ? name_entry : \"(null)\", creator);\n\n    fclose(f);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log entry/exit and token information regardless of success so callers\n       can correlate the object id lookup with subsequent behavior. */\n    OS_QueueGetInfo_log_record(NULL, &token, (unsigned long)queue_id, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        /* Log addresses and fields read from the record to provide evidence\n           that 'record' is only read from (name_entry and creator). */\n        OS_QueueGetInfo_log_record((const void *)record, (const void *)&token, (unsigned long)queue_id, (long)return_code);\n\n        /* If record is non-NULL, log the exact fields that are used. */\n        if (record != NULL)\n        {\n            OS_QueueGetInfo_log_record_fields(record->name_entry, (unsigned long)record->creator);\n        }\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n"
}