{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET yields a pointer to a mutable table element (&tbl[index]) and in OS_SocketListen_Impl that pointer is assigned to a non-const OS_impl_file_internal_record_t * (impl) even though the function only reads the record (accesses impl->fd). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible \u2014 here impl should be declared as const OS_impl_file_internal_record_t * (or the macro/table provide a const-qualified access) to reflect read-only use.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <time.h>\n\n/* Probe helper: log control-flow and state to /tmp/logs/1103.txt */\nstatic void OS_SocketListen_LogState(const char *stage,\n                                     const void *token_ptr,\n                                     void *impl_ptr,\n                                     int listen_result,\n                                     int saved_errno)\n{\n    FILE *f;\n    /* Try to ensure log directory exists; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t == (time_t)-1)\n    {\n        fprintf(f, \"%s: <no-time> \", stage);\n    }\n    else\n    {\n        fprintf(f, \"%s: time=%ld \", stage, (long)t);\n    }\n\n    fprintf(f, \"token=%p impl=%p \", token_ptr, impl_ptr);\n\n    if (impl_ptr != NULL)\n    {\n        /* We cannot dereference impl_ptr to a concrete type here because\n         * the real type is defined elsewhere. Instead, log that a non-null\n         * pointer was observed and the listen result and errno. The caller\n         * will also log impl->fd if available in the translation unit. */\n    }\n\n    fprintf(f, \"listen_result=%d errno=%d\", listen_result, saved_errno);\n    if (saved_errno != 0)\n    {\n        /* strerror is used on the saved errno value to avoid races where errno\n         * could change by other library calls. */\n        fprintf(f, \" (%s)\", strerror(saved_errno));\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Record entry state */\n    OS_SocketListen_LogState(\"entry\", token, NULL, -1, 0);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log after obtaining impl pointer; attempt to log the file descriptor\n     * value if possible (uses the real type in this translation unit). */\n    if (impl != NULL)\n    {\n        /* Log token, impl pointer and fd value before calling listen */\n        FILE *f = fopen(\"/tmp/logs/1103.txt\", \"a\");\n        if (f != NULL)\n        {\n            time_t t = time(NULL);\n            if (t == (time_t)-1)\n            {\n                fprintf(f, \"pre-listen: <no-time> token=%p impl=%p fd=%d\\n\",\n                        (const void *)token, (void *)impl, impl->fd);\n            }\n            else\n            {\n                fprintf(f, \"pre-listen: time=%ld token=%p impl=%p fd=%d\\n\",\n                        (long)t, (const void *)token, (void *)impl, impl->fd);\n            }\n            fclose(f);\n        }\n    }\n    else\n    {\n        OS_SocketListen_LogState(\"null-impl\", token, impl, -1, 0);\n    }\n\n    os_result = listen(impl->fd, 10);\n    /* Save errno immediately to avoid it being clobbered by logging I/O */\n    int saved_errno = errno;\n\n    /* Log result of listen call */\n    OS_SocketListen_LogState(\"post-listen\", token, impl, os_result, saved_errno);\n\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(saved_errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n"
}