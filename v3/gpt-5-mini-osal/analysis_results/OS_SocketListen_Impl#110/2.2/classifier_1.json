{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketListen_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n...\ntypedef int32_t   int32\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketListen_Impl(&token);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    return return_code;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define OS_DEBUG(__VA_ARGS__)\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The logging macro OS_DEBUG is defined as an empty replacement (\"#define OS_DEBUG(__VA_ARGS__)\"), so calls like OS_DEBUG(\"listen: %s\\n\", strerror(errno)); in OS_SocketListen_Impl expand to an empty statement at compile time. This is an executed no-op whose removal would not affect program behaviour, and therefore constitutes dead code under MISRA C 2023 Rule 2.2."
}