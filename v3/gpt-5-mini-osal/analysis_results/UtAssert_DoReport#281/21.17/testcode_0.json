{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf UtAssert_DoReport is called with File == NULL (or with File pointing to a non-NUL-terminated buffer), the call to strlen(File) will dereference NULL or scan past the buffer end and read beyond the object bounds (e.g., calling UtAssert_DoReport(NULL, ...) leads to undefined behavior).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_DoReport code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2819.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_DoReport as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoReport:\n```c\nvoid UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_DoReport code.\n",
  "test_code": "void UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    /* Probe logging: record entry and key parameters to help reproduce a potential strlen(NULL) crash.\n     * We intentionally log the pointer values (not the pointed-to contents) so we do not read through\n     * File (which could itself be non-null-terminated) before the original code executes. This preserves\n     * the original control flow while creating a trace that shows when strlen(File) was about to be called. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2819.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UtAssert_DoReport ENTER\\n\");\n            fprintf(log, \"  File pointer: %p\\n\", (const void *)File);\n            fprintf(log, \"  LineNum: %u, SegmentNum: %u, TestSeq: %u, MessageType: %u\\n\",\n                    (unsigned int)LineNum, (unsigned int)SegmentNum, (unsigned int)TestSeq, (unsigned int)MessageType);\n            fprintf(log, \"  SubsysName pointer: %p, ShortDesc pointer: %p\\n\", (const void *)SubsysName, (const void *)ShortDesc);\n            fprintf(log, \"  About to call strlen(File) - this is the location that can crash if File == NULL or not NUL-terminated\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Original logic retained (vulnerable call kept to allow reproduction of the violation scenario): */\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    /* Log the computed ReportBuffer (only reached if no crash occurred above). */\n    {\n        FILE *log = fopen(\"/tmp/logs/2819.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  ReportBuffer: %s\\n\", ReportBuffer);\n            fprintf(log, \"UtAssert_DoReport EXIT\\n\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n"
}