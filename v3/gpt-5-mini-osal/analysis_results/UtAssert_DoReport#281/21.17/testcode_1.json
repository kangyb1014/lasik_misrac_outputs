{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(File) can access memory beyond the bounds of the object referenced by File if File is NULL or not NUL-terminated. The subsequent loop uses BasePtr derived from that strlen result, but the actual string.h call (strlen) already risks out-of-bounds/undefined behavior. For example, if the caller passes File == NULL or a non-terminated buffer, strlen(File) will dereference invalid memory and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_DoReport code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2819.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_DoReport as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoReport:\n```c\nvoid UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_DoReport code.\n",
  "test_code": "void UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    /* Probe log: record entry and parameters (do not dereference File here) */\n    {\n        FILE *log = fopen(\"/tmp/logs/2819.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"UtAssert_DoReport ENTRY: File=%p, LineNum=%u, SegmentNum=%u, TestSeq=%u, MessageType=%u, SubsysName=%p, ShortDesc=%p\\n\",\n                    (const void *)File,\n                    (unsigned int)LineNum,\n                    (unsigned int)SegmentNum,\n                    (unsigned int)TestSeq,\n                    (unsigned int)MessageType,\n                    (const void *)SubsysName,\n                    (const void *)ShortDesc);\n            fprintf(log, \"About to call strlen(File)\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Original behavior retained: this call may dereference File (and will reproduce violation if File==NULL or non-terminated) */\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n\n    /* Log result of strlen (if strlen returned) */\n    {\n        FILE *log = fopen(\"/tmp/logs/2819.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"strlen returned FileLen=%u, File=%p, BasePtr=%p\\n\",\n                    (unsigned int)FileLen,\n                    (const void *)File,\n                    (const void *)BasePtr);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n\n        /* Log each iteration and the character inspected (matches original dereference behavior) */\n        {\n            FILE *log = fopen(\"/tmp/logs/2819.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Loop iter: FileLen=%u, BasePtr=%p, Char=0x%02X\\n\",\n                        (unsigned int)FileLen,\n                        (const void *)BasePtr,\n                        (unsigned char)*BasePtr);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n\n    /* Final log: record the composed report */\n    {\n        FILE *log = fopen(\"/tmp/logs/2819.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"Report sent: %s\\n\", ReportBuffer);\n            fflush(log);\n            fclose(log);\n        }\n    }\n}\n"
}