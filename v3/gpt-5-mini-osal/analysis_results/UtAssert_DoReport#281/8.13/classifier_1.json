{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoReport:\n```c\nvoid UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UtAssert_DoReport:\ntypedef uint32_t  uint32\n...\ntypedef uint8_t   uint8\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nchar        ReportBuffer[320];\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: 'ReportBuffer' is declared as an array (char ReportBuffer[320]) not as a pointer. MISRA C 2023 Rule 8.13 concerns pointer types and requires pointers to point to const-qualified types where possible. Here the buffer is intended to be written into (snprintf), so it must be mutable (non-const char[]) and does not violate Rule 8.13. (A violation example would be if a pointer were used to refer to immutable data without const, e.g. 'char *p = \"...\";' instead of 'const char *p'.)"
}