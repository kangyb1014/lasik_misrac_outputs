{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_Console_CopyOut() uses standard <string.h> routines (for example strlen/strcpy/strncpy/memcpy) to determine or copy the device_name, and console->device_name is not guaranteed to be NUL-terminated (e.g. it was filled with strncpy or another routine that can leave a full buffer without a terminator), then calls such as strlen or strcpy inside OS_Console_CopyOut() can read beyond the bounds of the device_name array. In that situation the fragment \"return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\" would result in out\u2011of\u2011bounds accesses and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2289.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_printf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_printf code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends human-readable logs to /tmp/logs/2289.txt */\nstatic void OS_printf_probe_log(const char *fmt, ...)\n{\n    char local_buf[1024];\n    va_list ap;\n    FILE *f = NULL;\n\n    va_start(ap, fmt);\n    /* safe formatting into a bounded buffer */\n    (void)vsnprintf(local_buf, sizeof(local_buf), fmt, ap);\n    va_end(ap);\n\n    f = fopen(\"/tmp/logs/2289.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* write new-line terminated entry */\n        (void)fprintf(f, \"%s\\n\", local_buf);\n        (void)fclose(f);\n    }\n}\n\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    /* Log entry and key state info early (do not dereference String here) */\n    OS_printf_probe_log(\"OS_printf ENTRY: String=%p, GlobalState=0x%08x, PrintfEnabled=%d, PrintfConsoleId=%d\",\n                        (const void *)String,\n                        (unsigned int)OS_SharedGlobalVars.GlobalState,\n                        (int)OS_SharedGlobalVars.PrintfEnabled,\n                        (int)OS_SharedGlobalVars.PrintfConsoleId);\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /* Log the unexpected initialization state */\n        OS_printf_probe_log(\"OS_printf: OS not initialized (GlobalState=0x%08x). Calling OS_DEBUG with String=%p\",\n                            (unsigned int)OS_SharedGlobalVars.GlobalState,\n                            (const void *)String);\n\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            OS_printf_probe_log(\"OS_printf: vsnprintf failed (actualsz=%d)\", actualsz);\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            OS_printf_probe_log(\"OS_printf: message truncated (actualsz=%d, buffer=%u)\", actualsz, (unsigned)sizeof(msg_buffer));\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = (char)0;\n\n        /* Log the final message that will be handed to the console write routine */\n        OS_printf_probe_log(\"OS_printf: about to call OS_ConsoleWrite(ConsoleId=%d) with msg (len=%d): %s\",\n                            (int)OS_SharedGlobalVars.PrintfConsoleId,\n                            actualsz,\n                            msg_buffer);\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n\n        /* Log return from console write for control-flow tracing */\n        OS_printf_probe_log(\"OS_printf: returned from OS_ConsoleWrite(ConsoleId=%d)\", (int)OS_SharedGlobalVars.PrintfConsoleId);\n    }\n    else\n    {\n        /* Printf disabled - log that the message was dropped */\n        OS_printf_probe_log(\"OS_printf: PrintfDisabled - message dropped (String=%p)\", (const void *)String);\n    }\n}\n"
}