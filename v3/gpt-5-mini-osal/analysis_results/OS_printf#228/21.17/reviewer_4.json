{
  "user_message": "An agent A claimed that the following OS_printf code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_printf.\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nOS_ConsoleWrite accepts a const char *Str and forwards it to OS_Console_CopyOut/other console-output code which likely uses string.h routines (e.g. strlen/strcpy) to determine or copy the string. If a caller passes a pointer that is not NUL-terminated (or otherwise points near the end of an object), those string functions can read beyond the bounds of the referenced object. Although the shown caller OS_printf ensures msg_buffer is NUL-terminated, other callers could pass non-terminated buffers and trigger out-of-bounds accesses, violating Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_printf ENTRY: String=0x557a288f3a60\nOS_printf: called when OSAL not initialized; String=0x557a288f3a60\nOS_printf ENTRY: String=0x557a288eebe0\nOS_printf: called when OSAL not initialized; String=0x557a288eebe0\nOS_printf ENTRY: String=0x557a288eec90\nOS_printf: called when OSAL not initialized; String=0x557a288eec90\nOS_printf ENTRY: String=0x557a288eed50\nOS_printf: called when OSAL not initialized; String=0x557a288eed50\nOS_printf ENTRY: String=0x557a288eee10\nOS_printf: called when OSAL not initialized; String=0x557a288eee10\nOS_printf ENTRY: String=0x557a288eeed8\nOS_printf: called when OSAL not initialized; String=0x557a288eeed8\nOS_printf ENTRY: String=0x557a288f3838\nOS_printf: called when OSAL not initialized; String=0x557a288f3838\nOS_printf ENTRY: String=0x557a288f3838\nOS_printf: called when OSAL not initialized; String=0x557a288f3838\nOS_printf ENTRY: String=0x557a288f3838\nOS_printf: called when OSAL not initialized; String=0x557a288f3838\nOS_printf ENTRY: String=0x557a288f3838\nOS_printf: called when OSAL not initialized; String=0x557a288f3838\nOS_printf ENTRY: String=0x557a288f3cd8\nOS_printf: called when OSAL not initialized; String=0x557a288f3cd8\nOS_printf ENTRY: String=0x557a288f3cd8\nOS_printf: called when OSAL not initialized; String=0x557a288f3cd8\nOS_printf ENTRY: String=0x557a288f3cd8\nOS_printf: called when OSAL not initialized; String=0x557a288f3cd8\nOS_printf ENTRY: String=0x557a288f3cd8\nOS_printf: called when OSAL not initialized; String=0x557a288f3cd8\nOS_printf ENTRY: String=0x557a288f4b48\nOS_printf: called when OSAL not initialized; String=0x557a288f4b48\nOS_printf ENTRY: String=0x557a288f4b48\nOS_printf: called when OSAL not initialized; String=0x557a288f4b48\nOS_printf ENTRY: String=0x557a288f4b48\nOS_printf: called when OSAL not initialized; String=0x557a288f4b48\nOS_printf ENTRY: String=0x557a288f4b48\nOS_printf: called when OSAL not initialized; String=0x557a288f4b48\nOS_printf ENTRY: String=0x557a288f4ef8\nOS_printf: called when OSAL not initialized; String=0x557a288f4ef8\nOS_printf ENTRY: String=0x557a288f4ef8\nOS_printf: called when OSAL not initialized; String=0x557a288f4ef8\nOS_printf ENTRY: String=0x557a288f4ef8\nOS_printf: called when OSAL not initialized; String=0x557a288f4ef8\nOS_printf ENTRY: String=0x557a288f4ef8\nOS_printf: called when OSAL not initialized; String=0x557a288f4ef8\nOS_printf ENTRY: String=0x557a288f5058\nOS_printf: called when OSAL not initialized; String=0x557a288f5058\nOS_printf ENTRY: String=0x557a288f5058\nOS_printf: called when OSAL not initialized; String=0x557a288f5058\nOS_printf ENTRY: String=0x557a288f5058\nOS_printf: called when OSAL not initialized; String=0x557a288f5058\nOS_printf ENTRY: String=0x557a288f5058\nOS_printf: called when OSAL not initialized; String=0x557a288f5058\nOS_printf ENTRY: String=0x557a288f5058\nOS_printf: called when OSAL not initialized; String=0x557a288f5058\nOS_printf ENTRY: String=0x557a288f5518\nOS_printf: called when OSAL not initialized; String=0x557a288f5518\nOS_printf ENTRY: String=0x557a288f5518\nOS_printf: called when OSAL not initialized; String=0x557a288f5518\nOS_printf ENTRY: String=0x557a288f5518\nOS_printf: called when OSAL not initialized; String=0x557a288f5518\nOS_printf ENTRY: String=0x557a288f5518\nOS_printf: called when OSAL not initialized; String=0x557a288f5518\nOS_printf ENTRY: String=0x557a288f5518\nOS_printf: called when OSAL not initialized; String=0x557a288f5518\nOS_printf ENTRY: String=0x557a288f5518\nOS_printf: called when OSAL not initialized; String=0x557a288f5518\nOS_printf ENTRY: String=0x557a288f5518\nOS_printf: called when OSAL not initialized; String=0x557a288f5518\nOS_printf ENTRY: String=0x557a288f4250\nOS_printf: called when OSAL not initialized; String=0x557a288f4250\nOS_printf ENTRY: String=0x557a288f3960\nOS_printf: called when OSAL not initialized; String=0x557a288f3960\nOS_printf ENTRY: String=0x557a288f3960\nOS_printf: called when OSAL not initialized; String=0x557a288f3960\nOS_printf ENTRY: String=0x557a288f3960\nOS_printf: called when OSAL not initialized; String=0x557a288f3960\nOS_printf ENTRY: String=0x557a288f3960\nOS_printf: called when OSAL n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_printf:\n#define OS_BUFFER_SIZE 172\n...\n#define BUGCHECK_VOID(cond) BUGCHECK(cond,)\n...\n#define OS_INIT_MAGIC_NUMBER 0xBE57C0DE\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. OS_printf itself does not call any of the <string.h> functions named in MISRA C 2023 Rule 21.17 and it takes care to avoid out\u2011of\u2011bounds writes into its local buffer: it calls vsnprintf with the buffer size, clamps the returned size if necessary, and explicitly NUL\u2011terminates msg_buffer. That use does not cause accesses beyond the bounds of msg_buffer. The downstream function OS_ConsoleWrite (and OS_Console_CopyOut) might use string.h functions such as strlen/strcpy and therefore must either document and enforce the precondition that its Str argument is a NUL\u2011terminated C string or validate/copy safely; any violation there would be a concern in those functions, not in OS_printf. In short, the shown OS_printf code does not violate Rule 21.17; the agent\u2019s scenario describes a potential issue in other callers or in OS_Console_* implementations, but that is a different location for the violation (if it exists)."
}