{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_ClearDefaultReturnValue:\n```c\nvoid UT_ClearDefaultReturnValue(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);\n    if (StubPtr != NULL)\n    {\n        UT_ClearStubEntry(StubPtr);\n    }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nUT_ClearStubEntry(StubPtr);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Likely not violated: UT_ClearStubEntry suggests it will modify the stub entry (clear it), so passing a non-const UT_StubTableEntry_t * is appropriate. A violation would occur if UT_ClearStubEntry does not modify the pointed object (i.e. is a read-only operation) or if StubPtr is never used to modify the object \u2014 in that case StubPtr should be declared as const UT_StubTableEntry_t * and the current code would violate Rule 8.13."
}