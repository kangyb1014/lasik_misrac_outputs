{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'buffer' is declared as 'const void *' and is passed to OS_GenericWrite_Impl. If OS_GenericWrite_Impl is declared to take a non-const pointer (e.g. 'void *buf'), this call discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. (If OS_GenericWrite_Impl is declared to take 'const void *', then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimedWrite as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimedWrite:\n```c\nint32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimedWrite code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper: logs control flow and state to /tmp/logs/1633.txt */\nstatic void OS_TimedWrite_ProbeLog(const char *stage,\n                                   const void *buffer,\n                                   size_t nbytes,\n                                   int32 timeout,\n                                   int32 rc,\n                                   const void *token_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/1633.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, pointer values and key integers. */\n        fprintf(f, \"[OS_TimedWrite] stage=%s\\n\", stage);\n        fprintf(f, \"  buffer=%p (type: const void *)\\n\", buffer);\n        fprintf(f, \"  nbytes=%zu\\n\", nbytes);\n        fprintf(f, \"  timeout=%d\\n\", timeout);\n        fprintf(f, \"  token_addr=%p\\n\", token_addr);\n        fprintf(f, \"  return_code=%d\\n\", rc);\n        /* Log an explanatory note for the reported MISRA Rule 8.13 scenario. */\n        fprintf(f, \"  NOTE: buffer parameter is declared as 'const void *' in OS_TimedWrite.\\n\");\n        fprintf(f, \"        If OS_GenericWrite_Impl is declared to take a non-const pointer (e.g. 'void *'),\\n\");\n        fprintf(f, \"        then passing 'buffer' may discard the const qualifier (potential MISRA Rule 8.13 violation).\\n\");\n        fprintf(f, \"----------------------------------------\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry probe: record input parameters */\n    OS_TimedWrite_ProbeLog(\"entry\", buffer, nbytes, timeout, (int32)0, (const void *)0);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    /* Log result of ObjectIdGetById */\n    OS_TimedWrite_ProbeLog(\"after_ObjectIdGetById\", buffer, nbytes, timeout, return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log immediately before calling the implementation so the call site and values are captured */\n        OS_TimedWrite_ProbeLog(\"before_OS_GenericWrite_Impl\", buffer, nbytes, timeout, return_code, (const void *)&token);\n\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n\n        /* Log after calling the implementation to capture return_code from OS_GenericWrite_Impl */\n        OS_TimedWrite_ProbeLog(\"after_OS_GenericWrite_Impl\", buffer, nbytes, timeout, return_code, (const void *)&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log the error path where ObjectIdGetById failed */\n        OS_TimedWrite_ProbeLog(\"objectid_get_failed\", buffer, nbytes, timeout, return_code, (const void *)&token);\n    }\n\n    /* Exit probe: final return_code */\n    OS_TimedWrite_ProbeLog(\"exit\", buffer, nbytes, timeout, return_code, (const void *)&token);\n\n    return return_code;\n}\n"
}