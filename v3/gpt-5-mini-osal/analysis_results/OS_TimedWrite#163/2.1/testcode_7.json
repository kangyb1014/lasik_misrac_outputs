{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses a hard-coded UINT32_MAX/2 upper bound. On targets where the type of 'val' (e.g. size_t) cannot reach that value (for example a 16-bit size_t where SIZE_MAX < UINT32_MAX/2), the expression ((val)>0 && (val)<(UINT32_MAX/2)) is always true. That makes the ARGCHECK failure branch (the error-handling path) unreachable, which violates MISRA C 2023 Rule 2.1. (Use of SIZE_MAX or a compile-time-sized bound would avoid this.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1631.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimedWrite as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimedWrite:\n```c\nint32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimedWrite code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <stddef.h>\n#include <time.h>\n#include <sys/stat.h>\n\n/*\n * Probe helpers to log control flow and state for the MISRA Rule 2.1 investigation.\n * These helpers only append human-readable diagnostic information to /tmp/logs/1631.txt\n * and do not change the logic or return values of OS_TimedWrite.\n */\nstatic void OS_TimedWrite_probe(size_t nbytes, long timeout)\n{\n    FILE *f = NULL;\n    /* Ensure directory exists; ignore errors if it cannot be created. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1631.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    uintmax_t size_max = (uintmax_t)SIZE_MAX;\n    uintmax_t uint32_half = (uintmax_t)(UINT32_MAX / 2U);\n    int cond_gt0 = (nbytes > 0) ? 1 : 0;\n    int cond_lt_half = (((uintmax_t)nbytes) < uint32_half) ? 1 : 0;\n    int size_always_lt_half = (size_max < uint32_half) ? 1 : 0;\n\n    fprintf(f, \"=== OS_TimedWrite ENTRY @ %ld\\n\", (long)now);\n    fprintf(f, \"nbytes = %zu\\n\", nbytes);\n    fprintf(f, \"sizeof(size_t) = %zu bits\\n\", (size_t)(sizeof(size_t) * 8));\n    fprintf(f, \"SIZE_MAX = %"
}