{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CHECK_APINAME expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...). If that macro uses string.h functions unbounded (for example strlen) to check the length, or if the caller passes task_name pointing to a char buffer that is not NUL-terminated within its allocated size, the string function will read past the end of the object. In addition OS_OBJECT_INIT uses strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1) which will copy up to that many bytes from nameval and also can read beyond the source if it is not NUL-terminated. Example violation: caller provides a 20-byte buffer filled with non-zero bytes (no terminating '\\0'); OS_CHECK_APINAME calling strlen(name) will over-read the buffer (and strncpy later may also read out-of-bounds), thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/*\n * Note: This file adds lightweight probes to OS_TaskCreate for logging control\n * flow and state information to /tmp/logs/2539.txt. The probes avoid reading\n * the contents of task_name to prevent introducing additional out-of-bounds\n * string accesses. They only log pointer values and scalar parameters.\n *\n * The original logic of OS_TaskCreate is preserved; only non-intrusive\n * logging calls are inserted.\n */\n\nstatic void OS_TaskCreate_LogWrite(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2539.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\n/* Lightweight probe placed at several points in the control flow.\n * Avoids dereferencing task_name beyond printing its pointer value. */\nstatic void OS_TaskCreate_LogState(const char *stage,\n                                   const void *task_id_ptr,\n                                   const void *task_name_ptr,\n                                   const void *function_pointer_ptr,\n                                   const void *stack_pointer_ptr,\n                                   size_t stack_size,\n                                   unsigned long priority,\n                                   unsigned long flags,\n                                   int32_t return_code)\n{\n    /* Log stage and the key scalar/pointer state. Do not read from task_name_ptr. */\n    OS_TaskCreate_LogWrite(\"STAGE=%s | task_id=%p | task_name=%p | function_ptr=%p | stack_ptr=%p | stack_size=%zu | priority=%lu | flags=0x%08lx | return_code=%ld\",\n                            stage,\n                            task_id_ptr,\n                            task_name_ptr,\n                            function_pointer_ptr,\n                            stack_pointer_ptr,\n                            stack_size,\n                            (unsigned long)priority,\n                            (unsigned long)flags,\n                            (long)return_code);\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n\n    /* Probe: record state before running OS_CHECK_APINAME which may inspect the string. */\n    OS_TaskCreate_LogState(\"before_OS_CHECK_APINAME\",\n                            (const void *)task_id,\n                            (const void *)task_name,\n                            (const void *)function_pointer,\n                            (const void *)stack_pointer,\n                            stack_size,\n                            priority,\n                            flags,\n                            /* return_code unknown at this point */ -1);\n\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log result of allocation attempt and token address (do not log token internal contents). */\n    OS_TaskCreate_LogWrite(\"After OS_ObjectIdAllocateNew: return_code=%ld | token_addr=%p | task_name_ptr=%p\",\n                            (long)return_code,\n                            (void *)&token,\n                            (const void *)task_name);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_TaskCreate_LogState(\"before_OS_OBJECT_INIT\",\n                                (const void *)task_id,\n                                (const void *)task_name,\n                                (const void *)function_pointer,\n                                (const void *)stack_pointer,\n                                stack_size,\n                                priority,\n                                flags,\n                                return_code);\n\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        /* Log the task table entry pointer after initialization */\n        OS_TaskCreate_LogWrite(\"After OS_OBJECT_INIT: task_table_entry=%p | token_addr=%p\",\n                                (void *)task,\n                                (void *)&token);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        OS_TaskCreate_LogState(\"before_OS_TaskCreate_Impl\",\n                                (const void *)task_id,\n                                (const void *)task_name,\n                                (const void *)function_pointer,\n                                (const void *)stack_pointer,\n                                stack_size,\n                                priority,\n                                flags,\n                                return_code);\n\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log result from OS-specific implementation */\n        OS_TaskCreate_LogWrite(\"After OS_TaskCreate_Impl: return_code=%ld | token_addr=%p\",\n                                (long)return_code,\n                                (void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Final log showing outcome and the user-visible id pointer (if any) */\n        OS_TaskCreate_LogWrite(\"After OS_ObjectIdFinalizeNew: return_code=%ld | token_addr=%p | task_id_ptr=%p\",\n                                (long)return_code,\n                                (void *)&token,\n                                (const void *)task_id);\n    }\n    else\n    {\n        /* Log the failure path */\n        OS_TaskCreate_LogWrite(\"OS_ObjectIdAllocateNew failed early: return_code=%ld | task_name_ptr=%p\",\n                                (long)return_code,\n                                (const void *)task_name);\n    }\n\n    return return_code;\n}\n"
}