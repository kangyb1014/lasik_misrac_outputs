{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe stack pointer type is declared as a non-const pointer (osal_stackptr_t is typedef'd as void *), and the OS_TaskCreate parameter/record field merely stores and passes this pointer without evidence of modifying the pointee. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible (e.g. const void * or typedef const void *osal_stackptr_t) if the pointed-to memory is not modified by the API. Thus the current declaration (osal_stackptr_t stack_pointer) violates the rule unless the implementation actually writes to the memory pointed to by stack_pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2533.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdarg.h>\n\n/* Helper logging routine - append-only log for reproducing the scenario. */\nstatic void OS_TaskCreate_Log(const char *stage,\n                              const void *task_ptr,\n                              const char *task_name,\n                              const void *function_pointer,\n                              const void *stack_pointer,\n                              size_t stack_size,\n                              unsigned long priority,\n                              unsigned long flags,\n                              long return_code,\n                              const void *task_id_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2533.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging can't be performed, don't affect logic. */\n    }\n\n    fprintf(f, \"[OS_TaskCreate] %s\\n\", stage);\n    fprintf(f, \"  task_ptr: %p\\n\", task_ptr);\n    fprintf(f, \"  task_name: %s\\n\", task_name ? task_name : \"(null)\");\n    fprintf(f, \"  function_pointer: %p\\n\", function_pointer);\n    fprintf(f, \"  stack_pointer: %p\\n\", stack_pointer);\n    fprintf(f, \"  stack_size: %zu\\n\", stack_size);\n    fprintf(f, \"  priority: %lu\\n\", priority);\n    fprintf(f, \"  flags: 0x%08lx\\n\", flags);\n    fprintf(f, \"  return_code: %ld\\n\", return_code);\n    fprintf(f, \"  task_id_ptr: %p\\n\", task_id_ptr);\n    fprintf(f, \"---\\n\");\n\n    fclose(f);\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry state */\n    OS_TaskCreate_Log(\"ENTRY\", NULL, task_name, (const void *)function_pointer,\n                      (const void *)stack_pointer, stack_size,\n                      (unsigned long)priority, (unsigned long)flags,\n                      (long)0, (const void *)task_id);\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_TaskCreate_Log(\"AFTER_ObjectIdAllocateNew\", NULL, task_name, (const void *)function_pointer,\n                      (const void *)stack_pointer, stack_size,\n                      (unsigned long)priority, (unsigned long)flags,\n                      (long)return_code, (const void *)task_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Log state after populating task record. Important for demonstrating that the stack_pointer\n         * is stored (and not obviously modified) by the API. */\n        OS_TaskCreate_Log(\"AFTER_POPULATE_TASK_RECORD\", (const void *)task, task_name,\n                          (const void *)function_pointer, (const void *)task->stack_pointer,\n                          task->stack_size, (unsigned long)task->priority,\n                          (unsigned long)flags, (long)return_code, (const void *)task_id);\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        OS_TaskCreate_Log(\"BEFORE_Impl\", (const void *)task, task_name, (const void *)function_pointer,\n                          (const void *)task->stack_pointer, task->stack_size,\n                          (unsigned long)task->priority, (unsigned long)flags,\n                          (long)return_code, (const void *)task_id);\n\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log return from implementation */\n        OS_TaskCreate_Log(\"AFTER_Impl\", (const void *)task, task_name, (const void *)function_pointer,\n                          (const void *)task->stack_pointer, task->stack_size,\n                          (unsigned long)task->priority, (unsigned long)flags,\n                          (long)return_code, (const void *)task_id);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Final state */\n        OS_TaskCreate_Log(\"FINAL\", (const void *)task, task_name, (const void *)function_pointer,\n                          (const void *)task->stack_pointer, task->stack_size,\n                          (unsigned long)task->priority, (unsigned long)flags,\n                          (long)return_code, (const void *)task_id);\n    }\n\n    return return_code;\n}\n"
}