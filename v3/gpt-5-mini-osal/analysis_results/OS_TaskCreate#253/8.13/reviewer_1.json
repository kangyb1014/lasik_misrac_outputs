{
  "user_message": "An agent A claimed that the following OS_TaskCreate code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskCreate.\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe stack pointer type is declared as a non-const pointer (osal_stackptr_t is typedef'd as void *), and the OS_TaskCreate parameter/record field merely stores and passes this pointer without evidence of modifying the pointee. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible (e.g. const void * or typedef const void *osal_stackptr_t) if the pointed-to memory is not modified by the API. Thus the current declaration (osal_stackptr_t stack_pointer) violates the rule unless the implementation actually writes to the memory pointed to by stack_pointer.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: Create_NullPtr1\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8647320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: (nil)\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: (null)\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f864f320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f1e8\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: Create_NullPtr3\n  function_pointer: (nil)\n  stack_pointer: 0x55b9f8657320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f1ec\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: Create_NullPtr3\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8657320\n  stack_size: 0\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f1ec\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f865f320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f1f0\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: CREATE_TASK0\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f863f320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f1e0\n---\n[OS_TaskCreate] AFTER_ObjectIdAllocateNew\n  task_ptr: (nil)\n  task_name: CREATE_TASK0\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f863f320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: -35\n  task_id_ptr: 0x55b9f863f1e0\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: Create_DuplName\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8677320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f1fc\n---\n[OS_TaskCreate] AFTER_ObjectIdAllocateNew\n  task_ptr: (nil)\n  task_name: Create_DuplName\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8677320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: -35\n  task_id_ptr: 0x55b9f863f1fc\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: Create_Nominal\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8687320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f204\n---\n[OS_TaskCreate] AFTER_ObjectIdAllocateNew\n  task_ptr: (nil)\n  task_name: Create_Nominal\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8687320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: -35\n  task_id_ptr: 0x55b9f863f204\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: Create_OsErr\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: (nil)\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f200\n---\n[OS_TaskCreate] AFTER_ObjectIdAllocateNew\n  task_ptr: (nil)\n  task_name: Create_OsErr\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: (nil)\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: -35\n  task_id_ptr: 0x55b9f863f200\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: Delete_Nominal\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8657320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f1ec\n---\n[OS_TaskCreate] AFTER_ObjectIdAllocateNew\n  task_ptr: (nil)\n  task_name: Delete_Nominal\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8657320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: -35\n  task_id_ptr: 0x55b9f863f1ec\n---\n[OS_TaskCreate] ENTRY\n  task_ptr: (nil)\n  task_name: SetPrio_Nominal\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f865f320\n  stack_size: 32768\n  priority: 111\n  flags: 0x00000000\n  return_code: 0\n  task_id_ptr: 0x55b9f863f1f0\n---\n[OS_TaskCreate] AFTER_ObjectIdAllocateNew\n  task_ptr: (nil)\n  task_name: SetPrio_Nominal\n  function_pointer: 0x55b9f85f7828\n  stack_pointer: 0x55b9f8\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskCreate:\ntypedef uint32 osal_id_t\n...\ntypedef osal_task((*osal_task_entry)(void))\n...\ntypedef void *osal_stackptr_t\n...\ntypedef struct\n{\n    char            task_name[OS_MAX_API_NAME];\n    size_t          stack_size;\n    osal_priority_t priority;\n    osal_task_entry entry_function_pointer;\n    osal_task_entry delete_hook_pointer;\n    void *          entry_arg;\n    osal_stackptr_t stack_pointer;\n} OS_task_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nOS_task_internal_record_t OS_task_table[LOCAL_NUM_OBJECTS]\n...\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n...\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n...\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    return return_code;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\n#define OS_OBJECT_INIT(tok, ref, namefield, nameval) {memset(ref,0,sizeof(*ref));strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1);OS_ObjectIdGlobalFromToken(&tok)->name_entry=ref->namefield;}\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_CHECK_APINAME(str) OS_CHECK_STRING(str,OS_MAX_API_NAME,OS_ERR_NAME_TOO_LONG)\n...\n#define OS_ADD_TASK_FLAGS 0\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reporter\u2019s claim rests on the assumption that the stack pointer points to memory that is never written, so it ought to be declared pointing-to-const. In this code base the stack pointer type is intentionally typedef'd as void * (osal_stackptr_t) and stored in the task record for use by OS-specific code. A task stack is semantically memory that the OS or low-level implementation may write (e.g. to initialize a task context or to use a user-supplied stack). Therefore making it const could be incorrect for the API\u2019s intended semantics. MISRA 8.13 is a guideline to prefer const when the pointed-to object is not modified, but an API that may need to modify or hand ownership of writable memory may legitimately use a non-const pointer. Given the surrounding code and typical semantics of a task stack, there is no clear MISRA 8.13 violation here. If, however, the implementation and all callers truly never modify the pointed-to memory, then the typedef and parameter could be tightened to const and the rule would be applicable \u2014 but that is a design decision, not an automatic violation in this code as provided."
}