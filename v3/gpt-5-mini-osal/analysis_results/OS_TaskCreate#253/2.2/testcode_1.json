{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"flags |= OS_ADD_TASK_FLAGS;\" is dead code because OS_ADD_TASK_FLAGS is defined as 0 in the provided project. OR-ing with 0 never changes flags, and removing the statement would not affect program behaviour; the operation is executed but has no effect (it only sets flags to flags), thus violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2532.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "int32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Local logging probe variables */\n    FILE *osal_probe_log = NULL;\n    unsigned int flags_before = 0u;\n    unsigned int flags_after = 0u;\n    unsigned int add_flags = 0u;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /*\n         * Insert logging probes around the flags modification so that other agents can\n         * reproduce and gather evidence for the potential dead-code scenario.\n         * The logs are appended to /tmp/logs/2532.txt. If opening the log file fails\n         * the code continues normally (logging is non-essential) so original logic is preserved.\n         */\n        osal_probe_log = fopen(\"/tmp/logs/2532.txt\", \"a\");\n        if (osal_probe_log != NULL)\n        {\n            flags_before = (unsigned int)flags;\n            add_flags = (unsigned int)OS_ADD_TASK_FLAGS;\n            fprintf(osal_probe_log, \"OS_TaskCreate: enter (token=%u, name=\\\"%s\\\")\\n\", (unsigned int)token, task_name ? task_name : \"(null)\");\n            fprintf(osal_probe_log, \"OS_TaskCreate: flags_before=0x%08X, OS_ADD_TASK_FLAGS=0x%08X\\n\", flags_before, add_flags);\n            fflush(osal_probe_log);\n        }\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Capture flags after modification for the log */\n        if (osal_probe_log != NULL)\n        {\n            flags_after = (unsigned int)flags;\n            fprintf(osal_probe_log, \"OS_TaskCreate: flags_after=0x%08X\\n\", flags_after);\n            if (flags_before == flags_after)\n            {\n                fprintf(osal_probe_log, \"OS_TaskCreate: NOTE: flags unchanged by OR operation (possible OS_ADD_TASK_FLAGS==0)\\n\");\n            }\n            else\n            {\n                fprintf(osal_probe_log, \"OS_TaskCreate: NOTE: flags changed by OR operation\\n\");\n            }\n            fflush(osal_probe_log);\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        if (osal_probe_log != NULL)\n        {\n            fprintf(osal_probe_log, \"OS_TaskCreate: OS_TaskCreate_Impl returned %ld\\n\", (long)return_code);\n            fflush(osal_probe_log);\n            fclose(osal_probe_log);\n            osal_probe_log = NULL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n"
}