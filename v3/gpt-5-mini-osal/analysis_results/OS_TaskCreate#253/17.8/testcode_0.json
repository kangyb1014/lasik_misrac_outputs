{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"flags |= OS_ADD_TASK_FLAGS;\" modifies the parameter variable 'flags' (type uint32) inside OS_TaskCreate. MISRA C 2023 Rule 17.8 states a function parameter should not be modified; this in-place update of the parameter is a direct violation. (Note: the rule's pointer exception is not relevant here because 'flags' is passed by value, not via pointer.) Recommended fix: copy flags to a local variable (e.g. uint32 local_flags = flags;) and modify that, then pass local_flags to subsequent calls.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2537.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe/log helper for OS_TaskCreate. Writes state and control flow logs to /tmp/logs/2537.txt. */\nstatic void OS_TaskCreate_Log(const char *stage, const char *task_name, const void *function_pointer,\n                              const void *stack_pointer, const void *task_id_ptr, uint32 flags, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2537.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_TaskCreate] %s\\n\", stage);\n        if (task_name != NULL)\n        {\n            fprintf(f, \"  task_name: '%s'\\n\", task_name);\n        }\n        fprintf(f, \"  function_pointer: %p\\n\", function_pointer);\n        fprintf(f, \"  stack_pointer: %p\\n\", stack_pointer);\n        fprintf(f, \"  task_id_ptr: %p\\n\", task_id_ptr);\n        fprintf(f, \"  flags: 0x%08x\\n\", (unsigned)flags);\n        fprintf(f, \"  return_code: %d\\n\", (int)return_code);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry state */\n    OS_TaskCreate_Log(\"ENTRY (before parameter checks)\", task_name, (const void *)function_pointer, (const void *)stack_pointer, (const void *)task_id, flags, 0);\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Log state just before flags are modified (captures the original parameter value) */\n        OS_TaskCreate_Log(\"BEFORE_FLAGS_MODIFICATION\", task_name, (const void *)function_pointer, (const void *)stack_pointer, (const void *)task_id, flags, return_code);\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Log state immediately after flags modification (evidence of in-place parameter modification) */\n        OS_TaskCreate_Log(\"AFTER_FLAGS_MODIFICATION\", task_name, (const void *)function_pointer, (const void *)stack_pointer, (const void *)task_id, flags, return_code);\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        OS_TaskCreate_Log(\"BEFORE_IMPL_CALL\", task_name, (const void *)function_pointer, (const void *)stack_pointer, (const void *)task_id, flags, return_code);\n        return_code = OS_TaskCreate_Impl(&token, flags);\n        OS_TaskCreate_Log(\"AFTER_IMPL_CALL\", task_name, (const void *)function_pointer, (const void *)stack_pointer, (const void *)task_id, flags, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n        OS_TaskCreate_Log(\"AFTER_FINALIZE\", task_name, (const void *)function_pointer, (const void *)stack_pointer, (const void *)task_id, flags, return_code);\n    }\n    else\n    {\n        /* Log allocation failure path */\n        OS_TaskCreate_Log(\"ALLOCATE_FAILED\", task_name, (const void *)function_pointer, (const void *)stack_pointer, (const void *)task_id, flags, return_code);\n    }\n\n    /* Log exit state */\n    OS_TaskCreate_Log(\"EXIT\", task_name, (const void *)function_pointer, (const void *)stack_pointer, (const void *)task_id, flags, return_code);\n\n    return return_code;\n}\n"
}