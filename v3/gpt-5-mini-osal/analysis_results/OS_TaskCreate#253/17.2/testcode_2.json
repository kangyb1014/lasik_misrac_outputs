{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_SharedGlobalVars.EventHandler is (perhaps accidentally) assigned to OS_NotifyEvent or to another function that eventually calls OS_NotifyEvent, then OS_NotifyEvent will invoke the function pointer which will call back into OS_NotifyEvent, producing indirect recursion (infinite recursion/stack overflow). For example: OS_SharedGlobalVars.EventHandler = OS_NotifyEvent; then calling OS_NotifyEvent(...) calls EventHandler(...)->OS_NotifyEvent(...), violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2536.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/*\n * Probe/log helper for OS_TaskCreate\n * Appends diagnostic information to /tmp/logs/2536.txt so other agents can reproduce\n * and gather evidence about control flow and function pointers used when creating tasks.\n */\nstatic void OS_TaskCreate_ProbeLog(const char *stage,\n                                   const char *task_name,\n                                   void *function_pointer,\n                                   void *stack_pointer,\n                                   size_t stack_size,\n                                   unsigned long priority,\n                                   uint32_t flags,\n                                   uintptr_t token_val,\n                                   int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2536.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_TaskCreate] %s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  task_name: %s\\n\", task_name ? task_name : \"(null)\");\n    fprintf(f, \"  function_pointer: %p\\n\", function_pointer);\n    fprintf(f, \"  stack_pointer: %p\\n\", stack_pointer);\n    fprintf(f, \"  stack_size: %zu\\n\", stack_size);\n    fprintf(f, \"  priority: %lu\\n\", priority);\n    fprintf(f, \"  flags: 0x%08\" PRIx32 \"\\n\", flags);\n    fprintf(f, \"  token (raw): 0x%016\" PRIxPTR \"\\n\", token_val);\n    fprintf(f, \"  return_code: %ld\\n\", (long)return_code);\n    fprintf(f, \"-------------------------------\\n\");\n\n    fclose(f);\n}\n\n/*\n * Original OS_TaskCreate with added probes. The original logic is preserved; probes only\n * append diagnostic information to a log file for later analysis.\n */\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Log initial input information -- no token yet */\n    OS_TaskCreate_ProbeLog(\"entry\",\n                            task_name,\n                            (void *)function_pointer,\n                            (void *)stack_pointer,\n                            stack_size,\n                            (unsigned long)priority,\n                            flags,\n                            (uintptr_t)0,\n                            (int32_t)0);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log result of ObjectIdAllocateNew (token may now be valid if success) */\n    OS_TaskCreate_ProbeLog(\"after_ObjectIdAllocateNew\",\n                            task_name,\n                            (void *)function_pointer,\n                            (void *)stack_pointer,\n                            stack_size,\n                            (unsigned long)priority,\n                            flags,\n                            (uintptr_t)token,\n                            (int32_t)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Log state before calling OS-specific implementation. */\n        OS_TaskCreate_ProbeLog(\"before_Impl\",\n                                task_name,\n                                (void *)function_pointer,\n                                (void *)stack_pointer,\n                                stack_size,\n                                (unsigned long)priority,\n                                flags,\n                                (uintptr_t)token,\n                                (int32_t)return_code);\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log result of Impl */\n        OS_TaskCreate_ProbeLog(\"after_Impl\",\n                                task_name,\n                                (void *)function_pointer,\n                                (void *)stack_pointer,\n                                stack_size,\n                                (unsigned long)priority,\n                                flags,\n                                (uintptr_t)token,\n                                (int32_t)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Final log after finalize */\n        OS_TaskCreate_ProbeLog(\"after_Finalize\",\n                                task_name,\n                                (void *)function_pointer,\n                                (void *)stack_pointer,\n                                stack_size,\n                                (unsigned long)priority,\n                                flags,\n                                (uintptr_t)token,\n                                (int32_t)return_code);\n    }\n\n    return return_code;\n}\n"
}