{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * but is only used for read-only access (reading record->name_entry). According to MISRA C 2023 Rule 8.13 it should be a pointer to a const-qualified type when possible (e.g. const OS_common_record_t *record = OS_ObjectIdGlobalFromToken(&token);). Therefore the code fragment violates the rule by not qualifying the pointer as pointing to const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append a formatted log line to the specified file. */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1893.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Log entry and input state */\n    os_log_probe(\"OS_GetResourceName ENTRY: object_id=%lu, buffer=%p, buffer_size=%zu\",\n                 (unsigned long)object_id, (void *)buffer, buffer_size);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    os_log_probe(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        os_log_probe(\"Token address=%p, record=%p\", (void *)&token, (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            /* Log the pointer to the name and a short preview of the name */\n            char name_preview[128];\n            size_t preview_len = 0U;\n\n            /* Safely copy up to sizeof(name_preview)-1 bytes for logging */\n            if (record->name_entry != NULL)\n            {\n                (void)strncpy(name_preview, record->name_entry, sizeof(name_preview) - 1U);\n                name_preview[sizeof(name_preview) - 1U] = '\\0';\n                preview_len = strlen(name_preview);\n            }\n\n            os_log_probe(\"record->name_entry=%p, preview='%s', preview_len=%zu\",\n                         (void *)record->name_entry, name_preview, preview_len);\n\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            os_log_probe(\"Computed name_len=%zu (with buffer_size=%zu)\", name_len, buffer_size);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                os_log_probe(\"Name too long: buffer_size=%zu <= name_len=%zu -> set return_code=OS_ERR_NAME_TOO_LONG\",\n                             buffer_size, name_len);\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1U;\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            /* Log the result copied into the buffer (safe preview) */\n            {\n                char buf_preview[128];\n                (void)strncpy(buf_preview, buffer, sizeof(buf_preview) - 1U);\n                buf_preview[sizeof(buf_preview) - 1U] = '\\0';\n                os_log_probe(\"Final buffer content preview='%s', final_name_len=%zu\", buf_preview, name_len);\n            }\n        }\n        else\n        {\n            os_log_probe(\"record->name_entry is NULL\");\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_log_probe(\"Released token at %p\", (void *)&token);\n    }\n\n    os_log_probe(\"OS_GetResourceName EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}