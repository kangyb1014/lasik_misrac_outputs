{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member record->name_entry appears to be a non-const pointer (e.g. declared as char *name_entry in OS_common_record_t) but is only used for reading (checked against NULL, passed to OS_strnlen and used as the memcpy source). Since the pointed-to data is not modified, the pointer should be const-qualified (const char *) \u2014 the current non-const declaration would violate MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper - appends a line to /tmp/logs/1893.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1893.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Log function entry and parameters */\n    probe_log(\"OS_GetResourceName ENTRY: object_id=%llu buffer=%p buffer_size=%zu\",\n              (unsigned long long)(uintptr_t)object_id, (void *)buffer, buffer_size);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    probe_log(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        probe_log(\"Obtained record pointer: %p\", (void *)record);\n\n        /* Log the raw name_entry pointer value for the record */\n        probe_log(\"record->name_entry pointer: %p\", (record != NULL) ? (void *)record->name_entry : (void *)NULL);\n\n        if (record->name_entry != NULL)\n        {\n            /* compute name length as in original code */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            probe_log(\"Computed name_len=%zu (using buffer_size=%zu)\", name_len, buffer_size);\n\n            /* Also capture a small preview of the name safely for diagnostics */\n            {\n                size_t preview_max = 64U;\n                size_t preview_len = OS_strnlen(record->name_entry, preview_max);\n                char preview[65];\n\n                if (preview_len > 0)\n                {\n                    /* copy preview_len bytes and NUL-terminate for logging */\n                    if (preview_len > sizeof(preview) - 1U)\n                    {\n                        preview_len = sizeof(preview) - 1U;\n                    }\n                    memcpy(preview, record->name_entry, preview_len);\n                    preview[preview_len] = '\\0';\n                }\n                else\n                {\n                    preview[0] = '\\0';\n                }\n\n                probe_log(\"Name preview (up to %zu chars): '%s' (preview_len=%zu)\", preview_max, preview, preview_len);\n            }\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                probe_log(\"Name too long for buffer: setting return_code=%d adjusted_name_len=%zu\", (int)return_code, name_len);\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            probe_log(\"Copied name to buffer (%zu bytes) resulting buffer[0..%zu]='%s'\", name_len, name_len, buffer);\n        }\n        else\n        {\n            probe_log(\"record->name_entry is NULL - leaving buffer empty\");\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"OS_ObjectIdRelease called for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n    }\n\n    probe_log(\"OS_GetResourceName EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}