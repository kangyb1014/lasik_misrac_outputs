{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment uses record->name_entry only as a read-only source (passed to OS_strnlen and memcpy). If OS_common_record_t::name_entry is declared as a non-const pointer (e.g. char *name_entry), this violates MISRA C 2023 Rule 8.13 because the pointer should be const-qualified (const char *) when possible. If, however, name_entry is already declared as const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    /* Open probe log. Non-fatal if logging cannot be performed. */\n    FILE *log = fopen(\"/tmp/logs/1893.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_GetResourceName ENTER: object_id=%llu buffer=%p buffer_size=%zu\\n\",\n                (unsigned long long)object_id, (void *)buffer, buffer_size);\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (log)\n        {\n            fprintf(log, \"record=%p\\n\", (void *)record);\n            fflush(log);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* compute length but limit to the provided buffer size */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            if (log)\n            {\n                /* log pointer and observed name length (limited by buffer_size) */\n                fprintf(log, \"name_entry=%p observed_len=%zu\\n\", (void *)record->name_entry, name_len);\n                fflush(log);\n            }\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                if (log)\n                {\n                    fprintf(log, \"name too long: buffer_size=%zu <= observed_len=%zu -> return_code=OS_ERR_NAME_TOO_LONG\\n\",\n                            buffer_size, name_len);\n                    fflush(log);\n                }\n\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n\n            /* perform copy as original code */\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            if (log)\n            {\n                /* log the copied content up to name_len (safe because we just nul-terminated) */\n                fprintf(log, \"copied_name_len=%zu copied_name='%.*s'\\n\", name_len, (int)name_len, buffer);\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"record->name_entry is NULL, nothing copied\\n\");\n                fflush(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"Released object token\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_GetResourceName EXIT: return_code=%d buffer_after='%s'\\n\", (int)return_code, buffer);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}