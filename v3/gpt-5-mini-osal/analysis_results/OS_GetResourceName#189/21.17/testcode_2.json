{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf buffer_size is larger than the storage allocated for record->name_entry (or the name is not NUL-terminated within that storage), OS_strnlen(record->name_entry, buffer_size) will call memchr(record->name_entry, 0, buffer_size) which can read past the bounds of record->name_entry. Then memcpy(buffer, record->name_entry, name_len) may copy bytes beyond the source object\u2019s bounds. In this situation the memcpy line can read out-of-bounds from record->name_entry and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Probe logging helper - writes human-readable logs to /tmp/logs/1899.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Timestamp (UTC) */\n    time_t t = time(NULL);\n    struct tm tmv;\n    if (gmtime_r(&t, &tmv) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%dT%H:%M:%SZ\", &tmv) > 0)\n        {\n            fprintf(f, \"%s \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters */\n    OS_ProbeLog(\"OS_GetResourceName ENTER: object_id=%d, buffer=%p, buffer_size=%zu\",\n                (int)object_id, (void *)buffer, buffer_size);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    OS_ProbeLog(\"OS_ObjectIdGetById -> return_code=%d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        OS_ProbeLog(\"record=%p\", (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            /* Log intent to call OS_strnlen - this is the call that may read up to buffer_size bytes */\n            OS_ProbeLog(\"About to call OS_strnlen(name_entry=%p, maxlen=%zu)\", (void *)record->name_entry, buffer_size);\n\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            /* Log the result of strnlen and the check that determines copying behaviour */\n            OS_ProbeLog(\"OS_strnlen returned name_len=%zu (buffer_size=%zu)\", name_len, buffer_size);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                OS_ProbeLog(\"Name too long: adjusted name_len=%zu, return_code=%d\", name_len, return_code);\n            }\n\n            /* Log memcpy parameters but do not dereference name_entry here to avoid extra reads */\n            OS_ProbeLog(\"About to memcpy(dest=%p, src=%p, n=%zu)\", (void *)buffer, (void *)record->name_entry, name_len);\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            /* Log the resulting buffer content up to a small safe limit (min(name_len, 64)) */\n            {\n                size_t i;\n                size_t show = (name_len < 64u) ? name_len : 64u;\n                /* Print as hex to avoid non-printable issues */\n                OS_ProbeLog(\"Buffer after copy (first %zu bytes):\", show);\n                for (i = 0; i < show; ++i)\n                {\n                    OS_ProbeLog(\" buffer[%zu]=0x%02X\", i, (unsigned char)buffer[i]);\n                }\n\n                if (name_len > show)\n                {\n                    OS_ProbeLog(\"... (total name_len=%zu)\", name_len);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    OS_ProbeLog(\"OS_GetResourceName EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n"
}