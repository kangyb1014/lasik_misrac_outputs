{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'conn_record = NULL;' is an assignment that only serves to silence static analysis; it is never read before being overwritten in the path where it is used. In the success path conn_record is assigned from OS_OBJECT_TABLE_GET(conn_token) before any use; in failure paths conn_record is never used. Therefore removing this assignment would not change runtime behaviour, so it is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2442.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: appends a line to /tmp/logs/2442.txt. */\nstatic void OS_SocketBindAddress_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2442.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not alter program flow. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and input state */\n    OS_SocketBindAddress_Log(\"ENTER: OS_SocketBindAddress - sock_id=%lu, Addr=%p\", (unsigned long)sock_id, (void *)Addr);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_SocketBindAddress_Log(\"OS_ObjectIdGetById -> return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        OS_SocketBindAddress_Log(\"Lookup: record=%p, stream=%p\", (void *)record, (void *)stream);\n\n        if (stream != NULL)\n        {\n            OS_SocketBindAddress_Log(\"Stream initial: socket_domain=%ld, stream_state=0x%lx, stream_name=%p\",\n                                     (long)stream->socket_domain, (unsigned long)stream->stream_state, (void *)stream->stream_name);\n        }\n        else\n        {\n            OS_SocketBindAddress_Log(\"Stream is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            OS_SocketBindAddress_Log(\"Branch: Not a socket (INVALID domain). Setting return_code=OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            OS_SocketBindAddress_Log(\"Branch: Incorrect object state (BOUND or CONNECTED). stream_state=0x%lx. Setting return_code=OS_ERR_INCORRECT_OBJ_STATE\",\n                                     (unsigned long)stream->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            OS_SocketBindAddress_Log(\"Branch: Valid socket and state. Calling OS_SocketBindAddress_Impl with token_addr=%p, Addr=%p\", (void *)&token, (void *)Addr);\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n            OS_SocketBindAddress_Log(\"OS_SocketBindAddress_Impl -> return_code=%ld\", (long)return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_SocketBindAddress_Log(\"Impl success: calling OS_CreateSocketName and updating record/stream\");\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n\n                OS_SocketBindAddress_Log(\"After success: record->name_entry=%p, stream->stream_state=0x%lx\",\n                                         (void *)record->name_entry, (unsigned long)stream->stream_state);\n            }\n            else\n            {\n                OS_SocketBindAddress_Log(\"Impl failed with code=%ld; no further state changes\", (long)return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_SocketBindAddress_Log(\"OS_ObjectIdRelease called for token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_SocketBindAddress_Log(\"OS_ObjectIdGetById failed; returning code=%ld\", (long)return_code);\n    }\n\n    OS_SocketBindAddress_Log(\"EXIT: OS_SocketBindAddress - return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}