{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SetSocketDefaultFlags_Impl:\n```c\nvoid OS_SetSocketDefaultFlags_Impl(const OS_object_token_t *token)\n{\n    OS_impl_file_internal_record_t *impl;\n    int                             os_flags;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_flags = fcntl(impl->fd, F_GETFL);\n    if (os_flags == -1)\n    {\n        /* No recourse if F_GETFL fails - just report the error and move on. */\n        OS_DEBUG(\"fcntl(F_GETFL): %s\\n\", strerror(errno));\n    }\n    else\n    {\n        os_flags |= OS_IMPL_SOCKET_FLAGS;\n        if (fcntl(impl->fd, F_SETFL, os_flags) == -1)\n        {\n            /* No recourse if F_SETFL fails - just report the error and move on. */\n            OS_DEBUG(\"fcntl(F_SETFL): %s\\n\", strerror(errno));\n        }\n    }\n\n    impl->selectable = true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SetSocketDefaultFlags_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_DEBUG(__VA_ARGS__) \n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "os_flags = fcntl(impl->fd, F_GETFL);",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "OS_DEBUG(\"fcntl(F_GETFL): %s\\n\", strerror(errno));",
    "static inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}",
    "if (fcntl(impl->fd, F_SETFL, os_flags) == -1)\n{\n    /* No recourse if F_SETFL fails - just report the error and move on. */\n    OS_DEBUG(\"fcntl(F_SETFL): %s\\n\", strerror(errno));\n}",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);",
    "#define OS_DEBUG(__VA_ARGS__) "
  ],
  "explanation": "I marked all sites that involve calling other functions or macros that could (directly or indirectly) lead to a call chain: the table-access macro (and its underlying inline helper), the two fcntl calls, the strerror usage and the OS_DEBUG macro. Other parts of the function do not need investigation for Rule 17.2 because they are simple local declarations, assignments, bitwise operations or control flow constructs that do not perform function calls (for example the variable declarations, the os_flags |= OS_IMPL_SOCKET_FLAGS operation, the if/else structure itself, and the final impl->selectable = true assignment). The provided additional definitions show that OS_DEBUG is an empty macro and OS_ObjectIndexFromToken is a trivial inline field access; those facts reduce the likelihood of recursion, but the macro/function call sites listed above are included so they can be verified in context if any alternative definitions or platform-specific implementations exist."
}