{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1623.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    localtime_r(&t, &tm_buf);\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"[%s] \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_dump_token(const char *prefix, const OS_object_token_t *tok)\n{\n    if (tok == NULL)\n    {\n        log_append(\"%s: token=NULL\", prefix);\n        return;\n    }\n    /* Log token fields and the address so callers can see what is passed. */\n    log_append(\"%s: token addr=%p id=%u state=0x%08x name=\\\"%s\\\"\",\n               prefix, (const void *)tok, (unsigned)tok->id, (unsigned)tok->state, tok->name);\n}\nstatic void OS_CHECK_POINTER(const void *p)\n{\n    if (p == NULL)\n    {\n        log_append(\"OS_CHECK_POINTER: NULL pointer detected\");\n    }\n    else\n    {\n        log_append(\"OS_CHECK_POINTER: pointer %p is non-NULL\", p);\n    }\n}\nstatic void OS_CHECK_SIZE(size_t n)\n{\n    log_append(\"OS_CHECK_SIZE: nbytes=%zu\", n);\n}\n\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters (logged by the stub functions) */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    log_append(\"OS_TimedRead: start filedes=%u buffer=%p nbytes=%zu timeout=%d\",\n               (unsigned)filedes, buffer, nbytes, (int)timeout);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    log_append(\"OS_TimedRead: OS_ObjectIdGetById returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the token state immediately before calling the impl. */\n        probe_dump_token(\"OS_TimedRead:token before call\", &token);\n\n        /* Log that we are passing a non-const pointer (address) to the callee. */\n        log_append(\"OS_TimedRead: calling OS_GenericRead_Impl with token address %p (non-const in prototype)\", (void *)&token);\n\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        log_append(\"OS_TimedRead: OS_GenericRead_Impl returned %d\", return_code);\n\n        /* Log token state after the call so external reviewers can see if it changed. */\n        probe_dump_token(\"OS_TimedRead:token after call\", &token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    log_append(\"OS_TimedRead: exit returning %d\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c: In function 'probe_dump_token':\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:230:56: error: 'OS_object_token_t' {aka 'const struct OS_object_token'} has no member named 'id'\n  230 |                prefix, (const void *)tok, (unsigned)tok->id, (unsigned)tok->state, tok->name);\n      |                                                        ^~\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:230:75: error: 'OS_object_token_t' {aka 'const struct OS_object_token'} has no member named 'state'\n  230 |                prefix, (const void *)tok, (unsigned)tok->id, (unsigned)tok->state, tok->name);\n      |                                                                           ^~\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:230:87: error: 'OS_object_token_t' {aka 'const struct OS_object_token'} has no member named 'name'\n  230 |                prefix, (const void *)tok, (unsigned)tok->id, (unsigned)tok->state, tok->name);\n      |                                                                                       ^~\nIn file included from /tmp/tmp86a3qbbt/src/src/os/shared/inc/os-shared-globaldefs.h:37,\n                 from /tmp/tmp86a3qbbt/src/src/os/shared/inc/os-shared-file.h:30,\n                 from /tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:50:\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c: At top level:\n/tmp/tmp86a3qbbt/src/src/os/inc/osapi-macros.h:106:5: error: expected identifier or '(' before 'if'\n  106 |     if (!(cond))                                                                                            \\\n      |     ^~\n/tmp/tmp86a3qbbt/src/src/os/shared/inc/os-shared-globaldefs.h:107:31: note: in expansion of macro 'BUGCHECK'\n  107 | #define OS_CHECK_POINTER(ptr) BUGCHECK((ptr) != NULL, OS_INVALID_POINTER)\n      |                               ^~~~~~~~\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:232:13: note: in expansion of macro 'OS_CHECK_POINTER'\n  232 | static void OS_CHECK_POINTER(const void *p)\n      |             ^~~~~~~~~~~~~~~~\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:233:1: error: expected identifier or '(' before '{' token\n  233 | {\n      | ^\nIn file included from /tmp/tmp86a3qbbt/src/src/os/shared/inc/os-shared-globaldefs.h:37,\n                 from /tmp/tmp86a3qbbt/src/src/os/shared/inc/os-shared-file.h:30,\n                 from /tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:50:\n/tmp/tmp86a3qbbt/src/src/os/inc/osapi-macros.h:132:5: error: expected identifier or '(' before 'if'\n  132 |     if (!(cond))                \\\n      |     ^~\n/tmp/tmp86a3qbbt/src/src/os/shared/inc/os-shared-globaldefs.h:120:28: note: in expansion of macro 'ARGCHECK'\n  120 | #define OS_CHECK_SIZE(val) ARGCHECK((val) > 0 && (val) < (UINT32_MAX / 2), OS_ERR_INVALID_SIZE)\n      |                            ^~~~~~~~\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:243:13: note: in expansion of macro 'OS_CHECK_SIZE'\n  243 | static void OS_CHECK_SIZE(size_t n)\n      |             ^~~~~~~~~~~~~\n/tmp/tmp86a3qbbt/src/src/os/shared/src/osapi-file.c:244:1: error: expected identifier or '(' before '{' token\n  244 | {\n      | ^\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TimedRead as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1623.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    localtime_r(&t, &tm_buf);\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"[%s] \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_dump_token(const char *prefix, const OS_object_token_t *tok)\n{\n    if (tok == NULL)\n    {\n        log_append(\"%s: token=NULL\", prefix);\n        return;\n    }\n\n    /* The token type is opaque in some builds; avoid accessing internal fields\n       that may not exist. Log the address so callers can still see what is passed. */\n    log_append(\"%s: token addr=%p (opaque)\", prefix, (const void *)tok);\n}\n\n/* Renamed helper functions to avoid colliding with project macros named\n   OS_CHECK_POINTER / OS_CHECK_SIZE. These preserve the original logging\n   behaviour without redefining any macros. */\nstatic void os_check_pointer_local(const void *p)\n{\n    if (p == NULL)\n    {\n        log_append(\"OS_CHECK_POINTER: NULL pointer detected\");\n    }\n    else\n    {\n        log_append(\"OS_CHECK_POINTER: pointer %p is non-NULL\", p);\n    }\n}\n\nstatic void os_check_size_local(size_t n)\n{\n    log_append(\"OS_CHECK_SIZE: nbytes=%zu\", n);\n}\n\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters (logged by the stub functions) */\n    os_check_pointer_local(buffer);\n    os_check_size_local(nbytes);\n\n    log_append(\"OS_TimedRead: start filedes=%u buffer=%p nbytes=%zu timeout=%d\",\n               (unsigned)filedes, buffer, nbytes, (int)timeout);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    log_append(\"OS_TimedRead: OS_ObjectIdGetById returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the token state/address immediately before calling the impl. */\n        probe_dump_token(\"OS_TimedRead:token before call\", &token);\n\n        /* Log that we are passing a non-const pointer (address) to the callee. */\n        log_append(\"OS_TimedRead: calling OS_GenericRead_Impl with token address %p (non-const in prototype)\", (void *)&token);\n\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        log_append(\"OS_TimedRead: OS_GenericRead_Impl returned %d\", return_code);\n\n        /* Log token state/address after the call so external reviewers can see if it changed. */\n        probe_dump_token(\"OS_TimedRead:token after call\", &token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    log_append(\"OS_TimedRead: exit returning %d\", return_code);\n    return return_code;\n}\n",
  "explanation": "Two issues caused the compile errors: (1) probe_dump_token accessed internal fields (id, state, name) of an OS_object_token_t that can be opaque in some builds. I removed those field accesses and now only log the token pointer/address. (2) The function names OS_CHECK_POINTER and OS_CHECK_SIZE collided with existing macros, producing preprocessor errors. I renamed them to os_check_pointer_local and os_check_size_local and updated the calls in OS_TimedRead to use the new names. These changes preserve the original logic while avoiding accesses to non-existent struct members and macro name collisions."
}