{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_ObjectIdTransactionInit is ever called with token == NULL (i.e. a caller passes a NULL pointer), the call memset(token, 0, sizeof(*token)) will dereference the NULL pointer and perform writes beyond the bounds of the referenced object (undefined behavior). Although many call sites pass the address of a local token variable, the function itself does not validate token before calling memset, so this usage can lead to an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedRead code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1629.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimedRead as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimedRead:\n```c\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimedRead code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: write control-flow and state to /tmp/logs/1629.txt */\nstatic void os_log_event(const char *event,\n                         osal_id_t filedes,\n                         const void *buffer,\n                         size_t nbytes,\n                         int32 timeout,\n                         const void *token_addr,\n                         int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1629.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log a compact record: event, filedes, buffer ptr, nbytes, timeout, token addr, return_code */\n        fprintf(f, \"%s: filedes=%ld buffer=%p nbytes=%zu timeout=%ld token_addr=%p ret=%ld\\n\",\n                event,\n                (long)filedes,\n                buffer,\n                nbytes,\n                (long)timeout,\n                token_addr,\n                (long)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry log: record call parameters and address where token will live */\n    os_log_event(\"ENTRY\", filedes, buffer, nbytes, timeout, (const void *)&token, 0);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log result of GetById and the address of the token variable used in this call */\n    os_log_event(\"AFTER_GetById\", filedes, buffer, nbytes, timeout, (const void *)&token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before performing the generic read using the token */\n        os_log_event(\"BEFORE_GenericRead\", filedes, buffer, nbytes, timeout, (const void *)&token, return_code);\n\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        /* Log after generic read, before releasing token */\n        os_log_event(\"AFTER_GenericRead\", filedes, buffer, nbytes, timeout, (const void *)&token, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release */\n        os_log_event(\"AFTER_Release\", filedes, buffer, nbytes, timeout, (const void *)&token, return_code);\n    }\n\n    /* Exit log with final return code */\n    os_log_event(\"EXIT\", filedes, buffer, nbytes, timeout, (const void *)&token, return_code);\n\n    return return_code;\n}\n"
}