{
  "user_message": "Target function code is:\n```c\nint32 OS_MutSemCreate_Impl(const OS_object_token_t *token, uint32 options)\n{\n    int                              return_code;\n    pthread_mutexattr_t              mutex_attr;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n    ** initialize the attribute with default values\n    */\n    return_code = pthread_mutexattr_init(&mutex_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_init failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    ** Allow the mutex to use priority inheritance\n    */\n    return_code = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_setprotocol failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    **  Set the mutex type to RECURSIVE so a thread can do nested locks\n    */\n    return_code = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_RECURSIVE);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_settype failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    ** create the mutex\n    ** upon successful initialization, the state of the mutex becomes initialized and unlocked\n    */\n    return_code = pthread_mutex_init(&impl->id, &mutex_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. ID = %lu: %s\\n\", OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)),\n                 strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_MutSemCreate_Impl': {'callees': ['OS_ObjectIndexFromToken'], 'callers': ['OS_MutSemCreate']}, 'OS_ObjectIndexFromToken': {'callees': [], 'callers': ['OS_BinSemCreate_Impl', 'OS_BinSemDelete_Impl', 'OS_BinSemGive_Impl', 'OS_BinSemFlush_Impl', 'OS_GenericBinSemTake_Impl', 'OS_BinSemGetInfo_Impl', 'OS_ConsoleWakeup_Impl', 'OS_ConsoleTask_Entry', 'OS_ConsoleCreate_Impl', 'OS_CondVarCreate_Impl', 'OS_CondVarDelete_Impl', 'OS_CondVarUnlock_Impl', 'OS_CondVarLock_Impl', 'OS_CondVarSignal_Impl', 'OS_CondVarBroadcast_Impl', 'OS_CondVarWait_Impl', 'OS_CondVarTimedWait_Impl', 'OS_CountSemCreate_Impl', 'OS_CountSemDelete_Impl', 'OS_CountSemGive_Impl', 'OS_CountSemTake_Impl', 'OS_CountSemTimedWait_Impl', 'OS_CountSemGetInfo_Impl', 'OS_FileSysStartVolume_Impl', 'OS_FileSysMountVolume_Impl', 'OS_FileSysStatVolume_Impl', 'OS_MutSemCreate_Impl', 'OS_MutSemDelete_Impl', 'OS_MutSemGive_Impl', 'OS_MutSemTake_Impl', 'OS_QueueCreate_Impl', 'OS_QueueDelete_Impl', 'OS_QueueGet_Impl', 'OS_QueuePut_Impl', 'OS_TaskCreate_Impl', 'OS_TaskDetach_Impl', 'OS_TaskMatch_Impl', 'OS_TaskDelete_Impl', 'OS_TaskSetPriority_Impl', 'OS_TaskIdMatchSystemData_Impl', 'OS_TimeBaseLock_Impl', 'OS_TimeBaseUnlock_Impl', 'OS_TimeBase_SigWaitImpl', 'OS_TimeBaseCreate_Impl', 'OS_TimeBaseSet_Impl', 'OS_TimeBaseDelete_Impl', 'OS_ConsoleOutput_Impl', 'OS_SelectSingle_Impl', 'OS_GenericClose_Impl', 'OS_GenericSeek_Impl', 'OS_GenericRead_Impl', 'OS_GenericWrite_Impl', 'OS_FileOpen_Impl', 'OS_DirOpen_Impl', 'OS_DirClose_Impl', 'OS_DirRead_Impl', 'OS_DirRewind_Impl', 'OS_ModuleLoad_Impl', 'OS_ModuleUnload_Impl', 'OS_ModuleSymbolLookup_Impl', 'OS_SetSocketDefaultFlags_Impl', 'OS_SocketOpen_Impl', 'OS_SocketBindAddress_Impl', 'OS_SocketListen_Impl', 'OS_SocketConnect_Impl', 'OS_SocketShutdown_Impl', 'OS_SocketAccept_Impl', 'OS_SocketRecvFrom_Impl', 'OS_SocketSendTo_Impl', 'OS_BinSemCreate', 'OS_BinSemGetInfo', 'OS_CondVarCreate', 'OS_CondVarGetInfo', 'OS_CountSemCreate', 'OS_CountSemGetInfo', 'OS_DirectoryOpen', 'OS_OpenCreate', 'OS_rename', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_CloseFileByName', 'OS_FileSys_FindVirtMountPoint', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_mount', 'OS_unmount', 'OS_FS_GetPhysDriveName', 'OS_TranslatePath', 'OS_ObjectIdFindNextMatch', 'OS_ObjectIdIteratorGetNext', 'OS_ModuleLoad', 'OS_ModuleUnload', 'OS_ModuleInfo', 'OS_ModuleSymbolLookup', 'OS_MutSemCreate', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_MutSemGetInfo', 'OS_ConsoleAPI_Init', 'OS_ConsoleWrite', 'OS_QueueCreate', 'OS_QueueGet', 'OS_QueuePut', 'OS_QueueGetInfo', 'OS_CreateSocketName', 'OS_SocketOpen', 'OS_SocketListen', 'OS_SocketBindAddress', 'OS_SocketAccept', 'OS_SocketConnect', 'OS_SocketShutdown', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketGetInfo', 'OS_TaskPrepare', 'OS_TaskCreate', 'OS_TaskDelete', 'OS_TaskSetPriority', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TimeBaseCreate', 'OS_TimeBaseSet', 'OS_TimeBaseGetInfo', 'OS_TimeBaseGetFreeRun', 'OS_TimeBase_CallbackThread', 'OS_DoTimerAdd', 'OS_TimerSet', 'OS_TimerDelete', 'OS_TimerGetInfo']}, 'OS_MutSemCreate': {'callees': ['OS_printf', 'OS_ObjectIdAllocateNew', 'OS_ObjectIndexFromToken', 'OS_ObjectIdGlobalFromToken', 'OS_MutSemCreate_Impl', 'OS_ObjectIdFinalizeNew', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "OS_OBJECT_TABLE_GET",
    "OS_impl_mutex_table",
    "OS_impl_mutex_internal_record_t",
    "OS_object_token_t",
    "OS_ObjectIdFromToken",
    "OS_ObjectIdToInteger",
    "OS_DEBUG",
    "OS_SEM_FAILURE",
    "OS_SUCCESS"
  ],
  "explanation": "OS_OBJECT_TABLE_GET \u2014 This is a macro used to obtain 'impl'. Its definition must be inspected because macros frequently hide compiler extensions (GCC statement-expr, typeof, inline asm, attributes, nested macros) that would violate the MISRA rule. OS_impl_mutex_table \u2014 The object table symbol referenced by the macro; its declaration/definition may include non\u2011standard attributes or use compiler extensions (e.g. special section attributes, packed/align attributes) that affect whether language extensions are used. OS_impl_mutex_internal_record_t \u2014 The struct type of 'impl'; its definition is required to check the type of 'id' and to detect any use of extension features in the struct (bit\u2011fields with implementation specifics, zero\u2011length arrays, compiler attributes on members, anonymous unions/structs as extensions). OS_object_token_t \u2014 The token type passed in; macros/functions that operate on it (or its definition) may use extensions (typedefs with attributes, opaque types implemented via macros). OS_ObjectIdFromToken \u2014 This function/macro is used inside debug calls; if it's a macro or inline implementation it may use language extensions. Its expansion is needed to ensure no extensions are introduced there. OS_ObjectIdToInteger \u2014 Similar to the previous symbol: check whether it is a macro or inline that uses extensions (casts with typeof, statement expressions, etc.). OS_DEBUG \u2014 A logging macro used with variadic arguments; its definition must be checked for use of variadic macro extensions, statement expressions, or other compiler\u2011specific constructs. OS_SEM_FAILURE and OS_SUCCESS \u2014 These macros/constants are return values used by the function; their definitions should be checked to ensure they are plain constants and not defined via extension constructs (e.g. complex macros or expressions that rely on compiler extensions)."
}