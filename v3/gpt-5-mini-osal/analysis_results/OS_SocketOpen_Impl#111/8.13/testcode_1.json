{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'stream' is declared as a non-const pointer (OS_stream_internal_record_t *stream) but is only used to read fields (socket_type, socket_domain). The assignment 'stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);' therefore yields a pointer that could and should be const-qualified (const OS_stream_internal_record_t *stream). Because the pointer is non-const even though it need not allow modification of the pointee, this violates MISRA C 2023 Rule 8.13. (Fix: declare stream as 'const OS_stream_internal_record_t *stream'.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen_Impl:\n```c\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    os_proto = 0;\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            break;\n\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            break;\n#endif\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (impl->fd < 0)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1113.txt\n * This helper is intentionally lightweight and does not alter program logic.\n */\nstatic void OS_SocketOpen_Log(const char *stage, const OS_object_token_t *token,\n                              const OS_stream_internal_record_t *stream,\n                              const OS_impl_file_internal_record_t *impl)\n{\n    FILE *f = fopen(\"/tmp/logs/1113.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"STAGE=%s\", stage ? stage : \"(null)\");\n    fprintf(f, \" token_ptr=%p\", (void *)token);\n    if (token != NULL)\n    {\n        /* token is an object token type; print as unsigned long for portability */\n        fprintf(f, \" token_val=%lu\", (unsigned long)(*token));\n    }\n\n    fprintf(f, \" stream_ptr=%p\", (void *)stream);\n    if (stream != NULL)\n    {\n        fprintf(f, \" socket_type=%d\", (int)stream->socket_type);\n        fprintf(f, \" socket_domain=%d\", (int)stream->socket_domain);\n    }\n\n    fprintf(f, \" impl_ptr=%p\", (void *)impl);\n    if (impl != NULL)\n    {\n        fprintf(f, \" fd=%d\", impl->fd);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    /* Log entry and initial state */\n    OS_SocketOpen_Log(\"entry\", token, stream, impl);\n\n    os_proto = 0;\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            break;\n\n        default:\n            OS_SocketOpen_Log(\"unsupported_socket_type\", token, stream, impl);\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    OS_SocketOpen_Log(\"after_type\", token, stream, impl);\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            break;\n#endif\n        default:\n            OS_SocketOpen_Log(\"unsupported_socket_domain\", token, stream, impl);\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    OS_SocketOpen_Log(\"before_socket_call\", token, stream, impl);\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (impl->fd < 0)\n    {\n        OS_SocketOpen_Log(\"socket_failed\", token, stream, impl);\n        return OS_ERROR;\n    }\n\n    OS_SocketOpen_Log(\"socket_success\", token, stream, impl);\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    /* Log the state after setsockopt */\n    OS_SocketOpen_Log(\"after_setsockopt\", token, stream, impl);\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    OS_SocketOpen_Log(\"exit_success\", token, stream, impl);\n\n    return OS_SUCCESS;\n}\n"
}