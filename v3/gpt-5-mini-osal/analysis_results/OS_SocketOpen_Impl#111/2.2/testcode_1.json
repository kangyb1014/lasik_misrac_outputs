{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment \"os_proto = 0;\" is executed on entry but has no effect: for every execution path that reaches the call to socket() os_proto is overwritten in the preceding switch (OS_SocketType_DATAGRAM or OS_SocketType_STREAM). Any path that does not set os_proto returns earlier from the function. Therefore removing the assignment would not change program behaviour and it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1112.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen_Impl:\n```c\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    os_proto = 0;\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            break;\n\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            break;\n#endif\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (impl->fd < 0)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nstatic void probe_log(const char *stage,\n                      const void *token_ptr,\n                      const void *impl_ptr,\n                      const void *stream_ptr,\n                      int os_domain,\n                      int os_type,\n                      int os_proto)\n{\n    FILE *f = fopen(\"/tmp/logs/1112.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* Attempt to print whatever state information is available.  The stream\n     * pointer is expected to point to an OS_stream_internal_record_t in the\n     * real build, so the caller will also print stream-specific fields where\n     * appropriate.  Keep this function generic so it does not require\n     * additional type declarations here. */\n    fprintf(f, \"%s: token=%p impl=%p stream=%p os_domain=%d os_type=%d os_proto=%d\\n\",\n            stage, token_ptr, impl_ptr, stream_ptr, os_domain, os_type, os_proto);\n    fclose(f);\n}\n\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    /* Log initial pointers/state before initializing os_proto */\n    probe_log(\"entry_before_init\", (const void *)token, (const void *)impl, (const void *)stream, -1, -1, -1);\n\n    os_proto = 0;\n\n    /* Log that the initial assignment to os_proto was performed. This helps\n     * demonstrate whether that initial zero is later overwritten before the\n     * socket() call (the suspected dead assignment). */\n    probe_log(\"after_init_os_proto\", (const void *)token, (const void *)impl, (const void *)stream, -1, -1, os_proto);\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            /* Log that the DATAGRAM path was taken and os_proto value */\n            probe_log(\"case_DATAGRAM\", (const void *)token, (const void *)impl, (const void *)stream, -1, os_type, os_proto);\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            /* Log that the STREAM path was taken and os_proto value */\n            probe_log(\"case_STREAM\", (const void *)token, (const void *)impl, (const void *)stream, -1, os_type, os_proto);\n            break;\n\n        default:\n            probe_log(\"case_socket_type_default_return\", (const void *)token, (const void *)impl, (const void *)stream, -1, -1, os_proto);\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Log values after socket_type switch to show os_proto prior to domain resolution */\n    probe_log(\"after_socket_type_switch\", (const void *)token, (const void *)impl, (const void *)stream, -1, os_type, os_proto);\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            break;\n#endif\n        default:\n            probe_log(\"case_socket_domain_default_return\", (const void *)token, (const void *)impl, (const void *)stream, -1, os_type, os_proto);\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Log final parameters just before calling socket() to capture whether the\n     * initial assignment to os_proto had any effect at runtime. */\n    probe_log(\"before_socket_call\", (const void *)token, (const void *)impl, (const void *)stream, os_domain, os_type, os_proto);\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (impl->fd < 0)\n    {\n        /* Log the socket failure and errno for diagnostics */\n        FILE *f = fopen(\"/tmp/logs/1112.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"socket_failed: fd=%d errno=%d (%s) token=%p impl=%p stream=%p os_domain=%d os_type=%d os_proto=%d\\n\",\n                    impl->fd, errno, strerror(errno), (const void *)token, (const void *)impl, (const void *)stream, os_domain, os_type, os_proto);\n            fclose(f);\n        }\n        return OS_ERROR;\n    }\n\n    /* Log successful socket creation */\n    probe_log(\"after_socket_success\", (const void *)token, (const void *)impl, (const void *)stream, os_domain, os_type, os_proto);\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    /* Log after setsockopt attempt */\n    probe_log(\"after_setsockopt\", (const void *)token, (const void *)impl, (const void *)stream, os_domain, os_type, os_proto);\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    probe_log(\"return_success\", (const void *)token, (const void *)impl, (const void *)stream, os_domain, os_type, os_proto);\n\n    return OS_SUCCESS;\n}\n"
}