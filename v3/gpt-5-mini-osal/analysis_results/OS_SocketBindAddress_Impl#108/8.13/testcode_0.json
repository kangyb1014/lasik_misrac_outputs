{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but in this function it is only used for read access (impl->fd is read to call bind). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Declaring it as 'const OS_impl_file_internal_record_t *impl' would satisfy the rule. Therefore this code fragment violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1083.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress_Impl:\n```c\nint32 OS_SocketBindAddress_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen == 0)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = bind(impl->fd, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"bind: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1083.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketBindAddress_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    probe_log(\"OS_SocketBindAddress_Impl: entry token=%p Addr=%p pid=%d\", (const void *)token, (const void *)Addr, (int)getpid());\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    probe_log(\"OS_SocketBindAddress_Impl: impl pointer = %p\", (const void *)impl);\n    if (impl != NULL)\n    {\n        /* Log the file descriptor observed on the impl record */\n        probe_log(\"OS_SocketBindAddress_Impl: impl->fd = %d\", impl->fd);\n    }\n    else\n    {\n        probe_log(\"OS_SocketBindAddress_Impl: impl is NULL (token may be invalid)\");\n    }\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n\n    probe_log(\"OS_SocketBindAddress_Impl: sa pointer = %p sa_family = %d\", (const void *)sa, (sa != NULL) ? sa->sa_family : -1);\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    probe_log(\"OS_SocketBindAddress_Impl: computed addrlen = %zu\", (size_t)addrlen);\n\n    if (addrlen == 0)\n    {\n        probe_log(\"OS_SocketBindAddress_Impl: bad address family -> returning OS_ERR_BAD_ADDRESS\");\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    probe_log(\"OS_SocketBindAddress_Impl: calling bind(fd=%d, addrlen=%zu)\", (impl != NULL) ? impl->fd : -1, (size_t)addrlen);\n    os_result = bind(impl->fd, sa, addrlen);\n    if (os_result < 0)\n    {\n        probe_log(\"OS_SocketBindAddress_Impl: bind failed -> errno=%d strerror=%s\", errno, strerror(errno));\n        OS_DEBUG(\"bind: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    probe_log(\"OS_SocketBindAddress_Impl: bind succeeded -> returning OS_SUCCESS\");\n\n    return OS_SUCCESS;\n}\n"
}