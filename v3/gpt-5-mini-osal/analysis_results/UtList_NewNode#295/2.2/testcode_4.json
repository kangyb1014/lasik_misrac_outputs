{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(AllocNode, 0, sizeof(union NodeAllocator)); zeroes the bytes of the node area but those bytes are immediately overwritten by subsequent code (AllocNode->Node.Data, AllocNode->Node.DataSize, memcpy into the data area, and AllocNode->Node.Next/Prev). In the shown call-site UtList_Add, the Tag field is set by the caller right after UtList_NewNode returns. Therefore, with the provided code paths the memset does not affect program behaviour and can be removed \u2014 it is an executed operation whose removal would not change behaviour, i.e. dead code. (Caveat: if other callers rely on the node being zero-initialised before use, the memset would be required; but no such callers are shown.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2952.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n\n    /* Probe logging: append to /tmp/logs/2952.txt to capture control flow and state. */\n    FILE *log = fopen(\"/tmp/logs/2952.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"UtList_NewNode called: AllocNode=%p header_size=%zu dataSize=%u\\n\",\n                (void *)AllocNode, sizeof(*AllocNode), (unsigned)DataSize);\n    }\n\n    /* Original behaviour: zero the header area */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    if (log) {\n        fprintf(log, \"After memset(header):\\n\");\n        unsigned char *b = (unsigned char *)AllocNode;\n        for (size_t i = 0; i < sizeof(*AllocNode); ++i) {\n            fprintf(log, \"%02X \", (unsigned)b[i]);\n        }\n        fprintf(log, \"\\n\");\n        fflush(log);\n    }\n\n    /* Original assignments and copy */\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    if (log) {\n        fprintf(log, \"After Data assignments and memcpy:\\n\");\n        fprintf(log, \"  Node.Data=%p Node.DataSize=%u\\n\",\n                (void *)AllocNode->Node.Data, (unsigned)AllocNode->Node.DataSize);\n\n        fprintf(log, \"  header bytes now:\\n\");\n        unsigned char *h = (unsigned char *)AllocNode;\n        for (size_t i = 0; i < sizeof(*AllocNode); ++i) {\n            fprintf(log, \"%02X \", (unsigned)h[i]);\n        }\n        fprintf(log, \"\\n\");\n\n        fprintf(log, \"  data bytes (up to 64):\\n\");\n        unsigned char *d = (unsigned char *)AllocNode->Node.Data;\n        size_t max = (DataSize < 64) ? DataSize : 64;\n        for (size_t i = 0; i < max; ++i) {\n            fprintf(log, \"%02X \", (unsigned)d[i]);\n        }\n        fprintf(log, \"\\n\");\n        fflush(log);\n    }\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    if (log) {\n        fprintf(log, \"After linking Next/Prev:\\n\");\n        fprintf(log, \"  Next=%p Prev=%p\\n\", (void *)AllocNode->Node.Next, (void *)AllocNode->Node.Prev);\n\n        fprintf(log, \"Final header bytes:\\n\");\n        unsigned char *fbytes = (unsigned char *)AllocNode;\n        for (size_t i = 0; i < sizeof(*AllocNode); ++i) {\n            fprintf(log, \"%02X \", (unsigned)fbytes[i]);\n        }\n        fprintf(log, \"\\n---\\n\");\n        fclose(log);\n    }\n\n    return &AllocNode->Node;\n}\n"
}