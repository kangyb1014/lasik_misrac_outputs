{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UtList_NewNode:\ntypedef struct UtListNodeTag\n{\n    struct UtListNodeTag *Next;\n    struct UtListNodeTag *Prev;\n    void *                Data;\n    uint32                DataSize;\n    uint32                Tag;\n} UtListNode_t\n...\ntypedef uint32_t  uint32\n...\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n...\nUtListNode_t *UtList_GetHead(UtListHead_t *ListHead, uint32 Tag)\n{\n    if (Tag >= ListHead->NumberOfTags)\n    {\n        return NULL;\n    }\n    return &ListHead->Tags[Tag];\n}\n...\nvoid UtList_Insert_Before(UtListNode_t *ExistingNode, UtListNode_t *NewNode)\n{\n    NewNode->Next       = ExistingNode;\n    NewNode->Prev       = ExistingNode->Prev;\n    NewNode->Prev->Next = NewNode;\n    NewNode->Next->Prev = NewNode;\n}\n...\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n...\nint main(int argc, char *argv[])\n{\n    /*\n     * Initially clear the global objects\n     */\n    memset(&OS_BSP_Global, 0, sizeof(OS_BSP_Global));\n    memset(&OS_BSP_GenericLinuxGlobal, 0, sizeof(OS_BSP_GenericLinuxGlobal));\n\n    /*\n     * Save the argc/argv arguments for future use.\n     * In particular the UT-specific logic uses this\n     * to control verbosity.\n     *\n     * Note that the first argument (0) is the command name.  The\n     * first \"real\" argument is at position 1.\n     *\n     * However this still needs to pass it through as the application\n     * might still want to use library \"getopt\" and this expects the\n     * first parameter to be this way.\n     */\n    OS_BSP_Global.ArgC = argc;\n    OS_BSP_Global.ArgV = argv;\n\n    /*\n     * Only attempt terminal control if the stdout is a TTY\n     * and the TERM environment variable is set\n     */\n    if (getenv(\"TERM\") != NULL)\n    {\n        OS_BSP_GenericLinuxGlobal.EnableTermControl = isatty(STDOUT_FILENO);\n    }\n\n    /*\n     * Perform any other BSP-specific initialization\n     */\n    OS_BSP_Initialize();\n\n    /*\n     * Call application specific entry point.\n     * This should set up all user tasks and resources, then return\n     */\n    OS_Application_Startup();\n\n    /*\n     * OS_Application_Run() implements the background task.\n     * The user application may provide this, or a default implementation\n     * is used which just calls OS_IdleLoop().\n     */\n    OS_Application_Run();\n\n    /* Should typically never get here */\n    return OS_BSP_GetReturnStatus();\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "    /* Should typically never get here */\n    return OS_BSP_GetReturnStatus();"
  ],
  "explanation": "I examined the provided code fragments and found no other obvious instances of unreachable code. The utility functions (UtList_NewNode, UtList_Add, UtList_GetHead, UtList_Insert_Before, UtTest_AddCommon) contain conditional branches and returns that are reachable depending on runtime conditions (e.g., TagHead NULL check, TestName NULL check). The allocation and subsequent use in UtList_NewNode are sequential and reachable in normal execution (although they lack malloc NULL-checking, which is a runtime error/robustness issue, not unreachable code). There are no return statements followed by additional statements elsewhere, nor any obviously dead code blocks (e.g., code after an unconditional infinite loop or after a preceding return) in the supplied snippets. Therefore no other fragments require investigation under the unreachable-code rule."
}