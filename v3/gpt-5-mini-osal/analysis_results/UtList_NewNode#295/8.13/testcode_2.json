{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'Data' is declared as void * but is only read (passed as the source argument to memcpy). Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible \u2014 i.e. the parameter should be declared as const void *Data. (The destination AllocNode->Node.Data is writable and may remain non-const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2953.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Provide a uint32 typedef to match the original signature */\ntypedef uint32_t uint32;\n\n/* Minimal definition of the node structure so the file compiles independently. */\ntypedef struct UtListNode_t\n{\n    void *Data;\n    uint32 DataSize;\n    struct UtListNode_t *Next;\n    struct UtListNode_t *Prev;\n} UtListNode_t;\n\n/* Helper to append diagnostic logs for reproducing the violation scenario. */\nstatic void UtList_LogProbe(const char *stage, const void *data_ptr, uint32 data_size, const void *alloc_node, const void *dest_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2953.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not alter original behavior. */\n        return;\n    }\n\n    fprintf(f, \"UtList_NewNode: %s\\n\", stage);\n    fprintf(f, \"  Data parameter pointer : %p\\n\", data_ptr);\n    fprintf(f, \"  DataSize               : %u\\n\", (unsigned)data_size);\n    fprintf(f, \"  AllocNode pointer      : %p\\n\", alloc_node);\n    fprintf(f, \"  Destination pointer    : %p\\n\", dest_ptr);\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Log entry with incoming parameters */\n    UtList_LogProbe(\"Entry\", Data, DataSize, NULL, NULL);\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n\n    /* Log after allocation attempt */\n    UtList_LogProbe(\"After malloc\", Data, DataSize, AllocNode, NULL);\n\n    /* Preserve original behavior: do not change logic (no NULL check) */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n\n    /* Log just before memcpy to capture source and destination addresses */\n    UtList_LogProbe(\"Before memcpy\", Data, DataSize, AllocNode, AllocNode->Node.Data);\n\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    /* Log after memcpy to show that Data was only read and copied into allocated buffer */\n    UtList_LogProbe(\"After memcpy\", Data, DataSize, AllocNode, AllocNode->Node.Data);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    /* Final state log */\n    UtList_LogProbe(\"Return\", Data, DataSize, AllocNode, AllocNode->Node.Data);\n\n    return &AllocNode->Node;\n}\n"
}