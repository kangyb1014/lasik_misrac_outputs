{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 memcpy can access beyond bounds in multiple realistic scenarios. 1) malloc failure: AllocNode is not checked for NULL. If malloc returns NULL, AllocNode->Node.Data is NULL and memcpy(AllocNode->Node.Data, Data, DataSize) will attempt to write DataSize bytes to a NULL/invalid destination. 2) Caller-provided source buffer too small: The function does not validate that the memory pointed to by Data contains at least DataSize bytes; if not, memcpy will read beyond the source object. (Also note memset is called on AllocNode before checking for NULL, which is another related undefined-behavior risk.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2959.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <sys/stat.h>\n\n/*\n * Modified UtList_NewNode with logging probes to capture control flow and\n * state information for potential Rule 21.17 violations. The function\n * preserves the original logic; logging is inserted before the risky\n * operations so the logs can show malloc result, Data pointer and size,\n * and the imminent calls to memset/memcpy that can trigger UB.\n *\n * Notes:\n * - The function does not alter the original behavior of not checking\n *   AllocNode for NULL before using it (this is intentional so the\n *   original violation scenario is reproducible).\n * - We attempt to create /tmp/logs and append to /tmp/logs/2959.txt.\n */\n\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Ensure log directory exists if possible (best-effort). */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *log = fopen(\"/tmp/logs/2959.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"--- UtList_NewNode entry ---\\n\");\n        fprintf(log, \"Called with Data=%p, DataSize=%u\\n\", Data, (unsigned)DataSize);\n        fflush(log);\n    }\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + (size_t)DataSize);\n\n    if (log)\n    {\n        fprintf(log, \"malloc(sizeof(NodeAllocator) + DataSize) -> %p (requested %zu)\\n\",\n                (void *)AllocNode, sizeof(union NodeAllocator) + (size_t)DataSize);\n        fprintf(log, \"About to call memset(AllocNode, 0, %zu)\\n\", sizeof(union NodeAllocator));\n        fflush(log);\n    }\n\n    /* Preserve original behavior: memset is called without NULL check. */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    /* Log whether AllocNode is NULL before doing pointer arithmetic (avoid UB in logging). */\n    if (log)\n    {\n        if (AllocNode)\n        {\n            fprintf(log, \"AllocNode non-NULL: AllocNode=%p, computed DataBuf=%p\\n\",\n                    (void *)AllocNode, (void *)(&AllocNode[1]));\n        }\n        else\n        {\n            fprintf(log, \"AllocNode is NULL (malloc failed). Continuing to perform original assignments that may cause UB.\\n\");\n        }\n        fflush(log);\n    }\n\n    /* Original assignments (may cause UB if AllocNode is NULL) */\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n\n    if (log)\n    {\n        fprintf(log, \"About to memcpy(dest=%p, src=%p, size=%u)\\n\",\n                (void *)AllocNode->Node.Data, Data, (unsigned)DataSize);\n        fflush(log);\n    }\n\n    /* Original memcpy (may read/write out-of-bounds) */\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    if (log)\n    {\n        fprintf(log, \"Created node at %p -> Data=%p, DataSize=%u, Next=%p, Prev=%p\\n\",\n                (void *)&AllocNode->Node,\n                (void *)AllocNode->Node.Data,\n                (unsigned)AllocNode->Node.DataSize,\n                (void *)AllocNode->Node.Next,\n                (void *)AllocNode->Node.Prev);\n        fprintf(log, \"--- UtList_NewNode exit ---\\n\\n\");\n        fclose(log);\n    }\n\n    return &AllocNode->Node;\n}\n"
}