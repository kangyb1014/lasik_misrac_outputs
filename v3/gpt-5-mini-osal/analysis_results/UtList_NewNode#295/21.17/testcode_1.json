{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset can write outside the allocated object if the allocation fails or its size calculation is incorrect. For example, if malloc(sizeof(union NodeAllocator) + DataSize) returns NULL (allocation failure), then memset(AllocNode, 0, sizeof(union NodeAllocator)) will attempt to write via a NULL pointer. Also, if sizeof(union NodeAllocator) + DataSize overflows size_t producing a smaller allocation than sizeof(union NodeAllocator), the memset will write past the allocated block. In these cases Rule 21.17 is violated. Fix: check the return value of malloc and validate/avoid size_t overflow before calling memset.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2959.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "/* Modified UtList_NewNode with logging probes\n * Logs to: /tmp/logs/2959.txt\n * Preserves original logic (including potential risky calls) so that the\n * violation scenario can be observed and recorded.\n */\n\n#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n/* Note: UtListNode_t and uint32 are expected to be defined elsewhere in\n   the project. This file intentionally does not redefine them. */\n\nstatic void Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2959.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not alter program flow. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    /* Fallback; not ideal for multithreaded contexts, but acceptable for probes. */\n    struct tm *tmp = localtime(&t);\n    if (tmp != NULL)\n    {\n        tm_buf = *tmp;\n    }\n#endif\n\n    fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Record entry and input state */\n    Probe_Log(\"Entered UtList_NewNode: Data=%p, DataSize=%u\", Data, (unsigned)DataSize);\n\n    size_t header_size = sizeof(union NodeAllocator);\n    size_t requested_size = header_size + (size_t)DataSize;\n    Probe_Log(\"Header size=%zu, Requested size=%zu\", header_size, requested_size);\n\n    /* Detect potential size_t overflow for logging purposes only. Do not change control flow. */\n    if (requested_size < header_size)\n    {\n        Probe_Log(\"WARNING: size_t overflow detected when computing allocation size: header_size=%zu, DataSize=%u, requested_size=%zu\",\n                  header_size, (unsigned)DataSize, requested_size);\n    }\n\n    AllocNode = malloc(requested_size);\n    Probe_Log(\"malloc(%zu) returned %p\", requested_size, (void *)AllocNode);\n\n    /* Log that we're about to call memset with the header size. This call is intentionally left\n       as in the original code so that the violation scenario (e.g., NULL pointer or smaller\n       allocation) can reproduce and be recorded. */\n    Probe_Log(\"About to call memset(AllocNode=%p, 0, header_size=%zu)\", (void *)AllocNode, header_size);\n\n    memset(AllocNode, 0, header_size);\n\n    /* After memset, continue original behavior. If AllocNode was NULL or too small, the program\n       may crash here; logs written so far will provide evidence for the failure scenario. */\n    Probe_Log(\"memset completed (if execution reached here)\");\n\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n\n    Probe_Log(\"About to memcpy Data=%p -> AllocNode->Node.Data=%p, size=%u\",\n              Data, (void *)AllocNode->Node.Data, (unsigned)DataSize);\n\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    Probe_Log(\"memcpy completed (if execution reached here)\");\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    Probe_Log(\"Returning node=%p (AllocNode=%p)\", (void *)&AllocNode->Node, (void *)AllocNode);\n\n    return &AllocNode->Node;\n}\n"
}