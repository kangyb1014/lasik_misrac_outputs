{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf UT_BSP_DoText is ever called with OutputMessage == NULL or with a pointer to a non-terminated character buffer, the call strlen(OutputMessage) will dereference beyond the bounds of the referenced object (NULL or run past the buffer), causing undefined behavior. For example, an external caller could call UtAssert_Abort(NULL) (which forwards Message to UT_BSP_DoText) or pass a non-null-terminated buffer; in those cases strlen(OutputMessage) violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetCaseTypeAbbrev code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2859.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetCaseTypeAbbrev as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetCaseTypeAbbrev:\n```c\nconst char *UtAssert_GetCaseTypeAbbrev(UtAssert_CaseType_t CaseType)\n{\n    const char *AbbrevStr;\n\n    switch (CaseType)\n    {\n        case UTASSERT_CASETYPE_ABORT:\n            AbbrevStr = \"ABORT\";\n            break;\n        case UTASSERT_CASETYPE_FAILURE:\n            AbbrevStr = \"FAIL\";\n            break;\n        case UTASSERT_CASETYPE_MIR:\n            AbbrevStr = \"MIR\";\n            break;\n        case UTASSERT_CASETYPE_TSF:\n            AbbrevStr = \"TSF\";\n            break;\n        case UTASSERT_CASETYPE_TTF:\n            AbbrevStr = \"TTF\";\n            break;\n        case UTASSERT_CASETYPE_WARN:\n            AbbrevStr = \"WARN\";\n            break;\n        case UTASSERT_CASETYPE_NA:\n            AbbrevStr = \"N/A\";\n            break;\n        case UTASSERT_CASETYPE_BEGIN:\n            AbbrevStr = \"BEGIN\";\n            break;\n        case UTASSERT_CASETYPE_END:\n            AbbrevStr = \"END\";\n            break;\n        case UTASSERT_CASETYPE_PASS:\n            AbbrevStr = \"PASS\";\n            break;\n        case UTASSERT_CASETYPE_INFO:\n            AbbrevStr = \"INFO\";\n            break;\n        case UTASSERT_CASETYPE_FLOW:\n            AbbrevStr = \"FLOW\";\n            break;\n        case UTASSERT_CASETYPE_DEBUG:\n            AbbrevStr = \"DEBUG\";\n            break;\n        default:\n            /* do not return NULL, as the result may be directly passed to C library functions */\n            AbbrevStr = \"OTHER\";\n            break;\n    }\n\n    return AbbrevStr;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetCaseTypeAbbrev code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Probe/logging helpers to record control flow and state to /tmp/logs/2859.txt.\n * These functions are lightweight and do not change the original behavior of\n * UtAssert_GetCaseTypeAbbrev. They intentionally avoid dereferencing external\n * pointers (such as arbitrary message buffers) to prevent introducing new\n * undefined behavior.\n */\n\nstatic void UtAssert_EnsureLogDir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void UtAssert_WriteLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    UtAssert_EnsureLogDir();\n    f = fopen(\"/tmp/logs/2859.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\n/* Public probe function other agents can call to log an OutputMessage pointer\n * without dereferencing it. This avoids causing additional undefined behavior\n * while providing evidence (pointer value / nullness) relevant to the\n * strlen() violation scenario described in the report. */\nvoid UtAssert_ProbeOutputMessage(const char *OutputMessage)\n{\n    uintptr_t ptrval = (uintptr_t)OutputMessage;\n\n    if (OutputMessage == NULL)\n    {\n        UtAssert_WriteLog(\"[ProbeOutputMessage] OutputMessage == NULL (pointer=0x%\" PRIxPTR \")\", ptrval);\n    }\n    else\n    {\n        /* Do NOT dereference OutputMessage here; just record the pointer value\n         * and guidance for downstream inspection. */\n        UtAssert_WriteLog(\"[ProbeOutputMessage] OutputMessage != NULL (pointer=0x%\" PRIxPTR \") - NOT DEREFERENCED\", ptrval);\n        UtAssert_WriteLog(\"[ProbeOutputMessage] If this pointer is passed directly to strlen(), that may read beyond bounds or cause a crash.\");\n        UtAssert_WriteLog(\"[ProbeOutputMessage] To further validate, record the buffer and/or ensure it is NUL-terminated before calling string.h functions.\");\n    }\n}\n\n/* Internal tracer called by UtAssert_GetCaseTypeAbbrev to record which branch\n * was taken and the resulting abbreviation string. This helps correlate cases\n * (for example, ABORT) with downstream behavior (such as UT_BSP_DoText calling\n * strlen()). */\nstatic void UtAssert_LogCaseType(int CaseTypeVal, const char *AbbrevStr)\n{\n    uintptr_t addr = (uintptr_t)AbbrevStr;\n    time_t now = time(NULL);\n\n    UtAssert_WriteLog(\"[GetCaseTypeAbbrev] time=%ld CaseType=%d Abbrev=\\\"%s\\\" AbbrevAddr=0x%\" PRIxPTR,\n                     (long)now, CaseTypeVal, (AbbrevStr != NULL) ? AbbrevStr : \"(null)\", addr);\n\n    if (AbbrevStr == NULL)\n    {\n        UtAssert_WriteLog(\"[GetCaseTypeAbbrev] WARNING: AbbrevStr is NULL (should not happen). Returning NULL may propagate into C library calls.\");\n    }\n    else if (CaseTypeVal == (int)0) /* defensive: if enum defines ABORT as 0, log additional guidance */\n    {\n        /* We do not assume the numeric value of UTASSERT_CASETYPE_ABORT here, but\n         * this message is kept to help operators inspect abort-related behavior. */\n        UtAssert_WriteLog(\"[GetCaseTypeAbbrev] Note: check callers for UTASSERT_CASETYPE_ABORT; downstream code may use OutputMessage with strlen().\");\n    }\n}\n\n/* Original function with minimal instrumentation: logs the chosen abbreviation\n * each time it is called. The control flow and return value remain unchanged. */\nconst char *UtAssert_GetCaseTypeAbbrev(UtAssert_CaseType_t CaseType)\n{\n    const char *AbbrevStr;\n\n    switch (CaseType)\n    {\n        case UTASSERT_CASETYPE_ABORT:\n            AbbrevStr = \"ABORT\";\n            break;\n        case UTASSERT_CASETYPE_FAILURE:\n            AbbrevStr = \"FAIL\";\n            break;\n        case UTASSERT_CASETYPE_MIR:\n            AbbrevStr = \"MIR\";\n            break;\n        case UTASSERT_CASETYPE_TSF:\n            AbbrevStr = \"TSF\";\n            break;\n        case UTASSERT_CASETYPE_TTF:\n            AbbrevStr = \"TTF\";\n            break;\n        case UTASSERT_CASETYPE_WARN:\n            AbbrevStr = \"WARN\";\n            break;\n        case UTASSERT_CASETYPE_NA:\n            AbbrevStr = \"N/A\";\n            break;\n        case UTASSERT_CASETYPE_BEGIN:\n            AbbrevStr = \"BEGIN\";\n            break;\n        case UTASSERT_CASETYPE_END:\n            AbbrevStr = \"END\";\n            break;\n        case UTASSERT_CASETYPE_PASS:\n            AbbrevStr = \"PASS\";\n            break;\n        case UTASSERT_CASETYPE_INFO:\n            AbbrevStr = \"INFO\";\n            break;\n        case UTASSERT_CASETYPE_FLOW:\n            AbbrevStr = \"FLOW\";\n            break;\n        case UTASSERT_CASETYPE_DEBUG:\n            AbbrevStr = \"DEBUG\";\n            break;\n        default:\n            /* do not return NULL, as the result may be directly passed to C library functions */\n            AbbrevStr = \"OTHER\";\n            break;\n    }\n\n    /* Log the decision and provide guidance for investigating the strlen() issue\n     * (without introducing additional undefined behavior). */\n    UtAssert_LogCaseType((int)CaseType, AbbrevStr);\n\n    return AbbrevStr;\n}\n"
}