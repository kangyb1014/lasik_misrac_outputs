{
  "user_message": "An agent A claimed that the following OS_SocketSendTo_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketSendTo_Impl.\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe variable 'impl' is declared as OS_impl_file_internal_record_t * and is initialized via OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token). In OS_SocketSendTo_Impl the record is only read (impl->fd is used), so the pointer could and should be a pointer-to-const (const OS_impl_file_internal_record_t *impl). The macro/array yield a non-const pointer but the function does not modify the object, so this use violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketSendTo_Impl:\ntypedef struct\n{\n    size_t            ActualLength; /**< @brief Length of the actual address data */\n    OS_SockAddrData_t AddrData;     /**< @brief Abstract Address data */\n} OS_SockAddr_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In OS_SocketSendTo_Impl the variable impl is only used for read access (impl->fd) and never modifies the pointed-to object. MISRA C:2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible; therefore impl should be declared as a pointer-to-const (const OS_impl_file_internal_record_t *impl). The OS_OBJECT_TABLE_GET macro yields the address of a non-const array element, but assigning a non-const T * to a const T * is allowed and would satisfy the rule. Therefore agent A's report is correct and this code violates Rule 8.13 as written."
}