{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'impl' is declared as OS_impl_file_internal_record_t * and is initialized via OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token). In OS_SocketSendTo_Impl the record is only read (impl->fd is used), so the pointer could and should be a pointer-to-const (const OS_impl_file_internal_record_t *impl). The macro/array yield a non-const pointer but the function does not modify the object, so this use violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo_Impl:\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append structured logs to /tmp/logs/1133.txt\n * Saves and restores errno so logging does not change global errno seen by caller.\n */\nstatic void OS_SocketSendTo_Log(const char *stage,\n                                const OS_object_token_t *token,\n                                OS_impl_file_internal_record_t *impl,\n                                const struct sockaddr *sa,\n                                socklen_t addrlen,\n                                const OS_SockAddr_t *RemoteAddr,\n                                const void *buffer,\n                                size_t buflen,\n                                int os_result,\n                                int err_code)\n{\n    int saved_errno = errno;\n    FILE *fp = fopen(\"/tmp/logs/1133.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"[OS_SocketSendTo] stage=%s\\n\", stage);\n        fprintf(fp, \"  token_ptr=%p\\n\", (const void *)token);\n        if (token != NULL)\n        {\n            /* Do not dereference or assume token internals; just print pointer. */\n        }\n        fprintf(fp, \"  impl_ptr=%p\\n\", (const void *)impl);\n        if (impl != NULL)\n        {\n            fprintf(fp, \"  impl->fd=%d\\n\", impl->fd);\n        }\n        else\n        {\n            fprintf(fp, \"  impl is NULL\\n\");\n        }\n\n        fprintf(fp, \"  sa_ptr=%p\\n\", (const void *)sa);\n        if (sa != NULL)\n        {\n            fprintf(fp, \"  sa_family=%d\\n\", (int)sa->sa_family);\n        }\n\n        fprintf(fp, \"  addrlen=%u, RemoteAddr->ActualLength=%u\\n\",\n                (unsigned)addrlen,\n                (unsigned)(RemoteAddr ? RemoteAddr->ActualLength : 0u));\n\n        fprintf(fp, \"  buffer_ptr=%p, buflen=%zu\\n\", buffer, buflen);\n\n        if (os_result >= 0)\n        {\n            fprintf(fp, \"  os_result=%d\\n\", os_result);\n        }\n        else\n        {\n            fprintf(fp, \"  os_result=%d, err_code=%d, strerror=%s\\n\",\n                    os_result, err_code, err_code ? strerror(err_code) : \"(no error)\");\n        }\n\n        fprintf(fp, \"---\\n\");\n        fclose(fp);\n    }\n    errno = saved_errno;\n}\n\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Capture the source of the impl pointer for diagnostic purposes. */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n\n    /* Log initial state before computing addrlen */\n    OS_SocketSendTo_Log(\"entry\", token, impl, sa, 0, RemoteAddr, buffer, buflen, -1, 0);\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    /* Log after addrlen resolution */\n    OS_SocketSendTo_Log(\"addrlen_computed\", token, impl, sa, addrlen, RemoteAddr, buffer, buflen, -1, 0);\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        OS_SocketSendTo_Log(\"bad_address\", token, impl, sa, addrlen, RemoteAddr, buffer, buflen, -1, 0);\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n\n    if (os_result < 0)\n    {\n        int send_errno = errno;\n        /* Log failure with errno detail, preserving errno for caller */\n        OS_SocketSendTo_Log(\"sendto_failed\", token, impl, sa, addrlen, RemoteAddr, buffer, buflen, os_result, send_errno);\n        OS_DEBUG(\"sendto: %s\\n\", strerror(send_errno));\n        return OS_ERROR;\n    }\n\n    /* Log successful send */\n    OS_SocketSendTo_Log(\"sendto_success\", token, impl, sa, addrlen, RemoteAddr, buffer, buflen, os_result, 0);\n\n    return os_result;\n}\n"
}