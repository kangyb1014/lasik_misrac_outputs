{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a modifiable pointer (OS_impl_file_internal_record_t *impl) but within OS_SocketSendTo_Impl it is only used for read access (impl->fd) and is initialized from a global table via OS_OBJECT_TABLE_GET. The pointer could and should be declared as pointing to const (const OS_impl_file_internal_record_t *impl) to reflect that the function does not modify the pointed-to object. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo_Impl:\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends human-readable logs to /tmp/logs/1133.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1133.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Log entry and incoming parameters */\n    probe_log(\"ENTER OS_SocketSendTo_Impl: token=%p buffer=%p buflen=%zu RemoteAddr=%p\",\n              (const void *)token, buffer, buflen, (const void *)RemoteAddr);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    probe_log(\"After OS_OBJECT_TABLE_GET: impl=%p\", (const void *)impl);\n\n    if (impl != NULL)\n    {\n        /* log the file descriptor read from impl as evidence of read-only use */\n        probe_log(\"impl->fd=%d\", impl->fd);\n    }\n    else\n    {\n        probe_log(\"impl is NULL\");\n    }\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    probe_log(\"Computed sa=%p sa_family=%d\", (const void *)sa, (int)sa->sa_family);\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            probe_log(\"AF_INET chosen, addrlen=%zu\", (size_t)addrlen);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            probe_log(\"AF_INET6 chosen, addrlen=%zu\", (size_t)addrlen);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            probe_log(\"Default case for sa_family=%d, addrlen set to 0\", (int)sa->sa_family);\n            break;\n    }\n\n    probe_log(\"RemoteAddr->ActualLength=%zu computed addrlen=%zu\", (size_t)RemoteAddr->ActualLength, (size_t)addrlen);\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        probe_log(\"Address length mismatch -> returning OS_ERR_BAD_ADDRESS\");\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* Log sendto parameters just before the call */\n    probe_log(\"Calling sendto: fd=%d buffer=%p buflen=%zu flags=%d sa=%p addrlen=%zu\",\n              impl ? impl->fd : -1, buffer, buflen, (int)MSG_DONTWAIT, (const void *)sa, (size_t)addrlen);\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        probe_log(\"sendto failed: errno=%d strerror=%s\", errno, strerror(errno));\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    probe_log(\"sendto returned %d\", os_result);\n    probe_log(\"EXIT OS_SocketSendTo_Impl: returning %d\", os_result);\n\n    return os_result;\n}\n"
}