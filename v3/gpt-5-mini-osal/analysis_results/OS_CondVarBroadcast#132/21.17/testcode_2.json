{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) is made without validating that either pointer is non-NULL and points to a NUL-terminated buffer. If either TypeName or StubPtr->Data.Buff.ContentTypeStr is NULL or not NUL-terminated (for example if a caller registered a NULL TypeName or the stored pointer was never set), strcmp will read beyond the bounds of the referenced object (or dereference NULL), causing out-of-bounds access/undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarBroadcast code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1329.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarBroadcast as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarBroadcast:\n```c\nint32 OS_CondVarBroadcast(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarBroadcast_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarBroadcast code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: appends diagnostic lines to /tmp/logs/1329.txt */\nstatic void os_condvar_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1329.txt\", \"a\");\n    if (!f)\n    {\n        /* If logging cannot be opened, do not change program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarBroadcast(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameter state */\n    os_condvar_probe_log(\"ENTER OS_CondVarBroadcast: var_id=%llu\", (unsigned long long)(uintptr_t)var_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of lookup and token address (stack address) but do not dereference token internals */\n    os_condvar_probe_log(\"OS_ObjectIdGetById returned %d; token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_condvar_probe_log(\"Calling OS_CondVarBroadcast_Impl with token_addr=%p\", (void *)&token);\n        return_code = OS_CondVarBroadcast_Impl(&token);\n        os_condvar_probe_log(\"OS_CondVarBroadcast_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        os_condvar_probe_log(\"OS_CondVarBroadcast skipped due to error %d\", (int)return_code);\n    }\n\n    os_condvar_probe_log(\"EXIT OS_CondVarBroadcast: returning %d\", (int)return_code);\n    return return_code;\n}\n"
}