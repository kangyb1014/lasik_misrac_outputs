{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset(token, 0, sizeof(*token)) in OS_ObjectIdTransactionInit does not validate that the pointer parameter 'token' is non-NULL and points to an object of at least sizeof(OS_object_token_t). If a caller were to pass a NULL pointer (e.g. OS_ObjectIdTransactionInit(lock_mode, idtype, NULL)) or an invalid/too-small buffer, the memset would write out of bounds (including a NULL dereference), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarBroadcast code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1329.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarBroadcast as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarBroadcast:\n```c\nint32 OS_CondVarBroadcast(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarBroadcast_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarBroadcast code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n\nint32 OS_CondVarBroadcast(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Logging probe: record entry, token address and size */\n    FILE *logf = fopen(\"/tmp/logs/1329.txt\", \"a\");\n    if (logf == NULL)\n    {\n        /* Attempt to create directory and reopen log */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        logf = fopen(\"/tmp/logs/1329.txt\", \"a\");\n    }\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CondVarBroadcast ENTRY: var_id=%lld, token_addr=%p, token_size=%zu\\n\",\n                (long long)var_id, (void *)&token, sizeof(token));\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned: %d\\n\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the token contents (bounded to sizeof(token)) to help reproduce state leading to violations. */\n        if (logf != NULL)\n        {\n            unsigned char *bytes = (unsigned char *)&token;\n            size_t       bcount = sizeof(token);\n            size_t       dump = (bcount < 32) ? bcount : 32;\n\n            fprintf(logf, \"Token DUMP (first %zu bytes):\", dump);\n            for (size_t i = 0; i < dump; ++i)\n            {\n                fprintf(logf, \" %02X\", (unsigned int)bytes[i]);\n            }\n            fprintf(logf, \"\\n\");\n\n            fprintf(logf, \"Calling OS_CondVarBroadcast_Impl with token_addr=%p\\n\", (void *)&token);\n        }\n\n        return_code = OS_CondVarBroadcast_Impl(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CondVarBroadcast_Impl returned: %d\\n\", (int)return_code);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CondVarBroadcast EXIT: return_code=%d\\n\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}