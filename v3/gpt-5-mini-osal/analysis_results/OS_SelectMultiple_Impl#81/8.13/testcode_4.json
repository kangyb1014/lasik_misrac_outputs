{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &wr_set as an input-only argument to OS_FdSet_ConvertOut_Impl. If OS_FdSet_ConvertOut_Impl's corresponding parameter is not const-qualified (e.g. prototype uses fd_set * rather than const fd_set *), this is a violation because the function only needs to read the fd_set to populate the OS_FdSet. The fd_set pointer should be const-qualified to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/813.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple_Impl:\n```c\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Helper logging function to record control flow and relevant state.\n * This writes to /tmp/logs/813.txt. It intentionally keeps its\n * signature generic (uses void* and long) so it does not depend on\n * project-specific typedefs being visible at this point.\n */\nstatic void OS_Log813(const char *event, const void *p1, const void *p2, long v1, long v2)\n{\n    /* Try to create the directory if it does not exist; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/813.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log event, two pointer values and two numeric values */\n        (void)fprintf(f, \"%s: p1=%p p2=%p v1=%ld v2=%ld\\n\", event, p1, p2, v1, v2);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    /* Log entry with incoming parameters */\n    OS_Log813(\"Enter OS_SelectMultiple_Impl\", (const void *)ReadSet, (const void *)WriteSet, (long)msecs, 0);\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n\n    /* Log after initialization */\n    OS_Log813(\"After FD_ZERO and init\", (const void *)&rd_set, (const void *)&wr_set, (long)maxfd, 0);\n\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n\n        /* Log result of ConvertIn for read set */\n        OS_Log813(\"After OS_FdSet_ConvertIn_Impl (Read)\", (const void *)&rd_set, (const void *)ReadSet, (long)maxfd, (long)return_code);\n\n        if (return_code != OS_SUCCESS)\n        {\n            OS_Log813(\"Return early from ReadSet ConvertIn\", (const void *)ReadSet, NULL, (long)return_code, 0);\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n\n        /* Log result of ConvertIn for write set */\n        OS_Log813(\"After OS_FdSet_ConvertIn_Impl (Write)\", (const void *)&wr_set, (const void *)WriteSet, (long)maxfd, (long)return_code);\n\n        if (return_code != OS_SUCCESS)\n        {\n            OS_Log813(\"Return early from WriteSet ConvertIn\", (const void *)WriteSet, NULL, (long)return_code, 0);\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        /* Log before calling OS_DoSelect */\n        OS_Log813(\"Calling OS_DoSelect\", (const void *)&rd_set, (const void *)&wr_set, (long)maxfd, (long)msecs);\n\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n\n        /* Log the result from OS_DoSelect */\n        OS_Log813(\"After OS_DoSelect\", (const void *)&rd_set, (const void *)&wr_set, (long)return_code, (long)maxfd);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n\n        OS_Log813(\"No fds to select on, invalid id\", NULL, NULL, (long)return_code, 0);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            /* Log the intent to convert out the read set */\n            OS_Log813(\"Calling OS_FdSet_ConvertOut_Impl (Read)\", (const void *)&rd_set, (const void *)ReadSet, 0, 0);\n\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n\n            /* Log completion of convert out for read set */\n            OS_Log813(\"Completed OS_FdSet_ConvertOut_Impl (Read)\", (const void *)&rd_set, (const void *)ReadSet, 0, 0);\n        }\n        if (WriteSet != NULL)\n        {\n            /*\n             * IMPORTANT LOG: This is the call that the violation report\n             * highlights. It passes the address of the local 'wr_set' as\n             * an input-only argument to OS_FdSet_ConvertOut_Impl.\n             * The log captures the address of wr_set and the destination\n             * WriteSet pointer so that reviewers can confirm the data flow.\n             */\n            OS_Log813(\"Calling OS_FdSet_ConvertOut_Impl (Write) - potential non-const param\", (const void *)&wr_set, (const void *)WriteSet, 0, 0);\n\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n\n            /* Log completion of convert out for write set */\n            OS_Log813(\"Completed OS_FdSet_ConvertOut_Impl (Write)\", (const void *)&wr_set, (const void *)WriteSet, 0, 0);\n        }\n    }\n\n    /* Log exit with final return code */\n    OS_Log813(\"Exit OS_SelectMultiple_Impl\", NULL, NULL, (long)return_code, (long)maxfd);\n\n    return return_code;\n}\n"
}