{
  "user_message": "Target function code is:\n```c\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    return return_code;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_SelectMultiple_Impl': {'callees': ['OS_FdSet_ConvertIn_Impl', 'OS_DoSelect', 'OS_FdSet_ConvertOut_Impl'], 'callers': ['OS_SelectMultiple']}, 'OS_FdSet_ConvertIn_Impl': {'callees': [], 'callers': ['OS_SelectMultiple_Impl']}, 'OS_DoSelect': {'callees': [], 'callers': ['OS_SelectSingle_Impl', 'OS_SelectMultiple_Impl']}, 'OS_FdSet_ConvertOut_Impl': {'callees': [], 'callers': ['OS_SelectMultiple_Impl']}, 'OS_SelectMultiple': {'callees': ['OS_SelectMultiple_Impl', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA for loop shall be well-formed. The three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "OS_FdSet_ConvertIn_Impl (implementation)",
    "OS_DoSelect (implementation)",
    "OS_FdSet_ConvertOut_Impl (implementation)",
    "OS_FdSet (typedef/struct definition)",
    "fd_set (typedef/struct definition)",
    "FD_ZERO / FD_SET / FD_CLR (macro definitions)",
    "OS_SUCCESS and OS_ERR_INVALID_ID (macro/enum definitions)"
  ],
  "explanation": "- OS_FdSet_ConvertIn_Impl: The target calls this function; any for-loops inside it (or functions it calls) must be inspected to verify the three clauses, loop counter usage and side-effects.  Its body is required to determine whether called functions or loop counters within it violate the rule.  \n- OS_DoSelect: Called by the target; must inspect its implementation for any for-loops (and nested calls within those loops) because the behaviour of a for-loop body includes the behaviour of called functions.  \n- OS_FdSet_ConvertOut_Impl: Same rationale as ConvertIn: its implementation must be inspected for for-loops and any modifications of loop counters or other objects used in the loop clauses.  \n- OS_FdSet (typedef/struct): The fd-set conversion functions will operate on this type; knowing its layout/fields is necessary to see whether for-loop clauses use or modify its members (which would affect well-formedness).  \n- fd_set (typedef/struct): The platform fd_set type (used to build rd_set/wr_set) may be iterated or referenced in callees; its definition is needed to identify loop counters or flags derived from it.  \n- FD_ZERO / FD_SET / FD_CLR (macros): These macros are used with fd_set and may hide operations; their definitions are needed in case they contain side-effects or are used inside/around for-loops in callees.  \n- OS_SUCCESS and OS_ERR_INVALID_ID (macro/enum definitions): These return-code symbols are compared in the target; while not directly about for-loops they are needed to determine control-flow (whether conversions ran and whether ConvertOut is invoked), which affects whether any for-loops in callees are actually in the executed path to be checked.\n\nNote: The three direct callee implementations are essential; additional symbols referenced by those implementations (other functions, macros, typedefs) should also be provided once those bodies are examined."
}