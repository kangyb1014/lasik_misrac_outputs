{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nOn POSIX systems pthread_mutex_init() returns 0 on success and a positive error number on failure (never a negative value). The code tests \"if (status < 0)\" so that condition can never be true; consequently the diagnostic branch (and its contents) is unreachable. In addition BSP_DEBUG is defined as empty, so even if the branch were taken it expands to nothing, but the primary issue is the always-false condition making the block unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/11.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper: append logs to /tmp/logs/11.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists; ignore errors if it already does */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/11.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    probe_log(\"OS_BSP_Initialize: entry (pid=%d, euid=%d)\\n\", (int)getpid(), (int)geteuid());\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        probe_log(\"Attempted to open /proc/sys/fs/mqueue/msg_max -> %s\\n\", (fp != NULL) ? \"opened\" : \"failed\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                unsigned long parsed = strtoul(buffer, NULL, 10);\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(parsed);\n                probe_log(\"Read /proc/sys/fs/mqueue/msg_max: raw='%s' parsed=%lu -> MaxQueueDepth=%u\\n\",\n                          buffer, parsed, (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            else\n            {\n                probe_log(\"fgets returned NULL when reading /proc/sys/fs/mqueue/msg_max\\n\");\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    /* Log the raw return value so we can observe the actual status (POSIX returns 0 on success, otherwise an errno value >= 0) */\n    if (status >= 0)\n    {\n        probe_log(\"pthread_mutexattr_init returned %d (strerror='%s')\\n\", status, strerror(status));\n    }\n    else\n    {\n        probe_log(\"pthread_mutexattr_init returned negative value %d\\n\", status);\n    }\n    /* For reproduction/evidence: explicitly log whether the branch would be taken */\n    probe_log(\"Evaluating: if (status < 0) -> %s\\n\", (status < 0) ? \"TRUE\" : \"FALSE\");\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status >= 0)\n    {\n        probe_log(\"pthread_mutexattr_setprotocol returned %d (strerror='%s')\\n\", status, strerror(status));\n    }\n    else\n    {\n        probe_log(\"pthread_mutexattr_setprotocol returned negative value %d\\n\", status);\n    }\n    probe_log(\"Evaluating: if (status < 0) -> %s\\n\", (status < 0) ? \"TRUE\" : \"FALSE\");\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status >= 0)\n    {\n        probe_log(\"pthread_mutex_init returned %d (strerror='%s')\\n\", status, strerror(status));\n    }\n    else\n    {\n        probe_log(\"pthread_mutex_init returned negative value %d\\n\", status);\n    }\n    probe_log(\"Evaluating: if (status < 0) -> %s\\n\", (status < 0) ? \"TRUE\" : \"FALSE\");\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n\n    probe_log(\"OS_BSP_Initialize: exit\\n\");\n}\n"
}