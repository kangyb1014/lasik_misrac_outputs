{
  "user_message": "An agent A claimed that the following OS_BSP_Initialize code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BSP_Initialize.\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls strerror(status) when status is tested as < 0. Passing a negative/invalid error number to strerror is implementation-dependent and can lead to out-of-bounds accesses (for example, an implementation that indexes sys_errlist[errnum] would read sys_errlist[-1], or one that formats \u201cUnknown error <n>\u201d into a fixed internal buffer could overflow it). Therefore this use can result in accesses beyond the bounds of objects referenced by string-handling routines from <string.h>.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will try to read /proc/sys/fs/mqueue/msg_max\nREAD: /proc/sys/fs/mqueue/msg_max => '10\n'\nSTATE: OS_BSP_Global.MaxQueueDepth = 10\nCALL: pthread_mutexattr_init()\nRET: pthread_mutexattr_init -> status=0\nCALL: pthread_mutexattr_setprotocol(PTHREAD_PRIO_INHERIT)\nRET: pthread_mutexattr_setprotocol -> status=0\nCALL: pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr)\nRET: pthread_mutex_init -> status=0\nEXIT: OS_BSP_Initialize()\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will try to read /proc/sys/fs/mqueue/msg_max\nREAD: /proc/sys/fs/mqueue/msg_max => '10\n'\nSTATE: OS_BSP_Global.MaxQueueDepth = 10\nCALL: pthread_mutexattr_init()\nRET: pthread_mutexattr_init -> status=0\nCALL: pthread_mutexattr_setprotocol(PTHREAD_PRIO_INHERIT)\nRET: pthread_mutexattr_setprotocol -> status=0\nCALL: pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr)\nRET: pthread_mutex_init -> status=0\nEXIT: OS_BSP_Initialize()\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will try to read /proc/sys/fs/mqueue/msg_max\nREAD: /proc/sys/fs/mqueue/msg_max => '10\n'\nSTATE: OS_BSP_Global.MaxQueueDepth = 10\nCALL: pthread_mutexattr_init()\nRET: pthread_mutexattr_init -> status=0\nCALL: pthread_mutexattr_setprotocol(PTHREAD_PRIO_INHERIT)\nRET: pthread_mutexattr_setprotocol -> status=0\nCALL: pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr)\nRET: pthread_mutex_init -> status=0\nEXIT: OS_BSP_Initialize()\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will try to read /proc/sys/fs/mqueue/msg_max\nREAD: /proc/sys/fs/mqueue/msg_max => '10\n'\nSTATE: OS_BSP_Global.MaxQueueDepth = 10\nCALL: pthread_mutexattr_init()\nRET: pthread_mutexattr_init -> status=0\nCALL: pthread_mutexattr_setprotocol(PTHREAD_PRIO_INHERIT)\nRET: pthread_mutexattr_setprotocol -> status=0\nCALL: pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr)\nRET: pthread_mutex_init -> status=0\nEXIT: OS_BSP_Initialize()\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will try to read /proc/sys/fs/mqueue/msg_max\nREAD: /proc/sys/fs/mqueue/msg_max => '10\n'\nSTATE: OS_BSP_Global.MaxQueueDepth = 10\nCALL: pthread_mutexattr_init()\nRET: pthread_mutexattr_init -> status=0\nCALL: pthread_mutexattr_setprotocol(PTHREAD_PRIO_INHERIT)\nRET: pthread_mutexattr_setprotocol -> status=0\nCALL: pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr)\nRET: pthread_mutex_init -> status=0\nEXIT: OS_BSP_Initialize()\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will try to read /proc/sys/fs/mqueue/msg_max\nREAD: /proc/sys/fs/mqueue/msg_max => '10\n'\nSTATE: OS_BSP_Global.MaxQueueDepth = 10\nCALL: pthread_mutexattr_init()\nRET: pthread_mutexattr_init -> status=0\nCALL: pthread_mutexattr_setprotocol(PTHREAD_PRIO_INHERIT)\nRET: pthread_mutexattr_setprotocol -> status=0\nCALL: pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr)\nRET: pthread_mutex_init -> status=0\nEXIT: OS_BSP_Initialize()\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will try to read /proc/sys/fs/mqueue/msg_max\nREAD: /proc/sys/fs/mqueue/msg_max => '10\n'\nSTATE: OS_BSP_Global.MaxQueueDepth = 10\nCALL: pthread_mutexattr_init()\nRET: pthread_mutexattr_init -> status=0\nCALL: pthread_mutexattr_setprotocol(PTHREAD_PRIO_INHERIT)\nRET: pthread_mutexattr_setprotocol -> status=0\nCALL: pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr)\nRET: pthread_mutex_init -> status=0\nEXIT: OS_BSP_Initialize()\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will try to read /proc/sys/fs/mqueue/msg_max\nREAD: /proc/sys/fs/mqueue/msg_max => '10\n'\nSTATE: OS_BSP_Global.MaxQueueDepth = 10\nCALL: pthread_mutexattr_init()\nRET: pthread_mutexattr_init -> status=0\nCALL: pthread_mutexattr_setprotocol(PTHREAD_PRIO_INHERIT)\nRET: pthread_mutexattr_setprotocol -> status=0\nCALL: pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr)\nRET: pthread_mutex_init -> status=0\nEXIT: OS_BSP_Initialize()\nENTER: OS_BSP_Initialize()\nPATH: not root (geteuid() != 0). Will\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The MISRA C:2023 Rule 21.17 forbids uses of functions from <string.h> that may cause accesses beyond object bounds. strerror is declared in <string.h> and implementations may index an internal array (e.g. sys_errlist[errnum]) or write into an internal buffer; passing an out\u2011of\u2011range/negative errnum can therefore cause out\u2011of\u2011bounds accesses in some implementations. In the posted code the check is status < 0 before calling strerror(status). POSIX pthread APIs return 0 on success and a (positive) error number on failure, so the code\u2019s test is incorrect (it should test status != 0) \u2014 as written it could call strerror with a negative value on some platforms that return negative codes, which could trigger the problematic behaviors described and thus violate R21.17. Recommended fixes: correct the error test (check status != 0), or use a reentrant/safe alternative (strerror_r) with a caller-supplied buffer and bounds checking, and/or ensure the errnum passed to strerror is in the valid range."
}