{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 OS_printf can indirectly call itself. In the error branch it calls OS_DEBUG(\"... %s\", String). If OS_DEBUG is implemented in terms of OS_printf (a common pattern), this yields OS_printf -> OS_DEBUG -> OS_printf (indirect recursion). Similarly, the normal path calls OS_ConsoleWrite which calls OS_ConsoleOutput_Impl; if that implementation uses OS_printf for output/logging this would also create an indirect recursion: OS_printf -> OS_ConsoleWrite -> OS_ConsoleOutput_Impl -> OS_printf.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1746.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume:\n```c\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe helper: write a log line to /tmp/logs/1746.txt.\n * Uses standard stdio functions to avoid calling any OS_... logging\n * helpers which might themselves trigger the recursion scenario.\n */\nstatic void OS_FileSysStatVolume_Probe(const char *event, const char *name, int32_t code)\n{\n    FILE *f = fopen(\"/tmp/logs/1746.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* best-effort only */\n        return;\n    }\n\n    time_t now = time(NULL);\n    char timestr[32];\n    if (now != (time_t)-1)\n    {\n        /* Use numeric timestamp to avoid locale/timezone dependencies */\n        snprintf(timestr, sizeof(timestr), \"%ld\", (long)now);\n    }\n    else\n    {\n        strncpy(timestr, \"-\", sizeof(timestr));\n        timestr[sizeof(timestr)-1] = '\\0';\n    }\n\n    fprintf(f, \"%s | event=%s | name=%s | code=%d\\n\",\n            timestr,\n            event ? event : \"(null)\",\n            name ? name : \"(null)\",\n            code);\n\n    fclose(f);\n}\n\n/* Keep the original signature and logic; insert probes at key points. */\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry and parameters */\n    OS_FileSysStatVolume_Probe(\"enter\", name, 0);\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_FileSysStatVolume_Probe(\"after_CHECK_PATHNAME\", name, 0);\n\n    OS_CHECK_POINTER(statbuf);\n    OS_FileSysStatVolume_Probe(\"after_CHECK_POINTER\", name, 0);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    /* Log result of the object search */\n    OS_FileSysStatVolume_Probe(\"after_ObjectIdGetBySearch\", name, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_FileSysStatVolume_Probe(\"before_ImplCall\", name, return_code);\n\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_FileSysStatVolume_Probe(\"after_ImplCall\", name, return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_FileSysStatVolume_Probe(\"after_ObjectIdRelease\", name, return_code);\n    }\n\n    OS_FileSysStatVolume_Probe(\"exit\", name, return_code);\n\n    return return_code;\n}\n"
}