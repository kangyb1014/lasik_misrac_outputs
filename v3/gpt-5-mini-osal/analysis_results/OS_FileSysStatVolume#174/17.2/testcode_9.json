{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur if any of the helper/impl functions called by OS_ConsoleWrite call back into the console print path \u2014 e.g. OS_ConsoleWrite -> OS_ConsoleOutput_Impl(...) -> OS_printf(...) -> OS_ConsoleWrite(...). The provided code shows OS_printf calls OS_ConsoleWrite; if OS_ConsoleOutput_Impl (or OS_Console_CopyOut or OS_ConsoleWakeup_Impl) uses OS_printf for logging or error handling, this produces an indirect recursive call chain, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1746.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume:\n```c\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe/logging helpers. These write to /tmp/logs/1746.txt and are designed\n * to be non-intrusive and not to call into any OS_* logging that could cause\n * additional indirect recursion. They preserve the original logic of\n * OS_FileSysStatVolume and only add observation points. */\nstatic void write_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1746.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier ordering */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm *tm = localtime(&t);\n        if (tm != NULL)\n        {\n            fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", tm->tm_year + 1900,\n                    tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Lightweight token probe. We avoid inspecting internals of OS_object_token_t\n * to not depend on its layout; we only log its address. */\nstatic void probe_token(const OS_object_token_t *token)\n{\n    write_probe_log(\"probe_token: token_ptr=%p\", (const void *)token);\n}\n\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Entry probe */\n    write_probe_log(\"ENTER: OS_FileSysStatVolume name=%p statbuf=%p\", (const void *)name,\n                    (const void *)statbuf);\n\n    if (name != NULL)\n    {\n        /* log a short, bounded copy of the pathname (avoid excessive output) */\n        char name_copy[128];\n        strncpy(name_copy, name, sizeof(name_copy) - 1);\n        name_copy[sizeof(name_copy) - 1] = '\\0';\n        write_probe_log(\"PARAM: name=\\\"%s\\\"\", name_copy);\n    }\n    else\n    {\n        write_probe_log(\"PARAM: name=NULL\");\n    }\n\n    /* Check parameters (preserve original behavior) */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    write_probe_log(\"After parameter checks\");\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    write_probe_log(\"OS_ObjectIdGetBySearch returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token presence/address but do not inspect internals */\n        probe_token(&token);\n\n        write_probe_log(\"Calling OS_FileSysStatVolume_Impl\");\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n        write_probe_log(\"OS_FileSysStatVolume_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n        write_probe_log(\"Token released\");\n    }\n    else\n    {\n        write_probe_log(\"Lookup failed, skipping Impl call\");\n    }\n\n    write_probe_log(\"EXIT: OS_FileSysStatVolume returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}