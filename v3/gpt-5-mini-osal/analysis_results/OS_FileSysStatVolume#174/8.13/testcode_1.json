{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_FileSys_FindVirtMountPoint takes a non-const pointer parameter void *ref but only reads from it as a string (const char *target = (const char *)ref). At the call site OS_FileSysStatVolume passes a const char *name cast to void * ((void *)name), which discards the const qualifier. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Declaring the parameter as const void *ref (and removing the const cast at the call site) would conform to the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume:\n```c\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helpers for reproducing the violation scenario.  \n * These functions log control flow and key state to /tmp/logs/1743.txt\n * They are written to be simple and have minimal dependencies so they\n * can be added without changing the original logic of OS_FileSysStatVolume.\n */\nstatic void OS_Probe_LogState(const char *stage, const char *name, const void *ref, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1743.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print the stage, the name (or (null)), the raw pointer value passed as void *,\n         * and the integer return code (use -999 to indicate unknown/unset). */\n        fprintf(f, \"[OS_FileSysStatVolume] stage=%s name=%s ref=%p return_code=%d\\n\",\n                stage,\n                (name != NULL) ? name : \"(null)\",\n                ref,\n                return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    /* Log entry state before calling OS_ObjectIdGetBySearch. Note that the\n     * original code casts the const char * to void * when passing to the\n     * search routine; we log exactly that pointer value here to capture the\n     * potential const-discarding call site for the MISRA 8.13 investigation.\n     */\n    OS_Probe_LogState(\"before_search\", name, (void *)name, -999);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    /* Log result of the search call */\n    OS_Probe_LogState(\"after_search\", name, (void *)name, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log that we're about to call the implementation using the obtained token. */\n        OS_Probe_LogState(\"before_impl\", name, (void *)name, return_code);\n\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        /* Log the result of the implementation call. */\n        OS_Probe_LogState(\"after_impl\", name, (void *)name, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log that the token was released. */\n        OS_Probe_LogState(\"after_release\", name, (void *)name, return_code);\n    }\n\n    return return_code;\n}\n"
}