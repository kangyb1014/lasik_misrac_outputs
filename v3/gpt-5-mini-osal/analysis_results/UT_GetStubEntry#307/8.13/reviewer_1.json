{
  "user_message": "An agent A claimed that the following UT_GetStubEntry code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UT_GetStubEntry.\n```c\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            StubPtr = NULL;\n            break;\n        }\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            break;\n        }\n        ++Idx;\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            Idx = 0;\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_MaxStubSearchLen = SearchLen;\n    }\n\n    return StubPtr;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf Data.Rvc.Buf.IndirectPtr is declared as a non-const pointer (e.g. void *IndirectPtr), then the assignment StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr; stores a const void * (ValuePtr) into a non-const pointer, discarding the const qualifier. This violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nUT_GetStubEntry START: FuncKey=2560143357, TestMode=4, initial Idx=186\nMode=BOUND: SearchLimit=0 (UT_MaxStubSearchLen), SearchKey=2560143357\nExit: SearchLen (0) >= SearchLimit (0) -> not found\nUT_MaxStubSearchLen unchanged: 0\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560143357, TestMode=8, initial Idx=186\nMode=BOUND: SearchLimit=0 (UT_MaxStubSearchLen), SearchKey=2560143357\nExit: SearchLen (0) >= SearchLimit (0) -> not found\nUT_MaxStubSearchLen unchanged: 0\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560143357, TestMode=9, initial Idx=186\nMode=BOUND: SearchLimit=0 (UT_MaxStubSearchLen), SearchKey=2560143357\nExit: SearchLen (0) >= SearchLimit (0) -> not found\nUT_MaxStubSearchLen unchanged: 0\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560143357, TestMode=1, initial Idx=186\nMode=BOUND: SearchLimit=0 (UT_MaxStubSearchLen), SearchKey=2560143357\nExit: SearchLen (0) >= SearchLimit (0) -> not found\nUT_MaxStubSearchLen unchanged: 0\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560143357, TestMode=0, initial Idx=186\nMode=UNUSED: SearchLimit=200, SearchKey=0\nIter: SearchLen=1, Idx=186, StubPtr=0x55ad989adde0, Stub.EntryType=0, Stub.FuncKey=0\nFound matching stub at Idx=186 (SearchLen=1)\nUpdating UT_MaxStubSearchLen: old=0, new=1\nUT_GetStubEntry RETURN: StubPtr=0x55ad989adde0\nUT_GetStubEntry START: FuncKey=2560143357, TestMode=3, initial Idx=186\nMode=BOUND: SearchLimit=1 (UT_MaxStubSearchLen), SearchKey=2560143357\nIter: SearchLen=1, Idx=186, StubPtr=0x55ad989adde0, Stub.EntryType=1, Stub.FuncKey=2560143357\nExit: SearchLen (1) >= SearchLimit (1) -> not found\nUT_MaxStubSearchLen unchanged: 1\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560143357, TestMode=6, initial Idx=186\nMode=BOUND: SearchLimit=1 (UT_MaxStubSearchLen), SearchKey=2560143357\nIter: SearchLen=1, Idx=186, StubPtr=0x55ad989adde0, Stub.EntryType=1, Stub.FuncKey=2560143357\nExit: SearchLen (1) >= SearchLimit (1) -> not found\nUT_MaxStubSearchLen unchanged: 1\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560143357, TestMode=7, initial Idx=186\nMode=BOUND: SearchLimit=1 (UT_MaxStubSearchLen), SearchKey=2560143357\nIter: SearchLen=1, Idx=186, StubPtr=0x55ad989adde0, Stub.EntryType=1, Stub.FuncKey=2560143357\nExit: SearchLen (1) >= SearchLimit (1) -> not found\nUT_MaxStubSearchLen unchanged: 1\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560145434, TestMode=4, initial Idx=74\nMode=BOUND: SearchLimit=0 (UT_MaxStubSearchLen), SearchKey=2560145434\nExit: SearchLen (0) >= SearchLimit (0) -> not found\nUT_MaxStubSearchLen unchanged: 0\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560145434, TestMode=8, initial Idx=74\nMode=BOUND: SearchLimit=0 (UT_MaxStubSearchLen), SearchKey=2560145434\nExit: SearchLen (0) >= SearchLimit (0) -> not found\nUT_MaxStubSearchLen unchanged: 0\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560145434, TestMode=9, initial Idx=74\nMode=BOUND: SearchLimit=0 (UT_MaxStubSearchLen), SearchKey=2560145434\nExit: SearchLen (0) >= SearchLimit (0) -> not found\nUT_MaxStubSearchLen unchanged: 0\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560145434, TestMode=1, initial Idx=74\nMode=BOUND: SearchLimit=0 (UT_MaxStubSearchLen), SearchKey=2560145434\nExit: SearchLen (0) >= SearchLimit (0) -> not found\nUT_MaxStubSearchLen unchanged: 0\nUT_GetStubEntry RETURN: StubPtr=(nil)\nUT_GetStubEntry START: FuncKey=2560145434, TestMode=0, initial Idx=74\nMode=UNUSED: SearchLimit=200, SearchKey=0\nIter: SearchLen=1, Idx=74, StubPtr=0x55ad989a5fe0, Stub.EntryType=0, Stub.FuncKey=0\nFound matching stub at Idx=74 (SearchLen=1)\nUpdating UT_MaxStubSearchLen: old=0, new=1\nUT_GetStubEntry RETURN: StubPtr=0x55ad989a5fe0\nUT_GetStubEntry START: FuncKey=2560145434, TestMode=3, initial Idx=74\nMode=BOUND: SearchLimit=1 (UT_MaxStubSearchLen), SearchKey=2560145434\nIter: SearchLen=1, Idx=74, StubPtr=0x55ad989a5fe0, Stub.EntryType=1, Stub.FuncKey=2560145434\nExit: SearchLen (1\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function UT_GetStubEntry:\nstatic UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}\n...\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\ntypedef cpuaddr UT_EntryKey_t\n...\ntypedef enum\n{\n    UT_ENTRYTYPE_UNUSED,                 /**< Unused/available table entries */\n    UT_ENTRYTYPE_COUNTER,                /**< Records a usage count plus most recent return code */\n    UT_ENTRYTYPE_DATA_BUFFER,            /**< Storage for data buffers to simulate read/write or queue ops */\n    UT_ENTRYTYPE_CALLBACK_HOOK,          /**< A custom callback/hook function to be invoked prior to handler */\n    UT_ENTRYTYPE_CALLBACK_CONTEXT,       /**< Context data for callback/hook function */\n    UT_ENTRYTYPE_CALL_ONCE,              /**< Records a \"call once\" directive */\n    UT_ENTRYTYPE_FINAL_HANDLER,          /**< The final handler for the stub */\n    UT_ENTRYTYPE_RETURN_BUFFER,          /**< Storage for actual return value from stub */\n    UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED, /**< Configuration for return value from stub */\n    UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT, /**< Configuration for return value from stub */\n} UT_EntryType_t\n...\n#define UT_MAX_FUNC_STUBS 200\n...\nstatic uint32              UT_MaxStubSearchLen             = 0\n...\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n...\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n        }\n    }\n}\n...\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (ReturnSize > 0)\n    {\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n            StubPtr = NULL;\n        }\n\n        if (StubPtr == NULL)\n        {\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n            if (StubPtr == NULL)\n            {\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            StubPtr->Data.Buff.Position       = 0;\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n        }\n    }\n}\n...\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n        }\n    }\n}\n...\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n...\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n...\nvoid UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                }\n            }\n            ++StubPtr->Data.Context.ArgCount;\n        }\n    }\n}\n...\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct for the code shown. The function UT_GetStubEntry itself does not perform the assignment StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr; \u2014 that assignment appears in UT_ConfigureGenericStubReturnValue. Rule 8.13 concerns the type a pointer points to (prefer const-qualified when possible), so a real issue would be that assigning a const void * (ValuePtr) into a non-const void * (IndirectPtr) would discard the const qualifier and therefore be a const-correctness problem. However this problem is not in UT_GetStubEntry, so the report that UT_GetStubEntry violates MISRA C 2023 Rule 8.13 is incorrect.\n\nIf the concern is with the assignment in UT_ConfigureGenericStubReturnValue, then it should be addressed there: either make IndirectPtr a const void * (if the stored pointer is not intended to be used to modify the pointee), or change the API so ValuePtr is non-const, or use an explicit, documented cast with justification. That change (if required) would resolve the qualifier-discarding issue."
}