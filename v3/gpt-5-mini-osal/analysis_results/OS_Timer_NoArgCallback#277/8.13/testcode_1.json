{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'arg' is declared as 'void *arg' but within the shown function it is not dereferenced or modified; per MISRA C 2023 Rule 8.13 it should be const-qualified when possible (i.e. 'const void *arg'). Therefore the current declaration violates Rule 8.13 unless there is some unseen code that requires a mutable target.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Timer_NoArgCallback code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2773.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Timer_NoArgCallback as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Timer_NoArgCallback:\n```c\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n    (*Conv.timer_callback_func)(objid);\n}\n```\n</target_code>\nPlease provide the modified OS_Timer_NoArgCallback code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append human-readable trace lines to /tmp/logs/2773.txt */\nstatic void OS_Timer_LogProbe(const void *arg, int cb_is_null, const char *phase)\n{\n    FILE *f = fopen(\"/tmp/logs/2773.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Do not dereference 'arg' here; only log pointer value and nullness flag. */\n        fprintf(f, \"OS_Timer_NoArgCallback - %s: arg=%p, arg_is_null=%d, cb_is_null=%d\\n\",\n                phase, arg, (arg == NULL), cb_is_null);\n        fclose(f);\n    }\n}\n\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry; callback pointer nullness unknown at this point so use -1. */\n    OS_Timer_LogProbe(arg, -1, \"entry\");\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n\n    /* After assigning opaque_arg, the union/aliasing makes the function pointer available.\n     * Check whether the resulting function pointer is NULL (do not attempt to print its address).\n     */\n    int cb_is_null = (Conv.timer_callback_func == NULL) ? 1 : 0;\n\n    /* Log just before invoking the callback. Explicitly state that 'arg' is not dereferenced. */\n    OS_Timer_LogProbe(arg, cb_is_null, \"before_invoke (arg not dereferenced)\");\n\n    (*Conv.timer_callback_func)(objid);\n\n    /* Log immediately after invoking the callback to capture control flow. */\n    OS_Timer_LogProbe(arg, cb_is_null, \"after_invoke\");\n}\n"
}