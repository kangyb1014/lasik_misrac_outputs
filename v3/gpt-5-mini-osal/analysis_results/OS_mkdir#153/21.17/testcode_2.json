{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(s, 0, maxlen) without any guarantee that the object pointed to by s contains at least maxlen bytes. For example, OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) may be invoked where VirtualPath points to a shorter buffer (or a string allocated at the end of an allocation); memchr could then access bytes beyond the object boundary if no NUL is found within maxlen bytes. This may result in out\u2011of\u2011bounds accesses and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Minimal typedefs to match the original environment */\ntypedef int32_t int32;\ntypedef uint32_t uint32;\n\n/* Constants \u2014 kept as enum to avoid macros */\nenum { OS_MAX_LOCAL_PATH_LEN = 256, OS_SUCCESS = 0 };\n\n/* External functions from the original system (declared only) */\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_DirCreate_Impl(const char *local_path, uint32 access);\n\n/* Logging helper that appends to /tmp/logs/1539.txt. It will attempt to\n   create the directory /tmp/logs if it does not exist. */\nstatic void os_mkdir_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1539.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create directory and reopen. Ignore errors if it still fails. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1539.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\n/* Modified OS_mkdir with probes logging control flow and key state. */\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log function entry and pointer/size information. Do NOT dereference\n       the input 'path' pointer here to avoid any accidental out-of-bounds\n       reads; only log the pointer value and the local buffer info. */\n    os_mkdir_log(\"OS_mkdir ENTRY: path=%p access=%u local_path_buf=%p local_path_size=%u\\n\",\n                 (void *)path, (unsigned)access, (void *)local_path, (unsigned)OS_MAX_LOCAL_PATH_LEN);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    os_mkdir_log(\"OS_TranslatePath returned %d\\n\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* local_path is a local buffer under our control \u2014 it is safe to log. */\n        os_mkdir_log(\"Translated local_path=%s\\n\", local_path);\n\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        os_mkdir_log(\"OS_DirCreate_Impl returned %d for local_path=%s\\n\",\n                     (int)return_code, local_path);\n    }\n    else\n    {\n        os_mkdir_log(\"OS_mkdir: translation failed, not creating directory.\\n\");\n    }\n\n    os_mkdir_log(\"OS_mkdir EXIT: return_code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}