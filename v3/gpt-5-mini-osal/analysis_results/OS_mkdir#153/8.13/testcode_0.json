{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_TranslatePath is something like: int32 OS_TranslatePath(char *path, char *local_path); then passing 'path' (declared as const char *path) discards the const qualifier and thereby violates MISRA C 2023 Rule 8.13. Fix: change OS_TranslatePath to take a const char * for the input path (or make an explicit non-const copy before calling). (If OS_TranslatePath already declares its first parameter as const char *, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1533.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append log lines to /tmp/logs/1533.txt */\nstatic void OS_mkdir_log(const char *msg, const char *path, const char *local_path, int32 rc, uint32 access)\n{\n    FILE *f = fopen(\"/tmp/logs/1533.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log a compact, human-readable record of the control flow and key state */\n    fprintf(f, \"%s\\n\", msg);\n    if (path != NULL)\n    {\n        fprintf(f, \"  path ptr=%p, path=\\\"%s\\\"\\n\", (const void *)path, path);\n    }\n    else\n    {\n        fprintf(f, \"  path ptr=(null)\\n\");\n    }\n\n    if (local_path != NULL)\n    {\n        /* local_path may be uninitialized before OS_TranslatePath returns success; still log pointer and content for evidence */\n        fprintf(f, \"  local_path ptr=%p, local_path=\\\"%s\\\"\\n\", (const void *)local_path, local_path);\n    }\n    else\n    {\n        fprintf(f, \"  local_path ptr=(null)\\n\");\n    }\n\n    fprintf(f, \"  rc=%d, access=%u\\n\", (int)rc, (unsigned)access);\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry state */\n    OS_mkdir_log(\"OS_mkdir: entry\", path, \"(uninitialized)\", -1, access);\n\n    /* Call the existing translation routine (potential const-discard at call site if prototype is non-const) */\n    OS_mkdir_log(\"OS_mkdir: about to call OS_TranslatePath\", path, \"(will be filled)\", -1, access);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and contents of local_path for evidence */\n    OS_mkdir_log(\"OS_mkdir: returned from OS_TranslatePath\", path, local_path, return_code, access);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before creating directory */\n        OS_mkdir_log(\"OS_mkdir: about to call OS_DirCreate_Impl\", path, local_path, return_code, access);\n\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        /* Log result of creation */\n        OS_mkdir_log(\"OS_mkdir: returned from OS_DirCreate_Impl\", path, local_path, return_code, access);\n    }\n\n    /* Final exit log */\n    OS_mkdir_log(\"OS_mkdir: exit\", path, local_path, return_code, access);\n\n    return return_code;\n}\n"
}