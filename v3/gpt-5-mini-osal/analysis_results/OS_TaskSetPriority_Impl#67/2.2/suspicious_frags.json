{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority_Impl:\n```c\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TaskSetPriority_Impl:\nOS_impl_task_internal_record_t OS_impl_task_table[OS_MAX_TASKS]\n...\ntypedef struct\n{\n    pthread_t id;\n} OS_impl_task_internal_record_t\n...\nstatic int OS_PriorityRemap(osal_priority_t InputPri)\n{\n    int OutputPri;\n\n    if (InputPri == 0)\n    {\n        /* use the \"MAX\" local priority only for OSAL tasks with priority=0 */\n        OutputPri = POSIX_GlobalVars.PriLimits.PriorityMax;\n    }\n    else if (InputPri >= OS_MAX_TASK_PRIORITY)\n    {\n        /* use the \"MIN\" local priority only for OSAL tasks with priority=255 */\n        OutputPri = POSIX_GlobalVars.PriLimits.PriorityMin;\n    }\n    else\n    {\n        /*\n         * Spread the remainder of OSAL priorities over the remainder of local priorities\n         *\n         * Note OSAL priorities use the VxWorks style with zero being the\n         * highest and OS_MAX_TASK_PRIORITY being the lowest, this inverts it\n         */\n        OutputPri = (OS_MAX_TASK_PRIORITY - 1) - (int)InputPri;\n\n        OutputPri *= (POSIX_GlobalVars.PriLimits.PriorityMax - POSIX_GlobalVars.PriLimits.PriorityMin) - 2;\n        OutputPri += OS_MAX_TASK_PRIORITY / 2;\n        OutputPri /= (OS_MAX_TASK_PRIORITY - 2);\n        OutputPri += POSIX_GlobalVars.PriLimits.PriorityMin + 1;\n    }\n\n    return OutputPri;\n}\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n...\nstatic inline unsigned long OS_ObjectIdToInteger(osal_id_t object_id)\n{\n#ifdef OSAL_OMIT_DEPRECATED\n    return object_id.v;\n#else\n    return object_id;\n#endif\n}\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_impl_task_internal_record_t *impl;",
    "int os_priority;",
    "OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);",
    "int ret;"
  ],
  "explanation": "Other fragments in the function do not appear to be dead and therefore do not require investigation for MISRA C:2023 Rule 2.2. Specifically:\n\n- The conditional check if (POSIX_GlobalVars.EnableTaskPriorities) controls whether priority-related operations run; the operations inside that block (OS_PriorityRemap, the call to pthread_setschedprio and the error-path return) have observable effects on scheduling/return values and their removal would change program behaviour.\n\n- The call to OS_PriorityRemap(new_priority) computes a mapping used by pthread_setschedprio; it is not removable without changing behaviour when priorities are enabled.\n\n- The call to pthread_setschedprio(impl->id, os_priority) is an OS-level effect (changing thread priority); removing it would affect system behaviour.\n\n- The early return on error (return OS_ERROR) and the final return OS_SUCCESS deliver observable results to callers and are not dead.\n\n- The variable declarations and assignment flagged above are suspicious because they may be executed even when POSIX_GlobalVars.EnableTaskPriorities is false (i.e. the assignment and/or declarations are potentially redundant). The OS_DEBUG invocation (flagged) is also suspicious because, in the provided additional code, OS_DEBUG is defined as an empty macro \u2014 meaning the debug call and its argument expressions are effectively removed/disabled; those argument expressions therefore represent code that may be compiled out or have no runtime effect.\n\nNo other statements in the shown function appear to be operations that are executed yet removable without changing program behaviour; therefore they do not need investigation under Rule 2.2."
}