{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority_Impl:\n```c\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskSetPriority_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_task_internal_record_t OS_impl_task_table[OS_MAX_TASKS]\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The macro produces a pointer to an element of the object table (&tbl[index]) which is an actual modifiable record (OS_impl_task_internal_record_t *). Rule 8.13 requires pointers to point to const-qualified types when the pointed-to object need not be modified; here the table entries are mutable so a non-const pointer is appropriate. The intermediate &(tok) is converted to const OS_object_token_t * when passed to OS_ObjectIndexFromToken (which is declared to take const), and that implicit conversion (T * -> const T *) is permitted. Therefore this macro does not violate MISRA C 2023 Rule 8.13."
}