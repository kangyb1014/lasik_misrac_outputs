{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nextern const int32 LOCAL_OBJID_TYPE;\nstatic void os_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2329.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, fail silently to avoid changing behavior. */\n        return;\n    }\n\n    /* Timestamp the entry. */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) == NULL)\n    {\n        fprintf(f, \"[unknown-time] \");\n    }\n    else\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"%s \", timestr);\n        }\n        else\n        {\n            fprintf(f, \"[time-format-failed] \");\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Log entry and the raw pointer values we received. */\n    os_log(\"Entered OS_QueueGetIdByName: queue_id=%p, queue_name=%p\", (void *)queue_id, (const void *)queue_name);\n\n    /* Check Parameters (mirror semantics of original OS_CHECK_POINTER as closely as reasonable here). */\n    if (queue_id == NULL)\n    {\n        os_log(\"Parameter check failed: queue_id is NULL\");\n        return OS_INVALID_POINTER;\n    }\n\n    if (queue_name == NULL)\n    {\n        os_log(\"Parameter check failed: queue_name is NULL\");\n        return OS_INVALID_POINTER;\n    }\n\n    /* At this point we have a non-NULL queue_name pointer. We intentionally\n     * do not dereference or attempt to measure the length of the string here\n     * (e.g. via strlen) because that may itself read beyond the bounds of the\n     * underlying object if the caller supplied a non-NUL-terminated pointer.\n     * Instead we log that we are forwarding the pointer to\n     * OS_ObjectIdFindByName so that a downstream read/strlen inside that\n     * function (which would be the violating behavior described) can be\n     * observed and correlated with these logs. */\n    os_log(\"Forwarding queue_name pointer to OS_ObjectIdFindByName: queue_name=%p\", (const void *)queue_name);\n\n    /* Preserve original call: forward the name to the object-id lookup routine. */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    /* Log the result of the lookup. If successful, also log the found id. */\n    if (return_code == OS_SUCCESS)\n    {\n        os_log(\"OS_ObjectIdFindByName returned OS_SUCCESS, queue_id now points to id=%\" PRIu32, (unsigned int)(*queue_id));\n    }\n    else\n    {\n        os_log(\"OS_ObjectIdFindByName returned error code=%d\", (int)return_code);\n    }\n\n    os_log(\"Exiting OS_QueueGetIdByName with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpo4lphngz/src/src/os/shared/src/osapi-queue.c:234:20: error: 'LOCAL_OBJID_TYPE' redeclared as different kind of symbol\n  234 | extern const int32 LOCAL_OBJID_TYPE;\n      |                    ^~~~~~~~~~~~~~~~\n/tmp/tmpo4lphngz/src/src/os/shared/src/osapi-queue.c:67:5: note: previous definition of 'LOCAL_OBJID_TYPE' with type 'enum <anonymous>'\n   67 |     LOCAL_OBJID_TYPE  = OS_OBJECT_TYPE_OS_QUEUE\n      |     ^~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:286: CMakeFiles/osal.dir/src/os/shared/src/osapi-queue.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_QueueGetIdByName as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal local type/constant definitions so this translation unit is\n * self-contained for compilation. In the real project these come from\n * shared headers, so these typedefs/constants should not conflict there.\n */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\n\n/* Object type constants (mirrors original LOCAL_OBJID_TYPE definition). */\nenum\n{\n    OS_OBJECT_TYPE_OS_QUEUE = 1,\n    LOCAL_OBJID_TYPE  = OS_OBJECT_TYPE_OS_QUEUE\n};\n\n/* Return codes used by the API (kept minimal). */\nenum\n{\n    OS_SUCCESS = 0,\n    OS_INVALID_POINTER = -1\n};\n\n/* Prototype for the external object-id lookup routine. Not defined here. */\nint32 OS_ObjectIdFindByName(int objtype, const char *name, osal_id_t *id);\n\nstatic void os_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2329.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, fail silently to avoid changing behavior. */\n        return;\n    }\n\n    /* Timestamp the entry. */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) == NULL)\n    {\n        fprintf(f, \"[unknown-time] \");\n    }\n    else\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"%s \", timestr);\n        }\n        else\n        {\n            fprintf(f, \"[time-format-failed] \");\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Log entry and the raw pointer values we received. */\n    os_log(\"Entered OS_QueueGetIdByName: queue_id=%p, queue_name=%p\", (void *)queue_id, (const void *)queue_name);\n\n    /* Check Parameters (mirror semantics of original OS_CHECK_POINTER as closely as reasonable here). */\n    if (queue_id == NULL)\n    {\n        os_log(\"Parameter check failed: queue_id is NULL\");\n        return OS_INVALID_POINTER;\n    }\n\n    if (queue_name == NULL)\n    {\n        os_log(\"Parameter check failed: queue_name is NULL\");\n        return OS_INVALID_POINTER;\n    }\n\n    /* At this point we have a non-NULL queue_name pointer. We intentionally\n     * do not dereference or attempt to measure the length of the string here\n     * (e.g. via strlen) because that may itself read beyond the bounds of the\n     * underlying object if the caller supplied a non-NUL-terminated pointer.\n     * Instead we log that we are forwarding the pointer to\n     * OS_ObjectIdFindByName so that a downstream read/strlen inside that\n     * function (which would be the violating behavior described) can be\n     * observed and correlated with these logs. */\n    os_log(\"Forwarding queue_name pointer to OS_ObjectIdFindByName: queue_name=%p\", (const void *)queue_name);\n\n    /* Preserve original call: forward the name to the object-id lookup routine. */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    /* Log the result of the lookup. If successful, also log the found id. */\n    if (return_code == OS_SUCCESS)\n    {\n        os_log(\"OS_ObjectIdFindByName returned OS_SUCCESS, queue_id now points to id=%\" PRIu32, (unsigned int)(*queue_id));\n    }\n    else\n    {\n        os_log(\"OS_ObjectIdFindByName returned error code=%d\", (int)return_code);\n    }\n\n    os_log(\"Exiting OS_QueueGetIdByName with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "The compile error occurred because LOCAL_OBJID_TYPE was being redeclared as an extern const int32 while earlier in the translation unit it was defined as an enum constant. I removed the conflicting extern declaration and made the file self-contained by providing minimal, local typedefs and enums (int32/osal_id_t, OS_OBJECT_TYPE_OS_QUEUE, LOCAL_OBJID_TYPE, and return codes). I also added standard includes required by the logging code. No logic of OS_QueueGetIdByName was changed; only the conflicting declaration was removed and supporting definitions added so the code compiles standalone."
}