{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_TaskGetInfo_Impl is invoked by OS_TaskGetInfo, but its body only performs return OS_SUCCESS and has no side-effects (does not modify *task_prop or token). The call executes but contributes nothing observable; removing the call (or replacing it with an immediate OS_SUCCESS) would not affect program behaviour, so this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2592.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Helper to print a task property snapshot and token bytes to the log file. */\nstatic void OS_TaskGetInfo_LogSnapshot(FILE *log, const char *label, osal_id_t task_id, const OS_task_prop_t *task_prop, const OS_object_token_t *token)\n{\n    if (!log) return;\n\n    fprintf(log, \"[%s] task_id=%lu\\n\", label, (unsigned long)task_id);\n\n    if (task_prop != NULL)\n    {\n        fprintf(log, \"[%s] task_prop->name=\\\"%s\\\"\\n\", label, task_prop->name);\n        fprintf(log, \"[%s] task_prop->creator=%lu\\n\", label, (unsigned long)task_prop->creator);\n        fprintf(log, \"[%s] task_prop->stack_size=%lu\\n\", label, (unsigned long)task_prop->stack_size);\n        fprintf(log, \"[%s] task_prop->priority=%ld\\n\", label, (long)task_prop->priority);\n    }\n    else\n    {\n        fprintf(log, \"[%s] task_prop=NULL\\n\", label);\n    }\n\n    /* Dump token bytes (opaque) to detect any changes by implementations */\n    if (token != NULL)\n    {\n        const unsigned char *b = (const unsigned char *)token;\n        size_t i;\n        fprintf(log, \"[%s] token bytes:\", label);\n        for (i = 0; i < sizeof(*token); ++i)\n        {\n            fprintf(log, \" %02x\", (unsigned int)b[i]);\n        }\n        fprintf(log, \"\\n\");\n    }\n    else\n    {\n        fprintf(log, \"[%s] token=NULL\\n\", label);\n    }\n\n    fflush(log);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    /* Open the evidence log (append) so multiple calls accumulate evidence. */\n    FILE *log = fopen(\"/tmp/logs/2592.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"--- OS_TaskGetInfo entry ---\\n\");\n        fprintf(log, \"Called with task_id=%lu\\n\", (unsigned long)task_id);\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Capture token bytes before calling implementation to detect modifications. */\n        unsigned char token_bytes_before[sizeof(token)];\n        unsigned char token_bytes_after[sizeof(token)];\n        memcpy(token_bytes_before, &token, sizeof(token));\n\n        if (log)\n        {\n            OS_TaskGetInfo_LogSnapshot(log, \"pre-impl\", task_id, task_prop, &token);\n        }\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Capture token after the call to detect changes. */\n        memcpy(token_bytes_after, &token, sizeof(token));\n\n        if (log)\n        {\n            /* Log return code and post-call snapshot */\n            fprintf(log, \"OS_TaskGetInfo_Impl returned %ld\\n\", (long)return_code);\n\n            OS_TaskGetInfo_LogSnapshot(log, \"post-impl\", task_id, task_prop, &token);\n\n            /* Compare token before/after */\n            if (memcmp(token_bytes_before, token_bytes_after, sizeof(token)) == 0)\n            {\n                fprintf(log, \"token unchanged by OS_TaskGetInfo_Impl\\n\");\n            }\n            else\n            {\n                fprintf(log, \"token CHANGED by OS_TaskGetInfo_Impl (bytes diff)\\n\");\n            }\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdGetById failed, return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"--- OS_TaskGetInfo exit (return %ld) ---\\n\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}