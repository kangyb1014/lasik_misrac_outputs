{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'OS_common_record_t *record;' is only used for read-only access (record->name_entry, record->creator) and is assigned from the object table. It should be declared as 'const OS_common_record_t *record;' to prevent modification of the pointed-to data. Therefore the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a formatted line to a log file for reproduction/evidence */\nstatic void OS_LogAppend(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2593.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging; do not interfere with original logic */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry and parameters */\n    OS_LogAppend(\"OS_TaskGetInfo ENTRY: task_id=%lu, task_prop=%p\", (unsigned long)task_id, (void *)task_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    OS_LogAppend(\"OS_TaskGetInfo: cleared task_prop at %p\", (void *)task_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_LogAppend(\"OS_TaskGetInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log pointers obtained from object table */\n        OS_LogAppend(\"OS_TaskGetInfo: token @%p, record @%p, task @%p\", (void *)&token, (void *)record, (void *)task);\n\n        if (record->name_entry != NULL)\n        {\n            /* Log the name_entry before copying it to task_prop */\n            OS_LogAppend(\"OS_TaskGetInfo: record->name_entry = '%s'\", record->name_entry);\n\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n\n            OS_LogAppend(\"OS_TaskGetInfo: copied name to task_prop->name = '%s'\", task_prop->name);\n        }\n        else\n        {\n            OS_LogAppend(\"OS_TaskGetInfo: record->name_entry is NULL\");\n        }\n\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log the read-only fields captured from the records */\n        OS_LogAppend(\"OS_TaskGetInfo: record->creator = %lu, task->stack_size = %lu, task->priority = %ld\",\n                     (unsigned long)record->creator,\n                     (unsigned long)task->stack_size,\n                     (long)task->priority);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n        OS_LogAppend(\"OS_TaskGetInfo: OS_TaskGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_LogAppend(\"OS_TaskGetInfo: released token @%p\", (void *)&token);\n    }\n\n    OS_LogAppend(\"OS_TaskGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}