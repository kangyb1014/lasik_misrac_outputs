{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration extern OS_common_record_t *const OS_global_task_table provides a const pointer to a mutable OS_common_record_t. In OS_TaskGetInfo the code uses record = OS_OBJECT_TABLE_GET(OS_global_task_table, token) and only reads fields (name_entry, creator), so the pointer could/should be to a const-qualified type (e.g. extern const OS_common_record_t *const OS_global_task_table). Therefore this declaration violates MISRA C 2023 Rule 8.13 unless there is a justified need elsewhere in the code to modify the records via this pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/*\n * Probe logging helper. Appends human-readable trace information to\n * \"/tmp/logs/2593.txt\" so other agents can reproduce and get evidence\n * of the control flow and the state read from the objects involved in\n * the reported MISRA Rule 8.13 scenario.\n *\n * This helper only reads fields (no mutation) and preserves the\n * original semantics of OS_TaskGetInfo.\n */\nstatic void OS_TaskGetInfo_LogProbe(osal_id_t task_id,\n                                    const OS_object_token_t *token_ptr,\n                                    const OS_common_record_t *record,\n                                    const OS_task_internal_record_t *task,\n                                    int32 stage_code,\n                                    int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2593.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot open the file, silently continue to preserve behavior. */\n        return;\n    }\n\n    fprintf(f, \"---- OS_TaskGetInfo probe ----\\n\");\n    fprintf(f, \"task_id (raw): %llu\\n\", (unsigned long long)task_id);\n    fprintf(f, \"token addr: %p\\n\", (const void *)token_ptr);\n    fprintf(f, \"stage: %d\\n\", (int)stage_code);\n    fprintf(f, \"return_code (incoming): %d\\n\", (int)return_code);\n\n    if (record == NULL)\n    {\n        fprintf(f, \"record: NULL\\n\");\n    }\n    else\n    {\n        /* Print the pointer value and attempt to print name and creator. */\n        fprintf(f, \"record ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)record);\n\n        /* name_entry is read-only in this function; if it exists, log the contents. */\n        if (record->name_entry != NULL)\n        {\n            /* Copy into a local buffer to avoid unbounded prints. */\n            char namebuf[256];\n            memset(namebuf, 0, sizeof(namebuf));\n            /* Use strncpy to avoid overruns; original code used strncpy as well. */\n            strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n            namebuf[sizeof(namebuf) - 1] = '\\0';\n            fprintf(f, \"record->name_entry: %s\\n\", namebuf);\n        }\n        else\n        {\n            fprintf(f, \"record->name_entry: NULL\\n\");\n        }\n\n        /* creator may be an integer type; cast to unsigned long long for printing. */\n        fprintf(f, \"record->creator (raw): %llu\\n\", (unsigned long long)record->creator);\n    }\n\n    if (task == NULL)\n    {\n        fprintf(f, \"task: NULL\\n\");\n    }\n    else\n    {\n        fprintf(f, \"task ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)task);\n        fprintf(f, \"task->stack_size: %llu\\n\", (unsigned long long)task->stack_size);\n        fprintf(f, \"task->priority: %llu\\n\", (unsigned long long)task->priority);\n    }\n\n    fprintf(f, \"return_code (reported): %d\\n\", (int)return_code);\n    fprintf(f, \"---- end probe ----\\n\\n\");\n\n    fclose(f);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    /* Log entry before attempting to get the object id */\n    OS_TaskGetInfo_LogProbe(task_id, &token, NULL, NULL, 0, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TaskGetInfo_LogProbe(task_id, &token, NULL, NULL, 1, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the pointers and basic state read from them before populating task_prop */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 2, return_code);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log just before calling the platform-specific implementation */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 3, return_code);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log result from Impl and final state prior to token release */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 4, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after token release */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 5, return_code);\n    }\n\n    return return_code;\n}\n"
}