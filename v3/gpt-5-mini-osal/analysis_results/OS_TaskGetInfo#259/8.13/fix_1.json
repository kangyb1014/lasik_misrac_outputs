{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_TaskGetInfo_LogProbe(osal_id_t task_id,\n                                    const OS_object_token_t *token_ptr,\n                                    const OS_common_record_t *record,\n                                    const OS_task_internal_record_t *task,\n                                    int32 stage_code,\n                                    int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2593.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot open the file, silently continue to preserve behavior. */\n        return;\n    }\n\n    fprintf(f, \"---- OS_TaskGetInfo probe ----\\n\");\n    fprintf(f, \"task_id (raw): %llu\\n\", (unsigned long long)task_id);\n    fprintf(f, \"token addr: %p\\n\", (const void *)token_ptr);\n    fprintf(f, \"stage: %d\\n\", (int)stage_code);\n    fprintf(f, \"return_code (incoming): %d\\n\", (int)return_code);\n\n    if (record == NULL)\n    {\n        fprintf(f, \"record: NULL\\n\");\n    }\n    else\n    {\n        /* Print the pointer value and attempt to print name and creator. */\n        fprintf(f, \"record ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)record);\n\n        /* name_entry is read-only in this function; if it exists, log the contents. */\n        if (record->name_entry != NULL)\n        {\n            /* Copy into a local buffer to avoid unbounded prints. */\n            char namebuf[256];\n            memset(namebuf, 0, sizeof(namebuf));\n            /* Use strncpy to avoid overruns; original code used strncpy as well. */\n            strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n            namebuf[sizeof(namebuf) - 1] = '\\0';\n            fprintf(f, \"record->name_entry: %s\\n\", namebuf);\n        }\n        else\n        {\n            fprintf(f, \"record->name_entry: NULL\\n\");\n        }\n\n        /* creator may be an integer type; cast to unsigned long long for printing. */\n        fprintf(f, \"record->creator (raw): %llu\\n\", (unsigned long long)record->creator);\n    }\n\n    if (task == NULL)\n    {\n        fprintf(f, \"task: NULL\\n\");\n    }\n    else\n    {\n        fprintf(f, \"task ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)task);\n        fprintf(f, \"task->stack_size: %llu\\n\", (unsigned long long)task->stack_size);\n        fprintf(f, \"task->priority: %llu\\n\", (unsigned long long)task->priority);\n    }\n\n    fprintf(f, \"return_code (reported): %d\\n\", (int)return_code);\n    fprintf(f, \"---- end probe ----\\n\\n\");\n\n    fclose(f);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    /* Log entry before attempting to get the object id */\n    OS_TaskGetInfo_LogProbe(task_id, &token, NULL, NULL, 0, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TaskGetInfo_LogProbe(task_id, &token, NULL, NULL, 1, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the pointers and basic state read from them before populating task_prop */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 2, return_code);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log just before calling the platform-specific implementation */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 3, return_code);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log result from Impl and final state prior to token release */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 4, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after token release */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 5, return_code);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c:1:\n/tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c: In function 'OS_TaskGetInfo_LogProbe':\n/tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c:393:38: error: expected ')' before 'PRIxPTR'\n  393 |         fprintf(f, \"record ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)record);\n      |                                      ^~~~~~~\n/tmp/tmpk3ycqjap/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c:56:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   55 | #include \"os-shared-idmap.h\"\n  +++ |+#include <inttypes.h>\n   56 | \nIn file included from /tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c:1:\n/tmp/tmpk3ycqjap/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c:393:9: note: in expansion of macro 'fprintf'\n  393 |         fprintf(f, \"record ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)record);\n      |         ^~~~~~~\n/tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c:421:36: error: expected ')' before 'PRIxPTR'\n  421 |         fprintf(f, \"task ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)task);\n      |                                    ^~~~~~~\n/tmp/tmpk3ycqjap/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c:421:36: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  421 |         fprintf(f, \"task ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)task);\n      |                                    ^~~~~~~\n/tmp/tmpk3ycqjap/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpk3ycqjap/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpk3ycqjap/src/src/os/shared/src/osapi-task.c:421:9: note: in expansion of macro 'fprintf'\n  421 |         fprintf(f, \"task ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)task);\n      |         ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-task.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-task.dir/__/__/os/shared/src/osapi-task.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4283: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-task.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nstatic void OS_TaskGetInfo_LogProbe(osal_id_t task_id,\n                                    const OS_object_token_t *token_ptr,\n                                    const OS_common_record_t *record,\n                                    const OS_task_internal_record_t *task,\n                                    int32 stage_code,\n                                    int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2593.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot open the file, silently continue to preserve behavior. */\n        return;\n    }\n\n    fprintf(f, \"---- OS_TaskGetInfo probe ----\\n\");\n    fprintf(f, \"task_id (raw): %llu\\n\", (unsigned long long)task_id);\n    fprintf(f, \"token addr: %p\\n\", (const void *)token_ptr);\n    fprintf(f, \"stage: %d\\n\", (int)stage_code);\n    fprintf(f, \"return_code (incoming): %d\\n\", (int)return_code);\n\n    if (record == NULL)\n    {\n        fprintf(f, \"record: NULL\\n\");\n    }\n    else\n    {\n        /* Print the pointer value and attempt to print name and creator. */\n        fprintf(f, \"record ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)record);\n\n        /* name_entry is read-only in this function; if it exists, log the contents. */\n        if (record->name_entry != NULL)\n        {\n            /* Copy into a local buffer to avoid unbounded prints. */\n            char namebuf[256];\n            memset(namebuf, 0, sizeof(namebuf));\n            /* Use strncpy to avoid overruns; original code used strncpy as well. */\n            strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n            namebuf[sizeof(namebuf) - 1] = '\\0';\n            fprintf(f, \"record->name_entry: %s\\n\", namebuf);\n        }\n        else\n        {\n            fprintf(f, \"record->name_entry: NULL\\n\");\n        }\n\n        /* creator may be an integer type; cast to unsigned long long for printing. */\n        fprintf(f, \"record->creator (raw): %llu\\n\", (unsigned long long)record->creator);\n    }\n\n    if (task == NULL)\n    {\n        fprintf(f, \"task: NULL\\n\");\n    }\n    else\n    {\n        fprintf(f, \"task ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)task);\n        fprintf(f, \"task->stack_size: %llu\\n\", (unsigned long long)task->stack_size);\n        fprintf(f, \"task->priority: %llu\\n\", (unsigned long long)task->priority);\n    }\n\n    fprintf(f, \"return_code (reported): %d\\n\", (int)return_code);\n    fprintf(f, \"---- end probe ----\\n\\n\");\n\n    fclose(f);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    /* Log entry before attempting to get the object id */\n    OS_TaskGetInfo_LogProbe(task_id, &token, NULL, NULL, 0, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TaskGetInfo_LogProbe(task_id, &token, NULL, NULL, 1, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the pointers and basic state read from them before populating task_prop */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 2, return_code);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log just before calling the platform-specific implementation */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 3, return_code);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log result from Impl and final state prior to token release */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 4, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after token release */\n        OS_TaskGetInfo_LogProbe(task_id, &token, record, task, 5, return_code);\n    }\n\n    return return_code;\n}\n",
  "explanation": "Added #include <inttypes.h> so the PRIxPTR macro is defined (used when printing uintptr_t with fprintf). Also included <stdint.h>, <stdio.h>, and <string.h> to ensure uintptr_t, FILE, and string functions/types are available; no logic was changed."
}