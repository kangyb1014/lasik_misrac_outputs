{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1) can read up to N = sizeof(task_prop->name)-1 bytes from record->name_entry. If record->name_entry points to a smaller buffer or to a string that is not NUL-terminated within the first N bytes, strncpy will read beyond the source object\u2019s bounds (buffer over-read). Example: source buffer length = 8, N = 63 \u2192 strncpy may read past the 8-byte source, violating the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2599.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe/logging helper. This function writes information to /tmp/logs/2599.txt\n   It intentionally avoids reading the source buffer (record->name_entry) to\n   prevent introducing new over-read behavior. Instead it logs pointer values,\n   sizes, and inspects the destination buffer (task_prop->name) after the\n   strncpy to determine whether a NUL was observed within the copied region.\n*/\nstatic void OS_TaskGetInfo_LogProbe(osal_id_t task_id,\n                                    const OS_common_record_t *record,\n                                    const OS_task_internal_record_t *task,\n                                    OS_task_prop_t *task_prop,\n                                    size_t copy_len,\n                                    int stage_before)\n{\n    FILE *f = fopen(\"/tmp/logs/2599.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging, do not affect behavior */\n    }\n\n    fprintf(f, \"--- OS_TaskGetInfo probe (%s) ---\\n\", stage_before ? \"before_copy\" : \"after_copy\");\n    /* Print basic context and addresses to help reproduce scenario */\n    fprintf(f, \"task_id=%llu\\n\", (unsigned long long) (uintptr_t) task_id);\n    fprintf(f, \"record=%p\\n\", (void *)record);\n    fprintf(f, \"record->name_entry=%p\\n\", (void *)(record ? record->name_entry : NULL));\n    fprintf(f, \"task=%p\\n\", (void *)task);\n    fprintf(f, \"task_prop=%p\\n\", (void *)task_prop);\n    fprintf(f, \"requested_copy_len=%zu\\n\", copy_len);\n\n    if (!stage_before)\n    {\n        /* Inspect the destination buffer only (safe): look for NUL within copy_len */\n        size_t i;\n        int nul_index = -1;\n        for (i = 0; i < copy_len; ++i)\n        {\n            if (task_prop->name[i] == '\\0')\n            {\n                nul_index = (int)i;\n                break;\n            }\n        }\n        if (nul_index >= 0)\n        {\n            fprintf(f, \"NUL found in destination at pos=%d (within first %zu bytes)\\n\", nul_index, copy_len);\n        }\n        else\n        {\n            fprintf(f, \"No NUL found in destination within the first %zu bytes\\n\", copy_len);\n        }\n\n        /* Dump the copied bytes (hex) for the region copied by strncpy */\n        fprintf(f, \"dest_bytes_hex:\");\n        for (i = 0; i < copy_len; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned char)task_prop->name[i]);\n        }\n        fprintf(f, \"\\n\");\n\n        /* Also log the final forced NUL at the last slot (original code sets it) */\n        fprintf(f, \"forced_last_byte_index=%zu value=%02X\\n\", copy_len, (unsigned char)task_prop->name[copy_len]);\n\n        /* Additional contextual fields copied from the record/task (safe to read) */\n        if (record)\n        {\n            fprintf(f, \"record->creator=%u\\n\", (unsigned) record->creator);\n        }\n        if (task)\n        {\n            fprintf(f, \"task->stack_size=%u task->priority=%u\\n\", (unsigned) task->stack_size, (unsigned) task->priority);\n        }\n    }\n\n    fprintf(f, \"--- end probe ---\\n\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            /* Log context before performing the strncpy (do not read source) */\n            OS_TaskGetInfo_LogProbe(task_id, record, task, task_prop, sizeof(task_prop->name) - 1, 1);\n\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n\n            /* Log results after the strncpy so callers can observe if no NUL was copied */\n            OS_TaskGetInfo_LogProbe(task_id, record, task, task_prop, sizeof(task_prop->name) - 1, 0);\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n"
}