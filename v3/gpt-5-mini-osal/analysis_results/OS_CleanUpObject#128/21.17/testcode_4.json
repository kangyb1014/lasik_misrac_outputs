{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without validating either pointer or ensuring they point to NUL-terminated strings. If either pointer is NULL or points to a non-terminated buffer, strcmp will read past the object bounds (e.g. UT_Stub_RegisterReturnType or the caller passes TypeName == NULL or a non-terminated char array), causing out-of-bounds access and undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1289.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CleanUpObject code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n    FILE *log = NULL;\n    int objtype;\n\n    /* Preserve original increment behavior exactly as in the target code */\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n\n    /* Open log file for appending probe information */\n    log = fopen(\"/tmp/logs/1289.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry state: object id, argument pointer, ObjectCount pointer and current value */\n        fprintf(log, \"OS_CleanUpObject ENTRY: object_id=%lu, arg=%p, ObjectCount_ptr=%p, ObjectCount_value=%lu\\n\",\n                (unsigned long)object_id,\n                (void *)arg,\n                (void *)ObjectCount,\n                (unsigned long)(*ObjectCount));\n        fflush(log);\n    }\n\n    /* Identify the object once and reuse the result so logs and switch use the same value */\n    objtype = OS_IdentifyObject(object_id);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_CleanUpObject: identified object type=%d for object_id=%lu\\n\",\n                objtype, (unsigned long)object_id);\n        fflush(log);\n    }\n\n    switch (objtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_TaskDelete(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_QueueDelete(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_BinSemDelete(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_CountSemDelete(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_MutSemDelete(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_ModuleUnload(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_TimeBaseDelete(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_TimerDelete(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_close(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_DirectoryClose(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: calling OS_CondVarDelete(%lu)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CleanUpObject: default case for object_id=%lu (no action)\\n\", (unsigned long)object_id);\n                fflush(log);\n            }\n            break;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_CleanUpObject EXIT: object_id=%lu\\n\", (unsigned long)object_id);\n        fclose(log);\n    }\n}\n"
}