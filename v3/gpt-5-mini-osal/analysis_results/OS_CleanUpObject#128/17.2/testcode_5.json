{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf UT_ExecuteBasicHandler is passed as the DefaultHandler (or if DefaultHandler ultimately resolves to call UT_ExecuteBasicHandler), the function registers that handler via UT_SetHandlerFunction and then calls UT_DefaultStubImpl which (as the stub dispatcher) will invoke the registered handler. This causes UT_ExecuteBasicHandler to be called again indirectly (UT_ExecuteBasicHandler -> UT_SetHandlerFunction -> UT_DefaultStubImpl -> handler -> UT_ExecuteBasicHandler), producing indirect recursion and thus violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1286.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CleanUpObject code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/1286.txt. */\nstatic void OS_Cleanup_Log(const char *stage, osal_id_t object_id, void *arg, uint32 *ObjectCount, uint32 objtype)\n{\n    FILE *f = fopen(\"/tmp/logs/1286.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Print numeric representation of object_id via uintptr_t to be portable across likely typedefs. */\n    fprintf(f, \"[OS_CleanUpObject] %s: object_id=%llu, arg=%p, ObjectCount_ptr=%p, count=%u, objtype=%u\\n\",\n            stage,\n            (unsigned long long)(uintptr_t)object_id,\n            arg,\n            (void *)ObjectCount,\n            (unsigned) (ObjectCount ? *ObjectCount : 0U),\n            (unsigned) objtype);\n\n    fclose(f);\n}\n\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n    uint32 objtype;\n\n    /* Log entry and raw parameters */\n    OS_Cleanup_Log(\"ENTRY\", object_id, arg, NULL, 0U);\n\n    ObjectCount = (uint32 *)arg;\n    /* Log pointer after cast */\n    OS_Cleanup_Log(\"AFTER_CAST\", object_id, arg, ObjectCount, 0U);\n\n    /* Preserve original increment semantics */\n    ++(*ObjectCount);\n\n    /* Log after increment */\n    OS_Cleanup_Log(\"AFTER_INCREMENT\", object_id, arg, ObjectCount, 0U);\n\n    /* Determine object type once and log it */\n    objtype = OS_IdentifyObject(object_id);\n    OS_Cleanup_Log(\"AFTER_IDENTIFY\", object_id, arg, ObjectCount, objtype);\n\n    switch (objtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_Cleanup_Log(\"CALL_OS_TaskDelete\", object_id, arg, ObjectCount, objtype);\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_Cleanup_Log(\"CALL_OS_QueueDelete\", object_id, arg, ObjectCount, objtype);\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_Cleanup_Log(\"CALL_OS_BinSemDelete\", object_id, arg, ObjectCount, objtype);\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_Cleanup_Log(\"CALL_OS_CountSemDelete\", object_id, arg, ObjectCount, objtype);\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_Cleanup_Log(\"CALL_OS_MutSemDelete\", object_id, arg, ObjectCount, objtype);\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_Cleanup_Log(\"CALL_OS_ModuleUnload\", object_id, arg, ObjectCount, objtype);\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_Cleanup_Log(\"CALL_OS_TimeBaseDelete\", object_id, arg, ObjectCount, objtype);\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_Cleanup_Log(\"CALL_OS_TimerDelete\", object_id, arg, ObjectCount, objtype);\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_Cleanup_Log(\"CALL_OS_close\", object_id, arg, ObjectCount, objtype);\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_Cleanup_Log(\"CALL_OS_DirectoryClose\", object_id, arg, ObjectCount, objtype);\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_Cleanup_Log(\"CALL_OS_CondVarDelete\", object_id, arg, ObjectCount, objtype);\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            OS_Cleanup_Log(\"DEFAULT_CASE\", object_id, arg, ObjectCount, objtype);\n            break;\n    }\n\n    /* Final exit log */\n    OS_Cleanup_Log(\"EXIT\", object_id, arg, ObjectCount, objtype);\n}\n"
}