{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeNew:\n```c\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ObjectIdFinalizeNew:\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_SUCCESS (0)\n...\n#define OS_OBJECT_ID_UNDEFINED ((osal_id_t){0})\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_ObjectIdTransactionFinish(token, &final_id);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call itself does not inherently violate Rule 8.13. A violation would occur if the callee is declared to take a non-const pointer but does not modify the pointee. For example, if the prototype is:\n\n  void OS_ObjectIdTransactionFinish(OS_object_token_t *token, osal_id_t *id);\n\nand the implementation does not modify *id, then the parameter should be const (const osal_id_t *id) and Rule 8.13 would be violated. If the function either accepts a const pointer (const osal_id_t *) or legitimately modifies the referenced value, there is no violation."
}