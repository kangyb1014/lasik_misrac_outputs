{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment assigns NULL to local pointer variables (conn_record, sock_record, sock, conn) and zeroes the token structs immediately after declaration. These initializations are redundant because, by control-flow, the tokens and record pointers are always explicitly set by OS_ObjectIdGetById/OS_ObjectIdAllocateNew (or set on successful paths) before any use; there is no execution path that relies on the initial NULL/zero values. Removing these assignments would not change runtime behaviour, so they constitute dead code under MISRA C 2023 Rule 2.2. Note: the comment indicates the assignments exist only to suppress static-analysis warnings, which does not change that they are dead code at runtime.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1942.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeNew:\n```c\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper to append structured logs for reproducing the control flow and state */\nstatic void OS_FinalizeNew_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1942.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n    int called_transaction = 0;\n    int called_notify = 0;\n\n    /* Log entry with raw pointers and status */\n    OS_FinalizeNew_Log(\"ENTRY: operation_status=%d, token=%p, outid=%p\", (int)operation_status, (void *)token, (void *)outid);\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        /* Mirror original behavior: dereference token->obj_id only in the same branch\n         * as the original code to avoid changing control flow or behavior. */\n        final_id = token->obj_id;\n        OS_FinalizeNew_Log(\"BRANCH: SUCCESS - token->obj_id=%llu\", (unsigned long long)token->obj_id);\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_FinalizeNew_Log(\"BRANCH: FAILURE - setting final_id=OS_OBJECT_ID_UNDEFINED (%llu)\", (unsigned long long)final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    called_transaction = 1;\n    OS_FinalizeNew_Log(\"EVENT: OS_ObjectIdTransactionFinish called, final_id now=%llu\", (unsigned long long)final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n        called_notify = 1;\n        OS_FinalizeNew_Log(\"EVENT: OS_NotifyEvent called for obj_id=%llu\", (unsigned long long)token->obj_id);\n    }\n    else\n    {\n        OS_FinalizeNew_Log(\"EVENT: OS_NotifyEvent NOT called (operation_status=%d)\", (int)operation_status);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n        OS_FinalizeNew_Log(\"OUTPUT: outid set to %llu\", (unsigned long long)final_id);\n    }\n    else\n    {\n        OS_FinalizeNew_Log(\"OUTPUT: outid pointer is NULL, not written\");\n    }\n\n    OS_FinalizeNew_Log(\"EXIT: returning operation_status=%d, transaction_called=%d, notify_called=%d\", (int)operation_status, called_transaction, called_notify);\n\n    return operation_status;\n}\n"
}