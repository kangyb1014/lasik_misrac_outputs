{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro expands to &OS_queue_table[OS_ObjectIndexFromToken(&token)] and yields a pointer to a non-const table element. In the shown use (OS_QueueGet) the returned pointer is assigned to 'OS_queue_internal_record_t *queue' and only read (queue->max_size). Therefore the pointer could and should be a pointer to const (const OS_queue_internal_record_t *), so the current code violates MISRA C 2023 Rule 8.13 in that usage (the macro enables a non-const pointer where a const-qualified pointer is possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGet code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe/log helper for OS_QueueGet. Appends human-readable trace entries to /tmp/logs/2313.txt. */\nstatic void OS_QueueGet_Log(const char *stage, const OS_object_token_t *token, const OS_queue_internal_record_t *queue, size_t requested_size, const size_t *size_copied_ptr, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2313.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect the original logic. */\n        return;\n    }\n\n    fprintf(f, \"OS_QueueGet - %s\\n\", stage);\n    fprintf(f, \"  token ptr=%p\\n\", (const void *)token);\n    fprintf(f, \"  queue ptr=%p\\n\", (const void *)queue);\n    if (queue != NULL)\n    {\n        fprintf(f, \"  queue->max_size=%zu\\n\", queue->max_size);\n    }\n    fprintf(f, \"  requested size=%zu\\n\", requested_size);\n    fprintf(f, \"  size_copied ptr=%p\\n\", (const void *)size_copied_ptr);\n    fprintf(f, \"  return_code=%ld\\n\", (long)return_code);\n    fprintf(f, \"------------------------\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    /* Log after parameter checks (do not dereference size_copied yet) */\n    OS_QueueGet_Log(\"after_checks\", &token, NULL, size, size_copied, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log the result of ObjectIdGetById and the token (may be partially populated) */\n    OS_QueueGet_Log(\"after_ObjectIdGetById\", &token, NULL, size, size_copied, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Retrieve the queue record from the object table (this yields a non-const pointer in current implementation) */\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log the queue pointer and its max_size for evidence */\n        OS_QueueGet_Log(\"after_table_get\", &token, queue, size, size_copied, return_code);\n\n        if (size < queue->max_size)\n        {\n            /* The buffer that the user is passing in is potentially too small */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n\n            /* Log the invalid-size branch and the written size_copied */\n            OS_QueueGet_Log(\"invalid_size\", &token, queue, size, size_copied, return_code);\n        }\n        else\n        {\n            /* Log just before delegating to the implementation */\n            OS_QueueGet_Log(\"before_Impl\", &token, queue, size, size_copied, return_code);\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            /* Log result after implementation returns */\n            OS_QueueGet_Log(\"after_Impl\", &token, queue, size, size_copied, return_code);\n        }\n    }\n    else\n    {\n        /* Log non-success path from ObjectIdGetById */\n        OS_QueueGet_Log(\"objectid_not_found\", &token, NULL, size, size_copied, return_code);\n    }\n\n    return return_code;\n}\n"
}