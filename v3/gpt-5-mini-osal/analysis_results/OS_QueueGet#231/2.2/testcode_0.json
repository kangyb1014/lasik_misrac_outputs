{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"sizeCopied = -1;\" is executed on every call but is overwritten on all subsequent paths before any use: both the OS_PEND branch (mq_receive) and the non-OS_PEND branch (mq_timedreceive) assign to sizeCopied at least once. Therefore removing this assignment would not affect program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2312.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGet code.\n",
  "test_code": "int32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n    FILE *log = fopen(\"/tmp/logs/2312.txt\", \"a\");\n\n    /* Log entry and parameters */\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_QueueGet ENTRY: queue_id=%lu data=%p size=%zu size_copied_ptr=%p timeout=%ld\\n\",\n                (unsigned long)queue_id, data, size, (void *)size_copied, (long)timeout);\n        fflush(log);\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d, token_addr=%p\\n\", return_code, (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (log != NULL)\n        {\n            /* Attempt to log queue pointer and its max_size field for diagnostics */\n            /* Note: access to queue->max_size mirrors original code's usage */\n            fprintf(log, \"queue=%p max_size=%zu\\n\", (void *)queue, (size_t)queue->max_size);\n            fflush(log);\n        }\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"BRANCH: size < queue->max_size -> set *size_copied=0, return_code=%d\\n\", return_code);\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"BRANCH: calling OS_QueueGet_Impl with timeout=%ld\\n\", (long)timeout);\n                fflush(log);\n            }\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            if (log != NULL)\n            {\n                /* Log the result and the value written to *size_copied if possible */\n                if (size_copied != NULL)\n                {\n                    fprintf(log, \"OS_QueueGet_Impl returned %d, *size_copied=%zu\\n\", return_code, *size_copied);\n                }\n                else\n                {\n                    fprintf(log, \"OS_QueueGet_Impl returned %d, size_copied pointer was NULL\\n\", return_code);\n                }\n                fflush(log);\n            }\n        }\n    }\n\n    if (log != NULL)\n    {\n        /* Final state before return */\n        if (size_copied != NULL)\n        {\n            fprintf(log, \"OS_QueueGet EXIT: return_code=%d final *size_copied=%zu\\n\", return_code, *size_copied);\n        }\n        else\n        {\n            fprintf(log, \"OS_QueueGet EXIT: return_code=%d final size_copied_ptr=NULL\\n\", return_code);\n        }\n        fflush(log);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}