{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_Posix_TableMutex_Init:\n```c\nint32 OS_Posix_TableMutex_Init(osal_objtype_t idtype)\n{\n    int                     ret;\n    int32                   return_code = OS_SUCCESS;\n    pthread_mutexattr_t     mutex_attr;\n    OS_impl_objtype_lock_t *impl;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n    if (impl == NULL)\n    {\n        return OS_SUCCESS;\n    }\n\n    do\n    {\n        /*\n         * initialize the pthread mutex attribute structure with default values\n         */\n        ret = pthread_mutexattr_init(&mutex_attr);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n         * Allow the mutex to use priority inheritance\n         */\n        ret = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n         * Use normal (faster/non-recursive) mutex implementation\n         * There should not be any instances of OSAL locking its own table more than once.\n         */\n        ret = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_NORMAL);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_settype failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        ret = pthread_mutex_init(&impl->mutex, &mutex_attr);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutex_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /* create a condition variable with default attributes.\n         * This will be broadcast every time the object table changes */\n        ret = pthread_cond_init(&impl->cond, NULL);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_cond_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n    } while (0);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_Posix_TableMutex_Init:\nOS_impl_objtype_lock_t *const OS_impl_objtype_lock_table[OS_OBJECT_TYPE_USER] = {\n    [OS_OBJECT_TYPE_UNDEFINED]   = NULL,\n    [OS_OBJECT_TYPE_OS_TASK]     = &OS_global_task_table_lock,\n    [OS_OBJECT_TYPE_OS_QUEUE]    = &OS_queue_table_lock,\n    [OS_OBJECT_TYPE_OS_COUNTSEM] = &OS_count_sem_table_lock,\n    [OS_OBJECT_TYPE_OS_BINSEM]   = &OS_bin_sem_table_lock,\n    [OS_OBJECT_TYPE_OS_MUTEX]    = &OS_mutex_table_lock,\n    [OS_OBJECT_TYPE_OS_STREAM]   = &OS_stream_table_lock,\n    [OS_OBJECT_TYPE_OS_DIR]      = &OS_dir_table_lock,\n    [OS_OBJECT_TYPE_OS_TIMEBASE] = &OS_timebase_table_lock,\n    [OS_OBJECT_TYPE_OS_TIMECB]   = &OS_timecb_table_lock,\n    [OS_OBJECT_TYPE_OS_MODULE]   = &OS_module_table_lock,\n    [OS_OBJECT_TYPE_OS_FILESYS]  = &OS_filesys_table_lock,\n    [OS_OBJECT_TYPE_OS_CONSOLE]  = &OS_console_lock,\n    [OS_OBJECT_TYPE_OS_CONDVAR]  = &OS_condvar_lock,\n}\n...\ntypedef struct\n{\n    pthread_mutex_t mutex;\n    pthread_cond_t  cond;\n} OS_impl_objtype_lock_t\n...\ntypedef uint32 osal_objtype_t\n...\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            break;\n        default:\n            break;\n    }\n\n    return return_code;\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n...\n#define OS_DEBUG(__VA_ARGS__) \n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nret = pthread_cond_init(&impl->cond, NULL);\nif (ret != 0)\n{\n    OS_DEBUG(\"Error: pthread_cond_init failed: %s\\n\", strerror(ret));\n    return_code = OS_ERROR;\n    break;\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The pthread_cond_init failure branch is reachable when all prior initialization calls succeed and pthread_cond_init returns a non-zero error. The surrounding code uses a do { ... } while (0) with breaks on prior errors, so this fragment executes in the normal control flow. The early return when impl == NULL prevents execution for some idtype values, but that does not make this code unreachable in general. Therefore MISRA C 2023 Rule 2.1 is not violated."
}