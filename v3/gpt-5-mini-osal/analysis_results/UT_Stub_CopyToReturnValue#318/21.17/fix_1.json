{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Forward-declare minimal FILE API to avoid forcing includes here; these\n       declarations are compatible with the real stdio functions and will\n       link correctly when the standard library is available. */\n    struct FILE; extern struct FILE *fopen(const char *, const char *);\n    extern int fprintf(struct FILE *, const char *, ...);\n    extern int fclose(struct FILE *);\n\n    /* Open log file for append. This records control flow and state so other\n       agents can reproduce and gather evidence for potential violations. */\n    struct FILE *log = fopen(\"/tmp/logs/3189.txt\", \"a\");\n    if (log != (struct FILE *)0)\n    {\n        /* Log entry into the function and key parameters. Avoid dereferencing\n           BufferPtr here to prevent further undefined behavior if it is invalid. */\n        fprintf(log, \"UT_Stub_CopyToReturnValue called: FuncKey=%lu, BufferPtr=%p, BufferSize=%zu\\n\",\n                (unsigned long)FuncKey, BufferPtr, BufferSize);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (log != (struct FILE *)0)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        if (log != (struct FILE *)0)\n        {\n            /* Log buffer metadata but do not dereference pointers held in the\n               buffer (e.g. treat BasePtr as an opaque pointer). */\n            fprintf(log, \"StubPtr->Data.Buff.TotalSize=%zu, BasePtr=%p, Position=%zu\\n\",\n                    StubPtr->Data.Buff.TotalSize,\n                    StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.Position);\n        }\n\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            if (log != (struct FILE *)0)\n            {\n                fprintf(log, \"Size mismatch detected: expected=%zu, provided=%zu. Calling UtAssert_Abort.\\n\",\n                        StubPtr->Data.Buff.TotalSize, BufferSize);\n                fclose(log);\n            }\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            if (log != (struct FILE *)0)\n            {\n                fprintf(log, \"Invoking memcpy to copy %zu bytes from %p to %p\\n\",\n                        BufferSize, BufferPtr, StubPtr->Data.Buff.BasePtr);\n            }\n\n            /* Preserve original behavior: copy the contents into the stub buffer */\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n\n            if (log != (struct FILE *)0)\n            {\n                fprintf(log, \"Memcpy completed. New Position=%zu\\n\", StubPtr->Data.Buff.Position);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        if (log != (struct FILE *)0)\n        {\n            fprintf(log, \"No stub entry found for FuncKey=%lu. No action taken.\\n\", (unsigned long)FuncKey);\n            fclose(log);\n        }\n    }\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp7jg01wef/src/ut_assert/src/utstubs.c: In function 'UT_Stub_CopyToReturnValue':\n/tmp/tmp7jg01wef/src/ut_assert/src/utstubs.c:983:38: error: conflicting types for 'fopen'; have 'struct FILE *(const char *, const char *)'\n  983 |     struct FILE; extern struct FILE *fopen(const char *, const char *);\n      |                                      ^~~~~\nIn file included from /tmp/tmp7jg01wef/src/ut_assert/src/utstubs.c:1:\n/usr/include/stdio.h:258:14: note: previous declaration of 'fopen' with type 'FILE *(const char * restrict,  const char * restrict)'\n  258 | extern FILE *fopen (const char *__restrict __filename,\n      |              ^~~~~\n/tmp/tmp7jg01wef/src/ut_assert/src/utstubs.c:984:16: error: conflicting types for 'fprintf'; have 'int(struct FILE *, const char *, ...)'\n  984 |     extern int fprintf(struct FILE *, const char *, ...);\n      |                ^~~~~~~\nIn file included from /tmp/tmp7jg01wef/src/ut_assert/src/utstubs.c:1:\n/usr/include/stdio.h:350:12: note: previous declaration of 'fprintf' with type 'int(FILE * restrict,  const char * restrict, ...)'\n  350 | extern int fprintf (FILE *__restrict __stream,\n      |            ^~~~~~~\n/tmp/tmp7jg01wef/src/ut_assert/src/utstubs.c:985:16: error: conflicting types for 'fclose'; have 'int(struct FILE *)'\n  985 |     extern int fclose(struct FILE *);\n      |                ^~~~~~\nIn file included from /tmp/tmp7jg01wef/src/ut_assert/src/utstubs.c:1:\n/usr/include/stdio.h:178:12: note: previous declaration of 'fclose' with type 'int(FILE *)'\n  178 | extern int fclose (FILE *__stream);\n      |            ^~~~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:104: ut_assert/CMakeFiles/ut_assert.dir/src/utstubs.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <string.h>\n\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Open log file for append. This records control flow and state so other\n       agents can reproduce and gather evidence for potential violations. */\n    FILE *log = fopen(\"/tmp/logs/3189.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry into the function and key parameters. Avoid dereferencing\n           BufferPtr here to prevent further undefined behavior if it is invalid. */\n        fprintf(log, \"UT_Stub_CopyToReturnValue called: FuncKey=%lu, BufferPtr=%p, BufferSize=%zu\\n\",\n                (unsigned long)FuncKey, BufferPtr, BufferSize);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        if (log != NULL)\n        {\n            /* Log buffer metadata but do not dereference pointers held in the\n               buffer (e.g. treat BasePtr as an opaque pointer). */\n            fprintf(log, \"StubPtr->Data.Buff.TotalSize=%zu, BasePtr=%p, Position=%zu\\n\",\n                    StubPtr->Data.Buff.TotalSize,\n                    StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.Position);\n        }\n\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Size mismatch detected: expected=%zu, provided=%zu. Calling UtAssert_Abort.\\n\",\n                        StubPtr->Data.Buff.TotalSize, BufferSize);\n                fclose(log);\n            }\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Invoking memcpy to copy %zu bytes from %p to %p\\n\",\n                        BufferSize, BufferPtr, StubPtr->Data.Buff.BasePtr);\n            }\n\n            /* Preserve original behavior: copy the contents into the stub buffer */\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Memcpy completed. New Position=%zu\\n\", StubPtr->Data.Buff.Position);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"No stub entry found for FuncKey=%lu. No action taken.\\n\", (unsigned long)FuncKey);\n            fclose(log);\n        }\n    }\n}\n",
  "explanation": "The original code redeclared fopen, fprintf, and fclose locally which conflicted with the system declarations from <stdio.h>. I removed the conflicting forward declarations and used the standard FILE type and functions. I also included <stdio.h> and <string.h> so FILE and memcpy are properly declared. The original logic and behavior of UT_Stub_CopyToReturnValue were preserved."
}