{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without any bounds or null-termination checks. UT_Stub_RegisterReturnType stores the pointer ContentTypeStr = TypeName (no copy), so if the caller passes a non\u2011null\u2011terminated string, a pointer to a temporary/stack buffer that is later invalidated, or NULL, the subsequent strcmp can read past the valid object bounds (or dereference NULL). This can cause out\u2011of\u2011bounds accesses, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToReturnValue:\n```c\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL)\n    {\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToReturnValue code.\n",
  "test_code": "void UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Forward-declare minimal FILE API to avoid forcing includes here; these\n       declarations are compatible with the real stdio functions and will\n       link correctly when the standard library is available. */\n    struct FILE; extern struct FILE *fopen(const char *, const char *);\n    extern int fprintf(struct FILE *, const char *, ...);\n    extern int fclose(struct FILE *);\n\n    /* Open log file for append. This records control flow and state so other\n       agents can reproduce and gather evidence for potential violations. */\n    struct FILE *log = fopen(\"/tmp/logs/3189.txt\", \"a\");\n    if (log != (struct FILE *)0)\n    {\n        /* Log entry into the function and key parameters. Avoid dereferencing\n           BufferPtr here to prevent further undefined behavior if it is invalid. */\n        fprintf(log, \"UT_Stub_CopyToReturnValue called: FuncKey=%lu, BufferPtr=%p, BufferSize=%zu\\n\",\n                (unsigned long)FuncKey, BufferPtr, BufferSize);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (log != (struct FILE *)0)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        if (log != (struct FILE *)0)\n        {\n            /* Log buffer metadata but do not dereference pointers held in the\n               buffer (e.g. treat BasePtr as an opaque pointer). */\n            fprintf(log, \"StubPtr->Data.Buff.TotalSize=%zu, BasePtr=%p, Position=%zu\\n\",\n                    StubPtr->Data.Buff.TotalSize,\n                    StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.Position);\n        }\n\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            if (log != (struct FILE *)0)\n            {\n                fprintf(log, \"Size mismatch detected: expected=%zu, provided=%zu. Calling UtAssert_Abort.\\n\",\n                        StubPtr->Data.Buff.TotalSize, BufferSize);\n                fclose(log);\n            }\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            if (log != (struct FILE *)0)\n            {\n                fprintf(log, \"Invoking memcpy to copy %zu bytes from %p to %p\\n\",\n                        BufferSize, BufferPtr, StubPtr->Data.Buff.BasePtr);\n            }\n\n            /* Preserve original behavior: copy the contents into the stub buffer */\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n\n            if (log != (struct FILE *)0)\n            {\n                fprintf(log, \"Memcpy completed. New Position=%zu\\n\", StubPtr->Data.Buff.Position);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        if (log != (struct FILE *)0)\n        {\n            fprintf(log, \"No stub entry found for FuncKey=%lu. No action taken.\\n\", (unsigned long)FuncKey);\n            fclose(log);\n        }\n    }\n}\n"
}