{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe while loop tests OS_SharedGlobalVars.GlobalState against OS_SHUTDOWN_MAGIC_NUMBER, but GlobalState is not shown as volatile/atomic and is not modified within the loop body. Because the expression can be treated as invariant by the compiler (leading to an unintended infinite loop), this violates MISRA C 2023 Rule 14.3. The construct is not one of the permitted exceptions (it is not an intentionally infinite loop and not the allowed do-while case).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/775.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleOutput_Impl:\n```c\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    OS_BSP_Lock_Impl();\n\n    while (StartPos != EndPos)\n    {\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <time.h>\n\n/* Probe helper: ensure log directory exists and open the log file for appending. */\nstatic FILE *open_probe_log(void)\n{\n    /* Attempt to create the directory; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    return fopen(\"/tmp/logs/775.txt\", \"a\");\n}\n\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    /* Open probe log. Keep it open across the function; if NULL, skip logging. */\n    FILE *probe_log = open_probe_log();\n    if (probe_log != NULL)\n    {\n        time_t now = time(NULL);\n        fprintf(probe_log, \"\\n--- OS_ConsoleOutput_Impl ENTRY (time=%ld) token=%p ---\\n\", (long)now, (const void *)token);\n        fflush(probe_log);\n    }\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"Initial state: ReadPos=%zu WritePos=%zu BufSize=%zu\\n\",\n                StartPos, EndPos, console->BufSize);\n        fprintf(probe_log, \"(Detailed fields) BufBase=%p\\n\", (void *)console->BufBase);\n        fflush(probe_log);\n    }\n\n    OS_BSP_Lock_Impl();\n\n    /* Track iterations to help detect invariance / infinite-loop behavior. */\n    unsigned long iter_count = 0UL;\n\n    while (StartPos != EndPos)\n    {\n        ++iter_count;\n        if (probe_log != NULL)\n        {\n            fprintf(probe_log, \"iter=%lu BEFORE: StartPos=%zu EndPos=%zu\\n\", iter_count, StartPos, EndPos);\n            fflush(probe_log);\n        }\n\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n            if (probe_log != NULL)\n            {\n                fprintf(probe_log, \"  branch: wrap, WriteSize=BufSize-StartPos=%zu\\n\", WriteSize);\n                fflush(probe_log);\n            }\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n            if (probe_log != NULL)\n            {\n                fprintf(probe_log, \"  branch: linear, WriteSize=EndPos-StartPos=%zu\\n\", WriteSize);\n                fflush(probe_log);\n            }\n        }\n\n        /* Log the exact buffer region that will be written (pointer + size). */\n        if (probe_log != NULL)\n        {\n            fprintf(probe_log, \"  OS_BSP_ConsoleOutput_Impl called with ptr=%p size=%zu\\n\",\n                    (void *)&console->BufBase[StartPos], WriteSize);\n            fflush(probe_log);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n            if (probe_log != NULL)\n            {\n                fprintf(probe_log, \"  wrapped: new StartPos=%zu\\n\", StartPos);\n                fflush(probe_log);\n            }\n        }\n\n        if (probe_log != NULL)\n        {\n            fprintf(probe_log, \"iter=%lu AFTER: StartPos=%zu EndPos=%zu\\n\", iter_count, StartPos, EndPos);\n            /* If the loop runs many iterations, periodically flush to ensure logs are persisted. */\n            if ((iter_count & 0xFFu) == 0u)\n            {\n                fflush(probe_log);\n            }\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"EXIT: final ReadPos=%zu WritePos=%zu iterations=%lu\\n\",\n                StartPos, EndPos, iter_count);\n        fprintf(probe_log, \"--- OS_ConsoleOutput_Impl END ---\\n\");\n        fflush(probe_log);\n        fclose(probe_log);\n    }\n}\n"
}