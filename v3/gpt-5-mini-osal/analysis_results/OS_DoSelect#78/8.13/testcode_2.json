{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_FdSet_ConvertOut_Impl takes its first parameter as fd_set *OS_set but only reads from it (uses FD_ISSET) and does not modify the pointed-to object. Therefore this parameter could and should be declared as const fd_set *OS_set. The call OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet); thus exercises a function whose pointer parameter is not const-qualified even though it could be, which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DoSelect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DoSelect as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DoSelect:\n```c\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DoSelect code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <sys/types.h>\n#include <sys/select.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <unistd.h>\n\n/* Probe / logging helper for OS_DoSelect\n * Writes logs to /tmp/logs/783.txt describing control-flow and fd_set state.\n * The original logic of OS_DoSelect is preserved; this helper only reads state\n * and writes it to a file for post-mortem inspection.\n */\nstatic void OS_DoSelect_Log_State(const char *stage, int maxfd, fd_set *rd_set, fd_set *wr_set, int32_t msecs, struct timeval *tvptr, int os_status, const struct timespec *ts_now, const struct timespec *ts_end)\n{\n    FILE *f = NULL;\n    /* Ensure log directory exists if possible; ignore errors (e.g., if already exists) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/783.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Can't log; don't affect program flow */\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"====================\\n\");\n    fprintf(f, \"timestamp: %ld stage: %s\\n\", (long)now, stage);\n    fprintf(f, \"maxfd=%d msecs=%d os_status=%d tvptr=%p\\n\", maxfd, (int)msecs, os_status, (void *)tvptr);\n\n    if (tvptr != NULL)\n    {\n        fprintf(f, \"  tv.tv_sec=%ld tv.tv_usec=%ld\\n\", (long)tvptr->tv_sec, (long)tvptr->tv_usec);\n    }\n\n    if (ts_now != NULL)\n    {\n        fprintf(f, \"  ts_now: sec=%ld nsec=%ld\\n\", (long)ts_now->tv_sec, (long)ts_now->tv_nsec);\n    }\n    if (ts_end != NULL)\n    {\n        fprintf(f, \"  ts_end: sec=%ld nsec=%ld\\n\", (long)ts_end->tv_sec, (long)ts_end->tv_nsec);\n    }\n\n    /* Log which fds are set in rd_set and wr_set up to maxfd. We only read fd_sets here. */\n    if (rd_set != NULL)\n    {\n        fprintf(f, \"  rd_set: \");\n        for (int fd = 0; fd <= maxfd; ++fd)\n        {\n            if (FD_ISSET(fd, rd_set))\n            {\n                fprintf(f, \"%d,\", fd);\n            }\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    if (wr_set != NULL)\n    {\n        fprintf(f, \"  wr_set: \");\n        for (int fd = 0; fd <= maxfd; ++fd)\n        {\n            if (FD_ISSET(fd, wr_set))\n            {\n                fprintf(f, \"%d,\", fd);\n            }\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"====================\\n\");\n    fclose(f);\n}\n\n/* Keep the original function signature and logic; add logging probes at key points. */\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    /* Log entry with the incoming parameters */\n    OS_DoSelect_Log_State(\"ENTRY\", maxfd, rd_set, wr_set, msecs, NULL, -1, NULL, NULL);\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n\n        /* Log computed end time */\n        OS_DoSelect_Log_State(\"TS_END_COMPUTED\", maxfd, rd_set, wr_set, msecs, NULL, -1, &ts_now, &ts_end);\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n\n        /* Log that ts_end was zeroed */\n        OS_DoSelect_Log_State(\"TS_END_ZEROED\", maxfd, rd_set, wr_set, msecs, NULL, -1, NULL, &ts_end);\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n\n            /* Log blocking wait (tvptr == NULL) */\n            OS_DoSelect_Log_State(\"BEFORE_SELECT_BLOCKING\", maxfd, rd_set, wr_set, msecs, tvptr, -1, NULL, &ts_end);\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n\n            /* Log immediate timeout select (tv == 0) */\n            OS_DoSelect_Log_State(\"BEFORE_SELECT_ZERO_TIMEOUT\", maxfd, rd_set, wr_set, msecs, tvptr, -1, NULL, &ts_end);\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n\n                /* Log that the timeout has already expired */\n                OS_DoSelect_Log_State(\"TIMEOUT_EXPIRED_PRE_SELECT\", maxfd, rd_set, wr_set, msecs, tvptr, os_status, &ts_now, &ts_end);\n\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n\n            /* Log computed tv before select */\n            OS_DoSelect_Log_State(\"BEFORE_SELECT_TIMED\", maxfd, rd_set, wr_set, msecs, tvptr, -1, &ts_now, &ts_end);\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n\n        /* Log result of select and the sets as observed after select */\n        OS_DoSelect_Log_State(\"AFTER_SELECT\", maxfd, rd_set, wr_set, msecs, tvptr, os_status, NULL, NULL);\n\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n\n        /* Log error case */\n        OS_DoSelect_Log_State(\"RETURN_ERROR\", maxfd, rd_set, wr_set, msecs, NULL, os_status, NULL, NULL);\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n\n        /* Log timeout case */\n        OS_DoSelect_Log_State(\"RETURN_TIMEOUT\", maxfd, rd_set, wr_set, msecs, NULL, os_status, NULL, NULL);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n\n        /* Log success case */\n        OS_DoSelect_Log_State(\"RETURN_SUCCESS\", maxfd, rd_set, wr_set, msecs, NULL, os_status, NULL, NULL);\n    }\n\n    return return_code;\n}\n"
}