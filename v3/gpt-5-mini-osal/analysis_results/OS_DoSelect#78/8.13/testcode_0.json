{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_FdSet_ConvertOut_Impl is declared as void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set) but its implementation only reads from OS_set (uses FD_ISSET) and does not modify it. Therefore the parameter should be declared as const fd_set *OS_set. The call OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet); thus invokes a function parameter that could have been const-qualified, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DoSelect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DoSelect as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DoSelect:\n```c\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DoSelect code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n#include <errno.h>\n#include <sys/select.h>\n#include <sys/time.h>\n#include <stdint.h>\n\n/* Probe helpers to capture control flow and state information for debugging.\n * These functions append logs to \"/tmp/logs/783.txt\" and intentionally use\n * const where appropriate so as not to introduce additional MISRA violations.\n */\n\nstatic FILE *probe_open_log(void)\n{\n    FILE *f = fopen(\"/tmp/logs/783.txt\", \"a\");\n    return f;\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = probe_open_log();\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_dump_fdset(const char *name, const fd_set *set)\n{\n    FILE *f = probe_open_log();\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: ptr=%p\", name, (const void *)set);\n    if (set == NULL)\n    {\n        fprintf(f, \" (NULL)\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Print the list of fds that are set. */\n    fprintf(f, \" [\");\n    for (int i = 0; i < FD_SETSIZE; ++i)\n    {\n        if (FD_ISSET(i, set))\n        {\n            fprintf(f, \"%d,\", i);\n        }\n    }\n    fprintf(f, \"]\\n\");\n    fclose(f);\n}\n\nstatic void probe_dump_tv(const char *name, const struct timeval *tv)\n{\n    FILE *f = probe_open_log();\n    if (f == NULL)\n    {\n        return;\n    }\n    if (tv == NULL)\n    {\n        fprintf(f, \"%s: (NULL)\\n\", name);\n    }\n    else\n    {\n        fprintf(f, \"%s: tv_sec=%ld, tv_usec=%ld\\n\", name, (long)tv->tv_sec, (long)tv->tv_usec);\n    }\n    fclose(f);\n}\n\n\nstatic int32_t OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32_t msecs)\n{\n    int             os_status;\n    int32_t         return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    /* Log entry and input parameters */\n    probe_log(\"OS_DoSelect ENTER: maxfd=%d, rd_set_ptr=%p, wr_set_ptr=%p, msecs=%d\", maxfd, (void *)rd_set, (void *)wr_set, msecs);\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        /* Log the computed timeout and fd_sets before calling select */\n        probe_dump_tv(\"select_timeout\", tvptr);\n        probe_dump_fdset(\"rd_set_before\", rd_set);\n        probe_dump_fdset(\"wr_set_before\", wr_set);\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n\n        /* Log result and errno to capture error conditions or interruptions */\n        probe_log(\"select returned: os_status=%d, errno=%d (%s)\", os_status, errno, strerror(errno));\n\n        /* Log fd_sets after select to observe modifications performed by select */\n        probe_dump_fdset(\"rd_set_after\", rd_set);\n        probe_dump_fdset(\"wr_set_after\", wr_set);\n\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = -1; /* OS_ERROR placeholder */\n        probe_log(\"OS_DoSelect: error path, return_code=%d\", return_code);\n    }\n    else if (os_status == 0)\n    {\n        return_code = -2; /* OS_ERROR_TIMEOUT placeholder */\n        probe_log(\"OS_DoSelect: timeout path, return_code=%d\", return_code);\n    }\n    else\n    {\n        return_code = 0; /* OS_SUCCESS placeholder */\n        probe_log(\"OS_DoSelect: success path, return_code=%d\", return_code);\n    }\n\n    probe_log(\"OS_DoSelect EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n"
}