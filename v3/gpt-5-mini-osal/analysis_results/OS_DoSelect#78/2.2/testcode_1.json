{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&ts_end, 0, sizeof(ts_end)) inside the else branch executes when msecs <= 0, but ts_end is only read later when msecs > 0 (used to compute the remaining timeout). For msecs == 0 the code uses tv with zeros, and for msecs < 0 tvptr is NULL, so ts_end is never used in those cases. Therefore the memset has no effect on program behaviour and can be removed \u2014 it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DoSelect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/782.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DoSelect as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DoSelect:\n```c\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DoSelect code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/select.h>\n#include <sys/time.h>\n#include <time.h>\n\n/* Probe logging helper: append-only to /tmp/logs/782.txt */\nstatic void OS_DoSelect_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/782.txt\", \"a\");\n    if (!f) return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputs(\"\\n\", f);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    OS_DoSelect_log(\"ENTER OS_DoSelect: maxfd=%d, rd_set=%p, wr_set=%p, msecs=%ld\", maxfd, (void*)rd_set, (void*)wr_set, (long)msecs);\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n\n        OS_DoSelect_log(\"msecs>0 branch: ts_now=(%ld,%ld), ts_end=(%ld,%ld)\", (long)ts_now.tv_sec, (long)ts_now.tv_nsec, (long)ts_end.tv_sec, (long)ts_end.tv_nsec);\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n        OS_DoSelect_log(\"msecs<=0 branch: performed memset(&ts_end,0,%zu)\", sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n            OS_DoSelect_log(\"loop: msecs<0 -> tvptr=NULL\");\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n            OS_DoSelect_log(\"loop: msecs==0 -> tvptr=&tv, tv=(%ld,%ld)\", (long)tv.tv_sec, (long)tv.tv_usec);\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            OS_DoSelect_log(\"loop: msecs>0 computing tv: ts_now=(%ld,%ld), ts_end=(%ld,%ld), tv=(%ld,%ld)\",\n                            (long)ts_now.tv_sec, (long)ts_now.tv_nsec,\n                            (long)ts_end.tv_sec, (long)ts_end.tv_nsec,\n                            (long)tv.tv_sec, (long)tv.tv_usec);\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                OS_DoSelect_log(\"loop: computed tv negative -> immediate timeout (os_status=0)\");\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n                OS_DoSelect_log(\"loop: adjusted tv for negative usec -> tv=(%ld,%ld)\", (long)tv.tv_sec, (long)tv.tv_usec);\n            }\n        }\n\n        OS_DoSelect_log(\"about to call select: maxfd=%d, tvptr=%p%s\", maxfd, (void*)tvptr, (tvptr==&tv)?\" (tv provided)\":\" (no timeout)\");\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n        OS_DoSelect_log(\"select returned: os_status=%d, errno=%d\", os_status, errno);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n        OS_DoSelect_log(\"exit: os_status<0 -> return OS_ERROR\");\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n        OS_DoSelect_log(\"exit: os_status==0 -> return OS_ERROR_TIMEOUT\");\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        OS_DoSelect_log(\"exit: os_status>0 -> return OS_SUCCESS\");\n    }\n\n    OS_DoSelect_log(\"LEAVE OS_DoSelect: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}