{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TaskDetach_Impl:\n```c\nint32 OS_TaskDetach_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n    int                             ret;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    ret = pthread_detach(impl->id);\n\n    if (ret != 0)\n    {\n        OS_DEBUG(\"pthread_detach: Failed on Task ID = %lu, err = %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(ret));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskDetach_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_t id;\n} OS_impl_task_internal_record_t\n...\nOS_impl_task_internal_record_t OS_impl_task_table[OS_MAX_TASKS]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n...\nstatic inline unsigned long OS_ObjectIdToInteger(osal_id_t object_id)\n{\n#ifdef OSAL_OMIT_DEPRECATED\n    return object_id.v;\n#else\n    return object_id;\n#endif\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nimpl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "Yes. The code takes the address of a table element and assigns it to a non-const pointer (impl is declared as OS_impl_task_internal_record_t *impl) even though the function only reads from the record. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when modification is not required. In this fragment impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token); the pointer could and should be declared as const OS_impl_task_internal_record_t *impl (and OS_OBJECT_TABLE_GET / OS_ObjectIndexFromToken should accept/propagate a pointer-to-const), otherwise the code violates R8.13. If OS_ObjectIndexFromToken lacks a const parameter, taking &(*token) would also discard the const qualifier and create an additional const-qualification violation."
}