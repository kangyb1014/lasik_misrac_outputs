{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'task' is declared as a modifiable pointer (OS_task_internal_record_t *task) but is only used for read access (task->entry_function_pointer). Therefore it should be declared as a pointer to const (const OS_task_internal_record_t *task) or the OS_OBJECT_TABLE_GET accessor should return a pointer-to-const. As written, the code does not const-qualify the pointer even though it could, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskEntryPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2553.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskEntryPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskEntryPoint:\n```c\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n\n    if (OS_TaskPrepare(task_id, &task_entry) == OS_SUCCESS)\n    {\n        if (task_entry != NULL)\n        {\n            (*task_entry)();\n        }\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskExit();\n}\n```\n</target_code>\nPlease provide the modified OS_TaskEntryPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe/log helper for OS_TaskEntryPoint. Appends human-readable traces\n * to /tmp/logs/2553.txt so other agents can reproduce/control-flow evidence.\n * Uses only standard C library calls and preserves the original logic.\n */\nstatic void OS_TaskEntryPoint_Log(const char *tag, osal_id_t task_id, osal_task_entry task_entry, int prepare_result)\n{\n    FILE *fp = fopen(\"/tmp/logs/2553.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log: tag, task id, whether prepare succeeded, and whether task_entry is NULL */\n        (void)fprintf(fp, \"%s: task_id=%lu prepare_result=%d task_entry_is_null=%d\\n\",\n                      tag,\n                      (unsigned long)task_id,\n                      prepare_result,\n                      (task_entry == NULL) ? 1 : 0);\n        (void)fclose(fp);\n    }\n}\n\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n    int prepare_result;\n\n    /* Log entry into the task entry point */\n    OS_TaskEntryPoint_Log(\"ENTRY\", task_id, NULL, -1);\n\n    /* Preserve original behavior while capturing the prepare result */\n    prepare_result = (int)OS_TaskPrepare(task_id, &task_entry);\n    if (prepare_result == OS_SUCCESS)\n    {\n        /* Log successful prepare and whether the returned function pointer is NULL */\n        OS_TaskEntryPoint_Log(\"AFTER_PREPARE\", task_id, task_entry, prepare_result);\n\n        if (task_entry != NULL)\n        {\n            /* Log right before invoking the task function pointer */\n            OS_TaskEntryPoint_Log(\"BEFORE_INVOKE\", task_id, task_entry, prepare_result);\n\n            /* Invoke the task entry function as in the original code */\n            (*task_entry)();\n\n            /* Log immediately after invocation (useful if the function returns) */\n            OS_TaskEntryPoint_Log(\"AFTER_INVOKE\", task_id, task_entry, prepare_result);\n        }\n    }\n    else\n    {\n        /* Log failure of OS_TaskPrepare with the returned status */\n        OS_TaskEntryPoint_Log(\"PREPARE_FAILED\", task_id, NULL, prepare_result);\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskEntryPoint_Log(\"BEFORE_EXIT\", task_id, NULL, prepare_result);\n    OS_TaskExit();\n\n    /* If OS_TaskExit ever returns, log that fact as well */\n    OS_TaskEntryPoint_Log(\"AFTER_EXIT\", task_id, NULL, prepare_result);\n}\n"
}