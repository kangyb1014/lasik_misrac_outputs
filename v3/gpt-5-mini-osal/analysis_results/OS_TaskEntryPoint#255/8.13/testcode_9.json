{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is only used to read members (e.g. task->entry_function_pointer) and is never used to modify the object. Therefore it should be declared as a pointer to const: 'const OS_task_internal_record_t *task;'. As written ('OS_task_internal_record_t *task;') it fails MISRA C 2023 Rule 8.13. (If elsewhere in the function/task the object is modified via this pointer, const would not be appropriate.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskEntryPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2553.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskEntryPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskEntryPoint:\n```c\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n\n    if (OS_TaskPrepare(task_id, &task_entry) == OS_SUCCESS)\n    {\n        if (task_entry != NULL)\n        {\n            (*task_entry)();\n        }\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskExit();\n}\n```\n</target_code>\nPlease provide the modified OS_TaskEntryPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append log messages to /tmp/logs/2553.txt */\nstatic void OS_TaskEntryPoint_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2553.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging, do not interfere with original logic */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n\n    /* Log entry and task id */\n    OS_TaskEntryPoint_Log(\"OS_TaskEntryPoint: entered, task_id=%d\", (int)task_id);\n\n    /* Record result of preparation and the function pointer returned */\n    int prepare_rc = OS_TaskPrepare(task_id, &task_entry);\n    OS_TaskEntryPoint_Log(\"OS_TaskPrepare returned %d, task_entry=%p\", prepare_rc, (void *)task_entry);\n\n    if (prepare_rc == OS_SUCCESS)\n    {\n        if (task_entry != NULL)\n        {\n            OS_TaskEntryPoint_Log(\"Invoking task_entry at %p\", (void *)task_entry);\n\n            /* Call the task entry as in the original code */\n            (*task_entry)();\n\n            OS_TaskEntryPoint_Log(\"Returned from task_entry at %p\", (void *)task_entry);\n        }\n        else\n        {\n            OS_TaskEntryPoint_Log(\"task_entry is NULL, skipping invocation\");\n        }\n    }\n    else\n    {\n        OS_TaskEntryPoint_Log(\"OS_TaskPrepare failed with code %d\", prepare_rc);\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskEntryPoint_Log(\"Calling OS_TaskExit()\");\n    OS_TaskExit();\n\n    /* In case OS_TaskExit returns unexpectedly, log that fact */\n    OS_TaskEntryPoint_Log(\"OS_TaskExit returned unexpectedly\");\n}\n"
}