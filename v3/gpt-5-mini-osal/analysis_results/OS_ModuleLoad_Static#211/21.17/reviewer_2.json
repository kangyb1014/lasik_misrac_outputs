{
  "user_message": "An agent A claimed that the following OS_ModuleLoad_Static code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleLoad_Static.\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf ModuleName is NULL (or otherwise not a valid NUL-terminated string) while StaticSym->Module != NULL, the call strcmp(StaticSym->Module, ModuleName) will attempt to read through ModuleName and can access memory beyond the bounds (or dereference NULL). Thus the use of strcmp can result in out-of-bounds access. Another possible violation is if StaticSym->Module is non-NULL but does not point to a valid NUL-terminated string; strcmp may read beyond its buffer.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleLoad_Static:\ntypedef const struct\n{\n    const char *Name;\n    void (*Address)(void);\n    const char *Module;\n} OS_static_symbol_record_t\n...\n#define OS_STATIC_SYMTABLE_SOURCE OS_STATIC_SYMBOL_TABLE\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.17 requires that calls to <string.h> functions cannot result in accesses beyond the bounds of the objects referenced by their pointer parameters. strcmp requires both pointer arguments to be valid pointers to NUL-terminated character arrays. In the shown code only StaticSym->Module is tested for non-NULL; ModuleName is not validated. If ModuleName is NULL (or not a valid NUL-terminated string) the call strcmp(StaticSym->Module, ModuleName) may dereference a NULL pointer or read beyond the bounds of ModuleName, violating Rule 21.17. (Likewise, a non-NULL StaticSym->Module that is not NUL-terminated would also permit out-of-bounds reads.) If there is an external, provable contract that ModuleName is always a valid non-NULL NUL-terminated string, then the call would be safe; absent such a guarantee the code violates the rule."
}