{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_STATIC_SYMBOL_TABLE is a fixed-length array without a guaranteed sentinel element (an element whose Name == NULL) within the array bounds, the ++StaticSym increment can advance the pointer past the array end. A subsequent evaluation of StaticSym->Module followed by strcmp(StaticSym->Module, ModuleName) would then dereference memory beyond the bounds of the array or of the Module string pointer, causing an out-of-bounds access by the string function. Also, the loop condition while (StaticSym != NULL) does not prevent overrunning a non-sentinel array because incrementing an array pointer does not produce a NULL pointer, so the code relies on a sentinel. Thus, the fragment can lead to a Rule 21.17 violation when the sentinel is absent or not within bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2119.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    FILE *log = fopen(\"/tmp/logs/2119.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_ModuleLoad_Static ENTRY: ModuleName ptr=%p\", (void *)ModuleName);\n        if (ModuleName != NULL)\n        {\n            /* Print ModuleName as a string only when non-NULL to avoid additional faults */\n            fprintf(log, \" name=\\\"%s\\\"\\n\", ModuleName);\n        }\n        else\n        {\n            fprintf(log, \" name=(null)\\n\");\n        }\n        fflush(log);\n    }\n\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    int iter = 0;\n\n    while (StaticSym != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"iter=%d: StaticSym ptr=%p\\n\", iter, (void *)StaticSym);\n            fflush(log);\n        }\n\n        /* Probe the Name pointer value (this mirrors the original check) */\n        if (StaticSym->Name == NULL)\n        {\n            if (log)\n            {\n                fprintf(log, \"iter=%d: Name == NULL -> end of list (Name ptr=%p). Breaking.\\n\", iter, (void *)StaticSym->Name);\n                fflush(log);\n            }\n\n            /* end of list  */\n            break;\n        }\n\n        if (log)\n        {\n            /* Log Name pointer but do not dereference the string contents to avoid extra risk */\n            fprintf(log, \"iter=%d: Name ptr=%p\\n\", iter, (void *)StaticSym->Name);\n            fflush(log);\n        }\n\n        if (StaticSym->Module != NULL)\n        {\n            if (log)\n            {\n                /* Log Module pointer before strcmp (reading this pointer mirrors original code's access) */\n                fprintf(log, \"iter=%d: Module ptr=%p. About to strcmp(Module ptr=%p, ModuleName ptr=%p)\\n\",\n                        iter, (void *)StaticSym->Module, (void *)StaticSym->Module, (void *)ModuleName);\n                fflush(log);\n            }\n\n            if (strcmp(StaticSym->Module, ModuleName) == 0)\n            {\n                if (log)\n                {\n                    fprintf(log, \"iter=%d: strcmp == 0 -> found matching module name (Module ptr=%p)\\n\",\n                            iter, (void *)StaticSym->Module);\n                    fflush(log);\n                }\n\n                /* found matching module name */\n                return_code = OS_SUCCESS;\n                break;\n            }\n            else\n            {\n                if (log)\n                {\n                    fprintf(log, \"iter=%d: strcmp != 0 for Module ptr=%p\\n\", iter, (void *)StaticSym->Module);\n                    fflush(log);\n                }\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"iter=%d: Module == NULL\\n\", iter);\n                fflush(log);\n            }\n        }\n\n        ++StaticSym;\n        ++iter;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_ModuleLoad_Static EXIT: return_code=%d\\n\", return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}