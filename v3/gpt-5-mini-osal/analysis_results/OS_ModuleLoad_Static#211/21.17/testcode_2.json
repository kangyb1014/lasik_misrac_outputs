{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf ModuleName is NULL (or otherwise not a valid NUL-terminated string) while StaticSym->Module != NULL, the call strcmp(StaticSym->Module, ModuleName) will attempt to read through ModuleName and can access memory beyond the bounds (or dereference NULL). Thus the use of strcmp can result in out-of-bounds access. Another possible violation is if StaticSym->Module is non-NULL but does not point to a valid NUL-terminated string; strcmp may read beyond its buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2119.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/*\n * Probe logging helpers for reproducing potential out-of-bounds/NULL dereference\n * when strcmp is called. Logs to /tmp/logs/2119.txt. This preserves original\n * logic of OS_ModuleLoad_Static; logging avoids dereferencing ModuleName or\n * reading string contents to prevent introducing new violations.\n */\nstatic void OS_ModuleLoad_Static_log_state(int idx, const void *name_ptr, const void *module_ptr, const char *ModuleName, const char *note)\n{\n    FILE *fp = fopen(\"/tmp/logs/2119.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Log pointers and simple boolean states only. Do NOT dereference ModuleName. */\n    fprintf(fp, \"[OS_ModuleLoad_Static] idx=%d note=%s Name_ptr=%p Module_ptr=%p ModuleName_ptr=%p ModuleName_is_NULL=%d\\n\",\n            idx,\n            note ? note : \"(null)\",\n            name_ptr,\n            module_ptr,\n            (const void *)ModuleName,\n            (ModuleName == NULL));\n\n    fclose(fp);\n}\n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    int                        idx = 0;\n\n    while (StaticSym != NULL)\n    {\n        /* Log entry for this table element */\n        OS_ModuleLoad_Static_log_state(idx, (const void *)StaticSym->Name, (const void *)StaticSym->Module, ModuleName, \"enter_record\");\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            OS_ModuleLoad_Static_log_state(idx, (const void *)StaticSym->Name, (const void *)StaticSym->Module, ModuleName, \"end_of_list_break\");\n            break;\n        }\n\n        /* Preserve original short-circuit semantics: only attempt strcmp when StaticSym->Module != NULL */\n        if (StaticSym->Module != NULL)\n        {\n            /* Log just before strcmp. DO NOT access ModuleName contents here to avoid introducing new violations. */\n            OS_ModuleLoad_Static_log_state(idx, (const void *)StaticSym->Name, (const void *)StaticSym->Module, ModuleName, \"before_strcmp\");\n\n            if (strcmp(StaticSym->Module, ModuleName) == 0)\n            {\n                /* found matching module name */\n                OS_ModuleLoad_Static_log_state(idx, (const void *)StaticSym->Name, (const void *)StaticSym->Module, ModuleName, \"match_found\");\n                return_code = OS_SUCCESS;\n                break;\n            }\n            else\n            {\n                OS_ModuleLoad_Static_log_state(idx, (const void *)StaticSym->Name, (const void *)StaticSym->Module, ModuleName, \"strcmp_no_match\");\n            }\n        }\n        else\n        {\n            OS_ModuleLoad_Static_log_state(idx, (const void *)StaticSym->Name, (const void *)StaticSym->Module, ModuleName, \"module_ptr_null_skip_strcmp\");\n        }\n\n        ++StaticSym;\n        ++idx;\n    }\n\n    OS_ModuleLoad_Static_log_state(idx, NULL, NULL, ModuleName, \"function_exit\");\n    return return_code;\n}\n"
}