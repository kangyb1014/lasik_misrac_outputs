{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ModuleLoad_Static:\ntypedef const struct\n{\n    const char *Name;\n    void (*Address)(void);\n    const char *Module;\n} OS_static_symbol_record_t\n...\n#define OS_STATIC_SYMTABLE_SOURCE OS_STATIC_SYMBOL_TABLE\n...\ntypedef int32_t   int32\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERR_NAME_NOT_FOUND (-17)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No language extensions are present in the provided code fragment. Reasoning: \n- All identifiers and types used are standard C constructs. The typedef int32 maps to int32_t (standard fixed-width integer type); using a typedef name is not a compiler extension. \n- The struct declaration (typedef const struct { const char *Name; void (*Address)(void); const char *Module; } OS_static_symbol_record_t) uses only standard C features (const, function pointer member). \n- Pointer usage, pointer comparisons to NULL, array-like traversal via increment (++StaticSym), and use of strcmp are all standard C operations. \n- Macros (OS_STATIC_SYMTABLE_SOURCE, OS_STATIC_SYMBOL_TABLE, OS_SUCCESS, OS_ERR_NAME_NOT_FOUND) are preprocessor constructs and not compiler language extensions; their uses here are ordinary macro expansions. \n- No nonstandard keywords (e.g., __attribute__, __asm, __inline__), pragmas, inline assembly, variable-length arrays in a nonstandard way, designated initializers with compiler-specific syntax, or other documented compiler extensions appear in the code shown. \nGiven the provided code and related definitions, there are no fragments that require investigation under MISRA C 2023 Rule 1.2 (language extensions should not be used). If there are additional macros or external definitions (e.g., OS_STATIC_SYMBOL_TABLE) that rely on compiler-specific extensions, those definitions would need review; based solely on the supplied code and definitions, nothing suspicious is present."
}