{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nStaticSym->Name is being used as a read-only string (compared with strcmp to the parameter SymbolName which is declared const char *). If the member OS_static_symbol_record_t::Name is declared as a non-const char * (i.e. mutable pointer to char), this is a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible. The correct fix is to declare the static symbol name member as const char * (and propagate const where appropriate).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Helper logging function that appends probe information to /tmp/logs/2123.txt\n * This function is intentionally small and re-entrant safe for simple use.\n */\nstatic void OS_ModuleSymbolLookup_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging cannot open file, silently continue to preserve original behavior */\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    fprintf(fp, \"\\n\");\n    va_end(args);\n\n    fclose(fp);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /* Log entry and input parameter state */\n    OS_ModuleSymbolLookup_Log(\n        \"ENTER: OS_ModuleSymbolLookup(module_id=%lu, symbol_address_ptr=%p, symbol_name=\\\"%s\\\")\",\n        (unsigned long)module_id,\n        (void *)symbol_address,\n        (symbol_name != NULL) ? symbol_name : \"(null)\");\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    OS_ModuleSymbolLookup_Log(\"PARAMS_OK: symbol_address_ptr=%p, symbol_name=\\\"%s\\\"\",\n                              (void *)symbol_address, symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleSymbolLookup_Log(\"OS_ObjectIdGetById() returned %d (module_id=%lu)\", (int)return_code, (unsigned long)module_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        /* Log record state if available */\n        if (record != NULL)\n        {\n            /* record->name_entry may be a pointer to the module name - print pointer and string if not NULL */\n            if (record->name_entry != NULL)\n            {\n                OS_ModuleSymbolLookup_Log(\"MODULE_RECORD: token=%p, record_ptr=%p, record->name_entry_ptr=%p, record->name_entry=\\\"%s\\\"\",\n                                          (void *)&token, (void *)record, (void *)record->name_entry, record->name_entry);\n            }\n            else\n            {\n                OS_ModuleSymbolLookup_Log(\"MODULE_RECORD: token=%p, record_ptr=%p, record->name_entry is NULL\",\n                                          (void *)&token, (void *)record);\n            }\n        }\n        else\n        {\n            OS_ModuleSymbolLookup_Log(\"MODULE_RECORD: token=%p -> record is NULL\",\n                                      (void *)&token);\n        }\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        OS_ModuleSymbolLookup_Log(\"OS_ModuleSymbolLookup_Impl() returned %d\", (int)return_code);\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            OS_ModuleSymbolLookup_Log(\"Attempting static symbol lookup for symbol=\\\"%s\\\" and module_name=\\\"%s\\\"\",\n                                      symbol_name, (record != NULL && record->name_entry != NULL) ? record->name_entry : \"(null)\");\n\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            OS_ModuleSymbolLookup_Log(\"OS_SymbolLookup_Static() returned %d, symbol_address_ptr=%p, resolved_address=0x%\" PRIxPTR,\n                                      (int)staticsym_status, (void *)symbol_address, (uintptr_t)((symbol_address != NULL) ? (uintptr_t)(*symbol_address) : (uintptr_t)0));\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                OS_ModuleSymbolLookup_Log(\"Static lookup successful, using static result (overwriting previous return code %d)\", (int)return_code);\n                return_code = staticsym_status;\n            }\n            else\n            {\n                OS_ModuleSymbolLookup_Log(\"Static lookup failed, keeping previous return code %d\", (int)return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ModuleSymbolLookup_Log(\"Released object token %p\", (void *)&token);\n    }\n    else\n    {\n        OS_ModuleSymbolLookup_Log(\"OS_ObjectIdGetById failed, will return %d\", (int)return_code);\n    }\n\n    OS_ModuleSymbolLookup_Log(\"EXIT: OS_ModuleSymbolLookup returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}