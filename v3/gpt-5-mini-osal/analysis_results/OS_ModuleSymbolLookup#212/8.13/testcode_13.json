{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ModuleSymbolLookup_Impl the local variable is declared as a mutable pointer: \"OS_impl_module_internal_record_t *impl;\" and then assigned from the object table via impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token); The code only reads impl->dl_handle (no modification of the pointed-to record). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. In this case impl can and should be declared as const OS_impl_module_internal_record_t *impl (or the table element type made const) to avoid the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/2123.txt */\nstatic void os_modsym_log_probe(const char *fmt, ...)\n{\n    const char *logdir = \"/tmp/logs\";\n    const char *logpath = \"/tmp/logs/2123.txt\";\n    FILE *f = fopen(logpath, \"a\");\n    if (f == NULL)\n    {\n        /* Try to create directory and reopen */\n        (void)mkdir(logdir, 0755);\n        f = fopen(logpath, \"a\");\n        if (f == NULL)\n        {\n            /* Give up silently if logging is not possible */\n            return;\n        }\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    (void)localtime_r(&t, &tm_buf);\n    char timebuf[64];\n    (void)strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n    fprintf(f, \"%s - \", timebuf);\n#else\n    fprintf(f, \"ts=%ld - \", (long)t);\n#endif\n\n    /* Print the user message */\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /* Log entry and incoming parameters */\n    os_modsym_log_probe(\"ENTER OS_ModuleSymbolLookup: module_id=%lu, symbol_address_ptr=%p, symbol_name_ptr=%p, symbol_name='%s'\",\n                        (unsigned long)module_id, (void *)symbol_address, (const void *)symbol_name,\n                        (symbol_name != NULL) ? symbol_name : \"(null)\");\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    os_modsym_log_probe(\"OS_ObjectIdGetById returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        os_modsym_log_probe(\"OS_OBJECT_TABLE_GET returned record_ptr=%p, record_name_entry=%p, record_name='%s'\",\n                            (void *)record,\n                            (void *)(record != NULL ? record->name_entry : NULL),\n                            (record != NULL && record->name_entry != NULL) ? record->name_entry : \"(null)\");\n\n        /* Call into the implementation - preserve original call and semantics */\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        os_modsym_log_probe(\"OS_ModuleSymbolLookup_Impl returned %ld, symbol_address_value=0x%llx\",\n                            (long)return_code,\n                            (unsigned long long)(symbol_address != NULL ? (unsigned long long)*symbol_address : 0ULL));\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n            os_modsym_log_probe(\"OS_SymbolLookup_Static returned %ld, symbol_address_value=0x%llx, record_name='%s'\",\n                                (long)staticsym_status,\n                                (unsigned long long)(symbol_address != NULL ? (unsigned long long)*symbol_address : 0ULL),\n                                (record != NULL && record->name_entry != NULL) ? record->name_entry : \"(null)\");\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                os_modsym_log_probe(\"Static lookup succeeded, overwriting return_code from %ld to %ld\", (long)return_code, (long)staticsym_status);\n                return_code = staticsym_status;\n            }\n            else\n            {\n                os_modsym_log_probe(\"Static lookup failed, keeping return_code=%ld\", (long)return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_modsym_log_probe(\"Released token at addr=%p\", (void *)&token);\n    }\n    else\n    {\n        os_modsym_log_probe(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    os_modsym_log_probe(\"EXIT OS_ModuleSymbolLookup: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}