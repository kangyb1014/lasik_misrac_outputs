{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer StaticSym is used only to read entries from a static symbol table (strcmp on Name and Module, reading Address) and should therefore be declared to point to a const-qualified type. Declaring it as OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; allows potential modification of the table through StaticSym and fails to express immutability. It should be: const OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; (or ensure OS_STATIC_SYMTABLE_SOURCE provides a const pointer).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n#include <stdint.h>\n\n/*\n * Probe helper - writes a single log line to /tmp/logs/2123.txt\n * Keeps formatting local to avoid depending on stdarg in the surrounding build.\n */\nstatic void OS_ModuleSymbolLookup_LogLine(const char *line)\n{\n    FILE *f = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"%ld: %s\\n\", (long)t, line);\n    fclose(f);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    char logbuf[512];\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    /* Log entry with basic parameters */\n    snprintf(logbuf, sizeof(logbuf), \"Enter OS_ModuleSymbolLookup: module_id=%llu, symbol_name='%s', symbol_address_ptr=%p\",\n             (unsigned long long)module_id, symbol_name ? symbol_name : \"(null)\", (void *)symbol_address);\n    OS_ModuleSymbolLookup_LogLine(logbuf);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    snprintf(logbuf, sizeof(logbuf), \"OS_ObjectIdGetById returned %ld for module_id=%llu\",\n             (long)return_code, (unsigned long long)module_id);\n    OS_ModuleSymbolLookup_LogLine(logbuf);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        /* Log resolved module name (if available) before calling implementation */\n        snprintf(logbuf, sizeof(logbuf), \"Resolved record for token: name_entry='%s'\", record ? record->name_entry : \"(null)\");\n        OS_ModuleSymbolLookup_LogLine(logbuf);\n\n        OS_ModuleSymbolLookup_LogLine(\"Calling OS_ModuleSymbolLookup_Impl\");\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        snprintf(logbuf, sizeof(logbuf), \"OS_ModuleSymbolLookup_Impl returned %ld\", (long)return_code);\n        OS_ModuleSymbolLookup_LogLine(logbuf);\n\n        if (symbol_address != NULL)\n        {\n            /* Log the symbol_address value (may be unchanged if lookup failed) */\n            snprintf(logbuf, sizeof(logbuf), \"Symbol address (after impl) ptr=%p value=0x%llx\",\n                     (void *)symbol_address, (unsigned long long)(*symbol_address));\n            OS_ModuleSymbolLookup_LogLine(logbuf);\n        }\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            snprintf(logbuf, sizeof(logbuf), \"OS_ModuleSymbolLookup_Impl failed, attempting OS_SymbolLookup_Static for symbol='%s' module='%s'\",\n                     symbol_name ? symbol_name : \"(null)\", record ? record->name_entry : \"(null)\");\n            OS_ModuleSymbolLookup_LogLine(logbuf);\n\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            snprintf(logbuf, sizeof(logbuf), \"OS_SymbolLookup_Static returned %ld\", (long)staticsym_status);\n            OS_ModuleSymbolLookup_LogLine(logbuf);\n\n            if (symbol_address != NULL)\n            {\n                snprintf(logbuf, sizeof(logbuf), \"Symbol address (after static lookup) ptr=%p value=0x%llx\",\n                         (void *)symbol_address, (unsigned long long)(*symbol_address));\n                OS_ModuleSymbolLookup_LogLine(logbuf);\n            }\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                snprintf(logbuf, sizeof(logbuf), \"Static lookup successful, overwriting return_code from %ld to %ld\",\n                         (long)return_code, (long)staticsym_status);\n                OS_ModuleSymbolLookup_LogLine(logbuf);\n\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ModuleSymbolLookup_LogLine(\"Released object token\");\n    }\n\n    snprintf(logbuf, sizeof(logbuf), \"Exit OS_ModuleSymbolLookup with return_code=%ld\", (long)return_code);\n    OS_ModuleSymbolLookup_LogLine(logbuf);\n\n    return return_code;\n}\n"
}