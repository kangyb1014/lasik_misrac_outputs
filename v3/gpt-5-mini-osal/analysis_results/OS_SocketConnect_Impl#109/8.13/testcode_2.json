{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but in this function it is only used for read-only access (e.g. if (impl->selectable), connect(impl->fd,...), getsockopt uses impl->fd). Since the object pointed-to is not modified here, the pointer should be const-qualified (const OS_impl_file_internal_record_t *impl). Therefore this usage violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketConnect_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketConnect_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketConnect_Impl:\n```c\nint32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    if (slen != Addr->ActualLength)\n    {\n        return_code = OS_ERR_BAD_ADDRESS;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        os_status   = connect(impl->fd, sa, slen);\n        if (os_status < 0)\n        {\n            if (errno != EINPROGRESS)\n            {\n                OS_DEBUG(\"connect: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /*\n                 * If the socket was created in nonblocking mode (O_NONBLOCK flag) then the connect\n                 * runs in the background and connect() returns EINPROGRESS.  In this case we still\n                 * want to provide the \"normal\" (blocking) semantics to the calling app, such that\n                 * when OS_SocketConnect() returns, the socket is ready for use.\n                 *\n                 * To provide consistent behavior to calling apps, this does a select() to wait\n                 * for the socket to become writable, meaning that the remote side is connected.\n                 *\n                 * An important point here is that the calling app can control the timeout.  If the\n                 * normal/blocking connect() was used, the OS/IP stack controls the timeout, and it\n                 * can be quite long.\n                 */\n                operation = OS_STREAM_STATE_WRITABLE;\n                if (impl->selectable)\n                {\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        return_code = OS_ERROR_TIMEOUT;\n                    }\n                    else\n                    {\n                        /*\n                         * The SO_ERROR socket flag should also read back zero.\n                         * If not zero, something went wrong during connect\n                         */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            return_code = OS_ERROR;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketConnect_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n\n/*\n * Probe logger: append human-readable log lines to /tmp/logs/1093.txt\n * Kept as a simple helper so as not to modify the original function logic.\n */\nstatic void os_socketconnect_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1093.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tmbuf;\n        if (localtime_r(&t, &tmbuf) != NULL)\n        {\n            char timestr[32];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmbuf) > 0)\n            {\n                fprintf(fp, \"%s \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe: record the impl pointer and key fields used read-only in this routine */\n    if (impl != NULL)\n    {\n        /* Note: cast selectable to int to make it printable in a generic way */\n        os_socketconnect_probe(\"entered: impl=%p fd=%d selectable=%d\",\n                               (void *)impl, (int)impl->fd, (int)impl->selectable);\n    }\n    else\n    {\n        os_socketconnect_probe(\"entered: impl=NULL\");\n    }\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    os_socketconnect_probe(\"sa_family=%d\", (int)sa->sa_family);\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    os_socketconnect_probe(\"computed slen=%lu Addr->ActualLength=%lu\",\n                           (unsigned long)slen, (unsigned long)Addr->ActualLength);\n\n    if (slen != Addr->ActualLength)\n    {\n        os_socketconnect_probe(\"address length mismatch: returning OS_ERR_BAD_ADDRESS\");\n        return_code = OS_ERR_BAD_ADDRESS;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        os_socketconnect_probe(\"calling connect(fd=%d, slen=%lu)\", impl->fd, (unsigned long)slen);\n        os_status   = connect(impl->fd, sa, slen);\n        os_socketconnect_probe(\"connect returned os_status=%d errno=%d (%s)\", os_status, errno, strerror(errno));\n        if (os_status < 0)\n        {\n            if (errno != EINPROGRESS)\n            {\n                OS_DEBUG(\"connect: %s\\n\", strerror(errno));\n                os_socketconnect_probe(\"connect failed not EINPROGRESS: errno=%d (%s)\", errno, strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                os_socketconnect_probe(\"connect returned EINPROGRESS; entering non-blocking wait flow\");\n                /*\n                 * If the socket was created in nonblocking mode (O_NONBLOCK flag) then the connect\n                 * runs in the background and connect() returns EINPROGRESS.  In this case we still\n                 * want to provide the \"normal\" (blocking) semantics to the calling app, such that\n                 * when OS_SocketConnect() returns, the socket is ready for use.\n                 *\n                 * To provide consistent behavior to calling apps, this does a select() to wait\n                 * for the socket to become writable, meaning that the remote side is connected.\n                 *\n                 * An important point here is that the calling app can control the timeout.  If the\n                 * normal/blocking connect() was used, the OS/IP stack controls the timeout, and it\n                 * can be quite long.\n                 */\n                operation = OS_STREAM_STATE_WRITABLE;\n\n                os_socketconnect_probe(\"selectable field value: %d\", (int)impl->selectable);\n                if (impl->selectable)\n                {\n                    os_socketconnect_probe(\"calling OS_SelectSingle_Impl(token, &operation=%#x, timeout=%d)\", operation, (int)timeout);\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n                    os_socketconnect_probe(\"OS_SelectSingle_Impl returned %d operation_mask_after=%#x\", return_code, (unsigned int)operation);\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        os_socketconnect_probe(\"select returned but socket not writable -> timeout\");\n                        return_code = OS_ERROR_TIMEOUT;\n                    }\n                    else\n                    {\n                        /*\n                         * The SO_ERROR socket flag should also read back zero.\n                         * If not zero, something went wrong during connect\n                         */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_socketconnect_probe(\"calling getsockopt(fd=%d, SOL_SOCKET, SO_ERROR, &sockopt, &slen)\", impl->fd);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n                        os_socketconnect_probe(\"getsockopt returned os_status=%d sockopt=%d slen=%lu\", os_status, sockopt, (unsigned long)slen);\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            os_socketconnect_probe(\"connect post-check failed: os_status=%d sockopt=%d -> OS_ERROR\", os_status, sockopt);\n                            return_code = OS_ERROR;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    os_socketconnect_probe(\"exiting: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}