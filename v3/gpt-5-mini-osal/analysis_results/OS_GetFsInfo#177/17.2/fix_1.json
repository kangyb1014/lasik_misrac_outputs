{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic FILE *probe_file(void)\n{\n    static FILE *f = NULL;\n    if (f != NULL) return f;\n\n    /* Ensure directory exists (ignore errors) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1776.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* line buffered to increase chance logs are flushed on abnormal termination */\n        (void)setvbuf(f, NULL, _IOLBF, 0);\n    }\n    return f;\n}\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = probe_file();\n    if (f == NULL) return;\n\n    time_t t = time(NULL);\n    struct tm tmv;\n    (void)localtime_r(&t, &tmv);\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n\n    fprintf(f, \"%s - \", timestr);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n}\n\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    probe_log(\"OS_GetFsInfo: entry - filesys_info=%p\", (void *)filesys_info);\n\n    /* Check parameters */\n    probe_log(\"About to call OS_CHECK_POINTER(filesys_info)\");\n    OS_CHECK_POINTER(filesys_info);\n    probe_log(\"Returned from OS_CHECK_POINTER(filesys_info)\");\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n    probe_log(\"After memset: zeroed filesys_info (size=%zu)\", sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n    probe_log(\"Set MaxFds=%d MaxVolumes=%d\", (int)filesys_info->MaxFds, (int)filesys_info->MaxVolumes);\n\n    probe_log(\"Initializing iterator for OS_OBJECT_TYPE_OS_STREAM\");\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    probe_log(\"Iterator initialized for streams. Beginning iteration.\");\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        probe_log(\"Iterator stream: incremented FreeFds -> %d\", (int)filesys_info->FreeFds);\n    }\n    probe_log(\"Stream iteration complete. FreeFds=%d\", (int)filesys_info->FreeFds);\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"Destroyed stream iterator\");\n\n    probe_log(\"Initializing iterator for OS_OBJECT_TYPE_OS_FILESYS\");\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    probe_log(\"Iterator initialized for filesystems. Beginning iteration.\");\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        probe_log(\"Iterator filesystem: incremented FreeVolumes -> %d\", (int)filesys_info->FreeVolumes);\n    }\n    probe_log(\"Filesystem iteration complete. FreeVolumes=%d\", (int)filesys_info->FreeVolumes);\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"Destroyed filesystem iterator\");\n\n    probe_log(\"OS_GetFsInfo: exit - returning OS_SUCCESS (filesys_info=%p, MaxFds=%d, MaxVolumes=%d, FreeFds=%d, FreeVolumes=%d)\",\n              (void *)filesys_info,\n              (int)filesys_info->MaxFds,\n              (int)filesys_info->MaxVolumes,\n              (int)filesys_info->FreeFds,\n              (int)filesys_info->FreeVolumes);\n\n    return OS_SUCCESS;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpsoi1jysd/src/src/os/shared/src/osapi-filesys.c: In function 'probe_file':\n/tmp/tmpsoi1jysd/src/src/os/shared/src/osapi-filesys.c:663:32: error: '_IOLBF' undeclared (first use in this function)\n  663 |         (void)setvbuf(f, NULL, _IOLBF, 0);\n      |                                ^~~~~~\n/tmp/tmpsoi1jysd/src/src/os/shared/src/osapi-filesys.c:663:32: note: each undeclared identifier is reported only once for each function it appears in\n/tmp/tmpsoi1jysd/src/src/os/shared/src/osapi-filesys.c: In function 'probe_log':\n/tmp/tmpsoi1jysd/src/src/os/shared/src/osapi-filesys.c:673:15: error: storage size of 'tmv' isn't known\n  673 |     struct tm tmv;\n      |               ^~~\n/tmp/tmpsoi1jysd/src/src/os/shared/src/osapi-filesys.c:681:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  681 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/__/__/os/shared/src/osapi-filesys.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3663: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_GetFsInfo as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <sys/stat.h>\n\nstatic FILE *probe_file(void)\n{\n    static FILE *f = NULL;\n    if (f != NULL) return f;\n\n    /* Ensure directory exists (ignore errors) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1776.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* line buffered to increase chance logs are flushed on abnormal termination */\n        (void)setvbuf(f, NULL, _IOLBF, 0);\n    }\n    return f;\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = probe_file();\n    if (f == NULL) return;\n\n    time_t t = time(NULL);\n    struct tm tmv;\n    (void)localtime_r(&t, &tmv);\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n\n    fprintf(f, \"%s - \", timestr);\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the system va_list type in case the build system uses a different typedef */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n}\n\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    probe_log(\"OS_GetFsInfo: entry - filesys_info=%p\", (void *)filesys_info);\n\n    /* Check parameters */\n    probe_log(\"About to call OS_CHECK_POINTER(filesys_info)\");\n    OS_CHECK_POINTER(filesys_info);\n    probe_log(\"Returned from OS_CHECK_POINTER(filesys_info)\");\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n    probe_log(\"After memset: zeroed filesys_info (size=%zu)\", sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n    probe_log(\"Set MaxFds=%d MaxVolumes=%d\", (int)filesys_info->MaxFds, (int)filesys_info->MaxVolumes);\n\n    probe_log(\"Initializing iterator for OS_OBJECT_TYPE_OS_STREAM\");\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    probe_log(\"Iterator initialized for streams. Beginning iteration.\");\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        probe_log(\"Iterator stream: incremented FreeFds -> %d\", (int)filesys_info->FreeFds);\n    }\n    probe_log(\"Stream iteration complete. FreeFds=%d\", (int)filesys_info->FreeFds);\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"Destroyed stream iterator\");\n\n    probe_log(\"Initializing iterator for OS_OBJECT_TYPE_OS_FILESYS\");\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    probe_log(\"Iterator initialized for filesystems. Beginning iteration.\");\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        probe_log(\"Iterator filesystem: incremented FreeVolumes -> %d\", (int)filesys_info->FreeVolumes);\n    }\n    probe_log(\"Filesystem iteration complete. FreeVolumes=%d\", (int)filesys_info->FreeVolumes);\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"Destroyed filesystem iterator\");\n\n    probe_log(\"OS_GetFsInfo: exit - returning OS_SUCCESS (filesys_info=%p, MaxFds=%d, MaxVolumes=%d, FreeFds=%d, FreeVolumes=%d)\",\n              (void *)filesys_info,\n              (int)filesys_info->MaxFds,\n              (int)filesys_info->MaxVolumes,\n              (int)filesys_info->FreeFds,\n              (int)filesys_info->FreeVolumes);\n\n    return OS_SUCCESS;\n}\n",
  "explanation": "I added the necessary standard headers (<stdio.h>, <stdarg.h>, <time.h>, <string.h>, and <sys/stat.h>) so that _IOLBF, struct tm, localtime_r, strftime, va_list, and mkdir are defined. I also cast the va_list passed to vfprintf to (va_list) to ensure it matches the system's expected va_list type (this avoids the mismatch error when the build environment uses a different internal typedef for OCS_va_list). No logic in OS_GetFsInfo was changed."
}