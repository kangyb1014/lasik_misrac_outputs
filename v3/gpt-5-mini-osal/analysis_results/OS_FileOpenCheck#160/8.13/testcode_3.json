{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable is declared as a non-const pointer: \"OS_stream_internal_record_t *stream;\". In OS_FileOpenCheck the code only reads fields (e.g. socket_domain and stream_name) and never modifies the pointed-to object, so per MISRA C 2023 Rule 8.13 it should be declared as a pointer to const (i.e. \"const OS_stream_internal_record_t *stream;\") to indicate read-only access and prevent accidental modification. The OS_OBJECT_TABLE_GET macro returns a non-const pointer, but assigning that to a pointer-to-const is permitted, so changing the local declaration would be feasible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger that appends control-flow and state info to /tmp/logs/1603.txt */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    os_log_probe(\"OS_FileOpenCheck: enter Filename='%s'\", Filename ? Filename : \"(null)\");\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    os_log_probe(\"OS_FileOpenCheck: iterator initialized\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        os_log_probe(\"OS_FileOpenCheck: iter.token=%lu, stream=%p\", (unsigned long)iter.token, (void *)stream);\n\n        /* Log stream state before performing the original checks */\n        if (stream == NULL)\n        {\n            os_log_probe(\"OS_FileOpenCheck: stream is NULL for token=%lu\", (unsigned long)iter.token);\n            /* Preserve original behavior: continue iterating */\n            continue;\n        }\n\n        os_log_probe(\"OS_FileOpenCheck: socket_domain=%d, stream_name='%s'\",\n                     (int)stream->socket_domain,\n                     stream->stream_name ? stream->stream_name : \"(null)\");\n\n        int cmp = strcmp(stream->stream_name, Filename);\n        os_log_probe(\"OS_FileOpenCheck: strcmp(stream->stream_name, Filename)=%d\", cmp);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n        {\n            return_code = OS_SUCCESS;\n            os_log_probe(\"OS_FileOpenCheck: match found token=%lu, setting return_code=OS_SUCCESS\", (unsigned long)iter.token);\n            break;\n        }\n        else\n        {\n            os_log_probe(\"OS_FileOpenCheck: no match for token=%lu\", (unsigned long)iter.token);\n        }\n    }\n\n    os_log_probe(\"OS_FileOpenCheck: destroying iterator\");\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    os_log_probe(\"OS_FileOpenCheck: returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}