{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'stream' is declared as OS_stream_internal_record_t * but in this function it is only used for read-only access (strcmp on stream->stream_name and reading stream->socket_domain). According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible. The call OS_OBJECT_TABLE_GET returns a non-const pointer, but assigning that to a const OS_stream_internal_record_t * would be valid and appropriate. Example fix: declare 'stream' as 'const OS_stream_internal_record_t *stream;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append a single log entry describing the current stream and decision state. */\nstatic void OS_FileOpenCheck_LogProbe(const OS_stream_internal_record_t *stream,\n                                      unsigned long token,\n                                      const char *Filename,\n                                      int strcmp_result,\n                                      int check_socket_domain)\n{\n    FILE *fp = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not change original behavior. */\n        return;\n    }\n\n    fprintf(fp, \"OS_FileOpenCheck: token=%lu, stream_ptr=%p\", token, (const void *)stream);\n\n    if (stream != NULL)\n    {\n        /* Log readable fields only (this mirrors how the function uses them).\n           Cast socket_domain to int for safe printing. */\n        fprintf(fp, \", stream_name=\\\"%s\\\", socket_domain=%d\", stream->stream_name, (int)stream->socket_domain);\n    }\n    else\n    {\n        fprintf(fp, \", stream=NULL\");\n    }\n\n    fprintf(fp, \", Filename=\\\"%s\\\", strcmp_result=%d, socket_check=%d\\n\",\n            (Filename != NULL) ? Filename : \"(null)\", strcmp_result, check_socket_domain);\n\n    fclose(fp);\n}\n\nstatic void OS_FileOpenCheck_LogReturn(int32 return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n    fprintf(fp, \"OS_FileOpenCheck: returning %ld\\n\", (long)return_code);\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Acquire the table entry (original logic preserved) */\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* For logging, compute a safe strcmp_result only if stream is non-NULL and stream_name is available.\n           Do not change the original decision logic: the original code dereferences stream directly. */\n        int safe_strcmp = -1;\n        if (stream != NULL && stream->stream_name != NULL && Filename != NULL)\n        {\n            /* This strcmp is only for logging; the original conditional below still performs the real check. */\n            safe_strcmp = strcmp(stream->stream_name, Filename);\n        }\n\n        /* Log the probe: current token, pointer, name, domain, and the safe strcmp result. */\n        OS_FileOpenCheck_LogProbe((const OS_stream_internal_record_t *)stream, (unsigned long)iter.token, Filename, safe_strcmp,\n                                  (stream != NULL) ? (stream->socket_domain != OS_SocketDomain_INVALID) : 0);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log a match found before breaking out. */\n            FILE *fp = fopen(\"/tmp/logs/1603.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"OS_FileOpenCheck: match found token=%lu, stream_ptr=%p, name=\\\"%s\\\"\\n\",\n                        (unsigned long)iter.token, (const void *)stream, (stream != NULL) ? stream->stream_name : \"(null)\");\n                fclose(fp);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log the return code for evidence */\n    OS_FileOpenCheck_LogReturn(return_code);\n\n    return return_code;\n}\n"
}