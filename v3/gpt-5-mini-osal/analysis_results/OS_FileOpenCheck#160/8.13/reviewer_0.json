{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro expands to &tbl[OS_ObjectIndexFromToken(&(tok))], yielding a pointer to the element type of tbl without const qualification. In OS_FileOpenCheck this is used as: stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token); stream is non-const (OS_stream_internal_record_t *), but the function only reads fields (strcmp and socket_domain check). Therefore a pointer that only observes data should be const-qualified (e.g. const OS_stream_internal_record_t *stream). The macro thus facilitates obtaining a non-const pointer for read-only access and leads to a violation of MISRA C 2023 Rule 8.13 in this usage scenario.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_FileOpenCheck:\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n...\nOS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    OS_common_record_t * base;\n    OS_ObjectMatchFunc_t match;\n    void *               arg;\n    osal_index_t         limit;\n    OS_object_token_t    token;\n} OS_object_iter_t\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 recommends that pointers point to const-qualified types whenever possible. In OS_FileOpenCheck the local variable stream is only used to read fields (strcmp and a socket_domain check) and never used to modify the pointed-to object, so it can and should be declared as a pointer to const: const OS_stream_internal_record_t *stream. The macro OS_OBJECT_TABLE_GET yields an OS_stream_internal_record_t * (address of an element of a non-const array), but converting a pointer-to-non-const to pointer-to-const is allowed without a cast, so there is no technical obstacle to making stream const. Therefore the reported violation is correct (the current code does not follow the guidance of Rule 8.13)."
}