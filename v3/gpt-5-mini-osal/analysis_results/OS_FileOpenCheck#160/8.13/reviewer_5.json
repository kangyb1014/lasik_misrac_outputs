{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe struct member stream_name is declared as a mutable char array (char stream_name[OS_MAX_PATH_LEN]) but here it is only read (passed to strcmp). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible, so stream_name should be declared as const char stream_name[...] or otherwise exposed via a const char * if it is never modified. As written, using the non-const member in the comparison violates Rule 8.13 (unless elsewhere in the code the member is intentionally modified).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_FileOpenCheck:\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n...\nOS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    OS_common_record_t * base;\n    OS_ObjectMatchFunc_t match;\n    void *               arg;\n    osal_index_t         limit;\n    OS_object_token_t    token;\n} OS_object_iter_t\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 8.13 concerns pointer declarations: a pointer should point to a const-qualified type whenever the pointed-to object is not modified via that pointer. The agent's report blames the non-const declaration of the array member stream_name (char stream_name[\u2026]) and recommends making the member itself const. That is not the correct interpretation of 8.13. Arrays are objects, not pointer declarations; passing a char[] to strcmp (which expects const char *) is allowed by qualification conversion. The actual, relevant issue in this function is that the local variable stream is declared as OS_stream_internal_record_t *stream even though this function only reads the record. To satisfy 8.13 the pointer should be declared to point to a const-qualified type (const OS_stream_internal_record_t *stream) or individual accesses should use a const char * when only reading the name. Making the struct member stream_name itself const is unnecessary and likely undesirable (it would prevent any legitimate future modification or assignment of the struct). Also, if elsewhere in the program the stream record or its name are modified, then qualifying as const would be inappropriate; qualification should reflect the real mutability. In short: the agent\u2019s conclusion that there is a potential 8.13 concern is partly right (the pointer local could be const), but the specific claim that the fix is to declare the member stream_name as const is incorrect. Therefore the report as stated is not correct."
}