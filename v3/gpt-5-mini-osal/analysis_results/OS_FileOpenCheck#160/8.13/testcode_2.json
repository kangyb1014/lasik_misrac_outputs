{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nWhile the array declaration itself is not a pointer type, in context it leads to pointers to its elements that are not const-qualified. In OS_FileOpenCheck the local variable is declared as OS_stream_internal_record_t *stream and is only used for reading (strcmp on stream->stream_name). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible; here it should be declared as const OS_stream_internal_record_t *stream (and OS_OBJECT_TABLE_GET/OS_stream_table adjusted to return/hold const-qualified elements if the table is read-only).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Helper logging function: appends formatted logs to /tmp/logs/1603.txt */\nstatic void OS_FileOpenCheck_Log(const char *fmt, ...)\n{\n    va_list args;\n    FILE *fp = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging cannot be performed, do not alter behavior */\n    }\n\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry and input */\n    OS_FileOpenCheck_Log(\"OS_FileOpenCheck: enter. Filename='%s'\\n\", Filename ? Filename : \"(null)\");\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Log that iteration started */\n    OS_FileOpenCheck_Log(\"OS_FileOpenCheck: started iteration.\\n\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log the iterator token and the stream pointer returned */\n        OS_FileOpenCheck_Log(\"OS_FileOpenCheck: iter.token=%lu stream_ptr=%p\\n\",\n                             (unsigned long)iter.token, (void *)stream);\n\n        if (stream == NULL)\n        {\n            OS_FileOpenCheck_Log(\"OS_FileOpenCheck: stream is NULL for token=%lu\\n\", (unsigned long)iter.token);\n            continue;\n        }\n\n        /* Log stream basic state before comparison */\n        OS_FileOpenCheck_Log(\"OS_FileOpenCheck: stream_name='%s' socket_domain=%d\\n\",\n                             stream->stream_name ? stream->stream_name : \"(null)\",\n                             (int)stream->socket_domain);\n\n        /* Perform strcmp in a way that preserves original behavior but also logs the raw result */\n        int cmp_result = 1; /* default: not equal or cannot compare */\n        if (stream->stream_name != NULL && Filename != NULL)\n        {\n            cmp_result = strcmp(stream->stream_name, Filename);\n            OS_FileOpenCheck_Log(\"OS_FileOpenCheck: strcmp(stream->stream_name, Filename) = %d\\n\", cmp_result);\n        }\n        else\n        {\n            OS_FileOpenCheck_Log(\"OS_FileOpenCheck: cannot strcmp because one of the strings is NULL\\n\");\n        }\n\n        OS_FileOpenCheck_Log(\"OS_FileOpenCheck: socket_domain==OS_SocketDomain_INVALID? %d\\n\",\n                             (stream->socket_domain == OS_SocketDomain_INVALID) ? 1 : 0);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && cmp_result == 0)\n        {\n            OS_FileOpenCheck_Log(\"OS_FileOpenCheck: MATCH found for token=%lu (stream_ptr=%p)\\n\",\n                                 (unsigned long)iter.token, (void *)stream);\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_FileOpenCheck_Log(\"OS_FileOpenCheck: no match for token=%lu (cmp=%d, socket_domain=%d)\\n\",\n                                 (unsigned long)iter.token, cmp_result, (int)stream->socket_domain);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_Log(\"OS_FileOpenCheck: exiting. return_code=%d\\n\", return_code);\n\n    return return_code;\n}\n"
}