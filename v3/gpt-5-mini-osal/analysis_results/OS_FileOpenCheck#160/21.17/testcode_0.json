{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(stream->stream_name, Filename) can read bytes until it finds a NUL terminator. OS_CHECK_POINTER(Filename) only ensures Filename is non-NULL, not that it points to a NUL-terminated buffer or that the buffer sizes are sufficient. If stream->stream_name is a fixed-size array that is not NUL-terminated (for example it was filled completely without a terminator) or if Filename points to a non-terminated/malformed buffer (or an object shorter than the expected string), strcmp will read past the bounds of the referenced objects. Therefore this use can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1609.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *log = fopen(\"/tmp/logs/1609.txt\", \"a\");\n\n    /* Minimal entry log with pointer value only (do not dereference here) */\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck ENTER: Filename=%p\\n\", (void *)Filename);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log iterator and stream-level metadata without dereferencing string buffers */\n        if (log)\n        {\n            fprintf(log,\n                    \"iter.token=%u stream_ptr=%p socket_domain=%d stream_name_ptr=%p\\n\",\n                    (unsigned)iter.token,\n                    (void *)stream,\n                    (int)stream->socket_domain,\n                    (void *)stream->stream_name);\n            fflush(log);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log that strcmp was invoked and that it returned a match */\n            if (log)\n            {\n                fprintf(log,\n                        \"strcmp INVOKED: stream->stream_name=%p Filename=%p -> MATCH (token=%u)\\n\",\n                        (void *)stream->stream_name,\n                        (void *)Filename,\n                        (unsigned)iter.token);\n                fflush(log);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            /* If the socket_domain was invalid we already attempted (or would attempt) strcmp above.\n             * Log the non-match case when socket_domain was invalid, or that the socket_domain was valid.\n             */\n            if (log)\n            {\n                if (stream->socket_domain == OS_SocketDomain_INVALID)\n                {\n                    fprintf(log,\n                            \"strcmp INVOKED: stream->stream_name=%p Filename=%p -> NO MATCH (token=%u)\\n\",\n                            (void *)stream->stream_name,\n                            (void *)Filename,\n                            (unsigned)iter.token);\n                }\n                else\n                {\n                    fprintf(log, \"socket_domain != INVALID for token=%u; strcmp NOT invoked\\n\", (unsigned)iter.token);\n                }\n                fflush(log);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck EXIT: return_code=%d\\n\", return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}