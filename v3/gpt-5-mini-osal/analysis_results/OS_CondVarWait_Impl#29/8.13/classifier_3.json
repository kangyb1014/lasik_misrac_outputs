{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CondVarWait_Impl:\n```c\nint32 OS_CondVarWait_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n     * note that because pthread_cond_wait is a cancellation point, this needs to\n     * employ the same protection that is in the binsem module.  In the event that\n     * the thread is canceled inside pthread_cond_wait, the mutex will be re-acquired\n     * before the cancellation occurs, leaving the mutex in a locked state.\n     */\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_wait(&impl->cv, &impl->mut);\n    pthread_cleanup_pop(false);\n\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatus = pthread_cond_wait(&impl->cv, &impl->mut);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. pthread_cond_wait expects pointers to mutable pthread_cond_t and pthread_mutex_t because it modifies their state (and the mutex is locked/unlocked by the call), so const qualification is not appropriate here. A violation of Rule 8.13 would occur if a pointer to an object that is never modified were declared/passed as a non-const pointer when it could be declared as pointing to a const-qualified type (for example, passing &obj to a function whose parameter does not modify *obj but is declared as T * instead of const T *)."
}