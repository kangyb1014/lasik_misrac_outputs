{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload_Impl:\n```c\nint32 OS_ModuleUnload_Impl(const OS_object_token_t *token)\n{\n    int32                             status = OS_ERROR;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    /*\n    ** Attempt to close/unload the module\n    */\n    dlerror();\n    if (dlclose(impl->dl_handle) == 0)\n    {\n        impl->dl_handle = NULL;\n        status          = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error unloading shared library: %s\\n\", dlerror());\n    }\n\n    return status;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleUnload_Impl:\ntypedef struct\n{\n    /* cppcheck-suppress unusedStructMember */\n    void *dl_handle;\n} OS_impl_module_internal_record_t\n...\nextern OS_impl_module_internal_record_t OS_impl_module_table[OS_MAX_MODULES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The macro takes the address of its token argument (&(tok)). In OS_ModuleUnload_Impl the call is OS_OBJECT_TABLE_GET(..., *token) where token is declared const OS_object_token_t *; &( *token ) therefore yields a pointer to a const OS_object_token_t. If the downstream helper OS_ObjectIndexFromToken (or any caller of the address produced by the macro) is declared to take a non-const OS_object_token_t * (i.e. discards the const qualifier), this discards const qualification and causes a pointer to a non-const type to be used where a const-qualified pointer should be used. That scenario violates MISRA C 2023 Rule 8.13. A correct remedy would be to ensure OS_ObjectIndexFromToken (and the macro usage) accept a pointer-to-const (const OS_object_token_t *) or to change the macro to take a pointer argument instead of taking the address of a possibly-const value."
}