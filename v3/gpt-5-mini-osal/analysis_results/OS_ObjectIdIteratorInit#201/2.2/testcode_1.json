{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextFree, when max_id == 0 the branch sets serial = 0 but the following for-loop (for (i = 0; i < max_id; ++i)) does not execute and serial is never used afterward. Thus the assignment serial = 0 is executed but has no effect on program behaviour (it would remain unused if removed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2012.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a log entry describing the iterator initialization. */\nstatic void OS_ObjectIdIteratorInit_Log(const void *matchfunc, void *matcharg, int32_t limit, const void *base, int objtype)\n{\n    FILE *f = fopen(\"/tmp/logs/2012.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the key state values that reproduce the violation scenario:\n         * - objtype: the object type being iterated\n         * - matchfunc/matcharg: the match predicate and its argument\n         * - limit: the maximum id for this object type (the reported \"max_id\")\n         * - base: pointer to the base of the object table for this type\n         */\n        fprintf(f, \"OS_ObjectIdIteratorInit: objtype=%d matchfunc=%p matcharg=%p limit=%d base=%p\\n\",\n                objtype, matchfunc, matcharg, (int)limit, base);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    /* Probe: record the computed limit (max_id) and other state to help reproduce\n     * the scenario where limit == 0 causes downstream dead assignment to be unused.\n     */\n    OS_ObjectIdIteratorInit_Log((const void *)matchfunc, matcharg, (int32_t)iter->limit, (const void *)iter->base, (int)objtype);\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}"
}