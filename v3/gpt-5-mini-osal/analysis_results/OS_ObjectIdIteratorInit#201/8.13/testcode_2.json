{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member iter->base is declared as OS_common_record_t * (non-const) but is initialized from &OS_common_table[...] and is only used for read-only operations (e.g. match functions take const OS_common_record_t *). Since the pointed-to objects are not modified via this iterator, the pointer could and should be const-qualified (const OS_common_record_t *). Therefore this assignment violates MISRA C 2023 Rule 8.13. Recommendation: change OS_object_iter_t.base to const OS_common_record_t * and update any uses accordingly.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2013.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    unsigned int base_index;\n    int32 ret;\n\n    /* Preserve original assignments */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n\n    /* Compute base index once so it can be logged without calling the helper twice */\n    base_index = (unsigned int)OS_GetBaseForObjectType(objtype);\n    iter->base  = &OS_common_table[base_index];\n\n    /* Probe logging: record control flow and state to /tmp/logs/2013.txt */\n    {\n        FILE *log = fopen(\"/tmp/logs/2013.txt\", \"a\");\n        if (log != NULL)\n        {\n            time_t now = time(NULL);\n\n            /* Timestamp and basic iterator state. Do not dereference iter->base (read-only scenario) */\n            fprintf(log, \"[%ld] OS_ObjectIdIteratorInit called\\n\", (long)now);\n            fprintf(log, \"  objtype=%u\\n\", (unsigned)objtype);\n            fprintf(log, \"  limit=%ld\\n\", (long)iter->limit);\n\n            /* Print the index used to form base and the pointer value (as const void*) to avoid pointer-to-non-const casts */\n            fprintf(log, \"  base_index=%u\\n\", base_index);\n            fprintf(log, \"  base_ptr=%p\\n\", (const void *)iter->base);\n\n            /* Indicate whether a match function was provided; avoid casting function pointer to void* */\n            fprintf(log, \"  matchfunc_provided=%s\\n\", (iter->match != NULL) ? \"yes\" : \"no\");\n\n            /* Log the match argument pointer value */\n            fprintf(log, \"  matcharg_ptr=%p\\n\", (const void *)iter->arg);\n\n            /* Log address of the iterator token for correlation */\n            fprintf(log, \"  iter_token_addr=%p\\n\", (const void *)&iter->token);\n\n            fclose(log);\n        }\n    }\n\n    /* Preserve original transaction initialization and return its result; log the return for traceability */\n    ret = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2013.txt\", \"a\");\n        if (log != NULL)\n        {\n            time_t now = time(NULL);\n            fprintf(log, \"[%ld] OS_ObjectIdTransactionInit returned %ld\\n\", (long)now, (long)ret);\n            fprintf(log, \"----\\n\");\n            fclose(log);\n        }\n    }\n\n    return ret;\n}\n"
}