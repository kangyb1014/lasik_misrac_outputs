{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member OS_object_iter_t::base is declared as a non-const pointer (OS_common_record_t *base) but it is initialized from &OS_common_table[...] and only used for read-only operations (e.g. match callbacks take a const OS_common_record_t *obj). Therefore the pointer can and should be const-qualified (const OS_common_record_t *base) to prevent accidental modification through the iterator.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2013.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    FILE *log = fopen(\"/tmp/logs/2013.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_ObjectIdIteratorInit] ENTRY: matchfunc=%p, matcharg=%p, objtype=%u\\n\",\n                (void *)matchfunc, matcharg, (unsigned)objtype);\n    }\n\n    /* preserve original assignments */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n\n    /* capture the base index used to form the pointer and log it */\n    unsigned long base_index = (unsigned long)OS_GetBaseForObjectType(objtype);\n    iter->base  = &OS_common_table[base_index];\n\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_ObjectIdIteratorInit] after init: iter->limit=%llu, base_index=%lu, iter->base=%p\\n\",\n                (unsigned long long)iter->limit, base_index, (void *)iter->base);\n\n        /* record evidence that the base pointer originated from the common table address */\n        fprintf(log, \"[OS_ObjectIdIteratorInit] address of &OS_common_table[%lu] = %p\\n\",\n                base_index, (void *)&OS_common_table[base_index]);\n\n        /* Indicate whether match callback is present (read-only usage expected in scenario) */\n        fprintf(log, \"[OS_ObjectIdIteratorInit] matchfunc %s\\n\", (matchfunc != NULL) ? \"present\" : \"NULL\");\n    }\n\n    /* call the original transaction init and log its return value */\n    int32 rv = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_ObjectIdIteratorInit] OS_ObjectIdTransactionInit returned %d\\n\", (int)rv);\n        fclose(log);\n    }\n\n    return rv;\n}\n"
}