{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe global table OS_common_table is defined as a non-const array and its address is assigned to iter->base (which is declared as OS_common_record_t *). The iterator and the match callback treat the records as read-only (the match callback takes a const OS_common_record_t *), so the pointer stored in the iterator could and should be a pointer-to-const. In other words, iter->base = &OS_common_table[...] produces a non-const pointer to data that is used read-only; per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type. To fix: declare the table and the iterator member as const (e.g. static const OS_common_record_t OS_common_table[...] and const OS_common_record_t *base), or otherwise justify/modify uses that require mutation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2013.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append log entries about iterator initialization to the specified file.\n   Keeps original behavior intact; only observes state. */\nstatic void OS_ObjectIdIterator_LogPre(const void *iter_ptr, int objtype, int32_t limit, const void *base, const void *matchfunc, const void *matcharg)\n{\n    FILE *f = fopen(\"/tmp/logs/2013.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[PRE] OS_ObjectIdIteratorInit\\n\");\n    fprintf(f, \"  objtype=%d\\n\", objtype);\n    fprintf(f, \"  limit=%"
}