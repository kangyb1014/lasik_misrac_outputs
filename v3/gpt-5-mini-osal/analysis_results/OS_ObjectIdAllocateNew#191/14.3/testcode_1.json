{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses an invariant controlling expression: while (true). This is not an intended infinite-loop idiom because the loop relies on internal break/return conditions (token->obj_idx >= obj_count and a match) to terminate, so the controlling expression is invariant but not used solely to create an infinite loop. This violates MISRA C 2023 Rule 14.3. Replace with an explicit conditional loop (for example, iterate while token->obj_idx+1 < obj_count or use a for loop) so the controlling expression is not invariant.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1915.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helpers - write logs to /tmp/logs/1915.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1915.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_state(const char *stage, osal_objtype_t idtype, const char *name, OS_object_token_t *token, int32 return_code)\n{\n    /* Log basic state information available in this scope. Avoid dereferencing\n     * fields that might not exist; only dereference token->obj_id since the\n     * original function uses it. */\n    if (token != NULL)\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] %s: stage=%s, idtype=%d, name=%p(%s), token=%p, token->obj_id=%d, return_code=%d\",\n                  __func__, stage, (int)idtype, (const void *)name, (name != NULL ? name : \"(null)\"), (const void *)token, token->obj_id, (int)return_code);\n    }\n    else\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] %s: stage=%s, idtype=%d, name=%p(%s), token=NULL, return_code=%d\",\n                  __func__, stage, (int)idtype, (const void *)name, (name != NULL ? name : \"(null)\"), (int)return_code);\n    }\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    probe_log(\"[OS_ObjectIdAllocateNew] ENTER: idtype=%d, name=%p(%s), token=%p\", (int)idtype, (const void *)name, (name != NULL ? name : \"(null)\"), (const void *)token);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] Early return: GlobalState indicates shutdown (GlobalState=%d)\", OS_SharedGlobalVars.GlobalState);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    probe_state(\"After TransactionInit\", idtype, name, token, return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] TransactionInit failed: return_code=%d -> returning\", return_code);\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] Checking for existing name: %s\", name);\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n        probe_state(\"After FindNextMatch\", idtype, name, token, return_code);\n    }\n    else\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] No name provided -> set return_code=OS_ERR_NAME_NOT_FOUND\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        probe_state(\"Name NULL\", idtype, name, token, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] Name already exists -> set return_code=OS_ERR_NAME_TAKEN\");\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] Name not found -> find next free slot\");\n        return_code = OS_ObjectIdFindNextFree(token);\n        probe_state(\"After FindNextFree\", idtype, name, token, return_code);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] Allocation failed (return_code=%d) -> cancel transaction and return\", return_code);\n        OS_ObjectIdTransactionCancel(token);\n        probe_state(\"After TransactionCancel\", idtype, name, token, return_code);\n        return return_code;\n    }\n    else\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] Allocation succeeded -> notify event (obj_id=%d)\", token->obj_id);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        probe_state(\"After NotifyEvent\", idtype, name, token, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] Converting token to final ID representation (token=%p)\", (const void *)token);\n        return_code = OS_ObjectIdConvertToken(token);\n        probe_state(\"After ConvertToken\", idtype, name, token, return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"[OS_ObjectIdAllocateNew] Conversion or notify failed -> finalize/cleanup (return_code=%d)\", return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        probe_state(\"After FinalizeNew\", idtype, name, token, return_code);\n    }\n\n    probe_log(\"[OS_ObjectIdAllocateNew] EXIT: final return_code=%d\", return_code);\n    return return_code;\n}\n"
}