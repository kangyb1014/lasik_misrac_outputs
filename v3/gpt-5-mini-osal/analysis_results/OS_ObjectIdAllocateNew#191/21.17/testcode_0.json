{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes the caller-supplied pointer 'name' (only checked for NULL) into OS_ObjectIdFindNextMatch which invokes OS_ObjectNameMatch that calls strcmp((const char *)ref, obj->name_entry). There is no check that 'name' (ref) or obj->name_entry are null-terminated or that their allocated sizes are sufficient, so if a caller supplies a non-terminated char buffer (e.g. char s[4] = {'a','b','c'} without '\\0') or either string is truncated/not terminated, strcmp will read past the object bounds and cause an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1919.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log control flow and key state to /tmp/logs/1919.txt */\nstatic void OS_ObjectIdAllocateNew_LogProbe(const char *stage, osal_objtype_t idtype, const char *name, OS_object_token_t *token, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1919.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect original control flow */\n        return;\n    }\n\n    fprintf(f, \"[OS_ObjectIdAllocateNew] stage=%s\\n\", stage);\n    fprintf(f, \"  idtype=%d\\n\", (int)idtype);\n    fprintf(f, \"  name_ptr=%p\\n\", (const void *)name);\n    if (name != NULL)\n    {\n        fprintf(f, \"  name_is_non_null=1\\n\");\n        /* Do NOT attempt to read or print the contents of `name` to avoid\n         * introducing any potential out-of-bounds accesses. Only log the pointer. */\n    }\n    else\n    {\n        fprintf(f, \"  name_is_non_null=0\\n\");\n    }\n\n    fprintf(f, \"  token_ptr=%p\\n\", (void *)token);\n    if (token != NULL)\n    {\n        /* token->obj_id is referenced in the original function later; log it if available. */\n        /* Cast to long to avoid format mismatches if obj_id is an integral type. */\n        fprintf(f, \"  token->obj_id=%ld\\n\", (long)token->obj_id);\n    }\n\n    fprintf(f, \"  return_code=%d\\n\", (int)return_code);\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry */\n    OS_ObjectIdAllocateNew_LogProbe(\"entry\", idtype, name, token, 0);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_ObjectIdAllocateNew_LogProbe(\"shutdown_check_failed\", idtype, name, token, OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    OS_ObjectIdAllocateNew_LogProbe(\"after_transaction_init\", idtype, name, token, return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        OS_ObjectIdAllocateNew_LogProbe(\"before_find_next_match\", idtype, name, token, 0);\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n        OS_ObjectIdAllocateNew_LogProbe(\"after_find_next_match\", idtype, name, token, return_code);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        OS_ObjectIdAllocateNew_LogProbe(\"name_null_set_name_not_found\", idtype, name, token, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_LogProbe(\"name_already_taken\", idtype, name, token, OS_ERR_NAME_TAKEN);\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_LogProbe(\"finding_next_free\", idtype, name, token, 0);\n        return_code = OS_ObjectIdFindNextFree(token);\n        OS_ObjectIdAllocateNew_LogProbe(\"after_find_next_free\", idtype, name, token, return_code);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_LogProbe(\"allocation_failed_before_notify\", idtype, name, token, return_code);\n        OS_ObjectIdTransactionCancel(token);\n        OS_ObjectIdAllocateNew_LogProbe(\"transaction_cancelled\", idtype, name, token, return_code);\n        return return_code;\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_LogProbe(\"before_notify_event\", idtype, name, token, 0);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        OS_ObjectIdAllocateNew_LogProbe(\"after_notify_event\", idtype, name, token, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_LogProbe(\"before_convert_token\", idtype, name, token, 0);\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_ObjectIdAllocateNew_LogProbe(\"after_convert_token\", idtype, name, token, return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_LogProbe(\"finalize_new_on_error\", idtype, name, token, return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        OS_ObjectIdAllocateNew_LogProbe(\"after_finalize_new\", idtype, name, token, return_code);\n    }\n\n    OS_ObjectIdAllocateNew_LogProbe(\"exit\", idtype, name, token, return_code);\n    return return_code;\n}\n"
}