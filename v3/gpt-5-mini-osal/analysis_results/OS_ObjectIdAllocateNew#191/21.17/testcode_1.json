{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectNameMatch calls strcmp((const char *)ref, obj->name_entry) without any bounds checks or guarantees that both pointers reference NUL-terminated buffers. If obj->name_entry (or ref, if the function were ever called with a NULL/unterminated ref) is not NUL-terminated within its allocated storage (for example a fixed-size name buffer that happens not to contain a terminating '\\0'), strcmp will scan past the end of that buffer and perform out-of-bounds reads. This constitutes a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1919.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger for OS_ObjectIdAllocateNew - writes control flow and state info\n * to /tmp/logs/1919.txt. This logger intentionally does not dereference the\n * 'name' pointer or other pointers that might point into untrusted storage,\n * in order to avoid introducing additional out-of-bounds accesses. */\nstatic void OS_ObjectIdAllocateNew_Log(const char *note, osal_objtype_t idtype, const char *name, const OS_object_token_t *token, int32 rc)\n{\n    FILE *f = fopen(\"/tmp/logs/1919.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log a concise record: stage note, idtype, pointer values, and return code. */\n    fprintf(f, \"[OS_ObjectIdAllocateNew] %s | idtype=%d | name_ptr=%p | token_ptr=%p | rc=%d\\n\",\n            note, (int)idtype, (const void *)name, (const void *)token, (int)rc);\n    fclose(f);\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry and parameters (do not dereference 'name'). */\n    OS_ObjectIdAllocateNew_Log(\"entry\", idtype, name, token, 0);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_ObjectIdAllocateNew_Log(\"shutdown_state_detected\", idtype, name, token, OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    OS_ObjectIdAllocateNew_Log(\"after_transaction_init\", idtype, name, token, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log that we are about to search for a name match. Important: do NOT\n         * attempt to read or print the contents of 'name' (it may not be NUL-terminated).\n         * Only log the pointer value so an investigator can correlate the pointer\n         * value with memory state in a memory dump. */\n        OS_ObjectIdAllocateNew_Log(\"calling_find_next_match\", idtype, name, token, 0);\n\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n\n        OS_ObjectIdAllocateNew_Log(\"after_find_next_match\", idtype, name, token, return_code);\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_Log(\"name_is_null\", idtype, name, token, OS_ERR_NAME_NOT_FOUND);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"name_taken\", idtype, name, token, OS_ERR_NAME_TAKEN);\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_Log(\"finding_next_free\", idtype, name, token, 0);\n        return_code = OS_ObjectIdFindNextFree(token);\n        OS_ObjectIdAllocateNew_Log(\"after_find_next_free\", idtype, name, token, return_code);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"allocation_failed_cancelling\", idtype, name, token, return_code);\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_Log(\"resource_allocated_notify\", idtype, name, token, 0);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        OS_ObjectIdAllocateNew_Log(\"after_notify_event\", idtype, name, token, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"converting_token\", idtype, name, token, 0);\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_ObjectIdAllocateNew_Log(\"after_convert_token\", idtype, name, token, return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"finalize_new_failure\", idtype, name, token, return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        OS_ObjectIdAllocateNew_Log(\"after_finalize_new\", idtype, name, token, return_code);\n    }\n\n    OS_ObjectIdAllocateNew_Log(\"exit\", idtype, name, token, return_code);\n    return return_code;\n}\n"
}