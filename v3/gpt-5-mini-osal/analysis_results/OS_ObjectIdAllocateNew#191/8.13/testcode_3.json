{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdAllocateNew the const char *name parameter is cast to (void *) and passed as the 'arg' parameter to OS_ObjectIdFindNextMatch (and thence to MatchFunc). The match function OS_ObjectNameMatch treats this argument as a const char * (uses strcmp), but the prototypes use void * (non-const), so the const qualifier is discarded via the cast. This violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when possible (the MatchFunc/arg should use const void * / const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1913.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1913.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ProbeLog(\"OS_ObjectIdAllocateNew ENTER: idtype=%d, name=%p, token=%p\", (int)idtype, (const void *)name, (void *)token);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_ProbeLog(\"Shutdown state detected: GlobalState=0x%08X, returning OS_ERR_INCORRECT_OBJ_STATE\", (unsigned)OS_SharedGlobalVars.GlobalState);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    OS_ProbeLog(\"After OS_ObjectIdTransactionInit: return_code=%ld, token=%p\", (long)return_code, (void *)token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log that a const char * is about to be cast to void * as in the original code. */\n        void *arg = (void *)name; /* deliberate cast preserved from original code */\n        OS_ProbeLog(\"Name provided: name_ptr=%p, name_str=\\\"%s\\\"; casting const char * to void * -> arg=%p\", (const void *)name, name, arg);\n\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, arg, token);\n        OS_ProbeLog(\"After OS_ObjectIdFindNextMatch: return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OS_ProbeLog(\"No name provided (name==NULL): returning OS_ERR_NAME_NOT_FOUND from name-check branch\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ProbeLog(\"Name match found: setting return_code=OS_ERR_NAME_TAKEN\");\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        OS_ProbeLog(\"No name match found or previous error (%ld): calling OS_ObjectIdFindNextFree\", (long)return_code);\n        return_code = OS_ObjectIdFindNextFree(token);\n        OS_ProbeLog(\"After OS_ObjectIdFindNextFree: return_code=%ld, token=%p\", (long)return_code, (void *)token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ProbeLog(\"Allocation failed before notify: return_code=%ld -> calling OS_ObjectIdTransactionCancel, then returning\", (long)return_code);\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        OS_ProbeLog(\"Allocation succeeded so far: calling OS_NotifyEvent with obj_id=%ld\", (long)token->obj_id);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        OS_ProbeLog(\"After OS_NotifyEvent: return_code=%ld\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ProbeLog(\"Calling OS_ObjectIdConvertToken\");\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_ProbeLog(\"After OS_ObjectIdConvertToken: return_code=%ld\", (long)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ProbeLog(\"Error finalizing new object (return_code=%ld): calling OS_ObjectIdFinalizeNew\", (long)return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        OS_ProbeLog(\"After OS_ObjectIdFinalizeNew: return_code=%ld\", (long)return_code);\n    }\n\n    OS_ProbeLog(\"OS_ObjectIdAllocateNew EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}