{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'data' is declared as void * but OS_NotifyEvent does not modify it and merely forwards it to the EventHandler. Therefore it could and should be declared as const void * (and the EventHandler prototype changed accordingly). Also elsewhere in the codebase a const char * (name) is explicitly cast to void * when passed to match functions, which shows const is being discarded rather than used. This loses const-correctness and violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe function to append logs to /tmp/logs/1913.txt */\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1913.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp each entry to help reconstruct ordering */\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    if (tm_info != NULL)\n    {\n        char timebuf[32];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", tm_info) > 0)\n        {\n            fprintf(fp, \"%s - \", timebuf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_LogProbe(\"Entered OS_ObjectIdAllocateNew: idtype=%p, name_ptr=%p, token_ptr=%p\", (void *)idtype, (const void *)name, (void *)token);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_LogProbe(\"Shutdown in progress - aborting allocation (GlobalState=0x%08X)\", OS_SharedGlobalVars.GlobalState);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    OS_LogProbe(\"OS_ObjectIdTransactionInit returned %d\", return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_LogProbe(\"Transaction init failed - returning %d\", return_code);\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log the name being checked. Note: keep the original cast when calling the matcher. */\n        OS_LogProbe(\"Checking for existing object with name='%s' (name_ptr=%p)\", name, (const void *)name);\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n        OS_LogProbe(\"OS_ObjectIdFindNextMatch returned %d for name='%s'\", return_code, name);\n    }\n    else\n    {\n        OS_LogProbe(\"No name provided; skipping name match check\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_LogProbe(\"Name already taken - will return OS_ERR_NAME_TAKEN\");\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        OS_LogProbe(\"Name not found - searching for next free ID\");\n        return_code = OS_ObjectIdFindNextFree(token);\n        OS_LogProbe(\"OS_ObjectIdFindNextFree returned %d\", return_code);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_LogProbe(\"Allocation failed with %d - canceling transaction\", return_code);\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        /* Log the fact that we call OS_NotifyEvent and the data parameter (NULL in this path) */\n        OS_LogProbe(\"Calling OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token_ptr=%p, data=NULL)\", (void *)token);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        OS_LogProbe(\"OS_NotifyEvent returned %d\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_LogProbe(\"Converting token to ID (OS_ObjectIdConvertToken)\");\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_LogProbe(\"OS_ObjectIdConvertToken returned %d\", return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_LogProbe(\"Finalizing new object with error %d (OS_ObjectIdFinalizeNew)\", return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        OS_LogProbe(\"OS_ObjectIdFinalizeNew returned %d\", return_code);\n    }\n\n    OS_LogProbe(\"Exiting OS_ObjectIdAllocateNew with return_code=%d\", return_code);\n    return return_code;\n}\n"
}