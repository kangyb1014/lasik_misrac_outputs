{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ObjectIdFindNextMatch() takes a non-const void *arg and a MatchFunc whose first parameter is a non-const pointer. Callers (e.g. OS_ObjectIdAllocateNew) pass a const char *name and cast away const: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); The match function OS_ObjectNameMatch also accepts void *ref but only reads from it (treats it as const char *). Because the pointer could be const-qualified (const void *arg and MatchFunc taking const void *ref), the current API discards const and forces casts, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends a line to /tmp/logs/1913.txt */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1913.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    os_log_probe(\"ENTER: OS_ObjectIdAllocateNew idtype=%d name_ptr=%p name_preview=\\\"%.64s\\\" token_ptr=%p\",\n                 (int)idtype, (const void *)name, (name ? name : \"(null)\"), (const void *)token);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        os_log_probe(\"EARLY RETURN: Shutdown detected. GlobalState=0x%08X -> return OS_ERR_INCORRECT_OBJ_STATE\",\n                     (unsigned)OS_SharedGlobalVars.GlobalState);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    os_log_probe(\"After OS_ObjectIdTransactionInit: return_code=%d token_ptr=%p\",\n                 return_code, (const void *)token);\n    if (return_code != OS_SUCCESS)\n    {\n        os_log_probe(\"TRANSACTION INIT FAILED -> returning %d\", return_code);\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log that the API requires casting away const for the match call */\n        os_log_probe(\"NAME CHECK: name_ptr=%p name_preview=\\\"%.64s\\\" -> calling OS_ObjectIdFindNextMatch with (void *) cast\",\n                     (const void *)name, name);\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n        os_log_probe(\"After OS_ObjectIdFindNextMatch: return_code=%d\", return_code);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        os_log_probe(\"NAME NULL: setting return_code=OS_ERR_NAME_NOT_FOUND (%d)\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_log_probe(\"Name already exists -> mapping to OS_ERR_NAME_TAKEN\");\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        os_log_probe(\"Name not found -> searching for next free id\");\n        return_code = OS_ObjectIdFindNextFree(token);\n        os_log_probe(\"After OS_ObjectIdFindNextFree: return_code=%d token_ptr=%p\",\n                     return_code, (const void *)token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        os_log_probe(\"ALLOCATION FAILED (return_code=%d) -> calling OS_ObjectIdTransactionCancel token_ptr=%p\",\n                     return_code, (const void *)token);\n        OS_ObjectIdTransactionCancel(token);\n        os_log_probe(\"Transaction cancelled -> returning %d\", return_code);\n        return return_code;\n    }\n    else\n    {\n        os_log_probe(\"Allocation succeeded -> notifying event OS_EVENT_RESOURCE_ALLOCATED for token_ptr=%p\",\n                     (const void *)token);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        os_log_probe(\"After OS_NotifyEvent: return_code=%d obj_id=%d\",\n                     return_code, (int)(token ? token->obj_id : -1));\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_log_probe(\"Converting token -> calling OS_ObjectIdConvertToken token_ptr=%p\", (const void *)token);\n        return_code = OS_ObjectIdConvertToken(token);\n        os_log_probe(\"After OS_ObjectIdConvertToken: return_code=%d\", return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        os_log_probe(\"Finalization due to failure -> calling OS_ObjectIdFinalizeNew(return_code=%d) token_ptr=%p\",\n                     return_code, (const void *)token);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        os_log_probe(\"After OS_ObjectIdFinalizeNew: return_code=%d\", return_code);\n    }\n\n    os_log_probe(\"EXIT: OS_ObjectIdAllocateNew returning %d for token_ptr=%p obj_id=%d\",\n                 return_code, (const void *)token, (int)(token ? token->obj_id : -1));\n\n    return return_code;\n}\n"
}