{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ref' is declared as a non-const void* but is only read (it is cast to const char* for strcmp). According to MISRA C 2023 Rule 8.13, this pointer should be const-qualified (e.g. const void *ref or const char *ref). The current declaration violates the rule; the correct fix is to make the parameter const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helpers - append logs to /tmp/logs/1913.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1913.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_name(const char *name)\n{\n    if (name == NULL)\n    {\n        probe_log(\"name: NULL\");\n    }\n    else\n    {\n        char buf[128];\n        /* copy a limited amount to avoid overruns when logging */\n        strncpy(buf, name, sizeof(buf) - 1);\n        buf[sizeof(buf) - 1] = '\\0';\n        probe_log(\"name ptr=%p, name=%s\", (const void *)name, buf);\n    }\n}\n\n/*\n * Modified OS_ObjectIdAllocateNew with inserted probes.\n * Original logic is preserved; probes only append logs to /tmp/logs/1913.txt\n */\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    probe_log(\"Enter OS_ObjectIdAllocateNew: idtype=%d, name_ptr=%p, token_ptr=%p\", (int)idtype, (const void *)name, (const void *)token);\n    probe_log_name(name);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        probe_log(\"Shutdown state detected: GlobalState=%#x. Returning OS_ERR_INCORRECT_OBJ_STATE.\", (unsigned)OS_SharedGlobalVars.GlobalState);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    probe_log(\"OS_ObjectIdTransactionInit returned %d\", return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"Transaction init failed; returning %d\", return_code);\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log the fact that the const char * is being cast to (void *) here. */\n        probe_log(\"Preparing to call OS_ObjectIdFindNextMatch with OS_ObjectNameMatch and ref cast from const char * to void *: ref=%p\", (const void *)name);\n        probe_log(\"NOTE: This demonstrates the scenario where a non-const void * parameter is used to pass a const char * (potential MISRA Rule 8.13 violation).\");\n\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n        probe_log(\"OS_ObjectIdFindNextMatch returned %d\", return_code);\n    }\n    else\n    {\n        probe_log(\"name is NULL, setting return_code = OS_ERR_NAME_NOT_FOUND\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Name match found: name already taken. Setting return_code = OS_ERR_NAME_TAKEN\");\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        probe_log(\"No matching name found (return_code=%d). Attempting to find next free ID.\", return_code);\n        return_code = OS_ObjectIdFindNextFree(token);\n        probe_log(\"OS_ObjectIdFindNextFree returned %d\", return_code);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"Allocation failed (return_code=%d). Cancelling transaction.\", return_code);\n        OS_ObjectIdTransactionCancel(token);\n        probe_log(\"Transaction cancelled. Returning %d\", return_code);\n        return return_code;\n    }\n    else\n    {\n        probe_log(\"Allocation succeeded. Notifying event OS_EVENT_RESOURCE_ALLOCATED for obj_id=%d\", token->obj_id);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        probe_log(\"OS_NotifyEvent returned %d\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Converting token to final ID representation. Calling OS_ObjectIdConvertToken.\");\n        return_code = OS_ObjectIdConvertToken(token);\n        probe_log(\"OS_ObjectIdConvertToken returned %d\", return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"Finalization required due to failure (return_code=%d). Calling OS_ObjectIdFinalizeNew.\", return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        probe_log(\"OS_ObjectIdFinalizeNew returned %d\", return_code);\n    }\n\n    probe_log(\"Exit OS_ObjectIdAllocateNew with return_code=%d\", return_code);\n    return return_code;\n}\n"
}