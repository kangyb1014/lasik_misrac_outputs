{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away the const qualifier when passing 'name' (const char *) to a parameter of type void *: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This discards const and indicates the API (OS_ObjectIdFindNextMatch / OS_ObjectMatchFunc_t) should accept a const-qualified pointer (e.g. const void *arg and bool (*)(const void *, ...)) so callers need not cast away const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/*\n * Probe logging helper. Appends human-readable probe messages to\n * /tmp/logs/1913.txt so other agents can reproduce and get evidence\n * for the reported const-cast violation scenario.\n *\n * Note: This helper preserves all original logic of\n * OS_ObjectIdAllocateNew; it only emits logs and does not change\n * program control flow or return values.\n */\nstatic void OS_ObjectIdAllocateNew_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1913.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry with initial state */\n    OS_ObjectIdAllocateNew_Log(\"ENTER: OS_ObjectIdAllocateNew idtype=%d name_ptr=%p name_str=\\\"%s\\\" token_ptr=%p\",\n                               (int)idtype,\n                               (const void *)name,\n                               (name != NULL ? (name) : \"(null)\"),\n                               (const void *)token);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_ObjectIdAllocateNew_Log(\"EXIT: Shutdown state detected (GlobalState=0x%08X), returning OS_ERR_INCORRECT_OBJ_STATE\",\n                                   (unsigned)OS_SharedGlobalVars.GlobalState);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    OS_ObjectIdAllocateNew_Log(\"After OS_ObjectIdTransactionInit: return_code=%d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"EXIT: TransactionInit failed, returning %d\", (int)return_code);\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log the specific point where the const qualifier is cast away in the original code */\n        OS_ObjectIdAllocateNew_Log(\n            \"Calling OS_ObjectIdFindNextMatch with OS_ObjectNameMatch and casting away const: original_name_ptr=%p name_preview=\\\"%.256s\\\" token_ptr=%p\",\n            (const void *)name,\n            name,\n            (const void *)token);\n\n        /* Original call preserved exactly (including the cast) to reproduce the violation scenario */\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n\n        OS_ObjectIdAllocateNew_Log(\"After OS_ObjectIdFindNextMatch: return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        OS_ObjectIdAllocateNew_Log(\"Name is NULL, setting return_code=OS_ERR_NAME_NOT_FOUND (%d)\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"Name match found: setting return_code=OS_ERR_NAME_TAKEN\");\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_Log(\"No name match found (or other error), calling OS_ObjectIdFindNextFree\");\n        return_code = OS_ObjectIdFindNextFree(token);\n        OS_ObjectIdAllocateNew_Log(\"After OS_ObjectIdFindNextFree: return_code=%d\", (int)return_code);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"Allocation failed (return_code=%d), calling OS_ObjectIdTransactionCancel and exiting\", (int)return_code);\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_Log(\"Allocation succeeded, calling OS_NotifyEvent\");\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        OS_ObjectIdAllocateNew_Log(\"After OS_NotifyEvent: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"Calling OS_ObjectIdConvertToken\");\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_ObjectIdAllocateNew_Log(\"After OS_ObjectIdConvertToken: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"Finalizing new object with error return_code=%d via OS_ObjectIdFinalizeNew\", (int)return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        OS_ObjectIdAllocateNew_Log(\"After OS_ObjectIdFinalizeNew: return_code=%d\", (int)return_code);\n    }\n\n    OS_ObjectIdAllocateNew_Log(\"EXIT: OS_ObjectIdAllocateNew returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}