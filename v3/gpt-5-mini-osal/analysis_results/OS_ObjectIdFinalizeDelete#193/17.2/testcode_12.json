{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_CondVarDelete calls OS_ObjectIdFinalizeDelete; that function calls OS_NotifyEvent, which invokes a user-supplied EventHandler callback (OS_SharedGlobalVars.EventHandler). If that EventHandler calls back into the OS API (for example calls OS_CondVarDelete again or any other delete routine that eventually calls OS_ObjectIdFinalizeDelete), the original OS_CondVarDelete would be re-entered indirectly, creating recursion. Thus an indirect self-call/recursion scenario exists.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1936.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "int32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n    FILE *log = fopen(\"/tmp/logs/1936.txt\", \"a\");\n\n    /* Log entry and incoming state */\n    if (log)\n    {\n        /* Print token pointer and (if available) the obj_id value */\n        fprintf(log, \"OS_ObjectIdFinalizeDelete ENTRY: operation_status=%ld, token=%p, token->obj_id=%ld\\n\",\n                (long)operation_status,\n                (void *)token,\n                (long)(token ? token->obj_id : (osal_id_t)-1));\n        fflush(log);\n    }\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        if (log)\n        {\n            fprintf(log, \"Decision: operation_status==OS_SUCCESS -> final_id set to OS_OBJECT_ID_UNDEFINED\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        if (log)\n        {\n            fprintf(log, \"Decision: operation_status!=OS_SUCCESS -> final_id restored from token->obj_id=%ld\\n\",\n                    (long)final_id);\n            fflush(log);\n        }\n    }\n\n    /* Either way we must unlock the object type */\n    if (log)\n    {\n        fprintf(log, \"Calling OS_ObjectIdTransactionFinish(token=%p, &final_id=%ld)\\n\",\n                (void *)token, (long)final_id);\n        fflush(log);\n    }\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    if (log)\n    {\n        fprintf(log, \"Returned from OS_ObjectIdTransactionFinish; final_id now=%ld\\n\", (long)final_id);\n        fflush(log);\n    }\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"About to call OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id=%ld, NULL)\\n\",\n                    (long)token->obj_id);\n            fflush(log);\n        }\n\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n\n        if (log)\n        {\n            fprintf(log, \"Returned from OS_NotifyEvent\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdFinalizeDelete EXIT: operation_status=%ld\\n\", (long)operation_status);\n        fclose(log);\n    }\n\n    return operation_status;\n}\n"
}