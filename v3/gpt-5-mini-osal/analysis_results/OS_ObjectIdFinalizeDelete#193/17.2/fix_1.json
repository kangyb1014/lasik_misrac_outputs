{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_ObjectIdFinalizeDelete_Log(const char *stage, int32 operation_status, osal_id_t token_id, osal_id_t final_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    if (!f)\n    {\n        /* Try to create the directory if it does not exist, then retry once. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    }\n\n    if (f)\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        (void)localtime_r(&t, &tm_buf);\n        char timestr[64];\n        (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n        /* Print relevant state info. Cast to long for portability of integer types. */\n        fprintf(f, \"%s PID=%ld Stage=%s operation_status=%ld token_id=%ld final_id=%ld\\n\",\n                timestr,\n                (long)getpid(),\n                stage,\n                (long)operation_status,\n                (long)token_id,\n                (long)final_id);\n        fflush(f);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Log entry and initial token state */\n    OS_ObjectIdFinalizeDelete_Log(\"entry\", operation_status, (token ? token->obj_id : OS_OBJECT_ID_UNDEFINED), OS_OBJECT_ID_UNDEFINED);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_ObjectIdFinalizeDelete_Log(\"final_id_set_success\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        OS_ObjectIdFinalizeDelete_Log(\"final_id_restored_on_failure\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_ObjectIdFinalizeDelete_Log(\"after_transaction_finish\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_ObjectIdFinalizeDelete_Log(\"before_notify_event\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n        OS_ObjectIdFinalizeDelete_Log(\"after_notify_event\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n\n    OS_ObjectIdFinalizeDelete_Log(\"exit\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n\n    return operation_status;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp9q56mdlt/src/src/os/shared/src/osapi-idmap.c: In function 'OS_ObjectIdFinalizeDelete_Log':\n/tmp/tmp9q56mdlt/src/src/os/shared/src/osapi-idmap.c:894:19: error: storage size of 'tm_buf' isn't known\n  894 |         struct tm tm_buf;\n      |                   ^~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/__/__/os/shared/src/osapi-idmap.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3787: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <stdint.h>\n\n/* Minimal type definitions so this unit compiles standalone. These mirror\n   the expected shapes from the larger project but are deliberately small\n   and non-invasive. No mock functions are implemented here. */\ntypedef int32_t int32;\ntypedef int32_t osal_id_t;\n\ntypedef struct\n{\n    osal_id_t obj_id;\n} OS_object_token_t;\n\n/* Constants used by the function. Use enums/consts rather than macros. */\nenum\n{\n    OS_OBJECT_ID_UNDEFINED = -1,\n    OS_SUCCESS = 0,\n    OS_EVENT_RESOURCE_DELETED = 1\n};\n\n/* External functions used by the implementation - declared but not defined\n   here to avoid providing mock implementations. */\nextern void OS_ObjectIdTransactionFinish(OS_object_token_t *token, osal_id_t *final_id);\nextern void OS_NotifyEvent(int event_id, osal_id_t id, void *data);\n\nstatic void OS_ObjectIdFinalizeDelete_Log(const char *stage, int32 operation_status, osal_id_t token_id, osal_id_t final_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    if (!f)\n    {\n        /* Try to create the directory if it does not exist, then retry once. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    }\n\n    if (f)\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        (void)localtime_r(&t, &tm_buf);\n        char timestr[64];\n        (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n        /* Print relevant state info. Cast to long for portability of integer types. */\n        fprintf(f, \"%s PID=%ld Stage=%s operation_status=%ld token_id=%ld final_id=%ld\\n\",\n                timestr,\n                (long)getpid(),\n                stage,\n                (long)operation_status,\n                (long)token_id,\n                (long)final_id);\n        fflush(f);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Log entry and initial token state */\n    OS_ObjectIdFinalizeDelete_Log(\"entry\", operation_status, (token ? token->obj_id : OS_OBJECT_ID_UNDEFINED), OS_OBJECT_ID_UNDEFINED);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_ObjectIdFinalizeDelete_Log(\"final_id_set_success\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        OS_ObjectIdFinalizeDelete_Log(\"final_id_restored_on_failure\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_ObjectIdFinalizeDelete_Log(\"after_transaction_finish\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_ObjectIdFinalizeDelete_Log(\"before_notify_event\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n        OS_ObjectIdFinalizeDelete_Log(\"after_notify_event\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n\n    OS_ObjectIdFinalizeDelete_Log(\"exit\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n\n    return operation_status;\n}\n",
  "explanation": "The compile error was caused by missing standard headers that define struct tm and related time functions. I added the appropriate standard includes (time.h, stdio.h, sys/stat.h, sys/types.h, unistd.h, stdint.h). To allow this unit to compile standalone, I added minimal typedefs for int32 and osal_id_t, a simple OS_object_token_t struct, and constants (OS_OBJECT_ID_UNDEFINED, OS_SUCCESS, OS_EVENT_RESOURCE_DELETED). The external functions OS_ObjectIdTransactionFinish and OS_NotifyEvent are declared but not implemented (no mocks), preserving the original logic. No main or macros were added."
}