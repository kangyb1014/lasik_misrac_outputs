{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_TaskDelete -> OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> (application EventHandler) -> OS_TaskDelete. Because OS_ObjectIdFinalizeDelete invokes the application EventHandler via OS_NotifyEvent, the user-supplied handler could call OS_TaskDelete again, producing an indirect recursive call to OS_TaskDelete.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1936.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe logging helper - writes trace lines to /tmp/logs/1936.txt\n * Keeps the original behavior of OS_ObjectIdFinalizeDelete unchanged;\n * only side-effect is appending records to the log file for tracing. */\nstatic void OS_ObjectIdFinalizeDelete_LogProbe(const char *stage, int32 operation_status, OS_object_token_t *token, osal_id_t final_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot open the file, silently return to avoid changing behavior. */\n        return;\n    }\n\n    time_t now = time(NULL);\n\n    /* Note: cast integer types to long for portable printing; this preserves original logic and\n     * avoids introducing dependencies on printf format macros. Accessing token->obj_id mirrors\n     * the original function's behavior (no NULL-check to avoid changing semantics). */\n    fprintf(f, \"%ld: %s: operation_status=%ld, token=%p, token->obj_id=%ld, final_id=%ld\\n\",\n            (long)now,\n            stage,\n            (long)operation_status,\n            (void *)token,\n            (long)token->obj_id,\n            (long)final_id);\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Log entry with incoming parameters and the token state (pre-change). */\n    OS_ObjectIdFinalizeDelete_LogProbe(\"entry\", operation_status, token, (osal_id_t)-1);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Log after deciding final_id */\n    OS_ObjectIdFinalizeDelete_LogProbe(\"after_compute_final_id\", operation_status, token, final_id);\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdFinalizeDelete_LogProbe(\"before_transaction_finish\", operation_status, token, final_id);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_ObjectIdFinalizeDelete_LogProbe(\"after_transaction_finish\", operation_status, token, final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_ObjectIdFinalizeDelete_LogProbe(\"before_notify\", operation_status, token, final_id);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n        OS_ObjectIdFinalizeDelete_LogProbe(\"after_notify\", operation_status, token, final_id);\n    }\n\n    /* Final exit log */\n    OS_ObjectIdFinalizeDelete_LogProbe(\"exit\", operation_status, token, final_id);\n\n    return operation_status;\n}\n"
}