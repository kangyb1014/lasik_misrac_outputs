{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the function pointer OS_SharedGlobalVars.EventHandler is ever set to point to OS_NotifyEvent (or to another function that eventually calls OS_NotifyEvent), then OS_NotifyEvent calls EventHandler which will call OS_NotifyEvent again, producing indirect recursion. For example, if an application assigns OS_SharedGlobalVars.EventHandler = OS_NotifyEvent, a call to OS_NotifyEvent will re-enter itself indefinitely (stack overflow), thus violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1936.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends structured traces to /tmp/logs/1936.txt */\nstatic void OS_1936_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* ENTRY log */\n    OS_1936_Log(\"OS_ObjectIdFinalizeDelete ENTRY: operation_status=%d, token=%p, token->obj_id=%lld\",\n                (int)operation_status,\n                (void *)token,\n                (long long)(token ? (long long)token->obj_id : (long long)-1));\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_1936_Log(\"operation_status==OS_SUCCESS -> setting final_id to OS_OBJECT_ID_UNDEFINED\");\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        OS_1936_Log(\"operation_status!=OS_SUCCESS -> restoring final_id to original token->obj_id=%lld\",\n                    (long long)final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_1936_Log(\"Calling OS_ObjectIdTransactionFinish with token=%p, final_id=%lld\",\n                (void *)token, (long long)final_id);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_1936_Log(\"Returned from OS_ObjectIdTransactionFinish for token=%p\", (void *)token);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        /* Log just before invoking the callback. If the callback leads to re-entry\n         * into OS_NotifyEvent (directly or indirectly) and does not return, the\n         * \"returned from OS_NotifyEvent\" log will be missing which is useful\n         * evidence for the indirect recursion / stack overflow scenario. */\n        OS_1936_Log(\"About to call OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id=%lld)\",\n                    (long long)token->obj_id);\n\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n\n        /* If the call returns, log that it returned normally. If it doesn't return\n         * (e.g. due to infinite recursion), this log will not be present in the file. */\n        OS_1936_Log(\"Returned from OS_NotifyEvent for token->obj_id=%lld\", (long long)token->obj_id);\n    }\n\n    OS_1936_Log(\"OS_ObjectIdFinalizeDelete EXIT: operation_status=%d, token=%p\", (int)operation_status, (void *)token);\n\n    return operation_status;\n}\n"
}