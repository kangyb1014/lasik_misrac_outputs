{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur via the event callback: OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> OS_SharedGlobalVars.EventHandler (application callback). If that event handler calls an OS delete API (for example OS_BinSemDelete or any other delete that ultimately calls OS_ObjectIdFinalizeDelete), the chain returns to OS_ObjectIdFinalizeDelete, producing indirect recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1936.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends human-readable logs to /tmp/logs/1936.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    va_list args;\n    FILE *f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log file cannot be opened, do not change behavior of caller. */\n        return;\n    }\n\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Log entry and current token state */\n    if (token != NULL)\n    {\n        OS_ProbeLog(\"ENTER OS_ObjectIdFinalizeDelete: operation_status=%lld, token=%p, token->obj_id=%lld\",\n                    (long long)operation_status, (void *)token, (long long)token->obj_id);\n    }\n    else\n    {\n        OS_ProbeLog(\"ENTER OS_ObjectIdFinalizeDelete: operation_status=%lld, token=NULL\",\n                    (long long)operation_status);\n    }\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_ProbeLog(\"Decision: operation_status==OS_SUCCESS -> final_id set to OS_OBJECT_ID_UNDEFINED\");\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        OS_ProbeLog(\"Decision: operation_status!=OS_SUCCESS -> final_id restored from token->obj_id=%lld\",\n                    (long long)token->obj_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ProbeLog(\"About to call OS_ObjectIdTransactionFinish with token=%p, final_id=%lld\",\n                (void *)token, (long long)final_id);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_ProbeLog(\"Returned from OS_ObjectIdTransactionFinish\");\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_ProbeLog(\"About to call OS_NotifyEvent: event=OS_EVENT_RESOURCE_DELETED, obj_id=%lld\",\n                    (long long)token->obj_id);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n        OS_ProbeLog(\"Returned from OS_NotifyEvent\");\n    }\n\n    OS_ProbeLog(\"EXIT OS_ObjectIdFinalizeDelete: returning operation_status=%lld\", (long long)operation_status);\n\n    return operation_status;\n}\n"
}