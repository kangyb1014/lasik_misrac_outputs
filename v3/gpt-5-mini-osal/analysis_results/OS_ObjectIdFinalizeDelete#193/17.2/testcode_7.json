{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via the application event handler: OS_TimeBaseDelete calls OS_ObjectIdFinalizeDelete, which calls OS_NotifyEvent. OS_NotifyEvent invokes the application EventHandler callback (OS_SharedGlobalVars.EventHandler). If that EventHandler calls OS_TimeBaseDelete (or any function that eventually calls OS_TimeBaseDelete), this creates an indirect recursive call chain back into OS_TimeBaseDelete.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1936.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n\n/* Probe logger for OS_ObjectIdFinalizeDelete\n * Writes control-flow and state information to /tmp/logs/1936.txt\n * This preserves original function behavior and only appends logging.\n */\nstatic void OS_ObjectIdFinalizeDelete_Log(const char *stage, int32 operation_status, osal_id_t token_id, osal_id_t final_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    if (!f)\n    {\n        /* Try to create the directory if it does not exist, then retry once. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    }\n\n    if (f)\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        (void)localtime_r(&t, &tm_buf);\n        char timestr[64];\n        (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n        /* Print relevant state info. Cast to long for portability of integer types. */\n        fprintf(f, \"%s PID=%ld Stage=%s operation_status=%ld token_id=%ld final_id=%ld\\n\",\n                timestr,\n                (long)getpid(),\n                stage,\n                (long)operation_status,\n                (long)token_id,\n                (long)final_id);\n        fflush(f);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Log entry and initial token state */\n    OS_ObjectIdFinalizeDelete_Log(\"entry\", operation_status, (token ? token->obj_id : OS_OBJECT_ID_UNDEFINED), OS_OBJECT_ID_UNDEFINED);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_ObjectIdFinalizeDelete_Log(\"final_id_set_success\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        OS_ObjectIdFinalizeDelete_Log(\"final_id_restored_on_failure\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_ObjectIdFinalizeDelete_Log(\"after_transaction_finish\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_ObjectIdFinalizeDelete_Log(\"before_notify_event\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n        OS_ObjectIdFinalizeDelete_Log(\"after_notify_event\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n    }\n\n    OS_ObjectIdFinalizeDelete_Log(\"exit\", operation_status, token ? token->obj_id : OS_OBJECT_ID_UNDEFINED, final_id);\n\n    return operation_status;\n}\n"
}