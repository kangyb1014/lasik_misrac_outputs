{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a modifiable pointer (OS_impl_file_internal_record_t *impl) but in OS_SelectSingle_Impl it is only used to read fields (impl->selectable, impl->fd) and is never used to modify the object. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible. Here it should be declared as const OS_impl_file_internal_record_t *impl (assigning the address of the non-const table to a pointer-to-const is allowed), so the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/823.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle_Impl:\n```c\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectSingle_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe/log helper: append a line to the log file for diagnostic tracing */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/823.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\n/* Probes that record key states and control path decisions */\nstatic void probe_entry(const void *token, const void *impl_ptr, unsigned int select_flags, int msecs)\n{\n    probe_log(\"OS_SelectSingle_Impl ENTRY: token=%p impl=%p SelectFlags=0x%08x msecs=%d\",\n              token, impl_ptr, select_flags, msecs);\n}\n\nstatic void probe_impl_state(const void *impl_ptr, int selectable, int fd)\n{\n    probe_log(\"impl state: impl=%p selectable=%d fd=%d\", impl_ptr, selectable, fd);\n}\n\nstatic void probe_before_select(int fd, unsigned int select_flags)\n{\n    probe_log(\"Before OS_DoSelect: fd=%d SelectFlags=0x%08x\", fd, select_flags);\n}\n\nstatic void probe_after_select(int return_code, int fd, unsigned int select_flags)\n{\n    probe_log(\"After OS_DoSelect: return_code=%d fd=%d SelectFlags=0x%08x\", return_code, fd, select_flags);\n}\n\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Log entry with token and incoming state */\n    probe_entry(token, NULL, (unsigned int)(*SelectFlags), (int)msecs);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log the impl pointer and fields that will be inspected */\n    probe_impl_state((const void *)impl, (int)impl->selectable, (int)impl->fd);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        probe_log(\"Early return: not selectable (impl=%p)\", (const void *)impl);\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        probe_log(\"Early return: fd out of range (fd=%d FD_SETSIZE=%d)\", impl->fd, FD_SETSIZE);\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n            probe_log(\"Requested READABLE: fd=%d\", impl->fd);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n            probe_log(\"Requested WRITABLE: fd=%d\", impl->fd);\n        }\n\n        probe_before_select(impl->fd, (unsigned int)(*SelectFlags));\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n        probe_after_select(return_code, impl->fd, (unsigned int)(*SelectFlags));\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                probe_log(\"Clearing READABLE flag for fd=%d\", impl->fd);\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                probe_log(\"Clearing WRITABLE flag for fd=%d\", impl->fd);\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            probe_log(\"Select failed (return_code=%d). Clearing all SelectFlags.\", return_code);\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        probe_log(\"No flags set on entry, nothing to check. Returning success.\");\n        return_code = OS_SUCCESS;\n    }\n\n    probe_log(\"OS_SelectSingle_Impl EXIT: return_code=%d final SelectFlags=0x%08x\",\n              return_code, (unsigned int)(*SelectFlags));\n\n    return return_code;\n}\n"
}