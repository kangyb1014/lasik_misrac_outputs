{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SelectSingle_Impl the local pointer 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only used for read-only access (reading impl->selectable and impl->fd). Therefore it could and should be declared as a pointer to a const-qualified type (const OS_impl_file_internal_record_t *impl). The assignment impl = OS_OBJECT_TABLE_GET(...) yields a non-const pointer but can be assigned to a const pointer; changing the local declaration (or the table/macro to return a const pointer) would satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/823.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle_Impl:\n```c\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectSingle_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nstatic void OS_SelectSingle_Log(const OS_impl_file_internal_record_t *impl,\n                                const OS_object_token_t *token,\n                                unsigned long SelectFlags_val,\n                                int32 msecs,\n                                const char *stage,\n                                int32 return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/823.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging cannot be performed, do not affect the original logic. */\n        return;\n    }\n\n    fprintf(fp, \"[OS_SelectSingle] stage=%s token=%p impl=%p selectable=%d fd=%d SelectFlags=0x%08lX msecs=%d return_code=%d\\n\",\n            stage,\n            (const void *)token,\n            (const void *)impl,\n            impl ? (int)impl->selectable : -1,\n            impl ? (int)impl->fd : -1,\n            SelectFlags_val,\n            (int)msecs,\n            (int)return_code);\n\n    fclose(fp);\n}\n\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log state after obtaining impl */\n    OS_SelectSingle_Log(impl, token, (unsigned long)(SelectFlags ? *SelectFlags : 0UL), msecs, \"after_impl_assign\", -1);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        OS_SelectSingle_Log(impl, token, (unsigned long)(SelectFlags ? *SelectFlags : 0UL), msecs, \"not_selectable\", OS_ERR_OPERATION_NOT_SUPPORTED);\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        OS_SelectSingle_Log(impl, token, (unsigned long)(SelectFlags ? *SelectFlags : 0UL), msecs, \"fd_out_of_range\", OS_ERR_OPERATION_NOT_SUPPORTED);\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        OS_SelectSingle_Log(impl, token, (unsigned long)*SelectFlags, msecs, \"before_prepare_sets\", -1);\n\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n            OS_SelectSingle_Log(impl, token, (unsigned long)*SelectFlags, msecs, \"flag_readable_set\", -1);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n            OS_SelectSingle_Log(impl, token, (unsigned long)*SelectFlags, msecs, \"flag_writable_set\", -1);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        OS_SelectSingle_Log(impl, token, (unsigned long)*SelectFlags, msecs, \"after_do_select\", return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n                OS_SelectSingle_Log(impl, token, (unsigned long)*SelectFlags, msecs, \"cleared_readable\", return_code);\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n                OS_SelectSingle_Log(impl, token, (unsigned long)*SelectFlags, msecs, \"cleared_writable\", return_code);\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n            OS_SelectSingle_Log(impl, token, 0UL, msecs, \"select_failed_cleared_flags\", return_code);\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n        OS_SelectSingle_Log(impl, token, (unsigned long)*SelectFlags, msecs, \"no_flags\", return_code);\n    }\n\n    OS_SelectSingle_Log(impl, token, (unsigned long)*SelectFlags, msecs, \"returning\", return_code);\n\n    return return_code;\n}\n"
}