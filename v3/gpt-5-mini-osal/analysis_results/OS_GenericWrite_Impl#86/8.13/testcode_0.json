{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'impl' is declared as 'OS_impl_file_internal_record_t *impl' but the function only reads members (impl->selectable, impl->fd) and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible. In this function it should be declared as 'const OS_impl_file_internal_record_t *impl' (unless OS_OBJECT_TABLE_GET or other code requires a non-const pointer).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericWrite_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericWrite_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericWrite_Impl:\n```c\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericWrite_Impl code.\n",
  "test_code": "static void OS_GenericWrite_Impl_log(const char *stage, const OS_object_token_t *token, OS_impl_file_internal_record_t *impl, size_t nbytes, int32 timeout, uint32 operation, int32 return_code, ssize_t os_result)\n{\n    char buf[512];\n    int len = 0;\n\n    /* Compose a concise log message with relevant state. Protect accesses if impl is NULL. */\n    if (impl != NULL)\n    {\n        len = snprintf(buf, sizeof(buf),\n                       \"%s: token=%llu token_ptr=%p nbytes=%zu timeout=%d impl=%p selectable=%d fd=%d operation=0x%08x return_code=%d os_result=%zd errno=%d\\n\",\n                       stage,\n                       (unsigned long long)(*token), (const void *)token,\n                       nbytes, timeout,\n                       (const void *)impl,\n                       (int)impl->selectable, (int)impl->fd,\n                       (unsigned int)operation,\n                       return_code, os_result, errno);\n    }\n    else\n    {\n        len = snprintf(buf, sizeof(buf),\n                       \"%s: token=%llu token_ptr=%p nbytes=%zu timeout=%d impl=NULL operation=0x%08x return_code=%d os_result=%zd errno=%d\\n\",\n                       stage,\n                       (unsigned long long)(*token), (const void *)token,\n                       nbytes, timeout,\n                       (unsigned int)operation,\n                       return_code, os_result, errno);\n    }\n\n    if (len > 0)\n    {\n        int fd = open(\"/tmp/logs/863.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n        if (fd >= 0)\n        {\n            /* write may not write all bytes in one call, but this simple probe is sufficient for diagnostics */\n            (void)write(fd, buf, (size_t)len);\n            (void)close(fd);\n        }\n    }\n}\n\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    OS_GenericWrite_Impl_log(\"entry\", token, NULL, nbytes, timeout, 0u, 0, 0);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    OS_GenericWrite_Impl_log(\"after_lookup\", token, impl, nbytes, timeout, 0u, 0, 0);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl != NULL && impl->selectable)\n        {\n            OS_GenericWrite_Impl_log(\"before_select\", token, impl, nbytes, timeout, operation, return_code, 0);\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n            OS_GenericWrite_Impl_log(\"after_select\", token, impl, nbytes, timeout, operation, return_code, 0);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            OS_GenericWrite_Impl_log(\"before_write\", token, impl, nbytes, timeout, operation, return_code, 0);\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                OS_GenericWrite_Impl_log(\"write_error\", token, impl, nbytes, timeout, operation, OS_ERROR, os_result);\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n                OS_GenericWrite_Impl_log(\"write_success\", token, impl, nbytes, timeout, operation, return_code, os_result);\n            }\n        }\n    }\n\n    OS_GenericWrite_Impl_log(\"exit\", token, impl, nbytes, timeout, operation, return_code, 0);\n\n    return return_code;\n}\n"
}