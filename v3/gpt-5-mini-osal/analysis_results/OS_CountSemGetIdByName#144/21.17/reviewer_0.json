{
  "user_message": "An agent A claimed that the following OS_CountSemGetIdByName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemGetIdByName.\n```c\nint32 OS_CountSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf LENGTHCHECK expands to use standard string functions that assume null-termination (e.g. strlen(name) or strcpy-style checks) then passing a buffer of size OS_MAX_API_NAME that is not null-terminated will cause the string function to read past the buffer bounds. In this code sem_name is only checked for NULL (OS_CHECK_POINTER) and not for guaranteed termination or size, so a non-terminated input would trigger an out-of-bounds access (e.g. strlen(name) iterating past the object).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY: sem_id=(nil) sem_name=0x55ce70309ee9 return_code=-1\nENTRY: sem_id=0x7ffe6ae4f8dc sem_name=(nil) return_code=-1\nENTRY: sem_id=0x7ffe6ae4f8dc sem_name=0x7ffe6ae4f8e0 return_code=-1\nAFTER_POINTER_CHECKS: sem_id=0x7ffe6ae4f8dc sem_name=0x7ffe6ae4f8e0 return_code=-1\nAFTER_LOOKUP: sem_id=0x7ffe6ae4f8dc sem_name=0x7ffe6ae4f8e0 return_code=-13\nENTRY: sem_id=0x7ffe6ae4f8dc sem_name=0x55ce70309f7d return_code=-1\nAFTER_POINTER_CHECKS: sem_id=0x7ffe6ae4f8dc sem_name=0x55ce70309f7d return_code=-1\nAFTER_LOOKUP: sem_id=0x7ffe6ae4f8dc sem_name=0x55ce70309f7d return_code=-17\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemGetIdByName:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_ObjectIdGetByName(OS_lock_mode_t lock_mode, osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    return OS_ObjectIdGetBySearch(lock_mode, idtype, OS_ObjectNameMatch, (void *)name, token);\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\ntypedef uint32 osal_id_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's scenario is plausible but not proven from the code shown. OS_CountSemGetIdByName itself only checks for NULL and forwards sem_name to OS_ObjectIdFindByName. The potential out\u2011of\u2011bounds read would come from the LENGTHCHECK macro inside OS_ObjectIdFindByName if that macro expands to an unbounded string.h call such as strlen() or strcpy-style operations. No definition of LENGTHCHECK is provided here, so you cannot conclude a MISRA 21.17 violation from the supplied code alone.\n\nTherefore the report is not correct as a definite violation. It is a valid concern to audit LENGTHCHECK: it must be implemented with a bounded operation (for example strnlen/memchr or an explicit length parameter) or the API must guarantee that callers always pass a nul-terminated buffer of at least OS_MAX_API_NAME+1 bytes. If LENGTHCHECK uses strlen (or other unbounded string.h functions) while callers may pass non\u2011terminated buffers, that implementation would violate MISRA C 2023 Rule 21.17\u2014so check/replace LENGTHCHECK accordingly."
}