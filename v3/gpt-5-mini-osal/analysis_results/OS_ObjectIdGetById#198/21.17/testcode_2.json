{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without validating either pointer or ensuring the strings are NUL-terminated. UT_Stub_RegisterReturnType stores the TypeName pointer directly (StubPtr->Data.Buff.ContentTypeStr = TypeName) with no null check, and UT_Stub_GetReturnValuePtr does not verify that its TypeName parameter or the stored ContentTypeStr are non-NULL or properly terminated. If UT_Stub_RegisterReturnType was ever called with TypeName == NULL (or if either pointer does not point to a NUL-terminated buffer), then the strcmp call will dereference an invalid pointer / read beyond the object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetById code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1989.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetById:\n```c\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetById code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper - appends trace information about control flow and state\n * to /tmp/logs/1989.txt. This routine is non-intrusive and preserves\n * the original control flow of OS_ObjectIdGetById.\n */\nstatic void OS_LogProbe(const char *stage, OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1989.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not alter program behavior. */\n    }\n\n    /* Print basic parameters and return code. Cast numeric types to long\n     */ \n    fprintf(f, \"STAGE=%s lock_mode=%ld idtype=%ld id=%lu return_code=%d token=%p\",\n            stage,\n            (long)lock_mode,\n            (long)idtype,\n            (unsigned long)id,\n            (int)return_code,\n            (void *)token);\n\n    if (token != NULL)\n    {\n        /* Safely attempt to log token fields that the original routine uses.\n         * Use casts to avoid type mismatches in format strings. */\n        fprintf(f, \" obj_idx=%ld obj_id=%lu\",\n                (long)token->obj_idx,\n                (unsigned long)token->obj_id);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry and parameter state */\n    OS_LogProbe(\"entry\", lock_mode, idtype, id, token, -1);\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    /* Log result of transaction init */\n    OS_LogProbe(\"after_transaction_init\", lock_mode, idtype, id, token, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Early return preserved - log and return */\n        OS_LogProbe(\"init_failed_return\", lock_mode, idtype, id, token, return_code);\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    /* Log result of id->index conversion and tentative token state */\n    OS_LogProbe(\"after_id_to_index\", lock_mode, idtype, id, token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /* Log before calling ConvertToken so one can observe the token state\n         * handed into the conversion. */\n        OS_LogProbe(\"before_convert_token\", lock_mode, idtype, id, token, return_code);\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n\n        /* Log after conversion attempt */\n        OS_LogProbe(\"after_convert_token\", lock_mode, idtype, id, token, return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log cancellation and then perform the original cancel operation */\n        OS_LogProbe(\"cancelling_transaction\", lock_mode, idtype, id, token, return_code);\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    /* Final state log before returning */\n    OS_LogProbe(\"exit\", lock_mode, idtype, id, token, return_code);\n\n    return return_code;\n}\n"
}