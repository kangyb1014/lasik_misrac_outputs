{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath(local_path) could copy/concatenate the translated path into local_path using unbounded string.h functions (e.g. strcpy/memcpy/strcat) without checking the destination size. If the translated path length >= OS_MAX_LOCAL_PATH_LEN this will write beyond local_path, violating the rule. The call also lacks an explicit destination-size parameter, so unless OS_TranslatePath internally enforces bounds (e.g. uses strncpy/strncpy_s/strlcpy/snprintf with OS_MAX_LOCAL_PATH_LEN and checks truncation) the use is potentially unsafe.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1699.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper for OS_remove. Writes diagnostic logs to /tmp/logs/1699.txt.\n * This helper intentionally keeps reads of local_path bounded by OS_MAX_LOCAL_PATH_LEN\n * to avoid introducing out-of-bounds accesses while detecting potential issues.\n */\nstatic void OS_remove_log(const char *stage, const char *path, const char *local_path, int32 translate_ret, int32 remove_ret)\n{\n    FILE *f = fopen(\"/tmp/logs/1699.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not alter program behavior */\n    }\n\n    fprintf(f, \"OS_remove: stage=%s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  input path: %s\\n\", path ? path : \"(null)\");\n    fprintf(f, \"  translate_ret: %d\\n\", (int)translate_ret);\n\n    if (local_path != NULL)\n    {\n        size_t max = (size_t)OS_MAX_LOCAL_PATH_LEN;\n\n        /* Search for NUL within the buffer bounds only. If not found, this indicates the\n         * translated path was not NUL-terminated within the destination buffer size and\n         * is a sign of potential overflow/truncation.\n         */\n        const void *nul = memchr(local_path, '\\0', max);\n        if (nul != NULL)\n        {\n            size_t len = (size_t)strnlen(local_path, max);\n            /* Print the string content up to the length found (bounded) */\n            fprintf(f, \"  local_path (len=%zu, max=%zu): \\\"%.*s\\\"\\n\", len, max, (int)len, local_path);\n        }\n        else\n        {\n            /* No NUL within bounds: potential overflow. Log that fact and the raw bytes\n             * within the buffer (hex) so investigators can see what was written.\n             */\n            fprintf(f, \"  local_path: NO NUL TERMINATOR FOUND within %zu bytes. Possible overflow\\n\", max);\n            fprintf(f, \"  local_path bytes:\");\n            for (size_t i = 0; i < max; ++i)\n            {\n                fprintf(f, \" %02X\", (unsigned char)local_path[i]);\n            }\n            fprintf(f, \"\\n\");\n        }\n    }\n    else\n    {\n        fprintf(f, \"  local_path: (null)\\n\");\n    }\n\n    fprintf(f, \"  remove_ret: %d\\n\", (int)remove_ret);\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry (local_path is not yet valid) */\n    OS_remove_log(\"entry\", path, NULL, -1, -1);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and inspect local_path safely (bounded) */\n    OS_remove_log(\"after_translate\", path, local_path, return_code, -1);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n        /* Log after attempting removal */\n        OS_remove_log(\"after_remove\", path, local_path, 0, return_code);\n    }\n\n    return return_code;\n}\n"
}