{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial computation 'size_t length = strlen(string);' in UT_DefaultHandler_OS_printf is redundant: the variable 'length' is reassigned (length = strlen(string);) before any use inside the status>=0 branch. The first strlen() call therefore performs an operation whose result is never used \u2014 an executed operation that can be removed without affecting program behaviour \u2014 and is dead code. (Note: if strlen() would trigger undefined behaviour for an invalid 'string' pointer, removing it changes that failing behaviour; however in the normal valid-input case the initialization is dead and should be removed or deferred to where it is actually needed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2882.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "static void UtAssert_Log(const char *Format, ...)\n{\n    va_list ap;\n    FILE *fp = fopen(\"/tmp/logs/2882.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, Format);\n    vfprintf(fp, Format, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Log entry with input parameters (pointer values for File/Spec to help reproduce invalid-pointer cases) */\n    UtAssert_Log(\"ENTER: UtAssert_Message MessageType=%u File=%p Line=%u Spec=%p\",\n                 (unsigned)MessageType, (void *)File, (unsigned)Line, (void *)Spec);\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n\n        /* Build prefix and compute its length as in the original code */\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n\n        /* Log state after prefix construction */\n        UtAssert_Log(\"After prefix: BaseName='%s' MsgLen=%zu FinalMessage_prefix='%s'\",\n                     BaseName, MsgLen, FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n        UtAssert_Log(\"No File provided: MsgLen=0\");\n    }\n\n    /* Log buffer space available for the formatted message */\n    UtAssert_Log(\"Before vsnprintf: MsgLen=%zu Remaining=%zu\", MsgLen, (size_t)(sizeof(FinalMessage) - MsgLen));\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Log the composed final message */\n    UtAssert_Log(\"Composed FinalMessage: '%s'\", FinalMessage);\n\n    UtAssert_Log(\"Calling UT_BSP_DoText with MessageType=%u\", (unsigned)MessageType);\n    UT_BSP_DoText(MessageType, FinalMessage);\n    UtAssert_Log(\"EXIT: UtAssert_Message completed\");\n}\n"
}