{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrSetPort_Impl:\n```c\nint32 OS_SocketAddrSetPort_Impl(OS_SockAddr_t *Addr, uint16 PortNum)\n{\n    in_port_t               sa_port;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    sa_port  = htons(PortNum);\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            Accessor->sa_in.sin_port = sa_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            Accessor->sa_in6.sin6_port = sa_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;",
    "OS_SockAddr_Accessor_t *Accessor;",
    "Accessor->sa_in.sin_port = sa_port;",
    "Accessor->sa_in6.sin6_port = sa_port;",
    "int32 OS_SocketAddrSetPort_Impl(OS_SockAddr_t *Addr, uint16 PortNum)"
  ],
  "explanation": "Fragments not listed do not need investigation for Rule 8.13 because they do not introduce pointers that could/should be const-qualified or do not modify pointed-to data: the local variable declaration and use of sa_port, the call to htons(), the switch statement and case labels, the read access of Accessor->sa.sa_family, and the return statements. The listed fragments involve a pointer parameter and a pointer variable, a cast taking the address of Addr->AddrData into a non-const accessor pointer, and assignments through that pointer \u2014 these are the locations where const-qualification of pointer targets should be investigated."
}