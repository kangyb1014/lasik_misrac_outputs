{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf sock->stream_name is not NUL-terminated such that OS_strnlen(sock->stream_name, sizeof(sock->stream_name)) returns sizeof(sock->stream_name), then len == sizeof(sock->stream_name). The expression &sock->stream_name[len] yields a pointer one-past-the-end of the array and is passed as the destination argument to snprintf. Even though the size argument becomes 0, passing a pointer that refers beyond the object bounds to a string handling function can lead to accesses beyond the object and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1079.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrToString_Impl code.\n",
  "test_code": "int32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Probe log: record entry parameters (do not dereference buffer to avoid UB) */\n    {\n        FILE *log = fopen(\"/tmp/logs/1079.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTRY: OS_SocketAddrToString_Impl called\\n\");\n            fprintf(log, \"  buffer=%p\\n\", (const void *)buffer);\n            fprintf(log, \"  buflen=%zu\\n\", buflen);\n            fprintf(log, \"  Addr=%p\\n\", (const void *)Addr);\n            fclose(log);\n        }\n    }\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            /* Log chosen family and addrbuffer */\n            {\n                FILE *log = fopen(\"/tmp/logs/1079.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"BRANCH: AF_INET selected\\n\");\n                    fprintf(log, \"  sa_family=%d\\n\", Accessor->sa.sa_family);\n                    fprintf(log, \"  addrbuffer=%p\\n\", addrbuffer);\n                    fclose(log);\n                }\n            }\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            /* Log chosen family and addrbuffer */\n            {\n                FILE *log = fopen(\"/tmp/logs/1079.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"BRANCH: AF_INET6 selected\\n\");\n                    fprintf(log, \"  sa_family=%d\\n\", Accessor->sa.sa_family);\n                    fprintf(log, \"  addrbuffer=%p\\n\", addrbuffer);\n                    fclose(log);\n                }\n            }\n            break;\n#endif\n        default:\n            /* Log bad address and return as original logic */\n            {\n                FILE *log = fopen(\"/tmp/logs/1079.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"BRANCH: default - bad address family\\n\");\n                    fprintf(log, \"  sa_family=%d\\n\", Accessor->sa.sa_family);\n                    fclose(log);\n                }\n            }\n\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* Call the original function and log outcome. Do not read from 'buffer' beyond taking its pointer. */\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        FILE *log = fopen(\"/tmp/logs/1079.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RESULT: inet_ntop returned NULL\\n\");\n            fprintf(log, \"  buffer=%p\\n\", (const void *)buffer);\n            fprintf(log, \"  buflen=%zu\\n\", buflen);\n            fclose(log);\n        }\n\n        return OS_ERROR;\n    }\n\n    /* Success path: record that inet_ntop succeeded and the parameters used. Do NOT read buffer contents here. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1079.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RESULT: inet_ntop succeeded\\n\");\n            fprintf(log, \"  buffer=%p\\n\", (const void *)buffer);\n            fprintf(log, \"  buflen=%zu\\n\", buflen);\n            fclose(log);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}