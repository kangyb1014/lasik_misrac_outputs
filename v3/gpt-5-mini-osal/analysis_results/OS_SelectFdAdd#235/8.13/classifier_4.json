{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdAdd:\n```c\nint32 OS_SelectFdAdd(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Sets the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift sets the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] |= 1 << (local_id & 0x7);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SelectFdAdd:\ntypedef struct\n{\n    uint8 object_ids[(OS_MAX_NUM_OPEN_FILES + 7) / 8];\n} OS_FdSet\n...\ntypedef uint32 osal_index_t\n...\ntypedef uint32 osal_id_t\n...\n#define OS_OBJECT_TYPE_OS_STREAM 0x06\n...\n#define OS_SUCCESS (0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nSet->object_ids[local_id >> 3] |= 1 << (local_id & 0x7);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The function deliberately writes to Set->object_ids (Set->object_ids[...] |= ...), so the pointer parameter OS_FdSet *Set must be non-const; requiring a const-qualified pointer would be incorrect. A violation of Rule 8.13 would occur if the function did not modify the object but the parameter was declared non-const (e.g., a read-only accessor taking OS_FdSet * instead of const OS_FdSet *)."
}