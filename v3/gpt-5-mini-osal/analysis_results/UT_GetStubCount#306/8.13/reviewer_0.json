{
  "user_message": "An agent A claimed that the following UT_GetStubCount code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UT_GetStubCount.\n```c\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n    }\n    else\n    {\n        Count = 0;\n    }\n\n    return Count;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'StubPtr' is declared as 'UT_StubTableEntry_t *' but is only used for reading the object (Count = StubPtr->Data.Rc.Count;). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Declaring it as 'const UT_StubTableEntry_t *StubPtr' (and leaving the call to UT_GetStubEntry unchanged, since a non-const-to-const pointer assignment is allowed) would avoid this violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nAfterGetStubEntry: StubPtr=NULL, ReturnedCount=0\nBeforeReturn_Null: StubPtr=NULL, ReturnedCount=0\nAfterGetStubEntry: StubPtr=0x56282497bd20, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x56282497bd20, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x56282497d160, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x56282497d160, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x56401c2df120, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x56401c2df120, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=NULL, ReturnedCount=0\nBeforeReturn_Null: StubPtr=NULL, ReturnedCount=0\nAfterGetStubEntry: StubPtr=NULL, ReturnedCount=0\nBeforeReturn_Null: StubPtr=NULL, ReturnedCount=0\nAfterGetStubEntry: StubPtr=0x555896d6b7c0, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x555896d6b7c0, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x555896d6b7c0, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x555896d6b7c0, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x555896d64500, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x555896d64500, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x555896d64500, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x555896d64500, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x55e5b1ad3240, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55e5b1ad3240, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=NULL, ReturnedCount=0\nBeforeReturn_Null: StubPtr=NULL, ReturnedCount=0\nAfterGetStubEntry: StubPtr=0x55605b598a20, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b598a20, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x55605b598a20, CountField=2, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b598a20, CountField=2, ReturnedCount=2\nAfterGetStubEntry: StubPtr=NULL, ReturnedCount=0\nBeforeReturn_Null: StubPtr=NULL, ReturnedCount=0\nAfterGetStubEntry: StubPtr=0x55605b597280, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b597280, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x55605b59bde0, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b59bde0, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x55605b598a20, CountField=2, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b598a20, CountField=2, ReturnedCount=2\nAfterGetStubEntry: StubPtr=NULL, ReturnedCount=0\nBeforeReturn_Null: StubPtr=NULL, ReturnedCount=0\nAfterGetStubEntry: StubPtr=0x55605b597280, CountField=2, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b597280, CountField=2, ReturnedCount=2\nAfterGetStubEntry: StubPtr=0x55605b59bde0, CountField=2, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b59bde0, CountField=2, ReturnedCount=2\nAfterGetStubEntry: StubPtr=0x55605b598a20, CountField=2, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b598a20, CountField=2, ReturnedCount=2\nAfterGetStubEntry: StubPtr=0x55605b598a20, CountField=3, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b598a20, CountField=3, ReturnedCount=3\nAfterGetStubEntry: StubPtr=0x55605b59d100, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b59d100, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x55605b597280, CountField=3, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b597280, CountField=3, ReturnedCount=3\nAfterGetStubEntry: StubPtr=0x55605b59bde0, CountField=3, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b59bde0, CountField=3, ReturnedCount=3\nAfterGetStubEntry: StubPtr=0x55605b598a20, CountField=3, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b598a20, CountField=3, ReturnedCount=3\nAfterGetStubEntry: StubPtr=0x55605b59d100, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x55605b59d100, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x558fa7b9a3a0, CountField=1, ReturnedCount=0\nBeforeReturn_NonNull: StubPtr=0x558fa7b9a3a0, CountField=1, ReturnedCount=1\nAfterGetStubEntry: StubPtr=0x558fa7b9a3a0, CountField=1, ReturnedCount=0\nBeforeRe\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In UT_GetStubCount the local pointer StubPtr is only used to read the entry (Count = StubPtr->Data.Rc.Count;) and never used to modify the pointed object. Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so declaring the local as const UT_StubTableEntry_t *StubPtr is appropriate. Assigning the non-const result of UT_GetStubEntry to a pointer-to-const is allowed (no cast required), so there is no barrier to making this change. The provided execution log also only shows reads of the Count field, supporting that the pointer could be const-qualified."
}