{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion if any of the called utilities call OS_printf. For example, if OS_DEBUG is implemented on top of OS_printf (OS_printf -> OS_DEBUG -> OS_printf) or if OS_ConsoleWrite/BUGCHECK_VOID eventually call OS_printf, this creates an indirect self-call and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrFromString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1036.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrFromString_Impl:\n```c\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrFromString_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n/* Probe helper: append formatted log entries to /tmp/logs/1036.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1036.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    probe_log(\"ENTRY: OS_SocketAddrFromString_Impl Addr=%p string=\\\"%s\\\" pid=%d\", (void *)Addr, (string != NULL) ? string : \"(null)\", (int)getpid());\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    probe_log(\"Accessor computed at %p; sa_family=%d\", (void *)Accessor, Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            probe_log(\"CASE AF_INET: addrbuffer=%p\", addrbuffer);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            probe_log(\"CASE AF_INET6: addrbuffer=%p\", addrbuffer);\n            break;\n#endif\n        default:\n            probe_log(\"DEFAULT: unsupported sa_family=%d -- returning OS_ERR_BAD_ADDRESS\", Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    probe_log(\"About to call inet_pton with family=%d string=\\\"%s\\\" addrbuffer=%p\", Accessor->sa.sa_family, (string != NULL) ? string : \"(null)\", addrbuffer);\n\n    {\n        int inet_res = inet_pton(Accessor->sa.sa_family, string, addrbuffer);\n        probe_log(\"inet_pton returned %d\", inet_res);\n\n        if (inet_res != 1)\n        {\n            probe_log(\"inet_pton failed for string=\\\"%s\\\" family=%d -- returning OS_ERROR\", (string != NULL) ? string : \"(null)\", Accessor->sa.sa_family);\n            return OS_ERROR;\n        }\n\n        /* Log the raw bytes written into addrbuffer for additional evidence */\n        if (Accessor->sa.sa_family == AF_INET)\n        {\n            unsigned char *bytes = (unsigned char *)addrbuffer;\n            probe_log(\"ADDR BYTES (IPv4): %u.%u.%u.%u\", (unsigned)bytes[0], (unsigned)bytes[1], (unsigned)bytes[2], (unsigned)bytes[3]);\n        }\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        else if (Accessor->sa.sa_family == AF_INET6)\n        {\n            unsigned char *bytes = (unsigned char *)addrbuffer;\n            char buf[128];\n            size_t pos = 0;\n            pos += snprintf(buf + pos, sizeof(buf) - pos, \"ADDR BYTES (IPv6):\");\n            for (int i = 0; i < 16 && pos + 4 < sizeof(buf); ++i)\n            {\n                pos += snprintf(buf + pos, sizeof(buf) - pos, \" %02x\", bytes[i]);\n            }\n            probe_log(\"%s\", buf);\n        }\n#endif\n    }\n\n    probe_log(\"EXIT: returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n"
}