{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the switch default branch the code does an unconditional 'return OS_ERR_BAD_ADDRESS;' and then has a 'break;' on the next line. That 'break' is unreachable (control never reaches it because the function has already returned), which violates MISRA C 2023 Rule 2.1. The unreachable 'break' should be removed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrFromString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1031.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrFromString_Impl:\n```c\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrFromString_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <arpa/inet.h>\n#include <sys/types.h>\n\nstatic void OS_SocketAddr_Log(const char *format, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1031.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, format);\n    vfprintf(f, format, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    OS_SocketAddr_Log(\"OS_SocketAddrFromString_Impl: entry, family=%d, string=\\\"%s\\\"\",\n                      (int)Accessor->sa.sa_family, string ? string : \"(null)\");\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            OS_SocketAddr_Log(\"case AF_INET: addrbuffer=%p\", addrbuffer);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            OS_SocketAddr_Log(\"case AF_INET6: addrbuffer=%p\", addrbuffer);\n            break;\n#endif\n        default:\n            /* Log the unexpected family and return the same error as before. */\n            OS_SocketAddr_Log(\"default: unexpected family=%d, returning OS_ERR_BAD_ADDRESS\",\n                              (int)Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    {\n        int inet_ret = inet_pton(Accessor->sa.sa_family, string, addrbuffer);\n        OS_SocketAddr_Log(\"inet_pton returned %d for family=%d, addrbuffer=%p\",\n                          inet_ret, (int)Accessor->sa.sa_family, addrbuffer);\n\n        if (inet_ret != 1)\n        {\n            OS_SocketAddr_Log(\"inet_pton failed, returning OS_ERROR\");\n            return OS_ERROR;\n        }\n    }\n\n    OS_SocketAddr_Log(\"success, returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n"
}