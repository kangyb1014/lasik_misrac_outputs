{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_BinSemDelete calls OS_ObjectIdFinalizeDelete which calls OS_NotifyEvent (via OS_NotifyEvent -> OS_SharedGlobalVars.EventHandler if non-NULL). If the registered EventHandler (or code it calls, e.g. OS_CleanUpObject) calls OS_BinSemDelete again, this creates an indirect recursive call chain: OS_BinSemDelete -> OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> EventHandler -> OS_BinSemDelete.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1176.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete:\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe/logging helper - append a line to /tmp/logs/1176.txt\n */\nstatic void OS_BinSemDelete_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1176.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    if (tm_info != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm_info) > 0)\n        {\n            fprintf(fp, \"%s \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    static int call_depth = 0;\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and call depth */\n    call_depth++;\n    OS_BinSemDelete_Log(\"ENTER OS_BinSemDelete: depth=%d sem_id=%lld\", call_depth, (long long)sem_id);\n\n    /* Capture initial state before the first external call */\n    OS_BinSemDelete_Log(\"Calling OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, %lld)\", (long long)sem_id);\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    OS_BinSemDelete_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token address (opaque) to help correlate object identity in logs */\n        OS_BinSemDelete_Log(\"Token address=%p (stack address of token)\", (void *)&token);\n\n        /* Call implementation and log before/after */\n        OS_BinSemDelete_Log(\"Calling OS_BinSemDelete_Impl(&token)\");\n        return_code = OS_BinSemDelete_Impl(&token);\n        OS_BinSemDelete_Log(\"OS_BinSemDelete_Impl returned %ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        OS_BinSemDelete_Log(\"Calling OS_ObjectIdFinalizeDelete(return_code=%ld, &token=%p)\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_BinSemDelete_Log(\"OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n    }\n    else\n    {\n        OS_BinSemDelete_Log(\"Skipping delete impl/finalize because OS_ObjectIdGetById failed with %ld\", (long)return_code);\n    }\n\n    OS_BinSemDelete_Log(\"EXIT OS_BinSemDelete: depth=%d returning %ld\", call_depth, (long)return_code);\n    call_depth--;\n\n    return return_code;\n}\n"
}