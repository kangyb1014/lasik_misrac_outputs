{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete:\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BinSemDelete:\ntypedef int32_t   int32\n...\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_SUCCESS (0)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_BinSemDelete_Impl(const OS_object_token_t *token)\n{\n    OS_impl_binsem_internal_record_t *sem;\n    int32                             return_code;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    if (pthread_cond_destroy(&(sem->cv)) != 0)\n    {\n        /* sem could be busy, i.e. some task is pending on it already.\n         * that means it cannot be deleted at this time. */\n        return_code = OS_SEM_FAILURE;\n    }\n    else\n    {\n        /* Now that the CV is destroyed this sem is unusable,\n         * so we must do our best to clean everything else.  Even if cleanup\n         * does not fully work, returning anything other than OS_SUCCESS would\n         * suggest to the caller that the sem is still usable which it is not.\n         */\n        return_code = OS_SUCCESS;\n\n        /* destroy the associated mutex --\n         * Note that this might fail if the mutex is locked,\n         * but there is no sane way to recover from that (see above). */\n        pthread_mutex_destroy(&(sem->id));\n    }\n\n    return return_code;\n}\n...\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are present in the provided code. Specifically:\n\n- No use of compiler-specific keywords or constructs such as __attribute__, __extension__, __builtin_*, __asm__, __inline__ (compiler-specific form), typeof, statement-expressions ({ ... }) or other known GCC/Clang/MSVC language extensions appears in the shown fragments.\n\n- Calls to pthread_cond_destroy and pthread_mutex_destroy are POSIX API/library calls, not compiler language extensions, so they are not relevant to MISRA C 2023 Rule 1.2.\n\n- The typedefs (int32, osal_id_t, OS_object_token_t) and the macro OS_SUCCESS are standard C idioms and do not constitute language extensions.\n\n- The pointer dereference (*token) and normal function call/return usage are standard C and do not indicate extensions.\n\nNote: A macro invocation such as OS_OBJECT_TABLE_GET could theoretically expand to code that uses a compiler extension, but its definition was not provided in the supplied code. Because the extension must be explicitly visible in the code fragment being judged, and no such macro expansion or other extension usage is shown here, there are no suspicious fragments to report. If you can provide the definitions of macros such as OS_OBJECT_TABLE_GET or other hidden macros, I can re-check those expansions for any compiler-specific extensions."
}