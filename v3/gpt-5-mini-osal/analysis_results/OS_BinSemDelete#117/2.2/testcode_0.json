{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'return_code' in OS_ObjectIdConvertToken is initialized at declaration with OS_ERROR: \"int32 return_code = OS_ERROR;\". This initial assignment is never read: the function either returns early (before using the variable) or assigns return_code inside the main loop/branches before any use. Therefore the initialization has no effect and can be removed without changing behavior \u2014 it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1172.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete:\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/*\n * Probe logging utility for reproducing/control-flow evidence.\n * Appends concise messages to /tmp/logs/1172.txt so other agents can\n * observe the sequence of calls and the return codes seen by\n * OS_BinSemDelete without changing functional behavior.\n */\nstatic void OS_1172_LogMessage(const char *stage, int32_t rc, const void *token_addr, uintptr_t sem_id_val)\n{\n    FILE *f = fopen(\"/tmp/logs/1172.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, silently continue to preserve original behavior */\n        return;\n    }\n\n    /* Print a single-line record: stage, return code, token address, sem_id as uintptr */\n    fprintf(f, \"[OS_BinSemDelete] %s: rc=%d, token=%p, sem_id=0x%\" PRIxPTR \"\\n\",\n            stage, (int)rc, token_addr, sem_id_val);\n\n    fclose(f);\n}\n\n/*\n * Modified OS_BinSemDelete with probes inserted. Logic and call sequence\n * are preserved exactly; logs are appended at key points to show the\n * control path and state (return codes and token address).\n */\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry (record sem_id as uintptr_t). Do not modify any program state. */\n    OS_1172_LogMessage(\"entry\", 0, (const void *)&token, (uintptr_t)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after attempting to get the object by id */\n    OS_1172_LogMessage(\"after_get_by_id\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* About to call the implementation-specific delete */\n        OS_1172_LogMessage(\"before_impl\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Log result of implementation delete */\n        OS_1172_LogMessage(\"after_impl\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log result of finalize */\n        OS_1172_LogMessage(\"after_finalize\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n    }\n\n    /* Log exit and returned code */\n    OS_1172_LogMessage(\"exit\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n    return return_code;\n}\n"
}