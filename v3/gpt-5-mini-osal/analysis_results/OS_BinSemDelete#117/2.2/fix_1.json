{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_1172_LogMessage(const char *stage, int32_t rc, const void *token_addr, uintptr_t sem_id_val)\n{\n    FILE *f = fopen(\"/tmp/logs/1172.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, silently continue to preserve original behavior */\n        return;\n    }\n\n    /* Print a single-line record: stage, return code, token address, sem_id as uintptr */\n    fprintf(f, \"[OS_BinSemDelete] %s: rc=%d, token=%p, sem_id=0x%\" PRIxPTR \"\\n\",\n            stage, (int)rc, token_addr, sem_id_val);\n\n    fclose(f);\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry (record sem_id as uintptr_t). Do not modify any program state. */\n    OS_1172_LogMessage(\"entry\", 0, (const void *)&token, (uintptr_t)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after attempting to get the object by id */\n    OS_1172_LogMessage(\"after_get_by_id\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* About to call the implementation-specific delete */\n        OS_1172_LogMessage(\"before_impl\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Log result of implementation delete */\n        OS_1172_LogMessage(\"after_impl\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log result of finalize */\n        OS_1172_LogMessage(\"after_finalize\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n    }\n\n    /* Log exit and returned code */\n    OS_1172_LogMessage(\"exit\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpanxpz3pm/src/src/os/shared/src/osapi-binsem.c:1:\n/tmp/tmpanxpz3pm/src/src/os/shared/src/osapi-binsem.c: In function 'OS_1172_LogMessage':\n/tmp/tmpanxpz3pm/src/src/os/shared/src/osapi-binsem.c:145:68: error: expected ')' before 'PRIxPTR'\n  145 |     fprintf(f, \"[OS_BinSemDelete] %s: rc=%d, token=%p, sem_id=0x%\" PRIxPTR \"\\n\",\n      |                                                                    ^~~~~~~\n/tmp/tmpanxpz3pm/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpanxpz3pm/src/src/os/shared/src/osapi-binsem.c:50:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   49 | #include \"os-shared-idmap.h\"\n  +++ |+#include <inttypes.h>\n   50 | \nIn file included from /tmp/tmpanxpz3pm/src/src/os/shared/src/osapi-binsem.c:1:\n/tmp/tmpanxpz3pm/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpanxpz3pm/src/src/os/shared/src/osapi-binsem.c:145:5: note: in expansion of macro 'fprintf'\n  145 |     fprintf(f, \"[OS_BinSemDelete] %s: rc=%d, token=%p, sem_id=0x%\" PRIxPTR \"\\n\",\n      |     ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/__/__/os/shared/src/osapi-binsem.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3167: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <inttypes.h>\n\nstatic void OS_1172_LogMessage(const char *stage, int32_t rc, const void *token_addr, uintptr_t sem_id_val)\n{\n    FILE *f = fopen(\"/tmp/logs/1172.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, silently continue to preserve original behavior */\n        return;\n    }\n\n    /* Print a single-line record: stage, return code, token address, sem_id as uintptr */\n    fprintf(f, \"[OS_BinSemDelete] %s: rc=%d, token=%p, sem_id=0x%\" PRIxPTR \"\\n\",\n            stage, (int)rc, token_addr, sem_id_val);\n\n    fclose(f);\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry (record sem_id as uintptr_t). Do not modify any program state. */\n    OS_1172_LogMessage(\"entry\", 0, (const void *)&token, (uintptr_t)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after attempting to get the object by id */\n    OS_1172_LogMessage(\"after_get_by_id\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* About to call the implementation-specific delete */\n        OS_1172_LogMessage(\"before_impl\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Log result of implementation delete */\n        OS_1172_LogMessage(\"after_impl\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log result of finalize */\n        OS_1172_LogMessage(\"after_finalize\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n    }\n\n    /* Log exit and returned code */\n    OS_1172_LogMessage(\"exit\", (int32_t)return_code, (const void *)&token, (uintptr_t)sem_id);\n\n    return return_code;\n}\n",
  "explanation": "Added #include <inttypes.h> to provide the PRIxPTR macro used in the fprintf format string. No other logic or symbols were changed."
}