{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtSprintf:\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "char *UtSprintf(const char *Spec, ...)",
    "static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];",
    "return Buf[TextIndex].Text;"
  ],
  "explanation": "Other fragments do not require investigation with respect to MISRA C 2023 Rule 8.13: the Spec parameter is already const-qualified (const char *Spec) so it complies; va_list Args and the va_start/va_end usage are not pointers to object types that can be const-qualified in this context; TextIndex is an integer, not a pointer; the use of the buffer as the destination of vsnprintf requires a writable (non-const) destination, so the buffer itself must be mutable. The three reported fragments are the points where a non-const pointer type is exposed (function return and the static buffer declaration/usage) and therefore should be investigated to determine whether the returned pointer could or should be to a const-qualified type or whether the buffer type/usage justify the non-const pointer."
}