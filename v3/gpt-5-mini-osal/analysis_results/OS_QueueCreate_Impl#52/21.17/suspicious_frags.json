{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_QueueCreate_Impl:\n```c\nint32 OS_QueueCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    int                              return_code;\n    mqd_t                            queueDesc;\n    struct mq_attr                   queueAttr;\n    char                             name[OS_MAX_API_NAME * 2];\n    OS_impl_queue_internal_record_t *impl;\n    OS_queue_internal_record_t *     queue;\n\n    impl  = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n    queue = OS_OBJECT_TABLE_GET(OS_queue_table, *token);\n\n    /* set queue attributes */\n    memset(&queueAttr, 0, sizeof(queueAttr));\n    queueAttr.mq_maxmsg  = queue->max_depth;\n    queueAttr.mq_msgsize = queue->max_size;\n\n    /*\n     * The \"TruncateQueueDepth\" indicates a soft limit to the size of a queue.\n     * If nonzero, anything larger than this will be silently truncated\n     * (Supports running applications as non-root)\n     */\n    if (POSIX_GlobalVars.TruncateQueueDepth > 0 && POSIX_GlobalVars.TruncateQueueDepth < queueAttr.mq_maxmsg)\n    {\n        queueAttr.mq_maxmsg = POSIX_GlobalVars.TruncateQueueDepth;\n    }\n\n    /*\n    ** Construct the queue name:\n    ** The name will consist of \"/<process_id>.queue_name\"\n    */\n    snprintf(name, sizeof(name), \"/%d.%s\", (int)getpid(), queue->queue_name);\n\n    /*\n     ** create message queue\n     */\n    queueDesc = mq_open(name, O_CREAT | O_RDWR, 0666, &queueAttr);\n    if (queueDesc == (mqd_t)(-1))\n    {\n        OS_DEBUG(\"OS_QueueCreate Error. errno = %d (%s)\\n\", errno, strerror(errno));\n        if (errno == EINVAL)\n        {\n            OS_DEBUG(\"Your queue depth may be too large for the\\n\");\n            OS_DEBUG(\"OS to handle. Please check the msg_max\\n\");\n            OS_DEBUG(\"parameter located in /proc/sys/fs/mqueue/msg_max\\n\");\n            OS_DEBUG(\"on your Linux file system and raise it if you\\n\");\n            OS_DEBUG(\" need to or run as root\\n\");\n        }\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        impl->id    = queueDesc;\n        return_code = OS_SUCCESS;\n\n        /*\n         * Unlink the queue right now --\n         * queues have kernel persistence and if we do a lot of restarts (i.e. during debugging)\n         * a lot of stale message queues will collect in the system.  It is OK to unlink right now\n         * as this only affects the ability of another process to open the same queue, but we do\n         * not need that to happen anyway.\n         */\n        if (mq_unlink(name) != 0)\n        {\n            OS_DEBUG(\"OS_QueueDelete Error during mq_unlink(). errno = %d (%s)\\n\", errno, strerror(errno));\n            /* Note - since the queue is already closed, we cannot really handle this failure gracefully,\n             * The queue is no longer usable so we can't return an error and go back to the way things were.\n             * In this case we need to return OS_SUCCESS so the rest of the entry will be cleaned up.\n             */\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_QueueCreate_Impl:\n#define OS_MAX_API_NAME 20\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "char                             name[OS_MAX_API_NAME * 2];",
    "OS_DEBUG(\"OS_QueueDelete Error during mq_unlink(). errno = %d (%s)\\n\", errno, strerror(errno));",
    "OS_DEBUG(\"OS_QueueCreate Error. errno = %d (%s)\\n\", errno, strerror(errno));",
    "memset(&queueAttr, 0, sizeof(queueAttr));",
    "snprintf(name, sizeof(name), \"/%d.%s\", (int)getpid(), queue->queue_name);"
  ],
  "explanation": "The MISRA C Rule 21.17 concerns uses of string-handling routines that can read from or write to character buffers and hence potentially access beyond object bounds. The snprintf call is a primary candidate because it reads queue->queue_name (requires it to be properly NUL-terminated and within bounds) and writes into the local name buffer (whose size is OS_MAX_API_NAME * 2). The name buffer declaration is included to verify that the destination size is sufficient for the formatted content (pid digits + punctuation + queue name). memset is included because it is a standard <string.h> function; its usage should be checked to ensure the pointer and size correspond to the actual object size (here &queueAttr and sizeof(queueAttr)). The OS_DEBUG lines that pass strerror(...) are included so the origin and handling of the returned string can be reviewed (even though strerror returns static storage rather than writing into a caller buffer). Other fragments in the function (assignments to queueAttr fields, mq_open/mq_unlink calls, simple integer assignments, and return handling) do not invoke <string.h> string-handling functions or otherwise perform pointer-based reads/writes of character buffers and therefore do not need investigation under Rule 21.17."
}