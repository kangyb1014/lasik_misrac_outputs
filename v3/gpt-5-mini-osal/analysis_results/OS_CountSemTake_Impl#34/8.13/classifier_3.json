{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake_Impl:\n```c\nint32 OS_CountSemTake_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_wait(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemTake_Impl:\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (sem_wait(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: sem_wait(&impl->id) passes a pointer to a semaphore that will be modified by sem_wait. The pointer cannot (and should not) point to a const-qualified type because the semaphore object is mutated. The function parameter token is already const-qualified. Therefore Rule 8.13 is not violated in this fragment."
}