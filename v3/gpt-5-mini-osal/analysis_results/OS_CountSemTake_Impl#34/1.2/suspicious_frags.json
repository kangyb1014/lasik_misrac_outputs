{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake_Impl:\n```c\nint32 OS_CountSemTake_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_wait(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemTake_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions were found in the provided code. Rationale:\n\n- The code uses standard C constructs: function definition, pointer dereference, array indexing, return statements, typedefs, and macros \u2014 none of these are compiler extensions.\n- The use of \"static inline\" for OS_ObjectIndexFromToken is standard C (C99 and later) and not a compiler-specific extension.\n- The macro OS_OBJECT_TABLE_GET expands to address-of and array indexing operations (&tbl[...]) which are standard preprocessor and C expressions. The invocation OS_OBJECT_TABLE_GET(..., *token) results in &(*token) which is valid C and not an extension.\n- sem_t and sem_wait are POSIX APIs, not compiler language extensions; their use does not imply a compiler extension violation of MISRA Rule 1.2 (the rule targets language/compiler extensions explicitly documented by the compiler, such as __attribute__, typeof, statement expressions ({ ... }), inline assembly, etc.).\n- No uses of known compiler-specific extension tokens were detected (e.g. __attribute__, __asm__, __builtin_*, typeof, ({ ... }), register storage-class misuse, anonymous structs/unions with extension syntax, or other vendor-specific keywords).\n\nTherefore there are no fragments requiring further investigation under MISRA C 2023 Rule 1.2."
}