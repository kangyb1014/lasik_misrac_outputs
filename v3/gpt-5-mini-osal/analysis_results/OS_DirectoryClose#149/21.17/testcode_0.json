{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset(token, 0, sizeof(*token)) dereferences the pointer parameter 'token' without any validation. If a caller passes token == NULL (for example: OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, NULL)) the memset will attempt to write via a NULL pointer, causing an access beyond the bounds of the referenced object. Likewise, if a caller passes a pointer to a smaller object or an incompatible type, the memset could overwrite memory past that object. Therefore this use of memset can result in out-of-bounds accesses and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryClose code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1499.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryClose as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryClose:\n```c\nint32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryClose code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1499.txt */\nstatic void OS_LogTokenState(const char *stage, osal_id_t dir_id, OS_object_token_t *token, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1499.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot open the file, do not alter program flow. */\n        return;\n    }\n\n    /* Log the high-level stage and primary return code */\n    fprintf(f, \"OS_DirectoryClose: stage=%s dir_id=0x%llx return_code=%ld token_ptr=%p\\n\",\n            stage,\n            (unsigned long long)dir_id,\n            (long)return_code,\n            (void *)token);\n\n    /* Safely dump the token bytes if token is non-NULL. The token type must be complete\n     * here because the original function instantiates it on the stack. */\n    if (token != NULL)\n    {\n        size_t i;\n        size_t n = sizeof *token;\n        unsigned char *p = (unsigned char *)token;\n\n        fprintf(f, \" token_size=%zu bytes\\n\", n);\n        fprintf(f, \" token_bytes=\");\n        for (i = 0; i < n; ++i)\n        {\n            /* Print each byte as two hex digits without introducing additional buffer functions */\n            fprintf(f, \"%02X\", (unsigned int)p[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n    else\n    {\n        fprintf(f, \" token is NULL\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry */\n    OS_LogTokenState(\"entry\", dir_id, NULL, 0);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n\n    /* Log result of GetById and the token snapshot */\n    OS_LogTokenState(\"after_GetById\", dir_id, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirClose_Impl(&token);\n\n        /* Log after implementation close */\n        OS_LogTokenState(\"after_DirClose_Impl\", dir_id, &token, return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log finalization result */\n        OS_LogTokenState(\"after_FinalizeDelete\", dir_id, &token, return_code);\n    }\n    else\n    {\n        /* Log that we are exiting early due to invalid id */\n        OS_LogTokenState(\"exit_invalid_id\", dir_id, &token, return_code);\n    }\n\n    return return_code;\n}\n"
}