{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation can occur when the computed destination start or the source pointer do not reference at least ActualCopy bytes. Example: if StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize (e.g. TotalSize = 10, Position = 15) then the subtraction underflows producing a very large ActualCopy; even if ActualCopy is subsequently clamped by MaxSize (e.g. MaxSize = 2) the code still writes starting at BasePtr + 15 which is beyond the allocated buffer (TotalSize == 10). Another scenario is BasePtr == NULL (or LocalBuffer == NULL) \u2014 there is no null check before the memcpy, so the call can dereference/access invalid memory. In these cases the memcpy call can access beyond the bounds of the objects referenced by its pointer parameters, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3169.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyFromLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Helper: log state and control flow for UT_Stub_CopyFromLocal into file /tmp/logs/3169.txt */\nstatic void UT_LogCopyState(UT_EntryKey_t FuncKey, const UT_StubTableEntry_t *StubPtr,\n                            const void *LocalBuffer, size_t MaxSize, size_t ActualCopy)\n{\n    FILE *f = fopen(\"/tmp/logs/3169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log high level call information */\n    fprintf(f, \"UT_Stub_CopyFromLocal invoked: FuncKey=%p, StubPtr=%p, LocalBuffer=%p, MaxSize=%zu, ActualCopy=%zu\\n\",\n            (void *)(uintptr_t)FuncKey, (const void *)StubPtr, LocalBuffer, MaxSize, ActualCopy);\n\n    if (StubPtr != NULL)\n    {\n        /* Safely read fields that were already accessed by the original function */\n        const void *baseptr = (const void *)StubPtr->Data.Buff.BasePtr;\n        size_t position = StubPtr->Data.Buff.Position;\n        size_t totalsize = StubPtr->Data.Buff.TotalSize;\n\n        /* Compute remaining in the same manner as the original code (but avoid performing pointer arithmetic that would dereference memory) */\n        size_t remaining = 0;\n        if (totalsize >= position)\n        {\n            remaining = totalsize - position;\n        }\n        else\n        {\n            /* Preserve the numeric result that the original subtraction would produce on unsigned types,\n             * and also log that an underflow/overshoot has occurred. */\n            remaining = totalsize - position; /* this is intentionally the same unsigned subtraction */\n        }\n\n        /* Convert base pointer to an integer for logging the computed destination address without doing pointer indexing.\n         * This avoids dereferencing while still exposing the numeric address for debugging. */\n        uintptr_t base_int = (uintptr_t)baseptr;\n        uintptr_t dest_int = base_int + (uintptr_t)position;\n\n        fprintf(f, \"  BasePtr=%p, Position=%zu, TotalSize=%zu, Remaining(before clamp)=%zu\\n\",\n                baseptr, position, totalsize, remaining);\n        fprintf(f, \"  Computed destination address (as integer) = 0x%\" PRIxPTR \"\\n\", dest_int);\n\n        if (position > totalsize)\n        {\n            fprintf(f, \"  WARNING: Position (=%zu) > TotalSize (=%zu) -> subtraction underflow/overshoot occurred\\n\",\n                    position, totalsize);\n        }\n        if (baseptr == NULL)\n        {\n            fprintf(f, \"  WARNING: BasePtr is NULL (will be used as destination in memcpy)\\n\");\n        }\n        if (LocalBuffer == NULL)\n        {\n            fprintf(f, \"  WARNING: LocalBuffer is NULL (will be used as source in memcpy)\\n\");\n        }\n\n        /* Log a note about clamping by MaxSize so reproducer can see both pre- and post-clamp sizes */\n        fprintf(f, \"  MaxSize=%zu, ActualCopy(after clamp)=%zu\\n\", MaxSize, ActualCopy);\n    }\n\n    fprintf(f, \"--- end log entry ---\\n\\n\");\n    fclose(f);\n}\n\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        /* Log the important state right before the memcpy so a reproducer can inspect values that lead to a violation */\n        UT_LogCopyState(FuncKey, StubPtr, LocalBuffer, MaxSize, ActualCopy);\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n"
}