{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize the subtraction ActualCopy = TotalSize - Position will underflow (size_t wraparound) producing a very large ActualCopy. The subsequent clamp (if (MaxSize < ActualCopy) ActualCopy = MaxSize;) can still leave ActualCopy larger than the actual remaining space (which is zero when Position > TotalSize). That value is then passed to memcpy, causing writes beyond the destination buffer bounds. Therefore the fragment does not guarantee prevention of out\u2011of\u2011bounds access and can violate Rule 21.17 in this scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3169.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyFromLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable logs to the required file. */\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not interfere with original logic. */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\n/*\n * Modified UT_Stub_CopyFromLocal with inserted probes. The original logic is\n * preserved; probes only log internal state to /tmp/logs/3169.txt to allow\n * reproduction and evidence collection for the described violation scenario.\n */\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    UT_LogProbe(\"UT_Stub_CopyFromLocal called: FuncKey=%llu, LocalBuffer=%p, MaxSize=%zu, StubPtr=%p\",\n                (unsigned long long)FuncKey, LocalBuffer, MaxSize, (void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Log initial buffer state */\n        UT_LogProbe(\"Stub found: TotalSize=%zu, Position=%zu, BasePtr=%p\",\n                    StubPtr->Data.Buff.TotalSize,\n                    StubPtr->Data.Buff.Position,\n                    (void *)StubPtr->Data.Buff.BasePtr);\n\n        /* Original subtraction (may underflow if Position > TotalSize) */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        UT_LogProbe(\"After subtraction: ActualCopy=%zu (TotalSize=%zu - Position=%zu)\",\n                    ActualCopy,\n                    StubPtr->Data.Buff.TotalSize,\n                    StubPtr->Data.Buff.Position);\n\n        if (MaxSize < ActualCopy)\n        {\n            UT_LogProbe(\"Clamping: MaxSize (%zu) < ActualCopy (%zu). Setting ActualCopy = MaxSize\",\n                        MaxSize, ActualCopy);\n            ActualCopy = MaxSize;\n        }\n        else\n        {\n            UT_LogProbe(\"No clamping required: MaxSize=%zu, ActualCopy=%zu\", MaxSize, ActualCopy);\n        }\n\n        UT_LogProbe(\"About to memcpy: dest=%p, src=%p, ActualCopy=%zu\",\n                    (void *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position],\n                    LocalBuffer,\n                    ActualCopy);\n\n        /* Preserve original memcpy behavior */\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n\n        UT_LogProbe(\"memcpy completed (requested %zu bytes)\", ActualCopy);\n\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /* Log position after advance and possible clear */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_LogProbe(\"Position (%zu) >= TotalSize (%zu): clearing stub entry\",\n                        StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n            UT_ClearStubEntry(StubPtr);\n        }\n        else\n        {\n            UT_LogProbe(\"Position after copy: %zu (TotalSize=%zu)\",\n                        StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n        }\n    }\n    else\n    {\n        UT_LogProbe(\"No stub entry found for FuncKey=%llu\", (unsigned long long)FuncKey);\n    }\n\n    UT_LogProbe(\"UT_Stub_CopyFromLocal returning ActualCopy=%zu\", ActualCopy);\n\n    return ActualCopy;\n}\n"
}