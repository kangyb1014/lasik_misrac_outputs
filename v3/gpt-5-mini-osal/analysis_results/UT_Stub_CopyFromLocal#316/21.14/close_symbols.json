{
  "user_message": "Target function code is:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'UT_Stub_CopyFromLocal': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry'], 'callers': ['UT_DefaultHandler_OS_SetLocalTime', 'UT_GenericWriteStub', 'UT_DefaultHandler_OS_printf', 'UT_DefaultHandler_OS_SocketSendTo']}, 'UT_GetStubEntry': {'callees': [], 'callers': ['UT_ConfigureGenericStubReturnValue', 'UT_ClearDeferredRetcode', 'UT_ClearDefaultReturnValue', 'UT_GetStubRetcodeAndCount', 'UT_GetStubCount', 'UT_Stub_RegisterReturnType', 'UT_Stub_GetReturnValuePtr', 'UT_SetDataBuffer', 'UT_GetDataBuffer', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyFromLocal', 'UT_DoSetHookFunction', 'UT_Stub_RegisterContextWithMetaData', 'UT_Stub_CopyToReturnValue', 'UT_Stub_FindRetvalConfig', 'UT_DefaultStubImplWithArgs', 'UT_ExecuteBasicHandler', 'UT_ExecuteVaHandler']}, 'UT_ClearStubEntry': {'callees': [], 'callers': ['UT_ResetState', 'UT_ClearDeferredRetcode', 'UT_ClearDefaultReturnValue', 'UT_Stub_RegisterReturnType', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyFromLocal', 'UT_DoSetHookFunction', 'UT_DefaultStubImplWithArgs']}, 'UT_DefaultHandler_OS_SetLocalTime': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyFromLocal'], 'callers': []}, 'UT_GenericWriteStub': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyFromLocal', 'UT_Stub_CopyToReturnValue'], 'callers': ['UT_DefaultHandler_OS_write', 'UT_DefaultHandler_OS_TimedWrite']}, 'UT_DefaultHandler_OS_printf': {'callees': ['UT_Hook_GetArgPtr', 'UtAssert_Message', 'UT_Stub_CopyFromLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SocketSendTo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyFromLocal', 'UT_Stub_CopyToReturnValue'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nThe Standard Library function memcmp shall not be used to compare null terminated strings. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "UT_GetStubEntry",
    "UT_ClearStubEntry",
    "UT_StubTableEntry_t (type/struct definition, including nested Data and Buff fields: BasePtr, Position, TotalSize)",
    "UT_EntryKey_t (type definition)",
    "UT_ENTRYTYPE_DATA_BUFFER (macro/enum value)",
    "memcpy (declaration/definition)",
    "memcmp (declaration/definition)"
  ],
  "explanation": "UT_GetStubEntry \u2014 The target calls this function to obtain the StubPtr. You must inspect its implementation to ensure it does not call memcmp (or otherwise perform forbidden string comparisons) or return/prepare data that implies string comparisons elsewhere. UT_ClearStubEntry \u2014 The target calls this to clear the entry; inspect it to ensure it does not use memcmp for null-terminated string comparison. UT_StubTableEntry_t \u2014 The function reads/writes StubPtr->Data.Buff.* fields. You need the exact struct/type definitions (including BasePtr type, Position, TotalSize and whether BasePtr points to char/byte or NUL-terminated strings) to determine whether the buffers handled are null-terminated strings and therefore whether any subsequent comparisons would violate the MISRA rule. UT_EntryKey_t \u2014 The key type passed into UT_GetStubEntry; its definition may affect how the stub table is indexed or interpreted (e.g., selecting string-based keys or string operations in the lookup). UT_ENTRYTYPE_DATA_BUFFER \u2014 The constant passed to UT_GetStubEntry; knowing its meaning may reveal whether the returned buffers are treated as string buffers. memcpy (declaration/definition) \u2014 The target uses memcpy; include its declaration to confirm it is indeed a memory copy (allowed) and not an alias to a function that internally uses memcmp for comparisons. memcmp (declaration/definition) \u2014 The MISRA rule targets memcmp usage. Include its declaration/definition (and search for all usages) so you can detect any direct or indirect use of memcmp in the target or in UT_GetStubEntry/UT_ClearStubEntry (or related types) that would constitute a violation."
}