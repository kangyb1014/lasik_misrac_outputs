{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG macro is defined as an empty macro (#define OS_DEBUG(__VA_ARGS__)). As a result the statement OS_DEBUG(\"Error creating thread key: %s (%d)\\n\", strerror(ret), ret); expands to an empty/null statement in the compiled code. This null statement is executed but has no effect and its removal would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Posix_GetSchedulerParams code that contains useful probe functions that print useful logs to a file \"/tmp/logs/562.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Posix_GetSchedulerParams as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Posix_GetSchedulerParams:\n```c\nstatic bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n\n    ret = sched_get_priority_min(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n    return true;\n}\n```\n</target_code>\nPlease provide the modified OS_Posix_GetSchedulerParams code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sched.h>\n#include <stdbool.h>\n\n/* Probe logger: appends formatted messages to /tmp/logs/562.txt */\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/562.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /* Log entry and input state */\n    OS_Probe_Log(\"ENTER: OS_Posix_GetSchedulerParams(sched_policy=%d)\", sched_policy);\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    OS_Probe_Log(\"sched_get_priority_max(policy=%d) -> %d (errno=%d: %s)\", sched_policy, ret, errno, strerror(errno));\n    if (ret < 0)\n    {\n        /* Log what the OS_DEBUG call would output so there is evidence even if OS_DEBUG is a no-op */\n        OS_Probe_Log(\"OS_DEBUG_CALL (max): Policy %d: Unable to obtain maximum scheduling priority: %s\", sched_policy, strerror(errno));\n\n        /* Preserve original call (may be a no-op in some builds) */\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n\n        OS_Probe_Log(\"EXIT: returning false due to sched_get_priority_max failure for policy %d\", sched_policy);\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n    OS_Probe_Log(\"Assigned PriorityMax=%d for policy=%d\", (int)PriLim->PriorityMax, sched_policy);\n\n    ret = sched_get_priority_min(sched_policy);\n    OS_Probe_Log(\"sched_get_priority_min(policy=%d) -> %d (errno=%d: %s)\", sched_policy, ret, errno, strerror(errno));\n    if (ret < 0)\n    {\n        /* Log what the OS_DEBUG call would output so there is evidence even if OS_DEBUG is a no-op */\n        OS_Probe_Log(\"OS_DEBUG_CALL (min): Policy %d: Unable to obtain minimum scheduling priority: %s\", sched_policy, strerror(errno));\n\n        /* Preserve original call (may be a no-op in some builds) */\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n\n        OS_Probe_Log(\"EXIT: returning false due to sched_get_priority_min failure for policy %d\", sched_policy);\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n    OS_Probe_Log(\"Assigned PriorityMin=%d for policy=%d\", (int)PriLim->PriorityMin, sched_policy);\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        OS_Probe_Log(\"OS_DEBUG_CALL (spread): Policy %d: Insufficient spread between priority min-max: %d-%d\", sched_policy,\n                     (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n\n        /* Preserve original call (may be a no-op in some builds) */\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n\n        OS_Probe_Log(\"EXIT: returning false due to insufficient spread %d-%d for policy %d\", (int)PriLim->PriorityMin,\n                     (int)PriLim->PriorityMax, sched_policy);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    OS_Probe_Log(\"OS_DEBUG_CALL (success): Policy %d: available, min-max: %d-%d\", sched_policy, (int)PriLim->PriorityMin,\n                 (int)PriLim->PriorityMax);\n\n    /* Preserve original call (may be a no-op in some builds) */\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n\n    OS_Probe_Log(\"EXIT: returning true for policy %d (min=%d max=%d)\", sched_policy, (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n    return true;\n}\n"
}