{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) call can access beyond the bounds of the pointed objects if either pointer is NULL, dangling, or not NUL-terminated. For example, if UT_Stub_RegisterReturnType was previously called with TypeName == NULL or with a pointer to a temporary/stack buffer that goes out of scope, StubPtr->Data.Buff.ContentTypeStr may be NULL or dangling. Later UT_Stub_GetReturnValuePtr will call strcmp on these pointers, causing undefined behavior and out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete:\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1349.txt */\nstatic void OS_CondVarDelete_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1349.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best effort logging only; do not alter behavior if logging unavailable */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    OS_CondVarDelete_ProbeLog(\"OS_CondVarDelete ENTRY: var_id=%lu\\n\", (unsigned long)var_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVarDelete_ProbeLog(\"OS_ObjectIdGetById returned %d; token_addr=%p; token_size=%zu\\n\",\n                              (int)return_code, (void *)&token, (size_t)sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_CondVarDelete_ProbeLog(\"About to call OS_CondVarDelete_Impl with token_addr=%p\\n\", (void *)&token);\n\n        return_code = OS_CondVarDelete_Impl(&token);\n        OS_CondVarDelete_ProbeLog(\"OS_CondVarDelete_Impl returned %d for var_id=%lu\\n\", (int)return_code, (unsigned long)var_id);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_CondVarDelete_ProbeLog(\"OS_ObjectIdFinalizeDelete returned %d for var_id=%lu\\n\", (int)return_code, (unsigned long)var_id);\n    }\n    else\n    {\n        OS_CondVarDelete_ProbeLog(\"OS_ObjectIdGetById failed with code %d for var_id=%lu; skipping delete\\n\", (int)return_code, (unsigned long)var_id);\n    }\n\n    OS_CondVarDelete_ProbeLog(\"OS_CondVarDelete EXIT: var_id=%lu return_code=%d\\n\", (unsigned long)var_id, (int)return_code);\n\n    return return_code;\n}\n"
}