{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_MutSemTake_Impl is declared to take a non-const pointer (e.g. OS_object_token_t *token) but does not modify the pointed-to token, this is a violation: the parameter should be declared as const OS_object_token_t * and the call return_code = OS_MutSemTake_Impl(&token); should pass a pointer-to-const. If, however, OS_MutSemTake_Impl actually modifies the token, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake:\n```c\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        return_code = OS_MutSemTake_Impl(&token);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            mutex->last_owner = OS_TaskGetId();\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append a log line describing the current state to /tmp/logs/2223.txt */\nstatic void OS_MutSemTake_LogState(const char *stage,\n                                   unsigned long sem_id_ul,\n                                   const void *token_ptr,\n                                   const void *mutex_ptr,\n                                   int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2223.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"Stage: %s | sem_id: %lu | return_code: %d | token_ptr: %p | mutex_ptr: %p\\n\",\n            stage, sem_id_ul, return_code, token_ptr, mutex_ptr);\n\n    /* If token_ptr is provided, dump its bytes (useful to determine if Impl modified it) */\n    if (token_ptr != NULL)\n    {\n        /* We don't know the concrete type here; the caller ensures a valid pointer is passed\n           and that sizeof token is meaningful. The caller uses sizeof(token) when calling. */\n        /* The caller will call a specialized helper below to dump token bytes. */\n    }\n\n    fclose(f);\n}\n\n/* Token-byte dumper: separate function so sizeof expression is computed with the real type. */\nstatic void OS_MutSemTake_LogTokenBytes(const char *stage,\n                                        unsigned long sem_id_ul,\n                                        const void *token_ptr,\n                                        size_t token_size)\n{\n    if (token_ptr == NULL || token_size == 0)\n        return;\n\n    FILE *f = fopen(\"/tmp/logs/2223.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"Stage: %s | sem_id: %lu | token bytes:\", stage, sem_id_ul);\n    const unsigned char *b = (const unsigned char *)token_ptr;\n    for (size_t i = 0; i < token_size; ++i)\n    {\n        fprintf(f, \" %02X\", b[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* The original function, augmented with logging probes. */\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Log entry (token not yet initialized, so pass NULL for token_ptr). Cast sem_id to unsigned long for safe printing. */\n    OS_MutSemTake_LogState(\"entry\", (unsigned long)sem_id, NULL, NULL, 0);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ID-to-token resolution and the token bytes if successful. */\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Log token value after successful resolution (before calling Impl) */\n        OS_MutSemTake_LogState(\"after_ObjectIdGetById\", (unsigned long)sem_id, &token, mutex, return_code);\n        OS_MutSemTake_LogTokenBytes(\"after_ObjectIdGetById\", (unsigned long)sem_id, &token, sizeof(token));\n\n        /* Log just before calling the implementation; provide token address and prior bytes. */\n        OS_MutSemTake_LogState(\"before_Impl_call\", (unsigned long)sem_id, &token, mutex, return_code);\n        OS_MutSemTake_LogTokenBytes(\"before_Impl_call\", (unsigned long)sem_id, &token, sizeof(token));\n\n        return_code = OS_MutSemTake_Impl(&token);\n\n        /* Log immediately after Impl returns, including token bytes to detect any modification. */\n        OS_MutSemTake_LogState(\"after_Impl_return\", (unsigned long)sem_id, &token, mutex, return_code);\n        OS_MutSemTake_LogTokenBytes(\"after_Impl_return\", (unsigned long)sem_id, &token, sizeof(token));\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            OS_MutSemTake_LogState(\"before_set_last_owner\", (unsigned long)sem_id, &token, mutex, return_code);\n\n            mutex->last_owner = OS_TaskGetId();\n\n            OS_MutSemTake_LogState(\"after_set_last_owner\", (unsigned long)sem_id, &token, mutex, return_code);\n        }\n    }\n    else\n    {\n        /* Log the failure of ObjectIdGetById */\n        OS_MutSemTake_LogState(\"ObjectIdGetById_failed\", (unsigned long)sem_id, NULL, NULL, return_code);\n    }\n\n    return return_code;\n}\n"
}