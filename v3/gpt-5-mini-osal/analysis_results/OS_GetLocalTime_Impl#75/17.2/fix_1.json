{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    int n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    /* Ensure directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    int fd = open(\"/tmp/logs/756.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0)\n    {\n        ssize_t to_write = (n > (int)sizeof(buf)) ? (ssize_t)sizeof(buf) : (ssize_t)n;\n        /* Write the buffer; ignore write errors for the probe. */\n        (void)write(fd, buf, to_write);\n        (void)close(fd);\n    }\n}\n\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    /* Log entry and pointer state */\n    probe_log(\"ENTER: OS_GetLocalTime_Impl time_struct=%p\\n\", (void *)time_struct);\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    probe_log(\"clock_gettime returned Status=%d (errno=%d)\\n\", Status, errno);\n\n    if (Status == 0)\n    {\n        /* Log the raw timespec values observed */\n        probe_log(\"clock_gettime SUCCESS: tv_sec=%lld tv_nsec=%ld\\n\", (long long)TimeSp.tv_sec, (long)TimeSp.tv_nsec);\n\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n\n        /* Log that the assemble and assignment completed */\n        probe_log(\"Assigned time_struct=%p after OS_TimeAssembleFromNanoseconds\\n\", (void *)time_struct);\n\n        ReturnCode   = OS_SUCCESS;\n\n        probe_log(\"EXIT: OS_GetLocalTime_Impl returning OS_SUCCESS (%d)\\n\", (int)ReturnCode);\n    }\n    else\n    {\n        /* Log failure details before calling OS_DEBUG so that an investigator\n           can see that the code path reached OS_DEBUG. This is important for\n           reproducing the indirect-recursion scenario where OS_DEBUG or the\n           functions it calls might call back into OS_printf/OS_DEBUG. */\n        probe_log(\"clock_gettime FAILED: errno=%d (%s). About to call OS_DEBUG.\\n\", errno, strerror(errno));\n\n        /* Preserve original behavior: keep the OS_DEBUG call here. */\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n\n        ReturnCode = OS_ERROR;\n\n        probe_log(\"EXIT: OS_GetLocalTime_Impl returning OS_ERROR (%d)\\n\", (int)ReturnCode);\n    }\n\n    return ReturnCode;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmplag2zq1a/src/src/os/portable/os-impl-posix-gettime.c: In function 'probe_log':\n/tmp/tmplag2zq1a/src/src/os/portable/os-impl-posix-gettime.c:92:61: error: 'O_APPEND' undeclared (first use in this function)\n   92 |     int fd = open(\"/tmp/logs/756.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n      |                                                             ^~~~~~~~\n/tmp/tmplag2zq1a/src/src/os/portable/os-impl-posix-gettime.c:92:61: note: each undeclared identifier is reported only once for each function it appears in\n/tmp/tmplag2zq1a/src/src/os/portable/os-impl-posix-gettime.c:95:9: error: unknown type name 'ssize_t'; did you mean 'size_t'?\n   95 |         ssize_t to_write = (n > (int)sizeof(buf)) ? (ssize_t)sizeof(buf) : (ssize_t)n;\n      |         ^~~~~~~\n      |         size_t\n/tmp/tmplag2zq1a/src/src/os/portable/os-impl-posix-gettime.c:95:54: error: 'ssize_t' undeclared (first use in this function); did you mean 'size_t'?\n   95 |         ssize_t to_write = (n > (int)sizeof(buf)) ? (ssize_t)sizeof(buf) : (ssize_t)n;\n      |                                                      ^~~~~~~\n      |                                                      size_t\n/tmp/tmplag2zq1a/src/src/os/portable/os-impl-posix-gettime.c:95:62: error: expected ':' before 'sizeof'\n   95 |         ssize_t to_write = (n > (int)sizeof(buf)) ? (ssize_t)sizeof(buf) : (ssize_t)n;\n      |                                                              ^~~~~~\n      |                                                              :\ngmake[2]: *** [unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-posix-gettime.dir/build.make:76: unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-posix-gettime.dir/__/__/os/portable/os-impl-posix-gettime.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:2267: unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-posix-gettime.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_GetLocalTime_Impl as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdarg.h>\n#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <errno.h>\n#include <time.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    int n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    /* Ensure directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    int fd = open(\"/tmp/logs/756.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0)\n    {\n        ssize_t to_write = (n > (int)sizeof(buf)) ? (ssize_t)sizeof(buf) : (ssize_t)n;\n        /* Write the buffer; ignore write errors for the probe. */\n        (void)write(fd, buf, to_write);\n        (void)close(fd);\n    }\n}\n\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    /* Log entry and pointer state */\n    probe_log(\"ENTER: OS_GetLocalTime_Impl time_struct=%p\\n\", (void *)time_struct);\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    probe_log(\"clock_gettime returned Status=%d (errno=%d)\\n\", Status, errno);\n\n    if (Status == 0)\n    {\n        /* Log the raw timespec values observed */\n        probe_log(\"clock_gettime SUCCESS: tv_sec=%lld tv_nsec=%ld\\n\", (long long)TimeSp.tv_sec, (long)TimeSp.tv_nsec);\n\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n\n        /* Log that the assemble and assignment completed */\n        probe_log(\"Assigned time_struct=%p after OS_TimeAssembleFromNanoseconds\\n\", (void *)time_struct);\n\n        ReturnCode   = OS_SUCCESS;\n\n        probe_log(\"EXIT: OS_GetLocalTime_Impl returning OS_SUCCESS (%d)\\n\", (int)ReturnCode);\n    }\n    else\n    {\n        /* Log failure details before calling OS_DEBUG so that an investigator\n           can see that the code path reached OS_DEBUG. This is important for\n           reproducing the indirect-recursion scenario where OS_DEBUG or the\n           functions it calls might call back into OS_printf/OS_DEBUG. */\n        probe_log(\"clock_gettime FAILED: errno=%d (%s). About to call OS_DEBUG.\\n\", errno, strerror(errno));\n\n        /* Preserve original behavior: keep the OS_DEBUG call here. */\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n\n        ReturnCode = OS_ERROR;\n\n        probe_log(\"EXIT: OS_GetLocalTime_Impl returning OS_ERROR (%d)\\n\", (int)ReturnCode);\n    }\n\n    return ReturnCode;\n}\n",
  "explanation": "The compilation errors were due to missing system headers and types/macros (O_APPEND, ssize_t, mkdir, open, write, vsnprintf, etc.). I added the appropriate includes: <stdarg.h>, <stdio.h>, <sys/stat.h>, <sys/types.h>, <fcntl.h>, <unistd.h>, <string.h>, <errno.h>, and <time.h>. No logic was changed; only the required headers were added so the code compiles successfully."
}