{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_GetLocalTime_Impl:\n```c\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    if (Status == 0)\n    {\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n        ReturnCode   = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n        ReturnCode = OS_ERROR;\n    }\n\n    return ReturnCode;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_GetLocalTime_Impl:\ntypedef struct\n{\n    int64 ticks; /**< Ticks elapsed since reference point */\n} OS_time_t\n...\ntypedef int32_t   int32\n...\nstatic inline OS_time_t OS_TimeAssembleFromNanoseconds(int64 seconds, uint32 nanoseconds)\n{\n    OS_time_t result;\n    result.ticks = seconds * OS_TIME_TICKS_PER_SECOND;\n    result.ticks += nanoseconds / OS_TIME_TICK_RESOLUTION_NS;\n    return result;\n}\n...\n#define OSAL_GETTIME_SOURCE_CLOCK CLOCK_REALTIME\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_DEBUG(__VA_ARGS__) ",
    "OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));"
  ],
  "explanation": "No other code constructs in the provided snippets appear to rely on compiler-specific language extensions. The typedefs (int32/int64), static inline function, use of standard stdint types, struct timespec, clock_gettime/CLOCK_REALTIME (POSIX API), simple macro aliasing (OSAL_GETTIME_SOURCE_CLOCK), and ordinary control flow and assignments are standard C (or standard POSIX library usage) and do not constitute language extensions. Therefore they do not need further investigation under MISRA C 2023 Rule 1.2."
}