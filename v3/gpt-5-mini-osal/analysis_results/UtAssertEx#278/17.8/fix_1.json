{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Probe helper: append a log entry with key state information. */\n    static void UtAssert_LogProbe(const char *stage, bool Expr, UtAssert_CaseType_t CT, const char *F, uint32 L)\n    {\n        /* Ensure log directory exists (best-effort). */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        FILE *fp = fopen(\"/tmp/logs/2787.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"%s: Expression=%d, CaseType=%u, File=%s, Line=%u\\n\",\n                    stage, Expr ? 1 : 0, (unsigned)CT, (F != NULL) ? F : \"(null)\", (unsigned)L);\n            fclose(fp);\n        }\n    }\n\n    /* Probe helper for counters/logging of computed values. */\n    static void UtAssert_LogCounters(const char *stage, uint32 TestSegCnt, uint32 TotCases, UtAssert_CaseType_t CT)\n    {\n        (void)mkdir(\"/tmp/logs\", 0777);\n        FILE *fp = fopen(\"/tmp/logs/2787.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"%s: TestSegmentCount=%u, TotalTestCases=%u, CaseType=%u\\n\",\n                    stage, (unsigned)TestSegCnt, (unsigned)TotCases, (unsigned)CT);\n            fclose(fp);\n        }\n    }\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    /* Log state before potential modification of parameter CaseType. */\n    UtAssert_LogProbe(\"BeforeAssignCheck\", Expression, CaseType, File, Line);\n\n    if (Expression)\n    {\n        /* Log that we are about to assign the parameter (this demonstrates the violation scenario). */\n        UtAssert_LogProbe(\"EnteringAssignBranch\", Expression, CaseType, File, Line);\n\n        CaseType = UTASSERT_CASETYPE_PASS;\n\n        /* Log after assignment to capture changed CaseType value. */\n        UtAssert_LogProbe(\"AfterAssignBranch\", Expression, CaseType, File, Line);\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    /* Log computed counters and final CaseType before unlocking. */\n    UtAssert_LogCounters(\"BeforeUnlock\", TestSegmentCount, TotalTestCases, CaseType);\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmprzqhxufl/src/ut_assert/src/utassert.c: In function 'UtAssertEx':\n/tmp/tmprzqhxufl/src/ut_assert/src/utassert.c:223:17: error: invalid storage class for function 'UtAssert_LogProbe'\n  223 |     static void UtAssert_LogProbe(const char *stage, bool Expr, UtAssert_CaseType_t CT, const char *F, uint32 L)\n      |                 ^~~~~~~~~~~~~~~~~\n/tmp/tmprzqhxufl/src/ut_assert/src/utassert.c:237:17: error: invalid storage class for function 'UtAssert_LogCounters'\n  237 |     static void UtAssert_LogCounters(const char *stage, uint32 TestSegCnt, uint32 TotCases, UtAssert_CaseType_t CT)\n      |                 ^~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:76: ut_assert/CMakeFiles/ut_assert.dir/src/utassert.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <sys/stat.h>\n\n/*\n * NOTE: This file preserves the original UtAssertEx implementation.\n * The two helper functions UtAssert_LogProbe and UtAssert_LogCounters\n * have been moved to file scope because defining functions inside\n * another function is not valid C (and 'static' storage class is\n * not allowed for nested functions).\n *\n * Other project types/variables (e.g. UtAssert_CaseType_t, uint32,\n * UT_BSP_Lock, UT_SegmentCounters, etc.) are expected to be provided\n * by the rest of the project, as in the original source.\n */\n\n/* Probe helper: append a log entry with key state information. */\nstatic void UtAssert_LogProbe(const char *stage, bool Expr, UtAssert_CaseType_t CT, const char *F, uint32 L)\n{\n    /* Ensure log directory exists (best-effort). */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    FILE *fp = fopen(\"/tmp/logs/2787.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"%s: Expression=%d, CaseType=%u, File=%s, Line=%u\\n\",\n                stage, Expr ? 1 : 0, (unsigned)CT, (F != NULL) ? F : \"(null)\", (unsigned)L);\n        fclose(fp);\n    }\n}\n\n/* Probe helper for counters/logging of computed values. */\nstatic void UtAssert_LogCounters(const char *stage, uint32 TestSegCnt, uint32 TotCases, UtAssert_CaseType_t CT)\n{\n    (void)mkdir(\"/tmp/logs\", 0777);\n    FILE *fp = fopen(\"/tmp/logs/2787.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"%s: TestSegmentCount=%u, TotalTestCases=%u, CaseType=%u\\n\",\n                stage, (unsigned)TestSegCnt, (unsigned)TotCases, (unsigned)CT);\n        fclose(fp);\n    }\n}\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    /* Log state before potential modification of parameter CaseType. */\n    UtAssert_LogProbe(\"BeforeAssignCheck\", Expression, CaseType, File, Line);\n\n    if (Expression)\n    {\n        /* Log that we are about to assign the parameter (this demonstrates the violation scenario). */\n        UtAssert_LogProbe(\"EnteringAssignBranch\", Expression, CaseType, File, Line);\n\n        CaseType = UTASSERT_CASETYPE_PASS;\n\n        /* Log after assignment to capture changed CaseType value. */\n        UtAssert_LogProbe(\"AfterAssignBranch\", Expression, CaseType, File, Line);\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    /* Log computed counters and final CaseType before unlocking. */\n    UtAssert_LogCounters(\"BeforeUnlock\", TestSegmentCount, TotalTestCases, CaseType);\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n",
  "explanation": "The compilation errors were caused by defining functions inside UtAssertEx (nested functions) with the 'static' storage class, which is not valid in standard C. I moved UtAssert_LogProbe and UtAssert_LogCounters out to file scope as static helper functions. No other logic was changed; the function bodies and call sites remain the same."
}