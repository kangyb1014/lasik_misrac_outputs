{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'CaseType' is assigned in the fragment: if (Expression) { CaseType = UTASSERT_CASETYPE_PASS; }. This directly modifies a function parameter, which violates MISRA C 2023 Rule 17.8 (the pointer exception does not apply here).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2787.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Probe helper: append a log entry with key state information. */\n    static void UtAssert_LogProbe(const char *stage, bool Expr, UtAssert_CaseType_t CT, const char *F, uint32 L)\n    {\n        /* Ensure log directory exists (best-effort). */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        FILE *fp = fopen(\"/tmp/logs/2787.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"%s: Expression=%d, CaseType=%u, File=%s, Line=%u\\n\",\n                    stage, Expr ? 1 : 0, (unsigned)CT, (F != NULL) ? F : \"(null)\", (unsigned)L);\n            fclose(fp);\n        }\n    }\n\n    /* Probe helper for counters/logging of computed values. */\n    static void UtAssert_LogCounters(const char *stage, uint32 TestSegCnt, uint32 TotCases, UtAssert_CaseType_t CT)\n    {\n        (void)mkdir(\"/tmp/logs\", 0777);\n        FILE *fp = fopen(\"/tmp/logs/2787.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"%s: TestSegmentCount=%u, TotalTestCases=%u, CaseType=%u\\n\",\n                    stage, (unsigned)TestSegCnt, (unsigned)TotCases, (unsigned)CT);\n            fclose(fp);\n        }\n    }\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    /* Log state before potential modification of parameter CaseType. */\n    UtAssert_LogProbe(\"BeforeAssignCheck\", Expression, CaseType, File, Line);\n\n    if (Expression)\n    {\n        /* Log that we are about to assign the parameter (this demonstrates the violation scenario). */\n        UtAssert_LogProbe(\"EnteringAssignBranch\", Expression, CaseType, File, Line);\n\n        CaseType = UTASSERT_CASETYPE_PASS;\n\n        /* Log after assignment to capture changed CaseType value. */\n        UtAssert_LogProbe(\"AfterAssignBranch\", Expression, CaseType, File, Line);\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    /* Log computed counters and final CaseType before unlocking. */\n    UtAssert_LogCounters(\"BeforeUnlock\", TestSegmentCount, TotalTestCases, CaseType);\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n"
}