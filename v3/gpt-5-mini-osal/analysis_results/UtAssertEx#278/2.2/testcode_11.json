{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'SubsysName' of UtAssert_DoReport is never referenced in the function body. The sixth argument passed by UtAssertEx (CurrentSegment) is therefore unused; removing the parameter and the corresponding argument would not affect program behaviour, so this is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2782.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: write control-flow and state info to /tmp/logs/2782.txt */\nstatic void UtAssert_LogProbe(const char *stage, bool Expression, UtAssert_CaseType_t CaseType,\n                              const char *File, uint32 Line, uint32 TestSegmentCount,\n                              uint32 TotalTestCases, uintptr_t CurrentSegmentVal, const char *FinalMessage)\n{\n    FILE *f = fopen(\"/tmp/logs/2782.txt\", \"a\");\n    if (f)\n    {\n        /* Log a compact, single-line record describing the current state */\n        fprintf(f, \"%s: Expression=%d, CaseType=%u, File=%s, Line=%u, TestSegmentCount=%u, TotalTestCases=%u, CurrentSegment=0x%lx, Message=\\\"%s\\\"\\n\",\n                stage,\n                (int)Expression,\n                (unsigned)CaseType,\n                (File != NULL) ? File : \"(null)\",\n                (unsigned)Line,\n                (unsigned)TestSegmentCount,\n                (unsigned)TotalTestCases,\n                (unsigned long)CurrentSegmentVal,\n                (FinalMessage != NULL) ? FinalMessage : \"\");\n        fclose(f);\n    }\n}\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    /* Probe log before calling UtAssert_DoReport: record the value passed as the sixth argument (CurrentSegment)\n       This helps reproduce the scenario where the sixth parameter of UtAssert_DoReport is never used. */\n    UtAssert_LogProbe(\"before_report\", Expression, CaseType, File, Line, TestSegmentCount, TotalTestCases,\n                      (uintptr_t)CurrentSegment, FinalMessage);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    /* Probe log after the report call to capture that control returned and to provide a post-call snapshot. */\n    UtAssert_LogProbe(\"after_report\", Expression, CaseType, File, Line, TestSegmentCount, TotalTestCases,\n                      (uintptr_t)CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n"
}