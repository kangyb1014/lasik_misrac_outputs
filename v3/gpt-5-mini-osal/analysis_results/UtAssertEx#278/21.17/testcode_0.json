{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf UtAssertEx/UtAssert_DoReport is ever called with File == NULL or with a char buffer that is not NUL-terminated, the call FileLen = strlen(File); will read beyond the bounds of the object. Example: UtAssertEx(..., NULL, ..., \"msg\", ...); leads to strlen(NULL) (undefined behavior) or if File points to a non-terminated char array strlen will scan past the array bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2789.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe logger: append control flow and state information to /tmp/logs/2789.txt.\n * This function is intentionally conservative: it never dereferences the File pointer\n * (except to print its address) to avoid introducing additional out-of-bounds reads.\n */\nstatic void UtAssert_LogProbe(const char *File, unsigned int Line, unsigned int TestSegmentCount,\n                              unsigned int TotalTestCases, unsigned int CaseType, const char *FinalMessage)\n{\n    FILE *f = fopen(\"/tmp/logs/2789.txt\", \"a\");\n    if (!f)\n    {\n        return; /* If logging cannot be opened, do not interfere with normal operation */\n    }\n\n    /* Log basic state and control flow info */\n    fprintf(f, \"[UtAssertEx probe] File_ptr=%p, Line=%u, TestSegmentCount=%u, TotalTestCases=%u, CaseType=%u\\n\",\n            (void *)File, Line, TestSegmentCount, TotalTestCases, CaseType);\n\n    /* Detect and log the obvious dangerous scenario: File == NULL */\n    if (File == NULL)\n    {\n        fprintf(f, \"  WARNING: File == NULL -> calling strlen(File) would be undefined (NULL deref)\\n\");\n    }\n    else\n    {\n        /* We avoid dereferencing File to check for NUL termination because that could itself\n         * read beyond the caller's object bounds and introduce a violation. Instead, we\n         * provide guidance in the log that UtAssert_DoReport is likely to call strlen(File)\n         * and thus may scan beyond bounds if the caller's buffer is not NUL-terminated.\n         */\n        fprintf(f, \"  NOTE: File is non-NULL (address logged). UtAssert_DoReport may call strlen(File) which\n  could read beyond the caller's buffer if it is not NUL-terminated.\\n\");\n    }\n\n    /* FinalMessage is our local, bounded buffer and is NUL-terminated by vsnprintf; it is\n     * safe to print (we limit output length to avoid enormous logs).\n     */\n    if (FinalMessage != NULL)\n    {\n        /* Print a preview (up to 200 chars) of the final message to help reproduce the scenario */\n        fprintf(f, \"  FinalMessage_preview=\\\"\");\n        for (unsigned i = 0; i < 200 && FinalMessage[i] != '\\0'; ++i)\n        {\n            int c = (unsigned char)FinalMessage[i];\n            /* Print printable characters directly, escape others as hex */\n            if (c >= 0x20 && c < 0x7f)\n            {\n                fputc(c, f);\n            }\n            else\n            {\n                fprintf(f, \"\\\\x%02x\", c);\n            }\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n\n    fclose(f);\n}\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    /* Probe log inserted here to capture the control path and state leading up to the call\n     * that may invoke strlen(File) inside UtAssert_DoReport. This preserves original logic\n     * while providing reproducible evidence for the violation scenario.\n     */\n    UtAssert_LogProbe(File, Line, TestSegmentCount, TotalTestCases, (unsigned)CaseType, FinalMessage);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n"
}