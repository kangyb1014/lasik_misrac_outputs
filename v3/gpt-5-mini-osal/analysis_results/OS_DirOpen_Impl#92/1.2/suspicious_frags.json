{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_DirOpen_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nextern OS_impl_dir_internal_record_t OS_impl_dir_table[OS_MAX_NUM_OPEN_DIRS]\n...\ntypedef struct\n{\n    DIR *dp;\n} OS_impl_dir_internal_record_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided code and related definitions. Reasons: \n\n- Use of opendir and DIR*: POSIX API usage, not a compiler language extension. Using these library types/functions is not a language extension per the rule.\n- Macro OS_OBJECT_TABLE_GET: standard C macro usage. It expands to &tbl[OS_ObjectIndexFromToken(&(tok))], which uses standard operators (&, []) and a function-like macro parameter. Taking the address of an expression (e.g., &(*token) after expansion) is standard C behaviour, not a compiler extension.\n- The inline function declaration (static inline OS_ObjectIndexFromToken(...)): the inline keyword is part of standard C since C99; this is not a compiler-specific extension. The function is defined with a standard signature and return type.\n- Forward typedef (typedef struct OS_object_token OS_object_token_t): standard forward declaration/typedef pattern in C, not an extension.\n- extern array declaration (extern OS_impl_dir_internal_record_t OS_impl_dir_table[OS_MAX_NUM_OPEN_DIRS]): standard C external array declaration.\n- Simple struct definition (OS_impl_dir_internal_record_t with DIR *dp): standard C struct usage.\n- Use of simple integer macros for return codes (#define OS_ERROR (-1), #define OS_SUCCESS (0)): standard preprocessor macros, not extensions.\n\nNo constructs such as inline assembly, typeof, statement-expressions (GCC extension), nested functions, attributes with compiler-specific syntax, zero-length arrays, flexible array members beyond standard, or any other commonly documented compiler-only extensions are present. Therefore there are no code fragments that need investigation under MISRA C 2023 Rule 1.2 (language extensions should not be used)."
}