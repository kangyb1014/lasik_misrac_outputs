{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If StubPtr->Data.Buff.Position is greater than StubPtr->Data.Buff.TotalSize (or TotalSize==0 and Position>0), the computation ActualCopy = TotalSize - Position underflows (size_t wraparound) and &StubPtr->Data.Buff.BasePtr[Position] will point beyond the source buffer. Even when ActualCopy is subsequently limited by MaxSize, memcpy will start from an out-of-bounds source pointer and can read memory beyond the buffer. Therefore this code can result in accesses beyond the bounds of the objects referenced by the pointer parameters to memcpy.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "size_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Open a log file to record control flow and state for debugging the potential underflow/OOB case. */\n    FILE *log = fopen(\"/tmp/logs/3179.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"--- UT_Stub_CopyToLocal called ---\\n\");\n        fprintf(log, \"MaxSize = %zu\\n\", MaxSize);\n        fprintf(log, \"StubPtr = %p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        size_t total = StubPtr->Data.Buff.TotalSize;\n        size_t pos   = StubPtr->Data.Buff.Position;\n\n        if (log)\n        {\n            fprintf(log, \"TotalSize = %zu\\n\", total);\n            fprintf(log, \"Position  = %zu\\n\", pos);\n            /* Avoid computing an out-of-bounds address for logging. Only print the actual source pointer when Position is <= TotalSize. */\n            if (pos <= total)\n            {\n                void *src = (void *)&StubPtr->Data.Buff.BasePtr[pos];\n                fprintf(log, \"BasePtr   = %p, Src = %p\\n\", (void *)StubPtr->Data.Buff.BasePtr, src);\n            }\n            else\n            {\n                fprintf(log, \"BasePtr   = %p, Src would be &BasePtr[%zu] (not computed to avoid additional UB)\\n\",\n                        (void *)StubPtr->Data.Buff.BasePtr, pos);\n            }\n\n            if (pos > total)\n            {\n                fprintf(log, \"*** WARNING: Position > TotalSize -> subtraction \"\n                             \"TotalSize - Position will underflow (size_t wraparound) ***\\n\");\n            }\n            if (total == 0 && pos > 0)\n            {\n                fprintf(log, \"*** WARNING: TotalSize == 0 && Position > 0 -> underflow scenario ***\\n\");\n            }\n        }\n\n        /* Preserve original logic: compute ActualCopy exactly as originally written. */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        if (log)\n        {\n            fprintf(log, \"After subtraction ActualCopy = %zu\\n\", ActualCopy);\n        }\n\n        if (MaxSize < ActualCopy)\n        {\n            if (log)\n            {\n                fprintf(log, \"MaxSize (%zu) < ActualCopy (%zu) -> limiting ActualCopy to MaxSize\\n\", MaxSize, ActualCopy);\n            }\n            ActualCopy = MaxSize;\n        }\n\n        if (log)\n        {\n            fprintf(log, \"Final ActualCopy = %zu\\n\", ActualCopy);\n            fprintf(log, \"About to memcpy from &BasePtr[Position] to LocalBuffer (this is where the original code may read OOB if Position > TotalSize)\\n\");\n        }\n\n        /* Perform the original copy operation (preserving original behavior). */\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        if (log)\n        {\n            fprintf(log, \"After memcpy Position = %zu, TotalSize = %zu\\n\", StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n        }\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (log)\n            {\n                fprintf(log, \"Position >= TotalSize -> clearing stub entry\\n\");\n            }\n            UT_ClearStubEntry(StubPtr);\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"Position < TotalSize -> keeping stub entry for future copies\\n\");\n            }\n        }\n\n        if (log)\n        {\n            fprintf(log, \"--- UT_Stub_CopyToLocal exit (with StubPtr) ---\\n\\n\");\n            fclose(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"No stub entry found (StubPtr == NULL).\\n\");\n            fprintf(log, \"--- UT_Stub_CopyToLocal exit (no StubPtr) ---\\n\\n\");\n            fclose(log);\n        }\n    }\n\n    return ActualCopy;\n}\n"
}