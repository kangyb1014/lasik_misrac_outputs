{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize then the subtraction ActualCopy = TotalSize - Position underflows (wraps) to a very large value. The subsequent fragment (if (MaxSize < ActualCopy) ActualCopy = MaxSize;) will therefore typically set ActualCopy to MaxSize, but does not prevent the source pointer &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position] from being out-of-bounds. memcpy will then copy MaxSize bytes from an invalid source pointer, causing an access beyond the bounds of the referenced object. Therefore the code as written can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log;\n\n    /* Open log in append mode; if directory doesn't exist fopen will fail silently and we continue normal behavior */\n    log = fopen(\"/tmp/logs/3179.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTRY UT_Stub_CopyToLocal: LocalBuffer=%p MaxSize=%zu\\n\", LocalBuffer, MaxSize);\n    }\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (log)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        size_t TotalSize = StubPtr->Data.Buff.TotalSize;\n        size_t Position  = StubPtr->Data.Buff.Position;\n\n        if (log)\n        {\n            fprintf(log, \"Before compute: TotalSize=%zu Position=%zu\\n\", TotalSize, Position);\n        }\n\n        /* Preserve original logic: subtraction may underflow if Position > TotalSize */\n        ActualCopy = TotalSize - Position;\n\n        if (log)\n        {\n            fprintf(log, \"After subtract: ActualCopy=%zu\\n\", ActualCopy);\n            if (Position > TotalSize)\n            {\n                fprintf(log, \"WARNING: Position (%zu) > TotalSize (%zu) => underflow occurred in subtraction\\n\", Position, TotalSize);\n            }\n        }\n\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n            if (log)\n            {\n                fprintf(log, \"Clamped ActualCopy to MaxSize: ActualCopy=%zu\\n\", ActualCopy);\n            }\n        }\n\n        /* Log source and destination pointers and the size about to be copied */\n        {\n            void *src = (void *)&StubPtr->Data.Buff.BasePtr[Position];\n            void *dst = LocalBuffer;\n            if (log)\n            {\n                fprintf(log, \"About to memcpy src=%p dst=%p size=%zu\\n\", src, dst, ActualCopy);\n            }\n\n            /* Original memcpy call retained */\n            memcpy(LocalBuffer, src, ActualCopy);\n\n            /* Update position as in original code */\n            StubPtr->Data.Buff.Position += ActualCopy;\n\n            if (log)\n            {\n                fprintf(log, \"After memcpy: New Position=%zu TotalSize=%zu\\n\", StubPtr->Data.Buff.Position, TotalSize);\n            }\n        }\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (log)\n            {\n                fprintf(log, \"Position >= TotalSize, calling UT_ClearStubEntry on %p\\n\", (void *)StubPtr);\n            }\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"No stub entry found (StubPtr == NULL)\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT UT_Stub_CopyToLocal: ActualCopy=%zu\\n\\n\", ActualCopy);\n        fclose(log);\n    }\n\n    return ActualCopy;\n}\n"
}