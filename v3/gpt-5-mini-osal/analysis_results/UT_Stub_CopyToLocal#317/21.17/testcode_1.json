{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If StubPtr->Data.Buff.Position is greater than StubPtr->Data.Buff.TotalSize the subtraction (TotalSize - Position) underflows (size_t wrap), producing a very large ActualCopy. Even if ActualCopy is later clamped to MaxSize, the pointer used in memcpy is &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], which is already out-of-bounds when Position > TotalSize. Example: TotalSize = 100, Position = 150, MaxSize = 10 -> ActualCopy underflows, is reduced to 10, then memcpy(LocalBuffer, &BasePtr[150], 10) reads beyond the buffer. This can cause memcpy to access memory beyond the referenced object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "size_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = fopen(\"/tmp/logs/3179.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry into the function with basic parameters */\n        (void)fprintf(log, \"UT_Stub_CopyToLocal: FuncKey=%zu LocalBuffer=%p MaxSize=%zu\\n\",\n                      (size_t)FuncKey, LocalBuffer, MaxSize);\n    }\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (log != NULL)\n    {\n        (void)fprintf(log, \"  UT_GetStubEntry returned %p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Capture the raw subtraction result (this is the expression that can underflow) */\n        size_t rawSubtract = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        ActualCopy = rawSubtract;\n\n        if (log != NULL)\n        {\n            (void)fprintf(log,\n                          \"  TotalSize=%zu Position=%zu raw(=TotalSize-Position)=%zu\\n\",\n                          StubPtr->Data.Buff.TotalSize,\n                          StubPtr->Data.Buff.Position,\n                          rawSubtract);\n        }\n\n        if (MaxSize < ActualCopy)\n        {\n            if (log != NULL)\n            {\n                (void)fprintf(log, \"  MaxSize(%zu) < ActualCopy(%zu) -> clamping ActualCopy to MaxSize\\n\",\n                              MaxSize, ActualCopy);\n            }\n            ActualCopy = MaxSize;\n        }\n\n        if (log != NULL)\n        {\n            void *srcPtr = &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position];\n            (void)fprintf(log, \"  About to memcpy src=%p dst=%p ActualCopy=%zu\\n\",\n                          srcPtr, LocalBuffer, ActualCopy);\n\n            /* Provide diagnostics about potential out-of-bounds conditions */\n            if (StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize)\n            {\n                (void)fprintf(log,\n                              \"  WARNING: Position(%zu) > TotalSize(%zu) -> source pointer likely out-of-bounds\\n\",\n                              StubPtr->Data.Buff.Position,\n                              StubPtr->Data.Buff.TotalSize);\n            }\n            else if (StubPtr->Data.Buff.Position + ActualCopy > StubPtr->Data.Buff.TotalSize)\n            {\n                (void)fprintf(log,\n                              \"  WARNING: Position(%zu) + ActualCopy(%zu) > TotalSize(%zu) -> read would exceed buffer\\n\",\n                              StubPtr->Data.Buff.Position,\n                              ActualCopy,\n                              StubPtr->Data.Buff.TotalSize);\n            }\n            else\n            {\n                (void)fprintf(log,\n                              \"  Source range within bounds: Position(%zu) .. %zu\\n\",\n                              StubPtr->Data.Buff.Position,\n                              StubPtr->Data.Buff.Position + ActualCopy);\n            }\n        }\n\n        /* Original behavior preserved: perform the copy */\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"  After memcpy: New Position=%zu\\n\", StubPtr->Data.Buff.Position);\n        }\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (log != NULL)\n            {\n                (void)fprintf(log, \"  Position >= TotalSize -> clearing stub entry\\n\");\n            }\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    if (log != NULL)\n    {\n        (void)fprintf(log, \"  Returning ActualCopy=%zu\\n\\n\", ActualCopy);\n        (void)fclose(log);\n    }\n\n    return ActualCopy;\n}\n"
}