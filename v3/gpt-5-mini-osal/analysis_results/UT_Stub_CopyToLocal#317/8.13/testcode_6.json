{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_SetDataBuffer the parameter DataBuffer is declared as void * but is only read and used as the source argument to memcpy: memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize); DataBuffer should be declared const void * since it is not modified. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <stdint.h>\n#include <string.h>\n\nstatic void UT_Log3173(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure the directory exists (ignore errors otherwise) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/3173.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', fp);\n    (void)fclose(fp);\n}\n\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    UT_Log3173(\"UT_Stub_CopyToLocal ENTRY: FuncKey=%lu, LocalBuffer=%p, MaxSize=%zu\",\n                (unsigned long)FuncKey, (void *)LocalBuffer, MaxSize);\n\n    if (StubPtr != NULL)\n    {\n        UT_Log3173(\"Found StubPtr=%p: TotalSize=%zu, Position=%zu\",\n                    (void *)StubPtr, StubPtr->Data.Buff.TotalSize, StubPtr->Data.Buff.Position);\n\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        UT_Log3173(\"Computed remaining bytes (before limit) = %zu\", ActualCopy);\n\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n            UT_Log3173(\"MaxSize < remaining, limiting ActualCopy to MaxSize=%zu\", MaxSize);\n        }\n\n        UT_Log3173(\"About to memcpy: dest=%p, src=%p, n=%zu\",\n                    (void *)LocalBuffer,\n                    (void *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position],\n                    ActualCopy);\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        UT_Log3173(\"After memcpy: Position updated to %zu (TotalSize=%zu)\",\n                    StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_Log3173(\"Buffer fully consumed, calling UT_ClearStubEntry on %p\", (void *)StubPtr);\n            UT_ClearStubEntry(StubPtr);\n        }\n        else\n        {\n            UT_Log3173(\"Buffer not yet consumed, remaining=%zu\",\n                        StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position);\n        }\n    }\n    else\n    {\n        UT_Log3173(\"No stub entry found for FuncKey=%lu (StubPtr is NULL)\", (unsigned long)FuncKey);\n    }\n\n    UT_Log3173(\"UT_Stub_CopyToLocal EXIT: ActualCopy=%zu\", ActualCopy);\n\n    return ActualCopy;\n}\n"
}