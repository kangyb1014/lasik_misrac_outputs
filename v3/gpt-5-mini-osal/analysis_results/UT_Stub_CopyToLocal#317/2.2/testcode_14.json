{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy call can be executed with ActualCopy==0 (e.g. when StubPtr->Data.Buff.Position == StubPtr->Data.Buff.TotalSize or when MaxSize==0). In that case memcpy(..., 0) is a no-op: it is executed but its removal would not affect program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2. A fix is to guard the memcpy (and the subsequent Position increment) with if (ActualCopy > 0).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3172.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal type definitions to allow compilation of this test harness code. */\ntypedef int UT_EntryKey_t;\n\ntypedef struct\n{\n    unsigned char *BasePtr;\n    size_t        Position;\n    size_t        TotalSize;\n} UT_Buffer_t;\n\ntypedef struct\n{\n    union\n    {\n        UT_Buffer_t Buff;\n    } Data;\n} UT_StubTableEntry_t;\n\n/*\n * Simple file logger that appends human-readable probe information to\n * /tmp/logs/3172.txt. This helper keeps the original logic untouched\n * and only records state transitions and control flow decisions.\n */\nstatic void UT_Probe_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/3172.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/*\n * Minimal stub implementations so this unit compiles and can be linked\n * in isolation. In the real project these would be provided elsewhere.\n * For the purposes of logging the UT_Stub_CopyToLocal behaviour, a\n * single static entry is used and can be manipulated by tests.\n */\nstatic UT_StubTableEntry_t UT_Test_Stub = { { { NULL, 0u, 0u } } };\n\n/* Return pointer to the test stub for key == 0, otherwise NULL. */\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, int EntryType)\n{\n    (void)EntryType;\n    if (FuncKey == 0)\n    {\n        return &UT_Test_Stub;\n    }\n    return NULL;\n}\n\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *Entry)\n{\n    if (Entry != NULL)\n    {\n        /* Clear contents in the same shape as the real implementation might. */\n        Entry->Data.Buff.BasePtr  = NULL;\n        Entry->Data.Buff.Position = 0u;\n        Entry->Data.Buff.TotalSize = 0u;\n        UT_Probe_Log(\"UT_ClearStubEntry called: entry cleared\");\n    }\n}\n\n/*\n * The original function logic preserved as closely as possible with\n * additional logging probes to capture the control flow and key state\n * variables that demonstrate the violation scenario (memcpy called\n * with ActualCopy == 0).\n */\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    UT_Probe_Log(\"ENTER: UT_Stub_CopyToLocal(FuncKey=%d, LocalBuffer=%p, MaxSize=%zu)\", (int)FuncKey, LocalBuffer, MaxSize);\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, /*UT_ENTRYTYPE_DATA_BUFFER*/ 0);\n\n    if (StubPtr != NULL)\n    {\n        UT_Probe_Log(\"Stub found: BasePtr=%p, Position=%zu, TotalSize=%zu\",\n                     (void *)StubPtr->Data.Buff.BasePtr,\n                     StubPtr->Data.Buff.Position,\n                     StubPtr->Data.Buff.TotalSize);\n\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        UT_Probe_Log(\"Computed tentative ActualCopy (before MaxSize clamp) = %zu\", ActualCopy);\n\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n            UT_Probe_Log(\"MaxSize < ActualCopy, clamped ActualCopy = %zu\", ActualCopy);\n        }\n\n        UT_Probe_Log(\"About to call memcpy with ActualCopy = %zu\", ActualCopy);\n        if (ActualCopy == 0)\n        {\n            UT_Probe_Log(\"NOTE: memcpy will be invoked with size 0 (no-op). This is the suspected dead code case.\");\n        }\n\n        /* Original behavior retained: memcpy is called even when ActualCopy==0 */\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        UT_Probe_Log(\"memcpy invoked: dest=%p, src=%p, n=%zu\",\n                     LocalBuffer,\n                     (void *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position],\n                     ActualCopy);\n\n        StubPtr->Data.Buff.Position += ActualCopy;\n        UT_Probe_Log(\"Position updated to %zu\", StubPtr->Data.Buff.Position);\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_Probe_Log(\"Buffer fully consumed (Position >= TotalSize). Clearing stub entry.\");\n            UT_ClearStubEntry(StubPtr);\n        }\n        else\n        {\n            UT_Probe_Log(\"Buffer not yet consumed (Position < TotalSize). Keeping stub entry.\");\n        }\n    }\n    else\n    {\n        UT_Probe_Log(\"No stub entry found for FuncKey=%d\", (int)FuncKey);\n    }\n\n    UT_Probe_Log(\"EXIT: UT_Stub_CopyToLocal returning ActualCopy=%zu\", ActualCopy);\n    return ActualCopy;\n}\n"
}