{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) may access beyond the bounds of ActualText. If ActualText is NULL or points to a character array that is not NUL-terminated within the first sizeof(UTASSERT_PREFIX)-1 bytes (9 bytes), strncmp will read past the object\u2019s bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GenericIntegerCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2849.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GenericIntegerCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GenericIntegerCompare:\n```c\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GenericIntegerCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdbool.h>\n#include <stdint.h>\n\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* Probe logging: capture entry and key pointer/state info to help reproduce possible\n     * out-of-bounds reads by strncmp.  The logging deliberately does not dereference\n     * ActualText/RefText (only prints pointer values) before the original strncmp\n     * calls, so it does not change the original control flow or introduce additional\n     * string accesses beyond what the original function does.  This allows the\n     * logs to show the context just before the potentially-unsafe strncmp.\n     */\n    {\n        FILE *log = fopen(\"/tmp/logs/2849.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UtAssert_GenericIntegerCompare ENTRY: File=%s Line=%u\\n\", (File?File:\"(null)\"), (unsigned)Line);\n            fprintf(log, \"  Typename ptr=%p, ActualText ptr=%p, RefText ptr=%p\\n\", (const void *)Typename, (const void *)ActualText, (const void *)RefText);\n            fprintf(log, \"  UTASSERT_PREFIX='%s' len=%zu (sizeof-1=%zu)\\n\", UTASSERT_PREFIX, strlen(UTASSERT_PREFIX), (size_t)(sizeof(UTASSERT_PREFIX) - 1));\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    {\n        /* Log just before the first strncmp to capture the state that may lead to a violation. */\n        FILE *log = fopen(\"/tmp/logs/2849.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"About to compare ActualText with UTASSERT_PREFIX: ActualText ptr=%p, compare_len=%zu\\n\",\n                    (const void *)ActualText, (size_t)(sizeof(UTASSERT_PREFIX) - 1));\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        /* Log the fact that the prefix matched and the pointer will be adjusted */\n        FILE *log = fopen(\"/tmp/logs/2849.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  strncmp matched for ActualText (ptr=%p) -> advancing by %zu bytes\\n\",\n                    (const void *)ActualText, (size_t)(sizeof(UTASSERT_PREFIX) - 1));\n            fflush(log);\n            fclose(log);\n        }\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    {\n        /* Log just before the second strncmp to capture the state that may lead to a violation. */\n        FILE *log = fopen(\"/tmp/logs/2849.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"About to compare RefText with UTASSERT_PREFIX: RefText ptr=%p, compare_len=%zu\\n\",\n                    (const void *)RefText, (size_t)(sizeof(UTASSERT_PREFIX) - 1));\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        FILE *log = fopen(\"/tmp/logs/2849.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  strncmp matched for RefText (ptr=%p) -> advancing by %zu bytes\\n\",\n                    (const void *)RefText, (size_t)(sizeof(UTASSERT_PREFIX) - 1));\n            fflush(log);\n            fclose(log);\n        }\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    /* Call the original reporting function and then log the final composed message pointers */\n    bool Ret = UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                          File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                          UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                          UtAssert_GetOpText(CompareType), RefText,\n                          UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2849.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: After UtAssertEx: TagStr='%s' ActualText ptr=%p RefText ptr=%p Return=%d\\n\", TagStr,\n                    (const void *)ActualText, (const void *)RefText, (int)Ret);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return Ret;\n}\n"
}