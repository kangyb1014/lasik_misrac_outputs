{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function modifies the pointer parameter ActualText with pointer arithmetic (ActualText += sizeof(UTASSERT_PREFIX) - 1;), changing the pointer itself rather than the object it points to. This violates MISRA C 2023 Rule 17.8 (the pointer parameter shall not be modified). (The same pattern is used for RefText elsewhere in the function.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GenericIntegerCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2847.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GenericIntegerCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GenericIntegerCompare:\n```c\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GenericIntegerCompare code.\n",
  "test_code": "static void UtAssert_LogProbe(const char *stage, const char *ActualBefore, const char *ActualAfter,\n                                   const char *RefBefore, const char *RefAfter)\n{\n    FILE *fp = fopen(\"/tmp/logs/2847.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Print a compact, easy-to-parse single-line record describing pointer values and short string snippets */\n    fprintf(fp, \"[UtAssert_GenericIntegerCompare] stage=%s\\n\", stage);\n    fprintf(fp, \"  ActualBefore=%p\\n\", (const void *)ActualBefore);\n    fprintf(fp, \"  ActualAfter =%p\\n\", (const void *)ActualAfter);\n    fprintf(fp, \"  RefBefore  =%p\\n\", (const void *)RefBefore);\n    fprintf(fp, \"  RefAfter    =%p\\n\", (const void *)RefAfter);\n\n    /* Print up to 128 chars of the strings (or \"(null)\") to avoid overly long logs */\n    if (ActualBefore != NULL)\n    {\n        fprintf(fp, \"  ActualBefore_str=\\\"\");\n        for (size_t i = 0; i < 128 && ActualBefore[i] != '\\0'; ++i)\n        {\n            unsigned char c = (unsigned char)ActualBefore[i];\n            /* replace non-printables with dot to keep log readable */\n            fprintf(fp, \"%c\", (c >= 32 && c < 127) ? c : '.');\n        }\n        fprintf(fp, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"  ActualBefore_str=(null)\\n\");\n    }\n\n    if (ActualAfter != NULL)\n    {\n        fprintf(fp, \"  ActualAfter_str=\\\"\");\n        for (size_t i = 0; i < 128 && ActualAfter[i] != '\\0'; ++i)\n        {\n            unsigned char c = (unsigned char)ActualAfter[i];\n            fprintf(fp, \"%c\", (c >= 32 && c < 127) ? c : '.');\n        }\n        fprintf(fp, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"  ActualAfter_str=(null)\\n\");\n    }\n\n    if (RefBefore != NULL)\n    {\n        fprintf(fp, \"  RefBefore_str=\\\"\");\n        for (size_t i = 0; i < 128 && RefBefore[i] != '\\0'; ++i)\n        {\n            unsigned char c = (unsigned char)RefBefore[i];\n            fprintf(fp, \"%c\", (c >= 32 && c < 127) ? c : '.');\n        }\n        fprintf(fp, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"  RefBefore_str=(null)\\n\");\n    }\n\n    if (RefAfter != NULL)\n    {\n        fprintf(fp, \"  RefAfter_str=\\\"\");\n        for (size_t i = 0; i < 128 && RefAfter[i] != '\\0'; ++i)\n        {\n            unsigned char c = (unsigned char)RefAfter[i];\n            fprintf(fp, \"%c\", (c >= 32 && c < 127) ? c : '.');\n        }\n        fprintf(fp, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"  RefAfter_str=(null)\\n\");\n    }\n\n    fprintf(fp, \"---\\n\");\n    fclose(fp);\n}\n\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* Insert probes to log state before/after the prefix-strip that modifies the pointer parameters.\n     * Preserve original logic (we still adjust ActualText/RefText exactly as before) but capture\n     * the pointer values and short string contents so other agents can reproduce the violation scenario.\n     */\n    const char *OriginalActualText = ActualText;\n    const char *OriginalRefText = RefText;\n\n    /* Log initial state */\n    UtAssert_LogProbe(\"initial\", OriginalActualText, ActualText, OriginalRefText, RefText);\n\n    /* Determine presence of prefix first (match original behavior) */\n    if (ActualText != NULL && strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        /* Log that we are about to modify the pointer parameter ActualText */\n        UtAssert_LogProbe(\"before_actual_strip\", OriginalActualText, ActualText, OriginalRefText, RefText);\n\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n\n        /* Log result after modification */\n        UtAssert_LogProbe(\"after_actual_strip\", OriginalActualText, ActualText, OriginalRefText, RefText);\n    }\n    if (RefText != NULL && strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        /* Log that we are about to modify the pointer parameter RefText */\n        UtAssert_LogProbe(\"before_ref_strip\", OriginalActualText, ActualText, OriginalRefText, RefText);\n\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n\n        /* Log result after modification */\n        UtAssert_LogProbe(\"after_ref_strip\", OriginalActualText, ActualText, OriginalRefText, RefText);\n    }\n\n    /* Final state after possible pointer modifications */\n    UtAssert_LogProbe(\"final\", OriginalActualText, ActualText, OriginalRefText, RefText);\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n"
}