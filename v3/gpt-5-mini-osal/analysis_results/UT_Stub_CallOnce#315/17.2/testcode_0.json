{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the Func pointer refers to UT_Stub_CallOnce itself (e.g. UT_Stub_CallOnce(UT_Stub_CallOnce)) or to any function that calls UT_Stub_CallOnce, then UT_Stub_CallOnce will invoke Func() and thereby call itself directly or indirectly, producing recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CallOnce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3156.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CallOnce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CallOnce:\n```c\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        Func();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CallOnce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe/logging helpers - write append-only logs for control flow tracing */\nstatic void UT_Stub_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/3156.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic void UT_Stub_Log_Entry(void *Func)\n{\n    UT_Stub_Log(\"UT_Stub_CallOnce ENTER: Func=%p\", Func);\n}\n\nstatic void UT_Stub_Log_NullFunc(void)\n{\n    UT_Stub_Log(\"UT_Stub_CallOnce: Func is NULL -> returning immediately\");\n}\n\nstatic void UT_Stub_Log_FoundSlot(int idx, const void *StubPtr, unsigned long EntryType, uintptr_t FuncKey)\n{\n    UT_Stub_Log(\"UT_Stub_CallOnce: scan idx=%d StubPtr=%p EntryType=%lu FuncKey=0x%lx\",\n                idx, StubPtr, EntryType, (unsigned long)FuncKey);\n}\n\nstatic void UT_Stub_Log_AssignOnce(const void *OnceEnt, uintptr_t FuncKey)\n{\n    UT_Stub_Log(\"UT_Stub_CallOnce: Assigning CallOnce entry OnceEnt=%p FuncKey=0x%lx\",\n                OnceEnt, (unsigned long)FuncKey);\n}\n\nstatic void UT_Stub_Log_CallingFunc(void *Func)\n{\n    UT_Stub_Log(\"UT_Stub_CallOnce: About to invoke Func=%p\", Func);\n}\n\nstatic void UT_Stub_Log_CannotDoOnce(void)\n{\n    UT_Stub_Log(\"UT_Stub_CallOnce: Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n}\n\n/* Modified UT_Stub_CallOnce with logging probes inserted. */\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    /* Log entry and the Func pointer immediately */\n    UT_Stub_Log_Entry((void *)Func);\n\n    if (Func == NULL)\n    {\n        UT_Stub_Log_NullFunc();\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        /* Log each scanned slot with available state information */\n        /* Cast EntryType and FuncKey to unsigned long/uintptr_t for printing */\n        UT_Stub_Log_FoundSlot(i, (const void *)StubPtr,\n                              (unsigned long)StubPtr->EntryType,\n                              (uintptr_t)StubPtr->FuncKey);\n\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n            UT_Stub_Log(\"UT_Stub_CallOnce: Remembered first UNUSED slot OnceEnt=%p\", (void *)OnceEnt);\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            UT_Stub_Log(\"UT_Stub_CallOnce: Found existing CALL_ONCE entry matching FuncKey -> OnceEnt=%p\", (void *)OnceEnt);\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        UT_Stub_Log_CannotDoOnce();\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        UT_Stub_Log_AssignOnce((const void *)OnceEnt, (uintptr_t)FuncKey);\n        UT_Stub_Log_CallingFunc((void *)Func);\n\n        /* Invoke the function. If Func points to UT_Stub_CallOnce (directly) or to\n         * a function that calls UT_Stub_CallOnce (indirectly), the logging above\n         * will record recursive entries as they occur. */\n        Func();\n\n        UT_Stub_Log(\"UT_Stub_CallOnce: Returned from Func=%p\", (void *)Func);\n    }\n}\n"
}