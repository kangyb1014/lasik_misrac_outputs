{
  "user_message": "Target function code is:\n```c\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        Func();\n    }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'UT_Stub_CallOnce': {'callees': ['UtAssert_Abort'], 'callers': ['UT_AllocStubObjId', 'UT_DeleteStubObjId']}, 'UtAssert_Abort': {'callees': ['UT_BSP_DoText'], 'callers': ['UT_Stub_CallOnce', 'UT_ConfigureGenericStubReturnValue', 'UT_Stub_RegisterReturnType', 'UT_Stub_GetReturnValuePtr', 'UT_SetDataBuffer', 'UT_DoSetHookFunction', 'UT_Hook_GetArgPtr', 'UT_Stub_RegisterContextWithMetaData', 'UT_Stub_CopyToReturnValue', 'UT_DefaultStubImplWithArgs', 'UT_AllocStubObjId']}, 'UT_AllocStubObjId': {'callees': ['UT_Stub_CallOnce', 'UtAssert_Abort', 'UtAssert_GetContext', 'UT_ObjIdCompose'], 'callers': ['UT_DefaultHandler_OS_BinSemCreate', 'UT_DefaultHandler_OS_CountSemCreate', 'UT_DefaultHandler_OS_DirectoryOpen', 'UT_DefaultHandler_OS_OpenCreate', 'UT_DefaultHandler_OS_FileSysAddFixedMap', 'UT_DefaultHandler_OS_ModuleLoad', 'UT_DefaultHandler_OS_MutSemCreate', 'UT_DefaultHandler_OS_QueueCreate', 'UT_DefaultHandler_OS_SocketOpen', 'UT_DefaultHandler_OS_TaskCreate', 'UT_DefaultHandler_OS_TimerAdd', 'UT_DefaultHandler_OS_TimerCreate', 'UT_DefaultHandler_OS_TimeBaseCreate']}, 'UT_DeleteStubObjId': {'callees': ['UT_Stub_CallOnce', 'UT_ObjIdDecompose', 'UtAssert_GetContext'], 'callers': ['UT_DefaultHandler_OS_BinSemDelete', 'UT_DefaultHandler_OS_CountSemDelete', 'UT_DefaultHandler_OS_DirectoryClose', 'UT_DefaultHandler_OS_close', 'UT_DefaultHandler_OS_ModuleUnload', 'UT_DefaultHandler_OS_MutSemDelete', 'UT_DefaultHandler_OS_QueueDelete', 'UT_DefaultHandler_OS_TaskDelete', 'UT_DefaultHandler_OS_TimerDelete', 'UT_DefaultHandler_OS_TimeBaseDelete']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "UT_EntryKey_t",
    "UT_StubTableEntry_t",
    "UT_StubTable",
    "UT_MAX_FUNC_STUBS",
    "UT_ENTRYTYPE_UNUSED",
    "UT_ENTRYTYPE_CALL_ONCE",
    "UtAssert_Abort"
  ],
  "explanation": "UT_EntryKey_t: The cast FuncKey = (UT_EntryKey_t)Func is the only write derived from the parameter. Knowing the exact typedef/representation is required to ensure this cast/assignment does not implicitly modify the parameter (e.g. via a macro or unusual type aliasing).\\n\\nUT_StubTableEntry_t: The struct definition (fields EntryType and FuncKey) is needed to verify that accesses like StubPtr->FuncKey and StubPtr->EntryType are ordinary reads/writes to the table and cannot alias or modify the local parameter Func. In particular, verify that FuncKey is not implemented in a way that could alias back to the Func parameter.\\n\\nUT_StubTable: The global table object assigned to StubPtr is examined/modified in the loop. Its definition is required to rule out any aliasing between the table storage and the parameter (e.g. unusual macro expansions or overlayed storage) that could cause the parameter variable to be modified.\\n\\nUT_MAX_FUNC_STUBS: The loop bound; include to inspect any macro/definition that could carry side-effects or hidden code altering the parameter (defensive check).\\n\\nUT_ENTRYTYPE_UNUSED and UT_ENTRYTYPE_CALL_ONCE: The values used to test/assign EntryType \u2014 include their definitions to ensure these are plain constants and their use (or any macros behind them) does not produce side effects that modify Func.\\n\\nUtAssert_Abort: Called when OnceEnt == NULL; include its prototype/definition to confirm it does not take/modify the Func parameter (for example via longjmp/cleanup that might affect caller state) and to confirm whether it returns or never returns (affects control flow but not parameter modification)."
}