{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarSignal_Impl:\n```c\nint32 OS_CondVarSignal_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_cond_signal(&impl->cv);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarSignal_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef int32_t   int32\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no use of compiler-specific language extensions in the provided code. Items inspected and reasons they do not indicate language extensions:\n\n- Use of the macro OS_OBJECT_TABLE_GET and its invocation: This is plain C preprocessor macro expansion; it does not use compiler-specific extensions. The address-of/indirection pattern (&tbl[OS_ObjectIndexFromToken(&(tok))]) is valid C and the macro arguments are ordinary expressions.\n- static inline function OS_ObjectIndexFromToken: The inline keyword is a standard C keyword (C99 and later). This is not a compiler-specific extension.\n- typedefs (int32_t alias int32, OS_object_token_t forward typedef): Standard C typedefs and forward declarations, not extensions.\n- Array declaration OS_impl_condvar_table[OS_MAX_CONDVARS]: Standard C array declaration.\n- pthread_cond_t, pthread_cond_signal, pthread_mutex_t usage: These are POSIX API types/functions provided by the platform libraries, not compiler language extensions. Using platform or library APIs is not a language extension per Rule 1.2 (which targets compiler language extensions documented as such).\n- Macro/identifier names: No use of compiler-reserved identifiers (e.g., names beginning with __ or _[A-Z]) was shown. No use of __attribute__, typeof, statement-expression ({:}), nested functions, inline assembler, pragmas that are compiler-specific, or other known compiler extensions is present in the provided fragments.\n\nGiven the provided code and related symbols, there are no fragments that explicitly use compiler-documented language extensions that would trigger MISRA C 2023 Rule 1.2. If there are other files (compiler-specific headers, build flags, or non-standard pragmas) not provided, those should be reviewed as well because compiler extensions can appear outside this function."
}