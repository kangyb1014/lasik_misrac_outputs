{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_condvar_log_timestamped(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    /* Fallback if localtime_r unavailable */\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n        else\n        {\n            memset(&tm_buf, 0, sizeof(tm_buf));\n        }\n    }\n#endif\n\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s: %s\\n\", timestr, msg);\n    fclose(f);\n}\nstatic void os_condvar_log_hex(const void *data, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)data;\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    for (size_t i = 0; i < len; ++i)\n    {\n        if ((i % 16) == 0)\n        {\n            fprintf(f, \"\\n  %04zx: \", i);\n        }\n        fprintf(f, \"%02x \", p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry log */\n    {\n        char buf[256];\n        /* Use unsigned long long cast in case osal_id_t is not an integer type of known printf length */\n        (void)snprintf(buf, sizeof(buf), \"ENTER OS_CondVarUnlock(var_id=%llu)\", (unsigned long long) var_id);\n        os_condvar_log_timestamped(buf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and token state if successful */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"OS_ObjectIdGetById returned %d\", (int)return_code);\n        os_condvar_log_timestamped(buf);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Dump token bytes as retrieved */\n            os_condvar_log_timestamped(\"Token state after OS_ObjectIdGetById:\");\n            os_condvar_log_hex(&token, sizeof(token));\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Keep a copy to detect any modification by the implementation */\n        unsigned char before_state[sizeof(token)];\n        unsigned char after_state[sizeof(token)];\n\n        memcpy(before_state, &token, sizeof(token));\n\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"Calling OS_CondVarUnlock_Impl(&token=%p)\", (void *)&token);\n            os_condvar_log_timestamped(buf);\n            os_condvar_log_timestamped(\"Token state BEFORE OS_CondVarUnlock_Impl:\");\n            os_condvar_log_hex(before_state, sizeof(before_state));\n        }\n\n        /* Call the implementation (preserve original behavior) */\n        return_code = OS_CondVarUnlock_Impl(&token);\n\n        /* Log return from implementation and compare token state */\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"OS_CondVarUnlock_Impl returned %d\", (int)return_code);\n            os_condvar_log_timestamped(buf);\n\n            memcpy(after_state, &token, sizeof(token));\n\n            /* Determine if token was modified */\n            int modified = (memcmp(before_state, after_state, sizeof(token)) != 0);\n            (void)snprintf(buf, sizeof(buf), \"Token modified by OS_CondVarUnlock_Impl: %s\", modified ? \"YES\" : \"NO\");\n            os_condvar_log_timestamped(buf);\n\n            if (modified)\n            {\n                os_condvar_log_timestamped(\"Token state AFTER OS_CondVarUnlock_Impl:\");\n                os_condvar_log_hex(after_state, sizeof(after_state));\n\n                /* Optionally, log the byte-level differences */\n                FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n                if (f != NULL)\n                {\n                    fprintf(f, \"Byte-level differences (index: before -> after):\\n\");\n                    for (size_t i = 0; i < sizeof(token); ++i)\n                    {\n                        if (before_state[i] != after_state[i])\n                        {\n                            fprintf(f, \"  %04zx: %02x -> %02x\\n\", i, before_state[i], after_state[i]);\n                        }\n                    }\n                    fclose(f);\n                }\n            }\n        }\n    }\n\n    /* Exit log */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"EXIT OS_CondVarUnlock returning %d\", (int)return_code);\n        os_condvar_log_timestamped(buf);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpr867ipl8/src/src/os/shared/src/osapi-condvar.c: In function 'os_condvar_log_timestamped':\n/tmp/tmpr867ipl8/src/src/os/shared/src/osapi-condvar.c:176:15: error: storage size of 'tm_buf' isn't known\n  176 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpr867ipl8/src/src/os/shared/src/osapi-condvar.c:185:22: error: invalid use of undefined type 'struct tm'\n  185 |             tm_buf = *tmp;\n      |                      ^\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/__/__/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3353: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarUnlock as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\nstatic void os_condvar_log_timestamped(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    /* Fallback if localtime_r unavailable */\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n        else\n        {\n            memset(&tm_buf, 0, sizeof(tm_buf));\n        }\n    }\n#endif\n\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s: %s\\n\", timestr, msg);\n    fclose(f);\n}\nstatic void os_condvar_log_hex(const void *data, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)data;\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    for (size_t i = 0; i < len; ++i)\n    {\n        if ((i % 16) == 0)\n        {\n            fprintf(f, \"\\n  %04zx: \", i);\n        }\n        fprintf(f, \"%02x \", p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry log */\n    {\n        char buf[256];\n        /* Use unsigned long long cast in case osal_id_t is not an integer type of known printf length */\n        (void)snprintf(buf, sizeof(buf), \"ENTER OS_CondVarUnlock(var_id=%llu)\", (unsigned long long) var_id);\n        os_condvar_log_timestamped(buf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and token state if successful */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"OS_ObjectIdGetById returned %d\", (int)return_code);\n        os_condvar_log_timestamped(buf);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Dump token bytes as retrieved */\n            os_condvar_log_timestamped(\"Token state after OS_ObjectIdGetById:\");\n            os_condvar_log_hex(&token, sizeof(token));\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Keep a copy to detect any modification by the implementation */\n        unsigned char before_state[sizeof(token)];\n        unsigned char after_state[sizeof(token)];\n\n        memcpy(before_state, &token, sizeof(token));\n\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"Calling OS_CondVarUnlock_Impl(&token=%p)\", (void *)&token);\n            os_condvar_log_timestamped(buf);\n            os_condvar_log_timestamped(\"Token state BEFORE OS_CondVarUnlock_Impl:\");\n            os_condvar_log_hex(before_state, sizeof(before_state));\n        }\n\n        /* Call the implementation (preserve original behavior) */\n        return_code = OS_CondVarUnlock_Impl(&token);\n\n        /* Log return from implementation and compare token state */\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"OS_CondVarUnlock_Impl returned %d\", (int)return_code);\n            os_condvar_log_timestamped(buf);\n\n            memcpy(after_state, &token, sizeof(token));\n\n            /* Determine if token was modified */\n            int modified = (memcmp(before_state, after_state, sizeof(token)) != 0);\n            (void)snprintf(buf, sizeof(buf), \"Token modified by OS_CondVarUnlock_Impl: %s\", modified ? \"YES\" : \"NO\");\n            os_condvar_log_timestamped(buf);\n\n            if (modified)\n            {\n                os_condvar_log_timestamped(\"Token state AFTER OS_CondVarUnlock_Impl:\");\n                os_condvar_log_hex(after_state, sizeof(after_state));\n\n                /* Optionally, log the byte-level differences */\n                FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n                if (f != NULL)\n                {\n                    fprintf(f, \"Byte-level differences (index: before -> after):\\n\");\n                    for (size_t i = 0; i < sizeof(token); ++i)\n                    {\n                        if (before_state[i] != after_state[i])\n                        {\n                            fprintf(f, \"  %04zx: %02x -> %02x\\n\", i, before_state[i], after_state[i]);\n                        }\n                    }\n                    fclose(f);\n                }\n            }\n        }\n    }\n\n    /* Exit log */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"EXIT OS_CondVarUnlock returning %d\", (int)return_code);\n        os_condvar_log_timestamped(buf);\n    }\n\n    return return_code;\n}\n",
  "explanation": "The compilation error was due to 'struct tm' and related time functions not being declared. I added the necessary standard headers: <time.h> to define struct tm and localtime/localtime_r/strftime, <stdio.h> for FILE and I/O, and <string.h> for memcpy/memcmp/memset. I also included <stddef.h> and <stdint.h> for size_t and integer types. No logic was changed; only the required includes were added so the file compiles correctly."
}