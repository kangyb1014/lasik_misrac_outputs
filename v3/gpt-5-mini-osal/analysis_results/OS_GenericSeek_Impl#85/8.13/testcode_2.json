{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only used for read access (impl->fd) in OS_GenericSeek_Impl. It could and should be declared as a pointer to const (const OS_impl_file_internal_record_t *impl) and assigned the result of OS_OBJECT_TABLE_GET (implicit conversion from T * to const T * is allowed). Therefore the code fails to qualify the pointed-to type as const where possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericSeek_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericSeek_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericSeek_Impl:\n```c\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n    }\n\n    return retval;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericSeek_Impl code.\n",
  "test_code": "int32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe: log entry and key state to a persistent file for later analysis */\n    {\n        FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"ENTER: OS_GenericSeek_Impl token=%p offset=%d whence=%u impl=%p\\n\",\n                    (const void *)token, (int)offset, (unsigned)whence, (const void *)impl);\n            if (impl != NULL)\n            {\n                fprintf(fp, \"STATE: impl->fd=%d\\n\", impl->fd);\n            }\n            else\n            {\n                fprintf(fp, \"STATE: impl is NULL\\n\");\n            }\n            fclose(fp);\n        }\n    }\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n        {\n            /* Log unexpected whence value */\n            FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"ERROR: invalid whence=%u -> returning OS_ERROR\\n\", (unsigned)whence);\n                fclose(fp);\n            }\n            return OS_ERROR;\n        }\n    }\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n\n    /* Log lseek result and errno for diagnosis */\n    {\n        FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"lseek called: fd=%d offset=%d where=%d -> os_result=%ld errno=%d\\n\",\n                    (impl != NULL) ? impl->fd : -1, (int)offset, where, (long)os_result, errno);\n            fclose(fp);\n        }\n    }\n\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n\n            /* Log the specific branch taken */\n            FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"BRANCH: ESPIPE -> OS_ERR_OPERATION_NOT_SUPPORTED\\n\");\n                fclose(fp);\n            }\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n\n            /* Log the generic error branch and errno message */\n            FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"BRANCH: lseek error errno=%d (%s) -> OS_ERROR\\n\", errno, strerror(errno));\n                fclose(fp);\n            }\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n\n        /* Log the successful return value */\n        FILE *fp = fopen(\"/tmp/logs/853.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"SUCCESS: returning retval=%d (os_result=%ld)\\n\", (int)retval, (long)os_result);\n            fclose(fp);\n        }\n    }\n\n    return retval;\n}\n"
}