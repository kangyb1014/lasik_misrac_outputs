{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen uses memchr(s, 0, maxlen). Calling OS_TranslatePath with a VirtualPath that does not have at least OS_MAX_PATH_LEN bytes accessible (for example: char small[8] = \"abc\"; OS_TranslatePath(small, ...)) causes memchr(VirtualPath, 0, OS_MAX_PATH_LEN) to read past the bounds of the small buffer (it may attempt to read up to 64 bytes). This is an out-of-bounds access and therefore violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1789.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "/* Probe helpers inserted to capture control flow and state for debugging the vulnerability scenario. */\nstatic void OS_TranslatePath_log(const char *stage, const char *VirtualPath, const char *name_ptr,\n                                 size_t VirtPathLen, size_t SysMountPointLen, size_t VirtPathBegin,\n                                 int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1789.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log minimal, safe information: pointer values and size_t/int values.\n     * Avoid dereferencing pointers beyond what the original code already does.\n     */\n    fprintf(f, \"STAGE=%s\\n\", stage);\n    fprintf(f, \"  VirtualPath=%p\\n\", (const void *)VirtualPath);\n    fprintf(f, \"  name_ptr=%p\\n\", (const void *)name_ptr);\n    fprintf(f, \"  VirtPathLen=%zu\\n\", VirtPathLen);\n    fprintf(f, \"  SysMountPointLen=%zu\\n\", SysMountPointLen);\n    fprintf(f, \"  VirtPathBegin=%zu\\n\", VirtPathBegin);\n    fprintf(f, \"  return_code=%d\\n\", (int)return_code);\n    fflush(f);\n    fclose(f);\n}\n\n/* Wrapper around memchr to log the call site and parameters before delegating to memchr.\n * Preserves original behavior but records that a potentially out-of-bounds read is about to occur.\n */\nstatic void *memchr_probe(const void *s, int c, size_t n)\n{\n    FILE *f = fopen(\"/tmp/logs/1789.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"CALLING memchr: s=%p, c=%d, n=%zu\\n\", s, c, n);\n        fflush(f);\n        fclose(f);\n    }\n\n    return memchr(s, c, n);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /* Log entry and initial pointers */\n    OS_TranslatePath_log(\"entry\", VirtualPath, NULL, 0u, 0u, 0u, 0);\n\n    /*\n    ** Check length\n    */\n    /* Log right before calling OS_strnlen which is the location of the reported issue */\n    {\n        FILE *f = fopen(\"/tmp/logs/1789.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"About to call OS_strnlen with VirtualPath=%p, max=%d\\n\", (const void *)VirtualPath, OS_MAX_PATH_LEN);\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n\n    /* Log result of OS_strnlen */\n    OS_TranslatePath_log(\"after_strnlen\", VirtualPath, NULL, VirtPathLen, 0u, 0u, 0);\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_log(\"path_too_long\", VirtualPath, NULL, VirtPathLen, 0u, 0u, OS_FS_ERR_PATH_TOO_LONG);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n\n    /* Log result of strrchr */\n    OS_TranslatePath_log(\"after_strrchr\", VirtualPath, name_ptr, VirtPathLen, 0u, 0u, 0);\n\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_log(\"no_slash_found\", VirtualPath, name_ptr, VirtPathLen, 0u, 0u, OS_FS_ERR_PATH_INVALID);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n\n    /* Use the memchr_probe wrapper to log the memchr call and parameters before performing it */\n    if (memchr_probe(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_log(\"name_too_long\", VirtualPath, name_ptr, VirtPathLen, 0u, 0u, OS_FS_ERR_NAME_TOO_LONG);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_log(\"invalid_start_char\", VirtualPath, name_ptr, VirtPathLen, 0u, VirtPathBegin, OS_FS_ERR_PATH_INVALID);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    OS_TranslatePath_log(\"after_mount_lookup\", VirtualPath, name_ptr, VirtPathLen, SysMountPointLen, VirtPathBegin, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    OS_TranslatePath_log(\"exit\", VirtualPath, name_ptr, VirtPathLen, SysMountPointLen, VirtPathBegin, return_code);\n\n    return return_code;\n}\n"
}