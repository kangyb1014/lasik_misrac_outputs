{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memchr(s, 0, maxlen) in OS_strnlen can read up to maxlen bytes from s; when OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) is invoked there is no guarantee that the object pointed to by VirtualPath has OS_MAX_PATH_LEN bytes accessible or contains a NUL within that range. If a caller passes a pointer to a shorter object that is not NUL-terminated within OS_MAX_PATH_LEN bytes (for example: char small[4] = {'a','b','c','d'}; passed as VirtualPath), memchr will scan beyond the bounds of that object and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1789.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "/* Probe-enhanced OS_TranslatePath for logging/control-flow tracing\n * Logs are appended to /tmp/logs/1789.txt\n * This file only adds logging helpers and calls; original logic is preserved.\n */\n\n#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <inttypes.h>\n\nstatic void OS_TranslatePath_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1789.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /* Entry log */\n    OS_TranslatePath_Log(\"ENTER OS_TranslatePath: VirtualPath=%p, LocalPath=%p\", (void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    OS_TranslatePath_Log(\"Pointers checked: VirtualPath=%p, LocalPath=%p\", (void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    OS_TranslatePath_Log(\"After OS_strnlen: VirtPathLen=%zu, OS_MAX_PATH_LEN=%zu\", VirtPathLen, (size_t)OS_MAX_PATH_LEN);\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_Log(\"RETURN OS_FS_ERR_PATH_TOO_LONG: VirtPathLen >= OS_MAX_PATH_LEN (%zu >= %zu)\", VirtPathLen, (size_t)OS_MAX_PATH_LEN);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_Log(\"RETURN OS_FS_ERR_PATH_INVALID: no '/' found in VirtualPath (strrchr returned NULL)\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n\n    /* Compute an offset for logging if it is inside the known VirtPathLen range */\n    {\n        size_t name_offset = (size_t)-1;\n        if (VirtualPath != NULL && name_ptr >= VirtualPath && name_ptr <= (VirtualPath + VirtPathLen))\n        {\n            name_offset = (size_t)(name_ptr - VirtualPath);\n        }\n        OS_TranslatePath_Log(\"name_ptr=%p, name_offset=%s\", (void *)name_ptr, (name_offset == (size_t)-1) ? \"OUT_OF_RANGE\" : (char[32]){0});\n        if (name_offset != (size_t)-1)\n        {\n            /* write the numeric value separately to avoid creating temporary string via %s above */\n            OS_TranslatePath_Log(\"name_offset_numeric=%zu\", name_offset);\n        }\n    }\n\n    /* Log the planned memchr call parameters BEFORE calling it (this is the call that can scan up to OS_MAX_FILE_NAME bytes) */\n    OS_TranslatePath_Log(\"About to call memchr(name_ptr=%p, 0, OS_MAX_FILE_NAME=%zu)\", (void *)name_ptr, (size_t)OS_MAX_FILE_NAME);\n\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_Log(\"RETURN OS_FS_ERR_NAME_TOO_LONG: memchr didn't find a NUL within OS_MAX_FILE_NAME bytes starting at %p\", (void *)name_ptr);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    OS_TranslatePath_Log(\"memchr found NUL within name region (within OS_MAX_FILE_NAME bytes)\");\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_Log(\"RETURN OS_FS_ERR_PATH_INVALID: VirtualPath[0] != '/' (got 0x%02x)\", (unsigned char)VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    OS_TranslatePath_Log(\"VirtualPath starts with '/': proceeding to OS_ObjectIdGetBySearch\");\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_Log(\"OS_ObjectIdGetBySearch returned %d\", return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n        OS_TranslatePath_Log(\"RETURN OS_FS_ERR_PATH_INVALID after failed OS_ObjectIdGetBySearch\");\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            OS_TranslatePath_Log(\"Mounted system: SysMountPointLen=%zu, VirtPathBegin=%zu\", SysMountPointLen, VirtPathBegin);\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                OS_TranslatePath_Log(\"memcpy system_mountpt -> LocalPath (len=%zu)\", SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_TranslatePath_Log(\"Filesystem not mounted as system: flags=0x%08x, returning OS_ERR_INCORRECT_OBJ_STATE\", filesys->flags);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_TranslatePath_Log(\"Released object token\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"Continuing with path assembly: VirtPathLen=%zu, VirtPathBegin=%zu, SysMountPointLen=%zu\", VirtPathLen, VirtPathBegin, SysMountPointLen);\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n            OS_TranslatePath_Log(\"RETURN OS_FS_ERR_PATH_INVALID: VirtPathLen < VirtPathBegin (%zu < %zu)\", VirtPathLen, VirtPathBegin);\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            OS_TranslatePath_Log(\"Adjusted VirtPathLen after subtracting VirtPathBegin: %zu\", VirtPathLen);\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                OS_TranslatePath_Log(\"Copied virtual suffix into LocalPath; final local length=%zu\", SysMountPointLen + VirtPathLen);\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n                OS_TranslatePath_Log(\"RETURN OS_FS_ERR_PATH_TOO_LONG: SysMountPointLen + VirtPathLen >= OS_MAX_LOCAL_PATH_LEN (%zu + %zu >= %zu)\", SysMountPointLen, VirtPathLen, (size_t)OS_MAX_LOCAL_PATH_LEN);\n            }\n        }\n    }\n\n    OS_TranslatePath_Log(\"EXIT OS_TranslatePath: return_code=%d\", return_code);\n    return return_code;\n}\n"
}