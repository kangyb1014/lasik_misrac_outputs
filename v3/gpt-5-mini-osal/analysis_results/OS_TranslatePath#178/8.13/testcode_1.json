{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a non-const void *ref but only uses it as a read-only const char * (it does: const char *target = (const char *)ref). Callers (e.g. OS_TranslatePath) pass a const char *VirtualPath cast to (void *), discarding the const qualifier. Because the pointer could and should be declared const (e.g. const void *ref or const char *ref) to preserve constness and avoid casts that drop const, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append simple logs to /tmp/logs/1783.txt */\nstatic void OS_TranslatePath_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1783.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /* Log function entry and incoming pointer values */\n    OS_TranslatePath_log(\"ENTRY: OS_TranslatePath called. VirtualPath=%p, LocalPath=%p\", (const void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    OS_TranslatePath_log(\"After parameter checks: VirtualPath=%p, LocalPath=%p\", (const void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    OS_TranslatePath_log(\"Computed VirtPathLen=%zu\", VirtPathLen);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_log(\"ERROR: VirtPathLen >= OS_MAX_PATH_LEN (%zu >= %d). Returning OS_FS_ERR_PATH_TOO_LONG\", VirtPathLen, OS_MAX_PATH_LEN);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    OS_TranslatePath_log(\"strrchr returned name_ptr=%p\", (const void *)name_ptr);\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_log(\"ERROR: No '/' found in VirtualPath. Returning OS_FS_ERR_PATH_INVALID\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    OS_TranslatePath_log(\"Advanced name_ptr to point to filename start: name_ptr=%p\", (const void *)name_ptr);\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_log(\"ERROR: Filename length >= OS_MAX_FILE_NAME. Returning OS_FS_ERR_NAME_TOO_LONG\");\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_log(\"ERROR: VirtualPath does not start with '/'. VirtualPath[0]=%c. Returning OS_FS_ERR_PATH_INVALID\", VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_TranslatePath_log(\"About to call OS_ObjectIdGetBySearch. Passing (void*)VirtualPath=%p (note: original is const char*).\", (const void *)VirtualPath);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_log(\"Returned from OS_ObjectIdGetBySearch: return_code=%d\", return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TranslatePath_log(\"OS_ObjectIdGetBySearch failed. Mapping to OS_FS_ERR_PATH_INVALID and returning.\");\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        OS_TranslatePath_log(\"Located filesys record at %p\", (const void *)filesys);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            OS_TranslatePath_log(\"filesys flags indicate mounted system. flags=0x%X, system_mountpt=\" , filesys->flags);\n            /* Log the mount point strings safely */\n            OS_TranslatePath_log(\"system_mountpt='%.*s', system_len=%zu\", (int)sizeof(filesys->system_mountpt), filesys->system_mountpt, SysMountPointLen);\n            OS_TranslatePath_log(\"virtual_mountpt='%.*s', virtual_len=%zu\", (int)sizeof(filesys->virtual_mountpt), filesys->virtual_mountpt, VirtPathBegin);\n\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                OS_TranslatePath_log(\"Copying system mount point to LocalPath: SysMountPointLen=%zu\", SysMountPointLen);\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n            else\n            {\n                OS_TranslatePath_log(\"SysMountPointLen >= OS_MAX_LOCAL_PATH_LEN (%zu >= %d). Skipping copy.\", SysMountPointLen, OS_MAX_LOCAL_PATH_LEN);\n            }\n        }\n        else\n        {\n            OS_TranslatePath_log(\"ERROR: filesys not mounted as system. flags=0x%X. Setting return_code=OS_ERR_INCORRECT_OBJ_STATE\", filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_TranslatePath_log(\"Released token after filesystem lookup.\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            OS_TranslatePath_log(\"ERROR: VirtPathLen < VirtPathBegin (%zu < %zu). Returning OS_FS_ERR_PATH_INVALID\", VirtPathLen, VirtPathBegin);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            OS_TranslatePath_log(\"Appending virtual path portion to LocalPath. VirtPath portion length=%zu, SysMountPointLen=%zu\", VirtPathLen, SysMountPointLen);\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                OS_TranslatePath_log(\"Successfully built LocalPath. Total length=%zu. LocalPath='%.*s'\", SysMountPointLen + VirtPathLen, (int)(SysMountPointLen + VirtPathLen), LocalPath);\n            }\n            else\n            {\n                OS_TranslatePath_log(\"ERROR: Combined path length too long: SysMountPointLen(%zu) + VirtPathLen(%zu) >= OS_MAX_LOCAL_PATH_LEN(%d).\", SysMountPointLen, VirtPathLen, OS_MAX_LOCAL_PATH_LEN);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    OS_TranslatePath_log(\"EXIT: OS_TranslatePath returning %d\", return_code);\n    return return_code;\n}\n"
}