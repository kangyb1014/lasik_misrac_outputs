{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo.\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nPotential violation: strncpy copies up to sizeof(bin_prop->name) - 1 bytes from record->name_entry. While the destination is protected (bin_prop was memset and the copy length is one less than the destination size, ensuring no write past the destination), there is no guarantee in the shown code that record->name_entry points to a buffer at least that long. If record->name_entry refers to a smaller buffer (or a pointer to a shorter string storage), strncpy may read beyond the source object bounds, which would violate MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n\n--- OS_BinSemGetInfo ENTRY ---\nsem_id = -559038737, bin_prop ptr = 0x7ffff3903780\nAfter memset: sizeof(bin_prop) = 28, sizeof(bin_prop->name) = 20\nOS_ObjectIdGetById returned -35, token addr = 0x7ffff3903730\n--- OS_BinSemGetInfo EXIT (return -35) ---\n\n--- OS_BinSemGetInfo ENTRY ---\nsem_id = 0, bin_prop ptr = 0x7ffff3903780\nAfter memset: sizeof(bin_prop) = 28, sizeof(bin_prop->name) = 20\nOS_ObjectIdGetById returned -35, token addr = 0x7ffff3903730\n--- OS_BinSemGetInfo EXIT (return -35) ---\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BinSemGetInfo:\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_bin_sem_table\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claimed violation is not demonstrably correct based on the code shown. MISRA C:2023 Rule 21.17 forbids string.h calls that may access beyond the bounds of the objects referenced by their pointer parameters. The call strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1) could only violate that rule if record->name_entry does not point to (or refer to) an object at least (sizeof(bin_prop->name)-1) bytes long or if it is not a valid NUL-terminated string within that bound. In the provided context there is no evidence that record->name_entry is a shorter buffer or a pointer into a smaller object. In typical OSAL implementations OS_common_record_t uses a fixed-size name array (OS_MAX_API_NAME) matching the API-name size (the execution log even shows sizeof(bin_prop->name) == 20, matching that convention), so copying up to sizeof(name)-1 bytes is consistent and safe. Also bin_prop was memset to 0 beforehand so the destination is NUL-terminated even when strncpy copies fewer bytes. Therefore the report is not correct unless additional code (not shown) defines record->name_entry as a pointer to a smaller buffer; in the absence of such evidence there is no proven violation of Rule 21.17."
}