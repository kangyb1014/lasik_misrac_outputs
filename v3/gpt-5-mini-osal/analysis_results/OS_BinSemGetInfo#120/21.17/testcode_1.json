{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: strncpy copies up to sizeof(bin_prop->name) - 1 bytes from record->name_entry. While the destination is protected (bin_prop was memset and the copy length is one less than the destination size, ensuring no write past the destination), there is no guarantee in the shown code that record->name_entry points to a buffer at least that long. If record->name_entry refers to a smaller buffer (or a pointer to a shorter string storage), strncpy may read beyond the source object bounds, which would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1209.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "int32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    /* Local includes to ensure logging functions are available when this\n     * function is compiled independently for testing. These are placed\n     * inside the function to avoid changing global include structure. */\n    #include <stdio.h>\n\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n    FILE *logf = NULL;\n\n    /* Open log file for append so multiple runs accumulate evidence */\n    logf = fopen(\"/tmp/logs/1209.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"\\n--- OS_BinSemGetInfo ENTRY ---\\n\");\n        fprintf(logf, \"sem_id = %d, bin_prop ptr = %p\\n\", (int)sem_id, (void *)bin_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After memset: sizeof(bin_prop) = %zu, sizeof(bin_prop->name) = %zu\\n\",\n                (size_t)sizeof(OS_bin_sem_prop_t), (size_t)sizeof(bin_prop->name));\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d, token addr = %p\\n\", (int)return_code, (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"record ptr = %p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                fprintf(logf, \"record->name_entry ptr = %p\\n\", (void *)record->name_entry);\n                if (record->name_entry == NULL)\n                {\n                    fprintf(logf, \"WARNING: record->name_entry is NULL (will cause strncpy UB)\\n\");\n                }\n                else\n                {\n                    fprintf(logf, \"Planned strncpy length = %zu (sizeof(bin_prop->name) - 1)\\n\",\n                            (size_t)(sizeof(bin_prop->name) - 1));\n                    /* Do not attempt to read from record->name_entry here other than checking for NULL.\n                     * Reading from it may itself create an out-of-bounds access if the buffer is smaller\n                     * than expected. The intent of these logs is to capture pointers and planned sizes\n                     * so that an external investigator can correlate them with object layouts. */\n                }\n            }\n        }\n\n        /* The original copy operation is preserved to avoid changing behavior. */\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n\n        if (logf != NULL)\n        {\n            /* bin_prop->name is safe to read because it was memset above and strncpy limited to size-1. */\n            fprintf(logf, \"After strncpy, bin_prop->name = '%s'\\n\", bin_prop->name);\n        }\n\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_BinSemGetInfo_Impl returned %d\\n\", (int)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"--- OS_BinSemGetInfo EXIT (return %d) ---\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}