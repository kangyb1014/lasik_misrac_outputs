{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo.\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro takes the address of the token and yields a pointer to a non-const table element: &tbl[OS_ObjectIndexFromToken(&(tok))]. In the shown usage the token is only read (other functions take const OS_object_token_t *), and the returned record is only accessed for read (record->name_entry, record->creator). Therefore both the address-of tok (producing OS_object_token_t *) and the macro result (producing OS_common_record_t *) could and should be const-qualified (const OS_object_token_t * and const OS_common_record_t *). As written the macro produces non-const pointers where const-qualified pointers are possible, which violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1756097992] stage=ENTRY sem_id=3735928559 return_code=0 token_ptr=(nil) record_ptr=(nil)\n[1756097992] stage=AFTER_ObjectIdGetById sem_id=3735928559 return_code=-35 token_ptr=0x7ffd4a3ad0f0 record_ptr=(nil)\n[1756097992] stage=EXIT sem_id=3735928559 return_code=-35 token_ptr=(nil) record_ptr=(nil)\n[1756097992] stage=ENTRY sem_id=0 return_code=0 token_ptr=(nil) record_ptr=(nil)\n[1756097992] stage=AFTER_ObjectIdGetById sem_id=0 return_code=-35 token_ptr=0x7ffd4a3ad0f0 record_ptr=(nil)\n[1756097992] stage=EXIT sem_id=0 return_code=-35 token_ptr=(nil) record_ptr=(nil)\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BinSemGetInfo:\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_bin_sem_table\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_SUCCESS (0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as stated. MISRA 8.13 concerns pointer declarations that should point to const-qualified types when they never modify the pointed-at object. In this function the OS_object_token_t token cannot be made const because it is written by OS_ObjectIdGetById (so taking &token must be a non-const pointer). The macro OS_OBJECT_TABLE_GET() produces an lvalue of type OS_common_record_t * because the global table is declared as a pointer to mutable records; that macro is an expression and the table elements themselves are mutable elsewhere, so the macro\u2019s result type is appropriate. That said, the local variable record in OS_BinSemGetInfo is only used for read access in the shown code and therefore could be declared const OS_common_record_t * to better follow 8.13. But the agent\u2019s claim that both the token address and the macro result \u201cshould be const-qualified\u201d (and thus that the code as written violates 8.13) is incorrect: token must remain non-const, and the macro/table element types reflect mutable global objects. So the reported violation is not correct as presented."
}