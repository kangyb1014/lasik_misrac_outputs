{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro takes the address of the token and yields a pointer to a non-const table element: &tbl[OS_ObjectIndexFromToken(&(tok))]. In the shown usage the token is only read (other functions take const OS_object_token_t *), and the returned record is only accessed for read (record->name_entry, record->creator). Therefore both the address-of tok (producing OS_object_token_t *) and the macro result (producing OS_common_record_t *) could and should be const-qualified (const OS_object_token_t * and const OS_common_record_t *). As written the macro produces non-const pointers where const-qualified pointers are possible, which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging function - appends control flow and state info to /tmp/logs/1203.txt */\nstatic void OS_BinSemGetInfo_Probe(const char *stage, long long sem_id, const void *token_ptr, const void *record_ptr, long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] stage=%s sem_id=%lld return_code=%ld token_ptr=%p record_ptr=%p\\n\",\n            (long)t, stage, sem_id, return_code, token_ptr, record_ptr);\n\n    /* If a record pointer is available, try to print common fields used by the function. */\n    if (record_ptr != NULL)\n    {\n        /* The concrete type OS_common_record_t is expected to have name_entry and creator members\n         * (as used by the original code). Print them conservatively. */\n        const char *name = ((const struct { const char *name_entry; unsigned long creator; } *)record_ptr)->name_entry;\n        unsigned long creator = ((const struct { const char *name_entry; unsigned long creator; } *)record_ptr)->creator;\n\n        fprintf(f, \"  record.name_entry=%s creator=%lu\\n\", (name != NULL) ? name : \"(null)\", creator);\n    }\n\n    fclose(f);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and input parameters */\n    OS_BinSemGetInfo_Probe(\"ENTRY\", (long long)sem_id, NULL, NULL, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    OS_BinSemGetInfo_Probe(\"AFTER_ObjectIdGetById\", (long long)sem_id, (const void *)&token, NULL, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log record pointer and contents after table lookup */\n        OS_BinSemGetInfo_Probe(\"AFTER_TABLE_GET\", (long long)sem_id, (const void *)&token, (const void *)record, (long)return_code);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        /* Log state after copying name and creator */\n        OS_BinSemGetInfo_Probe(\"AFTER_COPY_TO_PROP\", (long long)sem_id, (const void *)&token, (const void *)record, (long)return_code);\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        /* Log result after calling implementation */\n        OS_BinSemGetInfo_Probe(\"AFTER_IMPL_CALL\", (long long)sem_id, (const void *)&token, (const void *)record, (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_BinSemGetInfo_Probe(\"AFTER_RELEASE\", (long long)sem_id, NULL, (const void *)record, (long)return_code);\n    }\n\n    /* Final exit log */\n    OS_BinSemGetInfo_Probe(\"EXIT\", (long long)sem_id, NULL, NULL, (long)return_code);\n\n    return return_code;\n}\n"
}