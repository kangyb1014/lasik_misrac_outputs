{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo.\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'record' is only used to read fields (record = OS_OBJECT_TABLE_GET(...); then record->name_entry and record->creator are read). It is declared as a non-const pointer: 'OS_common_record_t *record;'. It could and should be const-qualified (e.g. 'const OS_common_record_t *record;') because the pointed-to object is not modified in this function and assignment from the macro (OS_common_record_t *) to a pointer-to-const is allowed. Therefore Rule 8.13 is violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[OS_BinSemGetInfo] stage=after_clear sem_id=3735928559 ret=-1 token=(nil) record=(nil)\n    bin_prop->name=\"(null)\" bin_prop->creator=0\n[OS_BinSemGetInfo] stage=after_getbyid sem_id=3735928559 ret=-35 token=0x7ffed8858eb0 record=(nil)\n    bin_prop->name=\"(null)\" bin_prop->creator=0\n[OS_BinSemGetInfo] stage=return sem_id=3735928559 ret=-35 token=(nil) record=(nil)\n    bin_prop->name=\"(null)\" bin_prop->creator=0\n[OS_BinSemGetInfo] stage=after_clear sem_id=0 ret=-1 token=(nil) record=(nil)\n    bin_prop->name=\"(null)\" bin_prop->creator=0\n[OS_BinSemGetInfo] stage=after_getbyid sem_id=0 ret=-35 token=0x7ffed8858eb0 record=(nil)\n    bin_prop->name=\"(null)\" bin_prop->creator=0\n[OS_BinSemGetInfo] stage=return sem_id=0 ret=-35 token=(nil) record=(nil)\n    bin_prop->name=\"(null)\" bin_prop->creator=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BinSemGetInfo:\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_bin_sem_table\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_SUCCESS (0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_BinSemGetInfo the local variable record is only used to read fields (record->name_entry and record->creator) and is never used to modify the pointed-to object. Declaring it as const OS_common_record_t *record would be allowed (assigning the OS_OBJECT_TABLE_GET result, which yields OS_common_record_t *, to a const-qualified pointer is permitted) and would better satisfy MISRA C 2023 Rule 8.13. The surrounding code and macros (OS_OBJECT_TABLE_GET and the declaration extern OS_common_record_t *const OS_global_bin_sem_table) do not prevent making the pointee const here, so the pointer should be const-qualified \u2014 therefore the reported violation is valid."
}