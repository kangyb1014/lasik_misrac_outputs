{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t *record and is assigned from OS_OBJECT_TABLE_GET(...). In this function 'record' is only used for read-only access (reading name_entry and creator). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Here 'record' could be declared const OS_common_record_t *record (and the assignment from the macro result is an allowed qualification conversion), so the current non-const pointer usage violates the intent of Rule 8.13. Recommendation: change the declaration to const OS_common_record_t *record to reflect read-only use.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Helper logging probe - appends human-readable logs for control flow/state. */\nstatic void OS_BinSemGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1203.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best-effort logging only; do not affect original logic. */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    /* Log entry and initial parameter state */\n    OS_BinSemGetInfo_Log(\"ENTER: OS_BinSemGetInfo sem_id=%llu bin_prop=%p\", (unsigned long long)sem_id, (void *)bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    OS_BinSemGetInfo_Log(\"OS_ObjectIdGetById returned %ld for sem_id=%llu; token_addr=%p\", (long)return_code, (unsigned long long)sem_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log the pointer obtained from table and basic fields we will read */\n        if (record != NULL)\n        {\n            /* Log name_entry and creator as evidence of read-only access */\n            OS_BinSemGetInfo_Log(\"record=%p name_entry=\\\"%s\\\" creator=%llu\", (void *)record,\n                                 (record->name_entry != NULL) ? record->name_entry : \"(null)\",\n                                 (unsigned long long)record->creator);\n        }\n        else\n        {\n            OS_BinSemGetInfo_Log(\"record=NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        /* Preserve original logic: copy name and creator, call impl, release token. */\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_BinSemGetInfo_Log(\"After OS_BinSemGetInfo_Impl return_code=%ld bin_prop->name=\\\"%s\\\" bin_prop->creator=%llu\",\n                             (long)return_code, bin_prop->name, (unsigned long long)bin_prop->creator);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_BinSemGetInfo_Log(\"Token released for sem_id=%llu\", (unsigned long long)sem_id);\n    }\n    else\n    {\n        OS_BinSemGetInfo_Log(\"Skipping table lookup and impl; returning %ld\", (long)return_code);\n    }\n\n    OS_BinSemGetInfo_Log(\"EXIT: OS_BinSemGetInfo sem_id=%llu return_code=%ld\", (unsigned long long)sem_id, (long)return_code);\n\n    return return_code;\n}\n"
}