{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SelectSingle_Impl the local variable is declared as a non-const pointer: \"OS_impl_file_internal_record_t *impl\" and is assigned via impl = OS_OBJECT_TABLE_GET(..., *token); the function only reads members (impl->selectable and impl->fd) and does not modify the object. Therefore impl could and should be declared as a pointer to const (const OS_impl_file_internal_record_t *impl) to prevent modification, so Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: appends human-readable logs to /tmp/logs/1023.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1023.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *lt = localtime(&t);\n    if (lt != NULL)\n    {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", lt->tm_year + 1900, lt->tm_mon + 1,\n                lt->tm_mday, lt->tm_hour, lt->tm_min, lt->tm_sec);\n    }\n    else\n    {\n        fprintf(f, \"0000-00-00 00:00:00 \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    probe_log(\"Enter OS_SocketAccept_Impl: sock_token=%p, conn_token=%p, timeout=%d\",\n              (const void *)sock_token, (const void *)conn_token, (int)timeout);\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    probe_log(\"After table lookup: sock_impl=%p, conn_impl=%p\",\n              (const void *)sock_impl, (const void *)conn_impl);\n\n    /* Log key state of the involved internal records (best-effort safe casts) */\n    if (sock_impl != NULL)\n    {\n        probe_log(\"sock_impl: selectable=%d, fd=%d\",\n                  (int)(sock_impl->selectable), (int)(sock_impl->fd));\n    }\n    else\n    {\n        probe_log(\"sock_impl is NULL\");\n    }\n\n    if (conn_impl != NULL)\n    {\n        probe_log(\"conn_impl: fd=%d\", (int)(conn_impl->fd));\n    }\n    else\n    {\n        probe_log(\"conn_impl is NULL\");\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    probe_log(\"Initial operation mask set to 0x%08x\", (unsigned int)operation);\n\n    if (sock_impl->selectable)\n    {\n        probe_log(\"sock_impl->selectable is true: calling OS_SelectSingle_Impl with sock_token=%p, operation_ptr=%p, timeout=%d\",\n                  (const void *)sock_token, (const void *)&operation, (int)timeout);\n\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n\n        probe_log(\"Returned from OS_SelectSingle_Impl: return_code=%d, operation=0x%08x\",\n                  (int)return_code, (unsigned int)operation);\n    }\n    else\n    {\n        probe_log(\"sock_impl->selectable is false: skipping select, defaulting return_code=OS_SUCCESS\");\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            probe_log(\"Operation mask does not indicate readable: operation=0x%08x -> timeout\", (unsigned int)operation);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen = Addr->ActualLength;\n            probe_log(\"Before accept: sock_fd=%d, addrlen=%u\", (int)sock_impl->fd, (unsigned int)addrlen);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            if (conn_impl->fd < 0)\n            {\n                probe_log(\"accept() failed: returned %d, errno=%d (%s)\", (int)conn_impl->fd, errno, strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n                probe_log(\"accept() succeeded: conn_fd=%d, updated_addrlen=%u\",\n                          (int)conn_impl->fd, (unsigned int)addrlen);\n\n                /* Note the call to set socket flags for the new connection */\n                probe_log(\"Calling OS_IMPL_SET_SOCKET_FLAGS for conn_token=%p\", (const void *)conn_token);\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                probe_log(\"OS_IMPL_SET_SOCKET_FLAGS completed for conn_token=%p\", (const void *)conn_token);\n            }\n        }\n    }\n\n    probe_log(\"Exit OS_SocketAccept_Impl: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}