{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function OS_BSP_ConsoleOutput_Impl is declared to accept a non-const pointer (e.g. void OS_BSP_ConsoleOutput_Impl(char *buf, size_t len)), then this call passes Message (a buffer provided for read-only output) to a non-const pointer parameter. Since the buffer is not modified by the caller and the function likely only reads it, the parameter should be const-qualified (const char *buf). In that case the code violates MISRA C 2023 Rule 8.13. If, however, OS_BSP_ConsoleOutput_Impl is already declared to take a const-qualified pointer (e.g. void OS_BSP_ConsoleOutput_Impl(const char *buf, size_t len)), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_EndTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_EndTest:\n```c\nvoid UT_BSP_EndTest(const UtAssert_TestCounter_t *TestCounters)\n{\n    char Message[128];\n\n    /*\n     * Only output a \"summary\" if there is more than one test Segment.\n     * Otherwise it is a duplicate of the report already given.\n     */\n    if (TestCounters->TestSegmentCount > 1)\n    {\n        UtAssert_DoTestSegmentReport(\"SUMMARY\", TestCounters);\n    }\n\n    snprintf(Message, sizeof(Message), \"COMPLETE: %u tests Segment(s) executed\\n\\n\",\n             (unsigned int)TestCounters->TestSegmentCount);\n\n    UT_BSP_Lock();\n    OS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n    UT_BSP_Unlock();\n\n    if ((TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE] > 0) ||\n        (TestCounters->CaseCount[UTASSERT_CASETYPE_TSF] > 0) || (TestCounters->CaseCount[UTASSERT_CASETYPE_TTF] > 0))\n    {\n        OS_BSP_SetExitCode(OS_ERROR);\n    }\n    else\n    {\n        OS_BSP_SetExitCode(OS_SUCCESS);\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_EndTest code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <stddef.h>\n\n/*\n * Probe/logging helpers: write runtime evidence to /tmp/logs/3393.txt\n * These helpers do not change program logic; they only append diagnostic\n * information about control flow and state so other agents can reproduce\n * and inspect the circumstances around the OS_BSP_ConsoleOutput_Impl call.\n */\nstatic void UT_BSP_ProbeLog_OpenAndWrite(const char *text)\n{\n    FILE *f = fopen(\"/tmp/logs/3393.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging, do not alter program flow on failure */\n    }\n    /* timestamp for easier correlation */\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] %s\\n\", (long)t, text);\n    fclose(f);\n}\n\nstatic void UT_BSP_ProbeLog_State(const char *stage, const char *message, const void *ptr, size_t len,\n                                   unsigned int segmentCount,\n                                   unsigned int case_failures,\n                                   unsigned int case_tsf,\n                                   unsigned int case_ttf)\n{\n    FILE *f = fopen(\"/tmp/logs/3393.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] STAGE: %s\\n\", (long)t, stage);\n    fprintf(f, \"Pointer: %p\\n\", ptr);\n    fprintf(f, \"Length: %zu\\n\", len);\n    /* Write a safe, truncated view of the message to avoid overly large logs */\n    if (message != NULL)\n    {\n        char preview[256];\n        size_t copy_len = strlen(message);\n        if (copy_len >= sizeof(preview))\n        {\n            copy_len = sizeof(preview) - 1;\n        }\n        memcpy(preview, message, copy_len);\n        preview[copy_len] = '\\0';\n        fprintf(f, \"MessagePreview: \\\"%s\\\"\\n\", preview);\n    }\n    fprintf(f, \"TestSegmentCount: %u\\n\", segmentCount);\n    fprintf(f, \"CaseCounts: failures=%u, tsf=%u, ttf=%u\\n\", case_failures, case_tsf, case_ttf);\n\n    /* Add developer note describing the MISRA concern: whether the callee accepts const */\n    fprintf(f, \"Note: This probe logs the buffer passed to OS_BSP_ConsoleOutput_Impl and the length.\\n\");\n    fprintf(f, \"If OS_BSP_ConsoleOutput_Impl is declared to take a non-const pointer (e.g. char *),\\n\");\n    fprintf(f, \"then passing a read-only buffer (like 'Message') is a potential MISRA 8.13 violation.\\n\");\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\n/* Original function with probes inserted. Keeps original control flow and behavior. */\nvoid UT_BSP_EndTest(const UtAssert_TestCounter_t *TestCounters)\n{\n    char Message[128];\n\n    UT_BSP_ProbeLog_OpenAndWrite(\"ENTER UT_BSP_EndTest\");\n\n    /*\n     * Only output a \"summary\" if there is more than one test Segment.\n     * Otherwise it is a duplicate of the report already given.\n     */\n    if (TestCounters->TestSegmentCount > 1)\n    {\n        UT_BSP_ProbeLog_OpenAndWrite(\"About to call UtAssert_DoTestSegmentReport (SUMMARY)\");\n        UtAssert_DoTestSegmentReport(\"SUMMARY\", TestCounters);\n        UT_BSP_ProbeLog_OpenAndWrite(\"Returned from UtAssert_DoTestSegmentReport (SUMMARY)\");\n    }\n\n    snprintf(Message, sizeof(Message), \"COMPLETE: %u tests Segment(s) executed\\n\\n\",\n             (unsigned int)TestCounters->TestSegmentCount);\n\n    /* Log state immediately before console output */\n    UT_BSP_ProbeLog_State(\"BeforeConsoleOutput\", Message, (const void *)Message, strlen(Message),\n                          (unsigned int)TestCounters->TestSegmentCount,\n                          (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n                          (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n                          (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n\n    UT_BSP_Lock();\n\n    /* Log that we are about to invoke the console output implementation */\n    UT_BSP_ProbeLog_OpenAndWrite(\"Calling OS_BSP_ConsoleOutput_Impl\");\n\n    /* Original call preserved exactly */\n    OS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n\n    /* Log immediately after console output call */\n    UT_BSP_ProbeLog_OpenAndWrite(\"Returned from OS_BSP_ConsoleOutput_Impl\");\n\n    UT_BSP_Unlock();\n\n    if ((TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE] > 0) ||\n        (TestCounters->CaseCount[UTASSERT_CASETYPE_TSF] > 0) || (TestCounters->CaseCount[UTASSERT_CASETYPE_TTF] > 0))\n    {\n        UT_BSP_ProbeLog_OpenAndWrite(\"Decision: set exit code to OS_ERROR\");\n        OS_BSP_SetExitCode(OS_ERROR);\n    }\n    else\n    {\n        UT_BSP_ProbeLog_OpenAndWrite(\"Decision: set exit code to OS_SUCCESS\");\n        OS_BSP_SetExitCode(OS_SUCCESS);\n    }\n\n    UT_BSP_ProbeLog_OpenAndWrite(\"EXIT UT_BSP_EndTest\");\n}\n"
}