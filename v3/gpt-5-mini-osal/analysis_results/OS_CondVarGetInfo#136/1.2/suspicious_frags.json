{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);",
    "return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);",
    "record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);",
    "OS_ObjectIdRelease(&token);",
    "OS_CHECK_POINTER(condvar_prop);"
  ],
  "explanation": "I did not find any explicit compiler language extensions in the visible code (no use of __attribute__, __asm__, __builtin_*, typeof, statement-expressions ({ ... }), nested functions, GCC/Clang __extension__ markers, or other vendor-specific keywords). Standard library calls (memset, strncpy) and the function signature/typedefs (int32, osal_id_t, etc.) are ordinary C usage and not compiler extensions themselves. The only parts flagged are the macro/function-like identifiers shown (OS_CHECK_POINTER, OS_ObjectIdGetById / OS_OBJECT_TABLE_GET, OS_CondVarGetInfo_Impl, OS_ObjectIdRelease) because their definitions are not present here and they could expand to or be implemented using compiler-specific extensions; those definitions should be inspected. All other code lines in the fragment are standard C and do not need further investigation for Rule 1.2 based on the visible text."
}