{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code reads from record->name_entry but record and its name_entry member are non-const. If OS_common_record_t::name_entry is declared as a non-const char array or char * (e.g. char name_entry[OS_MAX_API_NAME] or char *name_entry), then the pointer to the source data is not const-qualified even though it is only read. This violates MISRA C 2023 Rule 8.13. To fix: declare the struct member as const char name_entry[...] or const char *name_entry, or make record a pointer to const OS_common_record_t (const OS_common_record_t *record) to indicate the data is read-only.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Probe helpers: append logs to /tmp/logs/1363.txt */\nstatic void OS_CondVar_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void OS_CondVar_log_bytes(const char *label, const char *s, size_t max_bytes)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: \", label);\n    if (s == NULL)\n    {\n        fprintf(f, \"(null)\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Print as a safe printable string up to max_bytes, also show hex for non-printables */\n    size_t i;\n    for (i = 0; i < max_bytes && s[i] != '\\0'; ++i)\n    {\n        unsigned char c = (unsigned char)s[i];\n        if (c >= 0x20 && c <= 0x7e)\n        {\n            fputc((int)c, f);\n        }\n        else\n        {\n            fprintf(f, \"\\\\x%02x\", c);\n        }\n    }\n    if (i == 0)\n    {\n        fprintf(f, \"(empty)\\n\");\n    }\n    else\n    {\n        if (i < max_bytes && s[i] == '\\0')\n        {\n            fprintf(f, \" [len=%zu]\\n\", i);\n        }\n        else\n        {\n            fprintf(f, \" [truncated to %zu bytes]\\n\", max_bytes);\n        }\n    }\n\n    fclose(f);\n}\n\n/* Modified OS_CondVarGetInfo with probes inserted. Original logic preserved. */\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters (pointer values only to avoid dereferencing invalid pointers) */\n    OS_CondVar_log(\"OS_CondVarGetInfo entry: var_id=%\" PRIuPTR \", condvar_prop_ptr=%\" PRIuPTR,\n                   (uintptr_t)var_id, (uintptr_t)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    OS_CondVar_log(\"condvar_prop zeroed (size=%zu)\", (size_t)sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVar_log(\"OS_ObjectIdGetById returned %d, token_ptr=%\" PRIuPTR, return_code, (uintptr_t)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n        OS_CondVar_log(\"record obtained: record_ptr=%\" PRIuPTR, (uintptr_t)record);\n\n        /* Probe the name source before copying. Use a local const pointer to avoid modifying the source. */\n        if (record != NULL)\n        {\n            const char *name_src = (const char *)record->name_entry;\n            OS_CondVar_log(\"record->name_entry pointer=%\" PRIuPTR, (uintptr_t)name_src);\n\n            /* Log up to the destination buffer size - 1 (same as the strncpy call below) */\n            OS_CondVar_log_bytes(\"record->name_entry (preview)\", name_src, sizeof(condvar_prop->name) - 1);\n\n            /* Also log the creator value in the record (as an integer representation) */\n            OS_CondVar_log(\"record->creator (raw)=%\" PRIuPTR, (uintptr_t)record->creator);\n        }\n        else\n        {\n            OS_CondVar_log(\"record is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        /* Preserve original copy semantics */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n\n        /* Log the destination buffer after copy */\n        OS_CondVar_log_bytes(\"condvar_prop->name (after strncpy)\", condvar_prop->name, sizeof(condvar_prop->name) - 1);\n\n        condvar_prop->creator = record->creator;\n        OS_CondVar_log(\"condvar_prop->creator set to %\" PRIuPTR, (uintptr_t)condvar_prop->creator);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        OS_CondVar_log(\"OS_CondVarGetInfo_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_CondVar_log(\"token released\");\n    }\n    else\n    {\n        OS_CondVar_log(\"OS_ObjectIdGetById failed with %d; skipping record access\", return_code);\n    }\n\n    OS_CondVar_log(\"OS_CondVarGetInfo exit: return_code=%d\", return_code);\n    return return_code;\n}\n"
}