{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as a mutable pointer (OS_common_record_t *record) and is assigned from OS_OBJECT_TABLE_GET(OS_global_condvar_table, token), which yields an OS_common_record_t *; the code only reads fields from *record (name_entry, creator) and does not modify the object. According to MISRA C 2023 Rule 8.13 the pointer should thus point to a const-qualified type (e.g. const OS_common_record_t *record) or the table elements should be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe/logger helper for OS_CondVarGetInfo\n * Appends human-readable trace information to /tmp/logs/1363.txt\n * Uses only non-intrusive reads of objects (passes const pointers where possible)\n */\nstatic void OS_CondVarGetInfo_Log(const char *stage,\n                                  osal_id_t var_id,\n                                  int32 return_code,\n                                  const OS_object_token_t *token,\n                                  const OS_common_record_t *record,\n                                  const OS_condvar_prop_t *prop)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Basic stage and identifiers */\n    (void)fprintf(f, \"OS_CondVarGetInfo: stage=%s var_id=%lu return_code=%d\\n\",\n                  (stage != NULL) ? stage : \"(null)\", (unsigned long) var_id, (int) return_code);\n\n    /* Token address (token contents are opaque here) */\n    if (token != NULL)\n    {\n        (void)fprintf(f, \"  token_addr=0x%p\\n\", (const void *)token);\n    }\n\n    /* Record contents read-only (do not modify) */\n    if (record != NULL)\n    {\n        /* name_entry and creator are read for evidence only */\n        const char *name = record->name_entry;\n        (void)fprintf(f, \"  record_addr=0x%p name=\\\"%s\\\" creator=%lu\\n\",\n                      (const void *)record,\n                      (name != NULL) ? name : \"(null)\",\n                      (unsigned long) record->creator);\n    }\n\n    /* The target property structure after population (if available) */\n    if (prop != NULL)\n    {\n        (void)fprintf(f, \"  prop_name=\\\"%s\\\" prop_creator=%lu\\n\",\n                      prop->name, (unsigned long) prop->creator);\n    }\n\n    (void)fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    /* Initialize output and log entry point */\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    OS_CondVarGetInfo_Log(\"entry_after_init\", var_id, -1, NULL, NULL, condvar_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVarGetInfo_Log(\"after_ObjectIdGetById\", var_id, return_code, &token, NULL, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Log the record as read-only evidence before using it */\n        OS_CondVarGetInfo_Log(\"before_copy_from_record\", var_id, return_code, &token, record, NULL);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->name[sizeof(condvar_prop->name) - 1] = '\\0';\n        condvar_prop->creator = record->creator;\n\n        /* Log the populated output structure prior to calling Impl */\n        OS_CondVarGetInfo_Log(\"after_copy_to_prop\", var_id, return_code, &token, record, condvar_prop);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        /* Log the result from the Impl and the token release about to happen */\n        OS_CondVarGetInfo_Log(\"after_Impl_before_release\", var_id, return_code, &token, record, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Final log after release */\n        OS_CondVarGetInfo_Log(\"exit_after_release\", var_id, return_code, NULL, NULL, condvar_prop);\n    }\n\n    return return_code;\n}\n"
}