{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable is declared as \"OS_common_record_t *record\" but is only used to read data (strncpy from record->name_entry and copy record->creator). Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible. In this function the pointer can and should be declared as \"const OS_common_record_t *record\" to reflect read-only usage, so the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper to append logs to the requested file. */\nstatic void OS_CondVarGetInfo_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry with parameter values (pointer value only; do not dereference yet) */\n    OS_CondVarGetInfo_Log(\"ENTER: OS_CondVarGetInfo var_id=%ld condvar_prop_ptr=%p\", (long) var_id, (void *) condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    /* Log after clearing output structure */\n    OS_CondVarGetInfo_Log(\"After memset: condvar_prop=%p size=%zu\", (void *) condvar_prop, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVarGetInfo_Log(\"OS_ObjectIdGetById returned %ld for var_id=%ld (token=%p)\", (long) return_code, (long) var_id, (void *) &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Log the record pointer and some of its readable fields to capture read-only usage */\n        if (record != NULL)\n        {\n            /* Safely log record fields that will be read (name_entry and creator). */\n            OS_CondVarGetInfo_Log(\"Record obtained: record_ptr=%p name_entry=\\\"%s\\\" creator=%lu\",\n                                  (void *) record,\n                                  (record->name_entry != NULL) ? record->name_entry : \"(null)\",\n                                  (unsigned long) record->creator);\n        }\n        else\n        {\n            OS_CondVarGetInfo_Log(\"Record obtained: record_ptr=NULL\");\n        }\n\n        /* Preserve original logic: copy data from record into condvar_prop */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Log the state after copying into condvar_prop */\n        OS_CondVarGetInfo_Log(\"After copy: condvar_prop->name=\\\"%s\\\" condvar_prop->creator=%lu\",\n                              condvar_prop->name,\n                              (unsigned long) condvar_prop->creator);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        OS_CondVarGetInfo_Log(\"OS_CondVarGetInfo_Impl returned %ld\", (long) return_code);\n\n        OS_CondVarGetInfo_Log(\"Releasing token %p\", (void *) &token);\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        OS_CondVarGetInfo_Log(\"OS_ObjectIdGetById failed with code %ld; skipping record access\", (long) return_code);\n    }\n\n    OS_CondVarGetInfo_Log(\"EXIT: OS_CondVarGetInfo returning %ld\", (long) return_code);\n\n    return return_code;\n}\n"
}