{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketConnect:\n```c\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious fragments found with respect to MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n\nReasons (pointer uses in the function and why they do not violate Rule 8.13):\n- Addr is declared as const OS_SockAddr_t *Addr and is already const-qualified, so no issue.\n- stream is declared as OS_stream_internal_record_t *stream and is later modified (stream->stream_state |= ...). Because the object is intentionally mutated, it must be a non-const pointer; making it point to const would be incorrect.\n- token is a stack object of type OS_object_token_t passed by address to functions (e.g., OS_ObjectIdGetById, OS_SocketConnect_Impl, OS_ObjectIdRelease). These calls treat token as an output/handle and/or modify it; therefore it must be non-const.\n- Macros/functions used (OS_CHECK_POINTER(Addr), OS_OBJECT_TABLE_GET(OS_stream_table, token), OS_ObjectIdGetById(..., &token), OS_ObjectIdRelease(&token), OS_SocketConnect_Impl(&token, Addr, Timeout)) either accept const where appropriate (Addr) or require a mutable pointer/handle (token, stream).\n\nGiven the above, there are no pointer declarations in this function that could reasonably be changed to point to const-qualified types without altering required behavior, so no code fragments require further investigation for Rule 8.13."
}