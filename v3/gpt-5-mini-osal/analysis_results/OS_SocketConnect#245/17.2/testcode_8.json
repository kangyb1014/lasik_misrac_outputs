{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur if the OS_DEBUG facility ultimately invokes OS_printf. In OS_printf() the first branch (when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER) calls OS_DEBUG(\"BUG: ... %s\", String). If OS_DEBUG is implemented in terms of OS_printf (a common pattern), this yields OS_printf -> OS_DEBUG -> OS_printf, i.e. indirect self-call and thus a violation of MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketConnect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2456.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketConnect as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketConnect:\n```c\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketConnect code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger that appends human-readable traces to /tmp/logs/2456.txt */\nstatic void OS_SocketConnect_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2456.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Probe: entry */\n    OS_SocketConnect_Log(\"ENTER OS_SocketConnect: sock_id=%ld Addr=%p Timeout=%ld\",\n                         (long)sock_id, (const void *)Addr, (long)Timeout);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    /* Probe: after pointer check (may not be reached if macro exits) */\n    OS_SocketConnect_Log(\"After OS_CHECK_POINTER: Addr=%p\", (const void *)Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Probe: result of ObjectIdGetById */\n    OS_SocketConnect_Log(\"OS_ObjectIdGetById returned %ld for sock_id=%ld\", (long)return_code, (long)sock_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Probe: stream info */\n        OS_SocketConnect_Log(\"Obtained stream ptr=%p domain=%d type=%d state=0x%lx\",\n                             (void *)stream,\n                             (int)stream->socket_domain,\n                             (int)stream->socket_type,\n                             (unsigned long)stream->stream_state);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_SocketConnect_Log(\"Invalid socket domain: set return_code=%ld\", (long)return_code);\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketConnect_Log(\"Socket already connected: stream_state=0x%lx set return_code=%ld\",\n                                 (unsigned long)stream->stream_state, (long)return_code);\n        }\n        else\n        {\n            OS_SocketConnect_Log(\"Calling OS_SocketConnect_Impl with token=%p Addr=%p Timeout=%ld\",\n                                 (void *)&token, (const void *)Addr, (long)Timeout);\n\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            OS_SocketConnect_Log(\"OS_SocketConnect_Impl returned %ld\", (long)return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n                OS_SocketConnect_Log(\"Updated stream_state to 0x%lx after successful connect\", (unsigned long)stream->stream_state);\n            }\n        }\n\n        OS_SocketConnect_Log(\"Releasing token at %p\", (void *)&token);\n        OS_ObjectIdRelease(&token);\n    }\n\n    OS_SocketConnect_Log(\"EXIT OS_SocketConnect: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}