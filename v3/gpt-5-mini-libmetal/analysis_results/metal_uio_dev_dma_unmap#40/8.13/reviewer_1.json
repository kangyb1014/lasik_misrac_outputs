{
  "user_message": "An agent A claimed that the following metal_uio_dev_dma_unmap code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_uio_dev_dma_unmap.\n```c\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n\t\t\t\t    struct linux_device *ldev,\n\t\t\t\t    uint32_t dir,\n\t\t\t\t    struct metal_sg *sg,\n\t\t\t\t    int nents)\n{\n\t(void) lbus;\n\t(void) ldev;\n\t(void) dir;\n\t(void) sg;\n\t(void) nents;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as 'struct linux_bus *lbus' but the function does not modify or use the object (it is only cast to void). Per MISRA C 2023 Rule 8.13, this pointer should be const-qualified when possible \u2014 e.g. 'const struct linux_bus *lbus'. Leaving it non-const violates the rule unless there is a justification (API compatibility or intended mutation).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The function declares pointer parameters (struct linux_bus *lbus, struct linux_device *ldev, struct metal_sg *sg) but does not use or modify the pointees (they are only cast to void). Per MISRA C:2023 Rule 8.13 a pointer should be to a const-qualified type whenever possible \u2014 i.e. parameters that are not used/modified should be declared as pointer to const. Casting to void to silence unused-parameter warnings does not satisfy the intent of the rule. The only valid justification for leaving them non-const would be API/ABI compatibility (or an intended future mutation) documented by the developers; no such justification is provided here. Therefore, the agent A report is correct unless there is an external reason (callback prototype or API compatibility) preventing the change."
}