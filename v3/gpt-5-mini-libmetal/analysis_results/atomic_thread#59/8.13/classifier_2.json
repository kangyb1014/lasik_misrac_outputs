{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of atomic_thread:\n```c\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function atomic_thread:\nstatic const int atomic_test_count = 1000\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\natomic_fetch_add(c, 1);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated: c is intended to be modified by atomic_fetch_add, so it must point to a non-const atomic_int. Making it a pointer-to-const would be incorrect. (A violation would occur if the object were only accessed for reading but the pointer was not declared as pointing to a const-qualified type, e.g. using atomic_load(c) while c is declared as atomic_int * instead of const atomic_int *.)"
}