{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of atomic_thread:\n```c\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function atomic_thread:\nstatic const int atomic_test_count = 1000\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn NULL;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The statement 'return NULL;' at the end of atomic_thread is executed when the thread function returns and provides the required return value for a function declared to return void *. Removing it would cause control to reach the end of a non-void function, which is undefined behaviour in C, so its removal could change program behaviour. Therefore this statement is not dead code and Rule 2.2 is not violated."
}