{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns an internal bus pointer into a non-const out-parameter: *result = bus; This exposes a struct metal_bus * to callers even though the function only reads the bus. Per MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when modification is not required. The signature should therefore expose const struct metal_bus * (for example via const struct metal_bus **result or by returning const struct metal_bus *), so the current non-const assignment is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    FILE *log = fopen(\"/tmp/logs/23.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_bus_find called: name=\\\"%s\\\", result=%p\\n\",\n                name ? name : \"(null)\", (void *)result);\n    }\n\n    struct metal_list *node;\n    struct metal_bus *bus;\n    int iter = 0;\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n        if (log) {\n            fprintf(log, \"  iter=%d, bus=%p, bus->name=\\\"%s\\\"\\n\",\n                    iter, (void *)bus, bus->name ? bus->name : \"(null)\");\n        }\n        if (strcmp(bus->name, name) == 0 && result) {\n            if (log) {\n                fprintf(log, \"  match found: assigning *result = %p (bus name=\\\"%s\\\"), result pointer=%p\\n\",\n                        (void *)bus, bus->name ? bus->name : \"(null)\", (void *)result);\n                fflush(log);\n                fclose(log);\n            }\n            *result = bus;\n            return 0;\n        }\n        iter++;\n    }\n\n    if (log) {\n        fprintf(log, \"  no match found, returning -ENOENT\\n\");\n        fflush(log);\n        fclose(log);\n    }\n    return -ENOENT;\n}\n"
}