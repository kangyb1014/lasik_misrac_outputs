{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function assigns an internal bus pointer into a non-const out-parameter: *result = bus; This exposes a struct metal_bus * to callers even though the function only reads the bus. Per MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when modification is not required. The signature should therefore expose const struct metal_bus * (for example via const struct metal_bus **result or by returning const struct metal_bus *), so the current non-const assignment is a violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_bus_find called: name=\"platform\", result=(nil)\n  no match found, returning -ENOENT\nmetal_bus_find called: name=\"pci\", result=(nil)\n  iter=0, bus=0x7f8baa6b9b60, bus->name=\"platform\"\n  no match found, returning -ENOENT\nmetal_bus_find called: name=\"platform\", result=0x7ffca1a48bc8\n  iter=0, bus=0x7f8baa6b9b60, bus->name=\"platform\"\n  match found: assigning *result = 0x7f8baa6b9b60 (bus name=\"platform\"), result pointer=0x7ffca1a48bc8\nmetal_bus_find called: name=\"pci\", result=0x7ffca1a48bc8\n  iter=0, bus=0x7f8baa6badc8, bus->name=\"pci\"\n  match found: assigning *result = 0x7f8baa6badc8 (bus name=\"pci\"), result pointer=0x7ffca1a48bc8\nmetal_bus_find called: name=\"platform\", result=(nil)\n  no match found, returning -ENOENT\nmetal_bus_find called: name=\"pci\", result=(nil)\n  iter=0, bus=0x55dc34a35260, bus->name=\"platform\"\n  no match found, returning -ENOENT\nmetal_bus_find called: name=\"platform\", result=0x7fffe6197238\n  iter=0, bus=0x55dc34a35260, bus->name=\"platform\"\n  match found: assigning *result = 0x55dc34a35260 (bus name=\"platform\"), result pointer=0x7fffe6197238\nmetal_bus_find called: name=\"pci\", result=0x7fffe6197238\n  iter=0, bus=0x55dc34a364c8, bus->name=\"pci\"\n  match found: assigning *result = 0x55dc34a364c8 (bus name=\"pci\"), result pointer=0x7fffe6197238\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C 2023 Rule 8.13 advises that pointers used to access objects that will not be modified should be to const-qualified types where that is feasible. Whether that applies here is a matter of API intent, not a simple local coding mistake.\n\nIn metal_bus_find the parameter result is an out-parameter meant to return a pointer to an internal struct metal_bus to the caller. The function itself does not modify the bus object, but it is deliberately exposing a non-const struct metal_bus * to callers so they may use or modify the returned bus as the API allows. Changing the parameter to const struct metal_bus ** (or returning a const struct metal_bus *) would alter the API and prevent callers from obtaining a non-const pointer without casting \u2014 a behavioral change that MISRA does not mandate automatically. If the API designer intends callers not to modify the bus, then the API should be changed accordingly; otherwise the current signature is acceptable.\n\nIf a stricter local application of 8.13 were enforced within this translation unit you could make the local iteration pointer const (e.g. const struct metal_bus *bus) to express that this function does not modify the bus; however that interacts with the out-parameter assignment and the public API. In short, the agent A\u2019s claim that this is a MISRA 8.13 violation (as written) is incorrect because the rule\u2019s \u201cwhenever possible\u201d must account for the intended API semantics \u2014 here exposing a non-const pointer to the caller appears intentional and therefore not a violation.\n"
}