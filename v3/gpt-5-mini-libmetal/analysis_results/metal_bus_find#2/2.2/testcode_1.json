{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_bus_register the code calls metal_bus_find(bus->name, NULL) solely to test for an existing bus: if (metal_bus_find(bus->name, NULL) == 0) return -EEXIST; However, metal_bus_find only returns 0 when a matching name is found AND the 'result' pointer is non-NULL (it checks strcmp(...) == 0 && result). With result == NULL the function will never return 0 (it only performs read-only comparisons and ultimately returns -ENOENT). Therefore the call has no effect on program state or control flow: removing it would not change program behaviour. This constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/22.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    FILE *log = fopen(\"/tmp/logs/22.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_bus_find: entry name='%s' result=%p\\n\",\n                name ? name : \"(null)\", (void *)result);\n    }\n\n    struct metal_list *node;\n    struct metal_bus *bus;\n    int ret = -ENOENT;\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n        int cmp = strcmp(bus->name, name);\n        if (log) {\n            fprintf(log, \"  checking bus name='%s' target='%s' strcmp=%d result_ptr=%p\\n\",\n                    bus->name ? bus->name : \"(null)\", name ? name : \"(null)\", cmp, (void *)result);\n        }\n        if (cmp == 0) {\n            if (result) {\n                *result = bus;\n                ret = 0;\n                if (log) {\n                    fprintf(log, \"  match found: assigned *result -> bus=%p name='%s'\\n\",\n                            (void *)bus, bus->name);\n                }\n                break;\n            } else {\n                if (log) {\n                    fprintf(log, \"  match found but result==NULL: no assignment performed (behavior preserved)\\n\");\n                }\n                /* preserve original logic: do not assign or return when result == NULL */\n            }\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"metal_bus_find: exit ret=%d\\n\", ret);\n        fclose(log);\n    }\n\n    return ret;\n}\n"
}