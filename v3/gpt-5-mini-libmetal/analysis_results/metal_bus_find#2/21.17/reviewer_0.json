{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call strcmp(bus->name, name) is evaluated before checking result. If name is NULL (or if bus->name is not a valid NUL-terminated buffer or points to a shorter buffer), strcmp will read via an invalid pointer or past the object bounds, causing out-of-bounds/undefined access. For example, a caller passing name == NULL will make strcmp dereference a NULL pointer. This violates MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_bus_find entered: name=0x7f7fefc908e0, result=(nil)\nno match found, returning -ENOENT\nmetal_bus_find entered: name=0x7f7fefc9090d, result=(nil)\niteration: bus=0x7f7fefc96b60, bus->name=0x7f7fefc908e0\ncalling strcmp(bus->name=0x7f7fefc908e0, name=0x7f7fefc9090d)\nno match found, returning -ENOENT\nmetal_bus_find entered: name=0x7f7fefc908e0, result=0x7ffdfe7ba678\niteration: bus=0x7f7fefc96b60, bus->name=0x7f7fefc908e0\ncalling strcmp(bus->name=0x7f7fefc908e0, name=0x7f7fefc908e0)\nmatch found: bus=0x7f7fefc96b60, setting result and returning 0\nmetal_bus_find entered: name=0x7f7fefc9090d, result=0x7ffdfe7ba678\niteration: bus=0x7f7fefc97dc8, bus->name=0x7f7fefc9090d\ncalling strcmp(bus->name=0x7f7fefc9090d, name=0x7f7fefc9090d)\nmatch found: bus=0x7f7fefc97dc8, setting result and returning 0\nmetal_bus_find entered: name=0x560792616220, result=(nil)\nno match found, returning -ENOENT\nmetal_bus_find entered: name=0x56079261624d, result=(nil)\niteration: bus=0x56079261e260, bus->name=0x560792616220\ncalling strcmp(bus->name=0x560792616220, name=0x56079261624d)\nno match found, returning -ENOENT\nmetal_bus_find entered: name=0x560792616220, result=0x7fffd9a274d8\niteration: bus=0x56079261e260, bus->name=0x560792616220\ncalling strcmp(bus->name=0x560792616220, name=0x560792616220)\nmatch found: bus=0x56079261e260, setting result and returning 0\nmetal_bus_find entered: name=0x56079261624d, result=0x7fffd9a274d8\niteration: bus=0x56079261f4c8, bus->name=0x56079261624d\ncalling strcmp(bus->name=0x56079261624d, name=0x56079261624d)\nmatch found: bus=0x56079261f4c8, setting result and returning 0\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The code calls strcmp(bus->name, name) without validating the pointer parameters. MISRA C:2023 Rule 21.17 prohibits uses of <string.h> functions that may access beyond the bounds of the objects referenced by their pointer parameters. If 'name' (or bus->name) is NULL or does not point to a valid NUL-terminated buffer, strcmp may dereference an invalid pointer or read out of bounds \u2014 e.g. a caller passing name == NULL would cause undefined behaviour. The execution log only shows non-NULL names, but that does not eliminate the defect in the code. The call is therefore potentially non-conforming unless there is a documented and enforced precondition that both pointers are non-NULL and point to NUL-terminated strings. In the absence of such a contract or explicit validation inside the function, agent A\u2019s report is correct."
}