{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ps' (struct metal_page_size *ps) is not const-qualified even though the function only reads from it. It could and should be declared as 'const struct metal_page_size *ps'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\nPlease provide the modified metal_io_init code.\n",
  "test_code": "#include <stdio.h>\n#include <limits.h>\n#include <stddef.h>\n\n/* Probe/log helper: keep pointers const-qualified where possible. */\nstatic void metal_io_log_state(const char *event,\n                               const struct metal_io_region *cio,\n                               const void *virt,\n                               const struct metal_phys_addr_t *physmap,\n                               size_t size,\n                               unsigned int page_shift,\n                               unsigned int mem_flags,\n                               const struct metal_io_ops *ops,\n                               unsigned long page_mask,\n                               int used_nops)\n{\n    FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Log an event marker, pointer values and key scalar state. */\n    fprintf(f, \"metal_io_init: %s\\n\", event);\n    fprintf(f, \"  io=%p\\n\", (const void *)cio);\n    fprintf(f, \"  virt=%p\\n\", virt);\n    fprintf(f, \"  physmap=%p\\n\", (const void *)physmap);\n    fprintf(f, \"  size=%zu\\n\", size);\n    fprintf(f, \"  page_shift=%u\\n\", page_shift);\n    fprintf(f, \"  mem_flags=0x%08x\\n\", mem_flags);\n    fprintf(f, \"  ops=%p\\n\", (const void *)ops);\n    fprintf(f, \"  page_mask=0x%lx\\n\", page_mask);\n    fprintf(f, \"  used_nops=%d\\n\", used_nops);\n\n    if (cio) {\n        /* Log the members that have been initialized so far. */\n        /* Use casts to avoid type-format mismatches. */\n        fprintf(f, \"  io->virt=%p\\n\", (const void *)cio->virt);\n        fprintf(f, \"  io->physmap=%p\\n\", (const void *)cio->physmap);\n        fprintf(f, \"  io->size=%zu\\n\", (size_t)cio->size);\n        fprintf(f, \"  io->page_shift=%u\\n\", (unsigned int)cio->page_shift);\n        fprintf(f, \"  io->page_mask=0x%lx\\n\", (unsigned long)cio->page_mask);\n        fprintf(f, \"  io->mem_flags=0x%08x\\n\", (unsigned int)cio->mem_flags);\n        fprintf(f, \"  io->ops=%p\\n\", (const void *)&cio->ops);\n    }\n\n    fprintf(f, \"--\\n\");\n    fclose(f);\n}\n\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n          const metal_phys_addr_t *physmap, size_t size,\n          unsigned int page_shift, unsigned int mem_flags,\n          const struct metal_io_ops *ops)\n{\n    const struct metal_io_ops nops = {\n        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n    };\n\n    /* Log entry with initial parameter state. */\n    metal_io_log_state(\"enter\", NULL, virt, physmap, size,\n                       page_shift, mem_flags, ops, 0UL, 0);\n\n    io->virt = virt;\n    io->physmap = physmap;\n    io->size = size;\n    io->page_shift = page_shift;\n    if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n        /* avoid overflow */\n        io->page_mask = -1UL;\n    else\n        io->page_mask = (1UL << page_shift) - 1UL;\n    io->mem_flags = mem_flags;\n\n    /* Determine whether default ops are used and log before assignment. */\n    int used_nops = (ops == NULL) ? 1 : 0;\n    metal_io_log_state(\"before_ops_assign\", io, virt, physmap, size,\n                       page_shift, mem_flags, ops, io->page_mask, used_nops);\n\n    io->ops = ops ? *ops : nops;\n\n    /* Log after assigning ops but before mapping. */\n    metal_io_log_state(\"after_ops_assign\", io, virt, physmap, size,\n                       page_shift, mem_flags, ops, io->page_mask, used_nops);\n\n    metal_sys_io_mem_map(io);\n\n    /* Final state after mapping. */\n    metal_io_log_state(\"exit\", io, virt, physmap, size,\n                       page_shift, mem_flags, ops, io->page_mask, used_nops);\n}\n"
}