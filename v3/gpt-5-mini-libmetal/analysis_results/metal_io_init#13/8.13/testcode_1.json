{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_shmem_try_map, the local pointer is declared as \"uint8_t *virt;\" but it is only used for address arithmetic and passed to metal_virt2phys(virt + offset), which does not modify the pointed-to memory. Therefore virt could be declared as \"const uint8_t *virt\". Declaring it non-const violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\nPlease provide the modified metal_io_init code.\n",
  "test_code": "#include <stdio.h>\n#include <limits.h>\n\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n          const metal_phys_addr_t *physmap, size_t size,\n          unsigned int page_shift, unsigned int mem_flags,\n          const struct metal_io_ops *ops)\n{\n    const struct metal_io_ops nops = {\n        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n    };\n\n    /* Preserve original logic: assign parameters into io */\n    io->virt = virt;\n    io->physmap = physmap;\n    io->size = size;\n    io->page_shift = page_shift;\n\n    /* Compute page_mask exactly as original code does. */\n    if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n        /* avoid overflow */\n        io->page_mask = -1UL;\n    else\n        io->page_mask = (1UL << page_shift) - 1UL;\n\n    io->mem_flags = mem_flags;\n    io->ops = ops ? *ops : nops;\n\n    /* Probe logging: record control flow and state to /tmp/logs/133.txt */\n    {\n        FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n        if (f != NULL)\n        {\n            /* Log entry header */\n            fprintf(f, \"metal_io_init called\\n\");\n\n            /* Log pointers and scalar state. Use %p for pointers. */\n            fprintf(f, \"  io=%p, virt=%p, physmap=%p\\n\",\n                    (void *)io, virt, (const void *)physmap);\n            fprintf(f, \"  size=%zu, page_shift=%u, mem_flags=%u\\n\",\n                    size, page_shift, mem_flags);\n\n            /* Log computed page_mask in hex and decimal */\n            fprintf(f, \"  computed page_mask=0x%lX (%lu)\\n\",\n                    io->page_mask, io->page_mask);\n\n            /* Log whether ops was provided or defaulted */\n            fprintf(f, \"  ops=%p (%s)\\n\",\n                    (const void *)ops, ops ? \"provided\" : \"defaulted\");\n\n            /* Context note to help reproduce pointer-constness issue: */\n            fprintf(f, \"  NOTE: virt is treated as a byte pointer for address math; \"\n                        \"it is not modified by metal_io_init.\\n\");\n\n            fprintf(f, \"---\\n\");\n            fclose(f);\n        }\n    }\n\n    /* Preserve original behavior: call system mapping function. */\n    metal_sys_io_mem_map(io);\n}\n"
}