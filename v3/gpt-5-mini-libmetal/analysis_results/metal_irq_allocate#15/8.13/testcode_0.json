{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'cntr' is only used to read fields (cntr->irq_base, cntr->irq_num) and is never modified. Therefore it could be declared as 'const struct metal_irq_controller *cntr' to reflect that the pointed-to object is not modified. As written, it is a non-const pointer even though const qualification is possible \u2014 this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_allocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_allocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_allocate:\n```c\nstatic int metal_irq_allocate(int irq_base, int irq_num)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\tint irq_tocheck = irq_base, irq_end_tocheck;\n\n\tif (irq_num == 0) {\n\t\treturn METAL_IRQ_ANY;\n\t}\n\tif (irq_tocheck == METAL_IRQ_ANY) {\n\t\tirq_tocheck = 0;\n\t}\n\tirq_end_tocheck = irq_tocheck + irq_num;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint cntr_irq_base, cntr_irq_end;\n\n\t\tcntr = metal_container_of(node,\n\t\t\t\t\t  struct metal_irq_controller, node);\n\t\tcntr_irq_base = cntr->irq_base;\n\t\tcntr_irq_end = cntr_irq_base + cntr->irq_num;\n\t\tif (irq_tocheck < cntr_irq_end &&\n\t\t    irq_end_tocheck > cntr_irq_base) {\n\t\t\tif (irq_base != METAL_IRQ_ANY) {\n\t\t\t\t/* IRQ has been allocated */\n\t\t\t\treturn METAL_IRQ_ANY;\n\t\t\t}\n\t\t\tirq_tocheck = cntr_irq_end;\n\t\t\tirq_end_tocheck = irq_tocheck + irq_num;\n\t\t}\n\t}\n\treturn irq_tocheck;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_allocate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function: append logs to /tmp/logs/153.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/153.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_irq_allocate(int irq_base, int irq_num)\n{\n    struct metal_list *node;\n    struct metal_irq_controller *cntr;\n    int irq_tocheck = irq_base, irq_end_tocheck;\n\n    probe_log(\"ENTER: metal_irq_allocate(irq_base=%d, irq_num=%d)\", irq_base, irq_num);\n\n    if (irq_num == 0) {\n        probe_log(\"EARLY RETURN: irq_num == 0 -> METAL_IRQ_ANY\");\n        return METAL_IRQ_ANY;\n    }\n    if (irq_tocheck == METAL_IRQ_ANY) {\n        probe_log(\"Requested ANY IRQ: normalizing irq_tocheck from METAL_IRQ_ANY to 0\");\n        irq_tocheck = 0;\n    }\n    irq_end_tocheck = irq_tocheck + irq_num;\n    probe_log(\"Search range initialized: irq_tocheck=%d, irq_end_tocheck=%d\", irq_tocheck, irq_end_tocheck);\n\n    metal_list_for_each(&irq_cntrs, node) {\n        int cntr_irq_base, cntr_irq_end;\n\n        cntr = metal_container_of(node,\n                      struct metal_irq_controller, node);\n\n        /* Log controller pointer and its fields to capture read-only usage */\n        probe_log(\"Visiting controller: node=%p cntr=%p\", (void *)node, (void *)cntr);\n        probe_log(\"Controller fields: cntr->irq_base=%d, cntr->irq_num=%d\", cntr->irq_base, cntr->irq_num);\n\n        cntr_irq_base = cntr->irq_base;\n        cntr_irq_end = cntr_irq_base + cntr->irq_num;\n        probe_log(\"Controller range: cntr_irq_base=%d, cntr_irq_end=%d\", cntr_irq_base, cntr_irq_end);\n\n        if (irq_tocheck < cntr_irq_end &&\n            irq_end_tocheck > cntr_irq_base) {\n            probe_log(\"Overlap detected: irq_tocheck=%d irq_end_tocheck=%d overlaps cntr range [%d,%d)\",\n                      irq_tocheck, irq_end_tocheck, cntr_irq_base, cntr_irq_end);\n            if (irq_base != METAL_IRQ_ANY) {\n                /* IRQ has been allocated */\n                probe_log(\"IRQ already allocated and specific irq_base requested -> returning METAL_IRQ_ANY\");\n                return METAL_IRQ_ANY;\n            }\n            irq_tocheck = cntr_irq_end;\n            irq_end_tocheck = irq_tocheck + irq_num;\n            probe_log(\"Bumping irq_tocheck to %d, new irq_end_tocheck=%d\", irq_tocheck, irq_end_tocheck);\n        }\n    }\n    probe_log(\"EXIT: returning irq_tocheck=%d\", irq_tocheck);\n    return irq_tocheck;\n}\n"
}