{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'cntr' is declared as 'struct metal_irq_controller *cntr' but in this function it is only used to read members (irq_base, irq_num). According to Rule 8.13, the pointer should be declared to point to a const-qualified type whenever possible (e.g. 'const struct metal_irq_controller *cntr'). The metal_container_of macro returns a non-const pointer, but assigning that to a pointer-to-const is allowed, so the current non-const declaration is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_allocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_allocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_allocate:\n```c\nstatic int metal_irq_allocate(int irq_base, int irq_num)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\tint irq_tocheck = irq_base, irq_end_tocheck;\n\n\tif (irq_num == 0) {\n\t\treturn METAL_IRQ_ANY;\n\t}\n\tif (irq_tocheck == METAL_IRQ_ANY) {\n\t\tirq_tocheck = 0;\n\t}\n\tirq_end_tocheck = irq_tocheck + irq_num;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint cntr_irq_base, cntr_irq_end;\n\n\t\tcntr = metal_container_of(node,\n\t\t\t\t\t  struct metal_irq_controller, node);\n\t\tcntr_irq_base = cntr->irq_base;\n\t\tcntr_irq_end = cntr_irq_base + cntr->irq_num;\n\t\tif (irq_tocheck < cntr_irq_end &&\n\t\t    irq_end_tocheck > cntr_irq_base) {\n\t\t\tif (irq_base != METAL_IRQ_ANY) {\n\t\t\t\t/* IRQ has been allocated */\n\t\t\t\treturn METAL_IRQ_ANY;\n\t\t\t}\n\t\t\tirq_tocheck = cntr_irq_end;\n\t\t\tirq_end_tocheck = irq_tocheck + irq_num;\n\t\t}\n\t}\n\treturn irq_tocheck;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_allocate code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/153.txt */\nstatic FILE *get_log_file(void)\n{\n    static FILE *fp = NULL;\n    if (!fp) {\n        /* Open in append mode so successive calls accumulate evidence */\n        fp = fopen(\"/tmp/logs/153.txt\", \"a\");\n        /* If fopen fails, just return NULL and probes become no-ops */\n    }\n    return fp;\n}\n\nstatic void probe_call_params(int irq_base, int irq_num)\n{\n    FILE *fp = get_log_file();\n    if (!fp) return;\n    fprintf(fp, \"metal_irq_allocate CALL: irq_base=%d, irq_num=%d\\n\", irq_base, irq_num);\n    fflush(fp);\n}\n\nstatic void probe_initial_range(int irq_tocheck, int irq_end_tocheck)\n{\n    FILE *fp = get_log_file();\n    if (!fp) return;\n    fprintf(fp, \"  initial range: irq_tocheck=%d, irq_end_tocheck=%d\\n\", irq_tocheck, irq_end_tocheck);\n    fflush(fp);\n}\n\nstatic void probe_cntr_state(void *cntr_ptr, int cntr_irq_base, int cntr_irq_num, int cntr_irq_end)\n{\n    FILE *fp = get_log_file();\n    if (!fp) return;\n    fprintf(fp, \"  examine cntr: ptr=%p, irq_base=%d, irq_num=%d, irq_end=%d\\n\",\n            cntr_ptr, cntr_irq_base, cntr_irq_num, cntr_irq_end);\n    fflush(fp);\n}\n\nstatic void probe_overlap_detected(int irq_base)\n{\n    FILE *fp = get_log_file();\n    if (!fp) return;\n    fprintf(fp, \"  overlap detected for requested irq_base=%d -> returning METAL_IRQ_ANY\\n\", irq_base);\n    fflush(fp);\n}\n\nstatic void probe_return_value(int retval)\n{\n    FILE *fp = get_log_file();\n    if (!fp) return;\n    fprintf(fp, \"metal_irq_allocate RETURN: %d\\n\", retval);\n    fflush(fp);\n}\n\nstatic int metal_irq_allocate(int irq_base, int irq_num)\n{\n    struct metal_list *node;\n    struct metal_irq_controller *cntr;\n    int irq_tocheck = irq_base, irq_end_tocheck;\n\n    /* Log the incoming parameters as early evidence */\n    probe_call_params(irq_base, irq_num);\n\n    if (irq_num == 0) {\n        probe_return_value(METAL_IRQ_ANY);\n        return METAL_IRQ_ANY;\n    }\n    if (irq_tocheck == METAL_IRQ_ANY) {\n        irq_tocheck = 0;\n    }\n    irq_end_tocheck = irq_tocheck + irq_num;\n\n    probe_initial_range(irq_tocheck, irq_end_tocheck);\n\n    metal_list_for_each(&irq_cntrs, node) {\n        int cntr_irq_base, cntr_irq_end;\n\n        cntr = metal_container_of(node,\n                      struct metal_irq_controller, node);\n        cntr_irq_base = cntr->irq_base;\n        cntr_irq_end = cntr_irq_base + cntr->irq_num;\n\n        /* Log the controller pointer and its fields to show it was only read */\n        probe_cntr_state((void *)cntr, cntr_irq_base, cntr->irq_num, cntr_irq_end);\n\n        if (irq_tocheck < cntr_irq_end &&\n            irq_end_tocheck > cntr_irq_base) {\n            if (irq_base != METAL_IRQ_ANY) {\n                /* IRQ has been allocated */\n                probe_overlap_detected(irq_base);\n                probe_return_value(METAL_IRQ_ANY);\n                return METAL_IRQ_ANY;\n            }\n            irq_tocheck = cntr_irq_end;\n            irq_end_tocheck = irq_tocheck + irq_num;\n\n            /* Log the updated search range after skipping this controller */\n            probe_initial_range(irq_tocheck, irq_end_tocheck);\n        }\n    }\n\n    probe_return_value(irq_tocheck);\n    return irq_tocheck;\n}\n"
}