{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of mutex_thread:\n```c\nstatic void *mutex_thread(void *arg)\n{\n\tmetal_mutex_t *l = arg;\n\tint i;\n\n\tfor (i = 0; i < mutex_test_count; i++) {\n\t\tmetal_mutex_acquire(l);\n\t\tusleep(1);\n\t\tmetal_mutex_release(l);\n\t}\n\n\treturn NULL;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void *mutex_thread(void *arg)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the parameter must match the thread-start prototype (void *arg) and the mutex is modified by metal_mutex_acquire/release, so it cannot be const-qualified. Declaring arg as const void * would conflict with the required pthread-style signature and declaring metal_mutex_t as const would prevent the required modifications. If this were a function internal to the module and the pointed-to data were never modified, then a const-qualified pointer would be required, but that is not the case here."
}