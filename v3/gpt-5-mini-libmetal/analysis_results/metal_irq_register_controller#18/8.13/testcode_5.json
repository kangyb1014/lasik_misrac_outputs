{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe field 'void *arg' is declared as a non-const pointer but is typically used as an opaque context pointer passed to interrupt-controller callbacks and not modified through the pointer. If the pointed-to object is intended to be read-only (not modified via this pointer), it should be declared 'const void *arg'. Declaring it non-const when it could be const violates MISRA C 2023 Rule 8.13. (Fix: change the declaration to 'const void *arg' and update any callback signatures/uses accordingly.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_register_controller code that contains useful probe functions that print useful logs to a file \"/tmp/logs/183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_register_controller as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_register_controller:\n```c\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n\tint irq_base;\n\tstruct metal_list *node;\n\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tif (node == &cntr->node) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/*\n\t * Allocate IRQ numbers which are not yet used by any IRQ\n\t * controllers.\n\t */\n\tirq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n\tif (irq_base == METAL_IRQ_ANY) {\n\t\treturn -EINVAL;\n\t}\n\tcntr->irq_base = irq_base;\n\n\tmetal_list_add_tail(&irq_cntrs, &cntr->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_register_controller code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n\nstatic void irq_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/183.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n    int irq_base;\n    struct metal_list *node;\n\n    irq_log(\"ENTER: metal_irq_register_controller cntr=%p\", (void *)cntr);\n\n    if (cntr == NULL) {\n        irq_log(\"NULL_CONTROLLER: returning -EINVAL\");\n        return -EINVAL;\n    }\n\n    /* Log key fields that exist on the controller structure as used here. */\n    irq_log(\"CONTROLLER_STATE: cntr=%p irq_base(request)=%d irq_num=%d node_ptr=%p\",\n            (void *)cntr, cntr->irq_base, cntr->irq_num, (void *)&cntr->node);\n\n    metal_list_for_each(&irq_cntrs, node) {\n        irq_log(\"LIST_ITER: comparing node=%p with cntr->node=%p\", (void *)node, (void *)&cntr->node);\n        if (node == &cntr->node) {\n            irq_log(\"ALREADY_REGISTERED: cntr=%p returning 0\", (void *)cntr);\n            return 0;\n        }\n    }\n\n    /*\n     * Allocate IRQ numbers which are not yet used by any IRQ\n     * controllers.\n     */\n    irq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n    irq_log(\"ALLOCATE_RESULT: requested_base=%d irq_num=%d allocated_base=%d\",\n            cntr->irq_base, cntr->irq_num, irq_base);\n\n    if (irq_base == METAL_IRQ_ANY) {\n        irq_log(\"ALLOCATE_FAILED: returning -EINVAL\");\n        return -EINVAL;\n    }\n    cntr->irq_base = irq_base;\n    irq_log(\"ASSIGNED_IRQ_BASE: cntr=%p irq_base=%d\", (void *)cntr, cntr->irq_base);\n\n    metal_list_add_tail(&irq_cntrs, &cntr->node);\n    irq_log(\"ADDED_TO_LIST: cntr=%p node=%p\", (void *)cntr, (void *)&cntr->node);\n    irq_log(\"EXIT: metal_irq_register_controller cntr=%p returning 0\", (void *)cntr);\n    return 0;\n}\n"
}