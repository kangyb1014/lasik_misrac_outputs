{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local iterator variable 'node' is declared as 'struct metal_list *node' but is only used for read/compare (metal_list_for_each iterates and the code only tests 'if (node == &cntr->node)'). Per Rule 8.13 it should be const-qualified when possible, e.g. 'const struct metal_list *node'. The comparison with '&cntr->node' is valid because a non-const pointer can be converted to a pointer-to-const; therefore the current non-const declaration violates the rule unless the iteration macro requires a mutable pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_register_controller code that contains useful probe functions that print useful logs to a file \"/tmp/logs/183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_register_controller as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_register_controller:\n```c\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n\tint irq_base;\n\tstruct metal_list *node;\n\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tif (node == &cntr->node) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/*\n\t * Allocate IRQ numbers which are not yet used by any IRQ\n\t * controllers.\n\t */\n\tirq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n\tif (irq_base == METAL_IRQ_ANY) {\n\t\treturn -EINVAL;\n\t}\n\tcntr->irq_base = irq_base;\n\n\tmetal_list_add_tail(&irq_cntrs, &cntr->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_register_controller code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n\tint irq_base;\n\tstruct metal_list *node;\n\tFILE *log = fopen(\"/tmp/logs/183.txt\", \"a\");\n\n\tif (log) {\n\t\tfprintf(log, \"metal_irq_register_controller: entry cntr=%p\\n\", (void *)cntr);\n\t\tfflush(log);\n\t}\n\n\tif (cntr == NULL) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_irq_register_controller: cntr is NULL, returning -EINVAL\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"metal_irq_register_controller: starting iteration over irq_cntrs\\n\");\n\t\tfflush(log);\n\t}\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"  iter node=%p, cntr->node=%p, equal=%d\\n\",\n\t\t\t\t(void *)node, (void *)&cntr->node, (node == &cntr->node) ? 1 : 0);\n\t\t\tfflush(log);\n\t\t}\n\t\tif (node == &cntr->node) {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"  found existing controller node, returning 0\\n\");\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"metal_irq_register_controller: allocating irq numbers, requested base=%d num=%d\\n\",\n\t\t\tcntr->irq_base, cntr->irq_num);\n\t\tfflush(log);\n\t}\n\tirq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n\tif (irq_base == METAL_IRQ_ANY) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_irq_register_controller: allocation returned METAL_IRQ_ANY, returning -EINVAL\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\tcntr->irq_base = irq_base;\n\n\tif (log) {\n\t\tfprintf(log, \"metal_irq_register_controller: allocated irq_base=%d, adding controller to list\\n\", irq_base);\n\t\tfflush(log);\n\t}\n\n\tmetal_list_add_tail(&irq_cntrs, &cntr->node);\n\n\tif (log) {\n\t\tfprintf(log, \"metal_irq_register_controller: added controller, returning 0\\n\");\n\t\tfclose(log);\n\t}\n\treturn 0;\n}\n"
}