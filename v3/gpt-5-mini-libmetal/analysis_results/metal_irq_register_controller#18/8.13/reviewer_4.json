{
  "user_message": "An agent A claimed that the following metal_irq_register_controller code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_irq_register_controller.\n```c\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n\tint irq_base;\n\tstruct metal_list *node;\n\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tif (node == &cntr->node) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/*\n\t * Allocate IRQ numbers which are not yet used by any IRQ\n\t * controllers.\n\t */\n\tirq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n\tif (irq_base == METAL_IRQ_ANY) {\n\t\treturn -EINVAL;\n\t}\n\tcntr->irq_base = irq_base;\n\n\tmetal_list_add_tail(&irq_cntrs, &cntr->node);\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'node' is only used to iterate and compare list nodes (metal_list_for_each and if (node == &cntr->node)) and is not used to modify the pointed-to objects. Therefore it could be declared as 'const struct metal_list *node'. Declaring it as a non-const pointer violates MISRA C 2023 Rule 8.13. (If the metal_list_for_each macro requires a non-const pointer, the macro or its usage should be adjusted so traversal can be done with a pointer to const.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter: cntr=0x7f00a52b0d00 irq_base=0 irq_num=1023 node=0x7f00a52b0d20 compared_node=(nil)\nno existing controller found: attempting to allocate IRQ base\nmetal_irq_allocate called with requested_base=0 irq_num=1023\nmetal_irq_allocate: allocating base=0\nassigned irq_base=0 to controller 0x7f00a52b0d00\ncontroller added to irq_cntrs: returning 0\nenter: cntr=0x56037e526520 irq_base=0 irq_num=1023 node=0x56037e526540 compared_node=(nil)\nno existing controller found: attempting to allocate IRQ base\nmetal_irq_allocate called with requested_base=0 irq_num=1023\nmetal_irq_allocate: allocating base=0\nassigned irq_base=0 to controller 0x56037e526520\ncontroller added to irq_cntrs: returning 0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_irq_register_controller:\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The local pointer variable 'node' is only used to traverse and compare list nodes (read-only uses) and does not modify the pointed-to objects; therefore under MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (e.g. const struct metal_list *node). Declaring it const does not prevent the metal_list_for_each expansion from working (assigning a struct metal_list * into a const struct metal_list * is allowed) and it better reflects the read-only use and satisfies the rule. If the list iteration macro or other code actually required writing through the pointer, then const could not be used; but in the shown code that is not the case, so the non-const declaration is a MISRA 8.13 violation."
}