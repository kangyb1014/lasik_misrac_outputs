{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_shmem_open_generic:\nstruct metal_generic_shmem {\n\tconst char\t\t*name;\n\tstruct metal_io_region\tio;\n\tstruct metal_list\tnode;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "struct metal_generic_shmem {\n\tconst char\t\t\t*name;\n\tstruct metal_io_region\tio;\n\tstruct metal_list\tnode;\n}",
    "int metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t\t     struct metal_io_region **result)",
    "if (strcmp(shmem->name, name) != 0)"
  ],
  "explanation": "Other lines in the function do not call or rely on the <string.h> string-handling functions and therefore are not relevant to MISRA C 2023 Rule 21.17. In particular:\n- The metal_list_for_each loop construct and metal_container_of usage perform list traversal and pointer/container calculations, not string accesses.\n- The size comparison (size <= metal_io_region_size(&shmem->io)) and the assignment *result = &shmem->io do not perform any string operations.\n- The struct metal_list definition and the struct metal_io_region usage shown do not contain string-handling calls.\nTherefore only the places that pass character-array pointers to a string.h routine (the function parameter declaration for name, the struct field holding the name, and the strcmp call) need investigation for potential out-of-bounds string accesses (null-termination, buffer length, or NULL pointers)."
}