{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(shmem->name, name) can read until a NUL byte from both pointers. Nothing in the shown code guarantees that shmem->name or the caller-supplied name point to NUL-terminated character arrays or that their buffers are large enough. For example, if the caller passes a pointer to a non-terminated buffer (e.g. a 4\u2011byte buffer filled with characters but no '\\0'), or if shmem->name points to a fixed-length char array that was not NUL-terminated, strcmp will read past the object bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/209.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open_generic code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stddef.h>\n\nint metal_shmem_open_generic(const char *name, size_t size,\n                             struct metal_io_region **result)\n{\n    struct metal_generic_shmem *shmem;\n    struct metal_list *node;\n    FILE *log = fopen(\"/tmp/logs/209.txt\", \"a\");\n\n    if (log) {\n        fprintf(log, \"ENTER: metal_shmem_open_generic(name=%p, size=%zu, result=%p)\\n\",\n                (const void *)name, size, (void *)result);\n        fflush(log);\n    }\n\n    metal_list_for_each(&_metal.common.generic_shmem_list, node) {\n        shmem = metal_container_of(node, struct metal_generic_shmem, node);\n\n        if (log) {\n            /* Log pointers and numeric state only to avoid introducing new out-of-bounds reads */\n            fprintf(log, \"ITER: shmem=%p shmem->name=%p io_size=%zu\\n\",\n                    (void *)shmem, (void *)shmem->name,\n                    (size_t)metal_io_region_size(&shmem->io));\n            fprintf(log, \"      about to call strcmp(shmem->name, name)\\n\");\n            fflush(log);\n        }\n\n        /* Original logic preserved */\n        if (strcmp(shmem->name, name) != 0) {\n            if (log) {\n                fprintf(log, \"      strcmp != 0, continuing\\n\");\n                fflush(log);\n            }\n            continue;\n        }\n\n        if (log) {\n            fprintf(log, \"      strcmp == 0 (names match). checking size: requested=%zu, region=%zu\\n\",\n                    size, (size_t)metal_io_region_size(&shmem->io));\n            fflush(log);\n        }\n\n        if (size <= metal_io_region_size(&shmem->io)) {\n            if (log) {\n                fprintf(log, \"      size OK, returning region=%p\\n\", (void *)&shmem->io);\n                fclose(log);\n            }\n            *result = &shmem->io;\n            return 0;\n        }\n\n        if (log) {\n            fprintf(log, \"      size too small for this region, continuing\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"EXIT: not found, returning -ENOENT\\n\");\n        fclose(log);\n    }\n\n    return -ENOENT;\n}\n"
}