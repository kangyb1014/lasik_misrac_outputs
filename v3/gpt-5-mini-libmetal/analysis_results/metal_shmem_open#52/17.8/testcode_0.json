{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'size' (type size_t) is assigned to: 'size = metal_align_up(size, ps->page_size);'. This directly modifies the non\u2011pointer function parameter, violating MISRA C 2023 Rule 17.8. Use a local variable (e.g. 'size_t aligned_size = metal_align_up(size, ps->page_size);') instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "int metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\tFILE *log = NULL;\n\n\t/* Probe: open log file for trace evidence */\n\tlog = fopen(\"/tmp/logs/527.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"ENTER metal_shmem_open: name=%s, size=%zu, result=%p\\n\",\n\t\t\tname ? name : \"(null)\", size, (void *)result);\n\t\tfflush(log);\n\t}\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (log) {\n\t\tfprintf(log, \"after metal_shmem_open_generic: error=%d, size=%zu\\n\",\n\t\t\terror, size);\n\t\tfflush(log);\n\t}\n\tif (!error) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"early return from metal_shmem_open (already opened): error=%d\\n\", error);\n\t\t\tfclose(log);\n\t\t}\n\t\treturn error;\n\t}\n\n\terror = metal_open(name, 1);\n\tif (log) {\n\t\tfprintf(log, \"after metal_open: return=%d\\n\", error);\n\t\tfflush(log);\n\t}\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_open failed, returning error=%d\\n\", error);\n\t\t\tfclose(log);\n\t\t}\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\t/* Log page size and decision predicate */\n\t\tif (log) {\n\t\t\tfprintf(log, \"loop iteration: ps=%p, ps->page_size=%zu, size=%zu\\n\",\n\t\t\t\t(void *)ps, (size_t)ps->page_size, size);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tif (ps->page_size > 2 * size) {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"skipping page_size %zu because > 2 * size (%zu)\\n\",\n\t\t\t\t\t(size_t)ps->page_size, size);\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (log) {\n\t\t\tfprintf(log, \"after metal_shmem_try_map: ps=%p, page_size=%zu, size=%zu, error=%d, result=%p\\n\",\n\t\t\t\t(void *)ps, (size_t)ps->page_size, size, error, (void *)*result);\n\t\t\tfflush(log);\n\t\t}\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"closing fd=%d, final error=%d\\n\", fd, error);\n\t\tfclose(log);\n\t}\n\n\tclose(fd);\n\treturn error;\n}"
}