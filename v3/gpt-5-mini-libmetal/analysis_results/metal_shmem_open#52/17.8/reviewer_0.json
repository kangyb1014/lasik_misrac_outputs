{
  "user_message": "An agent A claimed that the following metal_shmem_open code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_open.\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'size' (type size_t) is assigned to: 'size = metal_align_up(size, ps->page_size);'. This directly modifies the non\u2011pointer function parameter, violating MISRA C 2023 Rule 17.8. Use a local variable (e.g. 'size_t aligned_size = metal_align_up(size, ps->page_size);') instead.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f9709c98e20\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f970a499e20\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f970ac9ae20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_shmem_open_generic: error=-2, size=1048576\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f970b49be20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_open: return=11\nafter metal_open: return=10\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nafter metal_open: return=12\nafter metal_open: return=13\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f970c49de20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_open: return=15\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96f4002570\nclosing fd=12, final error=0\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f970bc9ce20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_open: return=8\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f9709497e20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_open: return=17\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f96ebefee20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_open: return=19\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f9708a96e20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_open: return=21\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96e4002570\nclosing fd=17, final error=0\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f96eb4fde20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_open: return=17\nloop iteration: ps=0x564733552800, ps->page_size=4096, size=1048576\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96f0002570\nclosing fd=8, final error=0\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96f40025f0\nclosing fd=19, final error=0\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f9700002570\nclosing fd=11, final error=0\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96ec002570\nclosing fd=15, final error=0\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96d8002570\nclosing fd=17, final error=0\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96f8002570\nclosing fd=13, final error=0\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96fc002570\nclosing fd=10, final error=0\nafter metal_shmem_try_map: ps=0x564733552800, page_size=4096, size=1048576, error=0, result=0x7f96e0002570\nclosing fd=21, final error=0\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f1531ffae20\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f15327fbe20\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_shmem_open_generic: error=-2, size=1048576\nafter metal_open: return=9\nafter metal_open: return=10\nloop iteration: ps=0x56285d5324a0, ps->page_size=4096, size=1048576\nloop iteration: ps=0x56285d5324a0, ps->page_size=4096, size=1048576\nENTER metal_shmem_open: name=/foo, size=1048576, result=0x7f1532ffce20\nENTE\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_open:\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n...\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n...\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n...\n#define metal_for_each_page_size_down(ps) for((ps)=&_metal.page_sizes[_metal.num_page_sizes-1];(ps)>=&_metal.page_sizes[0];(ps)--)\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A is incorrect to claim that metal_shmem_open itself violates MISRA C:2023 Rule 17.8. In the provided metal_shmem_open implementation there is no assignment to the parameter 'size'. The assignment size = metal_align_up(size, ps->page_size); actually appears in metal_shmem_try_map (shown in the additional code).\n\nMISRA C:2023 Rule 17.8 states that a function parameter shall not be modified. Modifying a non\u2011pointer value parameter (like size) inside the function is a violation. Therefore metal_shmem_try_map does violate Rule 17.8 by assigning to its parameter 'size'. However the reported violation was attributed to metal_shmem_open, so the report as phrased is incorrect. The correct fix is to change metal_shmem_try_map to use a local variable (e.g. size_t aligned_size = metal_align_up(size, ps->page_size); and use aligned_size thereafter) rather than assigning back to the parameter.\n\nSummary: there is a Rule 17.8 violation in metal_shmem_try_map, but not in metal_shmem_open; the agent misattributed the location of the modification."
}