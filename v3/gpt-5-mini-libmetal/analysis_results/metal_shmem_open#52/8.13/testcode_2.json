{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'mem' is declared as void * but the function does not modify the pointed-to object; it could be declared const void *mem. Thus the pointer parameter is not const-qualified where possible. (Note: converting it to const void * would require an explicit cast when calling the external API munmap(void *), but the current declaration still violates MISRA C 2023 Rule 8.13.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append logs to /tmp/logs/523.txt */\nstatic void metal_shmem_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (f == NULL)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\tmetal_shmem_log(\"ENTER metal_shmem_open: name='%s' size=%zu result=%p\", name ? name : \"(null)\", size, (void *)result);\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tmetal_shmem_log(\"after metal_shmem_open_generic: error=%d result=%p\", error, (void *)result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tmetal_shmem_log(\"after metal_open: error=%d\", error);\n\tif (error < 0) {\n\t\tmetal_shmem_log(\"Failed to open shmem file :%s error=%d\", name ? name : \"(null)\", error);\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\tmetal_shmem_log(\"got fd=%d\", fd);\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tmetal_shmem_log(\"considering page size: ps=%p page_size=%zu\", (void *)ps, (size_t)ps->page_size);\n\t\tif (ps->page_size > 2 * size) {\n\t\t\tmetal_shmem_log(\"skipping page size %zu because > 2*size (%zu)\", (size_t)ps->page_size, 2 * size);\n\t\t\tcontinue;\n\t\t}\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tmetal_shmem_log(\"after metal_shmem_try_map: error=%d result=%p\", error, (void *)result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tmetal_shmem_log(\"closing fd=%d final error=%d result=%p\", fd, error, (void *)result);\n\tclose(fd);\n\treturn error;\n}\n"
}