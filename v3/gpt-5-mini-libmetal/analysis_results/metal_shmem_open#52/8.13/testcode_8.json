{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_shmem_open, the local iterator pointer is declared as 'struct metal_page_size *ps;' but throughout the loop ps is only read (ps->page_size, ps->page_shift, ps->mmap_flags) and not modified. Therefore the pointer could and should be const-qualified (e.g. 'const struct metal_page_size *ps'). Declaring it non-const violates MISRA C 2023 Rule 8.13. (To fix, make ps const and update metal_shmem_try_map to accept 'const struct metal_page_size *ps' if necessary.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <unistd.h>\n\n/* Probe helper: append logs to '/tmp/logs/523.txt'. Keep minimal and safe. */\nstatic void metal_shmem_probe_log(const char *stage, void *ps_ptr, size_t page_size,\n                                  int page_shift, unsigned int mmap_flags,\n                                  int fd, size_t size, struct metal_io_region **result, int error)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_shmem_open] stage=%s\\n\", stage);\n    fprintf(f, \"  fd=%d, size=%zu, result=%p, error=%d\\n\", fd, size, (void *)result, error);\n    if (ps_ptr) {\n        fprintf(f, \"  ps=%p, page_size=%zu, page_shift=%d, mmap_flags=0x%x\\n\",\n                ps_ptr, page_size, page_shift, mmap_flags);\n    } else {\n        fprintf(f, \"  ps=NULL\\n\");\n    }\n\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    /* Log entry and parameters. */\n    metal_shmem_probe_log(\"entry\", NULL, 0u, 0, 0u, -1, size, result, 0);\n\n    error = metal_shmem_open_generic(name, size, result);\n    /* Log after trying generic open. */\n    metal_shmem_probe_log(\"after_generic\", NULL, 0u, 0, 0u, -1, size, result, error);\n\n    if (!error)\n        return error;\n\n    error = metal_open(name, 1);\n    if (error < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        /* Log failure to open. */\n        metal_shmem_probe_log(\"open_failed\", NULL, 0u, 0, 0u, (int)error, size, result, error);\n        return error;\n    }\n    fd = error;\n\n    /* Log successful file descriptor. */\n    metal_shmem_probe_log(\"opened_fd\", NULL, 0u, 0, 0u, fd, size, result, 0);\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        /* Log the current page-size entry before any checks. */\n        metal_shmem_probe_log(\"iter_before_check\", ps, ps->page_size, ps->page_shift, ps->mmap_flags, fd, size, result, 0);\n\n        if (ps->page_size > 2 * size) {\n            /* Log that this entry was skipped due to size. */\n            metal_shmem_probe_log(\"iter_skipped_too_large\", ps, ps->page_size, ps->page_shift, ps->mmap_flags, fd, size, result, 0);\n            continue;\n        }\n\n        error = metal_shmem_try_map(ps, fd, size, result);\n\n        /* Log the result of the try_map attempt. */\n        metal_shmem_probe_log(\"after_try_map\", ps, ps->page_size, ps->page_shift, ps->mmap_flags, fd, size, result, error);\n\n        if (!error)\n            break;\n    }\n\n    /* Log before closing fd and exit. */\n    metal_shmem_probe_log(\"before_close\", NULL, 0u, 0, 0u, fd, size, result, error);\n\n    close(fd);\n    metal_shmem_probe_log(\"exit\", NULL, 0u, 0, 0u, -1, size, result, error);\n\n    return error;\n}\n"
}