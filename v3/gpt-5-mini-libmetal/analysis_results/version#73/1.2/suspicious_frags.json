{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of version:\n```c\nstatic int version(void)\n{\n\tchar ver_def[16], ver_dyn[16];\n\n\tsnprintf(ver_def, sizeof(ver_def), \"%d.%d.%d\",\n\t\t METAL_VER_MAJOR,\n\t\t METAL_VER_MINOR,\n\t\t METAL_VER_PATCH);\n\n\tsnprintf(ver_dyn, sizeof(ver_dyn), \"%d.%d.%d\",\n\t\t metal_ver_major(), metal_ver_minor(), metal_ver_patch());\n\n\treturn (strcmp(ver_def, METAL_VER) +\n\t\tstrcmp(ver_dyn, metal_ver()));\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function version:\nint metal_ver_major(void)\n{\n\treturn METAL_VER_MAJOR;\n}\n...\nint metal_ver_minor(void)\n{\n\treturn METAL_VER_MINOR;\n}\n...\nint metal_ver_patch(void)\n{\n\treturn METAL_VER_PATCH;\n}\n...\nconst char *metal_ver(void)\n{\n\treturn METAL_VER;\n}\n...\n#define METAL_VER_MAJOR 1\n...\n#define METAL_VER_MINOR 8\n...\n#define METAL_VER_PATCH 0\n...\n#define METAL_VER \"1.8.0\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no use of compiler-specific language extensions in the provided code. Specifically:\n- No GCC/Clang/Microsoft-specific keywords or tokens are present (no __attribute__, __asm__, __extension__, __builtin_*, typeof, __func__ used as extension, nor Microsoft __declspec). \n- No GNU statement-expressions ({ ... }) or nested functions are used. \n- No inline assembly, inline keyword misuse, or compiler-specific pragmas appear. \n- All identifiers and constructs are standard C: function definitions, fixed-size arrays, calls to standard library functions (snprintf, strcmp), preprocessor macros (#define) and const char * return \u2014 none are compiler extensions.\n- The ellipses (...) in the \u201eadditional code\u201d block are placeholders indicating omitted, standard definitions and not language-extension syntax.\n\nIf headers (e.g. <stdio.h>, <string.h>) were omitted in the actual translation unit, that would be a separate conformance issue (implicit function declarations in old C dialects), but it is not a compiler extension per Rule 1.2. Therefore there are no code fragments requiring investigation for use of language extensions."
}