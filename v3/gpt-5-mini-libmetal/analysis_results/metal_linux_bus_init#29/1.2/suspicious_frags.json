{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_linux_bus_init:\n#define for_each_linux_bus(lbus) for((lbus)=linux_bus;(lbus)->bus_name;(lbus)++)\n...\nstruct linux_bus {\n\tstruct metal_bus\tbus;\n\tconst char\t\t*bus_name;\n\tstruct linux_driver\tdrivers[MAX_DRIVERS];\n\tstruct sysfs_bus\t*sbus;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed the provided function and related symbols for any compiler- or language-specific extensions (e.g. GCC/Clang attributes like __attribute__, __extension__, typeof, statement expressions ({ ... }), asm, inline assembly, compiler-specific keywords, or nonstandard pragmas). None are present.\n\nDetails of why no fragments were flagged:\n- The for_each_linux_bus macro expands to a plain for-loop using pointer arithmetic and a sentinel field (for((lbus)=linux_bus;(lbus)->bus_name;(lbus)++)). Pointer increment and use of a structure field in the loop condition are standard C and not compiler extensions.\n- The ternary expression in the loop body (metal_linux_probe_bus(lbus) ? 0 : 1) uses standard conditional operator syntax.\n- Returning a negative errno constant (-ENODEV) is a conventional usage in kernel code but is a normal integer literal (macro) value; it is not a language extension.\n- The struct linux_bus declaration uses only standard C constructs (embedded structs, const char*, fixed-size array). No compiler-specific storage-class specifiers or attributes are present.\n- There are no uses of nonstandard types, builtin functions, or pragmas in the shown code.\n\nGiven the requirement to report only explicit compiler-documented language extensions, there are no code fragments in the provided snippets that meet that condition."
}