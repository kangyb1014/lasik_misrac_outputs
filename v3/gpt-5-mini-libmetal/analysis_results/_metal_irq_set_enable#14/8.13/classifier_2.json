{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of _metal_irq_set_enable:\n```c\nstatic void _metal_irq_set_enable(int irq, unsigned int state)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn;\n\t}\n\tcntr->irq_set_enable(cntr, irq, state);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ncntr->irq_set_enable(cntr, irq, state);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation can be determined from the fragment alone. In typical usage irq_set_enable will modify controller state (enable/disable), so cntr must be a pointer to a non-const struct and Rule 8.13 is not violated. A concrete violation would occur if irq_set_enable does not modify the controller (or the function takes a const pointer) \u2014 in that case cntr (and the stored function pointer type) should be const-qualified, e.g. void (*irq_set_enable)(const struct metal_irq_controller *, int, unsigned int); otherwise the non-const pointer would violate Rule 8.13."
}