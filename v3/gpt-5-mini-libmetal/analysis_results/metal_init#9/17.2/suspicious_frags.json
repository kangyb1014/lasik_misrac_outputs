{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_init:\n```c\nint metal_init(const struct metal_init_params *params)\n{\n\tint error = 0;\n\n\tif (_metal.common.ref_count++ != 0)\n\t\treturn 0;\n\n\tmemset(&_metal, 0, sizeof(_metal));\n\n\t_metal.common.log_handler   = params->log_handler;\n\t_metal.common.log_level     = params->log_level;\n\n\tmetal_list_init(&_metal.common.bus_list);\n\tmetal_list_init(&_metal.common.generic_shmem_list);\n\tmetal_list_init(&_metal.common.generic_device_list);\n\n\terror = metal_sys_init(params);\n\tif (error)\n\t\treturn error;\n\n\t++_metal.common.ref_count;\n\treturn error;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_init:\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n...\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n...\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n...\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "fclose(urandom);",
    "valid += metal_linux_probe_bus(lbus) ? 0 : 1;",
    "srand(seed);",
    "metal_list_init(&_metal.common.bus_list);",
    "metal_linux_irq_init();",
    "_metal.page_shift = metal_log2(sizes[0]);",
    "metal_add_page_size(hugetlbfs_find_path_for_size(sizes[i]),",
    "memset(&irqs, 0, sizeof(irqs));",
    "error = metal_sys_init(params);",
    "metal_log(METAL_LOG_ERROR,",
    "metal_linux_irq_handling, NULL);",
    "metal_unused(params);",
    "result = metal_linux_bus_init();",
    "metal_mutex_init(&irq_lock);",
    "_metal.pagemap_fd = result;",
    "if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {",
    "ret = metal_irq_register_controller(&linux_irq_cntr);",
    "metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");",
    "metal_list_init(&_metal.common.generic_shmem_list);",
    "tmp_path = getenv(\"TMPDIR\");",
    "urandom = fopen(\"/dev/urandom\", \"r\");",
    "sizes[0] = getpagesize();",
    "ret = pthread_create(&irq_pthread, NULL,",
    "metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\", strerror(errno));",
    "for_each_linux_bus(lbus)",
    "result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);",
    "metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);",
    "metal_list_init(&_metal.common.generic_device_list);",
    "qsort(_metal.page_sizes, _metal.num_page_sizes,",
    "sizes[0] = gethugepagesize();",
    "metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");",
    "count = gethugepagesizes(sizes, max_sizes);",
    "irq_notify_fd = eventfd(0, EFD_CLOEXEC);",
    "result = metal_init_page_sizes();",
    "metal_add_page_size(hugetlbfs_find_path(),"
  ],
  "explanation": "I included calls between the module's init functions and other module functions that could form indirect call cycles (metal_init -> metal_sys_init -> metal_init_page_sizes / metal_linux_bus_init / metal_linux_irq_init, and the calls those functions make). These fragments should be investigated for possible indirect recursion. Fragments I did not list are simple assignments, structure field initializations, increments (e.g. ref_count updates), or standard library calls that do not call back into the module (e.g. strerror, standard arithmetic, sizeof, preprocessor directives). I also omitted trivial control-flow tokens and comments. Standard library functions such as getenv, fopen, fread, fclose, open, getpagesize, gethugepagesize, gethugepagesizes, qsort, eventfd, pthread_create themselves are unlikely to call back into the module's functions, so they are lower risk for creating indirect recursion; where a project function may wrap or call a callback that could re-enter initialization (for example metal_log, metal_add_page_size, metal_irq_register_controller, metal_linux_probe_bus, metal_linux_irq_handling, hugetlbfs_* helpers, metal_pagesize_compare), I included their call sites above for inspection."
}