{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_irq_ack:\n```c\nstatic void metal_uio_dev_irq_ack(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t int irq)\n{\n\t(void)lbus;\n\t(void)irq;\n\tint irq_info = 1;\n\tunsigned int val;\n\tint ret;\n\n\tret = read(ldev->fd, (void *)&val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s, read uio irq fd %d failed: %d.\\n\",\n\t\t\t\t\t\t__func__, ldev->fd, ret);\n\t\treturn;\n\t}\n\tret = write(ldev->fd, &irq_info, sizeof(irq_info));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s, write uio irq fd %d failed: %d.\\n\",\n\t\t\t\t\t\t__func__, ldev->fd, errno);\n\t}\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_uio_dev_irq_ack:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_log(METAL_LOG_ERROR, \"%s, write uio irq fd %d failed: %d.\\n\",\t\t\t\t\t__func__, ldev->fd, errno);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment expands the macro metal_log into a call through the function pointer _metal.common.log_handler. There is no evidence that this handler calls metal_uio_dev_irq_ack (or the macro in a way that causes the handler to be invoked again), so the function does not call itself directly or indirectly. (A violating scenario would be if _metal.common.log_handler were set to a function that, directly or indirectly, calls metal_uio_dev_irq_ack or invokes metal_log again leading back to the same handler \u2014 that would create indirect recursion.)"
}