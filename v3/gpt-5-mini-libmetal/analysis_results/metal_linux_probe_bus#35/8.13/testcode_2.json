{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer ldrv is declared as 'struct linux_driver *ldrv' but is only used to iterate drivers and passed to metal_linux_probe_driver (no modification to the pointed-to object occurs in this function). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (e.g. 'const struct linux_driver *ldrv'). If metal_linux_probe_driver and the for_each_linux_driver macro do not require modifying the driver objects (i.e. their prototypes accept pointers-to-const or do not modify the pointee), then the current declaration violates Rule 8.13. Verify the callee signatures; if they accept/require non-const, then const cannot be applied.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_bus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_bus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_bus code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Simple logging helper that appends diagnostic messages to /tmp/logs/353.txt.\n * Designed to be low-impact: it does not change program logic, only records\n * control flow and state for post-mortem inspection.\n */\nstatic void __attribute__((unused)) log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n    struct linux_driver *ldrv;\n    int ret, error = -ENODEV;\n\n    /* Log entry and incoming state */\n    log_probe(\"ENTER: metal_linux_probe_bus: lbus=%p\\n\", (void *)lbus);\n\n    lbus->sbus = sysfs_open_bus(lbus->bus_name);\n    log_probe(\"sysfs_open_bus called: lbus=%p, bus_name=%p, sbus=%p\\n\",\n              (void *)lbus, (void *)lbus->bus_name, (void *)lbus->sbus);\n    if (!lbus->sbus) {\n        log_probe(\"sysfs_open_bus failed: returning -ENODEV\\n\");\n        return -ENODEV;\n    }\n\n    for_each_linux_driver(lbus, ldrv) {\n        log_probe(\"for_each_linux_driver: iterating ldrv=%p\\n\", (void *)ldrv);\n\n        ret = metal_linux_probe_driver(lbus, ldrv);\n        log_probe(\"metal_linux_probe_driver returned %d for ldrv=%p\\n\",\n                  ret, (void *)ldrv);\n\n        /* Clear the error if any driver is available */\n        if (!ret) {\n            log_probe(\"Probe success for ldrv=%p; clearing error (was %d)\\n\",\n                      (void *)ldrv, error);\n            error = ret;\n        }\n    }\n\n    if (error) {\n        log_probe(\"No driver probed successfully: error=%d; closing bus %p\\n\",\n                  error, (void *)&lbus->bus);\n        metal_linux_bus_close(&lbus->bus);\n        log_probe(\"metal_linux_bus_close called for bus %p, returning %d\\n\",\n                  (void *)&lbus->bus, error);\n        return error;\n    }\n\n    log_probe(\"At least one driver probed successfully; registering bus %p\\n\",\n              (void *)lbus);\n    error = metal_linux_register_bus(lbus);\n    if (error) {\n        log_probe(\"metal_linux_register_bus failed for lbus=%p: error=%d; closing bus\\n\",\n                  (void *)lbus, error);\n        metal_linux_bus_close(&lbus->bus);\n    } else {\n        log_probe(\"metal_linux_register_bus succeeded for lbus=%p\\n\", (void *)lbus);\n    }\n\n    log_probe(\"EXIT: metal_linux_probe_bus: lbus=%p returning %d\\n\",\n              (void *)lbus, error);\n\n    return error;\n}\n"
}