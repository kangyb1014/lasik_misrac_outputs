{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator variable ldrv is declared as a non-const pointer (struct linux_driver *ldrv) and is used only to reference driver data in the loop. If the loop and called functions (e.g. metal_linux_probe_driver) do not modify the pointed-to driver object, then the pointer should be const-qualified. In that case the code violates MISRA C 2023 Rule 8.13. Fix: declare the iterator as const struct linux_driver *ldrv (and update the for_each_linux_driver macro and any callee prototypes to accept a const pointer).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_bus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_bus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_bus code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Minimal mock types to make this testable/compilable. */\nstruct bus_type { int dummy; };\nstruct linux_bus {\n    void *sbus;\n    const char *bus_name;\n    struct bus_type bus;\n};\nstruct linux_driver {\n    int id; /* for logging/demo */\n};\n\n/* Prototypes of functions used by metal_linux_probe_bus. In the real\n * environment these are provided elsewhere. Here we provide simple\n * stubs so the test code is compilable and produces logs. */\nvoid *sysfs_open_bus(const char *name);\nint metal_linux_probe_driver(struct linux_bus *lbus, struct linux_driver *ldrv);\nvoid metal_linux_bus_close(struct bus_type *bus);\nint metal_linux_register_bus(struct linux_bus *lbus);\n\n/* Simple logging helper that appends formatted messages to /tmp/logs/353.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* A tiny driver list to simulate iteration. */\nstatic struct linux_driver __drivers[] = { { .id = 1 }, { .id = 2 } };\n\nstatic struct linux_driver *linux_driver_first(struct linux_bus *lbus)\n{\n    (void)lbus;\n    return &__drivers[0];\n}\n\nstatic struct linux_driver *linux_driver_next(struct linux_bus *lbus, struct linux_driver *cur)\n{\n    (void)lbus;\n    if (cur == &__drivers[0])\n        return &__drivers[1];\n    return NULL;\n}\n\n/* Stub implementations that also log activity so the test reproduces\n * the control flow and state relevant to the reported violation. */\nvoid *sysfs_open_bus(const char *name)\n{\n    probe_log(\"sysfs_open_bus called with name=%s\", name ? name : \"(null)\");\n    /* Return a non-NULL pointer to simulate a successful open */\n    return (void *)0x1;\n}\n\nint metal_linux_probe_driver(struct linux_bus *lbus, struct linux_driver *ldrv)\n{\n    (void)lbus;\n    probe_log(\"metal_linux_probe_driver called with ldrv=%p id=%d\", (void *)ldrv, ldrv ? ldrv->id : -1);\n    /* Simulate that the first driver fails and the second succeeds. */\n    if (ldrv && ldrv->id == 1)\n        return -ENODEV;\n    return 0;\n}\n\nvoid metal_linux_bus_close(struct bus_type *bus)\n{\n    probe_log(\"metal_linux_bus_close called with bus=%p\", (void *)bus);\n    (void)bus;\n}\n\nint metal_linux_register_bus(struct linux_bus *lbus)\n{\n    probe_log(\"metal_linux_register_bus called with lbus=%p\", (void *)lbus);\n    (void)lbus;\n    /* Simulate success */\n    return 0;\n}\n\n/* Modified metal_linux_probe_bus with logging to capture control flow and\n * the state of the iterator pointer 'ldrv' (non-const) during iteration. */\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n    struct linux_driver *ldrv;\n    int ret, error = -ENODEV;\n\n    probe_log(\"metal_linux_probe_bus entry: lbus=%p bus_name=%s\", (void *)lbus, lbus ? lbus->bus_name : \"(null)\");\n\n    lbus->sbus = sysfs_open_bus(lbus->bus_name);\n    probe_log(\"sysfs_open_bus returned sbus=%p\", lbus->sbus);\n    if (!lbus->sbus) {\n        probe_log(\"sysfs_open_bus failed, returning -ENODEV\");\n        return -ENODEV;\n    }\n\n    /* Replace the for_each_linux_driver macro with explicit iteration functions\n     * so this test file remains self-contained and compilable without macros. */\n    for (ldrv = linux_driver_first(lbus); ldrv != NULL; ldrv = linux_driver_next(lbus, ldrv)) {\n        probe_log(\"loop iteration: ldrv=%p id=%d\", (void *)ldrv, ldrv->id);\n\n        ret = metal_linux_probe_driver(lbus, ldrv);\n        probe_log(\"metal_linux_probe_driver returned ret=%d for ldrv=%p\", ret, (void *)ldrv);\n\n        /* Clear the error if any driver is available */\n        if (!ret) {\n            probe_log(\"driver probe succeeded, clearing error (was %d)\", error);\n            error = ret;\n        } else {\n            probe_log(\"driver probe failed with ret=%d, keeping error=%d\", ret, error);\n        }\n    }\n\n    if (error) {\n        probe_log(\"no driver succeeded, error=%d; closing bus\", error);\n        metal_linux_bus_close(&lbus->bus);\n        probe_log(\"returning error=%d\", error);\n        return error;\n    }\n\n    probe_log(\"at least one driver succeeded, proceeding to register bus\");\n    error = metal_linux_register_bus(lbus);\n    probe_log(\"metal_linux_register_bus returned %d\", error);\n    if (error) {\n        probe_log(\"register failed, closing bus\");\n        metal_linux_bus_close(&lbus->bus);\n    }\n\n    probe_log(\"metal_linux_probe_bus exit: returning %d\", error);\n    return error;\n}\n"
}