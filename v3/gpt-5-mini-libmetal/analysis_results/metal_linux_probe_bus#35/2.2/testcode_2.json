{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_unused(params); is dead code. metal_unused is typically a no-op used to suppress 'unused parameter' warnings (e.g. expands to ((void)(params)) or an empty statement). It is executed but has no effect on program behaviour; removing it does not change observable behaviour of metal_sys_init. Therefore this operation meets the definition of dead code in MISRA C 2023 Rule 2.2 and violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_bus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/352.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_bus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_bus code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\nstatic void metal_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/352.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    char ts[32] = { '\\0' };\n    if (t != (time_t)-1) {\n        struct tm tm;\n        if (localtime_r(&t, &tm) != NULL) {\n            if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm) == 0) {\n                ts[0] = '\\0';\n            }\n        }\n    }\n\n    fprintf(f, \"[%s pid=%d] \", ts[0] ? ts : \"(no-time)\", (int)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n    struct linux_driver *ldrv;\n    int ret, error = -ENODEV;\n\n    /* Probe log: entry and bus name */\n    metal_log_probe(\"enter: metal_linux_probe_bus lbus=%p bus_name=%s\",\n                    (void *)lbus, (lbus && lbus->bus_name) ? lbus->bus_name : \"(null)\");\n\n    lbus->sbus = sysfs_open_bus(lbus->bus_name);\n    if (!lbus->sbus) {\n        metal_log_probe(\"sysfs_open_bus failed for bus_name=%s, sbus=NULL\",\n                        (lbus && lbus->bus_name) ? lbus->bus_name : \"(null)\");\n        return -ENODEV;\n    }\n\n    metal_log_probe(\"sysfs_open_bus succeeded, sbus=%p\", (void *)lbus->sbus);\n\n    for_each_linux_driver(lbus, ldrv) {\n        metal_log_probe(\"for_each_linux_driver: ldrv=%p\", (void *)ldrv);\n\n        ret = metal_linux_probe_driver(lbus, ldrv);\n        metal_log_probe(\"metal_linux_probe_driver returned %d for ldrv=%p\", ret, (void *)ldrv);\n\n        /* Clear the error if any driver is available */\n        if (!ret) {\n            error = ret;\n            metal_log_probe(\"cleared error after successful probe, error=%d\", error);\n        }\n    }\n\n    if (error) {\n        metal_log_probe(\"no driver probed successfully, error=%d; closing bus\", error);\n        metal_linux_bus_close(&lbus->bus);\n        return error;\n    }\n\n    metal_log_probe(\"attempting to register bus: lbus=%p\", (void *)lbus);\n    error = metal_linux_register_bus(lbus);\n    metal_log_probe(\"metal_linux_register_bus returned %d\", error);\n    if (error) {\n        metal_log_probe(\"register failed with %d; closing bus\", error);\n        metal_linux_bus_close(&lbus->bus);\n    }\n\n    metal_log_probe(\"exit: metal_linux_probe_bus returning %d\", error);\n    return error;\n}\n"
}