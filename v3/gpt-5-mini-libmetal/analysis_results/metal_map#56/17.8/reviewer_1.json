{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement \"flags = MAP_PRIVATE | MAP_ANONYMOUS;\" assigns to the function parameter 'flags', modifying a parameter inside the function. This violates MISRA C 2023 Rule 17.8 (a function parameter shall not be modified).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER metal_map: fd=6, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc19cd32d58\nAfter flags |= MAP_SHARED: flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nENTER metal_map: fd=8, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc19d533d58\nMapping memory: fd=6, offset=0, size=1048576, prot=0x3, flags=0x1\nENTER metal_map: fd=11, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc19dd34d58\nAfter flags |= MAP_SHARED: flags=0x1\nmmap succeeded: result=0x7fc19c433000\nAfter flags |= MAP_SHARED: flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nEXIT metal_map: returning 0\nBranch: fd >= 0 and expand requested. reqsize=1048576\nENTER metal_map: fd=9, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc19e535d58\nMapping memory: fd=8, offset=0, size=1048576, prot=0x3, flags=0x1\nMapping memory: fd=11, offset=0, size=1048576, prot=0x3, flags=0x1\nAfter flags |= MAP_SHARED: flags=0x1\nENTER metal_map: fd=12, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc19f537d58\nBranch: fd >= 0 and expand requested. reqsize=1048576\nAfter flags |= MAP_SHARED: flags=0x1\nMapping memory: fd=9, offset=0, size=1048576, prot=0x3, flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nMapping memory: fd=12, offset=0, size=1048576, prot=0x3, flags=0x1\nENTER metal_map: fd=13, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc19ed36d58\nmmap succeeded: result=0x7fc19c333000\nAfter flags |= MAP_SHARED: flags=0x1\nEXIT metal_map: returning 0\nBranch: fd >= 0 and expand requested. reqsize=1048576\nmmap succeeded: result=0x7fc19c233000\nMapping memory: fd=13, offset=0, size=1048576, prot=0x3, flags=0x1\nEXIT metal_map: returning 0\nmmap succeeded: result=0x7fc19c133000\nEXIT metal_map: returning 0\nmmap succeeded: result=0x7fc19c033000\nEXIT metal_map: returning 0\nmmap succeeded: result=0x7fc19c233000\nEXIT metal_map: returning 0\nENTER metal_map: fd=10, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc18fffed58\nAfter flags |= MAP_SHARED: flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nMapping memory: fd=10, offset=0, size=1048576, prot=0x3, flags=0x1\nENTER metal_map: fd=7, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc18f7fdd58\nAfter flags |= MAP_SHARED: flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nMapping memory: fd=7, offset=0, size=1048576, prot=0x3, flags=0x1\nmmap succeeded: result=0x7fc19c433000\nmmap succeeded: result=0x7fc19c033000\nEXIT metal_map: returning 0\nEXIT metal_map: returning 0\nENTER metal_map: fd=6, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc18effcd58\nAfter flags |= MAP_SHARED: flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nMapping memory: fd=6, offset=0, size=1048576, prot=0x3, flags=0x1\nmmap succeeded: result=0x7fc19c433000\nEXIT metal_map: returning 0\nENTER metal_map: fd=6, offset=0, size=1048576, expand=1, flags=0x0, result=0x7fc18e7fbd58\nAfter flags |= MAP_SHARED: flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nMapping memory: fd=6, offset=0, size=1048576, prot=0x3, flags=0x1\nmmap succeeded: result=0x7fc19c433000\nEXIT metal_map: returning 0\nENTER metal_map: fd=7, offset=0, size=1048576, expand=1, flags=0x0, result=0x7f6bb67fbd58\nENTER metal_map: fd=6, offset=0, size=1048576, expand=1, flags=0x0, result=0x7f6bb5ffad58\nAfter flags |= MAP_SHARED: flags=0x1\nENTER metal_map: fd=8, offset=0, size=1048576, expand=1, flags=0x0, result=0x7f6bb6ffcd58\nBranch: fd >= 0 and expand requested. reqsize=1048576\nAfter flags |= MAP_SHARED: flags=0x1\nENTER metal_map: fd=11, offset=0, size=1048576, expand=1, flags=0x0, result=0x7f6bb77fdd58\nAfter flags |= MAP_SHARED: flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nMapping memory: fd=7, offset=0, size=1048576, prot=0x3, flags=0x1\nAfter flags |= MAP_SHARED: flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nMapping memory: fd=6, offset=0, size=1048576, prot=0x3, flags=0x1\nBranch: fd >= 0 and expand requested. reqsize=1048576\nmmap succeeded: result=0x7f6bbc61e000\nMapping memory: fd=8, offset=0, size=1048576, prot=0x3, flags=0\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In metal_map the parameter flags (int flags) is modified: \"flags |= MAP_SHARED;\" and \"flags = MAP_PRIVATE | MAP_ANONYMOUS;\" reassign and update the parameter variable itself, which violates the rule. The intent-preserving fix is to copy the parameter into a local variable (e.g. int local_flags = flags;) and modify/use local_flags instead."
}