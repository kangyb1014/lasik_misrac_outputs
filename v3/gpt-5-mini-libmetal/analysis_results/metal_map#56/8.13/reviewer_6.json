{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'virt' is only used to compute addresses and to call metal_virt2phys(virt + offset, ...); it is never used to modify the memory it points to. Therefore it could be declared as 'const uint8_t *virt' to indicate read-only access. As written ('uint8_t *virt;') it lacks the const qualification and thus violates MISRA C 2023 Rule 8.13. (Note: if metal_virt2phys or other called APIs require a non-const pointer, those APIs should be updated to accept a pointer-to-const if they do not modify the memory.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter metal_map: fd=6, offset=0, size=1048576, expand=1, flags=0\nenter metal_map: fd=7, offset=0, size=1048576, expand=1, flags=0\nenter metal_map: fd=9, offset=0, size=1048576, expand=1, flags=0\nbranch: expand requested. reqsize=1048576\nenter metal_map: fd=11, offset=0, size=1048576, expand=1, flags=0\nbranch: expand requested. reqsize=1048576\nenter metal_map: fd=14, offset=0, size=1048576, expand=1, flags=0\nenter metal_map: fd=16, offset=0, size=1048576, expand=1, flags=0\nenter metal_map: fd=15, offset=0, size=1048576, expand=1, flags=0\nenter metal_map: fd=20, offset=0, size=1048576, expand=1, flags=0\nenter metal_map: fd=21, offset=0, size=1048576, expand=1, flags=0\nenter metal_map: fd=23, offset=0, size=1048576, expand=1, flags=0\nbranch: expand requested. reqsize=1048576\nflock(LOCK_EX) result: error=0, errno=0\nbranch: expand requested. reqsize=1048576\nbranch: expand requested. reqsize=1048576\nbranch: expand requested. reqsize=1048576\nbranch: expand requested. reqsize=1048576\nbranch: expand requested. reqsize=1048576\nbranch: expand requested. reqsize=1048576\nbranch: expand requested. reqsize=1048576\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nflock(LOCK_EX) result: error=0, errno=0\nmmap succeeded: mem=0x7fb59852b000, fd=6, size=1048576, offset=0\nfstat result: error=0, st_size=1048576\nexit metal_map: returning 0, result=0x7fb59852b000\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nflock(LOCK_EX) result: error=0, errno=0\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nflock(LOCK_EX) result: error=0, errno=0\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nflock(LOCK_EX) result: error=0, errno=0\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nflock(LOCK_EX) result: error=0, errno=0\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nflock(LOCK_EX) result: error=0, errno=0\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nflock(LOCK_EX) result: error=0, errno=0\nmmap succeeded: mem=0x7fb59842b000, fd=16, size=1048576, offset=0\nfstat result: error=0, st_size=1048576\nexit metal_map: returning 0, result=0x7fb59842b000\nmmap succeeded: mem=0x7fb59822b000, fd=9, size=1048576, offset=0\nmmap succeeded: mem=0x7fb59832b000, fd=7, size=1048576, offset=0\nftruncate (if needed) result: error=0\nmmap succeeded: mem=0x7fb59812b000, fd=11, size=1048576, offset=0\nexit metal_map: returning 0, result=0x7fb59822b000\nexit metal_map: returning 0, result=0x7fb59832b000\nunlock after expand: error=0\nexit metal_map: returning 0, result=0x7fb59812b000\nflock(LOCK_EX) result: error=0, errno=0\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nflock(LOCK_EX) result: error=0, errno=0\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nunlock after expand: error=0\nmmap succeeded: mem=0x7fb59802b000, fd=21, size=1048576, offset=0\nmmap succeeded: mem=0x7fb581efc000, fd=23, size=1048576, offset=0\nexit metal_map: returning 0, result=0x7fb59802b000\nexit metal_map: returning 0, result=0x7fb581efc000\nmmap succeeded: mem=0x7fb581dfc000, fd=14, size=1048576, offset=0\nexit metal_map: returning 0, result=0x7fb581dfc000\nmmap succeeded: mem=0x7fb581cfc000, fd=15, size=1048576, offset=0\nexit metal_map: returning 0, result=0x7fb581cfc000\nmmap succeeded: mem=0x7fb581bfc000, fd=20, size=1048576, offset=0\nexit metal_map: returning 0, result=0x7fb581bfc000\nenter metal_map: fd=6, offset=0, size=1048576, expand=1, flags=0\nbranch: expand requested. reqsize=1048576\nflock(LOCK_EX) result: error=0, errno=0\nenter metal_map: fd=7, offset=0, size=1048576, expand=1, flags=0\nfstat result: error=0, st_size=1048576\nftruncate (if needed) result: error=0\nbranch: expand requested. reqsize=1048576\nenter metal_map: fd=10, offset=0, size=1048576, expand=1, fla\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_map:\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n...\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n...\nint metal_unmap(void *mem, size_t size)\n{\n\treturn munmap(mem, size) < 0 ? -errno : 0;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The underlying point is correct, but the report mislabels the function. The non-const pointer in question is the local 'virt' in metal_shmem_try_map (shown in the additional code), not inside metal_map. In metal_shmem_try_map 'virt' is only used for address computation and to call metal_virt2phys(virt + offset, ...); the code does not write through 'virt'. Per MISRA C 2023 Rule 8.13, such a pointer should be declared to point to a const-qualified type where possible (e.g. const uint8_t *virt) so that the intent (read-only access) is expressed and accidental modification is prevented.\n\nIf metal_virt2phys (or any other called API) currently requires a non-const pointer, the correct remedy under MISRA is to change those APIs to accept a pointer-to-const (const void * or const uint8_t *) if they do not modify the memory. Casting away const to match an existing non-const parameter would be discouraged because it defeats the safety purpose of the rule. Note also that assigning void *mem to a const uint8_t *virt is allowed; the problematic conversion would be passing a const pointer to a parameter declared as non-const, which is why the API should be updated instead of inserting casts.\n\nSo the substance of agent A\u2019s claim is right (there is a Rule 8.13 issue in the shown codebase), but the function named in the report (metal_map) is incorrect \u2014 the real location is metal_shmem_try_map (the 'virt' variable)."
}