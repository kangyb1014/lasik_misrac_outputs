{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'instance' is declared as 'char *instance' but is only used for read-only access (passed to snprintf as \"%s\" and iterated by dlist_for_each_data). It is never used to modify the pointed-to characters, so per MISRA C 2023 Rule 8.13 it should be declared as 'const char *instance'. Thus the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/file.h>\n#include <string.h>\n#include <time.h>\n\n/*\n * metal_map: map a file into memory. Logging probes have been added to\n * record control-flow and key state to /tmp/logs/563.txt for debugging.\n * The original logic and return behaviour is preserved. Logging saves\n * and restores errno so behaviour is unchanged by the probes.\n */\nstatic void metal_map_log(const char *fmt, ...)\n{\n    const char *log_path = \"/tmp/logs/563.txt\";\n    int saved_errno = errno;\n    FILE *f = fopen(log_path, \"a\");\n    if (f != NULL) {\n        va_list ap;\n        va_start(ap, fmt);\n        /* prepend a timestamp for easier traceability */\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL) {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0) {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        va_end(ap);\n        fclose(f);\n    }\n    errno = saved_errno;\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    metal_map_log(\"enter metal_map: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x\",\n                  fd, (long long)offset, size, expand, flags);\n\n    flags |= MAP_SHARED;\n    metal_map_log(\"flags after MAP_SHARED applied: 0x%x\", flags);\n\n    if (fd < 0) {\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        metal_map_log(\"fd < 0 branch taken: fd set to -1, flags=0x%x\", flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        metal_map_log(\"expand branch: reqsize=%lld\", (long long)reqsize);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        metal_map_log(\"flock(LOCK_EX) returned: error=%d, errno=%d\", error, errno);\n        if (!error)\n            error = fstat(fd, &stat);\n        if (!error)\n            metal_map_log(\"fstat succeeded: st_size=%lld\", (long long)stat.st_size);\n        if (!error && stat.st_size < reqsize) {\n            metal_map_log(\"ftruncate needed: current=%lld < reqsize=%lld\",\n                          (long long)stat.st_size, (long long)reqsize);\n            error = ftruncate(fd, reqsize);\n            metal_map_log(\"ftruncate returned: error=%d, errno=%d\", error, errno);\n        }\n        if (!error)\n            flock(fd, LOCK_UN);\n        metal_map_log(\"expand branch end: error=%d\", error);\n        if (error)\n            return -errno;\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        metal_map_log(\"mmap failed: size=%zu, prot=0x%x, flags=0x%x, fd=%d, offset=%lld, errno=%d\",\n                      size, prot, flags, fd, (long long)offset, errno);\n        return -errno;\n    }\n    metal_map_log(\"mmap succeeded: mem=%p, size=%zu, prot=0x%x, flags=0x%x, fd=%d, offset=%lld\",\n                  mem, size, prot, flags, fd, (long long)offset);\n\n    *result = mem;\n    metal_map_log(\"exit metal_map: returning success, result=%p\", mem);\n    return 0;\n}\n"
}