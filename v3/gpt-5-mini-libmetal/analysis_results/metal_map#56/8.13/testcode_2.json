{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iteration variable 'instance' is declared as 'char *instance' and used in dlist_for_each_data(dlist, instance, char). The elements returned from the dlist appear to be read-only strings (sysfs instance names) and are only read (e.g. passed to snprintf). Per MISRA C 2023 Rule 8.13, such pointers should be const-qualified when possible. Here the pointer is non-const and should be 'const char *instance' (and the macro invoked with 'const char' if the macro supports it), so this is a Rule 8.13 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/file.h>\n#include <string.h>\n#include <stdlib.h>\n\n/*\n * Probe / logging helpers. These preserve program logic and only append\n * diagnostic information to /tmp/logs/563.txt. They are implemented as\n * ordinary static functions (no macros, no main) so they can be linked\n * into existing code for reproduction and evidence gathering.\n */\nstatic void log_append(const char *msg)\n{\n    FILE *f;\n    /* ensure directory exists (best-effort) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n    f = fopen(\"/tmp/logs/563.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging fails, do not interfere with program logic. */\n        return;\n    }\n    (void)fputs(msg, f);\n    (void)fclose(f);\n}\n\nstatic void log_vprintf(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    log_append(buf);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry and initial state */\n    log_vprintf(\"metal_map ENTRY: fd=%d, offset=%lld, size=%llu, expand=%d, flags=0x%x, result=%p\\n\",\n                fd, (long long)offset, (unsigned long long)size, expand, flags, (void *)result);\n\n    flags |= MAP_SHARED;\n    log_vprintf(\"After forcing MAP_SHARED: flags=0x%x\\n\", flags);\n\n    if (fd < 0) {\n        log_vprintf(\"Branch: fd < 0 (anonymous mapping). Original fd=%d\\n\", fd);\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        log_vprintf(\"Set fd=%d, flags=0x%x\\n\", fd, flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat statbuf;\n\n        log_vprintf(\"Branch: expand requested. reqsize=%lld\\n\", (long long)reqsize);\n\n        /* Preserve original logic: record flock/fstat/ftruncate sequence and outcomes. */\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        log_vprintf(\"flock LOCK_EX returned %d, mapped error=%d, errno=%d\\n\", (int)(error ? -error : 0), error, errno);\n        if (!error)\n            error = fstat(fd, &statbuf);\n        log_vprintf(\"fstat returned %d; st_size=%lld\\n\", error, (long long)statbuf.st_size);\n        if (!error && statbuf.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        log_vprintf(\"After possible ftruncate, error=%d, errno=%d\\n\", error, errno);\n        if (!error)\n            (void)flock(fd, LOCK_UN);\n        log_vprintf(\"flock LOCK_UN attempted\\n\");\n        if (error)\n            return -errno;\n    }\n\n    log_vprintf(\"Attempting mmap: addr=NULL, size=%llu, prot=0x%x, flags=0x%x, fd=%d, offset=%lld\\n\",\n                (unsigned long long)size, prot, flags, fd, (long long)offset);\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        log_vprintf(\"mmap FAILED: errno=%d\\n\", errno);\n        return -errno;\n    }\n    log_vprintf(\"mmap succeeded: mem=%p\\n\", mem);\n\n    *result = mem;\n    log_vprintf(\"Assigned *result=%p, returning 0\\n\", mem);\n    return 0;\n}\n"
}