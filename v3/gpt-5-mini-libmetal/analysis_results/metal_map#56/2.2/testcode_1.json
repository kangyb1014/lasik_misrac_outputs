{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment fd = -1 inside the fd < 0 branch is dead code: immediately afterwards flags is set to MAP_PRIVATE | MAP_ANONYMOUS, and mmap ignores the fd argument when MAP_ANONYMOUS is used. Removing the fd = -1 assignment would not change program behaviour, so this operation constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/562.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/file.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/562.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry state */\n    log_probe(\"metal_map entry: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x\",\n              fd, (long long)offset, size, expand, flags);\n\n    flags |= MAP_SHARED;\n    log_probe(\"after flags |= MAP_SHARED: flags=0x%x\", flags);\n\n    if (fd < 0) {\n        log_probe(\"branch: fd < 0 (fd=%d)\", fd);\n        log_probe(\"fd before assign: %d\", fd);\n        fd = -1;\n        log_probe(\"fd after assign: %d\", fd);\n        log_probe(\"flags before anonymous set: 0x%x\", flags);\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        log_probe(\"flags after anonymous set: 0x%x\", flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        log_probe(\"branch: expand path (fd=%d), reqsize=%lld\", fd, (long long)reqsize);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        log_probe(\"after flock(LOCK_EX): error=%d, errno=%d\", error, errno);\n        if (!error)\n            error = fstat(fd, &stat);\n        log_probe(\"after fstat: error=%d, st_size=%lld\", error, (long long)stat.st_size);\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        log_probe(\"after potential ftruncate: error=%d\", error);\n        if (!error)\n            flock(fd, LOCK_UN);\n        log_probe(\"after flock(LOCK_UN)\");\n        if (error)\n        {\n            log_probe(\"expand error path: returning with -errno (errno=%d)\", errno);\n            return -errno;\n        }\n    }\n\n    log_probe(\"before mmap: fd=%d, offset=%lld, size=%zu, prot=0x%x, flags=0x%x\",\n              fd, (long long)offset, size, prot, flags);\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        log_probe(\"mmap failed: errno=%d\", errno);\n        return -errno;\n    }\n    *result = mem;\n    log_probe(\"mmap succeeded: result=%p\", mem);\n    return 0;\n}\n"
}