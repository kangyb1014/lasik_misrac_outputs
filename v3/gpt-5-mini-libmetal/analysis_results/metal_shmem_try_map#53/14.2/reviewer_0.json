{
  "user_message": "An agent A claimed that the following metal_shmem_try_map code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_try_map.\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for-loop initialization contains two side-effects: \"virt = mem, page = 0\". Rule 14.2 clause 1 requires the first clause to be empty or an expression that sets or defines/initializes the loop counter only. Initializing a non-loop object (virt) in the first clause violates this requirement. (Clauses 2\u20134 are satisfied: the condition uses the loop counter only and has no persistent side effects, the iteration expression only increments the loop counter, and the loop counter is not modified in the body.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_shmem_try_map: enter fd=9 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: enter fd=6 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: enter fd=7 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: enter fd=8 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: metal_map succeeded mem=0x7f3418f8e000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: enter fd=14 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: metal_map succeeded mem=0x7f3418e8e000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: metal_map succeeded mem=0x7f3418d8e000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: enter fd=10 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: enter fd=18 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: enter fd=20 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: enter fd=22 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: enter fd=24 requested_size=1048576 aligned_size=1048576 page_size=4096 pages=256\nmetal_shmem_try_map: mlock succeeded mem=0x7f3418f8e000 size=1048576\nmetal_shmem_try_map: metal_map succeeded mem=0x7f341848d000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: mlock succeeded mem=0x7f3418e8e000 size=1048576\nmetal_shmem_try_map: mlock succeeded mem=0x7f3418d8e000 size=1048576\nmetal_shmem_try_map: metal_map succeeded mem=0x7f341838d000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: prepared phys=0x7f3410000d50 io=0x7f3410001560 phys_size=2048\nmetal_shmem_try_map: metal_map succeeded mem=0x7f341828d000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: pagemap fd=4 present, entering for-loop to populate phys entries\nmetal_shmem_try_map: loop iteration start: page=0 virt=0x7f3418d8e000 offset=0 (addr=0x7f3418d8e000)\nmetal_shmem_try_map: mlock succeeded mem=0x7f341838d000 size=1048576\nmetal_shmem_try_map: metal_map succeeded mem=0x7f341818d000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: prepared phys=0x7f33fc000d50 io=0x7f33fc001560 phys_size=2048\nmetal_shmem_try_map: metal_map succeeded mem=0x7f341808d000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: pagemap fd=4 present, entering for-loop to populate phys entries\nmetal_shmem_try_map: metal_map succeeded mem=0x7f33faefe000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: loop iteration start: page=0 virt=0x7f341838d000 offset=0 (addr=0x7f341838d000)\nmetal_shmem_try_map: mlock succeeded mem=0x7f341818d000 size=1048576\nmetal_shmem_try_map: prepared phys=0x7f3408000d50 io=0x7f3408001560 phys_size=2048\nmetal_shmem_try_map: prepared phys=0x7f340c000d50 io=0x7f340c001560 phys_size=2048\nmetal_shmem_try_map: metal_map succeeded mem=0x7f33fadfe000 size=1048576 mmap_flags=0x0\nmetal_shmem_try_map: metal_virt2phys success page=0 phys[0]=0\nmetal_shmem_try_map: pagemap fd=4 present, entering for-loop to populate phys entries\nmetal_shmem_try_map: pagemap fd=4 present, entering for-loop to populate phys entries\nmetal_shmem_try_map: metal_virt2phys success page=0 phys[0]=0\nmetal_shmem_try_map: loop iteration start: page=1 virt=0x7f341838d000 offset=4096 (addr=0x7f341838e000)\nmetal_shmem_try_map: loop iteration start: page=0 virt=0x7f3418e8e000 offset=0 (addr=0x7f3418e8e000)\nmetal_shmem_try_map: loop iteration start: page=0 virt=0x7f3418f8e000 offset=0 (addr=0x7f3418f8e000)\nmetal_shmem_try_map: loop iteration start: page=1 virt=0x7f3418d8e000 offset=4096 (addr=0x7f3418d8f000)\nmetal_shmem_try_map: mlock succeeded mem=0x7f341848d000 size=1048576\nmetal_shmem_try_map: mlock succeeded mem=0x7f341828d000 size=1048576\nmetal_shmem_try_map: mlock succeeded mem=0x7f341808d000 size=1048576\nmetal_shmem_try_map: prepared phys=0x7f33f4000d50 io=0x7f33f4001560 phys_size=2048\nmetal_shmem_try_map: prepared phys=0x7f3400000d50 io=0x7f3400001560 phys_size=2048\nmetal_shmem_try_map: prepared phys=0x7f3404000d50 io=0x7f3404001560 ph\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_try_map:\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n...\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n...\nstruct metal_page_size {\n\t/** Page size. */\n\tsize_t\tpage_size;\n\n\t/** Page shift. */\n\tunsigned long page_shift;\n\n\t/** Path to hugetlbfs (or tmpfs) mount point. */\n\tchar path[PATH_MAX];\n\n\t/** Flags to use for mmap. */\n\tint mmap_flags;\n}\n...\ntypedef unsigned long metal_phys_addr_t\n...\n#define METAL_BAD_OFFSET ((unsignedlong)-1)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The for statement in the code is: for (virt = mem, page = 0; page < pages; page++) { ... } The first clause uses the comma operator to perform two assignments: it assigns to virt and initializes the loop counter page. MISRA C 2023 Rule 14.2 requires that the first clause be empty or be an expression that sets or defines/initializes the loop counter only. Assigning to virt (an object that is used in the loop body) in the first clause is a side effect on a non-loop counter and therefore violates clause 1 of Rule 14.2. (The other clauses appear satisfied, but that does not remove the violation in the first clause.)\n\nSuggested fix: perform virt = mem; before the for, e.g.:\n    virt = mem;\n    for (page = 0; page < pages; page++) { ... }\nor define/initialize the loop counter in the for and initialize virt inside the loop as appropriate."
}