{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'size' (a non-pointer, passed by value) is assigned to: size = metal_align_up(size, ps->page_size); This modifies the parameter variable itself (the caller's local parameter) which violates MISRA C 2023 Rule 17.8. The macro metal_align_up expands using the 'size' argument and the result is stored back into the parameter 'size'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/537.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/537.txt */\nstatic void metal_shmem_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/537.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL) {\n        char ts[64];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0) {\n            fprintf(f, \"%s - \", ts);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                   struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    /* Log entry and incoming parameter state */\n    metal_shmem_log_probe(\"ENTER metal_shmem_try_map: ps=%p fd=%d size(in)=%zu result=%p\",\n                (void *)ps, fd, size, (void *)result);\n\n    /* Log the alignment operation about to happen (this is where the param is modified) */\n    metal_shmem_log_probe(\"Before align: size=%zu, page_size=%zu\",\n                size, (ps != NULL) ? ps->page_size : 0);\n\n    size = metal_align_up(size, ps->page_size);\n\n    /* Log after modification of the parameter 'size' to capture the violation scenario */\n    metal_shmem_log_probe(\"After align: size=%zu (modified parameter), page_size=%zu\",\n                size, (ps != NULL) ? ps->page_size : 0);\n\n    pages = size / ps->page_size;\n    metal_shmem_log_probe(\"Computed pages=%zu (size=%zu / page_size=%zu)\",\n                pages, size, ps->page_size);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        metal_log(METAL_LOG_WARNING,\n              \"failed to mmap shmem %ld,0x%x - %s\\n\",\n              size, ps->mmap_flags, strerror(-error));\n\n        metal_shmem_log_probe(\"metal_map failed: error=%d size=%zu mmap_flags=0x%x strerror=%s\",\n                    error, size, ps->mmap_flags, strerror(-error));\n        return error;\n    }\n\n    metal_shmem_log_probe(\"metal_map succeeded: mem=%p size=%zu\", mem, size);\n\n    error = mlock(mem, size);\n    if (error) {\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n              strerror(errno));\n        metal_shmem_log_probe(\"mlock failed: errno=%d strerror=%s\", errno, strerror(errno));\n    } else {\n        metal_shmem_log_probe(\"mlock succeeded: mem=%p size=%zu\", mem, size);\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    metal_shmem_log_probe(\"Allocating phys table: pages=%zu phys_size=%zu\", pages, phys_size);\n\n    phys = malloc(phys_size);\n    if (!phys) {\n        metal_shmem_log_probe(\"malloc for phys failed: phys_size=%zu\", phys_size);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        metal_shmem_log_probe(\"malloc for io failed: sizeof(io)=%zu\", sizeof(*io));\n        free(phys);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        metal_log(METAL_LOG_WARNING,\n        \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\n        metal_shmem_log_probe(\"pagemap_fd < 0: using offset as pa, phys[0]=%llu, io=%p\",\n                    (unsigned long long)phys[0], (void *)io);\n    } else {\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0)\n                phys[page] = METAL_BAD_OFFSET;\n\n            metal_shmem_log_probe(\"virt2phys: page=%zu offset=%zu virt=%p phys[%zu]=%llu error=%d\",\n                        page, offset, (void *)(virt + offset), page,\n                        (unsigned long long)phys[page], error);\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n            &metal_shmem_io_ops);\n\n        metal_shmem_log_probe(\"Initialized io: io=%p mem=%p size=%zu page_shift=%d\",\n                    (void *)io, mem, size, ps->page_shift);\n    }\n    *result = io;\n\n    metal_shmem_log_probe(\"EXIT metal_shmem_try_map: result io=%p return=0\", (void *)io);\n\n    return 0;\n}\n"
}