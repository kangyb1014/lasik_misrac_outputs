{
  "user_message": "An agent A claimed that the following metal_shmem_try_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_try_map.\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'size' (a non-pointer, passed by value) is assigned to: size = metal_align_up(size, ps->page_size); This modifies the parameter variable itself (the caller's local parameter) which violates MISRA C 2023 Rule 17.8. The macro metal_align_up expands using the 'size' argument and the result is stored back into the parameter 'size'.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-22 06:30:54 - ENTER metal_shmem_try_map: ps=0x55a0c06c4800 fd=8 size(in)=1048576 result=0x7eff7affce20\n2025-08-22 06:30:54 - ENTER metal_shmem_try_map: ps=0x55a0c06c4800 fd=6 size(in)=1048576 result=0x7eff7a7fbe20\n2025-08-22 06:30:54 - ENTER metal_shmem_try_map: ps=0x55a0c06c4800 fd=10 size(in)=1048576 result=0x7eff7b7fde20\n2025-08-22 06:30:54 - Before align: size=1048576, page_size=4096\n2025-08-22 06:30:54 - ENTER metal_shmem_try_map: ps=0x55a0c06c4800 fd=12 size(in)=1048576 result=0x7eff7bffee20\n2025-08-22 06:30:54 - Before align: size=1048576, page_size=4096\n2025-08-22 06:30:54 - Before align: size=1048576, page_size=4096\n2025-08-22 06:30:54 - After align: size=1048576 (modified parameter), page_size=4096\n2025-08-22 06:30:54 - Before align: size=1048576, page_size=4096\n2025-08-22 06:30:54 - After align: size=1048576 (modified parameter), page_size=4096\n2025-08-22 06:30:54 - After align: size=1048576 (modified parameter), page_size=4096\n2025-08-22 06:30:54 - Computed pages=256 (size=1048576 / page_size=4096)\n2025-08-22 06:30:54 - After align: size=1048576 (modified parameter), page_size=4096\n2025-08-22 06:30:54 - Computed pages=256 (size=1048576 / page_size=4096)\n2025-08-22 06:30:54 - Computed pages=256 (size=1048576 / page_size=4096)\n2025-08-22 06:30:54 - Computed pages=256 (size=1048576 / page_size=4096)\n2025-08-22 06:30:54 - metal_map succeeded: mem=0x7eff80109000 size=1048576\n2025-08-22 06:30:54 - metal_map succeeded: mem=0x7eff80009000 size=1048576\n2025-08-22 06:30:54 - metal_map succeeded: mem=0x7eff79efc000 size=1048576\n2025-08-22 06:30:54 - ENTER metal_shmem_try_map: ps=0x55a0c06c4800 fd=9 size(in)=1048576 result=0x7eff81209e20\n2025-08-22 06:30:54 - metal_map succeeded: mem=0x7eff795fb000 size=1048576\n2025-08-22 06:30:54 - Before align: size=1048576, page_size=4096\n2025-08-22 06:30:54 - After align: size=1048576 (modified parameter), page_size=4096\n2025-08-22 06:30:54 - Computed pages=256 (size=1048576 / page_size=4096)\n2025-08-22 06:30:54 - mlock succeeded: mem=0x7eff80109000 size=1048576\n2025-08-22 06:30:54 - Allocating phys table: pages=256 phys_size=2048\n2025-08-22 06:30:54 - mlock succeeded: mem=0x7eff80009000 size=1048576\n2025-08-22 06:30:54 - Allocating phys table: pages=256 phys_size=2048\n2025-08-22 06:30:54 - mlock succeeded: mem=0x7eff79efc000 size=1048576\n2025-08-22 06:30:54 - Allocating phys table: pages=256 phys_size=2048\n2025-08-22 06:30:54 - mlock succeeded: mem=0x7eff795fb000 size=1048576\n2025-08-22 06:30:54 - metal_map succeeded: mem=0x7eff794fb000 size=1048576\n2025-08-22 06:30:54 - Allocating phys table: pages=256 phys_size=2048\n2025-08-22 06:30:54 - virt2phys: page=0 offset=0 virt=0x7eff80109000 phys[0]=0 error=0\n2025-08-22 06:30:54 - virt2phys: page=0 offset=0 virt=0x7eff79efc000 phys[0]=0 error=0\n2025-08-22 06:30:54 - ENTER metal_shmem_try_map: ps=0x55a0c06c4800 fd=7 size(in)=1048576 result=0x7eff80a08e20\n2025-08-22 06:30:54 - virt2phys: page=0 offset=0 virt=0x7eff795fb000 phys[0]=0 error=0\n2025-08-22 06:30:54 - Before align: size=1048576, page_size=4096\n2025-08-22 06:30:54 - After align: size=1048576 (modified parameter), page_size=4096\n2025-08-22 06:30:54 - Computed pages=256 (size=1048576 / page_size=4096)\n2025-08-22 06:30:54 - mlock succeeded: mem=0x7eff794fb000 size=1048576\n2025-08-22 06:30:54 - virt2phys: page=0 offset=0 virt=0x7eff80009000 phys[0]=0 error=0\n2025-08-22 06:30:54 - Allocating phys table: pages=256 phys_size=2048\n2025-08-22 06:30:54 - virt2phys: page=1 offset=4096 virt=0x7eff795fc000 phys[1]=0 error=0\n2025-08-22 06:30:54 - virt2phys: page=1 offset=4096 virt=0x7eff8010a000 phys[1]=0 error=0\n2025-08-22 06:30:54 - virt2phys: page=2 offset=8192 virt=0x7eff795fd000 phys[2]=0 error=0\n2025-08-22 06:30:54 - virt2phys: page=1 offset=4096 virt=0x7eff79efd000 phys[1]=0 error=0\n2025-08-22 06:30:54 - virt2phys: page=2 offset=8192 virt=0x7eff8010b000 phys[2]=0 error=0\n2025-08-22 06:30:54 - virt2phys: page=3 offset=12288 virt=0x7eff795fe000 phys[3]=0 error=0\n2025-08-22 06:30:54 - virt2phys: page=2 offset=8192 virt=0x7eff79efe000 phys[2]=0 error=0\n2025-08-22 06:30:54 - virt2phys\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_try_map:\n#define metal_align_up(size, align) metal_align_down((size)+(align)-1,align)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified; the exception in the rule refers only to objects pointed to by pointer parameters (the pointer itself must not be modified). In metal_shmem_try_map the parameter 'size' (a non\u2011pointer, passed by value) is assigned to with size = metal_align_up(size, ps->page_size); which modifies the parameter object and therefore violates Rule 17.8. Remediation: copy the parameter into a local variable (for example, size_t aligned_size = metal_align_up(size, ...)) and use that local variable instead of writing back to the parameter."
}