{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable ts_created is written (via the threads_out parameter of metal_run_noblock) but its value is never read or used afterwards. In the shown function ts_created is declared and &ts_created is passed to metal_run_noblock twice, but the stored value is never used (metal_finish_threads is called with THREADS, not ts_created). The write to ts_created therefore has no effect on program behaviour and constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified condition code that contains useful probe functions that print useful logs to a file \"/tmp/logs/632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of condition as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of condition:\n```c\nstatic int condition(void)\n{\n\tint ret;\n\tint ts_created;\n\tpthread_t tids[THREADS];\n\n\t/** TC1 consumer threads go first */\n\t/** create 10 consumer threads first */\n\tret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 producer threads next */\n\tret = metal_run(THREADS, producer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** wait for consumer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\t/** TC2 producer threads go first */\n\t/** create 10 producer threads first */\n\tret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 consumer threads next */\n\tret = metal_run(THREADS, consumer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\nout:\n\t/** wait for producer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\treturn ret;\n}\n```\n</target_code>\nPlease provide the modified condition code.\n",
  "test_code": "#include <stdio.h>\n\nstatic int condition(void)\n{\n\tint ret;\n\tint ts_created;\n\tpthread_t tids[THREADS];\n\tFILE *logf = fopen(\"/tmp/logs/632.txt\", \"a\");\n\n\tif (logf) {\n\t\tfprintf(logf, \"condition: entry\\n\");\n\t\tfprintf(logf, \"address of tids array: %p\\n\", (void *)tids);\n\t\tfflush(logf);\n\t}\n\n\t/** TC1 consumer threads go first */\n\t/** create 10 consumer threads first */\n\tret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (logf) {\n\t\tfprintf(logf, \"after metal_run_noblock (consumers): ret=%d, ts_created=%d, &ts_created=%p\\n\",\n\t\t\tret, ts_created, (void *)&ts_created);\n\t\tfflush(logf);\n\t}\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"goto out due to failure creating consumer threads (ret=%d)\\n\", ret);\n\t\t\tfflush(logf);\n\t\t}\n\t\tgoto out;\n\t}\n\n\t/** create 10 producer threads next */\n\tret = metal_run(THREADS, producer_thread, NULL);\n\tif (logf) {\n\t\tfprintf(logf, \"after metal_run (producers): ret=%d\\n\", ret);\n\t\tfflush(logf);\n\t}\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"goto out due to failure creating producer threads (ret=%d)\\n\", ret);\n\t\t\tfflush(logf);\n\t\t}\n\t\tgoto out;\n\t}\n\n\t/** wait for consumer threads to finish */\n\tif (logf) {\n\t\tfprintf(logf, \"calling metal_finish_threads for consumer scenario: THREADS=%d, tids=%p\\n\",\n\t\t\tTHREADS, (void *)tids);\n\t\tfflush(logf);\n\t}\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\t/** TC2 producer threads go first */\n\t/** create 10 producer threads first */\n\tret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (logf) {\n\t\tfprintf(logf, \"after metal_run_noblock (producers): ret=%d, ts_created=%d, &ts_created=%p\\n\",\n\t\t\tret, ts_created, (void *)&ts_created);\n\t\tfflush(logf);\n\t}\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"goto out due to failure creating producer noblock threads (ret=%d)\\n\", ret);\n\t\t\tfflush(logf);\n\t\t}\n\t\tgoto out;\n\t}\n\n\t/** create 10 consumer threads next */\n\tret = metal_run(THREADS, consumer_thread, NULL);\n\tif (logf) {\n\t\tfprintf(logf, \"after metal_run (consumers): ret=%d\\n\", ret);\n\t\tfflush(logf);\n\t}\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"goto out due to failure creating consumer threads in TC2 (ret=%d)\\n\", ret);\n\t\t\tfflush(logf);\n\t\t}\n\t\tgoto out;\n\t}\n\nout:\n\t/** wait for producer threads to finish */\n\tif (logf) {\n\t\t/* Log the fact that metal_finish_threads is called with THREADS and not with ts_created. */\n\t\tfprintf(logf, \"out: about to call metal_finish_threads with THREADS=%d (note: ts_created=%d is NOT used in finish call)\\n\",\n\t\t\tTHREADS, ts_created);\n\t\tfprintf(logf, \"out: final tids address: %p\\n\", (void *)tids);\n\t\tfflush(logf);\n\t}\n\tmetal_finish_threads(THREADS, (void *)tids);\n\tif (logf) {\n\t\tfprintf(logf, \"condition: exit with ret=%d\\n\", ret);\n\t\tfclose(logf);\n\t}\n\treturn ret;\n}\n"
}