{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts the thread array to a plain void *: metal_finish_threads(THREADS, (void *)tids); This discards type information and does not use a const-qualified pointer. If metal_finish_threads does not modify the tids array (which is likely), the parameter should be a pointer to a const-qualified type (e.g. const pthread_t * or const void *), and the call should pass (const void *)tids (or simply tids if the prototype matches). By forcing a (void *) cast (or by using a non-const parameter), the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified condition code that contains useful probe functions that print useful logs to a file \"/tmp/logs/633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of condition as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of condition:\n```c\nstatic int condition(void)\n{\n\tint ret;\n\tint ts_created;\n\tpthread_t tids[THREADS];\n\n\t/** TC1 consumer threads go first */\n\t/** create 10 consumer threads first */\n\tret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 producer threads next */\n\tret = metal_run(THREADS, producer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** wait for consumer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\t/** TC2 producer threads go first */\n\t/** create 10 producer threads first */\n\tret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 consumer threads next */\n\tret = metal_run(THREADS, consumer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\nout:\n\t/** wait for producer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\treturn ret;\n}\n```\n</target_code>\nPlease provide the modified condition code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: logs control flow and key state to \"/tmp/logs/633.txt\". */\nstatic void probe_log_state(const char *stage, int ret, int ts_created, const pthread_t *tids, size_t n)\n{\n    FILE *f = fopen(\"/tmp/logs/633.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"[STAGE] %s\\n\", stage);\n        fprintf(f, \"  ret = %d\\n\", ret);\n        fprintf(f, \"  ts_created = %d\\n\", ts_created);\n        fprintf(f, \"  tids_ptr = %p\\n\", (const void *)tids);\n        fprintf(f, \"  sizeof(pthread_t) = %zu\\n\", sizeof(pthread_t));\n        fprintf(f, \"  THREADS (n) = %zu\\n\", n);\n        if (n > 0) {\n            /* Log address of first element to help identify what was passed. */\n            fprintf(f, \"  &tids[0] = %p\\n\", (const void *)&tids[0]);\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nstatic int condition(void)\n{\n    int ret;\n    int ts_created;\n    pthread_t tids[THREADS];\n\n    /** TC1 consumer threads go first */\n    /** create 10 consumer threads first */\n    ret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n                &ts_created);\n    probe_log_state(\"after metal_run_noblock (create consumers)\", ret, ts_created, tids, (size_t)THREADS);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n              ret);\n        probe_log_state(\"fail create consumers (going to out)\", ret, ts_created, tids, (size_t)THREADS);\n        goto out;\n    }\n\n    /** create 10 producer threads next */\n    ret = metal_run(THREADS, producer_thread, NULL);\n    probe_log_state(\"after metal_run (create producers)\", ret, ts_created, tids, (size_t)THREADS);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n              ret);\n        probe_log_state(\"fail create producers (going to out)\", ret, ts_created, tids, (size_t)THREADS);\n        goto out;\n    }\n\n    /** wait for consumer threads to finish */\n    probe_log_state(\"before metal_finish_threads (waiting consumers) - casting to (void *)tids will occur here\", ret, ts_created, tids, (size_t)THREADS);\n    metal_finish_threads(THREADS, (void *)tids);\n    probe_log_state(\"after metal_finish_threads (waiting consumers returned)\", ret, ts_created, tids, (size_t)THREADS);\n\n    /** TC2 producer threads go first */\n    /** create 10 producer threads first */\n    ret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n                &ts_created);\n    probe_log_state(\"after metal_run_noblock (create producers TC2)\", ret, ts_created, tids, (size_t)THREADS);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n              ret);\n        probe_log_state(\"fail create producers TC2 (going to out)\", ret, ts_created, tids, (size_t)THREADS);\n        goto out;\n    }\n\n    /** create 10 consumer threads next */\n    ret = metal_run(THREADS, consumer_thread, NULL);\n    probe_log_state(\"after metal_run (create consumers TC2)\", ret, ts_created, tids, (size_t)THREADS);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n              ret);\n        probe_log_state(\"fail create consumers TC2 (going to out)\", ret, ts_created, tids, (size_t)THREADS);\n        goto out;\n    }\n\nout:\n    /** wait for producer threads to finish */\n    probe_log_state(\"before metal_finish_threads (final wait for producers) - casting to (void *)tids will occur here\", ret, ts_created, tids, (size_t)THREADS);\n    metal_finish_threads(THREADS, (void *)tids);\n    probe_log_state(\"after metal_finish_threads (final wait returned)\", ret, ts_created, tids, (size_t)THREADS);\n    return ret;\n}\n"
}