{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_linux_irq_shutdown:\nstatic bool irq_handling_stop\n...\nstatic pthread_t irq_pthread\n...\nstatic int irq_notify_fd\n...\nstatic metal_mutex_t irq_lock\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_mutex_deinit(&irq_lock);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. Passing &irq_lock hands a pointer to the function so the function may modify the object pointed to (allowed). A Rule 17.8 violation would occur only if the called function modified its pointer parameter itself (for example: void metal_mutex_deinit(metal_mutex_t *m) { m = NULL; /* violates MISRA C 2023 Rule 17.8 */ }). The call metal_mutex_deinit(&irq_lock); as shown does not itself violate Rule 17.8."
}