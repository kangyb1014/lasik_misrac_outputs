{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe metal_log macro is defined using GNU extensions (a statement-expression '({ ... })' and the '##__VA_ARGS__' token-pasting idiom). The call metal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\", ret); expands to that macro and therefore uses language extensions (GCC/clang statement expressions and GNU varargs handling).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_shutdown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/510.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_shutdown code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <pthread.h>\n#include <string.h>\n#include <errno.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Declarations of external symbols used by the original function.\n * These are provided so this translation unit compiles on its own.\n * In the actual project these will be defined elsewhere.\n */\nextern volatile bool irq_handling_stop;\nextern pthread_t irq_pthread;\nextern int irq_notify_fd;\nextern void *irq_lock; /* opaque lock object in the actual project */\n\nextern void metal_linux_irq_notify(void);\nextern void metal_mutex_deinit(void *lock);\n\n/* metal_log is a macro in the real project (reported to use GNU extensions).\n * Provide a prototype so this file compiles standalone. In the real build\n * the macro will be present and expand; that expansion is the subject\n * of the reported Rule 1.2 violation. */\nvoid metal_log(int level, const char *fmt, ...);\n\nenum {\n    METAL_LOG_DEBUG = 0,\n    METAL_LOG_ERROR = 1\n};\n\n/* Probe helper: append a structured trace line to /tmp/logs/510.txt\n * This captures control flow and state for reproducing the scenario.\n */\nstatic void probe_write(const char *label, int ret)\n{\n    FILE *f;\n    /* Ensure directory exists (ignore errors) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (!f) {\n        /* If logging fails, avoid disturbing original logic; return silently. */\n        return;\n    }\n\n    /* Write a single-line record with relevant state */\n    fprintf(f, \"%s: label=%s, ret=%d, irq_notify_fd=%d, irq_handling_stop=%d, irq_pthread=%lu\\n\",\n            \"metal_linux_irq_shutdown\", label, ret, irq_notify_fd,\n            (int)(irq_handling_stop ? 1 : 0), (unsigned long)irq_pthread);\n\n    fclose(f);\n}\n\nvoid metal_linux_irq_shutdown(void)\n{\n    int ret;\n\n    /* Log entry to probe file before calling metal_log */\n    probe_write(\"entry_before_metal_log_debug\", 0);\n\n    /* Original log call (may be a macro in the real project) */\n    metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\n    /* Record that we set irq_handling_stop and then notify */\n    probe_write(\"before_setting_irq_handling_stop\", 0);\n\n    irq_handling_stop = true;\n\n    probe_write(\"after_setting_irq_handling_stop_before_notify\", 0);\n\n    metal_linux_irq_notify();\n\n    probe_write(\"after_notify_before_join\", 0);\n\n    ret = pthread_join(irq_pthread, NULL);\n\n    /* Record the join result and related state */\n    probe_write(\"after_join\", ret);\n\n    if (ret) {\n        /* Preserve original behavior: call metal_log and also record additional info */\n        metal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n                  ret);\n\n        /* Add more context about the error to the probe file */\n        probe_write(\"join_failed_with_error\", ret);\n\n        /* Attempt to record a human readable form of the error code */\n        {\n            char errbuf[128];\n            /* Use strerror_r where available, but keep simple and portable: */\n            const char *s = strerror_r(ret, errbuf, sizeof(errbuf));\n            if (!s) {\n                s = errbuf; /* if strerror_r returned 0 but filled buf */\n            }\n            FILE *f = fopen(\"/tmp/logs/510.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"%s: join_error_description=%s\\n\",\n                        \"metal_linux_irq_shutdown\", s);\n                fclose(f);\n            }\n        }\n    }\n\n    /* Continue original cleanup */\n    close(irq_notify_fd);\n    metal_mutex_deinit(&irq_lock);\n\n    probe_write(\"exit\", ret);\n}\n"
}