{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses compiler-specific extensions: the GNU statement-expression construct '({ ... })' and the GCC variadic-macro comma-swallowing extension '##__VA_ARGS__' (and the nonstandard named variadic parameter form in the macro parameter list). These are documented GCC extensions and therefore violate MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_finish_threads code that contains useful probe functions that print useful logs to a file \"/tmp/logs/660.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_finish_threads as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_finish_threads:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\nPlease provide the modified metal_finish_threads code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <errno.h>\n\nvoid metal_finish_threads(int threads, void *tids)\n{\n    int i;\n    pthread_t *tid_p = (pthread_t *)tids;\n\n    /* Attempt to create log directory if it does not exist. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *log = fopen(\"/tmp/logs/660.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER metal_finish_threads: threads=%d, tids=%p\\n\", threads, tids);\n        fprintf(log, \"sizeof(pthread_t)=%zu\\n\", sizeof(pthread_t));\n        fflush(log);\n    }\n\n    if (!tids) {\n        if (log) {\n            fprintf(log, \"ERROR: invalid argument, tids is NULL.\\n\");\n            fflush(log);\n            fclose(log);\n            log = NULL;\n        }\n\n        /* Preserve original behavior */\n        metal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n        return;\n    }\n\n    for (i = 0; i < threads; i++) {\n        if (log) {\n            /* Log the address of the element being joined and a hex dump of its bytes. */\n            fprintf(log, \"ITER %d: element_addr=%p\\n\", i, (void *)&tid_p[i]);\n\n            unsigned char buf[sizeof(pthread_t)];\n            (void)memset(buf, 0, sizeof(buf));\n            (void)memcpy(buf, &tid_p[i], sizeof(buf));\n\n            fprintf(log, \"ITER %d: pthread_t bytes=\", i);\n            for (size_t b = 0u; b < sizeof(buf); ++b) {\n                fprintf(log, \"%02x\", buf[b]);\n            }\n            fprintf(log, \"\\n\");\n            fflush(log);\n        }\n\n        /* Preserve original join semantics but capture the return code for logging */\n        int join_ret = pthread_join(tid_p[i], NULL);\n\n        if (log) {\n            if (join_ret == 0) {\n                fprintf(log, \"ITER %d: pthread_join succeeded (return=0)\\n\", i);\n            } else {\n                fprintf(log, \"ITER %d: pthread_join failed (return=%d, strerror=%s)\\n\", i, join_ret, strerror(join_ret));\n            }\n            fflush(log);\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"EXIT metal_finish_threads\\n\");\n        fclose(log);\n    }\n}\n"
}