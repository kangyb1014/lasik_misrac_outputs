{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)format;' is an expression-statement with no side effects whose removal would not change program behaviour (it only suppresses an unused-parameter warning). Because it is executed when DEFAULT_LOGGER_ON is not defined but has no effect, it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_default_log_handler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/192.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_default_log_handler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_default_log_handler:\n```c\nvoid metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n\tchar msg[1024];\n\tva_list args;\n\tstatic const char * const level_strs[] = {\n\t\t\"metal: emergency: \",\n\t\t\"metal: alert:     \",\n\t\t\"metal: critical:  \",\n\t\t\"metal: error:     \",\n\t\t\"metal: warning:   \",\n\t\t\"metal: notice:    \",\n\t\t\"metal: info:      \",\n\t\t\"metal: debug:     \",\n\t};\n\n\tva_start(args, format);\n\tvsnprintf(msg, sizeof(msg), format, args);\n\tva_end(args);\n\n\tif (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n\t\tlevel = METAL_LOG_EMERGENCY;\n\n\tfprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n\t(void)level;\n\t(void)format;\n#endif\n}\n```\n</target_code>\nPlease provide the modified metal_default_log_handler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe function to log control flow and state for the violation scenario.\n   Appends diagnostic information to /tmp/logs/192.txt so other agents can\n   reproduce and gather evidence that the (void)format; line is reached when\n   DEFAULT_LOGGER_ON is not defined.\n\n   This function intentionally does not change the behavior of the caller\n   beyond writing diagnostics to the file. */\nstatic void metal_default_log_probe(enum metal_log_level level, const char *format, const char *location)\n{\n    FILE *f = fopen(\"/tmp/logs/192.txt\", \"a\");\n    if (f != NULL) {\n        /* Log the control path and state: where we are, the numeric level and\n           the pointer value of format. We do not dereference format to avoid\n           changing program semantics or causing faults. */\n        fprintf(f, \"%s: entered\\n\", location);\n        fprintf(f, \"%s: level = %d\\n\", location, (int)level);\n        fprintf(f, \"%s: format = %p\\n\", location, (const void *)format);\n        fprintf(f, \"%s: (void)level and (void)format executed (no side effects)\\n\", location);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nvoid metal_default_log_handler(enum metal_log_level level,\n                               const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n    char msg[1024];\n    va_list args;\n    static const char * const level_strs[] = {\n        \"metal: emergency: \",\n        \"metal: alert:     \",\n        \"metal: critical:  \",\n        \"metal: error:     \",\n        \"metal: warning:   \",\n        \"metal: notice:    \",\n        \"metal: info:      \",\n        \"metal: debug:     \",\n    };\n\n    va_start(args, format);\n    vsnprintf(msg, sizeof(msg), format, args);\n    va_end(args);\n\n    if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n        level = METAL_LOG_EMERGENCY;\n\n    fprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n    /* Preserve the original no-op casts to avoid warnings. */\n    (void)level;\n    (void)format;\n\n    /* Probe: record that the control path hit the \"logger off\" branch and\n       capture the state (level value and format pointer). This gives evidence\n       that the expression-statement (void)format; is executed but has no\n       observable effect, which is the basis of the reported Rule 2.2 issue. */\n    metal_default_log_probe(level, format, \"metal_default_log_handler:DEFAULT_LOGGER_OFF\");\n#endif\n}\n"
}