{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_default_log_handler:\n```c\nvoid metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n\tchar msg[1024];\n\tva_list args;\n\tstatic const char * const level_strs[] = {\n\t\t\"metal: emergency: \",\n\t\t\"metal: alert:     \",\n\t\t\"metal: critical:  \",\n\t\t\"metal: error:     \",\n\t\t\"metal: warning:   \",\n\t\t\"metal: notice:    \",\n\t\t\"metal: info:      \",\n\t\t\"metal: debug:     \",\n\t};\n\n\tva_start(args, format);\n\tvsnprintf(msg, sizeof(msg), format, args);\n\tva_end(args);\n\n\tif (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n\t\tlevel = METAL_LOG_EMERGENCY;\n\n\tfprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n\t(void)level;\n\t(void)format;\n#endif\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_default_log_handler:\nenum metal_log_level {\n\tMETAL_LOG_EMERGENCY,\t/**< system is unusable.               */\n\tMETAL_LOG_ALERT,\t/**< action must be taken immediately. */\n\tMETAL_LOG_CRITICAL,\t/**< critical conditions.              */\n\tMETAL_LOG_ERROR,\t/**< error conditions.                 */\n\tMETAL_LOG_WARNING,\t/**< warning conditions.               */\n\tMETAL_LOG_NOTICE,\t/**< normal but significant condition. */\n\tMETAL_LOG_INFO,\t\t/**< informational messages.           */\n\tMETAL_LOG_DEBUG,\t/**< debug-level messages.             */\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nva_list args;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. 'va_list args' is a variadic argument state object that must be modified by va_start/va_end (and possibly va_arg); qualifying it const would be incorrect and prevent required modifications. Rule 8.13 applies to pointers that could/should point to const-qualified data (e.g. 'char *p' -> 'const char *p'); it is not applicable here, so the declaration does not violate the rule."
}