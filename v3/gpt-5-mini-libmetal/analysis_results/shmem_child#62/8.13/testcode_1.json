{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'virt' is declared as a pointer to a non-const anonymous struct but is only used for reads and comparisons (assigned from metal_io_virt(io, 0) and later compared / passed to metal_io_virt_to_phys). Because the object is not modified through 'virt', it could and should be declared to point to a const-qualified type (e.g. const struct { metal_mutex_t mutex; int counter; } *virt). Thus the current code violates MISRA C 2023 Rule 8.13. Note: if the API functions require a non-const pointer or the memory is intended to be modified elsewhere via this pointer, then const-qualification might not be possible; based on the shown usage it is possible and therefore the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "static void probe_log_start(const char *name)\n{\n    FILE *f = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"shmem_child: start name=%s\\n\", name ? name : \"(null)\");\n    fclose(f);\n}\n\nstatic void probe_log_state(const char *stage, struct metal_io_region *io, void *virt, unsigned long phys)\n{\n    FILE *f = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s: io=%p virt=%p phys=0x%lx\\n\", stage, (void *)io, virt, phys);\n    fclose(f);\n}\n\nstatic void probe_log_cmp(const char *desc, void *a, void *b)\n{\n    FILE *f = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s: a=%p b=%p equal=%d\\n\", desc, a, b, (a == b));\n    fclose(f);\n}\n\nstatic void *shmem_child(void *arg)\n{\n    const char *name = arg;\n    struct {\n        metal_mutex_t\tmutex;\n        int\t\t\tcounter;\n    } *virt, *virt2;\n    struct metal_io_region *io;\n    unsigned long phys;\n    unsigned long phys_from_virt;\n    size_t size = 1 * 1024 * 1024;\n    int error;\n\n    probe_log_start(name);\n\n    error = metal_shmem_open(name, size, &io);\n    if (error) {\n        metal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n        probe_log_state(\"shmem_open_failed\", NULL, NULL, 0);\n        atomic_fetch_add(&nb_err, 1);\n        return NULL;\n    }\n\n    /* Capture the virtual pointer and physical offset for logging/probing. */\n    virt = metal_io_virt(io, 0);\n    phys = metal_io_phys(io, 0);\n\n    probe_log_state(\"after_metal_io_assign\", io, (void *)virt, phys);\n\n    if (phys != METAL_BAD_OFFSET) {\n        /* Obtain the other values used in comparisons so they can be logged. */\n        virt2 = metal_io_phys_to_virt(io, phys);\n        phys_from_virt = metal_io_virt_to_phys(io, virt);\n\n        /* Log the raw comparison operands. */\n        probe_log_cmp(\"virt_vs_phys_to_virt\", (void *)virt, (void *)virt2);\n        {\n            FILE *f = fopen(\"/tmp/logs/623.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"phys_from_virt=0x%lx phys=0x%lx\\n\", phys_from_virt, phys);\n                fclose(f);\n            }\n        }\n\n        if (virt != virt2) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n            probe_log_state(\"virt_mismatch\", io, (void *)virt, phys);\n        }\n        if (phys != phys_from_virt) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n            probe_log_state(\"phys_mismatch\", io, (void *)virt, phys);\n        }\n    }\n\n    metal_io_finish(io);\n    probe_log_state(\"exit\", io, (void *)virt, phys);\n    return NULL;\n}"
}