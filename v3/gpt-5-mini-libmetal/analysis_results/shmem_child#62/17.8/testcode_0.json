{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function metal_shmem_try_map modifies the value parameter 'size' with the statement `size = metal_align_up(size, ps->page_size);`. Modifying a value parameter violates MISRA C 2023 Rule 17.8. (Note: the assignment `*result = io;` only modifies the object pointed to by the pointer parameter, which is permitted.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/627.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe function: append logs to /tmp/logs/627.txt */\nstatic void shmem_child_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/627.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void *shmem_child(void *arg)\n{\n    const char *name = arg;\n    struct {\n        metal_mutex_t\tmutex;\n        int\t\t\tcounter;\n    } *virt;\n    struct metal_io_region *io;\n    unsigned long phys;\n    size_t size = 1 * 1024 * 1024;\n    int error;\n\n    /* Log entry and initial parameter state */\n    shmem_child_log(\"shmem_child: enter, name=%s\", name ? name : \"(null)\");\n    shmem_child_log(\"shmem_child: requested size=%zu\", size);\n\n    error = metal_shmem_open(name, size, &io);\n    shmem_child_log(\"shmem_child: metal_shmem_open returned %d, io=%p\", error, (void *)io);\n    if (error) {\n        metal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n        atomic_fetch_add(&nb_err, 1);\n        shmem_child_log(\"shmem_child: shmem_open failed, error=%d\", error);\n        return NULL;\n    }\n\n    virt = metal_io_virt(io, 0);\n    phys = metal_io_phys(io, 0);\n    shmem_child_log(\"shmem_child: virt=%p, phys=0x%lx\", (void *)virt, phys);\n\n    if (phys != METAL_BAD_OFFSET) {\n        bool v_to_p_ok = (virt == metal_io_phys_to_virt(io, phys));\n        if (!v_to_p_ok) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n        }\n        shmem_child_log(\"shmem_child: virt == phys->virt? %s\", v_to_p_ok ? \"true\" : \"false\");\n\n        bool p_to_v_ok = (phys == metal_io_virt_to_phys(io, virt));\n        if (!p_to_v_ok) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n        }\n        shmem_child_log(\"shmem_child: phys == virt->phys? %s\", p_to_v_ok ? \"true\" : \"false\");\n    } else {\n        shmem_child_log(\"shmem_child: phys == METAL_BAD_OFFSET\");\n    }\n\n    metal_io_finish(io);\n    shmem_child_log(\"shmem_child: finished, returning NULL\");\n    return NULL;\n}\n"
}