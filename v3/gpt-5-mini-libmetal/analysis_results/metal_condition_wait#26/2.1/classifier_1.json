{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_condition_wait:\n```c\nint metal_condition_wait(struct metal_condition *cv,\n\t\t\t\t       metal_mutex_t *m)\n{\n\tuintptr_t tmpmptr = 0, mptr = (uintptr_t)m;\n\tint v = 0;\n\n\t/* Check if the mutex has been acquired */\n\tif (!cv || !m || !metal_mutex_is_acquired(m))\n\t\treturn -EINVAL;\n\n\tif (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {\n\t\tif (tmpmptr != mptr)\n\t\t\treturn -EINVAL;\n\t}\n\n\tv = atomic_load(&cv->wakeups);\n\tatomic_fetch_add(&cv->waiters, 1);\n\n\t/* Release the mutex before sleeping. */\n\tmetal_mutex_release(m);\n\tsyscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);\n\tatomic_fetch_sub(&cv->waiters, 1);\n\t/* Acquire the mutex after it's waken up. */\n\tmetal_mutex_acquire(m);\n\n\treturn 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {\n\t\t\tif (tmpmptr != mptr)\n\t\t\t\treturn -EINVAL;\n\t\t}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The fragment relies on the well-defined semantics of atomic_compare_exchange_strong: it returns true if the atomic held the expected value (tmpmptr==0) and replaces it with mptr; otherwise it stores the current atomic value into tmpmptr and returns false. All branches are reachable: (1) cv->mptr == 0 \u2192 compare_exchange_strong returns true (inner block skipped); (2) cv->mptr == mptr \u2192 compare_exchange_strong returns false but tmpmptr is set to mptr, so the inner condition (tmpmptr != mptr) is false and execution continues; (3) cv->mptr != 0 and != mptr \u2192 compare_exchange_strong returns false and tmpmptr != mptr is true, so return -EINVAL is executed. Therefore there is no unreachable code in this fragment."
}