{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe typedef for the IRQ handler uses a plain void * parameter: typedef int (*metal_irq_handler)(int irq, void *arg); metal_irq_register merely stores and forwards this arg (irq_data->arg = arg) and does not modify the pointed-to object. If the handler does not need to modify the data pointed to by arg, then the pointer should be const-qualified (const void *arg). Therefore the current typedef fails to qualify the pointer as const where it appears to be possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_register:\n```c\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_register code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Keep the original typedef (the reported violation) unchanged. */\ntypedef int (*metal_irq_handler)(int irq, void *arg);\n\n/* Minimal forward declarations so this file compiles when included in the\n   larger project. Actual definitions are expected to be provided elsewhere. */\nstruct metal_irq_controller;\nstruct metal_irq {\n    metal_irq_handler hd;\n    void *arg;\n};\n\nstruct metal_irq_controller {\n    int (*irq_register)(struct metal_irq_controller *, int, metal_irq_handler, void *);\n    struct metal_irq *irqs;\n    int irq_base;\n};\n\n/* External lookup function (implemented elsewhere in the project). */\nextern struct metal_irq_controller *metal_irq_get_controller(int irq);\n\n/* Probe function: append formatted logs to /tmp/logs/173.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/173.txt\", \"a\");\n    if (f == NULL) {\n        /* Attempt to create the directory and retry. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/173.txt\", \"a\");\n    }\n    if (f == NULL) {\n        /* If still failing, give up silently to avoid changing program flow. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_irq_register(int irq,\n                       metal_irq_handler irq_handler,\n                       void *arg)\n{\n    struct metal_irq_controller *cntr;\n    struct metal_irq *irq_data;\n\n    probe_log(\"ENTER metal_irq_register: irq=%d, irq_handler=%p, arg=%p\", irq, (void *)irq_handler, arg);\n\n    cntr = metal_irq_get_controller(irq);\n    probe_log(\"metal_irq_get_controller returned: cntr=%p\", (void *)cntr);\n\n    if (cntr == NULL) {\n        probe_log(\"RETURN -EINVAL: controller is NULL for irq=%d\", irq);\n        return -EINVAL;\n    }\n\n    if (cntr->irq_register != NULL) {\n        probe_log(\"Delegating to controller->irq_register: controller=%p, irq=%d, handler=%p, arg=%p\",\n                  (void *)cntr, irq, (void *)irq_handler, arg);\n        int ret = cntr->irq_register(cntr, irq, irq_handler, arg);\n        probe_log(\"Controller irq_register returned: ret=%d (controller=%p, irq=%d)\", ret, (void *)cntr, irq);\n        return ret;\n    }\n\n    if (cntr->irqs == NULL) {\n        probe_log(\"RETURN -EINVAL: controller->irqs is NULL (controller=%p) for irq=%d\", (void *)cntr, irq);\n        return -EINVAL;\n    }\n\n    irq_data = &cntr->irqs[irq - cntr->irq_base];\n    probe_log(\"Computed irq_data: irq_data=%p, index=%d (irq=%d, irq_base=%d)\",\n              (void *)irq_data, irq - cntr->irq_base, irq, cntr->irq_base);\n\n    irq_data->hd = irq_handler;\n    probe_log(\"Assigned irq_data->hd = %p (irq_data=%p)\", (void *)irq_handler, (void *)irq_data);\n\n    irq_data->arg = arg;\n    probe_log(\"Assigned irq_data->arg = %p (irq_data=%p)\", arg, (void *)irq_data);\n\n    probe_log(\"RETURN 0: registration successful (irq=%d, controller=%p, irq_data=%p)\", irq, (void *)cntr, (void *)irq_data);\n    return 0;\n}\n"
}