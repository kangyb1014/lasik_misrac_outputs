{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (metal_bus_find(lbus->bus_name, &bus) == 0)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "From this fragment alone no definite violation can be determined, because the rule applies to declarations (pointer types) not to a single use. The call itself (metal_bus_find(lbus->bus_name, &bus)) is fine if metal_bus_find accepts a const-qualified parameter (e.g. int metal_bus_find(const char *name, struct metal_bus **bus)). A violation would occur if struct linux_bus declares bus_name as 'char *bus_name' but the string is never modified \u2014 it should then be declared 'const char *bus_name' to comply with MISRA C 2023 Rule 8.13."
}