{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n```\nFocus on the above code fragment and judge whether it violates the rule 14.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Assuming the for_each_linux_bus(lbus) macro expands to a conventional single-loop-counter for loop (for (lbus = first; lbus != NULL; lbus = lbus->next)) where only the loop counter lbus is initialized/used/updated by the clauses and lbus is not modified in the loop body, this fragment does not violate MISRA C 2023 Rule 14.2. However, a violation would occur if any of the following were true: the macro expands so the second or third clause has persistent side effects (e.g. calls a function that modifies program state), the clauses use or modify objects other than the single loop counter, the macro introduces additional loop counters, or the loop body (or functions called from it, e.g. metal_bus_unregister) modifies any object that is used by the loop\u2019s second or third clause. Example concrete violation scenario: if for_each_linux_bus expands to something whose second clause calls a function that reads an iterator object that is modified by metal_bus_unregister (a persistent side effect), then the second clause would be using an object modified in the body \u2014 violating Rule 14.2."
}