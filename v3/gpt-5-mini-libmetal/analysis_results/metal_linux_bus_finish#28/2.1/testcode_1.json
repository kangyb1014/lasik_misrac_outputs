{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_bus_register the code tests if (metal_bus_find(bus->name, NULL) == 0) return -EEXIST;. However metal_bus_find only returns 0 when it finds a matching bus AND the 'result' pointer is non-NULL (it does: if (strcmp(...) == 0 && result) { *result = bus; return 0; }). Because NULL is passed, metal_bus_find can never return 0, so the conditional is never true and the return -EEXIST; is unreachable. This constitutes a violation of MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_finish code that contains useful probe functions that print useful logs to a file \"/tmp/logs/281.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_finish as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_finish code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/281.txt.\n * If the file cannot be opened, the probe silently returns to avoid\n * changing program behavior.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/281.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid metal_linux_bus_finish(void)\n{\n    struct linux_bus *lbus;\n    struct metal_bus *bus;\n\n    for_each_linux_bus(lbus) {\n        const char *name = lbus ? lbus->bus_name : \"(null)\";\n\n        probe_log(\"[metal_linux_bus_finish] iteration: lbus=%p, bus_name=\\\"%s\\\"\", (void *)lbus, name);\n\n        /* Call metal_bus_find and log the arguments and return value. */\n        int ret = metal_bus_find(name, &bus);\n        probe_log(\"[metal_linux_bus_finish] metal_bus_find(name=\\\"%s\\\", result_ptr=%p) -> %d; found_bus=%p\",\n                  name, (void *)&bus, ret, (void *)bus);\n\n        if (ret == 0) {\n            probe_log(\"[metal_linux_bus_finish] metal_bus_unregister(bus=%p) about to be called\", (void *)bus);\n            metal_bus_unregister(bus);\n            probe_log(\"[metal_linux_bus_finish] metal_bus_unregister(bus=%p) returned\", (void *)bus);\n        } else {\n            probe_log(\"[metal_linux_bus_finish] metal_bus_find did not return 0 for name=\\\"%s\\\" (ret=%d)\", name, ret);\n        }\n    }\n}\n"
}