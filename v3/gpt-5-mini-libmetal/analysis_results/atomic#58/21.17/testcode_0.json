{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code negates the return value of pthread_create: error = -pthread_create(&tid_p[i], NULL, child, arg); If pthread_create fails it returns a positive errno; negating it makes 'error' negative. Later the code calls strerror(error) in the error path (metal_log(..., strerror(error))). strerror() expects a non\u2011negative error number and may index into an internal array; passing a negative value can lead to an out\u2011of\u2011bounds access of the error message table and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified atomic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/589.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of atomic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of atomic:\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified atomic code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <stdatomic.h>\n#include <errno.h>\n\n/* Probe logger: appends timestamped messages to /tmp/logs/589.txt\n * This preserves the original logic but records control flow and state\n * for debugging the reported error-negation/strerror scenario.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) == NULL) {\n        /* fallback: still attempt to write */\n        fprintf(f, \"[unknown-time]\");\n    } else {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d]\",\n                tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n                tm.tm_hour, tm.tm_min, tm.tm_sec);\n    }\n\n    fprintf(f, \"[pid:%ld] \", (long)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int atomic(void)\n{\n    const int threads = 10;\n    atomic_int counter = ATOMIC_VAR_INIT(0);\n    int value, error;\n\n    /* Log entry and initial state */\n    probe_log(\"atomic: entry threads=%d counter_addr=%p initial_counter=%d\",\n              threads, (void *)&counter, (int)atomic_load(&counter));\n\n    error = metal_run(threads, atomic_thread, &counter);\n\n    /* Log result of metal_run to capture possible positive errno/negative handling */\n    probe_log(\"atomic: metal_run returned error=%d (0 means success)\", error);\n\n    if (!error) {\n        value = atomic_load(&counter);\n        probe_log(\"atomic: after run raw_counter=%d\", value);\n\n        value -= atomic_test_count * threads;\n        probe_log(\"atomic: computed delta value=%d (after subtracting test_count * threads)\", value);\n\n        if (value) {\n            metal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n                      value);\n            probe_log(\"atomic: mismatch detected, setting error to -EINVAL (%d)\", -EINVAL);\n            error = -EINVAL;\n        }\n    }\n\n    probe_log(\"atomic: exit returning error=%d\", error);\n    return error;\n}\n"
}