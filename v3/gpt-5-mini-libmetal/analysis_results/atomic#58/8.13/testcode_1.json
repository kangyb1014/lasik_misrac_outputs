{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_finish_threads(ts_created, (void *)tids) passes a non-const void * for an array that is not modified. If metal_finish_threads does not modify the tids array (i.e. its parameter should be const pthread_t * or const void *), then passing a non-const pointer (and the explicit cast to void *) violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible. (If metal_finish_threads actually modifies the tids array, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified atomic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/583.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of atomic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of atomic:\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified atomic code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdatomic.h>\n#include <errno.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/583.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int atomic(void)\n{\n    const int threads = 10;\n    atomic_int counter = ATOMIC_VAR_INIT(0);\n    int value, error;\n\n    /* Log entry and initial state */\n    probe_log(\"atomic(): entry, threads=%d, &counter=%p, initial_counter=%d\",\n              threads, (const void *)&counter, atomic_load(&counter));\n\n    /* Log that we are about to pass a non-const pointer to the thread starter. */\n    probe_log(\"atomic(): about to call metal_run(threads=%d, atomic_thread, &counter (non-const pointer))\",\n              threads);\n\n    error = metal_run(threads, atomic_thread, &counter);\n\n    probe_log(\"atomic(): returned from metal_run, error=%d\", error);\n\n    if (!error) {\n        value = atomic_load(&counter);\n        probe_log(\"atomic(): loaded counter after threads, counter=%d, atomic_test_count=%d, threads=%d\",\n                  value, atomic_test_count, threads);\n\n        value -= atomic_test_count * threads;\n        probe_log(\"atomic(): delta computed=%d\", value);\n\n        if (value) {\n            metal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n                      value);\n            probe_log(\"atomic(): mismatch detected, delta=%d, setting error=-EINVAL\", value);\n            error = -EINVAL;\n        } else {\n            probe_log(\"atomic(): counter matches expected value\");\n        }\n    }\n\n    probe_log(\"atomic(): exit returning error=%d\", error);\n    return error;\n}\n"
}