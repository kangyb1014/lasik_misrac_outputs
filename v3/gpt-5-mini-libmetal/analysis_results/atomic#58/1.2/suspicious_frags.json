{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of atomic:\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function atomic:\nstatic const int atomic_test_count = 1000\n...\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments that clearly use compiler language extensions as defined by typical compiler documentation. Specific considerations:\n\n- atomic_int, ATOMIC_VAR_INIT, atomic_load, atomic_fetch_add: these are the standard C11 stdatomic.h facilities (not compiler-specific extensions). The code uses the standard atomic API rather than compiler-only builtins or nonstandard keywords.\n\n- Function signatures and returns (static int atomic(void), static void *atomic_thread(void *arg), return NULL) use standard C constructs.\n\n- There are no uses of known compiler extensions such as: __attribute__ annotations, __asm or asm statements, statement expressions ({ ... }) used as expressions, typeof, nested functions, unnamed/anonymous language extensions, __extension__ pragma, compiler-specific pragmas, or other vendor-specific keywords (e.g. __inline__ vs inline) in the provided code.\n\n- The external symbols (metal_run, metal_log, EINVAL, atomic_test_count) are library symbols or macros; their presence does not by itself indicate a language extension. If those library headers or the implementation of the atomic helpers are implemented via compiler-specific extensions, that would need to be checked against the compiler documentation \u2014 but that information is not present in the snippets provided.\n\nGiven only the provided code, there are no explicit uses of compiler-documented language extensions to report. If you have the included headers or build/compiler configuration (e.g., use of a non-C11 compiler or vendor-provided stdatomic shim), provide them and I can re-evaluate for extensions introduced there."
}