{
  "user_message": "An agent A claimed that the following metal_add_page_size code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_add_page_size.\n```c\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nA violation occurs if the string literal is passed to a non-const pointer parameter. For example, if metal_fmt is declared as\n    char *metal_fmt(char *fmt)\nor if the log handler is declared as\n    int (*log_handler)(int, char *, ...)\nthen the literal \"skipped page size %ld - overflow\\n\" is passed (directly or via metal_fmt) to a char * parameter. That makes a pointer to a non-const-qualified type point at a string literal, which contravenes MISRA C 2023 Rule 8.13. If, however, metal_fmt and the log_handler take/return const char * (e.g. const char *metal_fmt(const char *fmt) and int (*log_handler)(int, const char *, ...)), there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nprobe:entry fmt_ptr=(nil) fmt=\"(null)\" path_ptr=0x7f9780c49a6f path=\"/tmp\" index=0 size=4096 shift=12 mmap_flags=0\nprobe:after_add fmt_ptr=0x7f9780c49a2c fmt=\"added page size %ld @%s\n\" path_ptr=0x7f9780c49a6f path=\"/tmp\" index=0 size=4096 shift=12 mmap_flags=0\nprobe:entry fmt_ptr=(nil) fmt=\"(null)\" path_ptr=(nil) path=\"(null)\" index=1 size=2097152 shift=21 mmap_flags=1409548288\nprobe:invalid_args_before_metal_log fmt_ptr=0x7f9780c499e8 fmt=\"skipped page size %ld - invalid args\n\" path_ptr=(nil) path=\"(null)\" index=1 size=2097152 shift=21 mmap_flags=1409548288\nprobe:entry fmt_ptr=(nil) fmt=\"(null)\" path_ptr=(nil) path=\"(null)\" index=1 size=1073741824 shift=30 mmap_flags=2013528064\nprobe:invalid_args_before_metal_log fmt_ptr=0x7f9780c499e8 fmt=\"skipped page size %ld - invalid args\n\" path_ptr=(nil) path=\"(null)\" index=1 size=1073741824 shift=30 mmap_flags=2013528064\nprobe:entry fmt_ptr=(nil) fmt=\"(null)\" path_ptr=0x5635ed69da37 path=\"/tmp\" index=0 size=4096 shift=12 mmap_flags=0\nprobe:after_add fmt_ptr=0x5635ed69d9f4 fmt=\"added page size %ld @%s\n\" path_ptr=0x5635ed69da37 path=\"/tmp\" index=0 size=4096 shift=12 mmap_flags=0\nprobe:entry fmt_ptr=(nil) fmt=\"(null)\" path_ptr=(nil) path=\"(null)\" index=1 size=2097152 shift=21 mmap_flags=1409548288\nprobe:invalid_args_before_metal_log fmt_ptr=0x5635ed69d9b0 fmt=\"skipped page size %ld - invalid args\n\" path_ptr=(nil) path=\"(null)\" index=1 size=2097152 shift=21 mmap_flags=1409548288\nprobe:entry fmt_ptr=(nil) fmt=\"(null)\" path_ptr=(nil) path=\"(null)\" index=1 size=1073741824 shift=30 mmap_flags=2013528064\nprobe:invalid_args_before_metal_log fmt_ptr=0x5635ed69d9b0 fmt=\"skipped page size %ld - invalid args\n\" path_ptr=(nil) path=\"(null)\" index=1 size=1073741824 shift=30 mmap_flags=2013528064\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_add_page_size:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's scenario is correct in principle but the report as stated is not definitely provable from the code shown. MISRA C 2023 R8.13 requires pointers to be const-qualified when possible, so passing a string literal to a function parameter declared as char * (non-const) would be a violation. In this function the string literals are passed through the metal_log macro which expands to _metal.common.log_handler(level, metal_fmt(fmt), ...). Whether a violation actually occurs depends on the declarations of metal_fmt and of the log_handler: if they are declared to accept/return const char * (e.g. const char *metal_fmt(const char *), int (*log_handler)(int, const char *, ...)) then there is no violation; if either is declared to use non-const char * then the call will violate R8.13. The provided code and macro do not include those prototypes, so you cannot conclude a definite violation from the snippet alone. Recommendation: ensure metal_fmt and the log handler use const char * for format strings to be MISRA-compliant."
}