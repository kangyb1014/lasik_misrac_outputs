{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_close:\n```c\nstatic void metal_linux_dev_close(struct metal_bus *bus,\n\t\t\t\t  struct metal_device *device)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\tldev->ldrv->dev_close(lbus, ldev);\n\tmetal_list_del(&device->node);\n\tfree(ldev);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void metal_linux_dev_close(struct metal_bus *bus,\n\t\t\t\t\t  struct metal_device *device)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The 'device' parameter is modified (metal_list_del(&device->node) and free(ldev)), so it cannot be const. However the 'bus' parameter is not modified in this function (it is only passed through to to_linux_bus() and ldev->ldrv->dev_close()). If those callees do not require a non-const pointer, 'bus' should be declared as const struct metal_bus *bus. Because 'bus' appears to be used read-only here, the function signature omits a possible const qualification \u2014 a violation of MISRA C 2023 Rule 8.13 unless the called functions require a mutable pointer."
}