{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_log expands to a call through the function pointer _metal.common.log_handler. If the installed log handler function (e.g. void my_log_handler(...)) calls metal_log, the call sequence becomes: my_log_handler(...) -> metal_log(...) (macro expansion) -> _metal.common.log_handler(...) -> my_log_handler(...). That is an indirect self-call of my_log_handler, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_driver code that contains useful probe functions that print useful logs to a file \"/tmp/logs/366.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_driver as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_driver:\n```c\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n\t\t\t\t    struct linux_driver *ldrv)\n{\n\tchar command[256];\n\tint ret;\n\n\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\n\t/* Try probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* Try sudo probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* If all else fails... */\n\treturn ldrv->sdrv ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_driver code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <unistd.h>\n\n/*\n * Probe logging helper used to capture control flow and state to a file.\n * IMPORTANT: This function intentionally does NOT call metal_log or any\n * logging infrastructure that might dispatch to a user-installed\n * log handler. Calling metal_log here could trigger the very recursion\n * we are trying to observe. Use plain stdio to write to a file.\n */\nstatic void probe_log_state(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/366.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* write a simple prefix with pid to help identify the process */\n    fprintf(f, \"[pid=%d] \", (int)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n                                    struct linux_driver *ldrv)\n{\n    char command[256];\n    int ret;\n\n    probe_log_state(\"ENTER metal_linux_probe_driver: lbus=%p, ldrv=%p, drv_name=%s, mod_name=%s\",\n                    (void *)lbus, (void *)ldrv,\n                    ldrv && ldrv->drv_name ? ldrv->drv_name : \"(null)\",\n                    ldrv && ldrv->mod_name ? ldrv->mod_name : \"(null)\");\n\n    ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n    probe_log_state(\"after initial sysfs_open_driver: sdrv=%p\", (void *)ldrv->sdrv);\n\n    /* Try probing the module and then open the driver. */\n    if (!ldrv->sdrv) {\n        ret = snprintf(command, sizeof(command),\n                       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n        probe_log_state(\"snprintf returned %d (buffer_size=%zu) command=\\\"%s\\\"\",\n                        ret, sizeof(command), command);\n        if (ret >= (int)sizeof(command))\n            return -EOVERFLOW;\n        ret = system(command);\n        probe_log_state(\"system(command) returned %d for command=\\\"%s\\\"\",\n                        ret, command);\n        if (ret < 0) {\n            /* Keep original behavior: use metal_log as before. */\n            metal_log(METAL_LOG_WARNING,\n                      \"%s: executing system command '%s' failed.\\n\",\n                      __func__, command);\n            probe_log_state(\"metal_log invoked for system failure (ret=%d)\", ret);\n        }\n        ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n        probe_log_state(\"after second sysfs_open_driver: sdrv=%p\", (void *)ldrv->sdrv);\n    }\n\n    /* Try sudo probing the module and then open the driver. */\n    if (!ldrv->sdrv) {\n        ret = snprintf(command, sizeof(command),\n                       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n        probe_log_state(\"snprintf(sudo) returned %d (buffer_size=%zu) command=\\\"%s\\\"\",\n                        ret, sizeof(command), command);\n        if (ret >= (int)sizeof(command))\n            return -EOVERFLOW;\n        ret = system(command);\n        probe_log_state(\"system(sudo) returned %d for command=\\\"%s\\\"\",\n                        ret, command);\n        if (ret < 0) {\n            metal_log(METAL_LOG_WARNING,\n                      \"%s: executing system command '%s' failed.\\n\",\n                      __func__, command);\n            probe_log_state(\"metal_log invoked for sudo system failure (ret=%d)\", ret);\n        }\n        ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n        probe_log_state(\"after third sysfs_open_driver: sdrv=%p\", (void *)ldrv->sdrv);\n    }\n\n    /* If all else fails... */\n    probe_log_state(\"EXIT metal_linux_probe_driver: returning %d (sdrv=%p)\",\n                    ldrv->sdrv ? 0 : -ENODEV, (void *)ldrv->sdrv);\n    return ldrv->sdrv ? 0 : -ENODEV;\n}\n"
}