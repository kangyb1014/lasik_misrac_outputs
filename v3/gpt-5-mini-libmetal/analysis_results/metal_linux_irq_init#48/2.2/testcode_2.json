{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(pfds, 0, MAX_IRQS * sizeof(struct pollfd)); is redundant: before poll() the code explicitly sets pfds[0] and each pfds[1..j-1] used (j is computed) and poll() is invoked with the count j. Removing this memset would not change observable behaviour when MAX_IRQS <= the allocated count (FD_SETSIZE), so the memset constitutes executed dead code and thus violates MISRA C 2023 Rule 2.2. (Note: if MAX_IRQS > FD_SETSIZE the memset would write past the allocated buffer and introduce undefined behaviour \u2014 in that case the problem is a buffer overflow rather than dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/482.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <stdbool.h>\n#include <sys/eventfd.h>\n#include <pthread.h>\n\n/* Probe helpers: append logs to /tmp/logs/482.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_dump_bytes(const void *ptr, size_t n)\n{\n    if (ptr == NULL || n == 0)\n        return;\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (!f)\n        return;\n    const unsigned char *b = (const unsigned char *)ptr;\n    size_t i, max = (n < 64u) ? n : 64u; /* limit dump to first 64 bytes */\n    fprintf(f, \"dump %zu bytes (first %zu):\", n, max);\n    for (i = 0; i < max; ++i) {\n        fprintf(f, \" %02x\", b[i]);\n    }\n    if (n > max)\n        fprintf(f, \" ...\");\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* The function keeps original logic but adds probes to capture control flow and state. */\nint metal_linux_irq_init(void)\n{\n    int ret;\n\n    probe_log(\"metal_linux_irq_init: entry\");\n\n    /* Log state before the memset */\n    probe_log(\"About to memset(&irqs, 0, %zu), address=%p\", sizeof(irqs), (void *)&irqs);\n    probe_dump_bytes(&irqs, (sizeof(irqs) < 64u) ? sizeof(irqs) : 64u);\n\n    memset(&irqs, 0, sizeof(irqs));\n\n    /* Log state after the memset */\n    probe_log(\"After memset(&irqs, 0, %zu)\", sizeof(irqs));\n    probe_dump_bytes(&irqs, (sizeof(irqs) < 64u) ? sizeof(irqs) : 64u);\n\n    irq_notify_fd = eventfd(0, EFD_CLOEXEC);\n    probe_log(\"eventfd returned: %d\", irq_notify_fd);\n    if (irq_notify_fd < 0) {\n        probe_log(\"eventfd failed: %s\", strerror(errno));\n        metal_log(METAL_LOG_ERROR,\n                  \"Failed to create eventfd for IRQ handling.\\n\");\n        probe_log(\"metal_linux_irq_init: returning -EAGAIN\");\n        return -EAGAIN;\n    }\n\n    probe_log(\"Calling metal_mutex_init(&irq_lock)\");\n    metal_mutex_init(&irq_lock);\n    probe_log(\"metal_mutex_init returned\");\n\n    irq_handling_stop = false;\n    probe_log(\"irq_handling_stop set to false\");\n\n    ret = metal_irq_register_controller(&linux_irq_cntr);\n    probe_log(\"metal_irq_register_controller returned: %d\", ret);\n    if (ret < 0) {\n        probe_log(\"metal_irq_register_controller failed, returning -EINVAL\");\n        metal_log(METAL_LOG_ERROR,\n                  \"Linux IRQ controller failed to register.\\n\");\n        return -EINVAL;\n    }\n\n    ret = pthread_create(&irq_pthread, NULL,\n                         metal_linux_irq_handling, NULL);\n    probe_log(\"pthread_create returned: %d\", ret);\n    if (ret != 0) {\n        probe_log(\"pthread_create failed, returning -EAGAIN\");\n        metal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n                  ret);\n        return -EAGAIN;\n    }\n\n    probe_log(\"metal_linux_irq_init: success, returning 0\");\n    return 0;\n}\n"
}