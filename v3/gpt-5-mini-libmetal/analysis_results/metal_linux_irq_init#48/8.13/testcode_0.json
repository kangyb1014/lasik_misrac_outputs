{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_irq_allocate the local pointer 'struct metal_irq_controller *cntr;' is only used to read fields (cntr->irq_base, cntr->irq_num) after being set via metal_container_of. Because the pointed-to object is not modified through cntr in that function, the pointer could and should be declared as pointing to a const-qualified type (const struct metal_irq_controller *cntr). Therefore the current declaration violates MISRA C 2023 Rule 8.13. Note: other places (e.g. metal_irq_register_controller where cntr->irq_base is assigned) must remain non-const, but this local variable in metal_irq_allocate should be const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helpers: append logs to /tmp/logs/483.txt to capture control flow and\n * relevant state for investigating the Rule 8.13 violation scenario. These\n * helpers are non-intrusive and do not change program logic. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/483.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Log selected fields of the linux IRQ controller. We attempt to log the\n * commonly-present fields irq_base and irq_num. If those fields exist in the\n * project definition of struct metal_irq_controller this will capture them;\n * otherwise the build system will surface a compile error which indicates a\n * mismatch between assumptions and the project headers. */\nstatic void probe_log_linux_irq_cntr_state(const char *stage)\n{\n    /* The symbol linux_irq_cntr is expected to be available in the same\n     * translation unit as the original code. We log its address and known\n     * integer fields used in the violation scenario. */\n    probe_log(\"[probe] stage=%s: linux_irq_cntr addr=%p\", stage, (void *)&linux_irq_cntr);\n\n    /* Attempt to log irq_base and irq_num for evidence that the controller's\n     * fields are only read (no modification here). Cast to long for robust\n     * printing across typical integer sizes. */\n    probe_log(\"[probe] stage=%s: linux_irq_cntr.irq_base=%ld, linux_irq_cntr.irq_num=%ld\",\n              stage,\n              (long)linux_irq_cntr.irq_base,\n              (long)linux_irq_cntr.irq_num);\n}\n\nint metal_linux_irq_init(void)\n{\n    int ret;\n\n    /* Log entry and zeroing step */\n    probe_log(\"[probe] enter metal_linux_irq_init: beginning memset of irqs\");\n\n    memset(&irqs, 0, sizeof(irqs));\n\n    /* Log prior to creating the eventfd so we capture success/failure and FD */\n    probe_log(\"[probe] before eventfd call\");\n    irq_notify_fd = eventfd(0, EFD_CLOEXEC);\n    if (irq_notify_fd < 0) {\n        probe_log(\"[probe] eventfd failed: irq_notify_fd=%d\", irq_notify_fd);\n        metal_log(METAL_LOG_ERROR,\n                  \"Failed to create eventfd for IRQ handling.\\n\");\n        return  -EAGAIN;\n    }\n\n    probe_log(\"[probe] eventfd created: irq_notify_fd=%d\", irq_notify_fd);\n\n    metal_mutex_init(&irq_lock);\n    irq_handling_stop = false;\n\n    /* Log controller state before attempting to register. This captures the\n     * controller fields that are relevant to the reported violation scenario. */\n    probe_log_linux_irq_cntr_state(\"before_register\");\n\n    ret = metal_irq_register_controller(&linux_irq_cntr);\n    probe_log(\"[probe] metal_irq_register_controller returned: ret=%d\", ret);\n\n    /* Log controller state after registration to record any changes done by\n     * the register function. For the violation scenario we expect that\n     * metal_irq_allocate (called internally in registration) only read fields\n     * such as irq_base and irq_num; this post-register snapshot helps\n     * demonstrate that. */\n    probe_log_linux_irq_cntr_state(\"after_register\");\n\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR,\n                  \"Linux IRQ controller failed to register.\\n\");\n        return -EINVAL;\n    }\n    ret = pthread_create(&irq_pthread, NULL,\n                         metal_linux_irq_handling, NULL);\n    if (ret != 0) {\n        probe_log(\"[probe] pthread_create failed: ret=%d\", ret);\n        metal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n                  ret);\n        return -EAGAIN;\n    }\n\n    probe_log(\"[probe] metal_linux_irq_init completed successfully\");\n\n    return 0;\n}\n"
}