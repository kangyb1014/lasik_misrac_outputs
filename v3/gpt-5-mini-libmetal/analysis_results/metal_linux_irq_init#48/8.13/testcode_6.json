{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_irq_register_controller the loop iterator is declared as a non-const pointer (struct metal_list *node) and used only for read/traversal in the call metal_list_for_each(&irq_cntrs, node). The pointer could be declared as const struct metal_list *node (and the iteration macro adjusted to accept a const pointer) because the list elements are not modified in this function. Therefore the code fails to qualify the pointer with const where possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/eventfd.h>\n\n/* Probe logger: append human-readable trace entries to /tmp/logs/483.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    int fd = open(\"/tmp/logs/483.txt\", O_CREAT | O_WRONLY | O_APPEND, 0644);\n    if (fd < 0) {\n        /* If logging fails, silently return to avoid changing logic */\n        return;\n    }\n\n    char buf[512];\n    ssize_t len = 0;\n    va_list ap;\n    va_start(ap, fmt);\n    len = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    if (len < 0) {\n        close(fd);\n        return;\n    }\n\n    /* Ensure there is a newline for readability */\n    if ((size_t)len >= sizeof(buf) - 1) {\n        /* Truncated; guarantee newline at end */\n        buf[sizeof(buf) - 2] = '\\n';\n        buf[sizeof(buf) - 1] = '\\0';\n        len = strlen(buf);\n    } else if (buf[len - 1] != '\\n') {\n        if (len + 1 < (ssize_t)sizeof(buf)) {\n            buf[len] = '\\n';\n            buf[len + 1] = '\\0';\n            ++len;\n        }\n    }\n\n    /* Ignore write errors to avoid affecting program flow */\n    (void)write(fd, buf, (size_t)len);\n    close(fd);\n}\n\n/* The original function with logging probes inserted. The logic is preserved. */\nint metal_linux_irq_init(void)\n{\n    int ret;\n\n    probe_log(\"ENTER: metal_linux_irq_init\");\n\n    memset(&irqs, 0, sizeof(irqs));\n    probe_log(\"memset: irqs cleared (size=%zu)\", sizeof(irqs));\n\n    probe_log(\"calling eventfd for IRQ handling\");\n    irq_notify_fd = eventfd(0, EFD_CLOEXEC);\n    probe_log(\"eventfd returned: %d (errno=%d)\", irq_notify_fd, errno);\n    if (irq_notify_fd < 0) {\n        probe_log(\"ERROR: Failed to create eventfd for IRQ handling. errno=%d\", errno);\n        metal_log(METAL_LOG_ERROR,\n                  \"Failed to create eventfd for IRQ handling.\\n\");\n        probe_log(\"EXIT: metal_linux_irq_init -> -EAGAIN\");\n        return  -EAGAIN;\n    }\n\n    probe_log(\"initializing irq_lock\");\n    metal_mutex_init(&irq_lock);\n    irq_handling_stop = false;\n\n    probe_log(\"registering linux IRQ controller\");\n    ret = metal_irq_register_controller(&linux_irq_cntr);\n    probe_log(\"metal_irq_register_controller returned: %d\", ret);\n    if (ret < 0) {\n        probe_log(\"ERROR: Linux IRQ controller failed to register (ret=%d)\", ret);\n        metal_log(METAL_LOG_ERROR,\n                  \"Linux IRQ controller failed to register.\\n\");\n        probe_log(\"EXIT: metal_linux_irq_init -> -EINVAL\");\n        return -EINVAL;\n    }\n\n    probe_log(\"creating IRQ handling thread\");\n    ret = pthread_create(&irq_pthread, NULL,\n                         metal_linux_irq_handling, NULL);\n    probe_log(\"pthread_create returned: %d\", ret);\n    if (ret != 0) {\n        probe_log(\"ERROR: Failed to create IRQ thread: %d\", ret);\n        metal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n                  ret);\n        probe_log(\"EXIT: metal_linux_irq_init -> -EAGAIN\");\n        return -EAGAIN;\n    }\n\n    probe_log(\"EXIT: metal_linux_irq_init -> 0\");\n    return 0;\n}\n"
}