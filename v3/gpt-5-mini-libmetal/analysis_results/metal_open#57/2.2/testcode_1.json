{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_uio_dev_open when handling a failed open, the call\nmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n          ldev->dev_path, strerror(-result));\nevaluates strerror(-result) but the format string contains only one \"%s\" specifier. The strerror() call (and its result) is therefore computed but never used; removing that call would not change program behaviour (other than eliminating an unnecessary function evaluation). This constitutes executed code whose removal would not affect program behaviour and thus violates MISRA C 2023 Rule 2.2. A fix is to either include a second \"%s\" in the format to use the strerror result or remove the stray strerror() argument.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/572.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/mman.h>\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <unistd.h>\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* preserve original behavior: reject NULL or empty path */\n    if (!path || !strlen(path)) {\n        /* Log the control flow and state to help reproduce scenarios */\n        FILE *log = fopen(\"/tmp/logs/572.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"metal_open: invalid path (path=%p) -> returning -EINVAL\\n\", (void *)path);\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    if (fd < 0) {\n        /* capture errno immediately (it reflects the open/shm_open result) */\n        int saved_errno = errno;\n\n        /* Log details including strerror for reproduction/evidence */\n        FILE *log = fopen(\"/tmp/logs/572.txt\", \"a\");\n        if (log) {\n            fprintf(log,\n                    \"metal_open: open failed: path='%s' shm=%d fd=%d errno=%d (%s)\\n\",\n                    path, shm, fd, saved_errno, strerror(saved_errno));\n            fclose(log);\n        }\n\n        /* restore errno so the original return expression behavior is preserved */\n        errno = saved_errno;\n    } else {\n        /* successful open: log the success state */\n        FILE *log = fopen(\"/tmp/logs/572.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"metal_open: open succeeded: path='%s' shm=%d fd=%d\\n\", path, shm, fd);\n            fclose(log);\n        }\n    }\n\n    return fd < 0 ? -errno : fd;\n}\n"
}