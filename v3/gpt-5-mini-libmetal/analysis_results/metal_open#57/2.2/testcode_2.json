{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls metal_shmem_open_generic() but assigns its integer return value to the pointer parameter 'result' (result = metal_shmem_open_generic(...);) and then immediately tests the unrelated variable 'error' (if (!error) return error;). The value written by the assignment is never inspected by the subsequent test, so the assignment has no effect on the immediate control flow and is effectively unused/incorrect. This is symptomatic of a wrong variable being used (should be 'error = ...'), and the executed assignment is therefore dead (its removal would not affect the subsequent test).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/572.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/mman.h>\n#include <unistd.h>\n\n/* Probe helper: append control-flow and state information to the log file.\n * This is intentionally minimal and does not alter the return semantics of\n * metal_open (we capture errno before doing any logging that might change it).\n */\nstatic void metal_open_log(const char *stage, const char *path, int shm, int fd, int saved_errno)\n{\n    FILE *f = fopen(\"/tmp/logs/572.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"[metal_open] stage=%s path=%s shm=%d fd=%d saved_errno=%d\\n\",\n            stage, path ? path : \"(null)\", shm, fd, saved_errno);\n    fclose(f);\n}\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    if (!path || !strlen(path)) {\n        /* Log the invalid-path branch; do not change original return behavior. */\n        metal_open_log(\"path_invalid\", path, shm, -1, EINVAL);\n        return -EINVAL;\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    /* Capture errno immediately so subsequent logging (fopen/fprintf) cannot\n     * influence the computed return value. */\n    int saved_errno = errno;\n\n    metal_open_log(\"after_open\", path, shm, fd, saved_errno);\n\n    /* Preserve original semantics: if fd < 0 return -errno (the errno from the\n     * failing open/shm_open); otherwise return fd. Use saved_errno to avoid\n     * relying on a global errno that logging may have clobbered. */\n    return fd < 0 ? -saved_errno : fd;\n}\n"
}