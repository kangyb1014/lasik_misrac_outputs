{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf path is non-NULL but points to a character array that is not guaranteed to be null-terminated (or whose terminator may lie beyond the allocated object), calling strlen(path) can read past the object bounds. Although the NULL check (short-circuited left operand) prevents dereferencing a NULL pointer, there is no protection against running off the end of a non-terminated buffer \u2014 strlen can therefore access beyond the bounds and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <sys/mman.h>\n\n/* Probe logger: append human-readable events to /tmp/logs/579.txt\n * IMPORTANT: do not attempt to print the path contents (%s) because\n * that may read beyond the buffer and would mask the original issue.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/579.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Log entry and pointer value (do not dereference path) */\n    probe_log(\"metal_open: entry; path=%p, shm=%d\", (const void *)path, shm);\n\n    /* Preserve original short-circuit behavior: only call strlen if path != NULL */\n    if (!path) {\n        probe_log(\"metal_open: path is NULL -> returning -EINVAL\");\n        return -EINVAL;\n    }\n\n    probe_log(\"metal_open: about to call strlen(path); path=%p\", (const void *)path);\n    /* This mirrors the original behavior: calling strlen when path is non-NULL. */\n    size_t len = strlen(path);\n    probe_log(\"metal_open: strlen returned %zu for path=%p\", len, (const void *)path);\n\n    if (!len) {\n        probe_log(\"metal_open: path length is 0 -> returning -EINVAL\");\n        return -EINVAL;\n    }\n\n    probe_log(\"metal_open: calling %s for path=%p\", shm ? \"shm_open\" : \"open\", (const void *)path);\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    if (fd < 0) {\n        probe_log(\"metal_open: call failed; fd=%d, errno=%d\", fd, errno);\n    } else {\n        probe_log(\"metal_open: call succeeded; fd=%d\", fd);\n    }\n\n    return fd < 0 ? -errno : fd;\n}\n"
}