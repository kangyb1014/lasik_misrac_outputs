{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strcmp(shmem->name, name) has no prior checks that either pointer is non-NULL or that the strings are NUL-terminated. For example, if metal_shmem_open_generic is called with name == NULL, strcmp will be passed a NULL pointer (or if shmem->name is not NUL-terminated, strcmp will scan past the buffer), leading to out-of-bounds access/UB and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/mman.h>\n\n/*\n * Probe/logging helper: write a formatted message to /tmp/logs/579.txt.\n * Uses only low-level I/O to avoid altering program state significantly.\n */\nstatic void write_probe(const char *fmt, ...)\n{\n    int fd = -1;\n    char buf[512];\n    va_list ap;\n    int n = 0;\n\n    fd = open(\"/tmp/logs/579.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd < 0) {\n        return; /* best-effort logging: silently fail if log can't be opened */\n    }\n\n    va_start(ap, fmt);\n    n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    if (n > 0) {\n        /* write up to the formatted length (truncate if larger than buf) */\n        ssize_t wrote = write(fd, buf, (size_t)(n > (int)sizeof(buf) ? (int)sizeof(buf) : n));\n        (void)wrote; /* ignore write result for logging convenience */\n    }\n\n    close(fd);\n}\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Log entry and basic parameters (pointer value and shm flag) */\n    write_probe(\"[metal_open] enter: path_ptr=%p shm=%d\\n\", (const void *)path, shm);\n\n    /* Preserve original logic while adding probes. Evaluate NULL first to avoid\n     * calling strlen on a NULL pointer (matching original short-circuit behavior).\n     */\n    if (!path) {\n        write_probe(\"[metal_open] early return: path is NULL -> -EINVAL\\n\");\n        return -EINVAL;\n    }\n\n    /* Safe to call strlen now because path is known non-NULL (same behavior as original) */\n    {\n        size_t len = strlen(path);\n        write_probe(\"[metal_open] path non-NULL: strlen=%zu path_ptr=%p\\n\", len, (const void *)path);\n        if (len == 0U) {\n            write_probe(\"[metal_open] early return: path is empty (zero-length) -> -EINVAL\\n\");\n            return -EINVAL;\n        }\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    if (fd < 0) {\n        /* log the failure and errno for reproduction of scenarios */\n        write_probe(\"[metal_open] open/shm_open failed: fd=%d errno=%d (%s) path_ptr=%p\\n\",\n                    fd, errno, strerror(errno), (const void *)path);\n    } else {\n        write_probe(\"[metal_open] open/shm_open succeeded: fd=%d path_ptr=%p\\n\", fd, (const void *)path);\n    }\n\n    return fd < 0 ? -errno : fd;\n}\n"
}