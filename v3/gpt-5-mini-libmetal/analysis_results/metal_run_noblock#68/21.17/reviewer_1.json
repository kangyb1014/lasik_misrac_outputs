{
  "user_message": "An agent A claimed that the following metal_run_noblock code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_run_noblock.\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. The code passes 'error' to strerror after assigning error = -pthread_create(...). On failure pthread_create returns a positive errno; negating it yields a negative value. Passing a negative errnum to strerror is implementation-defined and in some implementations may cause out-of-bounds accesses inside the library (e.g. array indexing of error messages). Therefore this can result in accesses beyond object bounds and violates Rule 21.17. A safe fix is to pass the positive error number (e.g. strerror(-error) or store the pthread_create return in a separate variable and pass that), or use a bounds-checked strerror_r.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_run_noblock ENTRY: threads=10, child=0x564c4636e823, arg=0x7ffeb0a7ad4c, tids=0x7ffeb0a7ac90, threads_out=0x7ffeb0a7ad00\ncreating thread: index=0\npthread_create returned rc=0 for index=0\nafter negation: error=0 (rc=0)\ncreating thread: index=1\npthread_create returned rc=0 for index=1\nafter negation: error=0 (rc=0)\ncreating thread: index=2\npthread_create returned rc=0 for index=2\nafter negation: error=0 (rc=0)\ncreating thread: index=3\npthread_create returned rc=0 for index=3\nafter negation: error=0 (rc=0)\ncreating thread: index=4\npthread_create returned rc=0 for index=4\nafter negation: error=0 (rc=0)\ncreating thread: index=5\npthread_create returned rc=0 for index=5\nafter negation: error=0 (rc=0)\ncreating thread: index=6\npthread_create returned rc=0 for index=6\nafter negation: error=0 (rc=0)\ncreating thread: index=7\npthread_create returned rc=0 for index=7\nafter negation: error=0 (rc=0)\ncreating thread: index=8\npthread_create returned rc=0 for index=8\nafter negation: error=0 (rc=0)\ncreating thread: index=9\npthread_create returned rc=0 for index=9\nafter negation: error=0 (rc=0)\nthreads_out set to 10\nmetal_run_noblock EXIT: returning error=0\nmetal_run_noblock ENTRY: threads=10, child=0x564c4636eddc, arg=0x7ffeb0a7ad5c, tids=0x7ffeb0a7aca0, threads_out=0x7ffeb0a7ad10\ncreating thread: index=0\npthread_create returned rc=0 for index=0\nafter negation: error=0 (rc=0)\ncreating thread: index=1\npthread_create returned rc=0 for index=1\nafter negation: error=0 (rc=0)\ncreating thread: index=2\npthread_create returned rc=0 for index=2\nafter negation: error=0 (rc=0)\ncreating thread: index=3\npthread_create returned rc=0 for index=3\nafter negation: error=0 (rc=0)\ncreating thread: index=4\npthread_create returned rc=0 for index=4\nafter negation: error=0 (rc=0)\ncreating thread: index=5\npthread_create returned rc=0 for index=5\nafter negation: error=0 (rc=0)\ncreating thread: index=6\npthread_create returned rc=0 for index=6\nafter negation: error=0 (rc=0)\ncreating thread: index=7\npthread_create returned rc=0 for index=7\nafter negation: error=0 (rc=0)\ncreating thread: index=8\npthread_create returned rc=0 for index=8\nafter negation: error=0 (rc=0)\ncreating thread: index=9\npthread_create returned rc=0 for index=9\nafter negation: error=0 (rc=0)\nthreads_out set to 10\nmetal_run_noblock EXIT: returning error=0\nmetal_run_noblock ENTRY: threads=10, child=0x564c4636f42e, arg=0x564c46374198, tids=0x7ffeb0a7aca0, threads_out=0x7ffeb0a7ad10\ncreating thread: index=0\npthread_create returned rc=0 for index=0\nafter negation: error=0 (rc=0)\ncreating thread: index=1\npthread_create returned rc=0 for index=1\nafter negation: error=0 (rc=0)\ncreating thread: index=2\npthread_create returned rc=0 for index=2\nafter negation: error=0 (rc=0)\ncreating thread: index=3\npthread_create returned rc=0 for index=3\nafter negation: error=0 (rc=0)\ncreating thread: index=4\npthread_create returned rc=0 for index=4\nafter negation: error=0 (rc=0)\ncreating thread: index=5\npthread_create returned rc=0 for index=5\nafter negation: error=0 (rc=0)\ncreating thread: index=6\npthread_create returned rc=0 for index=6\nafter negation: error=0 (rc=0)\ncreating thread: index=7\npthread_create returned rc=0 for index=7\nafter negation: error=0 (rc=0)\ncreating thread: index=8\npthread_create returned rc=0 for index=8\nafter negation: error=0 (rc=0)\ncreating thread: index=9\npthread_create returned rc=0 for index=9\nafter negation: error=0 (rc=0)\nthreads_out set to 10\nmetal_run_noblock EXIT: returning error=0\nmetal_run_noblock ENTRY: threads=10, child=0x564c4636fc0e, arg=(nil), tids=0x7ffeb0a7ad10, threads_out=0x7ffeb0a7ad08\ncreating thread: index=0\npthread_create returned rc=0 for index=0\nafter negation: error=0 (rc=0)\ncreating thread: index=1\npthread_create returned rc=0 for index=1\nafter negation: error=0 (rc=0)\ncreating thread: index=2\npthread_create returned rc=0 for index=2\nafter negation: error=0 (rc=0)\ncreating thread: index=3\npthread_create returned rc=0 for index=3\nafter negation: error=0 (rc=0)\ncreating thread: index=4\npthread_create returned rc=0 for index=4\nafter negation: error=0 (rc=0)\ncreating t\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. pthread_create returns 0 on success and a positive error number on failure. The code negates that return (error = -pthread_create(...)) and then calls strerror(error) when error is non\u2011zero. strerror (declared in <string.h>) expects a non\u2011negative error number; passing a negative value hands an invalid index into the library's error\u2011message table and may cause out\u2011of\u2011bounds accesses inside strerror on some implementations. That is exactly the situation MISRA C 2023 Rule 21.17 forbids. The fact that the execution log only shows successful thread creations (rc == 0) does not eliminate the defect path. Fixes include storing the pthread_create return in a separate variable and passing the positive value to strerror (e.g. strerror(rc)) or using a reentrant/bounds-checked alternative (strerror_r) or otherwise ensuring a non\u2011negative argument is passed to strerror."
}