{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of mutex:\n```c\nstatic int mutex(void)\n{\n\tmetal_mutex_t lock;\n\tconst int threads = 10;\n\tint rc;\n\n\tmetal_mutex_init(&lock);\n\n\trc = metal_run(threads, mutex_thread, &lock);\n\n\tmetal_mutex_deinit(&lock);\n\n\treturn rc;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_mutex_deinit(&lock);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call itself does not demonstrate a violation. Passing &lock to metal_mutex_deinit is fine: if the function parameter is const-qualified it still accepts &lock, and if the function actually modifies the mutex (likely for a deinit) a non-const pointer is appropriate. A violation would occur only if the function is declared as metal_mutex_deinit(metal_mutex_t *m) but does not modify *m; in that case the parameter should be const-qualified (const metal_mutex_t *m) and the function implementation would violate MISRA C 2023 Rule 8.13, but this cannot be determined from the call site alone."
}