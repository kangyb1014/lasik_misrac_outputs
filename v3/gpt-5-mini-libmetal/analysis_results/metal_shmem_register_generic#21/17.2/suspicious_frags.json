{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_shmem_register_generic:\n```c\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n\t/* Make sure that we can be found. */\n\tmetal_assert(shmem->name && strlen(shmem->name) != 0);\n\n\t/* Statically registered shmem regions cannot have a destructor. */\n\tmetal_assert(!shmem->io.ops.close);\n\n\tmetal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);\n\treturn 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_shmem_register_generic:\n#define metal_assert(cond) metal_sys_assert(cond)\n...\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n...\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n...\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n\tint irq_base;\n\tstruct metal_list *node;\n\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tif (node == &cntr->node) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/*\n\t * Allocate IRQ numbers which are not yet used by any IRQ\n\t * controllers.\n\t */\n\tirq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n\tif (irq_base == METAL_IRQ_ANY) {\n\t\treturn -EINVAL;\n\t}\n\tcntr->irq_base = irq_base;\n\n\tmetal_list_add_tail(&irq_cntrs, &cntr->node);\n\treturn 0;\n}\n...\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n...\nvoid metal_add_test_case(struct metal_test_case *test_case)\n{\n\tmetal_list_add_tail(&test_cases, &test_case->node);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "metal_assert(shmem->name && strlen(shmem->name) != 0);",
    "metal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);",
    "#define metal_assert(cond) metal_sys_assert(cond)",
    "if (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;",
    "metal_list_for_each(&irq_cntrs, node) {\n\t\tif (node == &cntr->node) {\n\t\t\treturn 0;\n\t\t}\n\t}",
    "ldrv->dev_close(lbus, ldev);",
    "irq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);",
    "for_each_linux_driver(lbus, ldrv) {",
    "metal_assert(!shmem->io.ops.close);",
    "metal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);",
    "error = ldrv->dev_open(lbus, ldev);",
    "metal_list_add_tail(&test_cases, &test_case->node);",
    "metal_list_add_tail(&irq_cntrs, &cntr->node);",
    "if (ldev)\n\t\tfree(ldev);",
    "metal_list_add_tail(&_metal.common.bus_list, &bus->node);",
    "metal_list_add_tail(&bus->devices, &(*device)->node);"
  ],
  "explanation": "I included fragments that perform calls which can introduce direct or indirect recursion risks: macro-expanded assertions (metal_assert -> metal_sys_assert), calls to other registration/find/allocation functions (metal_bus_find, metal_irq_allocate), calls that add nodes to global lists (metal_list_add_tail, which may interact with callbacks or list traversal elsewhere), and function-pointer invocations (ldrv->dev_open / ldrv->dev_close) which are user-supplied and therefore may call back into registration/opening functions. These fragments should be inspected to ensure none of the called functions can (directly or indirectly) call the containing function.\n\nI did not include fragments that are simple local checks, assignments, memory management or standard library calls that cannot reasonably cause indirect recursion into the shown functions (e.g., NULL checks, strlen checks, malloc, memset, strncpy, return statements, setting fields like device->bus = &metal_generic_bus, variable initializations). Those operations do not perform calls to user-supplied code or callbacks and therefore do not present a plausible recursion risk under Rule 17.2 based on the provided code."
}