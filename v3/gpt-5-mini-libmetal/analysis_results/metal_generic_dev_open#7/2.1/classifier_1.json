{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_generic_dev_open:\n#define metal_list_for_each(list, node) for((node)=(list)->next;(node)!=(list);(node)=(node)->next)\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n...\n#define metal_container_of(ptr, structure, member) (void*)((uintptr_t)(ptr)-metal_offset_of(structure,member))\n...\nstruct metal_device {\n\tconst char             *name;       /**< Device name */\n\tstruct metal_bus       *bus;        /**< Bus that contains device */\n\tunsigned int           num_regions; /**< Number of I/O regions in\n\t\t\t\t\t\t device */\n\tstruct metal_io_region regions[METAL_MAX_DEVICE_REGIONS]; /**< Array of\n\t\t\t\t\t\t\tI/O regions in device*/\n\tstruct metal_list      node;       /**< Node on bus' list of devices */\n\tint                    irq_num;    /**< Number of IRQs per device */\n\tvoid                   *irq_info;  /**< IRQ ID */\n}\n...\nint metal_generic_dev_sys_open(struct metal_device *dev)\n{\n\t(void)dev;\n\treturn 0;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn -ENODEV;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The return statement is reachable: if the loop finds a matching device it returns from inside the loop, otherwise execution falls through and executes `return -ENODEV;`. Thus in the provided code there is no unreachable code. (A concrete violation scenario would be if every iteration of the loop always returned \u2014 e.g. the loop body always executed a return on every possible path \u2014 or if a macro expansion turned the loop into an infinite loop or removed the path that falls through, making the trailing `return` never reachable.)"
}