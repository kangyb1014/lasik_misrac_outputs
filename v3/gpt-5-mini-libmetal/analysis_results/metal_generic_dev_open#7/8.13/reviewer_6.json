{
  "user_message": "An agent A claimed that the following metal_generic_dev_open code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_open.\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe struct member 'struct metal_bus *bus;' is not const-qualified. If the device never modifies the bus object through this pointer (i.e. it only reads bus state or uses it for lookups), then according to MISRA C 2023 Rule 8.13 the pointer should be declared pointing to a const-qualified type, e.g. 'const struct metal_bus *bus;'. Therefore this declaration violates Rule 8.13 unless there is a documented/required need to modify the bus via the device->bus pointer.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function metal_generic_dev_open:\nstruct metal_device {\n\tconst char             *name;       /**< Device name */\n\tstruct metal_bus       *bus;        /**< Bus that contains device */\n\tunsigned int           num_regions; /**< Number of I/O regions in\n\t\t\t\t\t\t device */\n\tstruct metal_io_region regions[METAL_MAX_DEVICE_REGIONS]; /**< Array of\n\t\t\t\t\t\t\tI/O regions in device*/\n\tstruct metal_list      node;       /**< Node on bus' list of devices */\n\tint                    irq_num;    /**< Number of IRQs per device */\n\tvoid                   *irq_info;  /**< IRQ ID */\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C 2023 Rule 8.13 is a \u201cpointer should point to a const-qualified type whenever possible\u201d guidance, but you cannot declare a violation just because a parameter is non-const without showing it could safely be const in the API/ABI context. In this code the bus parameter is unused ((void)bus), so the function itself neither reads nor writes through it, but that alone does not prove the parameter \u201cshould\u201d be const. The wider API/implementation shows struct metal_device contains a non-const struct metal_bus *bus, which implies the bus object is mutable and other code may need a non-const pointer. Changing the parameter to const struct metal_bus * could break callers or the intended design. MISRA compliance for 8.13 requires a rationale (or a justified deviation) when const cannot be used; absent evidence that the bus pointer is always immutable and can safely be made const across the API, the report is not justified. Therefore the claim of a Rule 8.13 violation is incorrect."
}