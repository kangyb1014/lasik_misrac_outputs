{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_run:\n```c\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nint metal_run(int threads, metal_thread_t child, void *arg)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The parameter 'void *arg' is not const-qualified. If the object pointed to by arg is intended to be read-only (i.e. metal_run and the child thread function do not modify *arg and any callees accept a const pointer), then this declaration violates MISRA C 2023 Rule 8.13. The correct form would be 'const void *arg' (and the const should be propagated to metal_run_noblock and the thread-entry prototype). If, however, the pointed-to object is legitimately modified by metal_run, the child thread, or other callees, then the non-const declaration is acceptable."
}