{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_run:\n```c\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nerror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "From the single call site you cannot tell whether Rule 8.13 is violated. The rule concerns the declaration of pointer parameters, not the call. If metal_run_noblock is declared to take non-const pointers (for example: int metal_run_noblock(int, metal_thread_t, void *arg, pthread_t *tids, int *ts_created)) but it does not modify the data pointed to by arg or tids, then those parameters should be const-qualified (const void *arg, const pthread_t *tids) and that declaration would violate Rule 8.13. If, however, tids is an output buffer or arg is modified by metal_run_noblock, then non-const parameters are appropriate and there is no violation. Given only the fragment, no violation can be determined."
}