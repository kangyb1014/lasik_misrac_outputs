{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'addr' is declared as void * but is only read (cast to uintptr_t) and never modified. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. Therefore 'addr' should be declared as 'const void *addr' (and callers adjusted) to comply. The current code violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "static void metal_probe_log(const char *event, void *addr, off_t offset,\n                               uint64_t entry, int err, unsigned long phys)\n{\n    FILE *fp = fopen(\"/tmp/logs/543.txt\", \"a\");\n    if (fp == NULL)\n        return;\n\n    /* Log key runtime values to help reproduce the scenario */\n    fprintf(fp, \"event=%s addr=%p addr_uint=0x%llx offset=0x%llx entry=0x%llx err=%d phys=0x%lx\\n\",\n            event,\n            addr,\n            (unsigned long long)(uintptr_t)addr,\n            (unsigned long long)offset,\n            (unsigned long long)entry,\n            err,\n            phys);\n    fclose(fp);\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    int error;\n\n    /* Probe: entry into function and initial state */\n    metal_probe_log(\"enter\", addr, 0, 0ULL, _metal.pagemap_fd, 0UL);\n\n    if (_metal.pagemap_fd < 0) {\n        /* Log invalid pagemap_fd path */\n        metal_probe_log(\"pagemap_fd_invalid\", addr, 0, 0ULL, _metal.pagemap_fd, 0UL);\n        return -EINVAL;\n    }\n\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\n    /* Log computed offset based on the (non-modified) pointer value */\n    metal_probe_log(\"computed_offset\", addr, offset, 0ULL, 0, 0UL);\n\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\n    /* Log result of pread and the raw entry read (if any) */\n    metal_probe_log(\"after_pread\", addr, offset, entry, error, 0UL);\n\n    if (error < 0) {\n        metal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n                  (unsigned long long)offset, strerror(errno));\n        /* Log the error return path */\n        metal_probe_log(\"pread_failed\", addr, offset, entry, error, 0UL);\n        return -errno;\n    }\n\n    /* Check page present and not swapped. */\n    if ((entry >> 62) != 2) {\n        metal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n                  (unsigned long long)offset, (unsigned long long)entry);\n        /* Log the not-present path and the entry value */\n        metal_probe_log(\"page_not_present\", addr, offset, entry, 0, 0UL);\n        return -ENOENT;\n    }\n\n    *phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\n    /* Log success and final physical address computed */\n    metal_probe_log(\"success\", addr, offset, entry, 0, *phys);\n    return 0;\n}"
}