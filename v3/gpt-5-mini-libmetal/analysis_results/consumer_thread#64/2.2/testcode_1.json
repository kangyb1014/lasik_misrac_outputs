{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization \"int v = 0;\" inside metal_condition_wait is redundant: v is overwritten by the subsequent assignment v = atomic_load(&cv->wakeups) before any use. The initialization operation is executed but its removal would not affect program behaviour, so it constitutes dead code (redundant initialization).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified consumer_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/642.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of consumer_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of consumer_thread:\n```c\nstatic void *consumer_thread(void *arg)\n{\n\t(void)arg;\n\tmetal_mutex_acquire(&lock);\n\twhile (!counter)\n\t\tmetal_condition_wait(&nempty_condv, &lock);\n\tcounter--;\n\tmetal_condition_signal(&nfull_condv);\n\tmetal_mutex_release(&lock);\n\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified consumer_thread code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function: append human-readable trace lines to /tmp/logs/642.txt */\nstatic void probe_log(const char *stage, int cnt, const void *cond)\n{\n    FILE *f = fopen(\"/tmp/logs/642.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: counter=%d, cond=%p\\n\", stage, cnt, cond);\n        fclose(f);\n    }\n}\n\nstatic void *consumer_thread(void *arg)\n{\n    (void)arg;\n\n    /* Log entry and state before acquiring the lock */\n    probe_log(\"consumer_thread: enter\", counter, &nempty_condv);\n\n    metal_mutex_acquire(&lock);\n    probe_log(\"consumer_thread: acquired lock\", counter, &nempty_condv);\n\n    /* Preserve original logic: wait while counter is zero. Insert probes\n       before and after the condition wait so that callers can observe the\n       control flow and state transitions that demonstrate the redundant\n       initialization inside metal_condition_wait (as reported). */\n    while (!counter) {\n        probe_log(\"consumer_thread: about to wait (counter==0)\", counter, &nempty_condv);\n        metal_condition_wait(&nempty_condv, &lock);\n        probe_log(\"consumer_thread: returned from wait\", counter, &nempty_condv);\n    }\n\n    counter--;\n    probe_log(\"consumer_thread: decremented counter\", counter, &nfull_condv);\n\n    metal_condition_signal(&nfull_condv);\n    probe_log(\"consumer_thread: signaled nfull\", counter, &nfull_condv);\n\n    metal_mutex_release(&lock);\n    probe_log(\"consumer_thread: released lock\", counter, &nfull_condv);\n\n    probe_log(\"consumer_thread: exit\", counter, &nfull_condv);\n\n    return NULL;\n}"
}