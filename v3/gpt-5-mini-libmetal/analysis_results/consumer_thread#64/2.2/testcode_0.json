{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)arg;' in consumer_thread is a deliberate no-op to suppress an 'unused parameter' warning. It has no side effects and its removal would not affect program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified consumer_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/642.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of consumer_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of consumer_thread:\n```c\nstatic void *consumer_thread(void *arg)\n{\n\t(void)arg;\n\tmetal_mutex_acquire(&lock);\n\twhile (!counter)\n\t\tmetal_condition_wait(&nempty_condv, &lock);\n\tcounter--;\n\tmetal_condition_signal(&nfull_condv);\n\tmetal_mutex_release(&lock);\n\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified consumer_thread code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a log entry describing the current stage and counter value. */\nstatic void probe_log(const char *stage, int cnt)\n{\n    FILE *f = fopen(\"/tmp/logs/642.txt\", \"a\");\n    if (f != NULL) {\n        /* Write a concise, reproducible trace of control flow and state. */\n        fprintf(f, \"consumer_thread: %s; counter=%d\\n\", stage, cnt);\n        fclose(f);\n    }\n}\n\nstatic void *consumer_thread(void *arg)\n{\n    /* Original deliberate no-op retained to mirror the reported code. */\n    (void)arg;\n    /* Log that the no-op line executed (shows the statement runs but has no effect). */\n    probe_log(\"executed (void)arg (unused parameter)\", -1);\n\n    probe_log(\"thread entry (before acquiring lock)\", -1);\n\n    metal_mutex_acquire(&lock);\n    /* Log counter under protection of the mutex for an accurate snapshot. */\n    probe_log(\"acquired lock\", counter);\n\n    while (!counter) {\n        probe_log(\"counter is zero; about to wait on nempty_condv\", 0);\n        metal_condition_wait(&nempty_condv, &lock);\n        probe_log(\"woke from nempty_condv\", counter);\n    }\n\n    counter--;\n    probe_log(\"decremented counter\", counter);\n\n    metal_condition_signal(&nfull_condv);\n    probe_log(\"signalled nfull_condv\", counter);\n\n    metal_mutex_release(&lock);\n    probe_log(\"released lock; exiting thread\", counter);\n\n    return NULL;\n}"
}