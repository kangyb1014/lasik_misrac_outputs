{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set:\n```c\nvoid metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_softirq_set:\nstatic METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\t    METAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\t    NULL,\n\t\t\t\t    metal_softirq_set_enable, NULL,\n\t\t\t\t    metal_softirqs)\n...\n\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\t\t    METAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\t\t    NULL,\n\t\t\t\t\t    metal_softirq_set_enable, NULL,\n\t\t\t\t\t    metal_softirqs)\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown code. The function metal_softirq_set does not call itself, and the macro invocation registers metal_softirq_set_enable (not metal_softirq_set), so there is no evidence of direct or indirect recursion in the provided fragments. (A violating scenario would be if metal_softirq_set directly called itself, or if metal_softirq_set and metal_softirq_set_enable called each other in a cycle\u2014e.g., metal_softirq_set -> metal_softirq_set_enable -> metal_softirq_set), but that is not present here."
}