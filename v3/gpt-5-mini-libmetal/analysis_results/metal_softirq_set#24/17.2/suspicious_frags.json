{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set:\n```c\nvoid metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_softirq_set:\nstatic METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\t    METAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\t    NULL,\n\t\t\t\t    metal_softirq_set_enable, NULL,\n\t\t\t\t    metal_softirqs)\n...\n\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "void metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}",
    "static METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\t\t    METAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\t\t    NULL,\n\t\t\t\t\t    metal_softirq_set_enable, NULL,\n\t\t\t\t\t    metal_softirqs)"
  ],
  "explanation": "The body of metal_softirq_set does not contain a direct call to itself; it only performs pointer access, a bounds check, an adjustment of irq, and a call to atomic_store (a standard atomic routine that does not introduce recursion). These operations are not recursive and therefore do not require further investigation for Rule 17.2. The other tokens in the provided code (METAL_IRQ_ANY, METAL_SOFTIRQ_NUM, NULL, the metal_softirq_cntr identifier, and the array metal_softirq_pending) are data/macro uses and do not imply recursion by themselves. The only potentially recursive scenario in the provided snippets would be indirect recursion via the controller callbacks referenced in the METAL_IRQ_CONTROLLER_DECLARE macro; those callbacks (metal_softirq_set_enable and metal_softirqs) are therefore included in the suspicious fragments above and should be inspected for any direct or indirect calls back to metal_softirq_set. No other fragments in the given code invoke functions or callbacks that could lead to self-call recursion, so they need not be investigated for Rule 17.2."
}