{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set:\n```c\nvoid metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstruct metal_irq_controller *cntr;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The pointer 'cntr' is only used to read fields (cntr->irq_base and cntr->irq_num) and never used to modify the pointed-to object. Per MISRA C 2023 Rule 8.13 the pointer should therefore be declared as pointing to a const-qualified type, e.g. 'const struct metal_irq_controller *cntr;'. As written ('struct metal_irq_controller *cntr;') the rule is violated because the pointer is not const-qualified even though it could be."
}