{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen pthread_create fails it returns a positive errno (e.g. 11). The code stores error = -pthread_create(...), producing a negative value (e.g. -11), then calls strerror(error). strerror expects a non\u2011negative error number; passing a negative value can cause the implementation to index out of bounds of its internal message table or otherwise access memory beyond the bounds of the object returned by strerror, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified spinlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/699.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of spinlock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of spinlock:\n```c\nstatic int spinlock(void)\n{\n\tstruct metal_spinlock lock = METAL_SPINLOCK_INIT;\n\tconst int threads = 10;\n\tint value, error;\n\n\terror = metal_run(threads, spinlock_thread, &lock);\n\tif (!error) {\n\t\tvalue = total;\n\t\tvalue -= spinlock_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified spinlock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Probe helpers: write structured logs to /tmp/logs/699.txt. */\nstatic void probe_ensure_dir(void)\n{\n    /* Best-effort create directory; ignore errors other than success/EEXIST. */\n    (void)mkdir(\"/tmp/logs\", (mode_t)0755);\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    time_t t;\n    struct tm tm_buf;\n\n    probe_ensure_dir();\n    f = fopen(\"/tmp/logs/699.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* timestamp */\n    t = time(NULL);\n    (void)localtime_r(&t, &tm_buf);\n    fprintf(f, \"%04d-%02d-%02dT%02d:%02d:%02d PID=%ld: \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec, (long)getpid());\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fclose(f);\n}\n\n/* External symbols referenced by original spinlock implementation. */\nextern int total; /* shared counter used by tests */\nextern int spinlock_test_count; /* per-thread expected increments */\n\n/* Keep original function signature and logic; add probes around metal_run. */\nstatic int spinlock(void)\n{\n    struct metal_spinlock lock = METAL_SPINLOCK_INIT;\n    const int threads = 10;\n    int value, error;\n\n    /* Log entry into function and initial observed state. */\n    probe_log(\"enter spinlock(): threads=%d\\n\", threads);\n\n    /* Capture errno before calling metal_run to help reproduce failures. */\n    errno = 0;\n    probe_log(\"calling metal_run(threads=%d, spinlock_thread, &lock)\\n\", threads);\n\n    error = metal_run(threads, spinlock_thread, &lock);\n\n    /* Immediately capture errno and report both return value and errno. */\n    probe_log(\"metal_run returned error=%d, errno=%d\\n\", error, errno);\n\n    /* If the run returned an error that is negative, this is a likely\n       indicator that callers downstream might mistakenly pass that\n       negative value to string-handling/diagnostic functions such as\n       strerror. Log both the negative and its absolute to help reproduce\n       the scenario without invoking unsafe calls with negative indices. */\n    if (error < 0) {\n        int saved_errno = errno; /* errno captured above */\n        int positive = -error;\n\n        probe_log(\"detected negative error value: %d\\n\", error);\n        probe_log(\"interpreted positive errno (abs(error)) = %d\\n\", positive);\n\n        /* Log the strerror for the positive errno (safe to call). */\n        /* Avoid calling strerror with negative values. */\n        if (positive >= 0) {\n            const char *msg = strerror(positive);\n            probe_log(\"strerror(abs(error)) -> '%s'\\n\", msg ? msg : \"(null)\");\n        }\n\n        /* Also log the saved errno as a cross-check (if different). */\n        if (saved_errno != positive) {\n            const char *msg2 = strerror((saved_errno >= 0) ? saved_errno : 0);\n            probe_log(\"saved errno=%d -> '%s'\\n\", saved_errno,\n                      msg2 ? msg2 : \"(null)\");\n        }\n    }\n\n    if (!error) {\n        value = total;\n        value -= spinlock_test_count * threads;\n        if (value) {\n            metal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n                      value);\n            probe_log(\"counter mismatch detected: delta=%d (total=%d, expected=%d)\\n\",\n                      value, total, spinlock_test_count * threads);\n            error = -EINVAL;\n            probe_log(\"setting error = -EINVAL (%d)\\n\", error);\n        }\n    }\n\n    probe_log(\"exit spinlock(): returning error=%d\\n\", error);\n    return error;\n}\n"
}