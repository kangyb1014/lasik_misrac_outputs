{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_log uses compiler extensions: a GCC statement-expression '({ ... })' and the GNU preprocessor extension '##__VA_ARGS__' to suppress the comma when no variadic arguments are supplied. Both are explicit compiler extensions and thus violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/720.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <unistd.h>\n\n/* Probe function to log control flow and state to /tmp/logs/720.txt */\nstatic void probe_log(const char *where, int rc, const char *err_msg,\n                      int loop_i, int fd0, int fd1, int mll)\n{\n    FILE *f = fopen(\"/tmp/logs/720.txt\", \"a\");\n    if (!f)\n        return;\n    /* Log a concise snapshot: location, return code, error message pointer,\n       current loop index, file descriptors, and saved log level. */\n    fprintf(f, \"[probe] %s: rc=%d err_msg='%s' loop_i=%d fd0=%d fd1=%d mll=%d\\n\",\n            where, rc, err_msg ? err_msg : \"\", loop_i, fd0, fd1, mll);\n    fclose(f);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg = \"\";\n    enum metal_log_level mll = metal_get_log_level();\n    int i, tst_irq[2];\n\n    /* Log entry and initial saved log level */\n    probe_log(\"entry\", rc, err_msg, -1, -1, -1, (int)mll);\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0, 0);\n        /* Probe: after creating eventfd */\n        probe_log(\"after_eventfd\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n\n        /* Record that we're about to call metal_log with the debug message */\n        probe_log(\"before_metal_log_debug\", rc, \"format=\\\"%s: irq %d associated with fd %d\\\\n\\\"\",\n                  i, tst_irq[0], tst_irq[1], (int)mll);\n\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n\n        /* Probe after metal_log call */\n        probe_log(\"after_metal_log_debug\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n    }\n\n    probe_log(\"before_register_0\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_log(\"after_register_0\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        probe_log(\"error_register_0\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n        goto out;\n    }\n\n    probe_log(\"before_register_1\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    probe_log(\"after_register_1\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        probe_log(\"error_register_1\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n        goto out;\n    }\n\n    probe_log(\"before_unregister_and_reregister\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    metal_irq_unregister(tst_irq[0]);\n    probe_log(\"after_unregister_0\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_log(\"after_reregister_0\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        probe_log(\"error_reregister_0\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n        goto out;\n    }\n    metal_irq_unregister(tst_irq[0]);\n    probe_log(\"after_final_unregister_0\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    metal_irq_unregister(tst_irq[1]);\n    probe_log(\"after_final_unregister_1\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n\nout:\n    for (i = 0; i < 2; i++) {\n        close(tst_irq[i]);\n        probe_log(\"after_close_fd\", rc, err_msg, i, tst_irq[0], tst_irq[1], (int)mll);\n    }\n    metal_set_log_level(mll);\n    probe_log(\"after_restore_log_level\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) {\n        probe_log(\"before_metal_log_error\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n        metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n        probe_log(\"after_metal_log_error\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    }\n    probe_log(\"exit\", rc, err_msg, -1, tst_irq[0], tst_irq[1], (int)mll);\n    return rc;\n}\n"
}