{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn irq_handler the two statements \u201c(void)irq; (void)priv;\u201d are expression statements that do not affect program behaviour; removing them would not change the observable behaviour of the program. Therefore they constitute executed no-op code and violate MISRA C 2023 Rule 2.2 (dead code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/722.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/722.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    /* Ensure directory exists. Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/722.txt\", \"a\");\n    if (f == NULL) {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg = \"\";\n    enum metal_log_level mll = metal_get_log_level();\n    int i, tst_irq[2];\n\n    /* Log entry and initial state */\n    probe_log(\"ENTER irq: initial_mll=%d\", (int)mll);\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n    probe_log(\"metal_set_log_level -> METAL_LOG_CRITICAL (previous=%d)\", (int)mll);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0, 0);\n        probe_log(\"eventfd created: index=%d fd=%d errno=%d (%s)\",\n                  i, tst_irq[i], errno, strerror(errno));\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n    }\n\n    probe_log(\"registering irq: fd=%d handler_ptr=%p priv=%p\",\n              tst_irq[0], (void *)irq_handler, (void *)1);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_log(\"register result: fd=%d rc=%d\", tst_irq[0], rc);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        probe_log(\"error: %s rc=%d\", err_msg, rc);\n        goto out;\n    }\n\n    probe_log(\"registering irq: fd=%d handler_ptr=%p priv=%p\",\n              tst_irq[1], (void *)irq_handler, (void *)1);\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    probe_log(\"register result: fd=%d rc=%d\", tst_irq[1], rc);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        probe_log(\"error: %s rc=%d\", err_msg, rc);\n        goto out;\n    }\n\n    probe_log(\"unregistering fd=%d\", tst_irq[0]);\n    metal_irq_unregister(tst_irq[0]);\n    probe_log(\"re-registering fd=%d handler_ptr=%p priv=%p\",\n              tst_irq[0], (void *)irq_handler, (void *)1);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_log(\"register after unregister result: fd=%d rc=%d\", tst_irq[0], rc);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        probe_log(\"error: %s rc=%d\", err_msg, rc);\n        goto out;\n    }\n    probe_log(\"unregistering fd=%d\", tst_irq[0]);\n    metal_irq_unregister(tst_irq[0]);\n    probe_log(\"unregistering fd=%d\", tst_irq[1]);\n    metal_irq_unregister(tst_irq[1]);\n\nout:\n    for (i = 0; i < 2; i++) {\n        probe_log(\"closing fd: index=%d fd=%d\", i, tst_irq[i]);\n        close(tst_irq[i]);\n    }\n    metal_set_log_level(mll);\n    probe_log(\"metal_set_log_level restored to %d\", (int)mll);\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) {\n        metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n        probe_log(\"final rc=%d err_msg=%s\", rc, err_msg);\n    } else {\n        probe_log(\"final rc=%d (no error)\", rc);\n    }\n    probe_log(\"EXIT irq\");\n    return rc;\n}\n"
}