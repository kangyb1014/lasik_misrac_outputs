{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a non-const pointer value (void *)1 as the 'arg' to metal_irq_register. The pointer is used as an immutable identifier and could/should be const-qualified (e.g. const void *) if it is not intended to be modified. Because the API and the call use a non-const void* where a const-qualified pointer would be appropriate, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n#include <errno.h>\n\n/* Probe logging helper. Accepts the argument as const void * so the probe itself\n * does not introduce non-const pointer usage. Logs to /tmp/logs/723.txt. */\nstatic void irq_log_probe(const char *func, const char *stage,\n                          int fd1, int fd2, const void *arg,\n                          int rc, const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/723.txt\", \"a\");\n    if (!f) {\n        return; /* best-effort logging; do not change program flow */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    char timestr[64] = \"\";\n    if (localtime_r(&t, &tm_buf) != NULL) {\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0) {\n            timestr[0] = '\\0';\n        }\n    }\n\n    if (note == NULL) note = \"\";\n\n    fprintf(f, \"%s - %s: func=%s fds=[%d,%d] arg=0x%\" PRIxPTR \" rc=%d note=%s\\n\",\n            timestr, stage, func, fd1, fd2, (uintptr_t)arg, rc, note);\n    fclose(f);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg=\"\";\n    enum metal_log_level mll= metal_get_log_level();\n    int i, tst_irq[2];\n\n    /* record entry and initial log level */\n    irq_log_probe(__func__, \"entry\", -1, -1, NULL, 0, \"initial log level recorded\");\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n\n    irq_log_probe(__func__, \"after_set_log_level\", -1, -1, NULL, (int)mll, \"set to CRITICAL for test\");\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0,0);\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n        irq_log_probe(__func__, \"created_eventfd\", tst_irq[i], -1, NULL, tst_irq[i], \"eventfd created\");\n    }\n\n    /* Log before first registration: the argument is a non-const void* literal (void *)1 */\n    irq_log_probe(__func__, \"before_register_0\", tst_irq[0], -1, (const void *)1, -1, \"about to call metal_irq_register with (void *)1\");\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    irq_log_probe(__func__, \"after_register_0\", tst_irq[0], -1, (const void *)1, rc, rc ? \"register failed\" : \"register succeeded\");\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        goto out;\n    }\n\n    irq_log_probe(__func__, \"before_register_1\", tst_irq[1], -1, (const void *)1, -1, \"about to call metal_irq_register with (void *)1\");\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    irq_log_probe(__func__, \"after_register_1\", tst_irq[1], -1, (const void *)1, rc, rc ? \"register failed\" : \"register succeeded\");\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        goto out;\n    }\n\n    irq_log_probe(__func__, \"before_unregister_0\", tst_irq[0], -1, (const void *)1, -1, \"about to call metal_irq_unregister for irq 0\");\n    metal_irq_unregister(tst_irq[0]);\n    irq_log_probe(__func__, \"after_unregister_0\", tst_irq[0], -1, (const void *)1, 0, \"unregistered irq 0\");\n\n    irq_log_probe(__func__, \"before_register_0_after_unregister\", tst_irq[0], -1, (const void *)1, -1, \"re-registering irq 0 after unregister\");\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    irq_log_probe(__func__, \"after_register_0_after_unregister\", tst_irq[0], -1, (const void *)1, rc, rc ? \"register failed\" : \"register succeeded\");\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        goto out;\n    }\n    irq_log_probe(__func__, \"before_final_unregisters\", tst_irq[0], tst_irq[1], (const void *)1, 0, \"about to unregister both irqs\");\n    metal_irq_unregister(tst_irq[0]);\n    metal_irq_unregister(tst_irq[1]);\n    irq_log_probe(__func__, \"after_final_unregisters\", tst_irq[0], tst_irq[1], (const void *)1, 0, \"both irqs unregistered\");\n\nout:\n    for (i = 0; i < 2; i++) {\n        close(tst_irq[i]);\n        irq_log_probe(__func__, \"closed_fd\", tst_irq[i], -1, NULL, 0, \"closed eventfd\");\n    }\n    metal_set_log_level(mll);\n    irq_log_probe(__func__, \"restored_log_level\", -1, -1, NULL, (int)mll, \"restored original log level\");\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\n    irq_log_probe(__func__, \"exit\", -1, -1, (const void *)1, rc, err_msg[0] ? err_msg : \"exiting\");\n    return rc;\n}\n"
}