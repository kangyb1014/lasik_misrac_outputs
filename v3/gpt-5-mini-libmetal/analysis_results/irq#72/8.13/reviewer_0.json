{
  "user_message": "An agent A claimed that the following irq code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of irq.\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes a non-const pointer value (void *)1 as the 'arg' to metal_irq_register. The pointer is used as an immutable identifier and could/should be const-qualified (e.g. const void *) if it is not intended to be modified. Because the API and the call use a non-const void* where a const-qualified pointer would be appropriate, this violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-22 06:35:17 - entry: func=irq fds=[-1,-1] arg=0x0 rc=0 note=initial log level recorded\n2025-08-22 06:35:17 - after_set_log_level: func=irq fds=[-1,-1] arg=0x0 rc=7 note=set to CRITICAL for test\n2025-08-22 06:35:17 - created_eventfd: func=irq fds=[6,-1] arg=0x0 rc=6 note=eventfd created\n2025-08-22 06:35:17 - created_eventfd: func=irq fds=[7,-1] arg=0x0 rc=7 note=eventfd created\n2025-08-22 06:35:17 - before_register_0: func=irq fds=[6,-1] arg=0x1 rc=-1 note=about to call metal_irq_register with (void *)1\n2025-08-22 06:35:17 - after_register_0: func=irq fds=[6,-1] arg=0x1 rc=0 note=register succeeded\n2025-08-22 06:35:17 - before_register_1: func=irq fds=[7,-1] arg=0x1 rc=-1 note=about to call metal_irq_register with (void *)1\n2025-08-22 06:35:17 - after_register_1: func=irq fds=[7,-1] arg=0x1 rc=0 note=register succeeded\n2025-08-22 06:35:17 - before_unregister_0: func=irq fds=[6,-1] arg=0x1 rc=-1 note=about to call metal_irq_unregister for irq 0\n2025-08-22 06:35:17 - after_unregister_0: func=irq fds=[6,-1] arg=0x1 rc=0 note=unregistered irq 0\n2025-08-22 06:35:17 - before_register_0_after_unregister: func=irq fds=[6,-1] arg=0x1 rc=-1 note=re-registering irq 0 after unregister\n2025-08-22 06:35:17 - after_register_0_after_unregister: func=irq fds=[6,-1] arg=0x1 rc=0 note=register succeeded\n2025-08-22 06:35:17 - before_final_unregisters: func=irq fds=[6,7] arg=0x1 rc=0 note=about to unregister both irqs\n2025-08-22 06:35:17 - after_final_unregisters: func=irq fds=[6,7] arg=0x1 rc=0 note=both irqs unregistered\n2025-08-22 06:35:17 - closed_fd: func=irq fds=[6,-1] arg=0x0 rc=0 note=closed eventfd\n2025-08-22 06:35:17 - closed_fd: func=irq fds=[7,-1] arg=0x0 rc=0 note=closed eventfd\n2025-08-22 06:35:17 - restored_log_level: func=irq fds=[-1,-1] arg=0x0 rc=7 note=restored original log level\n2025-08-22 06:35:17 - exit: func=irq fds=[-1,-1] arg=0x1 rc=0 note=exiting\n2025-08-22 06:35:17 - entry: func=irq fds=[-1,-1] arg=0x0 rc=0 note=initial log level recorded\n2025-08-22 06:35:17 - after_set_log_level: func=irq fds=[-1,-1] arg=0x0 rc=7 note=set to CRITICAL for test\n2025-08-22 06:35:17 - created_eventfd: func=irq fds=[6,-1] arg=0x0 rc=6 note=eventfd created\n2025-08-22 06:35:17 - created_eventfd: func=irq fds=[7,-1] arg=0x0 rc=7 note=eventfd created\n2025-08-22 06:35:17 - before_register_0: func=irq fds=[6,-1] arg=0x1 rc=-1 note=about to call metal_irq_register with (void *)1\n2025-08-22 06:35:17 - after_register_0: func=irq fds=[6,-1] arg=0x1 rc=0 note=register succeeded\n2025-08-22 06:35:17 - before_register_1: func=irq fds=[7,-1] arg=0x1 rc=-1 note=about to call metal_irq_register with (void *)1\n2025-08-22 06:35:17 - after_register_1: func=irq fds=[7,-1] arg=0x1 rc=0 note=register succeeded\n2025-08-22 06:35:17 - before_unregister_0: func=irq fds=[6,-1] arg=0x1 rc=-1 note=about to call metal_irq_unregister for irq 0\n2025-08-22 06:35:17 - after_unregister_0: func=irq fds=[6,-1] arg=0x1 rc=0 note=unregistered irq 0\n2025-08-22 06:35:17 - before_register_0_after_unregister: func=irq fds=[6,-1] arg=0x1 rc=-1 note=re-registering irq 0 after unregister\n2025-08-22 06:35:17 - after_register_0_after_unregister: func=irq fds=[6,-1] arg=0x1 rc=0 note=register succeeded\n2025-08-22 06:35:17 - before_final_unregisters: func=irq fds=[6,7] arg=0x1 rc=0 note=about to unregister both irqs\n2025-08-22 06:35:17 - after_final_unregisters: func=irq fds=[6,7] arg=0x1 rc=0 note=both irqs unregistered\n2025-08-22 06:35:17 - closed_fd: func=irq fds=[6,-1] arg=0x0 rc=0 note=closed eventfd\n2025-08-22 06:35:17 - closed_fd: func=irq fds=[7,-1] arg=0x0 rc=0 note=closed eventfd\n2025-08-22 06:35:17 - restored_log_level: func=irq fds=[-1,-1] arg=0x0 rc=7 note=restored original log level\n2025-08-22 06:35:17 - exit: func=irq fds=[-1,-1] arg=0x1 rc=0 note=exiting\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function irq:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's claim is not supported by the code shown. MISRA C 2023 Rule 8.13 recommends declaring pointers to const-qualified types when the pointed-to object will not be modified, but whether that is applicable is a design/ABI decision that cannot be inferred here. The API metal_irq_register() and the irq data structure store an opaque argument of type void * and later pass it to handlers; that usage implies the API chooses a modifiable (non-const) pointer type or at least an opaque token. The call in irq passes (void *)1 as an opaque identifier (not a pointer to an object), which is a separate concern (casts between integer and pointer) but does not itself prove a Rule 8.13 violation. Therefore there is insufficient evidence that the pointer should have been declared const-qualified, so the reported violation of MISRA C 2023 Rule 8.13 is not correct."
}