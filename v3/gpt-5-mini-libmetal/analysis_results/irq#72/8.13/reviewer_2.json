{
  "user_message": "An agent A claimed that the following irq code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of irq.\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function metal_irq_register takes a void *arg and stores it into irq_data->arg via 'irq_data->arg = arg;'. Neither the parameter nor the stored field are const-qualified. If the stored pointer is intended to be an opaque, non-modifiable identifier passed to the IRQ handler (as appears from the use-site passing (void *)1), the pointer should be declared const (e.g. const void *arg and irq_data->arg as const void *). Therefore the assignment violates MISRA C 2023 Rule 8.13 because a pointer is not const-qualified where it could reasonably be made const.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nirq: enter, previous_log_level=7\nirq: created virtual irq index=0 fd=6\nirq: created virtual irq index=1 fd=7\nirq: about to register irq fd=6 with arg=0x1\nirq: metal_irq_register returned rc=0 for fd=6\nirq: about to register irq fd=7 with arg=0x1\nirq: metal_irq_register returned rc=0 for fd=7\nirq: unregistering fd=6\nirq: re-registering fd=6 with arg=0x1\nirq: metal_irq_register returned rc=0 for fd=6 (after unregister)\nirq: unregistering fd=6 and fd=7\nirq: closing fd[0]=6\nirq: closing fd[1]=7\nirq: restored log level to 7, current rc=0\nirq: exit rc=0, last_err='', probe_arg=0x1\nirq: enter, previous_log_level=7\nirq: created virtual irq index=0 fd=6\nirq: created virtual irq index=1 fd=7\nirq: about to register irq fd=6 with arg=0x1\nirq: metal_irq_register returned rc=0 for fd=6\nirq: about to register irq fd=7 with arg=0x1\nirq: metal_irq_register returned rc=0 for fd=7\nirq: unregistering fd=6\nirq: re-registering fd=6 with arg=0x1\nirq: metal_irq_register returned rc=0 for fd=6 (after unregister)\nirq: unregistering fd=6 and fd=7\nirq: closing fd[0]=6\nirq: closing fd[1]=7\nirq: restored log level to 7, current rc=0\nirq: exit rc=0, last_err='', probe_arg=0x1\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function irq:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 8.13 encourages pointers to point to const-qualified types where possible. Agent A\u2019s claim is speculative: the provided code and symbols show metal_irq_register takes a void *arg and stores it into irq_data->arg (also a void *). However, there is no evidence in the excerpts that the stored pointer will never be used to modify the pointed-to data, nor that all IRQ handlers accept a const void * (changing the API would be a breaking change). The use-site in irq passes (void *)1 (an integer cast to a pointer), which is an opaque identifier and not a pointed-to modifiable object \u2014 that alone does not prove the pointer could/should be const across the whole API. To establish a MISRA 8.13 violation you must show that the pointer can be const-qualified everywhere it\u2019s declared and used; that requires whole-project analysis of all uses of irq_data->arg and the irq handler signatures. Because that evidence is not present, the report is not justified based on the supplied code."
}