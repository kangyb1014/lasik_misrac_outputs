{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function metal_irq_register takes a void *arg and stores it into irq_data->arg via 'irq_data->arg = arg;'. Neither the parameter nor the stored field are const-qualified. If the stored pointer is intended to be an opaque, non-modifiable identifier passed to the IRQ handler (as appears from the use-site passing (void *)1), the pointer should be declared const (e.g. const void *arg and irq_data->arg as const void *). Therefore the assignment violates MISRA C 2023 Rule 8.13 because a pointer is not const-qualified where it could reasonably be made const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "static void probe_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/723.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/723.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg=\"\";\n    enum metal_log_level mll= metal_get_log_level();\n    int i, tst_irq[2];\n\n    /* Probe: entry */\n    probe_logf(\"irq: enter, previous_log_level=%d\", (int)mll);\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0,0);\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n              __func__, i, tst_irq[i]);\n        probe_logf(\"irq: created virtual irq index=%d fd=%d\", i, tst_irq[i]);\n    }\n\n    /* Prepare the opaque argument as in original code */\n    void *probe_arg = (void *)1;\n    probe_logf(\"irq: about to register irq fd=%d with arg=%p\", tst_irq[0], (const void *)probe_arg);\n\n    rc = metal_irq_register(tst_irq[0], irq_handler, probe_arg);\n    probe_logf(\"irq: metal_irq_register returned rc=%d for fd=%d\", rc, tst_irq[0]);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        probe_logf(\"irq: error=%s\", err_msg);\n        goto out;\n    }\n\n    probe_logf(\"irq: about to register irq fd=%d with arg=%p\", tst_irq[1], (const void *)probe_arg);\n    rc = metal_irq_register(tst_irq[1], irq_handler, probe_arg);\n    probe_logf(\"irq: metal_irq_register returned rc=%d for fd=%d\", rc, tst_irq[1]);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        probe_logf(\"irq: error=%s\", err_msg);\n        goto out;\n    }\n\n    probe_logf(\"irq: unregistering fd=%d\", tst_irq[0]);\n    metal_irq_unregister(tst_irq[0]);\n    probe_logf(\"irq: re-registering fd=%d with arg=%p\", tst_irq[0], (const void *)probe_arg);\n    rc = metal_irq_register(tst_irq[0], irq_handler, probe_arg);\n    probe_logf(\"irq: metal_irq_register returned rc=%d for fd=%d (after unregister)\", rc, tst_irq[0]);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        probe_logf(\"irq: error=%s\", err_msg);\n        goto out;\n    }\n    probe_logf(\"irq: unregistering fd=%d and fd=%d\", tst_irq[0], tst_irq[1]);\n    metal_irq_unregister(tst_irq[0]);\n    metal_irq_unregister(tst_irq[1]);\n\nout:\n    for (i = 0; i < 2; i++) {\n        probe_logf(\"irq: closing fd[%d]=%d\", i, tst_irq[i]);\n        close(tst_irq[i]);\n    }\n    metal_set_log_level(mll);\n    probe_logf(\"irq: restored log level to %d, current rc=%d\", (int)mll, rc);\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\n    /* Final probe: report return code and the opaque arg used to register */\n    probe_logf(\"irq: exit rc=%d, last_err='%s', probe_arg=%p\", rc, err_msg, (const void *)probe_arg);\n    return rc;\n}\n"
}