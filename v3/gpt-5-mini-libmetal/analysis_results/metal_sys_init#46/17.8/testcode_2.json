{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_unused(x) is defined as do{(x)=(x);}while(0). In metal_sys_init the call metal_unused(params); performs an assignment to the parameter identifier 'params' (params = params), which modifies the pointer parameter itself. MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer value shall not be modified). This therefore violates Rule 17.8. A compliant alternative is to use (void)params; or define metal_unused(x) as ((void)(x)).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/467.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n#include <unistd.h>\n#include <fcntl.h>\n\n/* Probe logging helper: appends formatted messages to /tmp/logs/467.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/467.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    struct tm tmv;\n    localtime_r(&t, &tmv);\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%dT%H:%M:%S\", &tmv);\n\n    fprintf(f, \"%s - \", timestr);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n\n    /* Log entry and parameter state */\n    probe_log(\"ENTER metal_sys_init: params=%p, &params=%p\", (const void *)params, (const void *)&params);\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n    _metal.tmp_path = tmp_path;\n    probe_log(\"tmp_path determined: %s\", tmp_path);\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        probe_log(\"failed to open /dev/urandom: errno=%d (%s)\", errno, strerror(errno));\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        probe_log(\"EXIT metal_sys_init (fail open urandom): errno=%d\", errno);\n        return -errno;\n    }\n    probe_log(\"/dev/urandom opened: FILE=%p\", (void *)urandom);\n\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n        probe_log(\"fread on /dev/urandom failed (seed not populated)\");\n    } else {\n        probe_log(\"seed read from /dev/urandom: 0x%08x\", seed);\n    }\n    fclose(urandom);\n    srand(seed);\n    probe_log(\"srand called with seed=0x%08x\", seed);\n\n    result = metal_init_page_sizes();\n    probe_log(\"metal_init_page_sizes() returned %d\", result);\n    if (result < 0) {\n        probe_log(\"EXIT metal_sys_init (fail page sizes): result=%d\", result);\n        return result;\n    }\n\n    result = metal_linux_bus_init();\n    probe_log(\"metal_linux_bus_init() returned %d\", result);\n    if (result < 0) {\n        probe_log(\"EXIT metal_sys_init (fail bus init): result=%d\", result);\n        return result;\n    }\n\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n        probe_log(\"open /proc/self/pagemap failed: errno=%d (%s)\", errno, strerror(errno));\n    } else {\n        probe_log(\"/proc/self/pagemap opened: fd=%d\", result);\n    }\n    _metal.pagemap_fd = result;\n\n    /* Probe around the metal_unused invocation to provide evidence of the call site.\n     * We log the parameter pointer value and the address of the parameter variable\n     * before and after the call so analyzers can correlate the source location\n     * with the macro invocation.\n     */\n    probe_log(\"Before metal_unused: params=%p, &params=%p\", (const void *)params, (const void *)&params);\n\n    metal_unused(params);\n\n    probe_log(\"After  metal_unused: params=%p, &params=%p\", (const void *)params, (const void *)&params);\n    probe_log(\"Note: metal_unused(params) invoked at source location; check macro definition for assignment to parameter identifier.\");\n\n    /* Initialize IRQ handling */\n    metal_linux_irq_init();\n    probe_log(\"metal_linux_irq_init() called; EXIT metal_sys_init success\");\n    return 0;\n}\n"
}