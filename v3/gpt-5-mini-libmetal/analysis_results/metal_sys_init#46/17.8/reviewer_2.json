{
  "user_message": "An agent A claimed that the following metal_sys_init code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_sys_init.\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro metal_unused(x) is defined as do{(x)=(x);}while(0). In metal_sys_init the call metal_unused(params); performs an assignment to the parameter identifier 'params' (params = params), which modifies the pointer parameter itself. MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer value shall not be modified). This therefore violates Rule 17.8. A compliant alternative is to use (void)params; or define metal_unused(x) as ((void)(x)).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-22T06:31:33 - ENTER metal_sys_init: params=0x7ffc4c295700, &params=0x7ffc4c295648\n2025-08-22T06:31:33 - tmp_path determined: /tmp\n2025-08-22T06:31:33 - /dev/urandom opened: FILE=0x562c938b92a0\n2025-08-22T06:31:33 - seed read from /dev/urandom: 0x35413f3b\n2025-08-22T06:31:33 - srand called with seed=0x35413f3b\n2025-08-22T06:31:33 - metal_init_page_sizes() returned 0\n2025-08-22T06:31:33 - metal_linux_bus_init() returned 0\n2025-08-22T06:31:33 - /proc/self/pagemap opened: fd=4\n2025-08-22T06:31:33 - Before metal_unused: params=0x7ffc4c295700, &params=0x7ffc4c295648\n2025-08-22T06:31:33 - After  metal_unused: params=0x7ffc4c295700, &params=0x7ffc4c295648\n2025-08-22T06:31:33 - Note: metal_unused(params) invoked at source location; check macro definition for assignment to parameter identifier.\n2025-08-22T06:31:33 - metal_linux_irq_init() called; EXIT metal_sys_init success\n2025-08-22T06:31:33 - ENTER metal_sys_init: params=0x7ffe638b1960, &params=0x7ffe638b18a8\n2025-08-22T06:31:33 - tmp_path determined: /tmp\n2025-08-22T06:31:33 - /dev/urandom opened: FILE=0x56077362f2a0\n2025-08-22T06:31:33 - seed read from /dev/urandom: 0x9d592b1d\n2025-08-22T06:31:33 - srand called with seed=0x9d592b1d\n2025-08-22T06:31:33 - metal_init_page_sizes() returned 0\n2025-08-22T06:31:33 - metal_linux_bus_init() returned 0\n2025-08-22T06:31:33 - /proc/self/pagemap opened: fd=4\n2025-08-22T06:31:33 - Before metal_unused: params=0x7ffe638b1960, &params=0x7ffe638b18a8\n2025-08-22T06:31:33 - After  metal_unused: params=0x7ffe638b1960, &params=0x7ffe638b18a8\n2025-08-22T06:31:33 - Note: metal_unused(params) invoked at source location; check macro definition for assignment to parameter identifier.\n2025-08-22T06:31:33 - metal_linux_irq_init() called; EXIT metal_sys_init success\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_sys_init:\n#define metal_unused(x) do{(x)=(x);}while(0)\n...\nstruct metal_init_params {\n\n\t/** log message handler (defaults to stderr). */\n\tmetal_log_handler\t\tlog_handler;\n\n\t/** default log message level (defaults to emergency). */\n\tenum metal_log_level\t\tlog_level;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The macro metal_unused(x) defined as do{ (x) = (x); }while(0) performs an assignment to the function parameter identifier params. MISRA C 2023 Rule 17.8 prohibits modifying a function parameter (the pointer value itself shall not be changed). Even though the assignment is a self-assignment with no runtime effect (the execution log shows the value and address unchanged), it is still an assignment to the parameter and thus a modification according to the rule. The compliant alternatives are (void)params; or defining metal_unused(x) as ((void)(x))."
}