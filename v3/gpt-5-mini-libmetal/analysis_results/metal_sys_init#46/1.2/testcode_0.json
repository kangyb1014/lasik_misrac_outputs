{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe metal_log macro uses GCC language extensions: it is defined with a statement-expression ({ ... }) and uses the GNU token-pasting trick '##__VA_ARGS__' to allow empty variadic arguments. The call metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\"); therefore expands to code that relies on GCC extensions, violating MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/460.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "static void probe_metal_sys_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Attempt to create the logs directory; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/460.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n\n    probe_metal_sys_log(\"metal_sys_init: entry, params=%p\", (const void *)params);\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n    _metal.tmp_path = tmp_path;\n\n    probe_metal_sys_log(\"tmp_path set to '%s'\", tmp_path);\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    probe_metal_sys_log(\"fopen('/dev/urandom') -> %p\", (void *)urandom);\n    if (!urandom) {\n        probe_metal_sys_log(\"fopen('/dev/urandom') failed: errno=%d (%s)\", errno, strerror(errno));\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        probe_metal_sys_log(\"metal_sys_init: returning -errno=%d\", -errno);\n        return -errno;\n    }\n\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        probe_metal_sys_log(\"fread('/dev/urandom') returned <= 0; errno=%d (%s)\", errno, strerror(errno));\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n    } else {\n        probe_metal_sys_log(\"fread succeeded, seed=%u\", seed);\n    }\n    fclose(urandom);\n    probe_metal_sys_log(\"/dev/urandom closed, seed=%u\", seed);\n\n    srand(seed);\n    probe_metal_sys_log(\"srand(seed=%u) called\", seed);\n\n    result = metal_init_page_sizes();\n    probe_metal_sys_log(\"metal_init_page_sizes() -> %d\", result);\n    if (result < 0) {\n        probe_metal_sys_log(\"metal_sys_init: metal_init_page_sizes failed -> %d\", result);\n        return result;\n    }\n\n    result = metal_linux_bus_init();\n    probe_metal_sys_log(\"metal_linux_bus_init() -> %d\", result);\n    if (result < 0) {\n        probe_metal_sys_log(\"metal_sys_init: metal_linux_bus_init failed -> %d\", result);\n        return result;\n    }\n\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    probe_metal_sys_log(\"open('/proc/self/pagemap') -> %d\", result);\n    if (result < 0) {\n        probe_metal_sys_log(\"pagemap open failed: errno=%d (%s)\", errno, strerror(errno));\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n    }\n    _metal.pagemap_fd = result;\n    probe_metal_sys_log(\"_metal.pagemap_fd set to %d\", _metal.pagemap_fd);\n\n    metal_unused(params);\n\n    /* Initialize IRQ handling */\n    metal_linux_irq_init();\n    probe_metal_sys_log(\"metal_linux_irq_init() called; exiting metal_sys_init with 0\");\n    return 0;\n}\n"
}