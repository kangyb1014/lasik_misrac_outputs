{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe metal_log macro expands to a GCC statement-expression ({ ... }) and uses the GCC comma-swallowing '##__VA_ARGS__' extension. The call metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\", strerror(errno)); therefore relies on compiler-specific extensions (statement-expressions and GNU variadic macro comma swallowing), violating MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/460.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "static void metal_probe(const char *fmt, ...)\n{\n    FILE *logf = fopen(\"/tmp/logs/460.txt\", \"a\");\n    if (!logf)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(logf, fmt, ap);\n    va_end(ap);\n    fflush(logf);\n    fclose(logf);\n}\n\nint metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n    _metal.tmp_path = tmp_path;\n\n    /* Probe: record tmp path */\n    metal_probe(\"[metal_sys_init] tmp_path='%s'\\n\", tmp_path);\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        /* Probe: record failure to open /dev/urandom (errno) */\n        metal_probe(\"[metal_sys_init] fopen('/dev/urandom') failed: errno=%d (%s)\\n\",\n                    errno, strerror(errno));\n\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        return -errno;\n    }\n\n    /* Probe: record that /dev/urandom opened successfully */\n    metal_probe(\"[metal_sys_init] /dev/urandom opened successfully\\n\");\n\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        /* Probe: record fread failure */\n        metal_probe(\"[metal_sys_init] fread('/dev/urandom') failed: errno=%d (%s)\\n\",\n                    errno, strerror(errno));\n\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n    } else {\n        /* Probe: record the seed value read from /dev/urandom */\n        metal_probe(\"[metal_sys_init] seed read from /dev/urandom: 0x%08x (%u)\\n\",\n                    seed, seed);\n    }\n    fclose(urandom);\n    srand(seed);\n\n    /* Probe: after srand */\n    metal_probe(\"[metal_sys_init] srand called with seed=0x%08x\\n\", seed);\n\n    result = metal_init_page_sizes();\n    /* Probe: record result of metal_init_page_sizes */\n    metal_probe(\"[metal_sys_init] metal_init_page_sizes() returned %d\\n\", result);\n    if (result < 0)\n        return result;\n\n    result = metal_linux_bus_init();\n    /* Probe: record result of metal_linux_bus_init */\n    metal_probe(\"[metal_sys_init] metal_linux_bus_init() returned %d\\n\", result);\n    if (result < 0)\n        return result;\n\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        /* Probe: record failure to open pagemap, include errno and strerror */\n        metal_probe(\"[metal_sys_init] open('/proc/self/pagemap') failed: return=%d errno=%d (%s)\\n\",\n                    result, errno, strerror(errno));\n\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n    } else {\n        /* Probe: record success and fd value */\n        metal_probe(\"[metal_sys_init] /proc/self/pagemap opened, fd=%d\\n\", result);\n    }\n    _metal.pagemap_fd = result;\n\n    /* Probe: record final pagemap_fd stored in _metal */\n    metal_probe(\"[metal_sys_init] _metal.pagemap_fd=%d\\n\", _metal.pagemap_fd);\n\n    metal_unused(params);\n\n    /* Initialize IRQ handling */\n    metal_linux_irq_init();\n\n    metal_probe(\"[metal_sys_init] completed, returning 0\\n\");\n    return 0;\n}\n"
}