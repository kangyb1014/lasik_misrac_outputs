{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(_metal.page_sizes[index].path, path, PATH_MAX) can read up to PATH_MAX bytes from the source and will write exactly PATH_MAX bytes into the destination. The code contains no proof that the destination buffer _metal.page_sizes[index].path is at least PATH_MAX bytes long, nor that the source 'path' is NUL-terminated within the first PATH_MAX bytes. If the destination array is smaller than PATH_MAX, or if the source does not contain a NUL within PATH_MAX bytes (for example, path points to a smaller buffer or non-terminated region), strncpy will access memory beyond the bounds of the referenced objects and therefore violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/469.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n#include <stdarg.h>\n#include <limits.h>\n#include <fcntl.h>\n#include <unistd.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/469.txt */\nstatic void metal_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/469.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n\n    metal_probe_log(\"ENTER metal_sys_init\");\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n    _metal.tmp_path = tmp_path;\n\n    metal_probe_log(\"tmp_path='%s'\", tmp_path);\n    /* Log platform constants relevant to string handling */\n#ifdef PATH_MAX\n    metal_probe_log(\"PATH_MAX=%d\", (int)PATH_MAX);\n#else\n    metal_probe_log(\"PATH_MAX is not defined\");\n#endif\n\n    /* Log the address of _metal.page_sizes if available, to help\n       reproduce buffer/address relationships when metal_init_page_sizes\n       performs string operations. This avoids dereferencing unknown\n       internals while providing pointer information. */\n    metal_probe_log(\"_metal (addr) = %p\", (void *)&_metal);\n    /* Attempt to log address of page_sizes member; if it doesn't exist\n       compilation will fail in the original environment where _metal is\n       defined. Keeping this log helps correlate with strncpy usage. */\n    metal_probe_log(\"_metal.page_sizes (addr) = %p\", (void *)&_metal.page_sizes);\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        metal_probe_log(\"Failed to open /dev/urandom: %s\", strerror(errno));\n        return -errno;\n    }\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n        metal_probe_log(\"fread(/dev/urandom) <= 0; seed not initialized by fread\");\n    } else {\n        metal_probe_log(\"seed read from /dev/urandom = %u\", seed);\n    }\n    fclose(urandom);\n    srand(seed);\n\n    /* Probe: about to call metal_init_page_sizes which may perform string\n       operations (e.g., strncpy). Log control point so callers can see\n       whether that call completed successfully or returned an error. */\n    metal_probe_log(\"Calling metal_init_page_sizes()\");\n    result = metal_init_page_sizes();\n    metal_probe_log(\"metal_init_page_sizes() returned %d\", result);\n    if (result < 0)\n        return result;\n\n    metal_probe_log(\"Calling metal_linux_bus_init()\");\n    result = metal_linux_bus_init();\n    metal_probe_log(\"metal_linux_bus_init() returned %d\", result);\n    if (result < 0)\n        return result;\n\n    metal_probe_log(\"Opening /proc/self/pagemap\");\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n        metal_probe_log(\"Failed pagemap open: %s\", strerror(errno));\n    }\n    _metal.pagemap_fd = result;\n\n    metal_unused(params);\n\n    /* Initialize IRQ handling */\n    metal_probe_log(\"Calling metal_linux_irq_init()\");\n    metal_linux_irq_init();\n    metal_probe_log(\"EXIT metal_sys_init (return 0)\");\n    return 0;\n}\n"
}