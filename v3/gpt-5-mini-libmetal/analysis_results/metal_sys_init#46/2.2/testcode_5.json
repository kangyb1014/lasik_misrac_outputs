{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_unused(x) expands to do { (x) = (x); } while (0). In metal_sys_init it is invoked as metal_unused(params) where params is a non-volatile function parameter. The self-assignment (params = params) is executed but has no effect on program state for non-volatile objects, so removing it would not affect program behaviour \u2014 it therefore constitutes dead code and violates MISRA C 2023 Rule 2.2. (Note: if x were volatile or the lvalue evaluation had observable side-effects, the assignment would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/462.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "int metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\t/* Probe log for failure to open /dev/urandom */\n\t\t{\n\t\t\tFILE *log = fopen(\"/tmp/logs/462.txt\", \"a\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"metal_sys_init: failed to open /dev/urandom: errno=%d (%s)\\n\", errno, strerror(errno));\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t}\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t\t/* Probe log for failed fread */\n\t\t{\n\t\t\tFILE *log = fopen(\"/tmp/logs/462.txt\", \"a\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"metal_sys_init: fread failed to read seed\\n\");\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t}\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\t/* Probes for the metal_unused(params) invocation to capture the violation scenario.\n\t   We log the pointer value before and after the call and record whether it changed. */\n\t{\n\t\tFILE *log = fopen(\"/tmp/logs/462.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_sys_init: before metal_unused: params=%p\\n\", (void *)params);\n\t\t\tfclose(log);\n\t\t}\n\t}\n\t/* Capture the parameter value before the self-assignment */\n\tconst struct metal_init_params *params_before = params;\n\n\t/* The original code's self-assignment (via macro) is preserved. */\n\tmetal_unused(params);\n\n\t/* Capture the parameter value after the self-assignment */\n\tconst struct metal_init_params *params_after = params;\n\t{\n\t\tFILE *log = fopen(\"/tmp/logs/462.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_sys_init: after metal_unused: params=%p\\n\", (void *)params);\n\t\t\tfprintf(log, \"metal_sys_init: params_before=%p params_after=%p equal=%d\\n\",\n\t\t\t\t(void *)params_before, (void *)params_after,\n\t\t\t\t(params_before == params_after) ? 1 : 0);\n\t\t\tfclose(log);\n\t\t}\n\t}\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n"
}