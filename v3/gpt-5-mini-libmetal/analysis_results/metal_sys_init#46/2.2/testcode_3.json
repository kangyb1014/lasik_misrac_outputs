{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_unused(params) expands to a self-assignment ((params) = (params)), which is an operation executed at run-time but has no effect on program behaviour. Removing that statement would not change the function\u2019s behaviour (params is a non-volatile local parameter), so it constitutes dead code under MISRA C 2023 Rule 2.2. (If the intent is only to suppress unused-parameter warnings, use a cast to void: (void)params; which does not execute a redundant assignment.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/462.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "static void probe_log_params_state(const char *stage,\n                                         const struct metal_init_params *p,\n                                         const void *addr_of_param_var,\n                                         unsigned int seed,\n                                         int seed_valid,\n                                         const char *tmp_path,\n                                         int pagemap_fd)\n{\n    FILE *f = fopen(\"/tmp/logs/462.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_sys_init] %s\\n\", stage);\n    fprintf(f, \" params_ptr=%p\\n\", (const void *)p);\n    fprintf(f, \" &params_variable=%p\\n\", addr_of_param_var);\n    fprintf(f, \" tmp_path=%s\\n\", tmp_path ? tmp_path : \"(null)\");\n    if (seed_valid)\n        fprintf(f, \" seed=%u\\n\", seed);\n    else\n        fprintf(f, \" seed=(uninitialized or insufficient bytes read)\\n\");\n    fprintf(f, \" pagemap_fd=%d\\n\", pagemap_fd);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n    _metal.tmp_path = tmp_path;\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        return -errno;\n    }\n\n    /* Capture fread return so we can log whether seed was actually filled. */\n    size_t __fread_ret = fread(&seed, 1, sizeof(seed), urandom);\n    int __seed_valid = (__fread_ret == sizeof(seed));\n    if (__fread_ret <= 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n    }\n    fclose(urandom);\n    srand(seed);\n\n    result = metal_init_page_sizes();\n    if (result < 0)\n        return result;\n\n    result = metal_linux_bus_init();\n    if (result < 0)\n        return result;\n\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n    }\n    _metal.pagemap_fd = result;\n\n    /* Probe: log state before the metal_unused(...) call */\n    probe_log_params_state(\"before metal_unused\",\n                           params,\n                           (const void *)&params,\n                           seed,\n                           __seed_valid,\n                           tmp_path,\n                           _metal.pagemap_fd);\n\n    /* Keep original call (this expands to a self-assignment). */\n    metal_unused(params);\n\n    /* Probe: log state after the metal_unused(...) call to capture the effect. */\n    probe_log_params_state(\"after metal_unused\",\n                           params,\n                           (const void *)&params,\n                           seed,\n                           __seed_valid,\n                           tmp_path,\n                           _metal.pagemap_fd);\n\n    /* Initialize IRQ handling */\n    metal_linux_irq_init();\n    return 0;\n}\n"
}