{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_unmap:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor (i = 0; i < nents; i++) {\n\t\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t\t}\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No use of any <string.h> functions in this fragment. The loop calls metal_cache_invalidate(sg[i].virt, sg[i].len) for i in [0,nents), so Rule 21.17 (string handling functions not overrunning buffers) is not triggered here. A possible violation scenario (not shown in this fragment) would be if metal_cache_invalidate internally used a string.h routine that accessed beyond the buffer pointed to by sg[i].virt using sg[i].len, or if sg/nents were incorrect causing out-of-bounds access to sg[i] (that would be a separate rules violation), but as written this fragment does not itself violate Rule 21.17."
}