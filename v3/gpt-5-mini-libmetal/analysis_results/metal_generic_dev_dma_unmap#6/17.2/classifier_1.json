{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_unmap:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t struct metal_device *device,\n\t\t\t uint32_t dir,\n\t\t\t struct metal_sg *sg,\n\t\t\t int nents)\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: metal_generic_dev_dma_unmap does not call itself (directly) nor is there any indication of indirect recursion in the shown fragment. The function only calls metal_cache_invalidate in a loop, which is a different function; no function pointers or other calls that would imply a recursive call back to metal_generic_dev_dma_unmap are present in the provided code."
}