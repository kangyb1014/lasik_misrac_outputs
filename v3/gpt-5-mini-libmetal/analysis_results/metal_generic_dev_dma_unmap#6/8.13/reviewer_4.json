{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_unmap code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_unmap.\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct metal_sg *sg' is used only for reading (sg[i].virt and sg[i].len) and is not modified. Under MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible, so the parameter should be declared as 'const struct metal_sg *sg' (or otherwise made const-qualified). The fragment metal_cache_invalidate(sg[i].virt, sg[i].len); only reads members, so keeping 'sg' non-const is a violation. (Note: if metal_cache_invalidate expects a non-const address, the called function's prototype or a cast would need to be addressed appropriately.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In metal_generic_dev_dma_unmap the parameter sg is only read (sg[i].virt and sg[i].len) and the pointed-to objects are not modified, so per MISRA C:2023 Rule 8.13 the pointer should be declared to point to a const-qualified type (e.g. const struct metal_sg *sg). The only practical exceptions would be if it is impossible to make sg const because of called APIs (for example if metal_cache_invalidate is prototyped to take a non-const pointer and cannot be changed). In that case the root problem is the incompatible API; simply leaving sg non-const still violates the intent of Rule 8.13. Recommended fix: change the parameter to const struct metal_sg *sg and, if necessary, update called functions to accept const-qualified pointers (or otherwise justify and document why const cannot be used)."
}