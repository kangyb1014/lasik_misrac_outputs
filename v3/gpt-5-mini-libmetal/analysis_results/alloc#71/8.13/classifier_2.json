{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of alloc:\n```c\nstatic int alloc(void)\n{\n\tvoid *ptr;\n\n\tptr = metal_allocate_memory(1000);\n\tif (!ptr) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\t\treturn errno;\n\t}\n\n\tmetal_free_memory(ptr);\n\n\treturn 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nptr = metal_allocate_memory(1000);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated in this fragment as written. The assignment itself is to a non-const void * that holds newly-allocated (mutable) memory which is later passed to metal_free_memory(ptr). Rule 8.13 concerns pointer declarations/qualification; here making ptr a const-qualified pointer would be inappropriate because the allocated memory is intended to be mutable and/or needs to be passed to a function that takes a non-const void*. A concrete violation scenario would be if metal_allocate_memory returned a pointer to immutable/read\u2011only data (or the allocated data is never modified) but the code assigns it to a non-const pointer (e.g. assigning a const-qualified result to void * without preserving const), or if ptr is never used to modify the pointee and could have been declared as const void * \u2014 in those cases Rule 8.13 would be violated."
}