{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC statement-expressions ({ ... }) and the GCC/Clang extension '##__VA_ARGS__' to remove a comma for empty variadic arguments. Both are compiler-specific extensions (documented GNU extensions), so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/710.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of alloc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of alloc:\n```c\nstatic int alloc(void)\n{\n\tvoid *ptr;\n\n\tptr = metal_allocate_memory(1000);\n\tif (!ptr) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\t\treturn errno;\n\t}\n\n\tmetal_free_memory(ptr);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified alloc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logger that appends control-flow/state information to /tmp/logs/710.txt. */\nstatic void alloc_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/710.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int alloc(void)\n{\n    void *ptr;\n\n    alloc_log(\"alloc: entry\\n\");\n\n    ptr = metal_allocate_memory(1000);\n    alloc_log(\"alloc: metal_allocate_memory(1000) returned %p\\n\", ptr);\n\n    if (!ptr) {\n        /* Log errno and human-readable error to help reproduce the failure. */\n        alloc_log(\"alloc: allocation failed, errno=%d (%s)\\n\", errno, strerror(errno));\n        metal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n        alloc_log(\"alloc: returning errno=%d\\n\", errno);\n        return errno;\n    }\n\n    alloc_log(\"alloc: freeing ptr=%p\\n\", ptr);\n    metal_free_memory(ptr);\n    alloc_log(\"alloc: freed ptr=%p\\n\", ptr);\n\n    alloc_log(\"alloc: returning 0\\n\");\n    return 0;\n}\n"
}