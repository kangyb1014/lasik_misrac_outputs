{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of alloc:\n```c\nstatic int alloc(void)\n{\n\tvoid *ptr;\n\n\tptr = metal_allocate_memory(1000);\n\tif (!ptr) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\t\treturn errno;\n\t}\n\n\tmetal_free_memory(ptr);\n\n\treturn 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function alloc:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The call to metal_log expands a macro that uses compiler language extensions. The macro is defined as: #define metal_log(level, fmt, __VA_ARGS__) ({ if(_metal.common.log_handler && level <= _metal.common.log_level) _metal.common.log_handler(level, metal_fmt(fmt), ##__VA_ARGS__); }) \u2014 this uses the GCC/Clang statement-expression extension ({ ... }) and the GNU empty-__VA_ARGS__ swallowing (##__VA_ARGS__) extension. These are documented compiler extensions, so invoking metal_log constitutes use of language extensions and thus violates MISRA C 2023 Rule 1.2."
}