{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to metal_log expands a macro that uses compiler language extensions. The macro is defined as: #define metal_log(level, fmt, __VA_ARGS__) ({ if(_metal.common.log_handler && level <= _metal.common.log_level) _metal.common.log_handler(level, metal_fmt(fmt), ##__VA_ARGS__); }) \u2014 this uses the GCC/Clang statement-expression extension ({ ... }) and the GNU empty-__VA_ARGS__ swallowing (##__VA_ARGS__) extension. These are documented compiler extensions, so invoking metal_log constitutes use of language extensions and thus violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/710.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of alloc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of alloc:\n```c\nstatic int alloc(void)\n{\n\tvoid *ptr;\n\n\tptr = metal_allocate_memory(1000);\n\tif (!ptr) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\t\treturn errno;\n\t}\n\n\tmetal_free_memory(ptr);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified alloc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <time.h>\n#include <stddef.h>\n\n/*\n * Declarations to allow this translation unit to compile standalone.\n * If the real build provides these (for example metal_log as a macro),\n * the guards below prevent redefinition conflicts.\n */\n#ifndef metal_log\nint metal_log(int level, const char *fmt, ...);\n#endif\n\n#ifndef METAL_LOG_DEBUG\nenum { METAL_LOG_DEBUG = 3 };\n#endif\n\nvoid *metal_allocate_memory(size_t size);\nvoid metal_free_memory(void *ptr);\n\n/* Probe helper: append a structured log line to the file. */\nstatic void probe_log(const char *event, void *ptr, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/710.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging fails, do not change program behavior. */\n        return;\n    }\n\n    /* Timestamp for better tracing. */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL) {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0) {\n            fprintf(f, \"%s \", timestr);\n        }\n    }\n\n    fprintf(f, \"probe: event=%s, func=%s, ptr=%p, errno=%d\\n\", event, __func__, ptr, err);\n    fclose(f);\n}\n\nstatic int alloc(void)\n{\n    void *ptr;\n\n    probe_log(\"enter_alloc\", NULL, 0);\n\n    ptr = metal_allocate_memory(1000);\n    probe_log(\"after_allocate\", ptr, errno);\n\n    if (!ptr) {\n        /* Log just before invoking the potentially-extension-using macro. */\n        probe_log(\"before_metal_log\", ptr, errno);\n\n        /* Original call retained to demonstrate the violation scenario. */\n        metal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\n        /* Log immediately after the call so the trace shows the control path. */\n        probe_log(\"after_metal_log\", ptr, errno);\n        return errno;\n    }\n\n    metal_free_memory(ptr);\n    probe_log(\"after_free\", ptr, 0);\n\n    probe_log(\"exit_alloc_success\", ptr, 0);\n    return 0;\n}\n"
}