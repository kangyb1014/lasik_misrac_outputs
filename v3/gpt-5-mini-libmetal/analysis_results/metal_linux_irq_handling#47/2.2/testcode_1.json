{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(pfds, 0, MAX_IRQS * sizeof(struct pollfd)); is dead: every pollfd entry actually used by poll is explicitly initialized afterwards (pfds[0] is set and pfds[1..j-1] are set in the bitmap loop), and poll is called with nfds == j. Removing the memset does not change program behaviour, so the operation is executed but unnecessary. (Also note the memset length uses MAX_IRQS while the allocation used FD_SETSIZE, but that is an unrelated sizing inconsistency.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_handling code that contains useful probe functions that print useful logs to a file \"/tmp/logs/472.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_handling as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_handling:\n```c\nstatic void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\n\t(void)args;\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t      linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\tj++;\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_handling code.\n",
  "test_code": "static FILE *probe_log_open(void)\n{\n    return fopen(\"/tmp/logs/472.txt\", \"a\");\n}\n\nstatic void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\n\t(void)args;\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\t/* Probe: log allocation details */\n\t{\n\t\tFILE *lf = probe_log_open();\n\t\tif (lf) {\n\t\t\tfprintf(lf, \"[probe] %s: allocated pfds=%p elems=%d elem_size=%zu total_bytes=%zu\\n\",\n\t\t\t\t__func__, (void *)pfds, FD_SETSIZE,\n\t\t\t\tsizeof(struct pollfd), (size_t)FD_SETSIZE * sizeof(struct pollfd));\n\t\t\tfclose(lf);\n\t\t}\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\t/* Probe: log that we are about to memset (length information) */\n\t\t{\n\t\t\tFILE *lf = probe_log_open();\n\t\t\tif (lf) {\n\t\t\t\tfprintf(lf, \"[probe] %s: about to memset pfds=%p len=%zu (MAX_IRQS * sizeof(struct pollfd))\\n\",\n\t\t\t\t\t__func__, (void *)pfds, (size_t)MAX_IRQS * sizeof(struct pollfd));\n\t\t\t\tfclose(lf);\n\t\t\t}\n\t\t}\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\n\t\t/* Probe: inspect the first entries after memset */\n\t\t{\n\t\t\tFILE *lf = probe_log_open();\n\t\t\tif (lf) {\n\t\t\t\tint k;\n\t\t\t\tfprintf(lf, \"[probe] %s: after memset pfds=%p (dump first 4 entries)\\n\",\n\t\t\t\t\t__func__, (void *)pfds);\n\t\t\t\tfor (k = 0; k < 4; k++) {\n\t\t\t\t\tfprintf(lf, \"[probe] %s: pfds[%d]: fd=%d events=0x%x revents=0x%x\\n\",\n\t\t\t\t\t\t__func__, k, pfds[k].fd, pfds[k].events, pfds[k].revents);\n\t\t\t\t}\n\t\t\t\tfclose(lf);\n\t\t\t}\n\t\t}\n\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\n\t\t/* Probe: log pfds[0] set and initial j */\n\t\t{\n\t\t\tFILE *lf = probe_log_open();\n\t\t\tif (lf) {\n\t\t\t\tfprintf(lf, \"[probe] %s: set pfds[0].fd=%d events=0x%x j=%d\\n\",\n\t\t\t\t\t__func__, pfds[0].fd, pfds[0].events, j);\n\t\t\t\tfclose(lf);\n\t\t\t}\n\t\t}\n\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t      linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\n\t\t\t/* Probe: log each pfds entry we populate */\n\t\t\t{\n\t\t\t\tFILE *lf = probe_log_open();\n\t\t\t\tif (lf) {\n\t\t\t\t\tfprintf(lf, \"[probe] %s: populate pfds[%d] with fd=%d\\n\",\n\t\t\t\t\t\t__func__, j, i);\n\t\t\t\t\tfclose(lf);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tj++;\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\n\t\t/* Probe: log pfds contents that will be passed to poll */\n\t\t{\n\t\t\tFILE *lf = probe_log_open();\n\t\t\tif (lf) {\n\t\t\t\tint k;\n\t\t\t\tfprintf(lf, \"[probe] %s: calling poll with nfds=j=%d (dump entries)\\n\",\n\t\t\t\t\t__func__, j);\n\t\t\t\tfor (k = 0; k < j; k++) {\n\t\t\t\t\tfprintf(lf, \"[probe] %s: pfds[%d]: fd=%d events=0x%x revents=0x%x\\n\",\n\t\t\t\t\t\t__func__, k, pfds[k].fd, pfds[k].events, pfds[k].revents);\n\t\t\t\t}\n\t\t\t\tfclose(lf);\n\t\t\t}\n\t\t}\n\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\t/* Probe: log poll return value */\n\t\t{\n\t\t\tFILE *lf = probe_log_open();\n\t\t\tif (lf) {\n\t\t\t\tfprintf(lf, \"[probe] %s: poll returned ret=%d errno=%d\\n\",\n\t\t\t\t\t__func__, ret, errno);\n\t\t\t\tfclose(lf);\n\t\t\t}\n\t\t}\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\t/* Probe: log which pfds[i] we are inspecting and its revents */\n\t\t\t{\n\t\t\t\tFILE *lf = probe_log_open();\n\t\t\t\tif (lf) {\n\t\t\t\t\tfprintf(lf, \"[probe] %s: handling index=%d fd=%d revents=0x%x\\n\",\n\t\t\t\t\t\t__func__, i, pfds[i].fd, pfds[i].revents);\n\t\t\t\t\tfclose(lf);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0) {\n\t\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t\t\t\t/* Probe: log failed read */\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tFILE *lf = probe_log_open();\n\t\t\t\t\t\t\tif (lf) {\n\t\t\t\t\t\t\t\tfprintf(lf, \"[probe] %s: read failed for notify fd=%d errno=%d\\n\",\n\t\t\t\t\t\t\t\t\t__func__, pfds[i].fd, errno);\n\t\t\t\t\t\t\t\tfclose(lf);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\n\t\t\t\t/* Probe: log that we are about to call metal_irq_handle for fd */\n\t\t\t\t{\n\t\t\t\t\tFILE *lf = probe_log_open();\n\t\t\t\t\tif (lf) {\n\t\t\t\t\t\tfprintf(lf, \"[probe] %s: calling metal_irq_handle for fd=%d dev=%p\\n\",\n\t\t\t\t\t\t\t__func__, fd, (void *)dev);\n\t\t\t\t\t\tfclose(lf);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\treturn NULL;\n}\n"
}