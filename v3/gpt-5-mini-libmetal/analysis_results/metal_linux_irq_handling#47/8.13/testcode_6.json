{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes dev (struct metal_device *) and dev->bus (struct metal_bus *) to the callback dev_irq_ack, but neither the caller nor this fragment modifies the pointed-to objects. The pointers in struct metal_device (bus) and the dev_irq_ack prototype are not const-qualified even though they could be (e.g. const struct metal_bus * and const struct metal_device *), so the pointer types are not const-qualified where possible. For example, in this fragment dev->bus is used only for a read-only callback and could be a pointer to const, but it is declared and passed as a non-const pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_handling code that contains useful probe functions that print useful logs to a file \"/tmp/logs/473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_handling as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_handling:\n```c\nstatic void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\n\t(void)args;\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t      linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\tj++;\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_handling code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <string.h>\n\n/* Probe helper: append a single formatted log line to /tmp/logs/473.txt\n * Keep this small and non-intrusive so original logic is preserved. */\nstatic void metal_probe_log_irq(const char *tag,\n                                const struct metal_bus *bus,\n                                const struct metal_device *dev,\n                                int fd)\n{\n    int out = open(\"/tmp/logs/473.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (out < 0)\n        return;\n\n    char buf[256];\n    int len = snprintf(buf, sizeof(buf), \"%s: tag=%s bus=%p dev=%p fd=%d\\n\",\n                       __func__, tag, (const void *)bus, (const void *)dev, fd);\n    if (len > 0)\n        (void)write(out, buf, (size_t)len);\n    (void)close(out);\n}\n\nstatic void *metal_linux_irq_handling(void *args)\n{\n    struct sched_param param;\n    uint64_t val;\n    int ret;\n    int i, j, pfds_total;\n    struct pollfd *pfds;\n\n    (void)args;\n\n    pfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n    if (!pfds) {\n        metal_log(METAL_LOG_ERROR,\n                  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n        return NULL;\n    }\n\n    param.sched_priority = sched_get_priority_max(SCHED_FIFO);\n    /* Ignore the set scheduler error */\n    ret = sched_setscheduler(0, SCHED_FIFO, &param);\n    if (ret) {\n        metal_log(METAL_LOG_WARNING,\n                  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n                  strerror(ret));\n    }\n\n    while (1) {\n        metal_mutex_acquire(&irq_lock);\n        if (irq_handling_stop) {\n            /* Killing this IRQ handling thread */\n            metal_mutex_release(&irq_lock);\n            break;\n        }\n\n        /* Get the fdset */\n        memset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n        pfds[0].fd = irq_notify_fd;\n        pfds[0].events = POLLIN;\n        j = 1;\n        metal_bitmap_for_each_set_bit(irqs_enabled, i,\n                                      linux_irq_cntr.irq_num) {\n            pfds[j].fd = i;\n            pfds[j].events = POLLIN;\n            j++;\n        }\n        metal_mutex_release(&irq_lock);\n        /* Wait for interrupt */\n        ret = poll(pfds, j, -1);\n        if (ret < 0) {\n            metal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n                      __func__, strerror(errno));\n            break;\n        }\n        /* Waken up from interrupt */\n        pfds_total = j;\n        for (i = 0; i < pfds_total; i++) {\n            if ((pfds[i].fd == irq_notify_fd) &&\n                (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n                /* IRQ registration change notification */\n                if (read(pfds[i].fd,\n                         (void *)&val, sizeof(uint64_t)) < 0)\n                    metal_log(METAL_LOG_ERROR,\n                              \"%s, read irq fd %d failed\\n\",\n                              __func__, pfds[i].fd);\n            } else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n                struct metal_device *dev = NULL;\n                int irq_handled = 0;\n                int fd;\n\n                fd = pfds[i].fd;\n                dev = irqs_devs[fd];\n\n                /* Probe: log wake/poll event */\n                metal_probe_log_irq(\"POLL_WAKE\",\n                                    (dev ? dev->bus : NULL),\n                                    dev, fd);\n\n                metal_mutex_acquire(&irq_lock);\n                if (metal_irq_handle(&irqs[fd], fd)\n                    == METAL_IRQ_HANDLED)\n                    irq_handled = 1;\n\n                if (irq_handled) {\n                    /* Additional probes around the dev_irq_ack call to capture\n                     * the pointers and control flow. We intentionally pass\n                     * non-const pointers to a probe that takes const to avoid\n                     * changing the original prototypes or behavior. */\n                    if (!dev) {\n                        metal_probe_log_irq(\"IRQ_HANDLED_NO_DEV\",\n                                            NULL, NULL, fd);\n                    } else if (!dev->bus) {\n                        metal_probe_log_irq(\"IRQ_HANDLED_NO_BUS\",\n                                            NULL, dev, fd);\n                    } else if (dev->bus->ops.dev_irq_ack) {\n                        /* Log just before calling the ack callback */\n                        metal_probe_log_irq(\"IRQ_ACK_CALL_PRE\",\n                                            dev->bus, dev, fd);\n\n                        dev->bus->ops.dev_irq_ack(dev->bus, dev, fd);\n\n                        /* Log immediately after calling the ack callback */\n                        metal_probe_log_irq(\"IRQ_ACK_CALL_POST\",\n                                            dev->bus, dev, fd);\n                    } else {\n                        metal_probe_log_irq(\"IRQ_HANDLED_NO_ACK_OP\",\n                                            dev->bus, dev, fd);\n                    }\n                }\n                metal_mutex_release(&irq_lock);\n            } else if (pfds[i].revents) {\n                metal_log(METAL_LOG_DEBUG,\n                          \"%s: poll unexpected. fd %d: %d\\n\",\n                          __func__,\n                          pfds[i].fd, pfds[i].revents);\n\n                /* Log unexpected poll event for diagnostics */\n                metal_probe_log_irq(\"POLL_UNEXPECTED\",\n                                    NULL, NULL, pfds[i].fd);\n            }\n        }\n    }\n    free(pfds);\n    return NULL;\n}\n"
}