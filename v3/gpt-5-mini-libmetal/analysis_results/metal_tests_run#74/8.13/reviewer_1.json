{
  "user_message": "An agent A claimed that the following metal_tests_run code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_tests_run.\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe iterator variable 'node' is declared as a pointer to a non-const structure: 'struct metal_list *node;'. In the function it is only used to traverse/read the list (passed to metal_list_for_each and used with metal_container_of) and not to modify the pointed-to list nodes, so it could and should be declared as 'const struct metal_list *node;'. Therefore Rule 8.13 is violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n-- metal_tests_run entry --\nparams ptr = (nil)\neffective params ptr = 0x7ffec2a9a1f0, log_level before init = 6\nmetal_init returned 0\niteration 1: node ptr = 0x559f4ca7a0e0\n  test_case ptr = 0x559f4ca7a0e0\n  test_case->name ptr = 0x559f4ca76082, name = 'atomic'\n  test_case->test fn ptr = 0x559f4ca70881\n  pad ptr = 0x559f4ca765d6 (dots + 6)\n  test returned 0 (no error)\niteration 2: node ptr = 0x559f4ca7a260\n  test_case ptr = 0x559f4ca7a260\n  test_case->name ptr = 0x559f4ca760ec, name = 'mutex'\n  test_case->test fn ptr = 0x559f4ca70e8e\n  pad ptr = 0x559f4ca765d5 (dots + 5)\n  test returned 0 (no error)\niteration 3: node ptr = 0x559f4ca7a620\n  test_case ptr = 0x559f4ca7a620\n  test_case->name ptr = 0x559f4ca7619d, name = 'shmem'\n  test_case->test fn ptr = 0x559f4ca71745\n  pad ptr = 0x559f4ca765d5 (dots + 5)\n  test returned 0 (no error)\niteration 4: node ptr = 0x559f4ca7a9a0\n  test_case ptr = 0x559f4ca7a9a0\n  test_case->name ptr = 0x559f4ca7624f, name = 'condition'\n  test_case->test fn ptr = 0x559f4ca71ddf\n  pad ptr = 0x559f4ca765d9 (dots + 9)\n  test returned 0 (no error)\niteration 5: node ptr = 0x559f4ca7ae40\n  test_case ptr = 0x559f4ca7ae40\n  test_case->name ptr = 0x559f4ca76382, name = 'spinlock'\n  test_case->test fn ptr = 0x559f4ca727d2\n  pad ptr = 0x559f4ca765d8 (dots + 8)\n  test returned 0 (no error)\niteration 6: node ptr = 0x559f4ca7b0a0\n  test_case ptr = 0x559f4ca7b0a0\n  test_case->name ptr = 0x559f4ca7640b, name = 'alloc'\n  test_case->test fn ptr = 0x559f4ca72a49\n  pad ptr = 0x559f4ca765d5 (dots + 5)\n  test returned 0 (no error)\niteration 7: node ptr = 0x559f4ca7b300\n  test_case ptr = 0x559f4ca7b300\n  test_case->name ptr = 0x559f4ca7650a, name = 'irq'\n  test_case->test fn ptr = 0x559f4ca72c0f\n  pad ptr = 0x559f4ca765d3 (dots + 3)\n  test returned 0 (no error)\niteration 8: node ptr = 0x559f4ca7b4c0\n  test_case ptr = 0x559f4ca7b4c0\n  test_case->name ptr = 0x559f4ca76577, name = 'version'\n  test_case->test fn ptr = 0x559f4ca7305a\n  pad ptr = 0x559f4ca765d7 (dots + 7)\n  test returned 0 (no error)\n-- iteration summary: total iterations = 8, errors = 0 --\n-- metal_tests_run entry --\nparams ptr = (nil)\neffective params ptr = 0x7ffc9d0bd280, log_level before init = 6\nmetal_init returned 0\niteration 1: node ptr = 0x55c9dcb670e0\n  test_case ptr = 0x55c9dcb670e0\n  test_case->name ptr = 0x55c9dcb61082, name = 'atomic'\n  test_case->test fn ptr = 0x55c9dcb52c41\n  pad ptr = 0x55c9dcb615d6 (dots + 6)\n  test returned 0 (no error)\niteration 2: node ptr = 0x55c9dcb67260\n  test_case ptr = 0x55c9dcb67260\n  test_case->name ptr = 0x55c9dcb610ec, name = 'mutex'\n  test_case->test fn ptr = 0x55c9dcb5324e\n  pad ptr = 0x55c9dcb615d5 (dots + 5)\n  test returned 0 (no error)\niteration 3: node ptr = 0x55c9dcb67620\n  test_case ptr = 0x55c9dcb67620\n  test_case->name ptr = 0x55c9dcb6119d, name = 'shmem'\n  test_case->test fn ptr = 0x55c9dcb53b05\n  pad ptr = 0x55c9dcb615d5 (dots + 5)\n  test returned 0 (no error)\niteration 4: node ptr = 0x55c9dcb679a0\n  test_case ptr = 0x55c9dcb679a0\n  test_case->name ptr = 0x55c9dcb6124f, name = 'condition'\n  test_case->test fn ptr = 0x55c9dcb5419f\n  pad ptr = 0x55c9dcb615d9 (dots + 9)\n  test returned 0 (no error)\niteration 5: node ptr = 0x55c9dcb67e40\n  test_case ptr = 0x55c9dcb67e40\n  test_case->name ptr = 0x55c9dcb61382, name = 'spinlock'\n  test_case->test fn ptr = 0x55c9dcb54b92\n  pad ptr = 0x55c9dcb615d8 (dots + 8)\n  test returned 0 (no error)\niteration 6: node ptr = 0x55c9dcb680a0\n  test_case ptr = 0x55c9dcb680a0\n  test_case->name ptr = 0x55c9dcb6140b, name = 'alloc'\n  test_case->test fn ptr = 0x55c9dcb54e09\n  pad ptr = 0x55c9dcb615d5 (dots + 5)\n  test returned 0 (no error)\niteration 7: node ptr = 0x55c9dcb68300\n  test_case ptr = 0x55c9dcb68300\n  test_case->name ptr = 0x55c9dcb6150a, name = 'irq'\n  test_case->test fn ptr = 0x55c9dcb54fcf\n  pad ptr = 0x55c9dcb615d3 (dots + 3)\n  test returned 0 (no error)\niteration 8: node ptr = 0x55c9dcb684c0\n  test_case ptr = 0x55c9dcb684c0\n  test_case->name ptr = 0x55c9dcb61577, name = 'version'\n  test_case->test fn ptr = 0x55c9dcb5541a\n  pad ptr = 0x55c9dcb615d7 (dots + 7)\n  test \n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_tests_run:\nstruct metal_init_params {\n\n\t/** log message handler (defaults to stderr). */\n\tmetal_log_handler\t\tlog_handler;\n\n\t/** default log message level (defaults to emergency). */\n\tenum metal_log_level\t\tlog_level;\n}\n...\n#define METAL_INIT_DEFAULTS \\\n{.log_handler=metal_default_log_handler,.log_level=METAL_LOG_INFO,\\\n}\n...\nstruct metal_test_case {\n\tstruct metal_list node;\n\tconst char *name;\n\ttest_func_t test;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. The iterator 'node' is only used to traverse/read the list and never used to modify the pointed-to list nodes, so it could be declared as const struct metal_list *node. Under MISRA C:2023 Rule 8.13 (\u201cA pointer should point to a const\u2011qualified type whenever possible\u201d) the current non\u2011const declaration is a violation. Note: converting node to const may require also making test_case a pointer-to-const (const struct metal_test_case *test_case) because metal_container_of(node, ...) yields a pointer qualified by node\u2019s const; assigning that to a non-const test_case would drop const qualification. Adjusting those declarations (or otherwise documenting/justifying the non-const use) resolves the violation."
}