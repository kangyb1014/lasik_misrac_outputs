{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'test_case' is declared as 'struct metal_test_case *test_case;' but within metal_tests_run it is only used for read-only access (reading test_case->name and invoking the test function via test_case->test()). There are no writes through this pointer. Per MISRA C 2023 Rule 8.13 it should therefore be declared as a pointer to a const-qualified type, e.g. 'const struct metal_test_case *test_case;'. Assigning the result of metal_container_of (which yields a non-const pointer) to a const-qualified pointer is allowed, and making this change prevents accidental modification of the pointed-to object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *logf = NULL;\n\n\t/* Open probe log file (best-effort). */\n\tlogf = fopen(\"/tmp/logs/743.txt\", \"a\");\n\tif (logf)\n\t{\n\t\tfprintf(logf, \"--- metal_tests_run start ---\\n\");\n\t\tfprintf(logf, \"params pointer: %p\\n\", (void *)params);\n\t\tfflush(logf);\n\t}\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tif (logf)\n\t{\n\t\tfprintf(logf, \"effective params pointer: %p\\n\", (void *)params);\n\t\t/* Attempt to log the incoming log_level if readable */\n\t\tfprintf(logf, \"params->log_level (before): %d\\n\", params->log_level);\n\t\tfflush(logf);\n\t}\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\n\tif (logf)\n\t{\n\t\tfprintf(logf, \"metal_init returned: %d\\n\", error);\n\t\tfflush(logf);\n\t}\n\n\tif (error)\n\t{\n\t\tif (logf)\n\t\t{\n\t\t\tfprintf(logf, \"--- metal_tests_run aborting due to init error ---\\n\\n\");\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn error;\n\t}\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\t/* Log the node before extracting the containing test case */\n\t\tif (logf)\n\t\t{\n\t\t\tfprintf(logf, \"loop node pointer: %p\\n\", (void *)node);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\n\t\t/* Probe: log the obtained test_case pointer and its name */\n\t\tif (logf)\n\t\t{\n\t\t\tfprintf(logf, \"obtained test_case pointer: %p\\n\", (void *)test_case);\n\t\t\tif (test_case && test_case->name)\n\t\t\t{\n\t\t\t\tfprintf(logf, \"test_case->name: '%s'\\n\", test_case->name);\n\t\t\t\tfprintf(logf, \"strlen(name): %zu\\n\", strlen(test_case->name));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfprintf(logf, \"test_case or test_case->name is NULL\\n\");\n\t\t\t}\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tpad = dots + strlen(test_case->name);\n\n\t\tif (logf)\n\t\t{\n\t\t\tfprintf(logf, \"dots base pointer: %p\\n\", (const void *)dots);\n\t\t\tfprintf(logf, \"pad pointer: %p (offset %td)\\n\", (const void *)pad,\n\t\t\t\tpad - dots);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\n\t\t/* Log before invoking the test function */\n\t\tif (logf)\n\t\t{\n\t\t\tfprintf(logf, \"invoking test_case->test() for '%s'\\n\", test_case->name);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\terror = test_case->test();\n\n\t\t/* Log the result of the test invocation */\n\t\tif (logf)\n\t\t{\n\t\t\tfprintf(logf, \"test '%s' returned error code: %d\\n\", test_case->name, error);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t{\n\t\t\terrors++;\n\t\t\tif (logf)\n\t\t\t{\n\t\t\t\tfprintf(logf, \"incremented errors counter to %d\\n\", errors);\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t}\n\t}\n\n\tmetal_finish();\n\n\tif (logf)\n\t{\n\t\tfprintf(logf, \"metal_finish called\\n\");\n\t\tfprintf(logf, \"final errors: %d\\n\", errors);\n\t\tfprintf(logf, \"--- metal_tests_run end ---\\n\\n\");\n\t\tfclose(logf);\n\t}\n\n\treturn errors;\n}\n"
}