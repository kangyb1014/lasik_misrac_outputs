{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes pad = dots + strlen(test_case->name) and later passes pad as a %s argument to metal_log. If strlen(test_case->name) > strlen(dots) (for example, test_case->name is 40 chars while dots has 34), pad will point beyond the end of the dots array and the subsequent %s will read out-of-bounds. This can result in accesses beyond the bounds of the object referenced by the pointer parameter to the string-handling/printing routine, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/749.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper: append formatted logs to /tmp/logs/749.txt.\n * Kept minimal and re-entrant by opening/closing the file on each call.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/749.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nint metal_tests_run(struct metal_init_params *params)\n{\n    struct metal_init_params dparams = METAL_INIT_DEFAULTS;\n    struct metal_test_case *test_case;\n    struct metal_list *node;\n    int error, errors = 0;\n    const char *dots = \"..................................\";\n    const char *pad;\n\n    if (!params)\n        params = &dparams;\n\n    params->log_level = METAL_LOG_DEBUG;\n    error = metal_init(params);\n    if (error)\n        return error;\n\n    metal_list_for_each(&test_cases, node) {\n        test_case = metal_container_of(node, struct metal_test_case,\n                                       node);\n\n        /* Capture lengths and pointer arithmetic before using pad. */\n        size_t name_len = strlen(test_case->name);\n        size_t dots_len = strlen(dots);\n        ptrdiff_t offset = (ptrdiff_t)name_len; /* offset into dots */\n        ptrdiff_t diff = (ptrdiff_t)name_len - (ptrdiff_t)dots_len;\n        const void *computed_pad_ptr = (const void *)(dots + name_len);\n\n        probe_log(\"[probe] running test case capture: name='%s' name_len=%zu dots_len=%zu offset=%td diff=%td pad_ptr=%p\\n\",\n                  test_case->name, name_len, dots_len, offset, diff, computed_pad_ptr);\n\n        /* Preserve original logic: compute pad exactly as before. */\n        pad = dots + strlen(test_case->name);\n\n        /* Additional probe immediately before the normal log/execute path. */\n        probe_log(\"[probe] about to call metal_log for start of test '%s' (pad=%p, oob=%s)\\n\",\n                  test_case->name, (const void *)pad, (diff > 0) ? \"YES\" : \"NO\");\n\n        metal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n        error = test_case->test();\n\n        /* Probe the result logging and whether pad is out-of-bounds.\n         * Do not change the subsequent call that may reproduce the issue.\n         */\n        probe_log(\"[probe] test finished: name='%s' error=%d pad=%p (name_len=%zu dots_len=%zu oob=%s)\\n\",\n                  test_case->name, error, (const void *)pad, name_len, dots_len, (diff > 0) ? \"YES\" : \"NO\");\n\n        metal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n               test_case->name, pad,\n               error ? \"fail\" : \"pass\",\n               error ? \" - error: \" : \"\",\n               error ? strerror(-error) : \"\");\n        if (error)\n            errors++;\n    }\n\n    metal_finish();\n\n    return errors;\n}\n"
}