{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code can cause out-of-bounds accesses of objects used by string functions. strlen(test_case->name) will scan test_case->name until a NUL; if test_case->name is not NUL-terminated (or its allocated length is less than the scanned characters) strlen reads beyond its object. Also pad = dots + strlen(test_case->name) can point past the end of the dots literal when strlen(test_case->name) > strlen(dots); later passing pad to %s causes reading beyond the bounds of the dots object. Example: if dots is 34 chars and test_case->name is 50 chars, pad = dots + 50 points 16 bytes past dots and the %s format will read out-of-bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/749.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\t/* Log file for probes to reproduce/report the violation scenario */\n\tFILE *logf = fopen(\"/tmp/logs/749.txt\", \"a\");\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_tests_run: metal_init returned error=%d\\n\", error);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn error;\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"metal_tests_run: start params=%p, test_cases_list=%p\\n\",\n\t\t\t(void *)params, (void *)&test_cases);\n\t\tfflush(logf);\n\t}\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\n\t\t/* Probe: capture lengths and pointer arithmetic used in the code. */\n\t\t/* Compute length once (this mirrors the original code's behavior). */\n\t\tsize_t name_len = strlen(test_case->name);\n\t\tsize_t dots_len = strlen(dots);\n\t\tpad = dots + name_len;\n\n\t\tif (logf) {\n\t\t\t/* Log pointer values, lengths and computed pad. */\n\t\t\tfprintf(logf, \"-- test_case=%p name_ptr=%p name_len=%zu dots_ptr=%p dots_len=%zu pad_ptr=%p pad_offset=%td\\n\",\n\t\t\t\t(void *)test_case, (void *)test_case->name, name_len,\n\t\t\t\t(void *)dots, dots_len, (void *)pad,\n\t\t\t\t(ptrdiff_t)(pad - dots));\n\n\t\t\t/* Warn when pad goes past the end of the dots literal. */\n\t\t\tif (name_len > dots_len) {\n\t\t\t\tfprintf(logf, \"WARNING: computed pad (dots + name_len) is past end of dots literal (name_len=%zu > dots_len=%zu)\\n\",\n\t\t\t\t\tname_len, dots_len);\n\t\t\t}\n\n\t\t\t/* Also log a truncated preview of the name and dots contents to help reproduce. */\n\t\t\t{\n\t\t\t\tsize_t preview = name_len < 200 ? name_len : 200;\n\t\t\t\tfprintf(logf, \"name_preview(0..%zu): \", preview);\n\t\t\t\t/* Writing via %%.*s to limit output to preview bytes (mirrors original runtime string access) */\n\t\t\t\tfprintf(logf, \"%.*s\", (int)preview, test_case->name);\n\t\t\t\tfprintf(logf, \"\\n\");\n\t\t\t\tfprintf(logf, \"dots_preview: %s\\n\", dots);\n\t\t\t}\n\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"test_case result: name=%p error=%d\\n\", (void *)test_case->name, error);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\tif (logf) {\n\t\tfprintf(logf, \"metal_tests_run: finished, total_errors=%d\\n\", errors);\n\t\tfclose(logf);\n\t}\n\n\treturn errors;\n}\n"
}