{
  "user_message": "An agent A claimed that the following metal_tests_run code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_tests_run.\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWhen the function is called with params == NULL, the statement 'params = &dparams;' assigns a new value to the parameter variable 'params' (i.e. modifies the pointer parameter). MISRA C 2023 Rule 17.8 forbids modifying a function parameter itself (the object referred to by a pointer may be modified, but not the pointer). Therefore this fragment violates Rule 17.8. Suggested fix: use a separate local pointer (e.g. 'struct metal_init_params *p = params ? params : &dparams;') and use p thereafter.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER metal_tests_run: params=(nil), &dparams=0x7fff0a141f40, sizeof(dparams)=16\nparams is NULL before assignment; assigning params = &dparams\nparams after assignment: params=0x7fff0a141f40 (should equal &dparams=0x7fff0a141f40)\nSetting params->log_level to METAL_LOG_DEBUG (params=0x7fff0a141f40)\nmetal_init(params=0x7fff0a141f40) returned 0\nAbout to run test_case at 0x5627bef5f0e0 with name='atomic'\ntest_case 'atomic' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x5627bef5f260 with name='mutex'\ntest_case 'mutex' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x5627bef5f620 with name='shmem'\ntest_case 'shmem' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x5627bef5f9a0 with name='condition'\ntest_case 'condition' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x5627bef5fe40 with name='spinlock'\ntest_case 'spinlock' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x5627bef600a0 with name='alloc'\ntest_case 'alloc' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x5627bef60300 with name='irq'\ntest_case 'irq' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x5627bef604c0 with name='version'\ntest_case 'version' returned 0\nAccumulated errors so far: 0\nmetal_finish called; returning errors=0\nENTER metal_tests_run: params=(nil), &dparams=0x7ffcf17cbe20, sizeof(dparams)=16\nparams is NULL before assignment; assigning params = &dparams\nparams after assignment: params=0x7ffcf17cbe20 (should equal &dparams=0x7ffcf17cbe20)\nSetting params->log_level to METAL_LOG_DEBUG (params=0x7ffcf17cbe20)\nmetal_init(params=0x7ffcf17cbe20) returned 0\nAbout to run test_case at 0x55d2645390e0 with name='atomic'\ntest_case 'atomic' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x55d264539260 with name='mutex'\ntest_case 'mutex' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x55d264539620 with name='shmem'\ntest_case 'shmem' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x55d2645399a0 with name='condition'\ntest_case 'condition' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x55d264539e40 with name='spinlock'\ntest_case 'spinlock' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x55d26453a0a0 with name='alloc'\ntest_case 'alloc' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x55d26453a300 with name='irq'\ntest_case 'irq' returned 0\nAccumulated errors so far: 0\nAbout to run test_case at 0x55d26453a4c0 with name='version'\ntest_case 'version' returned 0\nAccumulated errors so far: 0\nmetal_finish called; returning errors=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_tests_run:\nstruct metal_init_params {\n\n\t/** log message handler (defaults to stderr). */\n\tmetal_log_handler\t\tlog_handler;\n\n\t/** default log message level (defaults to emergency). */\n\tenum metal_log_level\t\tlog_level;\n}\n...\n#define METAL_INIT_DEFAULTS \\\n{.log_handler=metal_default_log_handler,.log_level=METAL_LOG_INFO,\\\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 forbids modifying a function parameter itself; while the object pointed to by a pointer parameter may be changed, the pointer value shall not be assigned to. In metal_tests_run the statement\n\n    if (!params)\n        params = &dparams;\n\nassigns a new value to the parameter variable params (the pointer itself), which violates Rule 17.8. The subsequent params->log_level = ... is allowed (it modifies the pointee, not the pointer). The recommended fix from the agent (use a local pointer such as struct metal_init_params *p = params ? params : &dparams; and use p thereafter) is appropriate."
}