{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the result of hugetlbfs_find_path_for_size(sizes[i]) as the path argument to metal_add_page_size. If hugetlbfs_find_path_for_size() returns a pointer to immutable storage (const char *) but metal_add_page_size() is declared to take a non-const char * (i.e. void metal_add_page_size(char *path, ...)), then the code violates MISRA C 2023 Rule 8.13 because a pointer to a non-const-qualified type is used where a const-qualified pointer should be used (the function does not need to modify the path). In that scenario metal_add_page_size should instead accept a const char * to avoid allowing modification of the pointed-to data. Note: if both the finder and metal_add_page_size already use const char * (or the finder returns char * and modification is intended), then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helpers: append diagnostic info to /tmp/logs/453.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/453.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_log_path(const char *label, const char *path)\n{\n    if (path) {\n        /* Print address and a short preview of the string to help identify immutable storage */\n        char preview[128] = \"\";\n        strncpy(preview, path, sizeof(preview) - 1);\n        probe_log(\"%s: ptr=%p, str=\\\"%s\\\"\\n\", label, (const void *)path, preview);\n    } else {\n        probe_log(\"%s: ptr=NULL\\n\", label);\n    }\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    probe_log(\"metal_init_page_sizes: start\\n\");\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    probe_log(\"getpagesize() -> %ld\\n\", sizes[0]);\n    if (sizes[0] <= 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        probe_log(\"metal_init_page_sizes: failed to get page size, returning -EINVAL\\n\");\n        return -EINVAL;\n    }\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n    probe_log(\"base page: size=%ld shift=%d tmp_path=%p\\n\",\n              sizes[0], _metal.page_shift, (const void *)_metal.tmp_path);\n    /* Log the path we'll pass into metal_add_page_size for base page */\n    probe_log_path(\"base tmp_path\", _metal.tmp_path);\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    probe_log(\"gethugepagesize() -> %ld\\n\", sizes[0]);\n    if (sizes[0] > 0) {\n        const char *p = hugetlbfs_find_path();\n        probe_log_path(\"hugetlbfs_find_path()\", p);\n        metal_add_page_size(hugetlbfs_find_path(),\n                            metal_log2(sizes[0]),\n                            MAP_HUGETLB);\n        probe_log(\"added single hugepage size: size=%ld shift=%d flags=%d\\n\",\n                  sizes[0], metal_log2(sizes[0]), MAP_HUGETLB);\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        probe_log(\"gethugepagesizes() -> count=%d\\n\", count);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            probe_log(\"hugepage candidate[%d]: size=%ld shift=%d\\n\", i, sizes[i], shift);\n\n            if ((shift & MAP_HUGE_MASK) != shift) {\n                probe_log(\"hugepage candidate[%d] skipped: shift & MAP_HUGE_MASK != shift\\n\", i);\n                continue;\n            }\n\n            /* Capture and log the path returned for this specific size to provide evidence\n             * in the scenario where hugetlbfs_find_path_for_size returns a pointer to\n             * immutable storage (const char *). */\n            const char *found_path = hugetlbfs_find_path_for_size(sizes[i]);\n            probe_log(\"about to call metal_add_page_size for sizes[%d]=%ld (shift=%d)\\n\", i, sizes[i], shift);\n            probe_log_path(\"hugetlbfs_find_path_for_size\", found_path);\n\n            /* Preserve original call behavior while logging. */\n            metal_add_page_size(hugetlbfs_find_path_for_size(sizes[i]),\n                                shift, (MAP_HUGETLB |\n                                (shift << MAP_HUGE_SHIFT)));\n\n            probe_log(\"metal_add_page_size returned for sizes[%d]=%ld\\n\", i, sizes[i]);\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    probe_log(\"qsort: num_page_sizes=%zu\\n\", _metal.num_page_sizes);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n\n    probe_log(\"metal_init_page_sizes: end returning 0\\n\");\n    return 0;\n}\n"
}