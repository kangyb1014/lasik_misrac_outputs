{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf hugetlbfs_find_path() returns a pointer to const char (const char *) but metal_add_page_size() is declared to take a non-const char * (e.g. void metal_add_page_size(char *path, ...)), then this call discards const-qualification and thus violates MISRA C 2023 Rule 8.13. The correct approach is to declare the parameter as const char * (or otherwise ensure the pointer type is const-qualified when the callee does not modify the pointed data).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "/* Probe / logging helpers inserted to capture control flow and state for hugetlbfs path usage.\n * Logs are appended to /tmp/logs/453.txt. These helpers are careful to keep const-qualification\n * and do not modify program logic. Do not define main here. */\nstatic void metal_probe_log(const char *event, const char *path, long size, int shift, unsigned long flags)\n{\n    FILE *f = fopen(\"/tmp/logs/453.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Print a single-line record with event name, pointer value, string (if any), and numerical state. */\n    fprintf(f, \"event=%s path=%p\", event ? event : \"(null)\", (const void *)path);\n    if (path)\n        fprintf(f, \" path_str=\\\"%s\\\"\", path);\n    fprintf(f, \" size=%ld shift=%d flags=0x%lx\\n\", size, shift, (unsigned long)flags);\n\n    fclose(f);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    if (sizes[0] <= 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        metal_probe_log(\"getpagesize_failed\", NULL, sizes[0], 0, 0);\n        return -EINVAL;\n    }\n\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n\n    /* Log the base page size and the tmp path being used. */\n    metal_probe_log(\"base_page\", _metal.tmp_path, sizes[0], _metal.page_shift, 0);\n\n    /* Preserve original call. Assign result to a const pointer so we do not discard const-qualification\n     * in our probe code. The call to metal_add_page_size is left as in original code to preserve logic. */\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    if (sizes[0] > 0) {\n        /* Capture hugetlbfs path in a const-qualified local and log it before calling into metal_add_page_size. */\n        const char *huge_path = hugetlbfs_find_path();\n        metal_probe_log(\"hugetlb_single_candidate\", huge_path, sizes[0], metal_log2(sizes[0]), MAP_HUGETLB);\n\n        /* Original behavior preserved: call metal_add_page_size with the path returned by hugetlbfs_find_path(). */\n        metal_add_page_size(huge_path,\n                            metal_log2(sizes[0]),\n                            MAP_HUGETLB);\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n\n        /* Log how many huge page sizes were discovered. */\n        metal_probe_log(\"hugetlb_count\", NULL, count, 0, 0);\n\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            if ((shift & MAP_HUGE_MASK) != shift)\n                continue;\n\n            /* Capture hugetlbfs path for this size in a const pointer and log it. */\n            const char *huge_path_for_size = hugetlbfs_find_path_for_size(sizes[i]);\n            metal_probe_log(\"hugetlb_multi_candidate\", huge_path_for_size, sizes[i], shift,\n                            (MAP_HUGETLB | (shift << MAP_HUGE_SHIFT)));\n\n            /* Preserve original behavior: add the page size using the returned path. */\n            metal_add_page_size(\n                huge_path_for_size,\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. Log number of page sizes before qsort for tracing. */\n    metal_probe_log(\"before_qsort\", NULL, 0, _metal.num_page_sizes, 0);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n\n    /* Log completion. */\n    metal_probe_log(\"init_page_sizes_complete\", NULL, _metal.page_size, _metal.page_shift, _metal.num_page_sizes);\n\n    return 0;\n}\n"
}