{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nInside the for-loop, in the final iteration (i == skips-1) the statement nhead = lfs_fromle32(nhead); only restores the host-endian value of nhead that is never used afterwards. Removing that specific assignment would not change program behaviour, so that operation is dead. (skips is computed as lfs_ctz(index)+1, so skips >= 1 and the last-iteration assignment is executed but has no effect.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_extend code that contains useful probe functions that print useful logs to a file \"/tmp/logs/102.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_extend as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_extend:\n```c\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        if (err) {\n            return err;\n        }\n\n        {\n            err = lfs_bd_erase(lfs, nblock);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    goto relocate;\n                }\n                return err;\n            }\n\n            if (size == 0) {\n                *block = nblock;\n                *off = 0;\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n                    if (err) {\n                        return err;\n                    }\n\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            goto relocate;\n                        }\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n            for (lfs_off_t i = 0; i < skips; i++) {\n                nhead = lfs_tole32(nhead);\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                nhead = lfs_fromle32(nhead);\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        goto relocate;\n                    }\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    nhead = lfs_fromle32(nhead);\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            return 0;\n        }\n\nrelocate:\n        LFS_DEBUG(\"Bad block at 0x%\"PRIx32, nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_extend code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/102.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        if (err) {\n            lfs_log_probe(\"lfs_ctz_extend: lfs_alloc failed err=%d\", err);\n            return err;\n        }\n\n        {\n            err = lfs_bd_erase(lfs, nblock);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    goto relocate;\n                }\n                lfs_log_probe(\"lfs_ctz_extend: lfs_bd_erase failed err=%d\", err);\n                return err;\n            }\n\n            if (size == 0) {\n                *block = nblock;\n                *off = 0;\n                lfs_log_probe(\"lfs_ctz_extend: size==0 -> block=%llu off=%llu\",\n                        (unsigned long long)*block, (unsigned long long)*off);\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n                    if (err) {\n                        lfs_log_probe(\"lfs_ctz_extend: read failed during copy i=%lld err=%d\",\n                                (long long)i, err);\n                        return err;\n                    }\n\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            goto relocate;\n                        }\n                        lfs_log_probe(\"lfs_ctz_extend: prog failed during copy i=%lld err=%d\",\n                                (long long)i, err);\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                lfs_log_probe(\"lfs_ctz_extend: copied tail -> block=%llu off=%llu\",\n                        (unsigned long long)*block, (unsigned long long)*off);\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n\n            lfs_log_probe(\"lfs_ctz_extend: append: head=%llu size=%llu index=%lld skips=%llu\",\n                    (unsigned long long)head, (unsigned long long)size, (long long)index, (unsigned long long)skips);\n\n            for (lfs_off_t i = 0; i < skips; i++) {\n                lfs_log_probe(\"lfs_ctz_extend: loop start i=%lld nhead(before tole)=%llu\",\n                        (long long)i, (unsigned long long)nhead);\n\n                nhead = lfs_tole32(nhead);\n                lfs_log_probe(\"lfs_ctz_extend: after tole nhead=%llu (written as little-endian)\",\n                        (unsigned long long)nhead);\n\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                lfs_log_probe(\"lfs_ctz_extend: lfs_bd_prog returned err=%d for i=%lld nblock=%llu\",\n                        err, (long long)i, (unsigned long long)nblock);\n\n                nhead = lfs_fromle32(nhead);\n                lfs_log_probe(\"lfs_ctz_extend: after fromle nhead(restored)=%llu\",\n                        (unsigned long long)nhead);\n\n                if (i == skips-1) {\n                    /* This is the iteration reported as violating MISRA C 2023 Rule 2.2:\n                       the restored nhead value here is not used afterwards. We log this\n                       fact and the data so other agents can reproduce and inspect the\n                       control flow/state for the last iteration. */\n                    lfs_log_probe(\"lfs_ctz_extend: LAST ITERATION i=%lld skips=%llu -> restored nhead=%llu (will not be used after loop)\",\n                            (long long)i, (unsigned long long)skips, (unsigned long long)nhead);\n                }\n\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        goto relocate;\n                    }\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    lfs_log_probe(\"lfs_ctz_extend: read back next nhead; i=%lld err=%d read_nhead=%llu\",\n                            (long long)i, err, (unsigned long long)nhead);\n                    nhead = lfs_fromle32(nhead);\n                    if (err) {\n                        lfs_log_probe(\"lfs_ctz_extend: read failed i=%lld err=%d\", (long long)i, err);\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            lfs_log_probe(\"lfs_ctz_extend: success -> block=%llu off=%llu\",\n                    (unsigned long long)*block, (unsigned long long)*off);\n            return 0;\n        }\n\nrelocate:\n        lfs_log_probe(\"lfs_ctz_extend: Bad block at %llu (relocate), nblock=%llu\",\n                (unsigned long long)nblock, (unsigned long long)nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n"
}