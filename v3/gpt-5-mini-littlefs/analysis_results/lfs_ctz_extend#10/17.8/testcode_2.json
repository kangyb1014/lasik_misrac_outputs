{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn function lfs_bd_read, the value parameters 'off' and 'size' are modified in the fragment: 'off += diff;' and 'size -= diff;'. MISRA C 2023 Rule 17.8 states that function parameters should not be modified, so updating these parameter variables inside the function violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_extend code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_extend as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_extend:\n```c\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        if (err) {\n            return err;\n        }\n\n        {\n            err = lfs_bd_erase(lfs, nblock);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    goto relocate;\n                }\n                return err;\n            }\n\n            if (size == 0) {\n                *block = nblock;\n                *off = 0;\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n                    if (err) {\n                        return err;\n                    }\n\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            goto relocate;\n                        }\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n            for (lfs_off_t i = 0; i < skips; i++) {\n                nhead = lfs_tole32(nhead);\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                nhead = lfs_fromle32(nhead);\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        goto relocate;\n                    }\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    nhead = lfs_fromle32(nhead);\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            return 0;\n        }\n\nrelocate:\n        LFS_DEBUG(\"Bad block at 0x%\"PRIx32, nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_extend code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging utility for lfs_ctz_extend\n * Appends human-readable logs to /tmp/logs/107.txt\n */\nstatic void lfs_ctz_extend_log(const char *fmt, ...) {\n    FILE *fp = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fclose(fp);\n}\n\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    lfs_ctz_extend_log(\"ENTER lfs_ctz_extend: head=%llu size=%llu block_ptr=%p off_ptr=%p\\n\",\n            (unsigned long long)head, (unsigned long long)size, (void*)block, (void*)off);\n\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        lfs_ctz_extend_log(\"lfs_alloc -> err=%d nblock=%llu\\n\", err, (unsigned long long)nblock);\n        if (err) {\n            lfs_ctz_extend_log(\"RETURN from lfs_ctz_extend due to lfs_alloc err=%d\\n\", err);\n            return err;\n        }\n\n        {\n            err = lfs_bd_erase(lfs, nblock);\n            lfs_ctz_extend_log(\"lfs_bd_erase(nblock=%llu) -> err=%d\\n\", (unsigned long long)nblock, err);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    lfs_ctz_extend_log(\"lfs_bd_erase reported CORRUPT on nblock=%llu -> relocate\\n\", (unsigned long long)nblock);\n                    goto relocate;\n                }\n                lfs_ctz_extend_log(\"RETURN from lfs_ctz_extend due to lfs_bd_erase err=%d\\n\", err);\n                return err;\n            }\n\n            if (size == 0) {\n                *block = nblock;\n                *off = 0;\n                lfs_ctz_extend_log(\"size==0 branch: set block=%llu off=0 and RETURN 0\\n\", (unsigned long long)nblock);\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n            lfs_ctz_extend_log(\"computed noff=%llu index=%lld (after lfs_ctz_index)\\n\",\n                    (unsigned long long)noff, (long long)index);\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                lfs_ctz_extend_log(\"last block incomplete: noff=%llu block_size=%llu -> copying loop start\\n\",\n                        (unsigned long long)noff, (unsigned long long)lfs->cfg->block_size);\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    lfs_ctz_extend_log(\"bd_read iteration i=%lld read_offset=%llu head=%llu -> calling lfs_bd_read\\n\",\n                            (long long)i, (unsigned long long)(noff-i), (unsigned long long)head);\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n                    lfs_ctz_extend_log(\"lfs_bd_read -> err=%d data=%u\\n\", err, (unsigned)data);\n                    if (err) {\n                        lfs_ctz_extend_log(\"RETURN from lfs_ctz_extend due to lfs_bd_read err=%d\\n\", err);\n                        return err;\n                    }\n\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    lfs_ctz_extend_log(\"lfs_bd_prog -> err=%d (nblock=%llu i=%lld data=%u)\\n\",\n                            err, (unsigned long long)nblock, (long long)i, (unsigned)data);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            lfs_ctz_extend_log(\"lfs_bd_prog reported CORRUPT (nblock=%llu) -> relocate\\n\", (unsigned long long)nblock);\n                            goto relocate;\n                        }\n                        lfs_ctz_extend_log(\"RETURN from lfs_ctz_extend due to lfs_bd_prog err=%d\\n\", err);\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                lfs_ctz_extend_log(\"Copied last incomplete block -> set block=%llu off=%llu and RETURN 0\\n\",\n                        (unsigned long long)nblock, (unsigned long long)noff);\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n            lfs_ctz_extend_log(\"append block branch: index=%lld skips=%llu head=%llu nblock=%llu\\n\",\n                    (long long)index, (unsigned long long)skips, (unsigned long long)head, (unsigned long long)nblock);\n            for (lfs_off_t i = 0; i < skips; i++) {\n                nhead = lfs_tole32(nhead);\n                lfs_ctz_extend_log(\"writing nhead (tole)=%llu at nblock=%llu offset=%lld\\n\",\n                        (unsigned long long)nhead, (unsigned long long)nblock, (long long)(4*i));\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                nhead = lfs_fromle32(nhead);\n                lfs_ctz_extend_log(\"lfs_bd_prog (write nhead) -> err=%d nhead(after fromle)=%llu\\n\",\n                        err, (unsigned long long)nhead);\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        lfs_ctz_extend_log(\"lfs_bd_prog reported CORRUPT during append (nblock=%llu) -> relocate\\n\", (unsigned long long)nblock);\n                        goto relocate;\n                    }\n                    lfs_ctz_extend_log(\"RETURN from lfs_ctz_extend due to lfs_bd_prog err=%d\\n\", err);\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    lfs_ctz_extend_log(\"reading next nhead from nhead=%llu offset=%lld size=%zu\\n\",\n                            (unsigned long long)nhead, (long long)(4*i), sizeof(nhead));\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    nhead = lfs_fromle32(nhead);\n                    lfs_ctz_extend_log(\"lfs_bd_read (next nhead) -> err=%d nhead(after fromle)=%llu\\n\",\n                            err, (unsigned long long)nhead);\n                    if (err) {\n                        lfs_ctz_extend_log(\"RETURN from lfs_ctz_extend due to lfs_bd_read err=%d\\n\", err);\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            lfs_ctz_extend_log(\"append complete -> set block=%llu off=%llu and RETURN 0\\n\",\n                    (unsigned long long)nblock, (unsigned long long)(4*skips));\n            return 0;\n        }\n\nrelocate:\n        lfs_ctz_extend_log(\"RELOCATE: bad block at nblock=%llu\\n\", (unsigned long long)nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n"
}