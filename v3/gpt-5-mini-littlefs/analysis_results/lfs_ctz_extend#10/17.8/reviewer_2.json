{
  "user_message": "An agent A claimed that the following lfs_ctz_extend code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_ctz_extend.\n```c\nstatic int lfs_ctz_extend(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_block_t *block, lfs_off_t *off) {\n    while (true) {\n        // go ahead and grab a block\n        lfs_block_t nblock;\n        int err = lfs_alloc(lfs, &nblock);\n        if (err) {\n            return err;\n        }\n\n        {\n            err = lfs_bd_erase(lfs, nblock);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    goto relocate;\n                }\n                return err;\n            }\n\n            if (size == 0) {\n                *block = nblock;\n                *off = 0;\n                return 0;\n            }\n\n            lfs_size_t noff = size - 1;\n            lfs_off_t index = lfs_ctz_index(lfs, &noff);\n            noff = noff + 1;\n\n            // just copy out the last block if it is incomplete\n            if (noff != lfs->cfg->block_size) {\n                for (lfs_off_t i = 0; i < noff; i++) {\n                    uint8_t data;\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, noff-i,\n                            head, i, &data, 1);\n                    if (err) {\n                        return err;\n                    }\n\n                    err = lfs_bd_prog(lfs,\n                            pcache, rcache, true,\n                            nblock, i, &data, 1);\n                    if (err) {\n                        if (err == LFS_ERR_CORRUPT) {\n                            goto relocate;\n                        }\n                        return err;\n                    }\n                }\n\n                *block = nblock;\n                *off = noff;\n                return 0;\n            }\n\n            // append block\n            index += 1;\n            lfs_size_t skips = lfs_ctz(index) + 1;\n            lfs_block_t nhead = head;\n            for (lfs_off_t i = 0; i < skips; i++) {\n                nhead = lfs_tole32(nhead);\n                err = lfs_bd_prog(lfs, pcache, rcache, true,\n                        nblock, 4*i, &nhead, 4);\n                nhead = lfs_fromle32(nhead);\n                if (err) {\n                    if (err == LFS_ERR_CORRUPT) {\n                        goto relocate;\n                    }\n                    return err;\n                }\n\n                if (i != skips-1) {\n                    err = lfs_bd_read(lfs,\n                            NULL, rcache, sizeof(nhead),\n                            nhead, 4*i, &nhead, sizeof(nhead));\n                    nhead = lfs_fromle32(nhead);\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n\n            *block = nblock;\n            *off = 4*skips;\n            return 0;\n        }\n\nrelocate:\n        LFS_DEBUG(\"Bad block at 0x%\"PRIx32, nblock);\n\n        // just clear cache and try a new block\n        lfs_cache_drop(lfs, pcache);\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn function lfs_bd_read, the value parameters 'off' and 'size' are modified in the fragment: 'off += diff;' and 'size -= diff;'. MISRA C 2023 Rule 17.8 states that function parameters should not be modified, so updating these parameter variables inside the function violates the rule.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER lfs_ctz_extend: head=1283 size=512 block_ptr=0x7ffffe09252c off_ptr=0x7ffffe092530\nlfs_alloc -> err=0 nblock=1284\nlfs_bd_erase(nblock=1284) -> err=0\ncomputed noff=512 index=0 (after lfs_ctz_index)\nappend block branch: index=1 skips=1 head=1283 nblock=1284\nwriting nhead (tole)=1283 at nblock=1284 offset=0\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1283\nappend complete -> set block=1284 off=4 and RETURN 0\nENTER lfs_ctz_extend: head=1284 size=1020 block_ptr=0x7ffffe09252c off_ptr=0x7ffffe092530\nlfs_alloc -> err=0 nblock=1285\nlfs_bd_erase(nblock=1285) -> err=0\ncomputed noff=512 index=1 (after lfs_ctz_index)\nappend block branch: index=2 skips=2 head=1284 nblock=1285\nwriting nhead (tole)=1284 at nblock=1285 offset=0\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1284\nreading next nhead from nhead=1284 offset=0 size=4\nlfs_bd_read (next nhead) -> err=0 nhead(after fromle)=1283\nwriting nhead (tole)=1283 at nblock=1285 offset=4\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1283\nappend complete -> set block=1285 off=8 and RETURN 0\nENTER lfs_ctz_extend: head=1285 size=1524 block_ptr=0x7ffffe09252c off_ptr=0x7ffffe092530\nlfs_alloc -> err=0 nblock=1286\nlfs_bd_erase(nblock=1286) -> err=0\ncomputed noff=512 index=2 (after lfs_ctz_index)\nappend block branch: index=3 skips=1 head=1285 nblock=1286\nwriting nhead (tole)=1285 at nblock=1286 offset=0\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1285\nappend complete -> set block=1286 off=4 and RETURN 0\nENTER lfs_ctz_extend: head=1286 size=2032 block_ptr=0x7ffffe09252c off_ptr=0x7ffffe092530\nlfs_alloc -> err=0 nblock=1287\nlfs_bd_erase(nblock=1287) -> err=0\ncomputed noff=512 index=3 (after lfs_ctz_index)\nappend block branch: index=4 skips=3 head=1286 nblock=1287\nwriting nhead (tole)=1286 at nblock=1287 offset=0\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1286\nreading next nhead from nhead=1286 offset=0 size=4\nlfs_bd_read (next nhead) -> err=0 nhead(after fromle)=1285\nwriting nhead (tole)=1285 at nblock=1287 offset=4\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1285\nreading next nhead from nhead=1285 offset=4 size=4\nlfs_bd_read (next nhead) -> err=0 nhead(after fromle)=1283\nwriting nhead (tole)=1283 at nblock=1287 offset=8\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1283\nappend complete -> set block=1287 off=12 and RETURN 0\nENTER lfs_ctz_extend: head=1287 size=2532 block_ptr=0x7ffffe09252c off_ptr=0x7ffffe092530\nlfs_alloc -> err=0 nblock=1288\nlfs_bd_erase(nblock=1288) -> err=0\ncomputed noff=512 index=4 (after lfs_ctz_index)\nappend block branch: index=5 skips=1 head=1287 nblock=1288\nwriting nhead (tole)=1287 at nblock=1288 offset=0\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1287\nappend complete -> set block=1288 off=4 and RETURN 0\nENTER lfs_ctz_extend: head=1288 size=3040 block_ptr=0x7ffffe09252c off_ptr=0x7ffffe092530\nlfs_alloc -> err=0 nblock=1289\nlfs_bd_erase(nblock=1289) -> err=0\ncomputed noff=512 index=5 (after lfs_ctz_index)\nappend block branch: index=6 skips=2 head=1288 nblock=1289\nwriting nhead (tole)=1288 at nblock=1289 offset=0\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1288\nreading next nhead from nhead=1288 offset=0 size=4\nlfs_bd_read (next nhead) -> err=0 nhead(after fromle)=1287\nwriting nhead (tole)=1287 at nblock=1289 offset=4\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1287\nappend complete -> set block=1289 off=8 and RETURN 0\nENTER lfs_ctz_extend: head=1289 size=3544 block_ptr=0x7ffffe09252c off_ptr=0x7ffffe092530\nlfs_alloc -> err=0 nblock=1290\nlfs_bd_erase(nblock=1290) -> err=0\ncomputed noff=512 index=6 (after lfs_ctz_index)\nappend block branch: index=7 skips=1 head=1289 nblock=1290\nwriting nhead (tole)=1289 at nblock=1290 offset=0\nlfs_bd_prog (write nhead) -> err=0 nhead(after fromle)=1289\nappend complete -> set block=1290 off=4 and RETURN 0\nENTER lfs_ctz_extend: head=1290 size=4052 block_ptr=0x7ffffe09252c off_ptr=0x7ffffe092530\nlfs_alloc -> err=0 nblock=1291\nlfs_bd_erase(nblock=1291) -> err=0\ncomputed noff=512 index=7 (after lfs_ctz_index)\nappend block branch: index=8 s\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_ctz_extend:\nstatic int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {\n    while (true) {\n        // scan our lookahead buffer for free blocks\n        while (lfs->lookahead.next < lfs->lookahead.size) {\n            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]\n                    & (1U << (lfs->lookahead.next % 8)))) {\n                // found a free block\n                *block = (lfs->lookahead.start + lfs->lookahead.next)\n                        % lfs->block_count;\n\n                // eagerly find next free block to maximize how many blocks\n                // lfs_alloc_ckpoint makes available for scanning\n                while (true) {\n                    lfs->lookahead.next += 1;\n                    lfs->lookahead.ckpoint -= 1;\n\n                    if (lfs->lookahead.next >= lfs->lookahead.size\n                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]\n                                & (1U << (lfs->lookahead.next % 8)))) {\n                        return 0;\n                    }\n                }\n            }\n\n            lfs->lookahead.next += 1;\n            lfs->lookahead.ckpoint -= 1;\n        }\n\n        // In order to keep our block allocator from spinning forever when our\n        // filesystem is full, we mark points where there are no in-flight\n        // allocations with a checkpoint before starting a set of allocations.\n        //\n        // If we've looked at all blocks since the last checkpoint, we report\n        // the filesystem as out of storage.\n        //\n        if (lfs->lookahead.ckpoint <= 0) {\n            LFS_ERROR(\"No more free space 0x%\"PRIx32,\n                    (lfs->lookahead.start + lfs->lookahead.next)\n                        % lfs->block_count);\n            return LFS_ERR_NOSPC;\n        }\n\n        // No blocks in our lookahead buffer, we need to scan the filesystem for\n        // unused blocks in the next lookahead window.\n        int err = lfs_alloc_scan(lfs);\n        if(err) {\n            return err;\n        }\n    }\n}\n...\nstatic int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {\n    LFS_ASSERT(block < lfs->block_count);\n    int err = lfs->cfg->erase(lfs->cfg, block);\n    LFS_ASSERT(err <= 0);\n    return err;\n}\n...\nstatic int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {\n    lfs_off_t size = *off;\n    lfs_off_t b = lfs->cfg->block_size - 2*4;\n    lfs_off_t i = size / b;\n    if (i == 0) {\n        return 0;\n    }\n\n    i = (size - 4*(lfs_popc(i-1)+2)) / b;\n    *off = size - b*i - 4*lfs_popc(i);\n    return i;\n}\n...\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            // already fits in pcache?\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            if (pcache->size == lfs->cfg->cache_size) {\n                // eagerly flush out pcache if we fill up\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                if (err) {\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        // pcache must have been flushed, either by programming and\n        // entire block or manually flushing the pcache\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        // prepare pcache, first condition can no longer fail\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n    }\n\n    return 0;\n}\n...\nstruct lfs_ctz {\n        lfs_block_t head;\n        lfs_size_t size;\n    }\n...\nstatic inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {\n    // do not zero, cheaper if cache is readonly or only going to be\n    // written with identical data (during relocates)\n    (void)lfs;\n    rcache->block = LFS_BLOCK_NULL;\n}\n...\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n...\ntypedef struct lfs_cache {\n    lfs_block_t block;\n    lfs_off_t off;\n    lfs_size_t size;\n    uint8_t *buffer;\n} lfs_cache_t\n...\ntypedef uint32_t lfs_block_t\n...\ntypedef uint32_t lfs_size_t\n...\ntypedef uint32_t lfs_off_t\n...\n#define LFS_DEBUG(__VA_ARGS__) LFS_DEBUG_(__VA_ARGS__,\"\")\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In lfs_bd_read the parameters off and size are declared as value parameters (lfs_off_t off, lfs_size_t size) and are modified inside the function (e.g. statements like off += diff; size -= diff;). MISRA C 2023 Rule 17.8 states that a function parameter should not be modified (pointer parameters may have their referenced object modified, but the pointer itself must not be modified). Modifying non-pointer value parameters inside the function therefore violates Rule 17.8. (Note: Rule 17.8 is a \u201cshould\u201d guideline, so projects may accept a documented deviation, but by the text of the rule the code as written contravenes it.)"
}