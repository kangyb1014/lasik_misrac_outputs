{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of the function parameter 'path' (a const char *). This permits lfs_dir_find to modify the pointer variable 'path' via the const char ** parameter (e.g. advance or reassign it), which would be modifying a function parameter and thus violates MISRA C 2023 Rule 17.8. To comply, make a local copy (e.g. const char *tmp = path;) and pass &tmp instead so the original parameter is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/327.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open_:\n```c\nstatic int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n        return LFS_ERR_NOTDIR;\n    }\n\n    lfs_block_t pair[2];\n    if (lfs_tag_id(tag) == 0x3ff) {\n        // handle root dir separately\n        pair[0] = lfs->root[0];\n        pair[1] = lfs->root[1];\n    } else {\n        // get dir pair from parent\n        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            return res;\n        }\n        lfs_pair_fromle32(pair);\n    }\n\n    // fetch first pair\n    int err = lfs_dir_fetch(lfs, &dir->m, pair);\n    if (err) {\n        return err;\n    }\n\n    // setup entry\n    dir->head[0] = dir->m.pair[0];\n    dir->head[1] = dir->m.pair[1];\n    dir->id = 0;\n    dir->pos = 0;\n\n    // add to list of mdirs\n    dir->type = LFS_TYPE_DIR;\n    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open_ code.\n",
  "test_code": "static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    /* Probe logging to capture potential modification of the function parameter 'path' */\n    FILE *__lfs_probe_f = fopen(\"/tmp/logs/327.txt\", \"a\");\n    if (__lfs_probe_f) {\n        fprintf(__lfs_probe_f, \"[probe] lfs_dir_open_: entry\\n\");\n        fprintf(__lfs_probe_f, \"[probe]   address of parameter 'path' = %p\\n\", (void *)&path);\n        fprintf(__lfs_probe_f, \"[probe]   initial 'path' value = %p\\n\", (void *)path);\n        fprintf(__lfs_probe_f, \"[probe]   initial 'path' string = %s\\n\", (path != NULL) ? path : \"(null)\");\n        fclose(__lfs_probe_f);\n    }\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);\n\n    /* Log after calling lfs_dir_find to detect if 'path' was modified by the call */\n    __lfs_probe_f = fopen(\"/tmp/logs/327.txt\", \"a\");\n    if (__lfs_probe_f) {\n        fprintf(__lfs_probe_f, \"[probe] lfs_dir_open_: after lfs_dir_find\\n\");\n        fprintf(__lfs_probe_f, \"[probe]   returned tag = %lld\\n\", (long long)tag);\n        fprintf(__lfs_probe_f, \"[probe]   address of parameter 'path' (should be same) = %p\\n\", (void *)&path);\n        fprintf(__lfs_probe_f, \"[probe]   current 'path' value = %p\\n\", (void *)path);\n        fprintf(__lfs_probe_f, \"[probe]   current 'path' string = %s\\n\", (path != NULL) ? path : \"(null)\");\n        fclose(__lfs_probe_f);\n    }\n\n    if (tag < 0) {\n        __lfs_probe_f = fopen(\"/tmp/logs/327.txt\", \"a\");\n        if (__lfs_probe_f) {\n            fprintf(__lfs_probe_f, \"[probe] lfs_dir_open_: early return tag < 0 (%lld)\\n\", (long long)tag);\n            fclose(__lfs_probe_f);\n        }\n        return tag;\n    }\n\n    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n        __lfs_probe_f = fopen(\"/tmp/logs/327.txt\", \"a\");\n        if (__lfs_probe_f) {\n            fprintf(__lfs_probe_f, \"[probe] lfs_dir_open_: tag type is not LFS_TYPE_DIR, returning LFS_ERR_NOTDIR\\n\");\n            fclose(__lfs_probe_f);\n        }\n        return LFS_ERR_NOTDIR;\n    }\n\n    lfs_block_t pair[2];\n    if (lfs_tag_id(tag) == 0x3ff) {\n        /* handle root dir separately */\n        pair[0] = lfs->root[0];\n        pair[1] = lfs->root[1];\n    } else {\n        /* get dir pair from parent */\n        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            __lfs_probe_f = fopen(\"/tmp/logs/327.txt\", \"a\");\n            if (__lfs_probe_f) {\n                fprintf(__lfs_probe_f, \"[probe] lfs_dir_open_: lfs_dir_get failed with %lld\\n\", (long long)res);\n                fclose(__lfs_probe_f);\n            }\n            return res;\n        }\n        lfs_pair_fromle32(pair);\n    }\n\n    /* fetch first pair */\n    int err = lfs_dir_fetch(lfs, &dir->m, pair);\n    if (err) {\n        __lfs_probe_f = fopen(\"/tmp/logs/327.txt\", \"a\");\n        if (__lfs_probe_f) {\n            fprintf(__lfs_probe_f, \"[probe] lfs_dir_open_: lfs_dir_fetch returned %d\\n\", err);\n            fclose(__lfs_probe_f);\n        }\n        return err;\n    }\n\n    /* setup entry */\n    dir->head[0] = dir->m.pair[0];\n    dir->head[1] = dir->m.pair[1];\n    dir->id = 0;\n    dir->pos = 0;\n\n    /* add to list of mdirs */\n    dir->type = LFS_TYPE_DIR;\n    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);\n\n    __lfs_probe_f = fopen(\"/tmp/logs/327.txt\", \"a\");\n    if (__lfs_probe_f) {\n        fprintf(__lfs_probe_f, \"[probe] lfs_dir_open_: success, dir->head = (%u, %u), id = %u, pos = %u\\n\",\n                (unsigned)dir->head[0], (unsigned)dir->head[1], (unsigned)dir->id, (unsigned)dir->pos);\n        fclose(__lfs_probe_f);\n    }\n\n    return 0;\n}\n"
}