{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_cmp the for loop is: for (lfs_off_t i = 0; i < size; i += diff) and inside the body diff is assigned via diff = lfs_min(size - i, sizeof(dat)); The third clause (i += diff) uses the object diff which is modified in the loop body, violating clause 3 of MISRA C 2023 Rule 14.2 (the third clause shall not use objects that are modified in the for loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_find_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/254.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_find_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_find_match:\n```c\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    // compare with disk\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n    if (res != LFS_CMP_EQ) {\n        return res;\n    }\n\n    // only equal if our size is still the same\n    if (name->size != lfs_tag_size(tag)) {\n        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n    }\n\n    // found a match!\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_find_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper logging function that appends messages to /tmp/logs/254.txt */\nstatic void lfs_dbg_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/254.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Forward declaration of the original lfs_bd_cmp function. This matches\n   the usage in the surrounding code and allows the logging wrapper to\n   call the real implementation. */\nextern int lfs_bd_cmp(void *lfs, void *a, void *b, unsigned long diff,\n        unsigned long block, long off, const void *buf, unsigned long n);\n\n/* Wrapper around lfs_bd_cmp that logs entry/exit and key parameters.\n   This preserves the original behaviour (it simply forwards to the\n   real lfs_bd_cmp) while providing useful runtime evidence for the\n   scenario described. */\nstatic int lfs_bd_cmp_log(void *lfs, void *a, void *b, unsigned long diff,\n        unsigned long block, long off, const void *buf, unsigned long n)\n{\n    lfs_dbg_log(\"lfs_bd_cmp CALL: diff=%lu block=%lu off=%ld buf=%p n=%lu\",\n            diff, block, off, buf, n);\n\n    int res = lfs_bd_cmp(lfs, a, b, diff, block, off, buf, n);\n\n    lfs_dbg_log(\"lfs_bd_cmp RETURN: res=%d (for diff=%lu)\", res, diff);\n    return res;\n}\n\n/* Modified lfs_dir_find_match with lightweight probes. The logic is\n   preserved; only additional logging calls are added. */\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    /* compute diff as in original code */\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n\n    /* Log entry state */\n    lfs_dbg_log(\n        \"lfs_dir_find_match ENTER: name=%p name->size=%lu tag=%u tag_size=%lu diff=%lu disk.block=%lu disk.off=%ld name->name=%p\",\n        (void *)name, (unsigned long)name->size, (unsigned)tag,\n        (unsigned long)lfs_tag_size(tag), (unsigned long)diff,\n        (unsigned long)disk->block, (long)disk->off, (void *)name->name);\n\n    /* Call the logging wrapper instead of the plain lfs_bd_cmp so that\n       we capture call-site parameters and the result. This does not\n       change the behaviour of the program. */\n    int res = lfs_bd_cmp_log(lfs,\n            NULL, &lfs->rcache, (unsigned long)diff,\n            (unsigned long)disk->block, (long)disk->off, name->name, (unsigned long)diff);\n\n    lfs_dbg_log(\"lfs_dir_find_match after lfs_bd_cmp: res=%d diff_used=%lu\", res, (unsigned long)diff);\n\n    if (res != LFS_CMP_EQ) {\n        lfs_dbg_log(\"lfs_dir_find_match: not equal, returning %d\", res);\n        return res;\n    }\n\n    /* only equal if our size is still the same */\n    if (name->size != lfs_tag_size(tag)) {\n        int rv = (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n        lfs_dbg_log(\"lfs_dir_find_match: size mismatch name->size=%lu tag_size=%lu returning %d\",\n                (unsigned long)name->size, (unsigned long)lfs_tag_size(tag), rv);\n        return rv;\n    }\n\n    /* found a match! */\n    lfs_dbg_log(\"lfs_dir_find_match: match found, returning LFS_CMP_EQ\");\n    return LFS_CMP_EQ;\n}\n"
}