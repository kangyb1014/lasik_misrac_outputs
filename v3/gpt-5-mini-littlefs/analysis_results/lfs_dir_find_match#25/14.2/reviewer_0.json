{
  "user_message": "An agent A claimed that the following lfs_dir_find_match code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of lfs_dir_find_match.\n```c\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    // compare with disk\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n    if (res != LFS_CMP_EQ) {\n        return res;\n    }\n\n    // only equal if our size is still the same\n    if (name->size != lfs_tag_size(tag)) {\n        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n    }\n\n    // found a match!\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn lfs_bd_cmp the for loop is: for (lfs_off_t i = 0; i < size; i += diff) and inside the body diff is assigned via diff = lfs_min(size - i, sizeof(dat)); The third clause (i += diff) uses the object diff which is modified in the loop body, violating clause 3 of MISRA C 2023 Rule 14.2 (the third clause shall not use objects that are modified in the for loop body).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nlfs_dir_find_match ENTER: name=0x7fff3bf3c728 name->size=8 tag=267386888 tag_size=8 diff=8 disk.block=1 disk.off=8 name->name=0x559ddae02bd9\nlfs_bd_cmp CALL: diff=8 block=1 off=8 buf=0x559ddae02bd9 n=8\nlfs_bd_cmp RETURN: res=0 (for diff=8)\nlfs_dir_find_match after lfs_bd_cmp: res=0 diff_used=8\nlfs_dir_find_match: match found, returning LFS_CMP_EQ\nlfs_dir_find_match ENTER: name=0x7fff3bf3c728 name->size=8 tag=267386888 tag_size=8 diff=8 disk.block=1 disk.off=8 name->name=0x559ddae02bd9\nlfs_bd_cmp CALL: diff=8 block=1 off=8 buf=0x559ddae02bd9 n=8\nlfs_bd_cmp RETURN: res=0 (for diff=8)\nlfs_dir_find_match after lfs_bd_cmp: res=0 diff_used=8\nlfs_dir_find_match: match found, returning LFS_CMP_EQ\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=9 tag=2098185 tag_size=9 diff=9 disk.block=1 disk.off=72 name->name=0x7fff3bf3ced8\nlfs_bd_cmp CALL: diff=9 block=1 off=72 buf=0x7fff3bf3ced8 n=9\nlfs_bd_cmp RETURN: res=0 (for diff=9)\nlfs_dir_find_match after lfs_bd_cmp: res=0 diff_used=9\nlfs_dir_find_match: match found, returning LFS_CMP_EQ\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=9 tag=2098185 tag_size=9 diff=9 disk.block=1 disk.off=72 name->name=0x7fff3bf3ced8\nlfs_bd_cmp CALL: diff=9 block=1 off=72 buf=0x7fff3bf3ced8 n=9\nlfs_bd_cmp RETURN: res=0 (for diff=9)\nlfs_dir_find_match after lfs_bd_cmp: res=0 diff_used=9\nlfs_dir_find_match: match found, returning LFS_CMP_EQ\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=4 tag=1048581 tag_size=5 diff=4 disk.block=1672 disk.off=40 name->name=0x7fff3bf3cee2\nlfs_bd_cmp CALL: diff=4 block=1672 off=40 buf=0x7fff3bf3cee2 n=4\nlfs_bd_cmp RETURN: res=1 (for diff=4)\nlfs_dir_find_match after lfs_bd_cmp: res=1 diff_used=4\nlfs_dir_find_match: not equal, returning 1\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=9 tag=2098185 tag_size=9 diff=9 disk.block=1 disk.off=72 name->name=0x7fff3bf3ced8\nlfs_bd_cmp CALL: diff=9 block=1 off=72 buf=0x7fff3bf3ced8 n=9\nlfs_bd_cmp RETURN: res=0 (for diff=9)\nlfs_dir_find_match after lfs_bd_cmp: res=0 diff_used=9\nlfs_dir_find_match: match found, returning LFS_CMP_EQ\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=8 tag=1048581 tag_size=5 diff=5 disk.block=1672 disk.off=40 name->name=0x7fff3bf3cee2\nlfs_bd_cmp CALL: diff=5 block=1672 off=40 buf=0x7fff3bf3cee2 n=5\nlfs_bd_cmp RETURN: res=1 (for diff=5)\nlfs_dir_find_match after lfs_bd_cmp: res=1 diff_used=5\nlfs_dir_find_match: not equal, returning 1\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=8 tag=1049604 tag_size=4 diff=4 disk.block=1672 disk.off=88 name->name=0x7fff3bf3cee2\nlfs_bd_cmp CALL: diff=4 block=1672 off=88 buf=0x7fff3bf3cee2 n=4\nlfs_bd_cmp RETURN: res=1 (for diff=4)\nlfs_dir_find_match after lfs_bd_cmp: res=1 diff_used=4\nlfs_dir_find_match: not equal, returning 1\nlfs_dir_find_match ENTER: name=0x7fff3bf3c728 name->size=8 tag=267386888 tag_size=8 diff=8 disk.block=1 disk.off=8 name->name=0x559ddae02bd9\nlfs_bd_cmp CALL: diff=8 block=1 off=8 buf=0x559ddae02bd9 n=8\nlfs_bd_cmp RETURN: res=0 (for diff=8)\nlfs_dir_find_match after lfs_bd_cmp: res=0 diff_used=8\nlfs_dir_find_match: match found, returning LFS_CMP_EQ\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=9 tag=2098185 tag_size=9 diff=9 disk.block=1 disk.off=72 name->name=0x7fff3bf3cad8\nlfs_bd_cmp CALL: diff=9 block=1 off=72 buf=0x7fff3bf3cad8 n=9\nlfs_bd_cmp RETURN: res=0 (for diff=9)\nlfs_dir_find_match after lfs_bd_cmp: res=0 diff_used=9\nlfs_dir_find_match: match found, returning LFS_CMP_EQ\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=5 tag=1048581 tag_size=5 diff=5 disk.block=1672 disk.off=40 name->name=0x7fff3bf3cae2\nlfs_bd_cmp CALL: diff=5 block=1672 off=40 buf=0x7fff3bf3cae2 n=5\nlfs_bd_cmp RETURN: res=0 (for diff=5)\nlfs_dir_find_match after lfs_bd_cmp: res=0 diff_used=5\nlfs_dir_find_match: match found, returning LFS_CMP_EQ\nlfs_dir_find_match ENTER: name=0x7fff3bf3c6a0 name->size=5 tag=1049604 tag_size=4 diff=4 disk.block=1672 disk.off=88 name->name=0x7fff3bf3cae2\nlfs_bd_cmp CALL: diff=4 block=1672 off=88 buf=0x7fff3bf3cae2 n=4\nlfs_bd_cmp RETURN: res=2 (for diff=4)\nlfs_dir_find_match a\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_find_match:\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n        if (res) {\n            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n        }\n    }\n\n    return LFS_CMP_EQ;\n}\n...\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\nstatic inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {\n    return tag & 0x000003ff;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In lfs_bd_cmp the for statement is for (lfs_off_t i = 0; i < size; i += diff). The third clause (i += diff) uses the object diff, and diff is assigned inside the loop body (diff = lfs_min(...)). MISRA C 2023 Rule 14.2 explicitly requires the third clause to be an expression that modifies only the loop counter and shall not use objects that are modified in the loop body. Because diff is modified in the loop body, this violates clause 3 of Rule 14.2. (The fact that diff is declared and initialized outside the loop and updated inside the body does not avoid the rule.)"
}