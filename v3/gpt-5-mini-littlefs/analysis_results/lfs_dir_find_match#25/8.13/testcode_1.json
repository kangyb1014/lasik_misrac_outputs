{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_dir_find_match takes a non-const void *data and immediately treats it read-only (struct lfs_dir_find_match *name = data) and then passes name->name into lfs_bd_cmp. Neither the parameter 'data' nor 'name' (and likely the member name->name) are const-qualified even though they are only read. According to MISRA C 2023 Rule 8.13, these pointers should be const-qualified when possible (e.g. const void *data, const struct lfs_dir_find_match *name, and a const-qualified type for name->name).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_find_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_find_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_find_match:\n```c\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    // compare with disk\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n    if (res != LFS_CMP_EQ) {\n        return res;\n    }\n\n    // only equal if our size is still the same\n    if (name->size != lfs_tag_size(tag)) {\n        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;\n    }\n\n    // found a match!\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_find_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic int lfs_dir_find_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_dir_find_match *name = data;\n    lfs_t *lfs = name->lfs;\n    const struct lfs_diskoff *disk = buffer;\n\n    /* Probe: log entry state */\n    {\n        FILE *f = fopen(\"/tmp/logs/253.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_find_match: ENTRY\\n\");\n            fprintf(f, \"  data=%p name=%p lfs=%p buffer=%p disk=%p\\n\",\n                    data, (void*)name, (void*)lfs, buffer, (void*)disk);\n            fprintf(f, \"  name->size=%llu tag_size=%llu\\n\",\n                    (unsigned long long)name->size,\n                    (unsigned long long)lfs_tag_size(tag));\n            fprintf(f, \"  disk->block=%llu disk->off=%llu\\n\",\n                    (unsigned long long)disk->block,\n                    (unsigned long long)disk->off);\n            fprintf(f, \"  name->name_ptr=%p\\n\", (void*)name->name);\n            /* Dump up to 32 bytes of the name (hex) for evidence; do not modify */\n            {\n                lfs_size_t dump = name->size;\n                if (dump > 32) { dump = 32; }\n                if (dump > 0 && name->name != NULL) {\n                    fprintf(f, \"  name->name_hex[:%llu]=\",\n                            (unsigned long long)dump);\n                    for (lfs_size_t i = 0; i < dump; i++) {\n                        unsigned char c = (unsigned char)name->name[i];\n                        fprintf(f, \"%02X\", c);\n                    }\n                    fprintf(f, \"\\n\");\n                }\n            }\n            fclose(f);\n        }\n    }\n\n    /* compare with disk */\n    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n\n    /* Probe: log before comparison */\n    {\n        FILE *f = fopen(\"/tmp/logs/253.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_find_match: BEFORE lfs_bd_cmp\\n\");\n            fprintf(f, \"  diff=%llu\\n\", (unsigned long long)diff);\n            fprintf(f, \"  calling lfs_bd_cmp with name->name=%p\\n\", (void*)name->name);\n            fclose(f);\n        }\n    }\n\n    int res = lfs_bd_cmp(lfs,\n            NULL, &lfs->rcache, diff,\n            disk->block, disk->off, name->name, diff);\n\n    /* Probe: log result of comparison and decision points */\n    {\n        FILE *f = fopen(\"/tmp/logs/253.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_find_match: AFTER lfs_bd_cmp\\n\");\n            fprintf(f, \"  res=%d (expected LFS_CMP_EQ=%d)\\n\", res, LFS_CMP_EQ);\n            if (res != LFS_CMP_EQ) {\n                fprintf(f, \"  Returning (cmp mismatch) res=%d\\n\", res);\n                fclose(f);\n                return res;\n            }\n\n            /* only equal if our size is still the same */\n            lfs_size_t tag_sz = lfs_tag_size(tag);\n            fprintf(f, \"  name->size=%llu tag_sz=%llu\\n\",\n                    (unsigned long long)name->size,\n                    (unsigned long long)tag_sz);\n            if (name->size != tag_sz) {\n                int ret = (name->size < tag_sz) ? LFS_CMP_LT : LFS_CMP_GT;\n                fprintf(f, \"  Returning (size mismatch) ret=%d\\n\", ret);\n                fclose(f);\n                return ret;\n            }\n\n            fprintf(f, \"  Found a match -> returning LFS_CMP_EQ=%d\\n\", LFS_CMP_EQ);\n            fclose(f);\n        }\n    }\n\n    /* found a match! */\n    return LFS_CMP_EQ;\n}\n"
}