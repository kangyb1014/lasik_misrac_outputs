{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \"..\") will copy three bytes ('.' '.' '\\0') into info->name. If the destination array in struct lfs_info is not large enough to hold 3 bytes (for example, if it were declared as char name[2] or any size < 3), this call will write beyond the bounds of info->name and thus violate the rule. No bounds check is shown in the fragment, so the use is potentially unsafe.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read_:\n```c\nstatic int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    memset(info, 0, sizeof(*info));\n\n    // special offset for '.' and '..'\n    if (dir->pos == 0) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \".\");\n        dir->pos += 1;\n        return true;\n    } else if (dir->pos == 1) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \"..\");\n        dir->pos += 1;\n        return true;\n    }\n\n    while (true) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return false;\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        dir->id += 1;\n        if (err != LFS_ERR_NOENT) {\n            break;\n        }\n    }\n\n    dir->pos += 1;\n    return true;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function to log control flow and state to /tmp/logs/359.txt */\nstatic void lfs_log_probe(const char *event, lfs_dir_t *dir, struct lfs_info *info, const char *note) {\n    FILE *f = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Safely log numeric and pointer state without reading unknown-sized buffers */\n    fprintf(f, \"EVENT: %s\\n\", event ? event : \"(null)\");\n    if (note) {\n        fprintf(f, \"NOTE: %s\\n\", note);\n    }\n    fprintf(f, \"dir=%p, info=%p\\n\", (void *)dir, (void *)info);\n\n    if (dir) {\n        /* print members we expect to exist on lfs_dir_t */\n        fprintf(f, \"dir->pos=%ld, dir->id=%ld\\n\", (long)dir->pos, (long)dir->id);\n        /* dir->m may contain .count, .split, .tail as in the original code */\n        fprintf(f, \"dir->m.count=%ld, dir->m.split=%d, dir->m.tail=%ld\\n\",\n                (long)dir->m.count, (int)dir->m.split, (long)dir->m.tail);\n    }\n\n    if (info) {\n        /* sizeof on members is compile-time; safe to log and does not dereference memory */\n        fprintf(f, \"sizeof(*info)=%lu, sizeof(info->name)=%lu\\n\",\n                (unsigned long)sizeof(*info), (unsigned long)sizeof(info->name));\n        fprintf(f, \"info->name (addr)=%p\\n\", (void *)info->name);\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    memset(info, 0, sizeof(*info));\n    lfs_log_probe(\"after_memset\", dir, info, \"zeroed info struct\");\n\n    /* special offset for '.' and '..' */\n    if (dir->pos == 0) {\n        lfs_log_probe(\"before_dot\", dir, info, \"about to assign '.' (src_len=2)\");\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \".\");\n        lfs_log_probe(\"after_dot\", dir, info, \"copied '.' into info->name\");\n        dir->pos += 1;\n        return true;\n    } else if (dir->pos == 1) {\n        lfs_log_probe(\"before_dotdot\", dir, info, \"about to assign '..' (src_len=3)\");\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \"..\");\n        lfs_log_probe(\"after_dotdot\", dir, info, \"copied '..' into info->name\");\n        dir->pos += 1;\n        return true;\n    }\n\n    lfs_log_probe(\"enter_loop\", dir, info, \"begin directory entry iteration\");\n    while (true) {\n        lfs_log_probe(\"loop_top\", dir, info, \"iteration start\");\n        if (dir->id == dir->m.count) {\n            lfs_log_probe(\"need_fetch_check\", dir, info, \"dir->id == dir->m.count\");\n            if (!dir->m.split) {\n                lfs_log_probe(\"return_false_no_split\", dir, info, \"no split, end of directory\");\n                return false;\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            lfs_log_probe(\"after_fetch\", dir, info, err ? \"fetch returned error\" : \"fetch OK\");\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_log_probe(\"getinfo_error\", dir, info, \"lfs_dir_getinfo returned error (not NOENT)\");\n            return err;\n        }\n\n        dir->id += 1;\n        if (err != LFS_ERR_NOENT) {\n            lfs_log_probe(\"found_entry\", dir, info, \"valid directory entry read into info\");\n            break;\n        }\n\n        lfs_log_probe(\"entry_noent\", dir, info, \"entry was NOENT, continuing\");\n    }\n\n    dir->pos += 1;\n    lfs_log_probe(\"return_true\", dir, info, \"returning one directory entry\");\n    return true;\n}\n"
}