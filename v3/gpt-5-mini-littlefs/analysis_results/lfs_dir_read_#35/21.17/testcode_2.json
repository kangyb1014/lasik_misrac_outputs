{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrcpy(info->name, \".\") copies two bytes ('.' and '\\0') into info->name. The snippet does not show the definition or guaranteed size of info->name, so if info->name has length < 2 (e.g. 0 or 1), this will write beyond the bounds of the destination and violate Rule 21.17. Unless it is provable from the surrounding code that info->name is sized >= 2, this use is a potential out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read_:\n```c\nstatic int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    memset(info, 0, sizeof(*info));\n\n    // special offset for '.' and '..'\n    if (dir->pos == 0) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \".\");\n        dir->pos += 1;\n        return true;\n    } else if (dir->pos == 1) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \"..\");\n        dir->pos += 1;\n        return true;\n    }\n\n    while (true) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return false;\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        dir->id += 1;\n        if (err != LFS_ERR_NOENT) {\n            break;\n        }\n    }\n\n    dir->pos += 1;\n    return true;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: appends logs to /tmp/logs/359.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    lfs_probe_log(\"ENTER lfs_dir_read_: lfs=%p, dir=%p, info=%p, dir->pos=%lld, dir->id=%d, dir->m.count=%d, dir->m.split=%d, dir->m.tail=%d\",\n                  (void*)lfs, (void*)dir, (void*)info,\n                  (long long)dir->pos, dir->id, dir->m.count, (int)dir->m.split, (int)dir->m.tail);\n\n    memset(info, 0, sizeof(*info));\n    lfs_probe_log(\"memset done: info=%p, sizeof(*info)=%zu\", (void*)info, sizeof(*info));\n\n    // special offset for '.' and '..'\n    if (dir->pos == 0) {\n        lfs_probe_log(\"dir->pos == 0: preparing to set '.' (info=%p, info->name_ptr=%p)\", (void*)info, (void*)info->name);\n        info->type = LFS_TYPE_DIR;\n        lfs_probe_log(\"about to strcpy(info->name, \\\".\\\")\");\n        strcpy(info->name, \".\");\n        lfs_probe_log(\"strcpy done for '.' (info=%p, info->name_ptr=%p)\", (void*)info, (void*)info->name);\n        dir->pos += 1;\n        lfs_probe_log(\"return true (special case '.') -- new dir->pos=%lld\", (long long)dir->pos);\n        return true;\n    } else if (dir->pos == 1) {\n        lfs_probe_log(\"dir->pos == 1: preparing to set '..' (info=%p, info->name_ptr=%p)\", (void*)info, (void*)info->name);\n        info->type = LFS_TYPE_DIR;\n        lfs_probe_log(\"about to strcpy(info->name, \\\"..\\\")\");\n        strcpy(info->name, \"..\");\n        lfs_probe_log(\"strcpy done for '..' (info=%p, info->name_ptr=%p)\", (void*)info, (void*)info->name);\n        dir->pos += 1;\n        lfs_probe_log(\"return true (special case '..') -- new dir->pos=%lld\", (long long)dir->pos);\n        return true;\n    }\n\n    while (true) {\n        lfs_probe_log(\"loop top: dir->id=%d, dir->m.count=%d, dir->m.split=%d\", dir->id, dir->m.count, (int)dir->m.split);\n        if (dir->id == dir->m.count) {\n            lfs_probe_log(\"dir->id == dir->m.count (%d). split=%d\", dir->m.count, (int)dir->m.split);\n            if (!dir->m.split) {\n                lfs_probe_log(\"not split: returning false\");\n                return false;\n            }\n\n            lfs_probe_log(\"calling lfs_dir_fetch(lfs, &dir->m, dir->m.tail)\");\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            lfs_probe_log(\"lfs_dir_fetch returned %d\", err);\n            if (err) {\n                lfs_probe_log(\"return err from lfs_dir_fetch: %d\", err);\n                return err;\n            }\n\n            dir->id = 0;\n            lfs_probe_log(\"after fetch: dir->id reset to 0\");\n        }\n\n        lfs_probe_log(\"calling lfs_dir_getinfo(lfs, &dir->m, dir->id=%d, info=%p)\", dir->id, (void*)info);\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        lfs_probe_log(\"lfs_dir_getinfo returned %d\", err);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_probe_log(\"return err from lfs_dir_getinfo: %d\", err);\n            return err;\n        }\n\n        dir->id += 1;\n        lfs_probe_log(\"incremented dir->id to %d\", dir->id);\n        if (err != LFS_ERR_NOENT) {\n            lfs_probe_log(\"valid entry found (err=%d). breaking out of loop\", err);\n            break;\n        } else {\n            lfs_probe_log(\"entry was NOENT (err=%d). continuing loop\", err);\n        }\n    }\n\n    dir->pos += 1;\n    lfs_probe_log(\"exit lfs_dir_read_: success. updated dir->pos=%lld\", (long long)dir->pos);\n    return true;\n}\n"
}