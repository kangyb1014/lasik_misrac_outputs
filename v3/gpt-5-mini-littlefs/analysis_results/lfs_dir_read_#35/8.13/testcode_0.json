{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'lfs' is not const-qualified, but in this function it is only read (no writes to *lfs are performed). The other pointer parameters ('dir' and 'info') are modified (dir->pos, dir->id, memset(info), strcpy into info->name), so they must be non-const. Therefore, unless calls such as lfs_dir_fetch/lfs_dir_getinfo require a non-const lfs_t*, the 'lfs' parameter could and should be declared as 'const lfs_t *lfs'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read_:\n```c\nstatic int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    memset(info, 0, sizeof(*info));\n\n    // special offset for '.' and '..'\n    if (dir->pos == 0) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \".\");\n        dir->pos += 1;\n        return true;\n    } else if (dir->pos == 1) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \"..\");\n        dir->pos += 1;\n        return true;\n    }\n\n    while (true) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return false;\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        dir->id += 1;\n        if (err != LFS_ERR_NOENT) {\n            break;\n        }\n    }\n\n    dir->pos += 1;\n    return true;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read_ code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper: appends control-flow and state information to /tmp/logs/353.txt */\nstatic void lfs_log_dir_state(const char *event, lfs_t *lfs, lfs_dir_t *dir, const struct lfs_info *info, int err) {\n    FILE *fp = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(fp, \"[%ld] EVENT: %s\\n\", (long)t, event);\n    fprintf(fp, \"  lfs=%p, dir=%p, info=%p, err=%d\\n\", (void*)lfs, (void*)dir, (void*)info, err);\n    if (dir) {\n        /* Attempt to print fields we expect to exist on dir. If they don't exist, this will be compile-time caught. */\n        fprintf(fp, \"  dir->pos=%lld, dir->id=%lld\\n\", (long long)dir->pos, (long long)dir->id);\n        /* m.count, m.split, m.tail are part of dir->m structure in the original code */\n        fprintf(fp, \"  dir->m.count=%lld, dir->m.split=%d, dir->m.tail=%lld\\n\",\n                (long long)dir->m.count, (int)dir->m.split, (long long)dir->m.tail);\n    }\n    if (info) {\n        /* Print type and name buffer (name may be empty/zeroed) */\n        fprintf(fp, \"  info->type=%d, info->name=\\\"%s\\\"\\n\", (int)info->type, info->name);\n    }\n    fprintf(fp, \"---\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nstatic int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    /* Log entry and incoming state */\n    lfs_log_dir_state(\"enter lfs_dir_read_\", lfs, dir, info, 0);\n\n    memset(info, 0, sizeof(*info));\n    lfs_log_dir_state(\"after memset(info)\", lfs, dir, info, 0);\n\n    /* special offset for '.' and '..' */\n    if (dir->pos == 0) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \".\");\n        dir->pos += 1;\n        lfs_log_dir_state(\"returning '.' entry\", lfs, dir, info, 0);\n        return true;\n    } else if (dir->pos == 1) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \"..\");\n        dir->pos += 1;\n        lfs_log_dir_state(\"returning '..' entry\", lfs, dir, info, 0);\n        return true;\n    }\n\n    while (true) {\n        lfs_log_dir_state(\"loop top\", lfs, dir, info, 0);\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                lfs_log_dir_state(\"no split and end of entries: returning false\", lfs, dir, info, 0);\n                return false;\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            lfs_log_dir_state(\"after lfs_dir_fetch\", lfs, dir, info, err);\n            if (err) {\n                lfs_log_dir_state(\"lfs_dir_fetch returned error: propagating\", lfs, dir, info, err);\n                return err;\n            }\n\n            dir->id = 0;\n            lfs_log_dir_state(\"after resetting dir->id to 0\", lfs, dir, info, 0);\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        lfs_log_dir_state(\"after lfs_dir_getinfo\", lfs, dir, info, err);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_log_dir_state(\"lfs_dir_getinfo returned fatal error: propagating\", lfs, dir, info, err);\n            return err;\n        }\n\n        dir->id += 1;\n        lfs_log_dir_state(\"after incrementing dir->id\", lfs, dir, info, 0);\n        if (err != LFS_ERR_NOENT) {\n            lfs_log_dir_state(\"found valid entry: breaking loop\", lfs, dir, info, err);\n            break;\n        }\n        lfs_log_dir_state(\"entry was NOENT: continuing loop\", lfs, dir, info, err);\n    }\n\n    dir->pos += 1;\n    lfs_log_dir_state(\"returning true (found entry)\", lfs, dir, info, 0);\n    return true;\n}\n"
}