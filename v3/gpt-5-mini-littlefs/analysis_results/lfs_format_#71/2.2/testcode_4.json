{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization 'int err = 0;' at the start of lfs_format_ is redundant. The very next assignment is 'err = lfs_init(lfs, cfg);' and every subsequent use of err is preceded by explicit assignments (or immediate return). Removing the initial '= 0' would not change program behaviour, so the initialization is an executed operation whose removal would not affect behaviour \u2014 i.e. dead code per MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/712.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format_:\n```c\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n    {\n        err = lfs_init(lfs, cfg);\n        if (err) {\n            return err;\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        // create free lookahead\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        // create root dir\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        if (err) {\n            goto cleanup;\n        }\n\n        // write one superblock\n        lfs_superblock_t superblock = {\n            .version     = lfs_fs_disk_version(lfs),\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        if (err) {\n            goto cleanup;\n        }\n\n        // force compaction to prevent accidentally mounting any\n        // older version of littlefs that may live on disk\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        if (err) {\n            goto cleanup;\n        }\n\n        // sanity check that fetch works\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        if (err) {\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_deinit(lfs);\n    return err;\n\n}\n```\n</target_code>\nPlease provide the modified lfs_format_ code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper. Writes lightweight traces to /tmp/logs/712.txt.\n   Kept minimal to avoid affecting program behaviour. */\nstatic void lfs_log_probe(const char *label, int err, const void *lfs_ptr, const void *cfg_ptr) {\n    FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n    if (f) {\n        /* Log the probe label, current err value, and pointer addresses for context. */\n        fprintf(f, \"[probe] %s: err=%d lfs=%p cfg=%p\\n\", label, err, lfs_ptr, cfg_ptr);\n        fclose(f);\n    }\n}\n\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n    /* Probe: capture the initial initialization that is claimed to be dead code. */\n    lfs_log_probe(\"after_initial_int_err_eq_0\", err, (const void *)lfs, (const void *)cfg);\n    {\n        /* Probe just before calling lfs_init to show the overwrite of err. */\n        lfs_log_probe(\"before_lfs_init_call\", err, (const void *)lfs, (const void *)cfg);\n\n        err = lfs_init(lfs, cfg);\n        lfs_log_probe(\"after_lfs_init_call\", err, (const void *)lfs, (const void *)cfg);\n        if (err) {\n            lfs_log_probe(\"return_after_lfs_init_error\", err, (const void *)lfs, (const void *)cfg);\n            return err;\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        /* create free lookahead */\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        /* create root dir */\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        lfs_log_probe(\"after_lfs_dir_alloc\", err, (const void *)lfs, (const void *)cfg);\n        if (err) {\n            lfs_log_probe(\"goto_cleanup_dir_alloc_error\", err, (const void *)lfs, (const void *)cfg);\n            goto cleanup;\n        }\n\n        /* write one superblock */\n        lfs_superblock_t superblock = {\n            .version     = lfs_fs_disk_version(lfs),\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        lfs_log_probe(\"after_first_dir_commit_superblock\", err, (const void *)lfs, (const void *)cfg);\n        if (err) {\n            lfs_log_probe(\"goto_cleanup_superblock_commit_error\", err, (const void *)lfs, (const void *)cfg);\n            goto cleanup;\n        }\n\n        /* force compaction to prevent accidentally mounting any\n           older version of littlefs that may live on disk */\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        lfs_log_probe(\"after_second_dir_commit_compaction\", err, (const void *)lfs, (const void *)cfg);\n        if (err) {\n            lfs_log_probe(\"goto_cleanup_compaction_error\", err, (const void *)lfs, (const void *)cfg);\n            goto cleanup;\n        }\n\n        /* sanity check that fetch works */\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        lfs_log_probe(\"after_lfs_dir_fetch\", err, (const void *)lfs, (const void *)cfg);\n        if (err) {\n            lfs_log_probe(\"goto_cleanup_fetch_error\", err, (const void *)lfs, (const void *)cfg);\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_log_probe(\"cleanup_before_deinit\", err, (const void *)lfs, (const void *)cfg);\n    lfs_deinit(lfs);\n    /* Log final return value; avoid dereferencing lfs after deinit. */\n    lfs_log_probe(\"final_return\", err, NULL, NULL);\n    return err;\n\n}\n"
}