{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_fs_disk_version takes a non-const pointer (lfs_t *lfs) but only reads from the object (accesses lfs->cfg->disk_version). According to MISRA C 2023 Rule 8.13 the parameter should be const-qualified when possible. Change the signature to static uint32_t lfs_fs_disk_version(const lfs_t *lfs) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/713.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format_:\n```c\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n    {\n        err = lfs_init(lfs, cfg);\n        if (err) {\n            return err;\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        // create free lookahead\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        // create root dir\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        if (err) {\n            goto cleanup;\n        }\n\n        // write one superblock\n        lfs_superblock_t superblock = {\n            .version     = lfs_fs_disk_version(lfs),\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        if (err) {\n            goto cleanup;\n        }\n\n        // force compaction to prevent accidentally mounting any\n        // older version of littlefs that may live on disk\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        if (err) {\n            goto cleanup;\n        }\n\n        // sanity check that fetch works\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        if (err) {\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_deinit(lfs);\n    return err;\n\n}\n```\n</target_code>\nPlease provide the modified lfs_format_ code.\n",
  "test_code": "static void lfs_format_log_stage(const char *stage, const lfs_t *lfs, const struct lfs_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/713.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log basic stage, pointers and error code. Avoid dereferencing potentially\n     * uninitialized lfs pointer unless it is known to be initialized. */\n    fprintf(f, \"stage=%s err=%d lfs=%p cfg=%p\\n\",\n            stage, err, (const void *)lfs, (const void *)cfg);\n\n    if (cfg != NULL) {\n        /* Most cfg fields are safe to read even before lfs_init */\n        fprintf(f, \"  cfg: block_count=%u block_size=%u lookahead_size=%u\\n\",\n                (unsigned)cfg->block_count,\n                (unsigned)cfg->block_size,\n                (unsigned)cfg->lookahead_size);\n    }\n\n    if (lfs != NULL) {\n        /* Only print lfs fields that are safe to read after init; guard usage\n         * so callers can use this at multiple points. */\n        fprintf(f, \"  lfs: block_count=%u name_max=%u file_max=%u attr_max=%u\\n\",\n                (unsigned)lfs->block_count,\n                (unsigned)lfs->name_max,\n                (unsigned)lfs->file_max,\n                (unsigned)lfs->attr_max);\n        /* Guard lookahead access since lfs->cfg may be NULL before init. */\n        if (lfs->cfg != NULL) {\n            fprintf(f, \"  lfs->cfg: lookahead_size=%u\\n\",\n                    (unsigned)lfs->cfg->lookahead_size);\n        }\n    }\n\n    fclose(f);\n}\n\nstatic void lfs_format_log_lookahead(const lfs_t *lfs) {\n    FILE *f = fopen(\"/tmp/logs/713.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    if (lfs != NULL) {\n        fprintf(f, \"lookahead: start=%u size=%u next=%u buffer=%p\\n\",\n                (unsigned)lfs->lookahead.start,\n                (unsigned)lfs->lookahead.size,\n                (unsigned)lfs->lookahead.next,\n                (const void *)lfs->lookahead.buffer);\n    } else {\n        fprintf(f, \"lookahead: lfs is NULL\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n\n    lfs_format_log_stage(\"entry\", lfs, cfg, err);\n\n    {\n        err = lfs_init(lfs, cfg);\n        lfs_format_log_stage(\"after_init\", lfs, cfg, err);\n        if (err) {\n            return err;\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        /* create free lookahead */\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        /* Log lookahead state after initialization */\n        lfs_format_log_lookahead(lfs);\n\n        /* create root dir */\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        lfs_format_log_stage(\"after_dir_alloc\", lfs, cfg, err);\n        if (err) {\n            goto cleanup;\n        }\n\n        /* write one superblock */\n        uint32_t disk_version = lfs_fs_disk_version(lfs);\n        /* Log the disk version value read from lfs */\n        {\n            FILE *f = fopen(\"/tmp/logs/713.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"disk_version=%u (from lfs_fs_disk_version)\\n\",\n                        (unsigned)disk_version);\n                fclose(f);\n            }\n        }\n\n        lfs_superblock_t superblock = {\n            .version     = disk_version,\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        lfs_format_log_stage(\"after_superblock_commit\", lfs, cfg, err);\n        if (err) {\n            goto cleanup;\n        }\n\n        /* force compaction to prevent accidentally mounting any\n         * older version of littlefs that may live on disk */\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        lfs_format_log_stage(\"after_compaction_commit\", lfs, cfg, err);\n        if (err) {\n            goto cleanup;\n        }\n\n        /* sanity check that fetch works */\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        lfs_format_log_stage(\"after_dir_fetch\", lfs, cfg, err);\n        if (err) {\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_format_log_stage(\"cleanup_before_deinit\", lfs, cfg, err);\n    lfs_deinit(lfs);\n    lfs_format_log_stage(\"cleanup_after_deinit\", lfs, cfg, err);\n    return err;\n\n}\n"
}