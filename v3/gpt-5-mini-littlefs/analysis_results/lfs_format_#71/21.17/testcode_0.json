{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size) can violate Rule 21.17 if lfs->lookahead.buffer does not point to an object at least lfs->cfg->lookahead_size bytes long (or is NULL). The snippet does not show the allocation/definition of lookahead.buffer; if its actual capacity is smaller than lfs->cfg->lookahead_size (or uninitialized), the memset will write out-of-bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/719.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format_:\n```c\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n    {\n        err = lfs_init(lfs, cfg);\n        if (err) {\n            return err;\n        }\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        // create free lookahead\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        // create root dir\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        if (err) {\n            goto cleanup;\n        }\n\n        // write one superblock\n        lfs_superblock_t superblock = {\n            .version     = lfs_fs_disk_version(lfs),\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        if (err) {\n            goto cleanup;\n        }\n\n        // force compaction to prevent accidentally mounting any\n        // older version of littlefs that may live on disk\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        if (err) {\n            goto cleanup;\n        }\n\n        // sanity check that fetch works\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        if (err) {\n            goto cleanup;\n        }\n    }\n\ncleanup:\n    lfs_deinit(lfs);\n    return err;\n\n}\n```\n</target_code>\nPlease provide the modified lfs_format_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper to log state to /tmp/logs/719.txt */\nstatic void lfs_log_probe(const char *stage, void *lfs_ptr, const struct lfs_config *cfg_ptr) {\n    FILE *f = fopen(\"/tmp/logs/719.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Attempt to print as much relevant state as possible without changing program logic. */\n    /* Cast to uintptr_t/unsigned long long for portable integer printing. */\n    fprintf(f, \"STAGE=%s lfs=%p cfg=%p\\n\", stage, lfs_ptr, (const void*)cfg_ptr);\n\n    if (lfs_ptr != NULL) {\n        /* We don't know the real type layout at this point in isolation, but\n         * in the target code lfs_t contains members used below. We attempt\n         * to print them defensively by casting pointers to void* and integers\n         * to unsigned long long. If any member isn't available in a build,\n         * this code will rely on the compiler to diagnose it in-context. */\n        /* Use volatile pointers to avoid accidental optimization reordering. */\n        volatile uintptr_t lfs_v = (uintptr_t)lfs_ptr;\n        (void)lfs_v; /* silence unused in some contexts */\n    }\n\n    if (cfg_ptr != NULL) {\n        /* print cfg fields that are relevant to lookahead and block layout */\n        fprintf(f, \"  cfg->lookahead_size=%llu cfg->block_size=%llu cfg->block_count=%llu\\n\",\n                (unsigned long long)cfg_ptr->lookahead_size,\n                (unsigned long long)cfg_ptr->block_size,\n                (unsigned long long)cfg_ptr->block_count);\n    }\n\n    /* Attempt best-effort printing of members from lfs structure. */\n    /* These members are accessed via pointer arithmetic to avoid depending\n     * on lfs_t definition being visible here in isolation; however, in the\n     * integrated build the real structure will be used. For clarity in logs\n     * we also print null/invalid pointers plainly. */\n    /* NOTE: In the integrated environment, these casts should match the real types. */\n    /* print separator and flush */\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nstatic int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = 0;\n    {\n        err = lfs_init(lfs, cfg);\n        if (err) {\n            /* Log failure to initialize */\n            lfs_log_probe(\"lfs_init_failed\", lfs, cfg);\n            return err;\n        }\n\n        /* Log state after successful lfs_init and before any modifications */\n        lfs_log_probe(\"after_lfs_init_before_lookahead\", lfs, cfg);\n\n        LFS_ASSERT(cfg->block_count != 0);\n\n        /* create free lookahead */\n        /* Probe right before the memset that is under scrutiny to capture\n         * the pointer value and size used in the call. */\n        {\n            FILE *f = fopen(\"/tmp/logs/719.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"ABOUT_TO_MEMSET: lfs=%p lookahead.buffer=%p lookahead_size=%llu lfs->cfg=%p lfs->block_count=%llu\\n\",\n                        (void*)lfs,\n                        (void*)(lfs ? lfs->lookahead.buffer : NULL),\n                        (unsigned long long)(lfs && lfs->cfg ? lfs->cfg->lookahead_size : (cfg ? cfg->lookahead_size : 0)),\n                        (void*)(lfs ? lfs->cfg : NULL),\n                        (unsigned long long)(lfs ? lfs->block_count : 0));\n                fclose(f);\n            }\n        }\n\n        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n\n        /* Log immediately after memset to capture that the call completed. */\n        lfs_log_probe(\"after_memset_lookahead\", lfs, cfg);\n\n        lfs->lookahead.start = 0;\n        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,\n                lfs->block_count);\n        lfs->lookahead.next = 0;\n        lfs_alloc_ckpoint(lfs);\n\n        /* create root dir */\n        lfs_mdir_t root;\n        err = lfs_dir_alloc(lfs, &root);\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/719.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"lfs_dir_alloc_failed: err=%d lfs=%p\\n\", err, (void*)lfs);\n                fclose(f);\n            }\n            goto cleanup;\n        }\n\n        /* write one superblock */\n        lfs_superblock_t superblock = {\n            .version     = lfs_fs_disk_version(lfs),\n            .block_size  = lfs->cfg->block_size,\n            .block_count = lfs->block_count,\n            .name_max    = lfs->name_max,\n            .file_max    = lfs->file_max,\n            .attr_max    = lfs->attr_max,\n        };\n\n        lfs_superblock_tole32(&superblock);\n        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},\n                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), \"littlefs\"},\n                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                    &superblock}));\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/719.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"lfs_dir_commit_superblock_failed: err=%d lfs=%p\\n\", err, (void*)lfs);\n                fclose(f);\n            }\n            goto cleanup;\n        }\n\n        /* force compaction to prevent accidentally mounting any\n         * older version of littlefs that may live on disk */\n        root.erased = false;\n        err = lfs_dir_commit(lfs, &root, NULL, 0);\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/719.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"lfs_dir_commit_compaction_failed: err=%d lfs=%p\\n\", err, (void*)lfs);\n                fclose(f);\n            }\n            goto cleanup;\n        }\n\n        /* sanity check that fetch works */\n        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/719.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"lfs_dir_fetch_failed: err=%d lfs=%p\\n\", err, (void*)lfs);\n                fclose(f);\n            }\n            goto cleanup;\n        }\n\n        /* Log successful path completion before cleanup */\n        lfs_log_probe(\"format_success_before_cleanup\", lfs, cfg);\n    }\n\ncleanup:\n    /* Log final state and error code before deinitialization */\n    {\n        FILE *f = fopen(\"/tmp/logs/719.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"cleanup: final_err=%d lfs=%p cfg=%p lookahead.buffer=%p lookahead_size=%llu\\n\",\n                    err, (void*)lfs, (const void*)cfg,\n                    (void*)(lfs ? lfs->lookahead.buffer : NULL),\n                    (unsigned long long)(lfs && lfs->cfg ? lfs->cfg->lookahead_size : (cfg ? cfg->lookahead_size : 0)));\n            fclose(f);\n        }\n    }\n\n    lfs_deinit(lfs);\n    return err;\n\n}\n"
}