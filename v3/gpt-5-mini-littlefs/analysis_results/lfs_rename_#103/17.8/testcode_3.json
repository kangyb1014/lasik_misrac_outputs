{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nlfs_rename_ passes &oldpath (a function parameter of type const char *) to lfs_dir_find, which assigns to *path (\"*path = name;\"). That write modifies the pointer variable oldpath in the caller (changes the pointer value), i.e. the pointer parameter itself is modified rather than only the object it points to, violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1037.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename_:\n```c\nstatic int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    // find old entry\n    lfs_mdir_t oldcwd;\n    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);\n    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {\n        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;\n    }\n\n    // find new entry\n    lfs_mdir_t newcwd;\n    uint16_t newid;\n    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&\n            !(prevtag == LFS_ERR_NOENT && lfs_path_islast(newpath))) {\n        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;\n    }\n\n    // if we're in the same pair there's a few special cases...\n    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);\n    uint16_t newoldid = lfs_tag_id(oldtag);\n\n    struct lfs_mlist prevdir;\n    prevdir.next = lfs->mlist;\n    if (prevtag == LFS_ERR_NOENT) {\n        // if we're a file, don't allow trailing slashes\n        if (lfs_path_isdir(newpath)\n                && lfs_tag_type3(oldtag) != LFS_TYPE_DIR) {\n            return LFS_ERR_NOTDIR;\n        }\n\n        // check that name fits\n        lfs_size_t nlen = lfs_path_namelen(newpath);\n        if (nlen > lfs->name_max) {\n            return LFS_ERR_NAMETOOLONG;\n        }\n\n        // there is a small chance we are being renamed in the same\n        // directory/ to an id less than our old id, the global update\n        // to handle this is a bit messy\n        if (samepair && newid <= newoldid) {\n            newoldid += 1;\n        }\n    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {\n        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n                ? LFS_ERR_ISDIR\n                : LFS_ERR_NOTDIR;\n    } else if (samepair && newid == newoldid) {\n        // we're renaming to ourselves??\n        return 0;\n    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t prevpair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(prevpair);\n\n        // must be empty before removal\n        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n        if (err) {\n            return err;\n        }\n\n        if (prevdir.m.count > 0 || prevdir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        prevdir.type = 0;\n        prevdir.id = 0;\n        lfs->mlist = &prevdir;\n    }\n\n    if (!samepair) {\n        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n    }\n\n    // move over all attributes\n    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(\n            {LFS_MKTAG_IF(prevtag != LFS_ERR_NOENT,\n                LFS_TYPE_DELETE, newid, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},\n            {LFS_MKTAG(lfs_tag_type3(oldtag),\n                newid, lfs_path_namelen(newpath)), newpath},\n            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},\n            {LFS_MKTAG_IF(samepair,\n                LFS_TYPE_DELETE, newoldid, 0), NULL}));\n    if (err) {\n        lfs->mlist = prevdir.next;\n        return err;\n    }\n\n    // let commit clean up after move (if we're different! otherwise move\n    // logic already fixed it for us)\n    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {\n        // prep gstate and delete move id\n        lfs_fs_prepmove(lfs, 0x3ff, NULL);\n        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));\n        if (err) {\n            lfs->mlist = prevdir.next;\n            return err;\n        }\n    }\n\n    lfs->mlist = prevdir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(prevtag != LFS_ERR_NOENT\n                && lfs_tag_type3(prevtag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe logging helper. Appends messages to /tmp/logs/1037.txt */\nstatic void lfs_1037_log(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/1037.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    /* Log entry and initial pointer/state info */\n    lfs_1037_log(\"ENTRY: lfs_rename_ called: lfs=%p, oldpath=%p (%s), &oldpath=%p, newpath=%p (%s), &newpath=%p\",\n            (void *)lfs,\n            (const void *)oldpath, (oldpath ? oldpath : \"(null)\"), (void *)&oldpath,\n            (const void *)newpath, (newpath ? newpath : \"(null)\"), (void *)&newpath);\n\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        lfs_1037_log(\"EARLY RETURN: lfs_fs_forceconsistency returned %d\", err);\n        return err;\n    }\n\n    // find old entry\n    lfs_mdir_t oldcwd;\n    const char *pre_oldpath = oldpath;\n    lfs_1037_log(\"BEFORE: calling lfs_dir_find(&oldcwd, &oldpath, NULL). pre_oldpath=%p (%s), &oldpath=%p\",\n            (const void *)pre_oldpath, (pre_oldpath ? pre_oldpath : \"(null)\"), (void *)&oldpath);\n    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);\n    lfs_1037_log(\"AFTER: lfs_dir_find returned oldtag=%ld. oldpath before=%p (%s), oldpath after=%p (%s), &oldpath=%p\",\n            (long)oldtag,\n            (const void *)pre_oldpath, (pre_oldpath ? pre_oldpath : \"(null)\"),\n            (const void *)oldpath, (oldpath ? oldpath : \"(null)\"), (void *)&oldpath);\n\n    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {\n        lfs_1037_log(\"ERROR/INVAL: oldtag=%ld, tag_id=%u\",\n                (long)oldtag, (unsigned)lfs_tag_id(oldtag));\n        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;\n    }\n\n    // find new entry\n    lfs_mdir_t newcwd;\n    uint16_t newid;\n    const char *pre_newpath = newpath;\n    lfs_1037_log(\"BEFORE: calling lfs_dir_find(&newcwd, &newpath, &newid). pre_newpath=%p (%s), &newpath=%p\",\n            (const void *)pre_newpath, (pre_newpath ? pre_newpath : \"(null)\"), (void *)&newpath);\n    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n    lfs_1037_log(\"AFTER: lfs_dir_find returned prevtag=%ld, newid=%u. newpath before=%p (%s), newpath after=%p (%s), &newpath=%p\",\n            (long)prevtag, (unsigned)newid,\n            (const void *)pre_newpath, (pre_newpath ? pre_newpath : \"(null)\"),\n            (const void *)newpath, (newpath ? newpath : \"(null)\"), (void *)&newpath);\n\n    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&\n            !(prevtag == LFS_ERR_NOENT && lfs_path_islast(newpath))) {\n        lfs_1037_log(\"ERROR/INVAL new entry: prevtag=%ld, tag_id=%u, lfs_path_islast(newpath)=%d\",\n                (long)prevtag, (unsigned)lfs_tag_id(prevtag), (int)lfs_path_islast(newpath));\n        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;\n    }\n\n    // if we're in the same pair there's a few special cases...\n    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);\n    uint16_t newoldid = lfs_tag_id(oldtag);\n\n    struct lfs_mlist prevdir;\n    prevdir.next = lfs->mlist;\n    if (prevtag == LFS_ERR_NOENT) {\n        lfs_1037_log(\"HANDLING NOENT for newpath. samepair=%d, newoldid=%u\",\n                (int)samepair, (unsigned)newoldid);\n        // if we're a file, don't allow trailing slashes\n        if (lfs_path_isdir(newpath)\n                && lfs_tag_type3(oldtag) != LFS_TYPE_DIR) {\n            lfs_1037_log(\"NOTDIR: newpath is dir but oldtag is not dir\");\n            return LFS_ERR_NOTDIR;\n        }\n\n        // check that name fits\n        lfs_size_t nlen = lfs_path_namelen(newpath);\n        if (nlen > lfs->name_max) {\n            lfs_1037_log(\"NAMETOOLONG: nlen=%u, name_max=%u\", (unsigned)nlen, (unsigned)lfs->name_max);\n            return LFS_ERR_NAMETOOLONG;\n        }\n\n        // there is a small chance we are being renamed in the same\n        // directory/ to an id less than our old id, the global update\n        // to handle this is a bit messy\n        if (samepair && newid <= newoldid) {\n            lfs_1037_log(\"ADJUST newoldid: samepair && newid(%u) <= newoldid(%u). incrementing newoldid\",\n                    (unsigned)newid, (unsigned)newoldid);\n            newoldid += 1;\n        }\n    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {\n        lfs_1037_log(\"TYPE MISMATCH: prevtag_type=%u, oldtag_type=%u\",\n                (unsigned)lfs_tag_type3(prevtag), (unsigned)lfs_tag_type3(oldtag));\n        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n                ? LFS_ERR_ISDIR\n                : LFS_ERR_NOTDIR;\n    } else if (samepair && newid == newoldid) {\n        // we're renaming to ourselves??\n        lfs_1037_log(\"RENAMING TO SELF: samepair && newid == newoldid (%u)\", (unsigned)newoldid);\n        return 0;\n    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t prevpair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);\n        lfs_1037_log(\"DIR_GET returned %ld for prevpair check\", (long)res);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(prevpair);\n\n        // must be empty before removal\n        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n        if (err) {\n            lfs_1037_log(\"FETCH ERR: %d\", err);\n            return err;\n        }\n\n        if (prevdir.m.count > 0 || prevdir.m.split) {\n            lfs_1037_log(\"DIR NOT EMPTY: count=%u, split=%d\", (unsigned)prevdir.m.count, (int)prevdir.m.split);\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            lfs_1037_log(\"PREPORPHANS ERR: %d\", err);\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        prevdir.type = 0;\n        prevdir.id = 0;\n        lfs->mlist = &prevdir;\n    }\n\n    if (!samepair) {\n        lfs_1037_log(\"PREP MOVE: not samepair, prepping move newoldid=%u, oldcwd.pair=%p\",\n                (unsigned)newoldid, (void *)oldcwd.pair);\n        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n    }\n\n    // move over all attributes\n    lfs_1037_log(\"COMMIT: about to call lfs_dir_commit for move (newid=%u, newoldid=%u)\", (unsigned)newid, (unsigned)newoldid);\n    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(\n            {LFS_MKTAG_IF(prevtag != LFS_ERR_NOENT,\n                LFS_TYPE_DELETE, newid, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},\n            {LFS_MKTAG(lfs_tag_type3(oldtag),\n                newid, lfs_path_namelen(newpath)), newpath},\n            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},\n            {LFS_MKTAG_IF(samepair,\n                LFS_TYPE_DELETE, newoldid, 0), NULL}));\n    if (err) {\n        lfs_1037_log(\"COMMIT ERR: %d. restoring mlist and returning\", err);\n        lfs->mlist = prevdir.next;\n        return err;\n    }\n\n    // let commit clean up after move (if we're different! otherwise move\n    // logic already fixed it for us)\n    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {\n        lfs_1037_log(\"POST-COMMIT: handling gstate move cleanup\");\n        // prep gstate and delete move id\n        lfs_fs_prepmove(lfs, 0x3ff, NULL);\n        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));\n        if (err) {\n            lfs_1037_log(\"POST-COMMIT ERR: %d. restoring mlist and returning\", err);\n            lfs->mlist = prevdir.next;\n            return err;\n        }\n    }\n\n    lfs->mlist = prevdir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(prevtag != LFS_ERR_NOENT\n                && lfs_tag_type3(prevtag) == LFS_TYPE_DIR);\n\n        lfs_1037_log(\"FIX ORPHAN: performing orphan fixups\");\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            lfs_1037_log(\"PREPORPHANS ERR (fix): %d\", err);\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n        if (err) {\n            lfs_1037_log(\"PRED ERR: %d\", err);\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n        if (err) {\n            lfs_1037_log(\"DIR_DROP ERR: %d\", err);\n            return err;\n        }\n    }\n\n    lfs_1037_log(\"EXIT: lfs_rename_ success\");\n    return 0;\n}\n"
}