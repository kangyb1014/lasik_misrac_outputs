{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg) is dead code because LFS_UNLOCK is defined as #define LFS_UNLOCK(cfg) ((void)cfg), which is a no-op. The statement is executed but has no observable effect, so removing it would not change program behaviour. This violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/372.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Forward declarations to avoid requiring other headers in this test snippet. */\ntypedef struct lfs lfs_t;\ntypedef struct lfs_dir lfs_dir_t;\n\n/*\n * Probe helper: append a simple structured log line to /tmp/logs/372.txt.\n * Keep this function small and side-effect free aside from the logging so\n * that it does not change the original logic of lfs_dir_rewind.\n */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_dir_t *dir, int err) {\n    FILE *f = fopen(\"/tmp/logs/372.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    /* Log stage, pointer values and error/state value. */\n    fprintf(f, \"%s: lfs=%p dir=%p err=%d\\n\", stage, (void*)lfs, (void*)dir, err);\n    fclose(f);\n}\n\n/* Original function with probes inserted around key operations. */\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Record entry into the function. */\n    lfs_probe_log(\"ENTRY\", lfs, dir, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt. */\n    lfs_probe_log(\"AFTER_LOCK\", lfs, dir, err);\n    if (err) {\n        lfs_probe_log(\"RETURN_AFTER_LOCK_FAILED\", lfs, dir, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Log before calling the internal implementation. */\n    lfs_probe_log(\"BEFORE_REWIND_IMPL\", lfs, dir, 0);\n    err = lfs_dir_rewind_(lfs, dir);\n\n    /* Log result from the internal implementation. */\n    lfs_probe_log(\"AFTER_REWIND_IMPL\", lfs, dir, err);\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n\n    /* Log immediately before the unlock call so external observers can see\n       that the unlock was reached in control flow. This is important for\n       demonstrating that the call to LFS_UNLOCK(lfs->cfg) is executed even\n       if it is a no-op (and therefore a candidate for dead code). */\n    lfs_probe_log(\"BEFORE_UNLOCK\", lfs, dir, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log immediately after the unlock call to record that execution passed\n       through the unlock call site. If LFS_UNLOCK is a no-op (as reported),\n       these logs will show the call was executed but had no state effect in\n       subsequent behavior. */\n    lfs_probe_log(\"AFTER_UNLOCK\", lfs, dir, err);\n\n    lfs_probe_log(\"EXIT\", lfs, dir, err);\n    return err;\n}\n"
}