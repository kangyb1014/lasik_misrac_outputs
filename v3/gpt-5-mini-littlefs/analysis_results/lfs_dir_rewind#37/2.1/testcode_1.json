{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg, 0), so err is always 0. Therefore the conditional if (err) { return err; } can never be true and the return inside that branch is unreachable. This constitutes a violation of MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function: append human-readable trace information to /tmp/logs/371.txt */\nstatic void lfs_probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/371.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    fprintf(f, \"[%s] \", tag);\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and the returned lock value so callers can reproduce whether the\n       following conditional is ever taken. This captures the violation scenario\n       where LFS_LOCK expands to ((void)cfg, 0) and err is always 0. */\n    lfs_probe_log(\"ENTRY\", \"lfs_dir_rewind(lfs=%p, dir=%p) LFS_LOCK -> %d\",\n                  (void*)lfs, (void*)dir, err);\n\n    if (err) {\n        /* Log that the early-return branch was taken and the err value. If this\n           log never appears in /tmp/logs/371.txt, it is evidence that the\n           branch is unreachable in practice. */\n        lfs_probe_log(\"BRANCH\", \"if (err) taken: returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_probe_log(\"CALL\", \"calling lfs_dir_rewind_(lfs=%p, dir=%p)\",\n                  (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    lfs_probe_log(\"RESULT\", \"lfs_dir_rewind_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    lfs_probe_log(\"UNLOCK\", \"about to unlock cfg=%p and return %d\", (void*)lfs->cfg, err);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}