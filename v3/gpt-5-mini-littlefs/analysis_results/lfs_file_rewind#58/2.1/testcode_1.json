{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided project LFS_LOCK is defined as #define LFS_LOCK(cfg) ((void)cfg,0). Therefore the statement int err = LFS_LOCK(lfs->cfg); always sets err to 0. The immediately following conditional if (err) { return err; } can never be true, so the return inside that branch is unreachable. This constitutes unreachable code in the project and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/581.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helpers: write simple logs to /tmp/logs/581.txt to capture control flow and state. */\nstatic void lfs_probe_ensure_dir(void) {\n    /* Best-effort create the directory; ignore errors (e.g. already exists) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f;\n    va_list ap;\n\n    lfs_probe_ensure_dir();\n    f = fopen(\"/tmp/logs/581.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock and pointers to reproduce the scenario */\n    lfs_probe_log(\"lfs_file_rewind: after LFS_LOCK, err=%d, lfs=%p, file=%p\", err, (void*)lfs, (void*)file);\n\n    if (err) {\n        /* Keep original behavior, but also log entering the error branch for evidence */\n        lfs_probe_log(\"lfs_file_rewind: entering error branch, will return %d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Log the result of the internal rewind call */\n    lfs_probe_log(\"lfs_file_rewind: after lfs_file_rewind_, err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"lfs_file_rewind: after LFS_UNLOCK, returning %d\", err);\n    return err;\n}\n"
}