{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as empty (#define LFS_TRACE(__VA_ARGS__)), so the statement LFS_TRACE(\"lfs_file_rewind -> %d\", err); expands to an empty/null statement (a no-op). That operation is executed but its removal would not affect program behaviour, i.e. it is dead code (the trace call is compiled out), which violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Minimal forward declarations so this unit compiles standalone within the\n   larger project. Definitions are provided elsewhere in the project. */\ntypedef struct lfs_s { void *cfg; } lfs_t;\ntypedef struct lfs_file_s lfs_file_t;\n\nint LFS_LOCK(void *cfg);\nvoid LFS_UNLOCK(void *cfg);\nint lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file);\n\n/* Probe function: append human-readable logs to /tmp/logs/582.txt. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Print the formatted message and a newline to simplify parsing. */\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the failure to acquire the lock and return as original logic. */\n        lfs_probe_log(\"lfs_file_rewind: LFS_LOCK failed -> %d (lfs=%p, file=%p)\",\n                      err, (void*)lfs, (void*)file);\n        return err;\n    }\n\n    /* Log entry into the function (replaces the LFS_TRACE call with an actual probe). */\n    lfs_probe_log(\"lfs_file_rewind: enter (lfs=%p, file=%p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Log the result of the internal rewind operation (replaces the LFS_TRACE call).\n       This provides concrete evidence that the original LFS_TRACE macro expansion\n       is not performed and that the probe itself is executed. */\n    lfs_probe_log(\"lfs_file_rewind: result -> %d (lfs=%p, file=%p)\",\n                  err, (void*)lfs, (void*)file);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}