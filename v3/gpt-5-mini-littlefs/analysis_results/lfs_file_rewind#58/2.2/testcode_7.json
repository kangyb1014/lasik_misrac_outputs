{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), which performs no observable action. The statement LFS_UNLOCK(lfs->cfg); is therefore executed but has no effect; removing it would not change program behaviour in the shown configuration. This constitutes dead code and violates MISRA C 2023 Rule 2.2. (If the macro is intended to be non-empty in other build configurations, the current project build still contains dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/582.txt.\n   Implemented as a small helper so original logic is preserved. */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Timestamp for ordering evidence */\n    time_t t = time(NULL);\n    struct tm tmbuf;\n#if defined(_POSIX_THREAD_SAFE_FUNCTIONS) || defined(_MSC_VER)\n    /* thread-safe localtime */\n    (void)localtime_r(&t, &tmbuf);\n#else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp) {\n            tmbuf = *tmp;\n        } else {\n            (void)0;\n        }\n    }\n#endif\n\n    char timestr[32];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmbuf) == 0) {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s - \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified function preserving original logic but adding probes\n   to capture the control flow and state around LFS_UNLOCK. */\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the failure to lock and pointers for repro */\n        probe_log(\"lfs_file_rewind: LFS_LOCK returned %d, lfs=%p, file=%p, cfg=%p\",\n                  err, (void*)lfs, (void*)file, (void*)lfs->cfg);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n\n    /* Probe before the unlock to record that the unlock will be invoked. */\n    probe_log(\"lfs_file_rewind: about to call LFS_UNLOCK(cfg) -- err=%d, lfs=%p, cfg=%p\",\n              err, (void*)lfs, (void*)lfs->cfg);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe after the unlock to show that control returns here and\n       that no observable change occurred (if the macro is a no-op). */\n    probe_log(\"lfs_file_rewind: returned from LFS_UNLOCK(cfg) -- err=%d, lfs=%p, cfg=%p\",\n              err, (void*)lfs, (void*)lfs->cfg);\n\n    return err;\n}\n"
}