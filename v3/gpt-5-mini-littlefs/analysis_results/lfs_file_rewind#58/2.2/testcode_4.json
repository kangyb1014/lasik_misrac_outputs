{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK is defined as ((void)cfg,0). Therefore the statement 'int err = LFS_LOCK(lfs->cfg);' always assigns 0 to err (no side-effects). The immediately following test 'if (err) { return err; }' can never be true, and the initial assignment is overwritten later by 'err = lfs_file_rewind_(lfs, file);'. Removing the LFS_LOCK assignment (and the always-false check) would not change program behaviour in this project configuration, so the assignment/macro invocation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/582.txt\n   This function is non-intrusive w.r.t. lfs logic (no changes to err,\n   no early returns). It only records values for later analysis. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record the exact value returned by LFS_LOCK and the cfg pointer\n       so we can reproduce whether the lock produced any effect. */\n    lfs_probe_log(\"[probe] LFS_LOCK called with cfg=%p -> returned err=%d\", (void*)lfs->cfg, err);\n\n    if (err) {\n        lfs_probe_log(\"[probe] LFS_LOCK error branch taken: err=%d\", err);\n        return err;\n    } else {\n        lfs_probe_log(\"[probe] LFS_LOCK success branch: err=%d (proceeding)\", err);\n    }\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Probe: record return from the underlying rewind helper. */\n    lfs_probe_log(\"[probe] lfs_file_rewind_ returned err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"[probe] LFS_UNLOCK called for cfg=%p, final return err=%d\", (void*)lfs->cfg, err);\n    return err;\n}\n"
}