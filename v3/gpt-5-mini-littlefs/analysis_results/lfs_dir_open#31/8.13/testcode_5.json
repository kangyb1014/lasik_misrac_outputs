{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: the call LFS_UNLOCK(lfs->cfg) passes the lfs->cfg pointer to LFS_UNLOCK using a non-const pointer type. If the LFS_UNLOCK implementation does not modify the object pointed-to, its parameter should be a pointer to a const-qualified type (for example: void LFS_UNLOCK(const struct lfs_config *cfg)); having it accept a non-const pointer in that case would violate MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/313.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/313.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *lt = localtime(&t);\n    if (lt) {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", lt) > 0) {\n            fprintf(f, \"[%s] \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    /* Log entry and pointers involved, including cfg pointer which is\n       relevant to the reported Rule 8.13 scenario. */\n    probe_log(\"ENTER lfs_dir_open: lfs=%p dir=%p path=\\\"%s\\\" cfg=%p\",\n              (void*)lfs, (void*)dir, path ? path : \"(null)\", (void*)(lfs ? lfs->cfg : NULL));\n\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"LFS_LOCK called with cfg=%p, returned %d\", (void*)lfs->cfg, err);\n    if (err) {\n        probe_log(\"lfs_dir_open early return due to lock failure: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    probe_log(\"lfs_dir_open_ returned %d (lfs=%p dir=%p path=\\\"%s\\\")\",\n              err, (void*)lfs, (void*)dir, path ? path : \"(null)\");\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n\n    probe_log(\"About to call LFS_UNLOCK with cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"Returned from LFS_UNLOCK for cfg=%p\", (void*)lfs->cfg);\n\n    probe_log(\"EXIT lfs_dir_open: return %d\", err);\n    return err;\n}\n"
}