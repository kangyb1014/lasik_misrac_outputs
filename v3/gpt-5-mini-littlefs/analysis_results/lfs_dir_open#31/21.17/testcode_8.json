{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The fragment does not ensure that the pointer 'name' (derived from the input 'path') points to a valid NUL-terminated object or is non-NULL before it is used by subsequent string.h calls (strspn, strcspn, memcmp, etc.). If a caller passes a NULL pointer or a pointer to a character buffer that is not NUL-terminated within its allocated bounds, the later calls to strspn/strcspn/memcmp can read past the end of the object, resulting in out-of-bounds accesses. Therefore Rule 21.17 can be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe functions to log control flow and state for debugging Rule 21.17 scenarios.\n   These functions intentionally avoid dereferencing 'path' to prevent introducing new\n   undefined behaviour. They record pointer values and decision points so reproducer\n   agents can correlate inputs with subsequent behaviour in the system. */\nstatic void probe_log_open_start(const void *lfs, const void *dir, const char *path) {\n    FILE *f = fopen(\"/tmp/logs/319.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"lfs_dir_open START: lfs=%p dir=%p path=%p\\n\", lfs, dir, (const void*)path);\n    if (path == NULL) {\n        fprintf(f, \"PROBE: path is NULL -> potential UB when treated as C string\\n\");\n    } else {\n        fprintf(f, \"PROBE: path is non-NULL (contents not dereferenced here)\\n\");\n    }\n    fclose(f);\n}\n\nstatic void probe_log_before_call(const char *path) {\n    FILE *f = fopen(\"/tmp/logs/319.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"PROBE: About to call lfs_dir_open_ with path=%p\\n\", (const void*)path);\n    /* We explicitly do NOT print path as a C-string here to avoid causing reads\n       beyond the bounds of the object referenced by 'path'. */\n    fclose(f);\n}\n\nstatic void probe_log_result(const char *path, int err) {\n    FILE *f = fopen(\"/tmp/logs/319.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"lfs_dir_open END: path=%p err=%d\\n\", (const void*)path, err);\n    if (err != 0) {\n        fprintf(f, \"PROBE: non-zero error returned -> may indicate failure path triggered by malformed path input\\n\");\n    }\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Additional probe logging to capture control flow & state for reproduction.\n       Keep the original LFS_TRACE call to preserve original behaviour. */\n    probe_log_open_start(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    probe_log_before_call(path);\n    err = lfs_dir_open_(lfs, dir, path);\n    probe_log_result(path, err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}