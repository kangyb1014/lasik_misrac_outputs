{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe locking/trace/unlock macros are no-ops in this project configuration, producing executed operations that have no effect. LFS_LOCK(cfg) is defined to '((void)cfg,0)', so err is always 0 and the branch 'if (err) { return err; }' can never be taken (the error-return path is redundant). LFS_TRACE expands to nothing, and LFS_UNLOCK(cfg) expands to '((void)cfg)' (just a value-evaluation), so the unlock/trace calls do not affect behaviour. These executed operations can be removed without changing program behaviour, which constitutes dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/312.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n\n/* Lightweight probe logger that appends human-readable events to /tmp/logs/312.txt\n   Designed to be non-intrusive: if logging fails, the function silently continues. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/312.txt\", \"a\");\n    if (!f) {\n        /* Try to create parent directory once and reopen. If that fails, skip logging. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/312.txt\", \"a\");\n        if (!f) return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1) {\n        fprintf(f, \"[%ld] \", (long)t);\n    } else {\n        fprintf(f, \"[time-err] \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    /* Probe: entry into function and parameters (addresses and path string). */\n    lfs_probe_log(\"ENTER lfs_dir_open: lfs=%p dir=%p path=\\\"%s\\\"\", (void*)lfs, (void*)dir, path ? path : \"(null)\");\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Probe: result of locking operation. This captures the reported violation scenario where\n       LFS_LOCK is a no-op returning 0, making the error-return branch unreachable. */\n    lfs_probe_log(\"After LFS_LOCK: err=%d\", err);\n\n    if (err) {\n        lfs_probe_log(\"Early return due to LFS_LOCK error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    lfs_probe_log(\"After LFS_TRACE (entry). About to assert mlist not open for dir=%p\", (void*)dir);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    /* Probe: before calling the internal open routine. */\n    lfs_probe_log(\"Calling lfs_dir_open_: lfs=%p dir=%p path=\\\"%s\\\"\", (void*)lfs, (void*)dir, path ? path : \"(null)\");\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Probe: result from internal open. */\n    lfs_probe_log(\"After lfs_dir_open_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    /* Probe: after unlock. In the violation scenario, LFS_UNLOCK is a no-op; this log helps\n       show that the unlock call executes but has no observable effect on control flow. */\n    lfs_probe_log(\"After LFS_UNLOCK. About to return err=%d\", err);\n\n    return err;\n}\n"
}