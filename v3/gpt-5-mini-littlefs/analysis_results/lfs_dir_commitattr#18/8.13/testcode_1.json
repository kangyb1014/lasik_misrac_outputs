{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'ntag' is a non-const lfs_tag_t but is only written once and then passed by address to lfs_dir_commitprog for read-only use. The pointer (&ntag) therefore points to a non-const object even though the callee expects/uses it as read-only (const). Declaring 'ntag' as const (const lfs_tag_t ntag = ...) would satisfy the requirement that pointers point to const-qualified types whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_commitattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_commitattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_commitattr:\n```c\nstatic int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,\n        lfs_tag_t tag, const void *buffer) {\n    // check if we fit\n    lfs_size_t dsize = lfs_tag_dsize(tag);\n    if (commit->off + dsize > commit->end) {\n        return LFS_ERR_NOSPC;\n    }\n\n    // write out tag\n    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);\n    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));\n    if (err) {\n        return err;\n    }\n\n    if (!(tag & 0x80000000)) {\n        // from memory\n        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));\n        if (err) {\n            return err;\n        }\n    } else {\n        // from disk\n        const struct lfs_diskoff *disk = buffer;\n        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {\n            // rely on caching to make this efficient\n            uint8_t dat;\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,\n                    disk->block, disk->off+i, &dat, 1);\n            if (err) {\n                return err;\n            }\n\n            err = lfs_dir_commitprog(lfs, commit, &dat, 1);\n            if (err) {\n                return err;\n            }\n        }\n    }\n\n    commit->ptag = tag & 0x7fffffff;\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_commitattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/183.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,\n        lfs_tag_t tag, const void *buffer) {\n    // log entry\n    lfs_log_probe(\"ENTER lfs_dir_commitattr: tag=0x%08x, commit_off=%llu, commit_end=%llu, buffer=%p\\n\",\n            (unsigned)tag, (unsigned long long)commit->off, (unsigned long long)commit->end, buffer);\n\n    // check if we fit\n    lfs_size_t dsize = lfs_tag_dsize(tag);\n    lfs_log_probe(\"computed dsize=%llu\\n\", (unsigned long long)dsize);\n    if (commit->off + dsize > commit->end) {\n        lfs_log_probe(\"NOSPC: commit->off + dsize (%llu + %llu) > commit->end (%llu)\\n\",\n                (unsigned long long)commit->off, (unsigned long long)dsize, (unsigned long long)commit->end);\n        return LFS_ERR_NOSPC;\n    }\n\n    // write out tag\n    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);\n    lfs_log_probe(\"ntag created: value=0x%08x, &ntag=%p, sizeof(ntag)=%zu\\n\",\n            (unsigned)ntag, (void *)&ntag, sizeof(ntag));\n\n    lfs_log_probe(\"calling lfs_dir_commitprog with &ntag (expected read-only)\\n\");\n    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));\n    lfs_log_probe(\"lfs_dir_commitprog returned %d after &ntag\\n\", err);\n    if (err) {\n        lfs_log_probe(\"EXIT lfs_dir_commitattr early: err=%d (after writing ntag)\\n\", err);\n        return err;\n    }\n\n    if (!(tag & 0x80000000)) {\n        // from memory\n        lfs_log_probe(\"writing from memory: buffer=%p, bytes=%llu\\n\", buffer, (unsigned long long)(dsize - sizeof(tag)));\n        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));\n        lfs_log_probe(\"lfs_dir_commitprog returned %d after memory write\\n\", err);\n        if (err) {\n            lfs_log_probe(\"EXIT lfs_dir_commitattr early: err=%d (during memory write)\\n\", err);\n            return err;\n        }\n    } else {\n        // from disk\n        const struct lfs_diskoff *disk = buffer;\n        lfs_log_probe(\"writing from disk: disk->block=%llu, disk->off=%llu, bytes=%llu\\n\",\n                (unsigned long long)disk->block, (unsigned long long)disk->off,\n                (unsigned long long)(dsize - sizeof(tag)));\n        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {\n            // rely on caching to make this efficient\n            uint8_t dat;\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,\n                    disk->block, disk->off+i, &dat, 1);\n            lfs_log_probe(\"lfs_bd_read i=%llu returned %d, dat=0x%02x\\n\",\n                    (unsigned long long)i, err, (unsigned)dat);\n            if (err) {\n                lfs_log_probe(\"EXIT lfs_dir_commitattr early: err=%d (during bd_read i=%llu)\\n\", err, (unsigned long long)i);\n                return err;\n            }\n\n            lfs_log_probe(\"calling lfs_dir_commitprog with &dat (i=%llu, &dat=%p)\\n\",\n                    (unsigned long long)i, (void *)&dat);\n            err = lfs_dir_commitprog(lfs, commit, &dat, 1);\n            lfs_log_probe(\"lfs_dir_commitprog returned %d after dat i=%llu\\n\", err, (unsigned long long)i);\n            if (err) {\n                lfs_log_probe(\"EXIT lfs_dir_commitattr early: err=%d (during commitprog dat i=%llu)\\n\", err, (unsigned long long)i);\n                return err;\n            }\n        }\n    }\n\n    commit->ptag = tag & 0x7fffffff;\n    lfs_log_probe(\"commit complete: updated commit->ptag=0x%08x, EXIT success\\n\", (unsigned)commit->ptag);\n    return 0;\n}\n"
}