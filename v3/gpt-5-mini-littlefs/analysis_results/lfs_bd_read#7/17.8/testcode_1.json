{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter variables 'off' (lfs_off_t) and 'size' (lfs_size_t) are modified in-place (off += diff; size -= diff;) within the function. This violates MISRA C 2023 Rule 17.8 which states function parameters shall not be modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/77.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_read:\n```c\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_read code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state for Rule 17.8 investigation.\n * Writes human-readable traces to /tmp/logs/77.txt. Uses long long types to\n * avoid dependence on project typedefs in the probe signature. */\nstatic void lfs_log_probe(const char *where, long long block, long long off, long long size, long long diff, int err) {\n    FILE *f = fopen(\"/tmp/logs/77.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    if (err) {\n        fprintf(f, \"%s: block=%lld off=%lld size=%lld diff=%lld err=%d\\n\", where, block, off, size, diff, err);\n    } else {\n        fprintf(f, \"%s: block=%lld off=%lld size=%lld diff=%lld\\n\", where, block, off, size, diff);\n    }\n    fflush(f);\n    fclose(f);\n}\n\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    /* Log entry with initial parameter values */\n    lfs_log_probe(\"lfs_bd_read_entry\", (long long)block, (long long)off, (long long)size, 0, 0);\n\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        lfs_log_probe(\"lfs_bd_read_corrupt\", (long long)block, (long long)off, (long long)size, 0, LFS_ERR_CORRUPT);\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                /* is already in pcache? */\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                /* Log before modification of off/size */\n                lfs_log_probe(\"pcache_hit_before\", (long long)block, (long long)off, (long long)size, (long long)diff, 0);\n\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n\n                /* Log after modification of off/size to capture the violation scenario */\n                lfs_log_probe(\"pcache_hit_after\", (long long)block, (long long)off, (long long)size, (long long)diff, 0);\n                continue;\n            }\n\n            /* pcache takes priority */\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                /* is already in rcache? */\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n\n                /* Log before modification of off/size */\n                lfs_log_probe(\"rcache_hit_before\", (long long)block, (long long)off, (long long)size, (long long)diff, 0);\n\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n\n                /* Log after modification of off/size */\n                lfs_log_probe(\"rcache_hit_after\", (long long)block, (long long)off, (long long)size, (long long)diff, 0);\n                continue;\n            }\n\n            /* rcache takes priority */\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            /* bypass cache? */\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n\n            /* Log before direct read (bypass) */\n            lfs_log_probe(\"bypass_before\", (long long)block, (long long)off, (long long)size, (long long)diff, 0);\n\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                lfs_log_probe(\"bypass_read_err\", (long long)block, (long long)off, (long long)size, (long long)diff, err);\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            /* Log after direct read modifications */\n            lfs_log_probe(\"bypass_after\", (long long)block, (long long)off, (long long)size, (long long)diff, 0);\n            continue;\n        }\n\n        /* load to cache, first condition can no longer fail */\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n\n        /* Log before cache load read */\n        lfs_log_probe(\"cache_load_before_read\", (long long)block, (long long)off, (long long)size, (long long)rcache->size, 0);\n\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            lfs_log_probe(\"cache_load_read_err\", (long long)block, (long long)off, (long long)size, (long long)rcache->size, err);\n            return err;\n        }\n    }\n\n    lfs_log_probe(\"lfs_bd_read_return_ok\", (long long)block, (long long)off, (long long)size, 0, 0);\n    return 0;\n}\n"
}