{
  "user_message": "An agent A claimed that the following lfs_bd_read code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_bd_read.\n```c\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe value parameters 'off' (lfs_off_t) and 'size' (lfs_size_t) are modified inside the loop (e.g. off += diff; size -= diff;). Rule 17.8 forbids modifying function parameters; these should be copied to local variables before mutation (e.g. lfs_off_t cur_off = off; lfs_size_t cur_size = size).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER lfs_bd_read: block=1 off=0 size=4 hint=4 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=4294967295,off=0,size=163840)\nLOAD RCACHE (before cfg->read): block=1 rcache.off=0 rcache.size=16 off=0 size=4 hint=4\nLOAD RCACHE (after): block=1 rcache.off=0 rcache.size=16\nRCACHE HIT (before memcpy): block=1 off=0 size=4 diff=4 rcache.off=0 rcache.size=16\nRCACHE HIT (after memcpy): new_off=4 new_size=0\nRETURN 0: final_off=4 final_size=0\nENTER lfs_bd_read: block=0 off=64 size=1 hint=16 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=1,off=0,size=16)\nLOAD RCACHE (before cfg->read): block=0 rcache.off=64 rcache.size=16 off=64 size=1 hint=16\nLOAD RCACHE (after): block=0 rcache.off=64 rcache.size=16\nRCACHE HIT (before memcpy): block=0 off=64 size=1 diff=1 rcache.off=64 rcache.size=16\nRCACHE HIT (after memcpy): new_off=65 new_size=0\nRETURN 0: final_off=65 final_size=0\nENTER lfs_bd_read: block=0 off=64 size=8 hint=16 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=64,size=16)\nRCACHE HIT (before memcpy): block=0 off=64 size=8 diff=8 rcache.off=64 rcache.size=16\nRCACHE HIT (after memcpy): new_off=72 new_size=0\nRETURN 0: final_off=72 final_size=0\nENTER lfs_bd_read: block=0 off=72 size=8 hint=8 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=64,size=16)\nRCACHE HIT (before memcpy): block=0 off=72 size=8 diff=8 rcache.off=64 rcache.size=16\nRCACHE HIT (after memcpy): new_off=80 new_size=0\nRETURN 0: final_off=80 final_size=0\nENTER lfs_bd_read: block=0 off=0 size=8 hint=64 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=4294967295,off=64,size=16)\nLOAD RCACHE (before cfg->read): block=0 rcache.off=0 rcache.size=64 off=0 size=8 hint=64\nLOAD RCACHE (after): block=0 rcache.off=0 rcache.size=64\nRCACHE HIT (before memcpy): block=0 off=0 size=8 diff=8 rcache.off=0 rcache.size=64\nRCACHE HIT (after memcpy): new_off=8 new_size=0\nRETURN 0: final_off=8 final_size=0\nENTER lfs_bd_read: block=0 off=8 size=8 hint=56 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=0,size=64)\nRCACHE HIT (before memcpy): block=0 off=8 size=8 diff=8 rcache.off=0 rcache.size=64\nRCACHE HIT (after memcpy): new_off=16 new_size=0\nRETURN 0: final_off=16 final_size=0\nENTER lfs_bd_read: block=0 off=16 size=8 hint=48 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=0,size=64)\nRCACHE HIT (before memcpy): block=0 off=16 size=8 diff=8 rcache.off=0 rcache.size=64\nRCACHE HIT (after memcpy): new_off=24 new_size=0\nRETURN 0: final_off=24 final_size=0\nENTER lfs_bd_read: block=0 off=24 size=8 hint=40 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=0,size=64)\nRCACHE HIT (before memcpy): block=0 off=24 size=8 diff=8 rcache.off=0 rcache.size=64\nRCACHE HIT (after memcpy): new_off=32 new_size=0\nRETURN 0: final_off=32 final_size=0\nENTER lfs_bd_read: block=0 off=32 size=8 hint=32 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=0,size=64)\nRCACHE HIT (before memcpy): block=0 off=32 size=8 diff=8 rcache.off=0 rcache.size=64\nRCACHE HIT (after memcpy): new_off=40 new_size=0\nRETURN 0: final_off=40 final_size=0\nENTER lfs_bd_read: block=0 off=40 size=8 hint=24 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=0,size=64)\nRCACHE HIT (before memcpy): block=0 off=40 size=8 diff=8 rcache.off=0 rcache.size=64\nRCACHE HIT (after memcpy): new_off=48 new_size=0\nRETURN 0: final_off=48 final_size=0\nENTER lfs_bd_read: block=0 off=48 size=8 hint=16 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=0,size=64)\nRCACHE HIT (before memcpy): block=0 off=48 size=8 diff=8 rcache.off=0 rcache.size=64\nRCACHE HIT (after memcpy): new_off=56 new_size=0\nRETURN 0: final_off=56 final_size=0\nENTER lfs_bd_read: block=0 off=56 size=4 hint=8 pcache(block=4294967295,off=4294967295,size=4294967295) rcache(block=0,off=0,size=64)\nRCACHE HIT (before memcpy): block=0 off=56 size=4 diff=4 rcache.off=0 rcache.size=64\nRCACHE HIT (after memcpy): new_off=60 new_size=0\nRETURN 0: final_o\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_bd_read:\ntypedef uint32_t lfs_size_t\n...\ntypedef uint32_t lfs_off_t\n...\ntypedef uint32_t lfs_block_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that function parameters shall not be modified (pointer targets may be modified, but not the pointer itself). In lfs_bd_read the value parameters off and size are mutated (off += diff; size -= diff;) within the function, so this contravenes Rule 17.8. The safe remedy is to copy these input parameters into local non-parameter variables (e.g. cur_off and cur_size) and mutate those instead."
}