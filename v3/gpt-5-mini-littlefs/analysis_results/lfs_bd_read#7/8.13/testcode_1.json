{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'lfs' is declared as lfs_t *lfs but is only read from (no writes to *lfs or its members occur in this function). According to MISRA C 2023 Rule 8.13 it should be declared as a pointer to const (const lfs_t *lfs) when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_read:\n```c\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void lfs_bd_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n\n    /* Initial state log */\n    lfs_bd_log(\"lfs_bd_read called: lfs=%p, cfg=%p, block_size=%llu, read_size=%llu, cache_size=%llu, block_count=%llu, hint=%llu, block=%llu, off=%llu, size=%llu, pcache=%p, rcache=%p, buffer=%p\",\n            (void*)lfs,\n            (void*)(lfs ? lfs->cfg : NULL),\n            (unsigned long long)(lfs ? (unsigned long long)lfs->cfg->block_size : 0ULL),\n            (unsigned long long)(lfs ? (unsigned long long)lfs->cfg->read_size : 0ULL),\n            (unsigned long long)(lfs ? (unsigned long long)lfs->cfg->cache_size : 0ULL),\n            (unsigned long long)(lfs ? (unsigned long long)lfs->block_count : 0ULL),\n            (unsigned long long)hint,\n            (unsigned long long)block,\n            (unsigned long long)off,\n            (unsigned long long)size,\n            (void*)pcache,\n            (void*)rcache,\n            buffer);\n    if (pcache) {\n        lfs_bd_log(\"pcache: block=%llu, off=%llu, size=%llu, buffer=%p\",\n                (unsigned long long)pcache->block,\n                (unsigned long long)pcache->off,\n                (unsigned long long)pcache->size,\n                (void*)pcache->buffer);\n    }\n    if (rcache) {\n        lfs_bd_log(\"rcache: block=%llu, off=%llu, size=%llu, buffer=%p\",\n                (unsigned long long)rcache->block,\n                (unsigned long long)rcache->off,\n                (unsigned long long)rcache->size,\n                (void*)rcache->buffer);\n    }\n\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        lfs_bd_log(\"Invalid read request: off+size=%llu, block_size=%llu, block=%llu, block_count=%llu -> LFS_ERR_CORRUPT\",\n                (unsigned long long)(off+size),\n                (unsigned long long)lfs->cfg->block_size,\n                (unsigned long long)block,\n                (unsigned long long)lfs->block_count);\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_bd_log(\"loop start: block=%llu, off=%llu, size=%llu, hint=%llu, data=%p\",\n                (unsigned long long)block,\n                (unsigned long long)off,\n                (unsigned long long)size,\n                (unsigned long long)hint,\n                (void*)data);\n\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            lfs_bd_log(\"pcache hit candidate: block==pcache->block (block=%llu), off=%llu, pcache.off=%llu, pcache.size=%llu\",\n                    (unsigned long long)block,\n                    (unsigned long long)off,\n                    (unsigned long long)pcache->off,\n                    (unsigned long long)pcache->size);\n            if (off >= pcache->off) {\n                /* is already in pcache? */\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                lfs_bd_log(\"reading from pcache directly: diff=%llu, src_offset=%llu\",\n                        (unsigned long long)diff,\n                        (unsigned long long)(off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                lfs_bd_log(\"after pcache memcpy: off=%llu, size=%llu, data=%p\",\n                        (unsigned long long)off,\n                        (unsigned long long)size,\n                        (void*)data);\n                continue;\n            }\n\n            /* pcache takes priority */\n            diff = lfs_min(diff, pcache->off-off);\n            lfs_bd_log(\"pcache takes priority, adjusted diff=%llu (pcache.off-off=%llu)\",\n                    (unsigned long long)diff,\n                    (unsigned long long)(pcache->off-off));\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            lfs_bd_log(\"rcache hit candidate: block==rcache->block (block=%llu), off=%llu, rcache.off=%llu, rcache.size=%llu\",\n                    (unsigned long long)block,\n                    (unsigned long long)off,\n                    (unsigned long long)rcache->off,\n                    (unsigned long long)rcache->size);\n            if (off >= rcache->off) {\n                /* is already in rcache? */\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                lfs_bd_log(\"reading from rcache directly: diff=%llu, src_offset=%llu\",\n                        (unsigned long long)diff,\n                        (unsigned long long)(off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                lfs_bd_log(\"after rcache memcpy: off=%llu, size=%llu, data=%p\",\n                        (unsigned long long)off,\n                        (unsigned long long)size,\n                        (void*)data);\n                continue;\n            }\n\n            /* rcache takes priority */\n            diff = lfs_min(diff, rcache->off-off);\n            lfs_bd_log(\"rcache takes priority, adjusted diff=%llu (rcache.off-off=%llu)\",\n                    (unsigned long long)diff,\n                    (unsigned long long)(rcache->off-off));\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            /* bypass cache? */\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            lfs_bd_log(\"bypass cache read: block=%llu, off=%llu, diff=%llu, read_size=%llu\",\n                    (unsigned long long)block,\n                    (unsigned long long)off,\n                    (unsigned long long)diff,\n                    (unsigned long long)lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            lfs_bd_log(\"bypass read returned err=%d\", err);\n            if (err) {\n                lfs_bd_log(\"read error from cfg->read during bypass: err=%d -> returning err\", err);\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            lfs_bd_log(\"after bypass read: off=%llu, size=%llu, data=%p\",\n                    (unsigned long long)off,\n                    (unsigned long long)size,\n                    (void*)data);\n            continue;\n        }\n\n        /* load to cache, first condition can no longer fail */\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        lfs_bd_log(\"loading rcache: rcache->block=%llu, rcache->off=%llu, rcache->size=%llu\",\n                (unsigned long long)rcache->block,\n                (unsigned long long)rcache->off,\n                (unsigned long long)rcache->size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        lfs_bd_log(\"rcache read returned err=%d\", err);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            lfs_bd_log(\"read error from cfg->read while loading rcache: err=%d -> returning err\", err);\n            return err;\n        }\n    }\n\n    lfs_bd_log(\"lfs_bd_read completed successfully\");\n    return 0;\n}\n"
}