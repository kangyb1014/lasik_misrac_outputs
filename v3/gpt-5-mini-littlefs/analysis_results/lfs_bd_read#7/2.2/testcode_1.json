{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement LFS_ASSERT(err <= 0); is a debugging assertion that has no effect on program logic because the subsequent code still checks and handles errors (if (err) { return err; }). If LFS_ASSERT is defined as a no-op in production builds (or otherwise has no side-effects), then removing this assertion does not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/72.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_read:\n```c\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging function to capture control flow and state. */\nstatic void lfs_probe_log(const char *stage, const void *lfs_ptr,\n        const void *pcache_ptr, const void *rcache_ptr,\n        unsigned long long hint, unsigned long long block,\n        long long off, unsigned long long size, unsigned long long diff,\n        int err)\n{\n    FILE *f = fopen(\"/tmp/logs/72.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: lfs=%p pcache=%p rcache=%p hint=%llu block=%llu off=%lld size=%llu diff=%llu err=%d\\n\",\n            stage, lfs_ptr, pcache_ptr, rcache_ptr, hint, block, off, size, diff, err);\n    fclose(f);\n}\n\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n\n    /* Log entry state */\n    lfs_probe_log(\"ENTRY\", lfs, pcache, rcache,\n            (unsigned long long)hint, (unsigned long long)block,\n            (long long)off, (unsigned long long)size, 0, 0);\n\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        lfs_probe_log(\"CORRUPT_CHECK_FAILED\", lfs, pcache, rcache,\n                (unsigned long long)hint, (unsigned long long)block,\n                (long long)off, (unsigned long long)size, 0, LFS_ERR_CORRUPT);\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                /* is already in pcache? */\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n\n                lfs_probe_log(\"PCACHE_COPY\", lfs, pcache, rcache,\n                        (unsigned long long)hint, (unsigned long long)block,\n                        (long long)off, (unsigned long long)size,\n                        (unsigned long long)diff, 0);\n\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            /* pcache takes priority */\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                /* is already in rcache? */\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n\n                lfs_probe_log(\"RCACHE_COPY\", lfs, pcache, rcache,\n                        (unsigned long long)hint, (unsigned long long)block,\n                        (long long)off, (unsigned long long)size,\n                        (unsigned long long)diff, 0);\n\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            /* rcache takes priority */\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            /* bypass cache? */\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n\n            lfs_probe_log(\"BYPASS_READ_BEFORE\", lfs, pcache, rcache,\n                    (unsigned long long)hint, (unsigned long long)block,\n                    (long long)off, (unsigned long long)size,\n                    (unsigned long long)diff, 0);\n\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n\n            lfs_probe_log(\"BYPASS_READ_AFTER\", lfs, pcache, rcache,\n                    (unsigned long long)hint, (unsigned long long)block,\n                    (long long)off, (unsigned long long)size,\n                    (unsigned long long)diff, err);\n\n            if (err) {\n                lfs_probe_log(\"BYPASS_READ_ERROR_RETURN\", lfs, pcache, rcache,\n                        (unsigned long long)hint, (unsigned long long)block,\n                        (long long)off, (unsigned long long)size,\n                        (unsigned long long)diff, err);\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        /* load to cache, first condition can no longer fail */\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n\n        lfs_probe_log(\"RCACHE_LOAD_BEFORE_READ\", lfs, pcache, rcache,\n                (unsigned long long)hint, (unsigned long long)block,\n                (long long)off, (unsigned long long)size,\n                (unsigned long long)rcache->size, 0);\n\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n\n        /* Log just before assertion */\n        lfs_probe_log(\"BEFORE_ASSERT_LFS_ASSERT(err <= 0)\", lfs, pcache, rcache,\n                (unsigned long long)hint, (unsigned long long)block,\n                (long long)off, (unsigned long long)size,\n                (unsigned long long)rcache->size, err);\n\n        LFS_ASSERT(err <= 0);\n\n        /* Log after assertion to show subsequent handling */\n        lfs_probe_log(\"AFTER_ASSERT_LFS_ASSERT(err <= 0)\", lfs, pcache, rcache,\n                (unsigned long long)hint, (unsigned long long)block,\n                (long long)off, (unsigned long long)size,\n                (unsigned long long)rcache->size, err);\n\n        if (err) {\n            lfs_probe_log(\"RCACHE_READ_ERROR_RETURN\", lfs, pcache, rcache,\n                    (unsigned long long)hint, (unsigned long long)block,\n                    (long long)off, (unsigned long long)size,\n                    (unsigned long long)rcache->size, err);\n            return err;\n        }\n    }\n\n    lfs_probe_log(\"EXIT_SUCCESS\", lfs, pcache, rcache,\n            (unsigned long long)hint, (unsigned long long)block,\n            (long long)off, (unsigned long long)size, 0, 0);\n\n    return 0;\n}\n"
}