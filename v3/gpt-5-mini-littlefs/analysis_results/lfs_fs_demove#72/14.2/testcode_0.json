{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. The for statement uses a pointer loop counter 'f' initialized from lfs->mlist, tests 'f' in the condition, and advances with 'f = f->next'. The third clause reads the object f->next (a member of the current list element). The loop body calls functions lfs_file_outline() and lfs_file_flush(), whose behaviour is part of the loop body; those functions could modify the linked-list node (for example remove or relink the file, updating its 'next' pointer). If f->next (or the list nodes) can be modified by those functions, the third clause uses an object that is modified in the loop body, violating clause 3 of MISRA C 2023 Rule 14.2. Suggested fix: compute and store the next pointer before calling functions (e.g. lfs_file_t *next = f->next; ... calls ...; f = next;), thereby ensuring the third clause only modifies the loop counter and does not depend on objects altered by the body.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_demove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/724.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_demove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_demove:\n```c\nstatic int lfs_fs_demove(lfs_t *lfs) {\n    if (!lfs_gstate_hasmove(&lfs->gdisk)) {\n        return 0;\n    }\n\n    // Fix bad moves\n    LFS_DEBUG(\"Fixing move {0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16,\n            lfs->gdisk.pair[0],\n            lfs->gdisk.pair[1],\n            lfs_tag_id(lfs->gdisk.tag));\n\n    // no other gstate is supported at this time, so if we found something else\n    // something most likely went wrong in gstate calculation\n    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);\n\n    // fetch and delete the moved entry\n    lfs_mdir_t movedir;\n    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);\n    if (err) {\n        return err;\n    }\n\n    // prep gstate and delete move id\n    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);\n    lfs_fs_prepmove(lfs, 0x3ff, NULL);\n    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));\n    if (err) {\n        return err;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_demove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/724.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/724.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_fs_demove(lfs_t *lfs) {\n    /* Log entry and basic gstate presence */\n    lfs_log_probe(\"ENTER %s: lfs=%p\", \"lfs_fs_demove\", (void *)lfs);\n\n    if (!lfs_gstate_hasmove(&lfs->gdisk)) {\n        lfs_log_probe(\"gstate has no move; returning 0\");\n        return 0;\n    }\n\n    /* Log the move information observed */\n    lfs_log_probe(\n        \"Fixing move observed: pair[0]=0x%\" PRIx32 \", pair[1]=0x%\" PRIx32 \", tag=0x%\" PRIx16,\n        lfs->gdisk.pair[0],\n        lfs->gdisk.pair[1],\n        lfs_tag_id(lfs->gdisk.tag)\n    );\n\n    LFS_DEBUG(\"Fixing move {0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16,\n            lfs->gdisk.pair[0],\n            lfs->gdisk.pair[1],\n            lfs_tag_id(lfs->gdisk.tag));\n\n    /* no other gstate is supported at this time, so if we found something else\n       something most likely went wrong in gstate calculation */\n    lfs_log_probe(\"Asserting tag type is DELETE (tag=0x%\" PRIx16 \")\", lfs_tag_id(lfs->gdisk.tag));\n    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);\n\n    /* fetch and delete the moved entry */\n    lfs_mdir_t movedir;\n    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);\n    lfs_log_probe(\"lfs_dir_fetch returned err=%d (movedir@%p)\", err, (void *)&movedir);\n    if (err) {\n        lfs_log_probe(\"lfs_fs_demove: early return due to fetch error=%d\", err);\n        return err;\n    }\n\n    /* prep gstate and delete move id */\n    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);\n    lfs_log_probe(\"Preparing move removal: moveid=0x%\" PRIx16, moveid);\n    lfs_fs_prepmove(lfs, 0x3ff, NULL);\n\n    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));\n    lfs_log_probe(\"lfs_dir_commit returned err=%d for moveid=0x%\" PRIx16, err, moveid);\n    if (err) {\n        lfs_log_probe(\"lfs_fs_demove: returning error=%d after commit\", err);\n        return err;\n    }\n\n    lfs_log_probe(\"lfs_fs_demove: success, returning 0\");\n    return 0;\n}\n"
}