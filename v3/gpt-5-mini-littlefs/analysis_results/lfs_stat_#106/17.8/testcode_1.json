{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nlfs_stat_ passes the address of its parameter 'path' to lfs_dir_find: lfs_dir_find(lfs, &cwd, &path, NULL). Inside lfs_dir_find the pointer is dereferenced and updated (*path = name;), which changes the value of the caller's parameter 'path' in lfs_stat_. This results in modification of a function parameter (the pointer variable 'path'), violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1067.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat_:\n```c\nstatic int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    // only allow trailing slashes on dirs\n    if (strchr(path, '/') != NULL\n            && lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n        return LFS_ERR_NOTDIR;\n    }\n\n    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);\n}\n```\n</target_code>\nPlease provide the modified lfs_stat_ code.\n",
  "test_code": "static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Local includes for logging helpers. Including here keeps this\n       snippet self-contained while avoiding changes to global includes. */\n    #include <stdio.h>\n    #include <string.h>\n\n    lfs_mdir_t cwd;\n\n    /* Log entry state: address of local parameter variable, its value, and\n       a safe-print of the pointed-to string (if any). We limit the string\n       length to avoid extremely long logs. */\n    {\n        FILE *f = fopen(\"/tmp/logs/1067.txt\", \"a\");\n        if (f != NULL) {\n            fprintf(f, \"lfs_stat_ ENTER: &path=%p path=%p \\\"%.200s\\\"\\n\",\n                    (void *)&path, (void *)path, path ? path : \"(null)\");\n            fclose(f);\n        }\n    }\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n\n    /* Log result of lfs_dir_find and the (potentially modified) path. The\n       purpose is to capture whether the caller's 'path' pointer value has\n       changed by the callee. */\n    {\n        FILE *f = fopen(\"/tmp/logs/1067.txt\", \"a\");\n        if (f != NULL) {\n            if ((int)tag < 0) {\n                fprintf(f, \"lfs_stat_: lfs_dir_find returned tag=%d (error)\\n\", (int)tag);\n            } else {\n                fprintf(f, \"lfs_stat_: lfs_dir_find returned tag=0x%08x\\n\", (unsigned)tag);\n            }\n            fprintf(f, \"lfs_stat_ AFTER: &path=%p path=%p \\\"%.200s\\\"\\n\",\n                    (void *)&path, (void *)path, path ? path : \"(null)\");\n            fclose(f);\n        }\n    }\n\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    // only allow trailing slashes on dirs\n    if (strchr(path, '/') != NULL\n            && lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n        /* Log the not-dir condition for reproduction/evidence. */\n        FILE *f = fopen(\"/tmp/logs/1067.txt\", \"a\");\n        if (f != NULL) {\n            fprintf(f, \"lfs_stat_: trailing slash found but tag type != DIR; path=%p \\\"%.200s\\\" tag=0x%08x\\n\",\n                    (void *)path, path ? path : \"(null)\", (unsigned)tag);\n            fclose(f);\n        }\n        return LFS_ERR_NOTDIR;\n    }\n\n    int res = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);\n\n    /* Final log before returning to capture exit result and info pointer. */\n    {\n        FILE *f = fopen(\"/tmp/logs/1067.txt\", \"a\");\n        if (f != NULL) {\n            fprintf(f, \"lfs_stat_ EXIT: return=%d info=%p\\n\", res, (void *)info);\n            fclose(f);\n        }\n    }\n\n    return res;\n}\n"
}