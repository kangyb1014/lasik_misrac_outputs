{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_fs_disk_version takes a non-const pointer parameter (lfs_t *lfs) but only reads from lfs (casts to void when unused and otherwise reads lfs->cfg->disk_version). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. The signature should be changed to static uint32_t lfs_fs_disk_version(const lfs_t *lfs) (and callers updated accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/873.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe functions to log control flow and state for lfs_fs_stat. */\nstatic void lfs_fs_stat_log_lock_failed(const lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/873.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"lfs_fs_stat: LFS_LOCK failed, err=%d, lfs=%p\\n\", err, (const void *)lfs);\n        if (lfs != NULL) {\n            /* lfs->cfg may be NULL or invalid; attempt to report pointer if available */\n            fprintf(f, \"  lfs->cfg=%p\\n\", (const void *)lfs->cfg);\n            if (lfs->cfg != NULL) {\n                /* Try to print disk_version in a defensive manner. Cast to unsigned long for portability. */\n                fprintf(f, \"  lfs->cfg->disk_version=%lu\\n\", (unsigned long)lfs->cfg->disk_version);\n            }\n        }\n        fclose(f);\n    }\n}\n\nstatic void lfs_fs_stat_log_entry(const lfs_t *lfs, const struct lfs_fsinfo *fsinfo) {\n    FILE *f = fopen(\"/tmp/logs/873.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"ENTER lfs_fs_stat: lfs=%p, fsinfo=%p\\n\", (const void *)lfs, (const void *)fsinfo);\n        if (lfs == NULL) {\n            fprintf(f, \"  lfs is NULL\\n\");\n        } else {\n            fprintf(f, \"  lfs->cfg=%p\\n\", (const void *)lfs->cfg);\n            if (lfs->cfg != NULL) {\n                fprintf(f, \"  lfs->cfg->disk_version=%lu\\n\", (unsigned long)lfs->cfg->disk_version);\n            } else {\n                fprintf(f, \"  lfs->cfg is NULL\\n\");\n            }\n        }\n        fclose(f);\n    }\n}\n\nstatic void lfs_fs_stat_log_exit(const lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/873.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"EXIT lfs_fs_stat: lfs=%p, err=%d\\n\", (const void *)lfs, err);\n        if (lfs != NULL) {\n            fprintf(f, \"  lfs->cfg=%p\\n\", (const void *)lfs->cfg);\n            if (lfs->cfg != NULL) {\n                fprintf(f, \"  lfs->cfg->disk_version=%lu\\n\", (unsigned long)lfs->cfg->disk_version);\n            }\n        }\n        fclose(f);\n    }\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the lock failure so callers can see that the function returned early. */\n        lfs_fs_stat_log_lock_failed(lfs, err);\n        return err;\n    }\n\n    /* Log entry and relevant state after successful lock. */\n    lfs_fs_stat_log_entry((const lfs_t *)lfs, (const struct lfs_fsinfo *)fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    /* Log exit and relevant state before unlocking/returning. */\n    lfs_fs_stat_log_exit((const lfs_t *)lfs, err);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}