{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), which generates an executed no-op expression when invoked (e.g. LFS_UNLOCK(lfs->cfg) in lfs_fs_stat). That expression performs no observable action and its removal would not affect program behaviour in the given code, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/872.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe logging helpers. These are lightweight and try to create /tmp/logs\n * directory if it does not exist. They do not change the logic of\n * lfs_fs_stat and only append human-readable trace lines to\n * /tmp/logs/872.txt to capture control flow and state for analysis.\n */\nstatic void probe_ensure_dir(void) {\n    struct stat st;\n    if (stat(\"/tmp/logs\", &st) != 0) {\n        /* best-effort create; ignore errors */\n        (void)mkdir(\"/tmp/logs\", 0755);\n    }\n}\n\nstatic void probe_log(const char *fmt, ...) {\n    probe_ensure_dir();\n    FILE *f = fopen(\"/tmp/logs/872.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified lfs_fs_stat with probes inserted. Original logic is preserved\n * exactly: lock, trace, delegate to lfs_fs_stat_, trace, unlock, return.\n * Probes log entry, result of LFS_LOCK, invocation/return of lfs_fs_stat_,\n * and before/after LFS_UNLOCK to capture the reported no-op invocation.\n */\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    probe_log(\"ENTER lfs_fs_stat: lfs=%p fsinfo=%p\", (void*)lfs, (void*)fsinfo);\n\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"After LFS_LOCK: err=%d cfg=%p\", err, (void*)lfs->cfg);\n    if (err) {\n        probe_log(\"LFS_LOCK failed, returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    probe_log(\"Calling lfs_fs_stat_\");\n    err = lfs_fs_stat_(lfs, fsinfo);\n    probe_log(\"Returned from lfs_fs_stat_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n\n    probe_log(\"About to call LFS_UNLOCK(cfg=%p) - recording invocation even if it is a no-op\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"After LFS_UNLOCK(cfg=%p)\", (void*)lfs->cfg);\n\n    probe_log(\"EXIT lfs_fs_stat -> %d\", err);\n    return err;\n}\n"
}