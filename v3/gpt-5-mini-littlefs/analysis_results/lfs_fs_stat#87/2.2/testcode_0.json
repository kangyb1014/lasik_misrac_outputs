{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0), so it always evaluates to the constant 0. In lfs_fs_stat the code 'int err = LFS_LOCK(lfs->cfg); if (err) { return err; }' therefore has an error check/early-return branch that can never be taken and thus can be removed without affecting program behaviour. Likewise the related LFS_UNLOCK and LFS_TRACE macros are no-ops in this build, so those calls perform no action and could be removed without changing behaviour. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/872.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/872.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"ENTER lfs_fs_stat: lfs=%p fsinfo=%p LFS_LOCK returned %d\", (void*)lfs, (void*)fsinfo, err);\n    if (err) {\n        probe_log(\"lfs_fs_stat: early return due to LFS_LOCK error=%d\", err);\n        return err;\n    }\n    probe_log(\"lfs_fs_stat: calling LFS_TRACE with lfs=%p fsinfo=%p\", (void*)lfs, (void*)fsinfo);\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n    probe_log(\"lfs_fs_stat_: returned %d\", err);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    probe_log(\"lfs_fs_stat: after LFS_TRACE, err=%d; about to call LFS_UNLOCK\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"lfs_fs_stat: called LFS_UNLOCK\");\n    return err;\n}\n"
}