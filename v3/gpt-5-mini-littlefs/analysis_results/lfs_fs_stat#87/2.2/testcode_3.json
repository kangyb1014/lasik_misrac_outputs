{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: The statement 'int err = LFS_LOCK(lfs->cfg);' is dead code in the provided configuration. LFS_LOCK is defined as ((void)cfg,0) which has no observable side-effects and always yields 0, so the assignment and the subsequent 'if (err) { return err; }' cannot affect program behaviour. Removing the assignment (and the always-false check) would not change behaviour, so Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/872.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/872.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/872.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    lfs_log_probe(\"ENTER lfs_fs_stat: lfs=%p fsinfo=%p\", (void*)lfs, (void*)fsinfo);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log the returned error from LFS_LOCK so agents can observe that it is always 0 in the provided configuration */\n    lfs_log_probe(\"After LFS_LOCK: err=%d\", err);\n\n    if (err) {\n        lfs_log_probe(\"LFS_LOCK returned non-zero err=%d, returning immediately\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n    lfs_log_probe(\"Calling lfs_fs_stat_\");\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    lfs_log_probe(\"Returned from lfs_fs_stat_: err=%d\", err);\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"After LFS_UNLOCK: returning err=%d\", err);\n\n    return err;\n}\n"
}