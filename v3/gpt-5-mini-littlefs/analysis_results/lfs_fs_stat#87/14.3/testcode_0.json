{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the macro LFS_LOCK(cfg) expands to ((void)cfg,0), so err is initialized to the constant 0. The controlling expression if (err) is therefore invariant (always false). This is not one of the permitted exceptions (not an infinite loop nor the permitted do-while constant-false case), so it violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/875.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append control-flow/state info to /tmp/logs/875.txt\n * Keep as side-effect-free as reasonably possible (only file I/O).\n */\nstatic void lfs_fs_stat_probe(const char *event, int err, void *lfs_ptr, void *cfg_ptr, void *fsinfo_ptr) {\n    FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n    if (f == NULL) {\n        /* Try to create directory once, then reopen. Ignore errors beyond this. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/875.txt\", \"a\");\n    }\n    if (f) {\n        /* Log event, error code, and pointers involved in the scenario. */\n        fprintf(f, \"%s: err=%d, lfs=%p, lfs->cfg=%p, fsinfo=%p\\n\",\n                event, err, lfs_ptr, cfg_ptr, fsinfo_ptr);\n        fclose(f);\n    }\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    /* Preserve original logic while inserting probes to capture control flow/state. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe right after lock evaluation to capture the exact value of `err`. */\n    lfs_fs_stat_probe(\"after_lock\", err, (void*)lfs, (void*)lfs->cfg, (void*)fsinfo);\n\n    if (err) {\n        /* If branch taken, log that the early return path was exercised. */\n        lfs_fs_stat_probe(\"early_return_if_err\", err, (void*)lfs, (void*)lfs->cfg, (void*)fsinfo);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    /* Log before calling the underlying implementation. */\n    lfs_fs_stat_probe(\"before_lfs_fs_stat_\", err, (void*)lfs, (void*)lfs->cfg, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    /* Log result from underlying call. */\n    lfs_fs_stat_probe(\"after_lfs_fs_stat_\", err, (void*)lfs, (void*)lfs->cfg, (void*)fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe before returning to capture final state. */\n    lfs_fs_stat_probe(\"return\", err, (void*)lfs, (void*)lfs->cfg, (void*)fsinfo);\n\n    return err;\n}\n"
}