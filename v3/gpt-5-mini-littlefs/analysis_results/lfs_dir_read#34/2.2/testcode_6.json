{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0). Thus the statement int err = LFS_LOCK(lfs->cfg); always initializes err to 0. The subsequent check if (err) { return err; } can never be taken, so the error-handling path is never executed in this build and the LFS_LOCK invocation is effectively a no-op. Removing the call/assignment (and the redundant branch) would not change program behaviour for this project configuration, so this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/342.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append state and control-flow information to /tmp/logs/342.txt */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info, int err) {\n    FILE *f = fopen(\"/tmp/logs/342.txt\", \"a\");\n    if (f) {\n        /* Log pointer values and the err code so other agents can reproduce the scenario.\n           Accessing lfs->cfg is safe here because the original function already uses it. */\n        fprintf(f, \"[lfs_probe] %s: lfs=%p dir=%p info=%p err=%d cfg=%p\\n\",\n                stage, (void*)lfs, (void*)dir, (void*)info, err,\n                (void*)((lfs != (lfs_t*)0) ? (void*)lfs->cfg : (void*)0));\n        fclose(f);\n    }\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    /* Preserve original logic while adding probes around the lock, the guarded branch,\n       the internal call, and the unlock so the reported dead-code scenario can be observed. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe right after the lock invocation to capture the lock return value and cfg. */\n    lfs_probe_log(\"after_LFS_LOCK\", lfs, dir, info, err);\n\n    if (err) {\n        /* Probe the early return path so logs show whether this branch is ever taken. */\n        lfs_probe_log(\"early_return_if_err\", lfs, dir, info, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Probe before calling the internal implementation. */\n    lfs_probe_log(\"before_lfs_dir_read_\", lfs, dir, info, 0);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Probe after the internal call to capture its return value. */\n    lfs_probe_log(\"after_lfs_dir_read_\", lfs, dir, info, err);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe after unlock to record final state just before returning. */\n    lfs_probe_log(\"after_LFS_UNLOCK\", lfs, dir, info, err);\n\n    return err;\n}\n"
}