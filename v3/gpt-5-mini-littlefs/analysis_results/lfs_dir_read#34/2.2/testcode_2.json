{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), which is a no-op expression with no side-effects. Calls like LFS_UNLOCK(lfs->cfg) in lfs_dir_read therefore execute an operation that can be removed without affecting program behaviour (e.g. LFS_UNLOCK(lfs->cfg); at the end of lfs_dir_read). This constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/342.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper to append probe logs to /tmp/logs/342.txt. Keeps original logic intact. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/342.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and lock result to reproduce control flow for the report. */\n    lfs_probe_log(\"ENTER lfs_dir_read: lfs=%p dir=%p info=%p LFS_LOCK_err=%d\",\n            (void*)lfs, (void*)dir, (void*)info, err);\n\n    if (err) {\n        lfs_probe_log(\"lfs_dir_read: early return due to LFS_LOCK error=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    lfs_probe_log(\"lfs_dir_read: calling lfs_dir_read_ with lfs=%p dir=%p info=%p\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    lfs_probe_log(\"lfs_dir_read_: returned err=%d\", err);\n\n    /* Log immediately before calling LFS_UNLOCK so the call site is recorded. */\n    lfs_probe_log(\"lfs_dir_read: about to call LFS_UNLOCK(lfs->cfg) -- recording that this call occurred (cfg argument not printed)\");\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log immediately after calling LFS_UNLOCK to show that control returns here. */\n    lfs_probe_log(\"lfs_dir_read: returned from LFS_UNLOCK(lfs->cfg); returning err=%d\", err);\n\n    return err;\n}\n"
}