{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg) expands to ((void)cfg), which only evaluates and discards lfs->cfg (no side-effects). Removing that statement would not affect program behaviour with the provided definitions, so this executed operation is dead code and violates MISRA C 2023 Rule 2.2. (Note: in other build configurations where LFS_UNLOCK performs real unlocking it would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/342.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/342.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/342.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    probe_logf(\"[probe] lfs_dir_read: after LFS_LOCK -> err=%d, lfs=%p, dir=%p, info=%p, cfg=%p\",\n            err, (void*)lfs, (void*)dir, (void*)info, (void*)lfs->cfg);\n\n    if (err) {\n        probe_logf(\"[probe] lfs_dir_read: early return due to lock error=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    probe_logf(\"[probe] lfs_dir_read: calling lfs_dir_read_(lfs=%p, dir=%p, info=%p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    probe_logf(\"[probe] lfs_dir_read_: returned err=%d, lfs=%p, cfg(before unlock)=%p\",\n            err, (void*)lfs, (void*)lfs->cfg);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n\n    /* Log state immediately before the unlock call to capture the scenario where\n       LFS_UNLOCK(cfg) expands to ((void)cfg) (i.e. a no-op). */\n    probe_logf(\"[probe] lfs_dir_read: about to call LFS_UNLOCK(cfg=%p)\", (void*)lfs->cfg);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log state immediately after the unlock call so consumers of the log can\n       verify whether any observable change occurred. For the described\n       configuration where LFS_UNLOCK is ((void)cfg), these two pointer values\n       will be identical and no other side-effects will be observable here. */\n    probe_logf(\"[probe] lfs_dir_read: after LFS_UNLOCK, cfg(after unlock)=%p\",\n            (void*)lfs->cfg);\n\n    return err;\n}\n"
}