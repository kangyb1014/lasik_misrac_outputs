{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \"/\") writes two bytes ( '/' and the terminating NUL ) into info->name, which has size LFS_NAME_MAX+1. If LFS_NAME_MAX is defined as 0 (making info->name length 1) or otherwise the array is smaller than 2, this strcpy will write beyond the bounds of info->name. Therefore this use of strcpy can result in out-of-bounds access when the configured name buffer is too small.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe logger to capture control flow and state for reproduction.\n   Writes appended logs to /tmp/logs/349.txt. */\nstatic void lfs_log_probe(const char *stage, void *lfs, void *dir, void *info, int err) {\n    FILE *f = fopen(\"/tmp/logs/349.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    /* Log basic control-flow and pointer state. Avoid dereferencing fields\n       which may be small or invalid to prevent introducing new UB. */\n    fprintf(f, \"[%ld] stage=%s lfs=%p dir=%p info=%p err=%d\\n\",\n            (long)t, stage, lfs, dir, info, err);\n\n#ifdef LFS_NAME_MAX\n    fprintf(f, \"[%ld] compile-time LFS_NAME_MAX=%d\\n\", (long)t, (int)LFS_NAME_MAX);\n#else\n    fprintf(f, \"[%ld] compile-time LFS_NAME_MAX=UNDEFINED\\n\", (long)t);\n#endif\n\n    fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* log immediately after attempting to lock to capture lock result and pointers */\n    lfs_log_probe(\"after_lock\", (void*)lfs, (void*)dir, (void*)info, err);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* log right before delegating to the underlying implementation */\n    lfs_log_probe(\"before_lfs_dir_read_\", (void*)lfs, (void*)dir, (void*)info, 0);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* log after the delegated read to capture return value and pointer state */\n    lfs_log_probe(\"after_lfs_dir_read_\", (void*)lfs, (void*)dir, (void*)info, err);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* final log after unlock */\n    lfs_log_probe(\"after_unlock\", (void*)lfs, (void*)dir, (void*)info, err);\n\n    return err;\n}\n"
}