{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \"..\") can overflow info->name if the compile-time/configured LFS_NAME_MAX is less than 2 (info->name has size LFS_NAME_MAX+1). For example, if LFS_NAME_MAX==0 (name array size 1) or LFS_NAME_MAX==1 (size 2), copying the three bytes \"..\\0\" writes beyond the bounds of info->name. Because there is no compile-time or run-time check that the destination can hold the literal, this use of strcpy can result in out-of-bounds accesses and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe function: append diagnostic information to /tmp/logs/349.txt\n * This function intentionally avoids changing program logic and merely\n * records pointers, buffer sizes (when visible), and contents (both as\n * a truncated string and as hex bytes) so other agents can reproduce\n * the reported out-of-bounds scenario.\n */\nstatic void lfs_dir_read_probe(const char *stage, lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    FILE *f = fopen(\"/tmp/logs/349.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"=== lfs_dir_read probe: %s ===\\n\", stage);\n    fprintf(f, \"lfs=%p, dir=%p, info=%p\\n\", (void*)lfs, (void*)dir, (void*)info);\n\n    if (info != NULL) {\n        /* If the lfs_info struct defines name as an array, sizeof(info->name)\n         * yields the buffer capacity. This lets us detect the scenario where\n         * the buffer is too small to hold the literal \"..\" with the null.\n         * If name is not an array type in this translation unit, this line\n         * will fail to compile; however, in the codebase where lfs_dir_read\n         * lives, the struct is expected to be visible and usable here.\n         */\n        size_t name_size = sizeof(info->name);\n        /* Safely compute a bounded length using strnlen to avoid reading\n         * past the buffer if it is not null-terminated. */\n        size_t name_len = strnlen(info->name, name_size);\n\n        fprintf(f, \"info->type=%d\\n\", (int)info->type);\n        fprintf(f, \"info->name_size=%zu, info->name_len=%zu\\n\", name_size, name_len);\n\n        /* Print the string interpretation (may be truncated) */\n        if (name_len > 0) {\n            /* Ensure we print only up to the visible length */\n            fprintf(f, \"info->name (as string, up to size): '%.*s'\\n\", (int)name_len, info->name);\n        } else {\n            fprintf(f, \"info->name (as string) is empty or not null-terminated in buffer\\n\");\n        }\n\n        /* Also dump raw bytes (hex) of the whole buffer to detect overflow effects */\n        fprintf(f, \"info->name (hex, full buffer):\");\n        for (size_t i = 0; i < name_size; i++) {\n            fprintf(f, \" %02x\", (unsigned char)info->name[i]);\n        }\n        fprintf(f, \"\\n\");\n\n        /* Additionally log whether the literal \"..\" would fit (including '\\0') */\n        const char *lit = \"..\";\n        size_t lit_len = strlen(lit) + 1; /* include terminating NUL */\n        fprintf(f, \"literal '..' requires %zu bytes (including NUL).\\n\", lit_len);\n        if (name_size < lit_len) {\n            fprintf(f, \"POTENTIAL_OVERFLOW: info->name_size (%zu) < required (%zu) -> copying '..\\\\0' will overflow\\n\", name_size, lit_len);\n        } else {\n            fprintf(f, \"literal fits: info->name_size (%zu) >= required (%zu)\\n\", name_size, lit_len);\n        }\n    } else {\n        fprintf(f, \"info is NULL\\n\");\n    }\n\n    fprintf(f, \"=== end probe (%s) ===\\n\\n\", stage);\n    fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Probe before calling the internal implementation so callers can see\n     * buffer sizes and contents prior to the potential strcpy that was\n     * reported as violating MISRA C 2023 Rule 21.17. */\n    lfs_dir_read_probe(\"before_lfs_dir_read_\", lfs, dir, info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Probe after the call to capture any changes to the info buffer or\n     * to record that the call completed with an error (which may indicate\n     * a detected overflow or other failure). */\n    if (err >= 0) {\n        lfs_dir_read_probe(\"after_lfs_dir_read_success\", lfs, dir, info);\n    } else {\n        lfs_dir_read_probe(\"after_lfs_dir_read_error\", lfs, dir, info);\n    }\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}