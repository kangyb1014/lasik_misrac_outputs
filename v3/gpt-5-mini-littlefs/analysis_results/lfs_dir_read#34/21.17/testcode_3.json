{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(info, 0, sizeof(*info)) will write sizeof(struct lfs_info) bytes starting at info. If the caller passes a pointer that does not actually reference a full struct lfs_info (for example info == NULL, or info points to a smaller object such as a char buffer or a truncated/packed structure), the memset will write beyond the bounds of the referenced object. This can also occur if there is a mismatch between the caller's and callee's view of struct lfs_info size. In those cases the use of memset can access memory out-of-bounds and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe logging helper - appends information about control flow and\n   pointer state to /tmp/logs/349.txt. This function intentionally\n   avoids dereferencing the 'info' pointer to prevent introducing new\n   out-of-bounds accesses. */\nstatic void lfs_log_probe(const char *stage, void *lfs, void *dir, void *info, int err) {\n    FILE *f = fopen(\"/tmp/logs/349.txt\", \"a\");\n    if (!f) {\n        /* Try to create the directory and retry once */\n        int saved_errno = errno;\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/349.txt\", \"a\");\n        if (!f) {\n            /* If still failing, best-effort fallback: try /tmp/349.txt */\n            f = fopen(\"/tmp/349.txt\", \"a\");\n            if (!f) {\n                /* Give up silently to avoid disrupting program flow */\n                errno = saved_errno;\n                return;\n            }\n        }\n    }\n\n    /* Capture a stack reference to estimate whether 'info' looks like a\n       pointer into the stack (heuristic) without dereferencing it. */\n    uintptr_t info_addr = (uintptr_t)info;\n    uintptr_t stack_addr = (uintptr_t)&f; /* local address as stack anchor */\n    uintptr_t dist = (info_addr > stack_addr) ? (info_addr - stack_addr) : (stack_addr - info_addr);\n\n    fprintf(f, \"[lfs_dir_read probe] stage=%s, lfs=%p, dir=%p, info=%p, info_is_null=%d, stack_anchor=%p, addr_distance=%zu, err=%d\\n\",\n            stage, lfs, dir, info, (info == NULL), (void*)stack_addr, (size_t)dist, err);\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    /* Preserve original logic: call lock first. Insert probes to record state. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log state immediately after attempting the lock. Do not dereference 'info'. */\n    lfs_log_probe(\"after_lock\", (void*)lfs, (void*)dir, (void*)info, err);\n\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Log just before delegating to the internal implementation. */\n    lfs_log_probe(\"before_lfs_dir_read_\", (void*)lfs, (void*)dir, (void*)info, 0);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Log after the internal read, capturing returned error code. */\n    lfs_log_probe(\"after_lfs_dir_read_\", (void*)lfs, (void*)dir, (void*)info, err);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe before returning to the caller. */\n    lfs_log_probe(\"return\", (void*)lfs, (void*)dir, (void*)info, err);\n\n    return err;\n}\n"
}