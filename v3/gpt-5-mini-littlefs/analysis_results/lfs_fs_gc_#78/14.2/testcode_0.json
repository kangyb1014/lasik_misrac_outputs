{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe loop condition uses dir.count (for (uint16_t id = 0; id < dir.count; id++)). The body calls functions that receive &dir (notably lfs_dir_get) and other callbacks (lfs_ctz_traverse, cb) that may modify the dir object or its members. Under MISRA C 2023 Rule 14.2 the second clause must not use any object that is modified in the loop body (including modifications via called functions). Because dir.count is a non\u2011loop\u2011counter object that can be modified by functions invoked in the loop body, this for loop is not guaranteed to be well\u2011formed and thus violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_gc_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/784.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_gc_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc_:\n```c\nstatic int lfs_fs_gc_(lfs_t *lfs) {\n    // force consistency, even if we're not necessarily going to write,\n    // because this function is supposed to take care of janitorial work\n    // isn't it?\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    // try to compact metadata pairs, note we can't really accomplish\n    // anything if compact_thresh doesn't at least leave a prog_size\n    // available\n    if (lfs->cfg->compact_thresh\n            < lfs->cfg->block_size - lfs->cfg->prog_size) {\n        // iterate over all mdirs\n        lfs_mdir_t mdir = {.tail = {0, 1}};\n        while (!lfs_pair_isnull(mdir.tail)) {\n            err = lfs_dir_fetch(lfs, &mdir, mdir.tail);\n            if (err) {\n                return err;\n            }\n\n            // not erased? exceeds our compaction threshold?\n            if (!mdir.erased || ((lfs->cfg->compact_thresh == 0)\n                    ? mdir.off > lfs->cfg->block_size - lfs->cfg->block_size/8\n                    : mdir.off > lfs->cfg->compact_thresh)) {\n                // the easiest way to trigger a compaction is to mark\n                // the mdir as unerased and add an empty commit\n                mdir.erased = false;\n                err = lfs_dir_commit(lfs, &mdir, NULL, 0);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    // try to populate the lookahead buffer, unless it's already full\n    if (lfs->lookahead.size < 8*lfs->cfg->lookahead_size) {\n        err = lfs_alloc_scan(lfs);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_gc_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger for gc function. Appends logs to /tmp/logs/784.txt */\nstatic void lfs_gc_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/784.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int lfs_fs_gc_(lfs_t *lfs) {\n    lfs_gc_log(\"lfs_fs_gc_: enter\");\n\n    /* force consistency, even if we're not necessarily going to write,\n       because this function is supposed to take care of janitorial work\n       isn't it? */\n    lfs_gc_log(\"lfs_fs_gc_: cfg compact_thresh=%llu, block_size=%llu, prog_size=%llu, lookahead.size=%llu, cfg->lookahead_size=%llu\",\n            (unsigned long long)lfs->cfg->compact_thresh,\n            (unsigned long long)lfs->cfg->block_size,\n            (unsigned long long)lfs->cfg->prog_size,\n            (unsigned long long)lfs->lookahead.size,\n            (unsigned long long)lfs->cfg->lookahead_size);\n\n    int err = lfs_fs_forceconsistency(lfs);\n    lfs_gc_log(\"lfs_fs_gc_: lfs_fs_forceconsistency returned %d\", err);\n    if (err) {\n        lfs_gc_log(\"lfs_fs_gc_: exit with err=%d (forceconsistency)\", err);\n        return err;\n    }\n\n    /* try to compact metadata pairs, note we can't really accomplish\n       anything if compact_thresh doesn't at least leave a prog_size\n       available */\n    if (lfs->cfg->compact_thresh\n            < lfs->cfg->block_size - lfs->cfg->prog_size) {\n        lfs_gc_log(\"lfs_fs_gc_: entering mdir compaction loop\");\n\n        /* iterate over all mdirs */\n        lfs_mdir_t mdir = {.tail = {0, 1}};\n        while (!lfs_pair_isnull(mdir.tail)) {\n            /* log tail before fetch */\n            lfs_gc_log(\"lfs_fs_gc_: before lfs_dir_fetch tail[0]=%llu tail[1]=%llu\",\n                    (unsigned long long)mdir.tail[0],\n                    (unsigned long long)mdir.tail[1]);\n\n            err = lfs_dir_fetch(lfs, &mdir, mdir.tail);\n            lfs_gc_log(\"lfs_fs_gc_: lfs_dir_fetch returned %d; mdir.erased=%d, mdir.off=%llu\",\n                    err, (int)mdir.erased, (unsigned long long)mdir.off);\n            if (err) {\n                lfs_gc_log(\"lfs_fs_gc_: exit with err=%d (dir_fetch)\", err);\n                return err;\n            }\n\n            /* not erased? exceeds our compaction threshold? */\n            if (!mdir.erased || ((lfs->cfg->compact_thresh == 0)\n                    ? mdir.off > lfs->cfg->block_size - lfs->cfg->block_size/8\n                    : mdir.off > lfs->cfg->compact_thresh)) {\n                lfs_gc_log(\"lfs_fs_gc_: compaction condition met: mdir.erased=%d, mdir.off=%llu\",\n                        (int)mdir.erased, (unsigned long long)mdir.off);\n\n                /* the easiest way to trigger a compaction is to mark\n                   the mdir as unerased and add an empty commit */\n                mdir.erased = false;\n                lfs_gc_log(\"lfs_fs_gc_: calling lfs_dir_commit (mdir.erased set to false)\");\n                err = lfs_dir_commit(lfs, &mdir, NULL, 0);\n                lfs_gc_log(\"lfs_fs_gc_: lfs_dir_commit returned %d\", err);\n                if (err) {\n                    lfs_gc_log(\"lfs_fs_gc_: exit with err=%d (dir_commit)\", err);\n                    return err;\n                }\n            } else {\n                lfs_gc_log(\"lfs_fs_gc_: compaction condition not met for mdir.off=%llu erased=%d\",\n                        (unsigned long long)mdir.off, (int)mdir.erased);\n            }\n\n            /* log tail after potential commit (to observe any changes) */\n            lfs_gc_log(\"lfs_fs_gc_: after processing mdir tail[0]=%llu tail[1]=%llu\",\n                    (unsigned long long)mdir.tail[0],\n                    (unsigned long long)mdir.tail[1]);\n        }\n\n        lfs_gc_log(\"lfs_fs_gc_: exited mdir compaction loop\");\n    }\n\n    /* try to populate the lookahead buffer, unless it's already full */\n    lfs_gc_log(\"lfs_fs_gc_: before lookahead check size=%llu threshold=%llu\",\n            (unsigned long long)lfs->lookahead.size,\n            (unsigned long long)(8 * lfs->cfg->lookahead_size));\n    if (lfs->lookahead.size < 8*lfs->cfg->lookahead_size) {\n        lfs_gc_log(\"lfs_fs_gc_: calling lfs_alloc_scan\");\n        err = lfs_alloc_scan(lfs);\n        lfs_gc_log(\"lfs_fs_gc_: lfs_alloc_scan returned %d\", err);\n        if (err) {\n            lfs_gc_log(\"lfs_fs_gc_: exit with err=%d (alloc_scan)\", err);\n            return err;\n        }\n    } else {\n        lfs_gc_log(\"lfs_fs_gc_: lookahead buffer already full\");\n    }\n\n    lfs_gc_log(\"lfs_fs_gc_: exit with success (0)\");\n    return 0;\n}\n"
}