{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression 'if (err)' is invariant because err is initialized from LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as ((void)cfg,0) which always yields 0. Therefore the condition is always false and the if-statement is invariant, violating MISRA C 2023 Rule 14.3 (no exception applies).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/815.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append a line to /tmp/logs/815.txt with useful state info. */\nstatic void lfs_probe_log_state(const lfs_t *lfs, const char *stage, int err) {\n    FILE *f = fopen(\"/tmp/logs/815.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log the stage, pointer to lfs, pointer to its cfg if available, and the err value. */\n    /* We avoid assumptions about cfg type; just print the pointer value. */\n    const void *cfg_ptr = NULL;\n    if (lfs != NULL) {\n        cfg_ptr = (const void*)lfs->cfg;\n    }\n    fprintf(f, \"%s: lfs=%p, cfg=%p, err=%d\\n\", stage, (const void*)lfs, cfg_ptr, err);\n    fclose(f);\n}\n\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log after attempting to acquire the lock so callers can reproduce whether\n       LFS_LOCK produced a non-zero (error) or zero value. This helps demonstrate\n       the alleged invariant (err always 0) by recording the actual returned value. */\n    lfs_probe_log_state(lfs, \"after_LFS_LOCK\", err);\n\n    if (err) {\n        /* Log that we're returning early due to lock error. */\n        lfs_probe_log_state(lfs, \"returning_from_lfs_fs_mkconsistent_lock_failed\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n\n    /* Log the result of the inner consistency function before unlocking. */\n    lfs_probe_log_state(lfs, \"before_LFS_UNLOCK\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log of exit state. */\n    lfs_probe_log_state(lfs, \"exit_lfs_fs_mkconsistent\", err);\n    return err;\n}\n"
}