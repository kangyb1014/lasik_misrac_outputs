{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), which merely evaluates and discards cfg with no observable effect. Calls such as LFS_UNLOCK(lfs->cfg) in lfs_fs_mkconsistent execute an operation whose removal would not affect program behaviour (cfg is just a pointer expression with no side-effects). Therefore this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/812.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logger: append control-flow/state information to /tmp/logs/812.txt\n * Keeps the same observable behaviour for the function (aside from logging).\n */\nstatic void lfs_probe_event(const char *event, lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/812.txt\", \"a\");\n    if (f != NULL) {\n        time_t t = time(NULL);\n        /* Log timestamp, event tag, lfs pointer, cfg pointer (if available), and err */\n        void *cfg_ptr = (void*)(lfs ? lfs->cfg : NULL);\n        (void)fprintf(f, \"%ld: event=%s lfs=%p cfg=%p err=%d\\n\",\n                      (long)t, event, (void*)lfs, cfg_ptr, err);\n        (void)fclose(f);\n    }\n}\n\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure and preserve original return behaviour */\n        lfs_probe_event(\"lock_failed\", lfs, err);\n        return err;\n    }\n\n    /* Log that we obtained the lock */\n    lfs_probe_event(\"locked\", lfs, err);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n\n    /* Capture state immediately before the unlock call that is reported as a no-op. */\n    lfs_probe_event(\"before_unlock\", lfs, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Capture state immediately after the unlock call to show there is no observable change. */\n    lfs_probe_event(\"after_unlock\", lfs, err);\n\n    return err;\n}\n"
}