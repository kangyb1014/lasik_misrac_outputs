{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as empty (#define LFS_TRACE(__VA_ARGS__)), so the statement LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs); expands to an empty statement / no-op. This operation is executed but has no effect and its removal would not change program behaviour in the current build configuration, therefore it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/812.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n\n/* Probe logger that appends control-flow and state information to /tmp/logs/812.txt.\n   Attempts to create the /tmp/logs directory if it does not exist; failure to create is ignored.\n   The function is intentionally lightweight and non-intrusive to preserve original program logic. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    /* Try to create the directory if it doesn't exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/812.txt\", \"a\");\n    if (!f) {\n        return; /* If logging is not possible, fail silently to avoid changing behavior. */\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_fs_mkconsistent: original logic preserved, with probe calls inserted\n   to record control flow and state relevant to the reported dead-code (LFS_TRACE) scenario. */\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock attempt and the pointers involved. */\n    lfs_probe_log(\"lfs_fs_mkconsistent: LFS_LOCK returned %d (lfs=%p, cfg=%p)\",\n                  err, (void*)lfs, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_probe_log(\"lfs_fs_mkconsistent: lock failed, returning err=%d\", err);\n        return err;\n    }\n\n    /* Original trace call retained; also emit an explicit probe so that logs\n       exist even if LFS_TRACE is defined as empty in the build. */\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n    lfs_probe_log(\"lfs_fs_mkconsistent: entered critical section (lfs=%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    /* Record the return value from the internal operation. */\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    lfs_probe_log(\"lfs_fs_mkconsistent: lfs_fs_mkconsistent_ returned %d (lfs=%p)\",\n                  err, (void*)lfs);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_fs_mkconsistent: LFS_UNLOCK called (cfg=%p)\", (void*)lfs->cfg);\n\n    return err;\n}\n"
}