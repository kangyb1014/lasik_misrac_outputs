{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(lfs->cfg) macro expands to ((void)cfg), which is an expression statement with no side effects. It is executed but performs no operation; removing this statement would not change program behaviour in the provided configuration (cfg is a const pointer, not volatile, and the macro is an empty stub). Therefore this is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/812.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdarg.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/812.txt */\nstatic void lfs_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/812.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(f, \"%ld: \", (long)t);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Lightweight state logger that avoids dereferencing unknown internals beyond cfg pointer */\nstatic void lfs_log_state(const char *stage, const void *lfs)\n{\n    /* Attempt to print lfs and its cfg pointer if available.\n       We access lfs->cfg because the original function uses it; this\n       must match the project's lfs_t layout. If lfs is NULL we log NULL. */\n    if (!lfs) {\n        lfs_log_printf(\"%s: lfs=NULL\", stage);\n        return;\n    }\n\n    /* Use two-stage cast to avoid requiring full type here in this file.\n       The original code references lfs->cfg, so this usage is consistent\n       with the original source. */\n    const void *cfg_ptr = ((const char * const *)lfs)[0];\n\n    /* If the actual layout differs, cfg_ptr may be garbage; we still\n       print the pointer value to help reproduce control flow. */\n    lfs_log_printf(\"%s: lfs=%p, cfg=%p\", stage, lfs, cfg_ptr);\n}\n\n/* Modified function preserving original control flow and logic with probes. */\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    lfs_log_printf(\"ENTER lfs_fs_mkconsistent: lfs=%p\", (void*)lfs);\n    lfs_log_state(\"BEFORE_LOCK\", lfs);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_log_printf(\"AFTER_LOCK: err=%d\", err);\n    if (err) {\n        lfs_log_state(\"RETURN_ON_LOCK_FAILURE\", lfs);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n    lfs_log_state(\"BEFORE_MKCONSISTENT_\", lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    lfs_log_printf(\"AFTER_MKCONSISTENT_: err=%d\", err);\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n\n    lfs_log_state(\"BEFORE_UNLOCK\", lfs);\n    /* Keep the original unlock call to preserve behaviour. */\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_state(\"AFTER_UNLOCK\", lfs);\n\n    lfs_log_printf(\"EXIT lfs_fs_mkconsistent: returning %d\", err);\n    return err;\n}\n"
}