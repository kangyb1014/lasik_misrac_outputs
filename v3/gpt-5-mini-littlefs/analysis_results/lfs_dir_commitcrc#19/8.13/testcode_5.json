{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_bd_read takes a non-const pointer lfs_t *lfs but the function only reads from lfs (accesses cfg, block_count, etc.) and does not modify the lfs object. According to MISRA C 2023 Rule 8.13, that pointer should be const-qualified (const lfs_t *lfs) when possible. pcache is already const and rcache and buffer are non-const appropriately, so the remaining violation is the non-const lfs parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_commitcrc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/193.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_commitcrc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_commitcrc:\n```c\nstatic int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {\n    // align to program units\n    //\n    // this gets a bit complex as we have two types of crcs:\n    // - 5-word crc with fcrc to check following prog (middle of block)\n    // - 2-word crc with no following prog (end of block)\n    const lfs_off_t end = lfs_alignup(\n            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),\n            lfs->cfg->prog_size);\n\n    lfs_off_t off1 = 0;\n    uint32_t crc1 = 0;\n\n    // create crc tags to fill up remainder of commit, note that\n    // padding is not crced, which lets fetches skip padding but\n    // makes committing a bit more complicated\n    while (commit->off < end) {\n        lfs_off_t noff = (\n                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)\n                + (commit->off+sizeof(lfs_tag_t)));\n        // too large for crc tag? need padding commits\n        if (noff < end) {\n            noff = lfs_min(noff, end - 5*sizeof(uint32_t));\n        }\n\n        // space for fcrc?\n        uint8_t eperturb = (uint8_t)-1;\n        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {\n            // first read the leading byte, this always contains a bit\n            // we can perturb to avoid writes that don't change the fcrc\n            int err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, lfs->cfg->prog_size,\n                    commit->block, noff, &eperturb, 1);\n            if (err && err != LFS_ERR_CORRUPT) {\n                return err;\n            }\n\n        #ifdef LFS_MULTIVERSION\n            // unfortunately fcrcs break mdir fetching < lfs2.1, so only write\n            // these if we're a >= lfs2.1 filesystem\n            if (lfs_fs_disk_version(lfs) <= 0x00020000) {\n                // don't write fcrc\n            } else\n        #endif\n            {\n                // find the expected fcrc, don't bother avoiding a reread\n                // of the eperturb, it should still be in our cache\n                struct lfs_fcrc fcrc = {\n                    .size = lfs->cfg->prog_size,\n                    .crc = 0xffffffff\n                };\n                err = lfs_bd_crc(lfs,\n                        NULL, &lfs->rcache, lfs->cfg->prog_size,\n                        commit->block, noff, fcrc.size, &fcrc.crc);\n                if (err && err != LFS_ERR_CORRUPT) {\n                    return err;\n                }\n\n                lfs_fcrc_tole32(&fcrc);\n                err = lfs_dir_commitattr(lfs, commit,\n                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),\n                        &fcrc);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n\n        // build commit crc\n        struct {\n            lfs_tag_t tag;\n            uint32_t crc;\n        } ccrc;\n        lfs_tag_t ntag = LFS_MKTAG(\n                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,\n                noff - (commit->off+sizeof(lfs_tag_t)));\n        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);\n        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));\n        ccrc.crc = lfs_tole32(commit->crc);\n\n        int err = lfs_bd_prog(lfs,\n                &lfs->pcache, &lfs->rcache, false,\n                commit->block, commit->off, &ccrc, sizeof(ccrc));\n        if (err) {\n            return err;\n        }\n\n        // keep track of non-padding checksum to verify\n        if (off1 == 0) {\n            off1 = commit->off + sizeof(lfs_tag_t);\n            crc1 = commit->crc;\n        }\n\n        commit->off = noff;\n        // perturb valid bit?\n        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);\n        // reset crc for next commit\n        commit->crc = 0xffffffff;\n\n        // manually flush here since we don't prog the padding, this confuses\n        // the caching layer\n        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {\n            // flush buffers\n            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);\n            if (err) {\n                return err;\n            }\n        }\n    }\n\n    // successful commit, check checksums to make sure\n    //\n    // note that we don't need to check padding commits, worst\n    // case if they are corrupted we would have had to compact anyways\n    lfs_off_t off = commit->begin;\n    uint32_t crc = 0xffffffff;\n    int err = lfs_bd_crc(lfs,\n            NULL, &lfs->rcache, off1+sizeof(uint32_t),\n            commit->block, off, off1-off, &crc);\n    if (err) {\n        return err;\n    }\n\n    // check non-padding commits against known crc\n    if (crc != crc1) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    // make sure to check crc in case we happen to pick\n    // up an unrelated crc (frozen block?)\n    err = lfs_bd_crc(lfs,\n            NULL, &lfs->rcache, sizeof(uint32_t),\n            commit->block, off1, sizeof(uint32_t), &crc);\n    if (err) {\n        return err;\n    }\n\n    if (crc != 0) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_commitcrc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends logs to /tmp/logs/193.txt */\nstatic void lfs_probe_log(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/193.txt\", \"a\");\n    if (!f) { return; }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {\n    /* Log entry state */\n    lfs_probe_log(\"ENTER lfs_dir_commitcrc: lfs=%p, cfg=%p, block_size=%llu, prog_size=%llu, commit(off=%llu, block=%llu, begin=%llu, ptag=0x%08x, crc=0x%08x)\",\n            (void*)lfs, (void*)lfs->cfg,\n            (unsigned long long)lfs->cfg->block_size,\n            (unsigned long long)lfs->cfg->prog_size,\n            (unsigned long long)commit->off,\n            (unsigned long long)commit->block,\n            (unsigned long long)commit->begin,\n            (unsigned)commit->ptag,\n            (unsigned)commit->crc);\n\n    // align to program units\n    //\n    // this gets a bit complex as we have two types of crcs:\n    // - 5-word crc with fcrc to check following prog (middle of block)\n    // - 2-word crc with no following prog (end of block)\n    const lfs_off_t end = lfs_alignup(\n            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),\n            lfs->cfg->prog_size);\n\n    lfs_probe_log(\"Computed end=%llu\", (unsigned long long)end);\n\n    lfs_off_t off1 = 0;\n    uint32_t crc1 = 0;\n\n    // create crc tags to fill up remainder of commit, note that\n    // padding is not crced, which lets fetches skip padding but\n    // makes committing a bit more complicated\n    while (commit->off < end) {\n        lfs_off_t noff = (\n                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)\n                + (commit->off+sizeof(lfs_tag_t)));\n        // too large for crc tag? need padding commits\n        if (noff < end) {\n            noff = lfs_min(noff, end - 5*sizeof(uint32_t));\n        }\n\n        lfs_probe_log(\"Loop start: commit->off=%llu, calculated noff=%llu\", (unsigned long long)commit->off, (unsigned long long)noff);\n\n        // space for fcrc?\n        uint8_t eperturb = (uint8_t)-1;\n        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {\n            // first read the leading byte, this always contains a bit\n            // we can perturb to avoid writes that don't change the fcrc\n            int err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, lfs->cfg->prog_size,\n                    commit->block, noff, &eperturb, 1);\n            lfs_probe_log(\"lfs_bd_read returned err=%d, eperturb=0x%02x\", err, (unsigned)eperturb);\n            if (err && err != LFS_ERR_CORRUPT) {\n                lfs_probe_log(\"Early return from lfs_bd_read with err=%d\", err);\n                return err;\n            }\n\n        #ifdef LFS_MULTIVERSION\n            // unfortunately fcrcs break mdir fetching < lfs2.1, so only write\n            // these if we're a >= lfs2.1 filesystem\n            if (lfs_fs_disk_version(lfs) <= 0x00020000) {\n                // don't write fcrc\n                lfs_probe_log(\"Skipping fcrc write due to disk version <= 2.1: version=0x%08x\", lfs_fs_disk_version(lfs));\n            } else\n        #endif\n            {\n                // find the expected fcrc, don't bother avoiding a reread\n                // of the eperturb, it should still be in our cache\n                struct lfs_fcrc fcrc = {\n                    .size = lfs->cfg->prog_size,\n                    .crc = 0xffffffff\n                };\n                err = lfs_bd_crc(lfs,\n                        NULL, &lfs->rcache, lfs->cfg->prog_size,\n                        commit->block, noff, fcrc.size, &fcrc.crc);\n                lfs_probe_log(\"lfs_bd_crc for fcrc returned err=%d, fcrc.size=%llu, fcrc.crc=0x%08x\",\n                        err, (unsigned long long)fcrc.size, (unsigned)fcrc.crc);\n                if (err && err != LFS_ERR_CORRUPT) {\n                    lfs_probe_log(\"Early return from lfs_bd_crc with err=%d\", err);\n                    return err;\n                }\n\n                lfs_fcrc_tole32(&fcrc);\n                lfs_probe_log(\"Calling lfs_dir_commitattr to write fcrc: block=%llu, noff=%llu, fcrc.size=%llu, fcrc.crc=0x%08x\",\n                        (unsigned long long)commit->block, (unsigned long long)noff,\n                        (unsigned long long)fcrc.size, (unsigned)fcrc.crc);\n                err = lfs_dir_commitattr(lfs, commit,\n                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),\n                        &fcrc);\n                lfs_probe_log(\"lfs_dir_commitattr returned err=%d\", err);\n                if (err) {\n                    lfs_probe_log(\"Early return from lfs_dir_commitattr with err=%d\", err);\n                    return err;\n                }\n            }\n        }\n\n        // build commit crc\n        struct {\n            lfs_tag_t tag;\n            uint32_t crc;\n        } ccrc;\n        lfs_tag_t ntag = LFS_MKTAG(\n                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,\n                noff - (commit->off+sizeof(lfs_tag_t)));\n        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);\n        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));\n        ccrc.crc = lfs_tole32(commit->crc);\n\n        lfs_probe_log(\"Prepared CCRC: ntag=0x%08x, ptag=0x%08x, commit->crc=0x%08x, ccrc.crc=0x%08x\",\n                (unsigned)ntag, (unsigned)commit->ptag, (unsigned)commit->crc, (unsigned)ccrc.crc);\n\n        int err = lfs_bd_prog(lfs,\n                &lfs->pcache, &lfs->rcache, false,\n                commit->block, commit->off, &ccrc, sizeof(ccrc));\n        lfs_probe_log(\"lfs_bd_prog returned err=%d for block=%llu off=%llu size=%zu\",\n                err, (unsigned long long)commit->block, (unsigned long long)commit->off, sizeof(ccrc));\n        if (err) {\n            lfs_probe_log(\"Early return from lfs_bd_prog with err=%d\", err);\n            return err;\n        }\n\n        // keep track of non-padding checksum to verify\n        if (off1 == 0) {\n            off1 = commit->off + sizeof(lfs_tag_t);\n            crc1 = commit->crc;\n            lfs_probe_log(\"Set off1=%llu, crc1=0x%08x\", (unsigned long long)off1, (unsigned)crc1);\n        }\n\n        commit->off = noff;\n        // perturb valid bit?\n        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);\n        // reset crc for next commit\n        commit->crc = 0xffffffff;\n\n        lfs_probe_log(\"After update: commit->off=%llu, commit->ptag=0x%08x, commit->crc=0x%08x\",\n                (unsigned long long)commit->off, (unsigned)commit->ptag, (unsigned)commit->crc);\n\n        // manually flush here since we don't prog the padding, this confuses\n        // the caching layer\n        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {\n            // flush buffers\n            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);\n            lfs_probe_log(\"lfs_bd_sync returned err=%d\", err);\n            if (err) {\n                lfs_probe_log(\"Early return from lfs_bd_sync with err=%d\", err);\n                return err;\n            }\n        }\n    }\n\n    // successful commit, check checksums to make sure\n    //\n    // note that we don't need to check padding commits, worst\n    // case if they are corrupted we would have had to compact anyways\n    lfs_off_t off = commit->begin;\n    uint32_t crc = 0xffffffff;\n    int err = lfs_bd_crc(lfs,\n            NULL, &lfs->rcache, off1+sizeof(uint32_t),\n            commit->block, off, off1-off, &crc);\n    lfs_probe_log(\"lfs_bd_crc final check returned err=%d, off=%llu, len=%llu, crc=0x%08x\",\n            err, (unsigned long long)off, (unsigned long long)(off1-off), (unsigned)crc);\n    if (err) {\n        lfs_probe_log(\"Early return after final lfs_bd_crc with err=%d\", err);\n        return err;\n    }\n\n    // check non-padding commits against known crc\n    if (crc != crc1) {\n        lfs_probe_log(\"CRC mismatch: computed crc=0x%08x != crc1=0x%08x -> LFS_ERR_CORRUPT\", (unsigned)crc, (unsigned)crc1);\n        return LFS_ERR_CORRUPT;\n    }\n\n    // make sure to check crc in case we happen to pick\n    // up an unrelated crc (frozen block?)\n    err = lfs_bd_crc(lfs,\n            NULL, &lfs->rcache, sizeof(uint32_t),\n            commit->block, off1, sizeof(uint32_t), &crc);\n    lfs_probe_log(\"lfs_bd_crc second check returned err=%d, crc=0x%08x\", err, (unsigned)crc);\n    if (err) {\n        lfs_probe_log(\"Early return after second lfs_bd_crc with err=%d\", err);\n        return err;\n    }\n\n    if (crc != 0) {\n        lfs_probe_log(\"Final CRC non-zero: crc=0x%08x -> LFS_ERR_CORRUPT\", (unsigned)crc);\n        return LFS_ERR_CORRUPT;\n    }\n\n    lfs_probe_log(\"EXIT lfs_dir_commitcrc success: commit->block=%llu, begin=%llu, end=%llu\", (unsigned long long)commit->block, (unsigned long long)commit->begin, (unsigned long long)end);\n\n    return 0;\n}\n"
}