{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nFunction lfs_fs_disk_version takes a non-const pointer parameter (lfs_t *lfs) but never modifies the pointee. The parameter is only read (or unused) \u2014 under LFS_MULTIVERSION it only reads lfs->cfg->disk_version. Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified, e.g. const lfs_t *lfs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_desuperblock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_desuperblock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_desuperblock:\n```c\nstatic int lfs_fs_desuperblock(lfs_t *lfs) {\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        return 0;\n    }\n\n    LFS_DEBUG(\"Rewriting superblock {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n            lfs->root[0],\n            lfs->root[1]);\n\n    lfs_mdir_t root;\n    int err = lfs_dir_fetch(lfs, &root, lfs->root);\n    if (err) {\n        return err;\n    }\n\n    // write a new superblock\n    lfs_superblock_t superblock = {\n        .version     = lfs_fs_disk_version(lfs),\n        .block_size  = lfs->cfg->block_size,\n        .block_count = lfs->block_count,\n        .name_max    = lfs->name_max,\n        .file_max    = lfs->file_max,\n        .attr_max    = lfs->attr_max,\n    };\n\n    lfs_superblock_tole32(&superblock);\n    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock}));\n    if (err) {\n        return err;\n    }\n\n    lfs_fs_prepsuperblock(lfs, false);\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_desuperblock code.\n",
  "test_code": "static void lfs_log_probe(const char *stage, lfs_t *lfs, int err, uint32_t root0, uint32_t root1, uint32_t disk_version, const lfs_superblock_t *sb, int commit_err) {\n    /* Append diagnostic information to a log file so other agents can\n       reproduce and gather evidence about the non-modifying use of lfs. */\n    FILE *f = fopen(\"/tmp/logs/743.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"---- lfs_fs_desuperblock: %s\\n\", stage);\n    fprintf(f, \"  lfs ptr: %p\\n\", (void *)lfs);\n    fprintf(f, \"  needssuperblock/decision err: %d\\n\", err);\n    fprintf(f, \"  lfs->root: {0x%08lx, 0x%08lx}\\n\",\n            (unsigned long)root0, (unsigned long)root1);\n    fprintf(f, \"  disk_version (from lfs_fs_disk_version): %lu\\n\",\n            (unsigned long)disk_version);\n    if (sb != NULL) {\n        fprintf(f, \"  superblock prepared: version=%lu, block_size=%lu, block_count=%lu, name_max=%lu, file_max=%lu, attr_max=%lu\\n\",\n                (unsigned long)sb->version,\n                (unsigned long)sb->block_size,\n                (unsigned long)sb->block_count,\n                (unsigned long)sb->name_max,\n                (unsigned long)sb->file_max,\n                (unsigned long)sb->attr_max);\n    }\n    if (commit_err >= 0) {\n        fprintf(f, \"  commit returned: %d\\n\", commit_err);\n    }\n    fprintf(f, \"---- end %s\\n\\n\", stage);\n\n    fclose(f);\n}\n\nstatic int lfs_fs_desuperblock(lfs_t *lfs) {\n    /* Probe point: entering function and decision whether superblock rewrite is needed */\n    int need = lfs_gstate_needssuperblock(&lfs->gstate);\n    lfs_log_probe(\"enter/check_needssuperblock\", lfs, need, lfs->root[0], lfs->root[1], 0u, NULL, -1);\n\n    if (!need) {\n        lfs_log_probe(\"exit/no_need\", lfs, need, lfs->root[0], lfs->root[1], 0u, NULL, -1);\n        return 0;\n    }\n\n    LFS_DEBUG(\"Rewriting superblock {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n            lfs->root[0],\n            lfs->root[1]);\n\n    lfs_mdir_t root;\n    int err = lfs_dir_fetch(lfs, &root, lfs->root);\n    /* Log result of directory fetch and root ids */\n    lfs_log_probe(\"after_dir_fetch\", lfs, err, lfs->root[0], lfs->root[1], 0u, NULL, -1);\n    if (err) {\n        lfs_log_probe(\"exit/dir_fetch_error\", lfs, err, lfs->root[0], lfs->root[1], 0u, NULL, -1);\n        return err;\n    }\n\n    /* Compute disk version once so we can log it (preserves original logic). */\n    uint32_t disk_version = lfs_fs_disk_version(lfs);\n\n    /* write a new superblock (keep original initializer ordering) */\n    lfs_superblock_t superblock = {\n        .version     = disk_version,\n        .block_size  = lfs->cfg->block_size,\n        .block_count = lfs->block_count,\n        .name_max    = lfs->name_max,\n        .file_max    = lfs->file_max,\n        .attr_max    = lfs->attr_max,\n    };\n\n    /* Log prepared superblock before endian conversion and before commit */\n    lfs_log_probe(\"before_tole32_and_commit\", lfs, 0, lfs->root[0], lfs->root[1], disk_version, &superblock, -1);\n\n    lfs_superblock_tole32(&superblock);\n    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock}));\n\n    /* Log result of commit including error code */\n    lfs_log_probe(\"after_commit\", lfs, 0, lfs->root[0], lfs->root[1], disk_version, &superblock, err);\n    if (err) {\n        lfs_log_probe(\"exit/commit_error\", lfs, err, lfs->root[0], lfs->root[1], disk_version, &superblock, err);\n        return err;\n    }\n\n    lfs_fs_prepsuperblock(lfs, false);\n\n    lfs_log_probe(\"exit/success\", lfs, 0, lfs->root[0], lfs->root[1], disk_version, &superblock, 0);\n    return 0;\n}\n"
}