{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nYes. In lfs_bd_prog the scalar parameters 'off' and 'size' are modified inside the loop (off += diff; size -= diff;), which directly changes function parameters rather than local copies. This violates MISRA C 2023 Rule 17.8 (function parameters should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_flushedwrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/507.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_flushedwrite as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_flushedwrite:\n```c\nstatic lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if ((file->flags & LFS_F_INLINE) &&\n            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {\n        // inline file doesn't fit anymore\n        int err = lfs_file_outline(lfs, file);\n        if (err) {\n            file->flags |= LFS_F_ERRED;\n            return err;\n        }\n    }\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_WRITING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {\n                    // find out which block we're extending from\n                    int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                            file->ctz.head, file->ctz.size,\n                            file->pos-1, &file->block, &(lfs_off_t){0});\n                    if (err) {\n                        file->flags |= LFS_F_ERRED;\n                        return err;\n                    }\n\n                    // mark cache as dirty since we may have read data into it\n                    lfs_cache_zero(lfs, &file->cache);\n                }\n\n                // extend file with new blocks\n                lfs_alloc_ckpoint(lfs);\n                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,\n                        file->block, file->pos,\n                        &file->block, &file->off);\n                if (err) {\n                    file->flags |= LFS_F_ERRED;\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_WRITING;\n        }\n\n        // program as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        while (true) {\n            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,\n                    file->block, file->off, data, diff);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    goto relocate;\n                }\n                file->flags |= LFS_F_ERRED;\n                return err;\n            }\n\n            break;\nrelocate:\n            err = lfs_file_relocate(lfs, file);\n            if (err) {\n                file->flags |= LFS_F_ERRED;\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        lfs_alloc_ckpoint(lfs);\n    }\n\n    return size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_flushedwrite code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append newline automatically. */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/507.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    /* Log entry state */\n    lfs_log_probe(\"ENTER lfs_file_flushedwrite: size=%llu nsize=%llu file->pos=%llu file->off=%lld file->block=%llu file->flags=0x%08x\",\n            (unsigned long long)size, (unsigned long long)nsize,\n            (unsigned long long)file->pos, (long long)file->off,\n            (unsigned long long)file->block, (unsigned)file->flags);\n\n    if ((file->flags & LFS_F_INLINE) &&\n            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {\n        /* inline file doesn't fit anymore */\n        int err = lfs_file_outline(lfs, file);\n        if (err) {\n            file->flags |= LFS_F_ERRED;\n            lfs_log_probe(\"lfs_file_outline failed: err=%d; setting ERRED and returning\", err);\n            return err;\n        }\n        lfs_log_probe(\"lfs_file_outline succeeded; continuing\");\n    }\n\n    while (nsize > 0) {\n        /* Log loop iteration start */\n        lfs_log_probe(\"LOOP start: nsize=%llu file->pos=%llu file->off=%lld file->flags=0x%08x\",\n                (unsigned long long)nsize, (unsigned long long)file->pos,\n                (long long)file->off, (unsigned)file->flags);\n\n        /* check if we need a new block */\n        if (!(file->flags & LFS_F_WRITING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {\n                    /* find out which block we're extending from */\n                    lfs_log_probe(\"calling lfs_ctz_find: file->pos-1=%llu\",\n                            (unsigned long long)(file->pos-1));\n                    int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                            file->ctz.head, file->ctz.size,\n                            file->pos-1, &file->block, &(lfs_off_t){0});\n                    if (err) {\n                        file->flags |= LFS_F_ERRED;\n                        lfs_log_probe(\"lfs_ctz_find failed: err=%d; setting ERRED and returning\", err);\n                        return err;\n                    }\n\n                    /* mark cache as dirty since we may have read data into it */\n                    lfs_cache_zero(lfs, &file->cache);\n                    lfs_log_probe(\"lfs_ctz_find succeeded; file->block=%llu; cache zeroed\",\n                            (unsigned long long)file->block);\n                }\n\n                /* extend file with new blocks */\n                lfs_alloc_ckpoint(lfs);\n                lfs_log_probe(\"calling lfs_ctz_extend: file->block=%llu file->pos=%llu\",\n                        (unsigned long long)file->block, (unsigned long long)file->pos);\n                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,\n                        file->block, file->pos,\n                        &file->block, &file->off);\n                if (err) {\n                    file->flags |= LFS_F_ERRED;\n                    lfs_log_probe(\"lfs_ctz_extend failed: err=%d; setting ERRED and returning\", err);\n                    return err;\n                }\n                lfs_log_probe(\"lfs_ctz_extend succeeded; new file->block=%llu file->off=%lld\",\n                        (unsigned long long)file->block, (long long)file->off);\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n                lfs_log_probe(\"INLINE case: file->block=INLINE file->off set to file->pos=%llu\",\n                        (unsigned long long)file->pos);\n            }\n\n            file->flags |= LFS_F_WRITING;\n            lfs_log_probe(\"Set F_WRITING flag; file->flags=0x%08x\", (unsigned)file->flags);\n        }\n\n        /* program as much as we can in current block */\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        lfs_log_probe(\"prepare prog: diff=%llu block_size=%llu file->off=%lld\",\n                (unsigned long long)diff, (unsigned long long)lfs->cfg->block_size,\n                (long long)file->off);\n        while (true) {\n            lfs_log_probe(\"calling lfs_bd_prog: block=%llu off=%lld data_ptr=0x%llx diff=%llu\",\n                    (unsigned long long)file->block, (long long)file->off,\n                    (unsigned long long)(uintptr_t)data, (unsigned long long)diff);\n            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,\n                    file->block, file->off, data, diff);\n            lfs_log_probe(\"lfs_bd_prog returned: err=%d\", err);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe(\"lfs_bd_prog reported CORRUPT, going to relocate\");\n                    goto relocate;\n                }\n                file->flags |= LFS_F_ERRED;\n                lfs_log_probe(\"lfs_bd_prog failed with non-CORRUPT err=%d; setting ERRED and returning\", err);\n                return err;\n            }\n\n            break;\nrelocate:\n            lfs_log_probe(\"relocate: calling lfs_file_relocate\");\n            err = lfs_file_relocate(lfs, file);\n            if (err) {\n                file->flags |= LFS_F_ERRED;\n                lfs_log_probe(\"lfs_file_relocate failed: err=%d; setting ERRED and returning\", err);\n                return err;\n            }\n            lfs_log_probe(\"lfs_file_relocate succeeded; continuing prog loop\");\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        lfs_log_probe(\"AFTER prog: updated file->pos=%llu file->off=%lld data_ptr=0x%llx nsize=%llu\",\n                (unsigned long long)file->pos, (long long)file->off,\n                (unsigned long long)(uintptr_t)data, (unsigned long long)nsize);\n\n        lfs_alloc_ckpoint(lfs);\n    }\n\n    lfs_log_probe(\"EXIT lfs_file_flushedwrite: returning size=%llu\", (unsigned long long)size);\n    return size;\n}\n"
}