{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_ctz_find the parameter 'head' (type lfs_block_t) is modified: its address is passed to lfs_bd_read (&head) which writes into it, and then head is reassigned with head = lfs_fromle32(head). This changes the value of a non-pointer function parameter, violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_flushedwrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/507.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_flushedwrite as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_flushedwrite:\n```c\nstatic lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if ((file->flags & LFS_F_INLINE) &&\n            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {\n        // inline file doesn't fit anymore\n        int err = lfs_file_outline(lfs, file);\n        if (err) {\n            file->flags |= LFS_F_ERRED;\n            return err;\n        }\n    }\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_WRITING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {\n                    // find out which block we're extending from\n                    int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                            file->ctz.head, file->ctz.size,\n                            file->pos-1, &file->block, &(lfs_off_t){0});\n                    if (err) {\n                        file->flags |= LFS_F_ERRED;\n                        return err;\n                    }\n\n                    // mark cache as dirty since we may have read data into it\n                    lfs_cache_zero(lfs, &file->cache);\n                }\n\n                // extend file with new blocks\n                lfs_alloc_ckpoint(lfs);\n                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,\n                        file->block, file->pos,\n                        &file->block, &file->off);\n                if (err) {\n                    file->flags |= LFS_F_ERRED;\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_WRITING;\n        }\n\n        // program as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        while (true) {\n            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,\n                    file->block, file->off, data, diff);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    goto relocate;\n                }\n                file->flags |= LFS_F_ERRED;\n                return err;\n            }\n\n            break;\nrelocate:\n            err = lfs_file_relocate(lfs, file);\n            if (err) {\n                file->flags |= LFS_F_ERRED;\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        lfs_alloc_ckpoint(lfs);\n    }\n\n    return size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_flushedwrite code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append logs to /tmp/logs/507.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/507.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    lfs_log_probe(\"[flushedwrite] enter: lfs=%p file=%p size=%llu pos=%llu flags=0x%02llx ctz.head=%llu ctz.size=%llu inline_max=%llu\\n\",\n            (void *)lfs, (void *)file,\n            (unsigned long long)size,\n            (unsigned long long)file->pos,\n            (unsigned long long)file->flags,\n            (unsigned long long)file->ctz.head,\n            (unsigned long long)file->ctz.size,\n            (unsigned long long)lfs->inline_max);\n\n    if ((file->flags & LFS_F_INLINE) &&\n            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {\n        // inline file doesn't fit anymore\n        lfs_log_probe(\"[flushedwrite] inline doesn't fit: pos=%llu nsize=%llu ctz.size=%llu inline_max=%llu\\n\",\n                (unsigned long long)file->pos,\n                (unsigned long long)nsize,\n                (unsigned long long)file->ctz.size,\n                (unsigned long long)lfs->inline_max);\n\n        int err = lfs_file_outline(lfs, file);\n        lfs_log_probe(\"[flushedwrite] lfs_file_outline returned %d\\n\", err);\n        if (err) {\n            file->flags |= LFS_F_ERRED;\n            lfs_log_probe(\"[flushedwrite] returning error %d and setting F_ERRED\\n\", err);\n            return err;\n        }\n    }\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_WRITING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {\n                    // find out which block we're extending from\n                    lfs_log_probe(\"[flushedwrite] before lfs_ctz_find: file=%p ctz.head=%llu ctz.size=%llu pos-1=%llu\\n\",\n                            (void *)file,\n                            (unsigned long long)file->ctz.head,\n                            (unsigned long long)file->ctz.size,\n                            (unsigned long long)(file->pos - 1));\n\n                    int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                            file->ctz.head, file->ctz.size,\n                            file->pos-1, &file->block, &(lfs_off_t){0});\n\n                    lfs_log_probe(\"[flushedwrite] after lfs_ctz_find: err=%d file->ctz.head=%llu file->block=%llu\\n\",\n                            err,\n                            (unsigned long long)file->ctz.head,\n                            (unsigned long long)file->block);\n\n                    if (err) {\n                        file->flags |= LFS_F_ERRED;\n                        lfs_log_probe(\"[flushedwrite] lfs_ctz_find error, setting F_ERRED and returning %d\\n\", err);\n                        return err;\n                    }\n\n                    // mark cache as dirty since we may have read data into it\n                    lfs_cache_zero(lfs, &file->cache);\n                    lfs_log_probe(\"[flushedwrite] after lfs_cache_zero: cache=%p\\n\", (void *)&file->cache);\n                }\n\n                // extend file with new blocks\n                lfs_alloc_ckpoint(lfs);\n                lfs_log_probe(\"[flushedwrite] calling lfs_ctz_extend: block=%llu pos=%llu\\n\",\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->pos);\n                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,\n                        file->block, file->pos,\n                        &file->block, &file->off);\n                lfs_log_probe(\"[flushedwrite] after lfs_ctz_extend: err=%d block=%llu off=%llu\\n\",\n                        err,\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->off);\n                if (err) {\n                    file->flags |= LFS_F_ERRED;\n                    lfs_log_probe(\"[flushedwrite] lfs_ctz_extend error, setting F_ERRED and returning %d\\n\", err);\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n                lfs_log_probe(\"[flushedwrite] inline branch: block=INLINE off=%llu\\n\", (unsigned long long)file->off);\n            }\n\n            file->flags |= LFS_F_WRITING;\n            lfs_log_probe(\"[flushedwrite] set F_WRITING\\n\");\n        }\n\n        // program as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        while (true) {\n            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,\n                    file->block, file->off, data, diff);\n            lfs_log_probe(\"[flushedwrite] lfs_bd_prog returned %d for block=%llu off=%llu diff=%llu\\n\",\n                    err, (unsigned long long)file->block, (unsigned long long)file->off, (unsigned long long)diff);\n            if (err) {\n                if (err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe(\"[flushedwrite] encountered LFS_ERR_CORRUPT, relocating\\n\");\n                    goto relocate;\n                }\n                file->flags |= LFS_F_ERRED;\n                lfs_log_probe(\"[flushedwrite] lfs_bd_prog error (not CORRUPT), setting F_ERRED and returning %d\\n\", err);\n                return err;\n            }\n\n            break;\nrelocate:\n            err = lfs_file_relocate(lfs, file);\n            lfs_log_probe(\"[flushedwrite] lfs_file_relocate returned %d\\n\", err);\n            if (err) {\n                file->flags |= LFS_F_ERRED;\n                lfs_log_probe(\"[flushedwrite] lfs_file_relocate error, setting F_ERRED and returning %d\\n\", err);\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        lfs_alloc_ckpoint(lfs);\n        lfs_log_probe(\"[flushedwrite] progressed: pos=%llu off=%llu remaining=%llu\\n\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (unsigned long long)nsize);\n    }\n\n    lfs_log_probe(\"[flushedwrite] exit normally, wrote size=%llu\\n\", (unsigned long long)size);\n    return size;\n}\n"
}