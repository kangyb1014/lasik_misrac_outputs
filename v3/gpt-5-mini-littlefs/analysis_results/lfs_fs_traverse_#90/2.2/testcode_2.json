{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf lfs_bd_read() returns a non-zero error, the code still executes heads[0] = lfs_fromle32(heads[0]); and heads[1] = lfs_fromle32(heads[1]); and then immediately checks err and returns. Those two conversions therefore have no effect on program behaviour on the error path (they are executed but their removal would not change the program result), so they are dead operations. (Additionally, if lfs_bd_read failed the heads elements may be uninitialised, making this both dead and potentially undefined behaviour.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_traverse_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/902.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_traverse_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_traverse_:\n```c\nint lfs_fs_traverse_(lfs_t *lfs,\n        int (*cb)(void *data, lfs_block_t block), void *data,\n        bool includeorphans) {\n    // iterate over metadata pairs\n    lfs_mdir_t dir = {.tail = {0, 1}};\n\n#ifdef LFS_MIGRATE\n    // also consider v1 blocks during migration\n    if (lfs->lfs1) {\n        int err = lfs1_traverse(lfs, cb, data);\n        if (err) {\n            return err;\n        }\n\n        dir.tail[0] = lfs->root[0];\n        dir.tail[1] = lfs->root[1];\n    }\n#endif\n\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(dir.tail)) {\n        err = lfs_tortoise_detectcycles(&dir, &tortoise);\n        if (err < 0) {\n            return LFS_ERR_CORRUPT;\n        }\n\n        for (int i = 0; i < 2; i++) {\n            int err = cb(data, dir.tail[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        // iterate through ids in directory\n        int err = lfs_dir_fetch(lfs, &dir, dir.tail);\n        if (err) {\n            return err;\n        }\n\n        for (uint16_t id = 0; id < dir.count; id++) {\n            struct lfs_ctz ctz;\n            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),\n                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n            if (tag < 0) {\n                if (tag == LFS_ERR_NOENT) {\n                    continue;\n                }\n                return tag;\n            }\n            lfs_ctz_fromle32(&ctz);\n\n            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,\n                        ctz.head, ctz.size, cb, data);\n                if (err) {\n                    return err;\n                }\n            } else if (includeorphans &&\n                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {\n                for (int i = 0; i < 2; i++) {\n                    err = cb(data, (&ctz.head)[i]);\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n        }\n    }\n\n#ifndef LFS_READONLY\n    // iterate over any open files\n    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {\n        if (f->type != LFS_TYPE_REG) {\n            continue;\n        }\n\n        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {\n            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,\n                    f->ctz.head, f->ctz.size, cb, data);\n            if (err) {\n                return err;\n            }\n        }\n\n        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {\n            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,\n                    f->block, f->pos, cb, data);\n            if (err) {\n                return err;\n            }\n        }\n    }\n#endif\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_traverse_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/902.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_fs_traverse_(lfs_t *lfs,\n        int (*cb)(void *data, lfs_block_t block), void *data,\n        bool includeorphans) {\n    // probe: entry\n    probe_log(\"ENTER lfs_fs_traverse_: lfs=%p, cb=%p, data=%p, includeorphans=%d\", (void*)lfs, (void*)cb, data, (int)includeorphans);\n\n    // iterate over metadata pairs\n    lfs_mdir_t dir = {.tail = {0, 1}};\n\n#ifdef LFS_MIGRATE\n    // also consider v1 blocks during migration\n    if (lfs->lfs1) {\n        probe_log(\"LFS_MIGRATE: calling lfs1_traverse for lfs=%p\", (void*)lfs);\n        int err = lfs1_traverse(lfs, cb, data);\n        probe_log(\"lfs1_traverse returned %d\", err);\n        if (err) {\n            probe_log(\"EXIT lfs_fs_traverse_: returning err from lfs1_traverse=%d\", err);\n            return err;\n        }\n\n        dir.tail[0] = lfs->root[0];\n        dir.tail[1] = lfs->root[1];\n        probe_log(\"LFS_MIGRATE: set dir.tail to root: [%llu, %llu]\", (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n    }\n#endif\n\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(dir.tail)) {\n        probe_log(\"LOOP: dir.tail = [%llu, %llu]\", (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n        err = lfs_tortoise_detectcycles(&dir, &tortoise);\n        probe_log(\"lfs_tortoise_detectcycles returned %d\", err);\n        if (err < 0) {\n            probe_log(\"EXIT lfs_fs_traverse_: tortoise detectcycle error -> returning LFS_ERR_CORRUPT\");\n            return LFS_ERR_CORRUPT;\n        }\n\n        for (int i = 0; i < 2; i++) {\n            probe_log(\"CALLBACK: calling cb for dir.tail[%d]=%llu\", i, (unsigned long long)dir.tail[i]);\n            int err = cb(data, dir.tail[i]);\n            probe_log(\"CALLBACK: cb returned %d for block %llu\", err, (unsigned long long)dir.tail[i]);\n            if (err) {\n                probe_log(\"EXIT lfs_fs_traverse_: callback returned err=%d\", err);\n                return err;\n            }\n        }\n\n        // iterate through ids in directory\n        probe_log(\"FETCH: calling lfs_dir_fetch for dir.tail = [%llu, %llu]\", (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n        int err_fetch = lfs_dir_fetch(lfs, &dir, dir.tail);\n        probe_log(\"FETCH: lfs_dir_fetch returned %d\", err_fetch);\n        if (err_fetch) {\n            probe_log(\"EXIT lfs_fs_traverse_: lfs_dir_fetch error=%d, dir.tail was [%llu, %llu]\", err_fetch,\n                    (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n            return err_fetch;\n        }\n\n        probe_log(\"DIR: fetched dir.count=%u, dir.tail now [%llu, %llu]\", (unsigned)dir.count,\n                (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n\n        for (uint16_t id = 0; id < dir.count; id++) {\n            struct lfs_ctz ctz;\n            probe_log(\"DIRGET: id=%u calling lfs_dir_get\", (unsigned)id);\n            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),\n                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n            probe_log(\"DIRGET: lfs_dir_get returned tag=%d for id=%u\", (int)tag, (unsigned)id);\n            if (tag < 0) {\n                probe_log(\"DIRGET: tag<0 (=%d) for id=%u\", (int)tag, (unsigned)id);\n                if (tag == LFS_ERR_NOENT) {\n                    probe_log(\"DIRGET: no entry for id=%u, continuing\", (unsigned)id);\n                    continue;\n                }\n                probe_log(\"EXIT lfs_fs_traverse_: lfs_dir_get returned error=%d\", (int)tag);\n                return tag;\n            }\n\n            /* Safe to log ctz contents here because lfs_dir_get succeeded */\n            probe_log(\"CTZ: before lfs_ctz_fromle32 id=%u head=[%llu,%llu] size=%llu\", (unsigned)id,\n                    (unsigned long long)((&ctz.head)[0]), (unsigned long long)((&ctz.head)[1]), (unsigned long long)ctz.size);\n            lfs_ctz_fromle32(&ctz);\n            probe_log(\"CTZ: after lfs_ctz_fromle32 id=%u head=[%llu,%llu] size=%llu\", (unsigned)id,\n                    (unsigned long long)((&ctz.head)[0]), (unsigned long long)((&ctz.head)[1]), (unsigned long long)ctz.size);\n\n            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n                probe_log(\"CTZ_TRAVERSE: id=%u calling lfs_ctz_traverse head=[%llu,%llu] size=%llu\", (unsigned)id,\n                        (unsigned long long)ctz.head, (unsigned long long)ctz.size, (unsigned long long)ctz.size);\n                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,\n                        ctz.head, ctz.size, cb, data);\n                probe_log(\"CTZ_TRAVERSE: returned %d for id=%u\", err, (unsigned)id);\n                if (err) {\n                    probe_log(\"EXIT lfs_fs_traverse_: lfs_ctz_traverse returned err=%d\", err);\n                    return err;\n                }\n            } else if (includeorphans &&\n                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {\n                probe_log(\"ORPHANS: id=%u, includeorphans true, iterating heads [%llu,%llu]\", (unsigned)id,\n                        (unsigned long long)((&ctz.head)[0]), (unsigned long long)((&ctz.head)[1]));\n                for (int i = 0; i < 2; i++) {\n                    err = cb(data, (&ctz.head)[i]);\n                    probe_log(\"ORPHANS: cb returned %d for head[%d]=%llu\", err, i, (unsigned long long)((&ctz.head)[i]));\n                    if (err) {\n                        probe_log(\"EXIT lfs_fs_traverse_: callback in orphans returned err=%d\", err);\n                        return err;\n                    }\n                }\n            }\n        }\n    }\n\n#ifndef LFS_READONLY\n    // iterate over any open files\n    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {\n        probe_log(\"FILES: visiting open file %p\", (void*)f);\n        if (f->type != LFS_TYPE_REG) {\n            probe_log(\"FILES: skipping non-regular file %p type=%d\", (void*)f, (int)f->type);\n            continue;\n        }\n\n        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {\n            probe_log(\"FILES: f is dirty and not inline, calling lfs_ctz_traverse for file %p head=%llu size=%llu\", (void*)f,\n                    (unsigned long long)f->ctz.head, (unsigned long long)f->ctz.size);\n            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,\n                    f->ctz.head, f->ctz.size, cb, data);\n            probe_log(\"FILES: lfs_ctz_traverse returned %d for file %p\", err, (void*)f);\n            if (err) {\n                probe_log(\"EXIT lfs_fs_traverse_: lfs_ctz_traverse on dirty file returned err=%d\", err);\n                return err;\n            }\n        }\n\n        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {\n            probe_log(\"FILES: f is writing and not inline, calling lfs_ctz_traverse for file %p block=%llu pos=%llu\", (void*)f,\n                    (unsigned long long)f->block, (unsigned long long)f->pos);\n            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,\n                    f->block, f->pos, cb, data);\n            probe_log(\"FILES: lfs_ctz_traverse returned %d for file %p\", err, (void*)f);\n            if (err) {\n                probe_log(\"EXIT lfs_fs_traverse_: lfs_ctz_traverse on writing file returned err=%d\", err);\n                return err;\n            }\n        }\n    }\n#endif\n\n    probe_log(\"EXIT lfs_fs_traverse_: returning 0 (success)\");\n    return 0;\n}\n"
}