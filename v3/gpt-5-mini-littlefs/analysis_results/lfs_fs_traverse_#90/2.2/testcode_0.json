{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initializer 'int err = LFS_ERR_OK;' stores a value that is never read: the outer variable is assigned a new value immediately by 'err = lfs_tortoise_detectcycles(...)' before any use. Several inner blocks also declare/shadow 'int err', so the initial assignment has no effect; removing it would not change program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_traverse_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/902.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_traverse_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_traverse_:\n```c\nint lfs_fs_traverse_(lfs_t *lfs,\n        int (*cb)(void *data, lfs_block_t block), void *data,\n        bool includeorphans) {\n    // iterate over metadata pairs\n    lfs_mdir_t dir = {.tail = {0, 1}};\n\n#ifdef LFS_MIGRATE\n    // also consider v1 blocks during migration\n    if (lfs->lfs1) {\n        int err = lfs1_traverse(lfs, cb, data);\n        if (err) {\n            return err;\n        }\n\n        dir.tail[0] = lfs->root[0];\n        dir.tail[1] = lfs->root[1];\n    }\n#endif\n\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(dir.tail)) {\n        err = lfs_tortoise_detectcycles(&dir, &tortoise);\n        if (err < 0) {\n            return LFS_ERR_CORRUPT;\n        }\n\n        for (int i = 0; i < 2; i++) {\n            int err = cb(data, dir.tail[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        // iterate through ids in directory\n        int err = lfs_dir_fetch(lfs, &dir, dir.tail);\n        if (err) {\n            return err;\n        }\n\n        for (uint16_t id = 0; id < dir.count; id++) {\n            struct lfs_ctz ctz;\n            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),\n                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n            if (tag < 0) {\n                if (tag == LFS_ERR_NOENT) {\n                    continue;\n                }\n                return tag;\n            }\n            lfs_ctz_fromle32(&ctz);\n\n            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,\n                        ctz.head, ctz.size, cb, data);\n                if (err) {\n                    return err;\n                }\n            } else if (includeorphans &&\n                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {\n                for (int i = 0; i < 2; i++) {\n                    err = cb(data, (&ctz.head)[i]);\n                    if (err) {\n                        return err;\n                    }\n                }\n            }\n        }\n    }\n\n#ifndef LFS_READONLY\n    // iterate over any open files\n    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {\n        if (f->type != LFS_TYPE_REG) {\n            continue;\n        }\n\n        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {\n            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,\n                    f->ctz.head, f->ctz.size, cb, data);\n            if (err) {\n                return err;\n            }\n        }\n\n        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {\n            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,\n                    f->block, f->pos, cb, data);\n            if (err) {\n                return err;\n            }\n        }\n    }\n#endif\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_traverse_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger that appends human-readable trace information to /tmp/logs/902.txt.\n * Keep it minimal so it can be inlined with existing code without changing logic. */\nstatic void lfs_probe_printf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/902.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_fs_traverse_(lfs_t *lfs,\n        int (*cb)(void *data, lfs_block_t block), void *data,\n        bool includeorphans) {\n    lfs_probe_printf(\"ENTER lfs_fs_traverse_: lfs=%p cb=%p data=%p includeorphans=%d\",\n            (void*)lfs, (void*)cb, data, (int)includeorphans);\n\n    // iterate over metadata pairs\n    lfs_mdir_t dir = {.tail = {0, 1}};\n    lfs_probe_printf(\"init dir.tail = [%llu, %llu]\",\n            (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n\n#ifdef LFS_MIGRATE\n    // also consider v1 blocks during migration\n    if (lfs->lfs1) {\n        lfs_probe_printf(\"LFS_MIGRATE: entering lfs1_traverse, lfs1=%p\", (void*)lfs->lfs1);\n        int err = lfs1_traverse(lfs, cb, data);\n        lfs_probe_printf(\"lfs1_traverse returned %d\", err);\n        if (err) {\n            return err;\n        }\n\n        dir.tail[0] = lfs->root[0];\n        dir.tail[1] = lfs->root[1];\n        lfs_probe_printf(\"LFS_MIGRATE: updated dir.tail = [%llu, %llu]\",\n                (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n    }\n#endif\n\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    /* Log the outer initializer which is the subject of the reported dead-code\n     * scenario: the initial value is stored here but may be overwritten before use. */\n    lfs_probe_printf(\"outer err initialized to %d (address=%p)\", err, (void*)&err);\n\n    while (!lfs_pair_isnull(dir.tail)) {\n        lfs_probe_printf(\"while: dir.tail = [%llu, %llu]\",\n                (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n\n        err = lfs_tortoise_detectcycles(&dir, &tortoise);\n        lfs_probe_printf(\"after lfs_tortoise_detectcycles: err=%d\", err);\n        if (err < 0) {\n            lfs_probe_printf(\"tortoise_detectcycles indicates corruption (err=%d). Returning LFS_ERR_CORRUPT.\", err);\n            return LFS_ERR_CORRUPT;\n        }\n\n        for (int i = 0; i < 2; i++) {\n            /* This inner declaration shadows the outer 'err'. Log both that the shadowing\n             * occurs and the value returned from the callback for evidence. */\n            int err = cb(data, dir.tail[i]);\n            lfs_probe_printf(\"inner cb call: dir.tail[%d]=%llu cb_err(shadow)=%d\",\n                    i, (unsigned long long)dir.tail[i], err);\n            if (err) {\n                lfs_probe_printf(\"inner cb returned non-zero (shadow err=%d). Returning.\", err);\n                return err;\n            }\n        }\n\n        // iterate through ids in directory\n        int err = lfs_dir_fetch(lfs, &dir, dir.tail);\n        lfs_probe_printf(\"lfs_dir_fetch returned (shadow) err=%d for dir.tail=[%llu,%llu]\",\n                err, (unsigned long long)dir.tail[0], (unsigned long long)dir.tail[1]);\n        if (err) {\n            lfs_probe_printf(\"lfs_dir_fetch error: returning %d\", err);\n            return err;\n        }\n\n        for (uint16_t id = 0; id < dir.count; id++) {\n            struct lfs_ctz ctz;\n            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),\n                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n            lfs_probe_printf(\"lfs_dir_get for id=%u returned tag=%d\", (unsigned)id, (int)tag);\n            if (tag < 0) {\n                if (tag == LFS_ERR_NOENT) {\n                    lfs_probe_printf(\"lfs_dir_get: id=%u NOENT, continue\", (unsigned)id);\n                    continue;\n                }\n                lfs_probe_printf(\"lfs_dir_get error: returning %d\", (int)tag);\n                return tag;\n            }\n            lfs_ctz_fromle32(&ctz);\n\n            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n                lfs_probe_printf(\"CTZSTRUCT found id=%u head=%llu size=%llu\",\n                        (unsigned)id, (unsigned long long)ctz.head, (unsigned long long)ctz.size);\n                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,\n                        ctz.head, ctz.size, cb, data);\n                lfs_probe_printf(\"lfs_ctz_traverse returned err=%d (outer err now=%d)\", err, err);\n                if (err) {\n                    lfs_probe_printf(\"lfs_ctz_traverse error: returning %d\", err);\n                    return err;\n                }\n            } else if (includeorphans &&\n                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {\n                lfs_probe_printf(\"DIRSTRUCT (orphan) found id=%u head=[%llu,%llu]\",\n                        (unsigned)id, (unsigned long long)(&ctz.head)[0], (unsigned long long)(&ctz.head)[1]);\n                for (int i = 0; i < 2; i++) {\n                    err = cb(data, (&ctz.head)[i]);\n                    lfs_probe_printf(\"orphan cb call: head[%d]=%llu returned err=%d\",\n                            i, (unsigned long long)(&ctz.head)[i], err);\n                    if (err) {\n                        lfs_probe_printf(\"orphan cb returned err=%d. Returning.\", err);\n                        return err;\n                    }\n                }\n            }\n        }\n    }\n\n#ifndef LFS_READONLY\n    // iterate over any open files\n    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {\n        lfs_probe_printf(\"file list: f=%p type=%d flags=0x%08x\", (void*)f, (int)f->type, (unsigned)f->flags);\n        if (f->type != LFS_TYPE_REG) {\n            lfs_probe_printf(\"skipping non-regular file f=%p type=%d\", (void*)f, (int)f->type);\n            continue;\n        }\n\n        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {\n            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,\n                    f->ctz.head, f->ctz.size, cb, data);\n            lfs_probe_printf(\"file dirty ctz_traverse returned (shadow) err=%d for f=%p\", err, (void*)f);\n            if (err) {\n                lfs_probe_printf(\"file dirty traversal error: returning %d\", err);\n                return err;\n            }\n        }\n\n        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {\n            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,\n                    f->block, f->pos, cb, data);\n            lfs_probe_printf(\"file writing ctz_traverse returned (shadow) err=%d for f=%p\", err, (void*)f);\n            if (err) {\n                lfs_probe_printf(\"file writing traversal error: returning %d\", err);\n                return err;\n            }\n        }\n    }\n#endif\n\n    lfs_probe_printf(\"EXIT lfs_fs_traverse_ returning 0\");\n    return 0;\n}\n"
}