{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call explicitly casts 'file' to a non-const pointer type: (struct lfs_mlist*)file. If lfs_mlist_isopen only inspects the object (does not modify it), the pointer parameter should be const-qualified (const struct lfs_mlist *). The explicit cast to a non-const type prevents or discards const qualification and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/463.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a concise record to the log file. */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_file_t *file, int value)\n{\n    FILE *f = fopen(\"/tmp/logs/463.txt\", \"a\");\n    if (f) {\n        /* record stage, pointers and an integer value (used for errors or boolean results) */\n        fprintf(f, \"%s: lfs=%p file=%p value=%d\\n\", stage, (void*)lfs, (void*)file, value);\n        fclose(f);\n    }\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure and return as original logic */\n        lfs_probe_log(\"lock_failed\", lfs, file, err);\n        return err;\n    }\n\n    lfs_probe_log(\"entered\", lfs, file, 0);\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n\n    /*\n     * Probe the call to lfs_mlist_isopen that uses an explicit cast to a non-const\n     * pointer: (struct lfs_mlist*)file. Capture the return so we can both assert\n     * as before and log the result for evidence of the violation scenario.\n     */\n    int _probe_open = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n\n    /* Log the fact that the call used an explicit cast and the boolean result. */\n    {\n        FILE *f = fopen(\"/tmp/logs/463.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"called lfs_mlist_isopen with cast (struct lfs_mlist*)file -> %p result=%d\\n\", (void*)file, _probe_open);\n            fclose(f);\n        }\n    }\n\n    /* Preserve original assertion behavior */\n    LFS_ASSERT(_probe_open);\n\n    err = lfs_file_close_(lfs, file);\n\n    lfs_probe_log(\"after_close\", lfs, file, err);\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"exiting\", lfs, file, err);\n    return err;\n}\n"
}