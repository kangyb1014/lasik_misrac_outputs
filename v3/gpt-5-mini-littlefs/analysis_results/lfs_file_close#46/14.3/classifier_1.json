{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_file_close:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_ASSERT(test) assert(test)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nuint8_t type\n...\n#define LFS_ASSERT(test) assert(test)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (err) {\n        return err;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The variable 'err' is initialized as int err = LFS_LOCK(lfs->cfg); and LFS_LOCK(cfg) is defined as ((void)cfg,0), so 'err' is always 0. The controlling expression if (err) is therefore invariant (always false), which violates MISRA C 2023 Rule 14.3. Neither of the rule's exceptions (infinite loop or the specific do-while pattern) applies here."
}