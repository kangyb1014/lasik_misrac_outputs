{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), so the call LFS_UNLOCK(lfs->cfg); in lfs_file_close executes a no-op expression that has no effect on program state. Removing that statement would not change program behaviour, therefore it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/462.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper used to capture control flow and state for debugging. */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_file_t *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/462.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log basic control-stage, pointers and error code. Keep format simple so\n       other agents can parse it. Do not attempt to dereference internal\n       structures here to avoid changing program behaviour. */\n    fprintf(f, \"%s: lfs=%p file=%p err=%d\\n\", stage, (void*)lfs, (void*)file, err);\n    fclose(f);\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry into function */\n    lfs_probe_log(\"enter\", lfs, file, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt */\n    lfs_probe_log(\"after_lock\", lfs, file, err);\n    if (err) {\n        /* Log early exit due to lock failure */\n        lfs_probe_log(\"exit_lock_failed\", lfs, file, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log just before performing the core close operation */\n    lfs_probe_log(\"before_close_\", lfs, file, 0);\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    /* Log result of core close operation */\n    lfs_probe_log(\"after_close_\", lfs, file, err);\n\n    /* Log immediately before unlock. This entry and the following one\n       will allow inspection of whether the unlock call had any visible\n       effect on observable state (as far as pointer addresses and\n       returned error codes go). */\n    lfs_probe_log(\"before_unlock\", lfs, file, err);\n    LFS_UNLOCK(lfs->cfg);\n    /* Log immediately after unlock */\n    lfs_probe_log(\"after_unlock\", lfs, file, err);\n\n    /* Final return (also logged) */\n    lfs_probe_log(\"return\", lfs, file, err);\n    return err;\n}\n"
}