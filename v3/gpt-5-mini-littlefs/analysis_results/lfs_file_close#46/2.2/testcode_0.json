{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0). The (void)cfg sub-expression is evaluated at runtime but has no side-effects (it only suppresses an unused-parameter warning). Removing that sub-expression (leaving just 0) would not affect program behaviour, so the evaluated (void)cfg is dead code. Thus this construct (and the similar ((void)cfg) in LFS_UNLOCK) violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/462.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper. Appends human-readable logs to /tmp/logs/462.txt\n * Kept small and non-intrusive so original logic is preserved.\n */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/462.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry and the cfg pointer value (if available) so callers can\n     * observe that cfg is evaluated when passed to LFS_LOCK/LFS_UNLOCK. */\n    lfs_probe_log(\"ENTRY lfs_file_close: lfs=%p, file=%p, cfg=%p\",\n                  (void*)lfs,\n                  (void*)file,\n                  (void*)(lfs ? lfs->cfg : NULL));\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log immediately after the lock macro evaluation to capture the\n     * returned value and the cfg pointer. This helps demonstrate that the\n     * (void)cfg subexpression is evaluated at runtime (the pointer is read\n     * for logging) while having no effect on program semantics.\n     */\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d, cfg=%p\",\n                  err,\n                  (void*)(lfs ? lfs->cfg : NULL));\n\n    if (err) {\n        lfs_probe_log(\"RETURN (lock failed): %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"CALL lfs_file_close_: lfs=%p, file=%p\",\n                  (void*)lfs,\n                  (void*)file);\n\n    err = lfs_file_close_(lfs, file);\n\n    lfs_probe_log(\"RETURN from lfs_file_close_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n\n    lfs_probe_log(\"CALL LFS_UNLOCK: cfg=%p (about to unlock)\",\n                  (void*)(lfs ? lfs->cfg : NULL));\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"EXIT lfs_file_close: final err=%d\", err);\n\n    return err;\n}\n"
}