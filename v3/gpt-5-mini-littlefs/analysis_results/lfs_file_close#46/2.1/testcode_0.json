{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0) which always yields 0. In lfs_file_close the code `int err = LFS_LOCK(lfs->cfg); if (err) { return err; }` therefore has a branch that can never execute (the if-body is unreachable). This constitutes unreachable code in the project and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/461.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper: append formatted message to /tmp/logs/461.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    char buf[512];\n\n    va_start(ap, fmt);\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    /* Ensure directory exists (ignore errors) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/461.txt\", \"a\");\n    if (f) {\n        (void)fprintf(f, \"%s\\n\", buf);\n        (void)fclose(f);\n    }\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry and pointers */\n    probe_log(\"ENTER lfs_file_close: lfs=%p, file=%p\", (void*)lfs, (void*)file);\n    probe_log(\"lfs->cfg pointer: %p\", (void*)(lfs ? lfs->cfg : NULL));\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log the result of the lock attempt to capture control flow */\n    probe_log(\"After LFS_LOCK: err=%d\", err);\n\n    if (err) {\n        probe_log(\"LFS_LOCK returned non-zero, taking early return with err=%d\", err);\n        return err;\n    }\n\n    probe_log(\"LFS_LOCK returned zero, continuing to close file\");\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    probe_log(\"lfs_file_close_ returned err=%d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"Called LFS_UNLOCK on cfg=%p\", (void*)(lfs ? lfs->cfg : NULL));\n    probe_log(\"EXIT lfs_file_close: returning %d\", err);\n\n    return err;\n}\n"
}