{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop third clause (p = &(*p)->next) dereferences *p to read (*p)->next while the loop body may modify *p via the statement *p = (*p)->next. Clause 3 requires the third clause not to use objects that are modified in the for-loop body. Although the loop counter p itself is not modified in the body, the increment expression reads an object that the body can modify, so this violates MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/464.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/*\n * Probe helper: write a simple log entry to /tmp/logs/464.txt.\n * Keep this self-contained and avoid changing program logic.\n */\nstatic void lfs_probe_write(const char *stage, const void *lfs_ptr, const void *file_ptr, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/464.txt\", \"a\");\n    if (!f) {\n        /* Try to create the directory and reopen. Ignore errors if creation fails. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/464.txt\", \"a\");\n    }\n    if (f) {\n        fprintf(f, \"%s: lfs=%p file=%p err=%d\\n\", stage, lfs_ptr, file_ptr, err);\n        fclose(f);\n    }\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log lock result and entry so callers can observe early returns. */\n    lfs_probe_write(\"ENTRY\", (const void*)lfs, (const void*)file, 0);\n    lfs_probe_write(\"LOCK_RESULT\", (const void*)lfs, (const void*)file, err);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log just before delegating to the internal close so the callee's\n       behavior (which may contain the for-loop of interest) can be correlated. */\n    lfs_probe_write(\"CALL_lfs_file_close_\", (const void*)lfs, (const void*)file, 0);\n\n    err = lfs_file_close_(lfs, file);\n\n    /* Log the result from the internal close to capture the state after the\n       body that is suspected to violate Rule 14.2. */\n    lfs_probe_write(\"RETURN_lfs_file_close_\", (const void*)lfs, (const void*)file, err);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlock to show the full control path of the function. */\n    lfs_probe_write(\"EXIT\", (const void*)lfs, (const void*)file, err);\n    return err;\n}\n"
}