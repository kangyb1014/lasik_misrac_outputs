{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'file' is declared as lfs_file_t *file and is passed to lfs_file_size_(lfs, file) even though lfs_file_size/lfs_file_size_ only read state (returning file size). The pointer is not const-qualified (e.g. const lfs_file_t *file) even though it could be, so the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable entries to /tmp/logs/613.txt */\nstatic void lfs_rule613_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/613.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    lfs_rule613_log(\"ENTER lfs_file_size: lfs=%p, file=%p\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_rule613_log(\"LFS_LOCK failed: err=%d -> returning\", err);\n        return err;\n    }\n    lfs_rule613_log(\"LFS_LOCK succeeded\");\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Record whether the file appears open in the mlist (evidence of how 'file' is used) */\n    int open_ok = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_rule613_log(\"mlist_isopen=%d for file=%p\", open_ok, (void*)file);\n    LFS_ASSERT(open_ok);\n\n    /* Probe some observable state of the 'file' pointer without altering it.\n       We only read one byte to reduce risk of accidental side-effects. */\n    if (file != NULL) {\n        unsigned char first_byte = *((unsigned char*)file);\n        lfs_rule613_log(\"file first byte @%p = 0x%02x\", (void*)file, (unsigned)first_byte);\n    } else {\n        lfs_rule613_log(\"file is NULL\");\n    }\n\n    lfs_rule613_log(\"Calling lfs_file_size_(lfs=%p, file=%p)\", (void*)lfs, (void*)file);\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n    lfs_rule613_log(\"lfs_file_size_ returned %lld\", (long long)res);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n\n    lfs_rule613_log(\"About to unlock and return\");\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}