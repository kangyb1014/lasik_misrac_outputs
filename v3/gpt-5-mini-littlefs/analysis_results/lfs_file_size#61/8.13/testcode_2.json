{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes non-const pointers (lfs_t *lfs, lfs_file_t *file) although the body only reads from them (calls LFS_LOCK/LFS_UNLOCK using lfs->cfg and lfs_file_size_ which appears to query state). Thus both parameters could be const-qualified (e.g. const lfs_t *lfs, const lfs_file_t *file). Additionally, the code casts file to (struct lfs_mlist*) in LFS_ASSERT, indicating const-qualification is not used consistently. Therefore the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probe helper: append control-flow and state information to /tmp/logs/613.txt\n * Keeps reads only and does not alter program logic.\n */\nstatic void lfs_log_probe(const char *stage, lfs_t *lfs, lfs_file_t *file, int err, lfs_soff_t res) {\n    FILE *f = fopen(\"/tmp/logs/613.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Safely attempt to capture cfg pointer if available (do not dereference beyond taking the pointer).\n     * Cast to void* for generic pointer printing. */\n    void *cfgptr = NULL;\n    if (lfs) {\n        cfgptr = (void*)lfs->cfg;\n    }\n    /* lfs_soff_t may be signed; print via long long to be robust across typedefs. */\n    fprintf(f, \"%s: lfs=%p cfg=%p file=%p err=%d res=%lld\\n\",\n            stage, (void*)lfs, cfgptr, (void*)file, err, (long long)res);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry into function */\n    lfs_log_probe(\"enter\", lfs, file, 0, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log after attempting lock */\n    lfs_log_probe(\"after_lock\", lfs, file, err, 0);\n\n    if (err) {\n        /* Log the early return due to lock error */\n        lfs_log_probe(\"lock_failed_return\", lfs, file, err, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Log just before the assertion check. This records pointers so the assertion can be correlated. */\n    lfs_log_probe(\"before_assert\", lfs, file, 0, 0);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log immediately after the assert (if assert does not abort). */\n    lfs_log_probe(\"after_assert\", lfs, file, 0, 0);\n\n    /* Log just before calling the internal implementation */\n    lfs_log_probe(\"before_internal_call\", lfs, file, 0, 0);\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Log the result of the internal call */\n    lfs_log_probe(\"after_internal_call\", lfs, file, 0, res);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log exit of function with final result */\n    lfs_log_probe(\"exit\", lfs, file, 0, res);\n\n    return res;\n}\n"
}