{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointers lfs and file are only used for read/inspection (trace, checks) in this function but are declared as non-const and then cast to (void*) for logging. Per MISRA C 2023 Rule 8.13 they should be const-qualified when possible (e.g. function parameters declared as const lfs_t *lfs and const lfs_file_t *file). Casting to (void*) for the trace hides the lack of const qualification and can mask a missing const qualification on the pointers.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: writes control-flow and state information to /tmp/logs/613.txt.\n   Uses pointer-to-const so it does not attempt to modify the inspected objects.\n*/\nstatic void lfs_file_size_probe(const char *stage, const lfs_t *lfs, const lfs_file_t *file, int err, lfs_soff_t res, int have_res, int isopen) {\n    FILE *fp = fopen(\"/tmp/logs/613.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    fprintf(fp, \"stage=%s; lfs=%p; file=%p; err=%d; isopen=%d\", stage, (const void*)lfs, (const void*)file, err, isopen);\n    if (have_res) {\n        fprintf(fp, \"; res=%lld\", (long long)res);\n    }\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log after attempting lock */\n    lfs_file_size_probe(\"after_lock\", (const lfs_t *)lfs, (const lfs_file_t *)file, err, 0, 0, -1);\n\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_file_size_probe(\"return_on_lock_err\", (const lfs_t *)lfs, (const lfs_file_t *)file, err, 0, 0, -1);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    /* Log that we issued the trace call (note: the trace itself casts to void*) */\n    lfs_file_size_probe(\"after_LFS_TRACE\", (const lfs_t *)lfs, (const lfs_file_t *)file, 0, 0, 0, -1);\n\n    /* Evaluate mlist open state so we can log it, then assert the same condition as original code.\n       This preserves the original logic (no side-effects are expected from lfs_mlist_isopen).\n    */\n    int is_open = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_file_size_probe(\"mlist_isopen_result\", (const lfs_t *)lfs, (const lfs_file_t *)file, 0, 0, 0, is_open);\n    LFS_ASSERT(is_open);\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Log the result returned by the internal helper */\n    lfs_file_size_probe(\"after_lfs_file_size_\", (const lfs_t *)lfs, (const lfs_file_t *)file, 0, res, 1, is_open);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log before returning */\n    lfs_file_size_probe(\"return\", (const lfs_t *)lfs, (const lfs_file_t *)file, 0, res, 1, is_open);\n    return res;\n}\n"
}