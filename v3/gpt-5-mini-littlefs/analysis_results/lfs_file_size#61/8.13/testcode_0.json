{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code performs an explicit cast to a non-const pointer: (struct lfs_mlist*)file. If lfs_mlist_isopen only inspects the list (i.e. does not modify the object), its parameter should be declared as const struct lfs_mlist * and the argument should be passed as a pointer-to-const. The explicit cast to a non-const type removes/ignores const-qualification and thus violates the principle that pointers should point to const-qualified types whenever possible. (Fix: make lfs_mlist_isopen take const struct lfs_mlist * and remove the cast.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a log entry to /tmp/logs/613.txt. */\nstatic void lfs_probe_log(const char *stage, const void *lfs_ptr, const void *file_ptr,\n                          int is_open_result, long res_value, int has_res)\n{\n    FILE *f = fopen(\"/tmp/logs/613.txt\", \"a\");\n    if (f) {\n        /* stage: descriptive text about where we are\n           lfs_ptr, file_ptr: pointer values for lfs and file\n           is_open_result: result of lfs_mlist_isopen (if called)\n           has_res: if non-zero, res_value contains lfs_file_size_ result */\n        if (has_res) {\n            fprintf(f, \"[lfs_file_size] %s: lfs=%p, file=%p, is_open=%d, size_result=%ld\\n\",\n                    stage, lfs_ptr, file_ptr, is_open_result, res_value);\n        } else {\n            fprintf(f, \"[lfs_file_size] %s: lfs=%p, file=%p, is_open=%d\\n\",\n                    stage, lfs_ptr, file_ptr, is_open_result);\n        }\n        fclose(f);\n    }\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that lock failed and we are returning early */\n        lfs_probe_log(\"lock_failed\", (void*)lfs, (void*)file, /*is_open_result*/0, 0L, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Call lfs_mlist_isopen once, capture its result so we can log it. */\n    int is_open = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n\n    /* Log that we invoked lfs_mlist_isopen and the fact we performed a cast to non-const */\n    lfs_probe_log(\"after_mlist_isopen_call (cast to non-const used)\", (void*)lfs, (void*)file,\n                  is_open, 0L, 0);\n\n    LFS_ASSERT(is_open);\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Log the returned size from the internal helper */\n    lfs_probe_log(\"after_lfs_file_size_\", (void*)lfs, (void*)file, is_open, (long)res, 1);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}