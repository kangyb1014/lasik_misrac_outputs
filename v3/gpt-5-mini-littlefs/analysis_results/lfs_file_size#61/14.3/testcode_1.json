{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK(cfg) macro is defined as ((void)cfg,0), so the assignment int err = LFS_LOCK(lfs->cfg); always yields err == 0. The subsequent controlling expression if (err) is therefore invariant (always false). This is a direct violation of MISRA C 2023 Rule 14.3 (controlling expressions shall not be invariant); none of the stated exceptions (infinite-loop invariants or the do-while constant-false exception) apply here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/615.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/*\n * Probe logging helpers. These functions are inserted to record control\n * flow and relevant state into /tmp/logs/615.txt so other agents can\n * reproduce and gather evidence for the reported invariant controlling\n * expression scenario.\n *\n * They are static so they don't change any external linkage and they\n * preserve the original logic of lfs_file_size.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/615.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/*\n * lfs_file_size with probes inserted. Original logic preserved.\n */\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry and parameters */\n    probe_log(\"ENTER lfs_file_size: lfs=%p file=%p\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock call */\n    probe_log(\"LFS_LOCK called: err=%d (lock target cfg at %p)\", err, (void*)lfs);\n\n    if (err) {\n        /* Log the control path taken when err is non-zero */\n        probe_log(\"lfs_file_size: returning early due to err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Log result computed by the underlying helper */\n    probe_log(\"lfs_file_size_: res=%\" PRIu32 \", lfs=%p file=%p\", res, (void*)lfs, (void*)file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n\n    /* Log before unlocking and returning */\n    probe_log(\"LFS_UNLOCK about to be called for cfg at %p\", (void*)lfs);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"EXIT lfs_file_size: returning res=%\" PRIu32, res);\n\n    return res;\n}\n"
}