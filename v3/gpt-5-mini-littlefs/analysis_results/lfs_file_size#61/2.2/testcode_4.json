{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nBecause LFS_LOCK(cfg) is defined as ((void)cfg,0), the assignment int err = LFS_LOCK(lfs->cfg); always yields err == 0. Therefore the branch if (err) { return err; } can never be taken at runtime; removing that branch would not affect program behaviour. The unused return path is dead code, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/612.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n\n/*\n * Probe logger for lfs_file_size. Logs control flow and state to /tmp/logs/612.txt\n * This helper intentionally uses void* for the lfs and file pointers so it does\n * not require or redefine project types (lfs_t, lfs_file_t, lfs_soff_t).\n */\nstatic void lfs_file_size_log(const void *lfs_ptr, const void *file_ptr, int err, unsigned long long res, const char *stage) {\n    FILE *fp = fopen(\"/tmp/logs/612.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(fp, \"[%ld] stage=%s lfs=%p file=%p err=%d res=%llu\\n\", (long)t, stage, lfs_ptr, file_ptr, err, res);\n    fclose(fp);\n}\n\n/* Modified function: preserves original logic but adds probes to capture the\n * control flow and state to reproduce the reported scenario.\n */\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Log before attempting the lock */\n    lfs_file_size_log((const void*)lfs, (const void*)file, -999, 0ULL, \"entry_before_lock\");\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of LFS_LOCK so we can observe that it always yields 0\n     * in the reported scenario ((void)cfg,0).\n     */\n    lfs_file_size_log((const void*)lfs, (const void*)file, err, 0ULL, \"after_lock\");\n\n    if (err) {\n        /* Log the (unexpected) branch taken for error handling */\n        lfs_file_size_log((const void*)lfs, (const void*)file, err, 0ULL, \"branch_err_return\");\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Log the computed result before unlocking */\n    lfs_file_size_log((const void*)lfs, (const void*)file, err, (unsigned long long)res, \"before_unlock\");\n\n    LFS_TRACE(\"lfs_file_size -> %\" PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log on exit */\n    lfs_file_size_log((const void*)lfs, (const void*)file, err, (unsigned long long)res, \"exit\");\n\n    return res;\n}\n"
}