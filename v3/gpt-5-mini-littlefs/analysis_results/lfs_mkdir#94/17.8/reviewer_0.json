{
  "user_message": "An agent A claimed that the following lfs_mkdir code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_mkdir.\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn lfs_mkdir_ the parameter is declared as const char *path, but the call lfs_dir_find(lfs, &cwd.m, &path, &id) passes &path so the callee can update the local parameter (change the pointer value). Modifying the pointer parameter (even via its address) violates MISRA C 2023 Rule 17.8.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: returned from lfs_mkdir_ -> 0 ; lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nEXIT lfs_mkdir: returning 0\nENTER lfs_mkdir: lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e58\nlfs_mkdir: calling lfs_mkdir_ with lfs=0x7fff7cfc81e8, path_ptr=0x5606e230906c, path_str=\"breakfast\", &path=0x7fff7cfc7e5\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_mkdir:\nstatic int lfs_mkdir_(lfs_t *lfs, const char *path) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    struct lfs_mlist cwd;\n    cwd.next = lfs->mlist;\n    uint16_t id;\n    err = lfs_dir_find(lfs, &cwd.m, &path, &id);\n    if (!(err == LFS_ERR_NOENT && lfs_path_islast(path))) {\n        return (err < 0) ? err : LFS_ERR_EXIST;\n    }\n\n    // check that name fits\n    lfs_size_t nlen = lfs_path_namelen(path);\n    if (nlen > lfs->name_max) {\n        return LFS_ERR_NAMETOOLONG;\n    }\n\n    // build up new directory\n    lfs_alloc_ckpoint(lfs);\n    lfs_mdir_t dir;\n    err = lfs_dir_alloc(lfs, &dir);\n    if (err) {\n        return err;\n    }\n\n    // find end of list\n    lfs_mdir_t pred = cwd.m;\n    while (pred.split) {\n        err = lfs_dir_fetch(lfs, &pred, pred.tail);\n        if (err) {\n            return err;\n        }\n    }\n\n    // setup dir\n    lfs_pair_tole32(pred.tail);\n    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));\n    lfs_pair_fromle32(pred.tail);\n    if (err) {\n        return err;\n    }\n\n    // current block not end of list?\n    if (cwd.m.split) {\n        // update tails, this creates a desync\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // it's possible our predecessor has to be relocated, and if\n        // our parent is our predecessor's predecessor, this could have\n        // caused our parent to go out of date, fortunately we can hook\n        // ourselves into littlefs to catch this\n        cwd.type = 0;\n        cwd.id = 0;\n        lfs->mlist = &cwd;\n\n        lfs_pair_tole32(dir.pair);\n        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));\n        lfs_pair_fromle32(dir.pair);\n        if (err) {\n            lfs->mlist = cwd.next;\n            return err;\n        }\n\n        lfs->mlist = cwd.next;\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n    }\n\n    // now insert into our parent block\n    lfs_pair_tole32(dir.pair);\n    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},\n            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},\n            {LFS_MKTAG_IF(!cwd.m.split,\n                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));\n    lfs_pair_fromle32(dir.pair);\n    if (err) {\n        return err;\n    }\n\n    return 0;\n}\n...\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The violation occurs in lfs_mkdir_ (not the thin wrapper lfs_mkdir). lfs_mkdir_ has the parameter declaration `const char *path` and then calls `lfs_dir_find(lfs, &cwd.m, &path, &id)`. Passing `&path` hands the address of the parameter variable to the callee, which can update the pointer value (and in the implementation of lfs_dir_find it does advance the path pointer). That is a modification of the function parameter variable itself, which conflicts with MISRA C 2023 Rule 17.8 (the pointer parameter shall not be modified; only the object it points to may be modified). A simple fix is to use a local copy (e.g. `const char *p = path;` and pass `&p` to lfs_dir_find) so the formal parameter is not modified."
}