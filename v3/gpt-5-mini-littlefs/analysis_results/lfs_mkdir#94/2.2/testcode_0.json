{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). The sub-expression (void)cfg is evaluated but has no side effects; removing that evaluation (or replacing the macro with 0) would not change program behaviour. Thus the (void)cfg operation is executed yet redundant (dead code) and violates MISRA C 2023 Rule 2.2. For example, in lfs_mkdir the expression sets err to 0 and the cast-to-void has no effect on observable behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/942.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n/*\n * Probe logging helper - appends timestamped messages to /tmp/logs/942.txt.\n * Kept static so it does not alter external linkage.\n */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/942.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)gmtime_r(&t, &tm_buf);\n\n    pid_t pid = getpid();\n    fprintf(f, \"[%04d-%02d-%02dT%02d:%02d:%02dZ] pid=%d: \",\n        tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n        tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec,\n        (int)pid);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified lfs_mkdir with lightweight probes that log control flow and\n * state to /tmp/logs/942.txt. The original logic and ordering is\n * preserved: LFS_LOCK is called first and its result is checked as\n * before. The probes only append logs and do not change behavior.\n */\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    /* Preserve original assignment order */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the immediate outcome of the lock operation and relevant state.\n     * This provides evidence for the reported scenario: the lock returned\n     * a value (typically 0), while the cast-to-void inside the macro does\n     * not produce observable side-effects. We record the cfg pointer and\n     * the returned err to reproduce/control the scenario.\n     */\n    lfs_probe_log(\"lfs_mkdir ENTER: lfs=%p, cfg=%p, path=\\\"%s\\\", LFS_LOCK_return=%d\",\n        (void*)lfs,\n        (void*)(lfs ? lfs->cfg : NULL),\n        (path ? path : \"(null)\"),\n        err);\n\n    if (err) {\n        lfs_probe_log(\"lfs_mkdir EARLY RETURN: err=%d (lock failed)\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    lfs_probe_log(\"lfs_mkdir AFTER lfs_mkdir_: err=%d, cfg=%p\",\n        err, (void*)(lfs ? lfs->cfg : NULL));\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"lfs_mkdir EXIT: unlocked cfg=%p, returning %d\",\n        (void*)(lfs ? lfs->cfg : NULL), err);\n\n    return err;\n}\n"
}