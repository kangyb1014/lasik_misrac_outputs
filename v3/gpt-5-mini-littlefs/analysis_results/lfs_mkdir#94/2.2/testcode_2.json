{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as an empty replacement (#define LFS_TRACE(__VA_ARGS__)), so the statement LFS_TRACE(\"lfs_mkdir -> %d\", err); expands to a null statement (';'). That null statement is executed but has no effect, and removing it would not change program behaviour. Therefore this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/942.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Minimal opaque type so this file is self-contained for compilation. */\ntypedef struct lfs { void *cfg; } lfs_t;\n\n/* Probe logger: append human-readable trace info to /tmp/logs/942.txt. */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/942.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/*\n * Provide minimal implementations of LFS_LOCK/LFS_UNLOCK and lfs_mkdir_\n * so this translation unit is compilable and usable for logging tests.\n * These are stubs that preserve the control flow of the original code.\n */\nint LFS_LOCK(void *cfg) {\n    probe_log(\"LFS_LOCK(cfg=%p) called\", cfg);\n    /* Return 0 to indicate success in this test harness. */\n    return 0;\n}\n\nvoid LFS_UNLOCK(void *cfg) {\n    probe_log(\"LFS_UNLOCK(cfg=%p) called\", cfg);\n}\n\n/*\n * In many projects LFS_TRACE is a macro. For this test harness we provide\n * an empty function to simulate the case where the macro expands to nothing\n * (i.e. the trace produces no observable effect). We still keep the call\n * site in the code so that the statement is executed (but produces no log\n * output by itself). The probe_log calls around it capture the behavior and\n * state for analysis.\n */\nvoid LFS_TRACE(const char *fmt, ...) {\n    (void)fmt; /* intentionally no-op to simulate empty macro replacement */\n}\n\n/* Minimal stub of the internal mkdir implementation used by lfs_mkdir. */\nint lfs_mkdir_(lfs_t *lfs, const char *path) {\n    probe_log(\"lfs_mkdir_ invoked with lfs=%p, path=\\\"%s\\\"\", (void*)lfs, (path ? path : \"(null)\"));\n    /* Simulate success (0) for the purposes of this probe. */\n    return 0;\n}\n\n/* Modified lfs_mkdir with inserted probe logging that preserves original logic. */\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"lfs_mkdir: after LFS_LOCK -> err=%d\", err);\n    if (err) {\n        probe_log(\"lfs_mkdir: early return due to lock error=%d\", err);\n        return err;\n    }\n\n    /* Original trace call left in place. */\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n    /* Additional probe immediately after entry to capture parameters. */\n    probe_log(\"lfs_mkdir: entry lfs=%p path=\\\"%s\\\"\", (void*)lfs, (path ? path : \"(null)\"));\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Original trace call left in place; in projects this may be an empty macro\n       and thus produce no effect. Our probes capture state regardless. */\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    /* Probe the value returned by the internal implementation. */\n    probe_log(\"lfs_mkdir: lfs_mkdir_ returned %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"lfs_mkdir: after LFS_UNLOCK, returning %d\", err);\n    return err;\n}\n"
}