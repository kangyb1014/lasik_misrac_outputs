{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg, 0), so LFS_LOCK(lfs->cfg) always yields 0. Therefore err is always 0 and the conditional block if (err) { return err; } can never alter program behaviour. The runtime evaluation of the if-condition is executed but removing the entire if-statement would not change behaviour in this project configuration, so this constitutes dead (redundant) code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/942.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/*\n * Probe logging helper that appends a single-line entry to /tmp/logs/942.txt.\n * Attempts to create the directory /tmp/logs if it does not exist.\n * Keeps behavior non-intrusive: failure to write logs does not change lfs_mkdir behavior.\n */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/942.txt\", \"a\");\n    if (f == NULL) {\n        /* Try to create the directory and reopen. Ignore errors if creation fails. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/942.txt\", \"a\");\n    }\n    if (f == NULL) {\n        /* Give up silently so that logging never changes program flow. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log entry with lock result and input state. */\n    lfs_log_probe(\"lfs_mkdir ENTER: lfs=%p path=\\\"%s\\\" LFS_LOCK_result=%d\",\n                  (void*)lfs, (path != NULL) ? path : \"(null)\", err);\n\n    if (err) {\n        /* Probe: log that we are returning early due to lock error. */\n        lfs_log_probe(\"lfs_mkdir EARLY RETURN: LFS_LOCK returned err=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Probe: log result from underlying implementation. */\n    lfs_log_probe(\"lfs_mkdir: lfs_mkdir_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: log unlock and final return value. */\n    lfs_log_probe(\"lfs_mkdir EXIT: LFS_UNLOCK called, returning %d\", err);\n    return err;\n}\n"
}