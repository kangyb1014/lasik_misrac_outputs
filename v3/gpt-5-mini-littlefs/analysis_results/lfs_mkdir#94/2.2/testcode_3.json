{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as empty (#define LFS_TRACE(__VA_ARGS__) ), so the call LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path); expands to an empty (null) statement. This is an executed no-op whose removal would not affect program behaviour, i.e. dead code when tracing is disabled.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/942.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper that appends a formatted message to /tmp/logs/942.txt.\n   Keeps the original logic unchanged and simply records control flow and\n   relevant state so other agents can observe that the LFS_TRACE calls\n   are reached but may be no-ops when tracing is disabled. */\nstatic void lfs_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/942.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and lock result */\n    lfs_log_printf(\"lfs_mkdir: enter - lfs=%p, path=\\\"%s\\\", lock_err=%d\", (void*)lfs, path ? path : \"(null)\", err);\n\n    if (err) {\n        lfs_log_printf(\"lfs_mkdir: early return due to lock error=%d\", err);\n        return err;\n    }\n\n    /* Record that we are about to call LFS_TRACE at the entry point. This\n       allows observers to see that the location is reached even if the\n       LFS_TRACE macro expands to nothing. */\n    lfs_log_printf(\"lfs_mkdir: about to execute entry LFS_TRACE with lfs=%p, path=\\\"%s\\\"\", (void*)lfs, path ? path : \"(null)\");\n\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    lfs_log_printf(\"lfs_mkdir: returned from entry LFS_TRACE (may be no-op when tracing disabled)\");\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Log result from internal implementation */\n    lfs_log_printf(\"lfs_mkdir: lfs_mkdir_ returned err=%d\", err);\n\n    /* Record that we are about to call the exit LFS_TRACE. This shows the\n       control flow reaches the trace point even if the macro is empty. */\n    lfs_log_printf(\"lfs_mkdir: about to execute exit LFS_TRACE with err=%d\", err);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n\n    lfs_log_printf(\"lfs_mkdir: returned from exit LFS_TRACE (may be no-op when tracing disabled)\");\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_printf(\"lfs_mkdir: unlocked and returning err=%d\", err);\n    return err;\n}\n"
}