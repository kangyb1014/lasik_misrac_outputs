{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member is declared as uint8_t *buffer; if this pointer is only used for reading the lookahead bitmap (for example it points to a static or configuration-provided buffer, or data from flash that is not written), then it should be declared const uint8_t *buffer. In that (likely) case the current declaration violates MISRA C 2023 Rule 8.13. (If the code actually writes through buffer, then the non-const declaration is appropriate and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/943.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n\n/*\n * Probe/helper function to log control flow and some state to\n * /tmp/logs/943.txt. This preserves the original logic of\n * lfs_mkdir; it only appends diagnostic logs for reproducing\n * the violation scenario described.\n */\nstatic void lfs_mkdir_log_probe(const char *stage, lfs_t *lfs, const char *path, int err) {\n    FILE *f = fopen(\"/tmp/logs/943.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"--- lfs_mkdir probe: %s ---\\n\", stage);\n    fprintf(f, \"time=%ld\\n\", (long)t);\n    fprintf(f, \"lfs=%p, path=\\\"%s\\\", err=%d\\n\",\n            (void*)lfs, path ? path : \"(null)\", err);\n\n    /* Log cfg pointer (used by LFS_LOCK/LFS_UNLOCK in original code). */\n    if (lfs != NULL) {\n        /* Avoid dereferencing deep unknown fields; only print cfg pointer and a small safe byte dump. */\n        void *cfg_ptr = (void*)lfs->cfg;\n        fprintf(f, \"lfs->cfg=%p\\n\", cfg_ptr);\n\n        if (cfg_ptr != NULL) {\n            const unsigned char *p = (const unsigned char *)cfg_ptr;\n            /* Dump first 64 bytes of the config area as hex for offline inspection. */\n            fprintf(f, \"cfg dump (first 64 bytes):\");\n            for (size_t i = 0u; i < 64u; i++) {\n                /* Print each byte in hex. This is a conservative read; it assumes cfg_ptr is valid. */\n                fprintf(f, \" %02X\", (unsigned int)p[i]);\n            }\n            fprintf(f, \"\\n\");\n        }\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    /* Probe: entry */\n    lfs_mkdir_log_probe(\"entry\", lfs, path, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Probe: lock failed */\n        lfs_mkdir_log_probe(\"lock_failed\", lfs, path, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Probe: before calling internal implementation */\n    lfs_mkdir_log_probe(\"before_lfs_mkdir_\", lfs, path, 0);\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Probe: after internal implementation, record returned error */\n    lfs_mkdir_log_probe(\"after_lfs_mkdir_\", lfs, path, err);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: exit */\n    lfs_mkdir_log_probe(\"exit\", lfs, path, err);\n\n    return err;\n}\n"
}