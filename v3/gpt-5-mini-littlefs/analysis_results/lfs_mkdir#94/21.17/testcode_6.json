{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strspn(name, \"/\") where name is derived from the user-supplied path argument (lfs_mkdir -> lfs_mkdir_ -> lfs_dir_find) without any explicit guarantee in this function that the buffer is NUL-terminated or that a terminator exists within the bounds of the object. If the caller supplies a char array that is not NUL-terminated (or the pointer points near the end of an object with no NUL within bounds), strspn may scan past the end of the object and perform out-of-bounds reads.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/949.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe logging helper for lfs_mkdir. Writes control-flow and state info to /tmp/logs/949.txt.\n   This helper tries to preserve original behavior and only appends logging. */\nstatic void lfs_mkdir_probe_log(const char *phase, void *lfs_ptr, const char *path) {\n    FILE *f = fopen(\"/tmp/logs/949.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] lfs_mkdir %s: lfs=%p, path=%p\\n\", (long)t, phase, lfs_ptr, (const void*)path);\n\n    if (path == NULL) {\n        fprintf(f, \"  path: NULL\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Safe preview: read up to max_preview bytes or until NUL. This is intended as a bounded\n       diagnostic view for reproducing scenarios where the path may not be NUL-terminated.\n       We cap at a modest length to avoid producing very large logs. */\n    const size_t max_preview = 64;\n    char preview[max_preview + 1];\n    size_t i;\n    int terminated = 0;\n\n    for (i = 0; i < max_preview; i++) {\n        char c = path[i];\n        preview[i] = (c >= 32 && c < 127) ? c : '.'; /* printables or '.' */\n        if (c == '\\0') {\n            terminated = 1;\n            break;\n        }\n    }\n    if (i == max_preview) {\n        preview[max_preview] = '\\0';\n    } else {\n        preview[i] = '\\0';\n    }\n\n    fprintf(f, \"  path_preview=\\\"%s\\\"\\n\", preview);\n    fprintf(f, \"  preview_max=%zu, nul_found_in_preview=%d\\n\", max_preview, terminated);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_mkdir with probes. Preserves original logic and calls. */\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Original trace preserved. */\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Probe before calling into the internal function to capture incoming state. */\n    lfs_mkdir_probe_log(\"entry\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    /* Probe after returning from internal function to capture result and any state. */\n    lfs_mkdir_probe_log(\"exit\", (void*)lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}