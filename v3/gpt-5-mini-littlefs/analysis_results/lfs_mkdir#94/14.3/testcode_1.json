{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'err' is initialized from the macro LFS_LOCK(lfs->cfg), which expands to ((void)cfg,0) and thus always yields 0. The subsequent test if (err) is therefore invariant (always false) at that point. This violates MISRA C 2023 Rule 14.3 (controlling expressions shall not be invariant). The provided exceptions do not apply (it's not an intentionally infinite loop or the permitted do-while constant case).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/945.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mkdir:\n```c\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper: append human-readable logs to /tmp/logs/945.txt.\n * Designed to be lightweight and not change program logic.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/945.txt\", \"a\");\n    if (f != NULL) {\n        va_list ap;\n        va_start(ap, fmt);\n        (void)vfprintf(f, fmt, ap);\n        va_end(ap);\n        (void)fprintf(f, \"\\n\");\n        (void)fclose(f);\n    }\n}\n\nint lfs_mkdir(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Capture control-flow and state immediately after attempting the lock. */\n    {\n        void *cfg_ptr = (void*)lfs->cfg;\n        const char *path_str = (path != NULL) ? path : \"(null)\";\n        probe_log(\"ENTER lfs_mkdir: lfs=%p, cfg=%p, path=\\\"%s\\\", lock_ret=%d\",\n                  (void*)lfs, cfg_ptr, path_str, err);\n    }\n\n    if (err) {\n        probe_log(\"lfs_mkdir: early return due to lock error: %d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_mkdir(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_mkdir_(lfs, path);\n\n    probe_log(\"lfs_mkdir: lfs_mkdir_ returned %d\", err);\n    LFS_TRACE(\"lfs_mkdir -> %d\", err);\n\n    probe_log(\"lfs_mkdir: calling LFS_UNLOCK on cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"lfs_mkdir: exit returning %d\", err);\n    return err;\n}\n"
}