{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nLFS_ASSERT is defined as assert(test). The assertion only reads pcache->block and lfs->block_count (no side effects) and is used to check an invariant already enforced elsewhere. When built with NDEBUG (the typical release configuration), assert() is a no-op, so this statement is compiled away; removing it would not affect program behaviour. Therefore this assertion constitutes dead code (redundant/compile-time-removable check).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_prog code that contains useful probe functions that print useful logs to a file \"/tmp/logs/62.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_prog as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_prog:\n```c\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            // already fits in pcache?\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            if (pcache->size == lfs->cfg->cache_size) {\n                // eagerly flush out pcache if we fill up\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                if (err) {\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        // pcache must have been flushed, either by programming and\n        // entire block or manually flushing the pcache\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        // prepare pcache, first condition can no longer fail\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_prog code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: appends formatted messages to /tmp/logs/62.txt */\nstatic void lfs_probe_printf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/62.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n\n    /* Log entry and key invariant values before assertions */\n    lfs_probe_printf(\"ENTER lfs_bd_prog: lfs=%p pcache=%p rcache=%p validate=%d\",\n            (void*)lfs, (void*)pcache, (void*)rcache, (int)validate);\n    lfs_probe_printf(\"params: block=%llu off=%lld size=%zu\",\n            (unsigned long long)block, (long long)off, (size_t)size);\n    if (lfs && lfs->cfg) {\n        lfs_probe_printf(\"cfg: block_size=%llu cache_size=%llu prog_size=%llu\",\n                (unsigned long long)lfs->cfg->block_size,\n                (unsigned long long)lfs->cfg->cache_size,\n                (unsigned long long)lfs->cfg->prog_size);\n    }\n    if (lfs) {\n        lfs_probe_printf(\"lfs: block_count=%llu\", (unsigned long long)lfs->block_count);\n    }\n    if (pcache) {\n        lfs_probe_printf(\"pcache: block=%llu off=%lld size=%zu\",\n                (unsigned long long)pcache->block,\n                (long long)pcache->off,\n                (size_t)pcache->size);\n    }\n\n    /* Record the boolean results of the original assertion checks so they\n       are visible even when LFS_ASSERT is compiled out (NDEBUG). */\n    {\n        int assert1 = (block == LFS_BLOCK_INLINE || block < lfs->block_count) ? 1 : 0;\n        lfs_probe_printf(\"ASSERT1_CHECK: (block == LFS_BLOCK_INLINE || block < lfs->block_count) => %d\",\n                assert1);\n    }\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n\n    {\n        int assert2 = (off + size <= lfs->cfg->block_size) ? 1 : 0;\n        lfs_probe_printf(\"ASSERT2_CHECK: (off + size <= cfg->block_size) => %d (off=%lld size=%zu block_size=%llu)\",\n                assert2, (long long)off, (size_t)size, (unsigned long long)lfs->cfg->block_size);\n    }\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            /* already fits in pcache? */\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n\n            lfs_probe_printf(\"PCACHE_HIT: block=%llu off=%lld pcache->block=%llu pcache->off=%lld pcache->size=%zu diff=%llu\",\n                    (unsigned long long)block, (long long)off,\n                    (unsigned long long)pcache->block, (long long)pcache->off,\n                    (size_t)pcache->size, (unsigned long long)diff);\n\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            lfs_probe_printf(\"PCACHE_UPDATED: pcache->size=%zu pcache->off=%lld\",\n                    (size_t)pcache->size, (long long)pcache->off);\n\n            if (pcache->size == lfs->cfg->cache_size) {\n                /* eagerly flush out pcache if we fill up */\n                lfs_probe_printf(\"PCACHE_FULL: triggering lfs_bd_flush (block=%llu)\", (unsigned long long)pcache->block);\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                lfs_probe_printf(\"lfs_bd_flush returned %d\", err);\n                if (err) {\n                    lfs_probe_printf(\"EXIT lfs_bd_prog: flush error %d\", err);\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        /* pcache must have been flushed, either by programming and\n         * entire block or manually flushing the pcache */\n        {\n            int assert3 = (pcache->block == LFS_BLOCK_NULL) ? 1 : 0;\n            lfs_probe_printf(\"ASSERT3_CHECK: (pcache->block == LFS_BLOCK_NULL) => %d (pcache->block=%llu)\",\n                    assert3, (unsigned long long)pcache->block);\n        }\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        /* prepare pcache, first condition can no longer fail */\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n\n        lfs_probe_printf(\"PCACHE_PREPARED: pcache->block=%llu pcache->off=%lld pcache->size=%zu\",\n                (unsigned long long)pcache->block, (long long)pcache->off, (size_t)pcache->size);\n    }\n\n    lfs_probe_printf(\"EXIT lfs_bd_prog: success\");\n    return 0;\n}\n"
}