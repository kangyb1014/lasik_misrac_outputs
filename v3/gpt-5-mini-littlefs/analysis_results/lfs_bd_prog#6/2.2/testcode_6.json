{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)lfs;' in lfs_cache_drop is an executed expression statement with no effect; removing it does not change program behaviour (it only silences an 'unused parameter' warning). Therefore it constitutes dead code under MISRA C 2023 Rule 2.2. Replace by omitting the parameter name in the function definition or use an approved mechanism to document unused parameters.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_prog code that contains useful probe functions that print useful logs to a file \"/tmp/logs/62.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_prog as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_prog:\n```c\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            // already fits in pcache?\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            if (pcache->size == lfs->cfg->cache_size) {\n                // eagerly flush out pcache if we fill up\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                if (err) {\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        // pcache must have been flushed, either by programming and\n        // entire block or manually flushing the pcache\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        // prepare pcache, first condition can no longer fail\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_prog code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper. Appends a single line to /tmp/logs/62.txt. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/62.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n\n    /* Log entry and key parameters/state to help reproduce control flow. */\n    lfs_probe_log(\"ENTER lfs_bd_prog: block=%u off=%lld size=%zu validate=%d pcache.block=%u pcache.off=%lld pcache.size=%zu\",\n            (unsigned)block, (long long)off, (size_t)size, (int)validate,\n            (unsigned)pcache->block, (long long)pcache->off, (size_t)pcache->size);\n\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            /* already fits in pcache? */\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n\n            lfs_probe_log(\"pcache HIT: block=%u off=%lld pcache.off=%lld pcache.size=%zu diff=%zu\",\n                    (unsigned)block, (long long)off, (long long)pcache->off, (size_t)pcache->size, (size_t)diff);\n\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            lfs_probe_log(\"pcache UPDATED: new off=%lld remaining size=%zu pcache.size=%zu\",\n                    (long long)off, (size_t)size, (size_t)pcache->size);\n\n            if (pcache->size == lfs->cfg->cache_size) {\n                /* eagerly flush out pcache if we fill up */\n                lfs_probe_log(\"pcache FULL: invoking lfs_bd_flush\");\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                lfs_probe_log(\"lfs_bd_flush returned %d\", err);\n                if (err) {\n                    lfs_probe_log(\"EXIT lfs_bd_prog (err): %d\", err);\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        /* pcache must have been flushed, either by programming and\n         * entire block or manually flushing the pcache */\n        lfs_probe_log(\"pcache MISS: expecting pcache.block == LFS_BLOCK_NULL (currently %u)\", (unsigned)pcache->block);\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        /* prepare pcache, first condition can no longer fail */\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n\n        lfs_probe_log(\"pcache PREPARED: pcache.block=%u pcache.off=%lld pcache.size=%zu\",\n                (unsigned)pcache->block, (long long)pcache->off, (size_t)pcache->size);\n    }\n\n    lfs_probe_log(\"EXIT lfs_bd_prog: success\");\n    return 0;\n}\n"
}