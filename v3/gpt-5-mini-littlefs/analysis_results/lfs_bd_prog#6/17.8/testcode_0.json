{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'off' (lfs_off_t off) is modified by the statement 'off += diff;' inside lfs_bd_prog. MISRA C 2023 Rule 17.8 forbids modifying function parameters (the rule only permits modifying the object referred to by a pointer parameter, not scalar parameters themselves).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_prog code that contains useful probe functions that print useful logs to a file \"/tmp/logs/67.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_prog as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_prog:\n```c\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            // already fits in pcache?\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            if (pcache->size == lfs->cfg->cache_size) {\n                // eagerly flush out pcache if we fill up\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                if (err) {\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        // pcache must have been flushed, either by programming and\n        // entire block or manually flushing the pcache\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        // prepare pcache, first condition can no longer fail\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_prog code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logger to capture control flow and state. Appends to /tmp/logs/67.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/67.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n\n    /* Log entry state */\n    lfs_log_probe(\"ENTER lfs_bd_prog: block=%lld, off=%lld, size=%llu, validate=%d, pcache=%p, rcache=%p, buffer=%p\",\n            (long long)block, (long long)off, (unsigned long long)size, (int)validate,\n            (void*)pcache, (void*)rcache, buffer);\n\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            /* already fits in pcache? */\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n\n            lfs_log_probe(\"pcache branch: block=%lld, pcache->block=%lld, off(before)=%lld, pcache->off=%lld, size(before)=%llu, diff=%llu, data_ptr=%p\",\n                    (long long)block, (long long)pcache->block, (long long)off, (long long)pcache->off,\n                    (unsigned long long)size, (unsigned long long)diff, (const void*)data);\n\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            data += diff;\n\n            /* Log just before modifying the parameter 'off' to capture the violation evidence */\n            lfs_log_probe(\"about to modify parameter 'off': off(before)=%lld, diff=%llu\", (long long)off, (unsigned long long)diff);\n\n            off += diff; /* <- modification of function parameter (violates MISRA C 2023 Rule 17.8 for non-pointer parameters) */\n\n            /* Log immediately after modification */\n            lfs_log_probe(\"after modifying 'off': off(after)=%lld\", (long long)off);\n\n            size -= diff;\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            lfs_log_probe(\"pcache->size updated: pcache->size=%llu, pcache->off=%lld\", (unsigned long long)pcache->size, (long long)pcache->off);\n\n            if (pcache->size == lfs->cfg->cache_size) {\n                /* eagerly flush out pcache if we fill up */\n                lfs_log_probe(\"pcache full, calling lfs_bd_flush: pcache->block=%lld, pcache->off=%lld, pcache->size=%llu\",\n                        (long long)pcache->block, (long long)pcache->off, (unsigned long long)pcache->size);\n\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                lfs_log_probe(\"lfs_bd_flush returned err=%d\", err);\n                if (err) {\n                    lfs_log_probe(\"EXIT lfs_bd_prog with error: %d\", err);\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        /* pcache must have been flushed, either by programming and\n           entire block or manually flushing the pcache */\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        /* prepare pcache, first condition can no longer fail */\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n\n        lfs_log_probe(\"prepared pcache: pcache->block=%lld, pcache->off=%lld, pcache->size=%llu (after prepare)\",\n                (long long)pcache->block, (long long)pcache->off, (unsigned long long)pcache->size);\n    }\n\n    lfs_log_probe(\"EXIT lfs_bd_prog success\");\n    return 0;\n}\n"
}