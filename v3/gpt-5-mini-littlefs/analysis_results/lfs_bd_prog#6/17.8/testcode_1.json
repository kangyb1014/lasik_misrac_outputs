{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_prog the value of the parameter 'size' is modified by the statement 'size -= diff;'. This directly violates MISRA C 2023 Rule 17.8 (a function parameter shall not be modified). Note: the parameter 'off' is also modified elsewhere (e.g. 'off += diff;'), which is an additional violation of the same rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_prog code that contains useful probe functions that print useful logs to a file \"/tmp/logs/67.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_prog as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_prog:\n```c\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            // already fits in pcache?\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            data += diff;\n            off += diff;\n            size -= diff;\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            if (pcache->size == lfs->cfg->cache_size) {\n                // eagerly flush out pcache if we fill up\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                if (err) {\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        // pcache must have been flushed, either by programming and\n        // entire block or manually flushing the pcache\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        // prepare pcache, first condition can no longer fail\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_prog code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging utilities to capture control flow and state to /tmp/logs/67.txt */\nstatic void lfs_ensure_log_dir(void) {\n    /* Attempt to create /tmp/logs directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void lfs_logf(const char *fmt, ...) {\n    lfs_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/67.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void lfs_log_entry(const char *stage, void *lfs_ptr, void *pcache_ptr, void *rcache_ptr,\n        unsigned long long block, unsigned long long off, unsigned long long size, const void *buffer) {\n    lfs_logf(\"[%s] lfs=%p pcache=%p rcache=%p block=%llu off=%llu size=%llu buffer=%p\",\n            stage, lfs_ptr, pcache_ptr, rcache_ptr, block, off, size, buffer);\n}\n\n/* Original function with inserted probes */\nstatic int lfs_bd_prog(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n\n    /* Log entry with initial parameter values */\n    lfs_log_entry(\"ENTRY\", (void*)lfs, (void*)pcache, (void*)rcache,\n            (unsigned long long)block, (unsigned long long)off, (unsigned long long)size, buffer);\n\n    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);\n    LFS_ASSERT(off + size <= lfs->cfg->block_size);\n\n    while (size > 0) {\n        /* Log loop iteration start */\n        lfs_log_entry(\"LOOP_START\", (void*)lfs, (void*)pcache, (void*)rcache,\n                (unsigned long long)block, (unsigned long long)off, (unsigned long long)size, data);\n\n        if (block == pcache->block &&\n                off >= pcache->off &&\n                off < pcache->off + lfs->cfg->cache_size) {\n            /* already fits in pcache? */\n            lfs_size_t diff = lfs_min(size,\n                    lfs->cfg->cache_size - (off-pcache->off));\n\n            /* Log before memcpy and parameter modifications */\n            lfs_logf(\"BRANCH_PCACHE_MATCH diff=%llu pcache->block=%llu pcache->off=%llu pcache->size=%llu\",\n                    (unsigned long long)diff,\n                    (unsigned long long)pcache->block,\n                    (unsigned long long)pcache->off,\n                    (unsigned long long)pcache->size);\n\n            memcpy(&pcache->buffer[off-pcache->off], data, diff);\n\n            /* Log values right before mutating parameters */\n            lfs_logf(\"BEFORE_MUTATE off=%llu size=%llu data_ptr=%p\",\n                    (unsigned long long)off, (unsigned long long)size, (const void*)data);\n\n            data += diff;\n            off += diff; /* parameter modified: record value after change */\n            size -= diff; /* parameter modified: record value after change */\n\n            /* Log after mutating parameters */\n            lfs_logf(\"AFTER_MUTATE off=%llu size=%llu data_ptr=%p diff=%llu\",\n                    (unsigned long long)off, (unsigned long long)size, (const void*)data, (unsigned long long)diff);\n\n            pcache->size = lfs_max(pcache->size, off - pcache->off);\n            if (pcache->size == lfs->cfg->cache_size) {\n                /* eagerly flush out pcache if we fill up */\n                lfs_logf(\"FLUSH_EAGER pcache->size==cache_size pcache->block=%llu pcache->off=%llu\",\n                        (unsigned long long)pcache->block, (unsigned long long)pcache->off);\n                int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n                /* Log result of flush */\n                lfs_logf(\"FLUSH_RETURN err=%d\", err);\n                if (err) {\n                    lfs_logf(\"RETURN_ERR err=%d off=%llu size=%llu\", err, (unsigned long long)off, (unsigned long long)size);\n                    return err;\n                }\n            }\n\n            continue;\n        }\n\n        /* pcache must have been flushed, either by programming and\n           entire block or manually flushing the pcache */\n        lfs_logf(\"ASSERT_PCACHE_NULL_EXPECTED pcache->block=%llu\",\n                (unsigned long long)pcache->block);\n        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);\n\n        /* prepare pcache, first condition can no longer fail */\n        pcache->block = block;\n        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n        pcache->size = 0;\n\n        /* Log after preparing pcache */\n        lfs_logf(\"PREPARE_PCACHE set pcache->block=%llu pcache->off=%llu pcache->size=%llu\",\n                (unsigned long long)pcache->block, (unsigned long long)pcache->off, (unsigned long long)pcache->size);\n    }\n\n    lfs_log_entry(\"EXIT_SUCCESS\", (void*)lfs, (void*)pcache, (void*)rcache,\n            (unsigned long long)block, (unsigned long long)off, (unsigned long long)size, data);\n\n    return 0;\n}\n"
}