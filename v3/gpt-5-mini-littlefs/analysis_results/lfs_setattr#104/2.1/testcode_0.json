{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg, 0), so any call int err = LFS_LOCK(lfs->cfg); always yields err == 0. Therefore the subsequent conditional if (err) { return err; } can never be true and its body is unreachable. This constitutes unreachable code (violating MISRA C 2023 Rule 2.1).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1041.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper. Writes compact trace records to /tmp/logs/1041.txt.\n * Keeps the original behavior of lfs_setattr intact; only appends logging side-effects.\n */\nstatic void lfs_probe_log(const char *tag, void *lfs_ptr, const void *cfg_ptr,\n        const char *path, uint8_t type, const void *buffer, uint32_t size, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/1041.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Defensive prints for possibly NULL strings */\n    const char *safe_path = (path != NULL) ? path : \"(null)\";\n\n    fprintf(f, \"[%s] lfs=%p cfg=%p path=\\\"%s\\\" type=%\" PRIu8 \" buffer=%p size=%\" PRIu32 \" err=%d\\n\",\n            tag, lfs_ptr, cfg_ptr, safe_path, type, buffer, (uint32_t)size, err);\n\n    fclose(f);\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    /* Preserve original logic: call LFS_LOCK and capture its return in err. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of the lock operation and relevant state to reproduce the scenario.\n     * This provides evidence if the lock macro always yields 0 (making the following\n     * conditional branch unreachable).\n     */\n    lfs_probe_log(\"after_lock\", (void*)lfs, (void*)lfs->cfg, path, type, buffer, (uint32_t)size, err);\n\n    if (err) {\n        /* Log that the error branch is taken before returning. */\n        lfs_probe_log(\"early_return_after_lock\", (void*)lfs, (void*)lfs->cfg, path, type, buffer, (uint32_t)size, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    /* Log result of the internal call before unlocking. */\n    lfs_probe_log(\"after_setattr_\", (void*)lfs, (void*)lfs->cfg, path, type, buffer, (uint32_t)size, err);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log after unlock showing returned error code. */\n    lfs_probe_log(\"final_return\", (void*)lfs, (void*)lfs->cfg, path, type, buffer, (uint32_t)size, err);\n\n    return err;\n}\n"
}