{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg). In lfs_setattr the call LFS_UNLOCK(lfs->cfg); therefore executes only the cast-to-void expression which has no effect at runtime. Removing that expression (or the macro expansion) would not change program behaviour, so this operation meets the definition of dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1042.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/* Helper probe: append formatted log lines to /tmp/logs/1042.txt. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = NULL;\n    struct stat st;\n\n    /* Ensure directory exists; ignore errors if it already does. */\n    if (stat(\"/tmp/logs\", &st) != 0) {\n        /* Try to create directory; if this fails, continue without fatal error. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n    }\n\n    f = fopen(\"/tmp/logs/1042.txt\", \"a\");\n    if (f == NULL) {\n        /* If we cannot open the file, avoid further actions. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return from lock failure */\n        lfs_probe_log(\"lfs_setattr: LFS_LOCK failed, err=%d, lfs=%p, path=\\\"%s\\\"\", err, (void*)lfs, path ? path : \"(null)\");\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Log entry and key state before calling internal setter */\n    lfs_probe_log(\"lfs_setattr entry: lfs=%p, path=\\\"%s\\\", type=%u, buffer=%p, size=%lu, cfg=%p\",\n            (void*)lfs, path ? path : \"(null)\", (unsigned)type, buffer, (unsigned long)size, (void*)lfs->cfg);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n\n    /* Log result of internal call and state immediately before the unlock call. */\n    lfs_probe_log(\"lfs_setattr result: err=%d, lfs=%p, cfg(before_unlock)=%p\",\n            err, (void*)lfs, (void*)lfs->cfg);\n\n    /* Probe surrounding the LFS_UNLOCK call so observers can see that the\n       operation has no observable effect (it expands to ((void)cfg)). */\n    lfs_probe_log(\"lfs_setattr: about to call LFS_UNLOCK with cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_setattr: returned from LFS_UNLOCK, cfg=%p\", (void*)lfs->cfg);\n\n    return err;\n}\n"
}