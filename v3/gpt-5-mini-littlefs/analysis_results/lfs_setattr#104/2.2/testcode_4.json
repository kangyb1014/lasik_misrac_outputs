{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided build configuration LFS_LOCK is defined as ((void)cfg,0), so LFS_LOCK(lfs->cfg) always yields 0. The statement int err = LFS_LOCK(lfs->cfg); (and the subsequent if (err) { return err; } check) is executed but has no effect \u2014 removing the call and the check would not change program behaviour. Therefore this is dead code in the given project configuration and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1042.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n\n/*\n * Probe helper: append control-flow and state information to /tmp/logs/1042.txt\n * Keeps the original logic of lfs_setattr intact; only emits diagnostics.\n */\nstatic void lfs_probe_log(const char *event, lfs_t *lfs, const char *path,\n        unsigned int type, const void *buffer, unsigned long size, int err) {\n    FILE *f = fopen(\"/tmp/logs/1042.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log a compact record: event, lfs pointer, path, type, buffer, size, err */\n    fprintf(f, \"%s: lfs=%p, path=\\\"%s\\\", type=%u, buffer=%p, size=%lu, err=%d\\n\",\n            event, (void*)lfs, (path ? path : \"(null)\"), type, buffer, size, err);\n    fclose(f);\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    /* Log entry with unknown err (-1) before taking the lock */\n    lfs_probe_log(\"enter_lfs_setattr_before_lock\", lfs, path, (unsigned int)type,\n            buffer, (unsigned long)size, -1);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of LFS_LOCK to show whether it produced a non-zero error */\n    lfs_probe_log(\"after_LFS_LOCK\", lfs, path, (unsigned int)type,\n            buffer, (unsigned long)size, err);\n\n    if (err) {\n        /* Log the early return reason */\n        lfs_probe_log(\"return_from_lfs_setattr_lock_failed\", lfs, path,\n                (unsigned int)type, buffer, (unsigned long)size, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Log immediately before delegating to lfs_setattr_ */\n    lfs_probe_log(\"before_lfs_setattr_\", lfs, path, (unsigned int)type,\n            buffer, (unsigned long)size, 0);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    /* Log the result of the delegated call */\n    lfs_probe_log(\"after_lfs_setattr_\", lfs, path, (unsigned int)type,\n            buffer, (unsigned long)size, err);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log right before returning */\n    lfs_probe_log(\"exit_lfs_setattr\", lfs, path, (unsigned int)type,\n            buffer, (unsigned long)size, err);\n\n    return err;\n}\n"
}