{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_file_flushedread the non-pointer parameter 'size' is reassigned on the line: size = lfs_min(size, file->ctz.size - file->pos); \u2014 this modifies a function parameter (a scalar), which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_flushedread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/497.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_flushedread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_flushedread:\n```c\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if (file->pos >= file->ctz.size) {\n        // eof if past end\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n        }\n\n        // read as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n    }\n\n    return size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_flushedread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper that appends to /tmp/logs/497.txt */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/497.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    /* Log entry state */\n    probe_log(\"ENTER lfs_file_flushedread: this=%p file=%p buffer=%p initial_size=%llu file->pos=%llu file->ctz.size=%llu file->flags=0x%08x\",\n            (void*)lfs, (void*)file, buffer,\n            (unsigned long long)size,\n            (unsigned long long)file->pos,\n            (unsigned long long)file->ctz.size,\n            (unsigned int)file->flags);\n\n    if (file->pos >= file->ctz.size) {\n        // eof if past end\n        probe_log(\"EARLY RETURN: EOF (pos=%llu >= ctz.size=%llu)\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->ctz.size);\n        return 0;\n    }\n\n    /* Log before modifying parameter 'size' */\n    probe_log(\"BEFORE reassignment: size=%llu nsize=%llu file->pos=%llu ctz.size=%llu\",\n            (unsigned long long)size, (unsigned long long)nsize,\n            (unsigned long long)file->pos, (unsigned long long)file->ctz.size);\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    /* Log after reassignment to capture the exact change that triggers the MISRA violation report */\n    probe_log(\"AFTER reassignment: size=%llu nsize=%llu file->pos=%llu ctz.size=%llu\",\n            (unsigned long long)size, (unsigned long long)nsize,\n            (unsigned long long)file->pos, (unsigned long long)file->ctz.size);\n\n    while (nsize > 0) {\n        /* Log loop iteration start */\n        probe_log(\"LOOP START: nsize=%llu pos=%llu off=%llu flags=0x%08x block=%llu data=%p\",\n                (unsigned long long)nsize,\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (unsigned int)file->flags,\n                (unsigned long long)file->block,\n                (void*)data);\n\n        // check if we need a new block\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                probe_log(\"CALL lfs_ctz_find: head=%llu size=%llu pos=%llu\",\n                        (unsigned long long)file->ctz.head,\n                        (unsigned long long)file->ctz.size,\n                        (unsigned long long)file->pos);\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    probe_log(\"ERROR lfs_ctz_find returned %d (pos=%llu off=%llu block=%llu)\",\n                            err, (unsigned long long)file->pos,\n                            (unsigned long long)file->off,\n                            (unsigned long long)file->block);\n                    return err;\n                }\n                probe_log(\"lfs_ctz_find OK: block=%llu off=%llu\",\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->off);\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n                probe_log(\"INLINE branch: block=INLINE off=pos=%llu\",\n                        (unsigned long long)file->off);\n            }\n\n            file->flags |= LFS_F_READING;\n            probe_log(\"Set LFS_F_READING: flags=0x%08x\", (unsigned int)file->flags);\n        }\n\n        // read as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        probe_log(\"READ: diff=%llu (nsize=%llu block_size=%llu off=%llu)\",\n                (unsigned long long)diff,\n                (unsigned long long)nsize,\n                (unsigned long long)lfs->cfg->block_size,\n                (unsigned long long)file->off);\n        if (file->flags & LFS_F_INLINE) {\n            probe_log(\"CALL lfs_dir_getread inline: off=%llu diff=%llu\",\n                    (unsigned long long)file->off,\n                    (unsigned long long)diff);\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                probe_log(\"ERROR lfs_dir_getread returned %d\", err);\n                return err;\n            }\n            probe_log(\"lfs_dir_getread OK: read diff=%llu\", (unsigned long long)diff);\n        } else {\n            probe_log(\"CALL lfs_bd_read: block=%llu off=%llu diff=%llu\",\n                    (unsigned long long)file->block,\n                    (unsigned long long)file->off,\n                    (unsigned long long)diff);\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                probe_log(\"ERROR lfs_bd_read returned %d\", err);\n                return err;\n            }\n            probe_log(\"lfs_bd_read OK: read diff=%llu\", (unsigned long long)diff);\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        /* Log loop iteration end state */\n        probe_log(\"LOOP END: new pos=%llu off=%llu nsize=%llu data=%p\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (unsigned long long)nsize,\n                (void*)data);\n    }\n\n    probe_log(\"EXIT lfs_file_flushedread: returning size=%llu (original param modified)\",\n            (unsigned long long)size);\n    return size;\n}\n"
}