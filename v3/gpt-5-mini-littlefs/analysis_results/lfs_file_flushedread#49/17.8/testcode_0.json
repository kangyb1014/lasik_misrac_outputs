{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code fragment modifies the function parameters 'off' and 'size' (off += diff; size -= diff;), which are parameters of lfs_dir_getread / lfs_bd_read. Modifying value parameters in-place violates MISRA C 2023 Rule 17.8. (Note: modifying the local pointer 'data' derived from the parameter 'buffer' is acceptable because the pointer parameter itself is not modified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_flushedread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/497.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_flushedread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_flushedread:\n```c\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if (file->pos >= file->ctz.size) {\n        // eof if past end\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n        }\n\n        // read as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n    }\n\n    return size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_flushedread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic void lfs_log_probe(const char *stage,\n        unsigned long long pos, unsigned long long ctz_size,\n        unsigned long long size, unsigned long long nsize,\n        unsigned long long off, unsigned long long block,\n        unsigned long long flags, unsigned long long diff, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/497.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: pos=%llu, ctz_size=%llu, size=%llu, nsize=%llu, off=%llu, block=%llu, flags=0x%llx, diff=%llu, err=%d\\n\",\n            stage, pos, ctz_size, size, nsize, off, block, flags, diff, err);\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    /* Log entry state */\n    lfs_log_probe(\"ENTRY\", (unsigned long long)file->pos,\n            (unsigned long long)file->ctz.size,\n            (unsigned long long)size, (unsigned long long)nsize,\n            (unsigned long long)file->off, (unsigned long long)file->block,\n            (unsigned long long)file->flags, 0ULL, 0);\n\n    if (file->pos >= file->ctz.size) {\n        /* eof if past end */\n        lfs_log_probe(\"EOF_RETURN\", (unsigned long long)file->pos,\n                (unsigned long long)file->ctz.size,\n                (unsigned long long)size, (unsigned long long)nsize,\n                (unsigned long long)file->off, (unsigned long long)file->block,\n                (unsigned long long)file->flags, 0ULL, 0);\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    /* Log after size adjustment */\n    lfs_log_probe(\"ADJUST_SIZE\", (unsigned long long)file->pos,\n            (unsigned long long)file->ctz.size,\n            (unsigned long long)size, (unsigned long long)nsize,\n            (unsigned long long)file->off, (unsigned long long)file->block,\n            (unsigned long long)file->flags, 0ULL, 0);\n\n    while (nsize > 0) {\n        /* check if we need a new block */\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    lfs_log_probe(\"CTZ_FIND_ERR\",\n                            (unsigned long long)file->pos,\n                            (unsigned long long)file->ctz.size,\n                            (unsigned long long)size, (unsigned long long)nsize,\n                            (unsigned long long)file->off, (unsigned long long)file->block,\n                            (unsigned long long)file->flags, 0ULL, err);\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n\n            /* Log after acquiring new block */\n            lfs_log_probe(\"NEW_BLOCK\",\n                    (unsigned long long)file->pos,\n                    (unsigned long long)file->ctz.size,\n                    (unsigned long long)size, (unsigned long long)nsize,\n                    (unsigned long long)file->off, (unsigned long long)file->block,\n                    (unsigned long long)file->flags, 0ULL, 0);\n        }\n\n        /* read as much as we can in current block */\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n\n        /* Log before read call */\n        lfs_log_probe(\"BEFORE_READ\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->ctz.size,\n                (unsigned long long)size, (unsigned long long)nsize,\n                (unsigned long long)file->off, (unsigned long long)file->block,\n                (unsigned long long)file->flags, (unsigned long long)diff, 0);\n\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            /* Log result of lfs_dir_getread */\n            lfs_log_probe(\"AFTER_LFS_DIR_GETREAD\",\n                    (unsigned long long)file->pos,\n                    (unsigned long long)file->ctz.size,\n                    (unsigned long long)size, (unsigned long long)nsize,\n                    (unsigned long long)file->off, (unsigned long long)file->block,\n                    (unsigned long long)file->flags, (unsigned long long)diff, err);\n            if (err) {\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            /* Log result of lfs_bd_read */\n            lfs_log_probe(\"AFTER_LFS_BD_READ\",\n                    (unsigned long long)file->pos,\n                    (unsigned long long)file->ctz.size,\n                    (unsigned long long)size, (unsigned long long)nsize,\n                    (unsigned long long)file->off, (unsigned long long)file->block,\n                    (unsigned long long)file->flags, (unsigned long long)diff, err);\n            if (err) {\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        /* Log after advancing pointers and counters */\n        lfs_log_probe(\"AFTER_ADVANCE\",\n                (unsigned long long)file->pos,\n                (unsigned long long)file->ctz.size,\n                (unsigned long long)size, (unsigned long long)nsize,\n                (unsigned long long)file->off, (unsigned long long)file->block,\n                (unsigned long long)file->flags, (unsigned long long)diff, 0);\n    }\n\n    /* Log return */\n    lfs_log_probe(\"RETURN\", (unsigned long long)file->pos,\n            (unsigned long long)file->ctz.size,\n            (unsigned long long)size, 0ULL,\n            (unsigned long long)file->off, (unsigned long long)file->block,\n            (unsigned long long)file->flags, 0ULL, 0);\n\n    return size;\n}\n"
}