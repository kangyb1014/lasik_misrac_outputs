{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read (and similarly in lfs_dir_getread) the scalar parameters 'off' and 'size' are modified inside the function (e.g. 'off += diff;' and 'size -= diff;'). This assigns to function parameters, which violates MISRA C 2023 Rule 17.8. Note: the pointer parameter 'buffer' is not directly modified (a local pointer 'data' is used), but the scalar parameters are still changed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_flushedread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/497.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_flushedread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_flushedread:\n```c\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if (file->pos >= file->ctz.size) {\n        // eof if past end\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n        }\n\n        // read as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n    }\n\n    return size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_flushedread code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: write a formatted state snapshot to /tmp/logs/497.txt */\nstatic void lfs_log_probe(const char *stage, lfs_t *lfs, lfs_file_t *file,\n        lfs_size_t req_size, lfs_size_t nsize, lfs_size_t diff) {\n    FILE *f = fopen(\"/tmp/logs/497.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Cast numeric fields to unsigned long long for portable printing */\n    unsigned long long pos = (unsigned long long)file->pos;\n    unsigned long long ctz_size = (unsigned long long)file->ctz.size;\n    unsigned long long block = (unsigned long long)file->block;\n    unsigned long long off = (unsigned long long)file->off;\n    unsigned long long flags = (unsigned long long)file->flags;\n    unsigned long long rsize = (unsigned long long)req_size;\n    unsigned long long nn = (unsigned long long)nsize;\n    unsigned long long d = (unsigned long long)diff;\n\n    fprintf(f, \"[%s] file=%p lfs=%p pos=%llu ctz.size=%llu file->block=%llu file->off=%llu file->flags=0x%llx req_size=%llu nsize=%llu diff=%llu\\n\",\n            stage, (void*)file, (void*)lfs, pos, ctz_size, block, off, flags, rsize, nn, d);\n\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    /* Log entry state */\n    lfs_log_probe(\"enter\", lfs, file, size, nsize, 0);\n\n    if (file->pos >= file->ctz.size) {\n        /* eof if past end */\n        lfs_log_probe(\"eof\", lfs, file, size, nsize, 0);\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    /* Log after size adjustment */\n    lfs_log_probe(\"after_size_adjust\", lfs, file, size, nsize, 0);\n\n    while (nsize > 0) {\n        /* check if we need a new block */\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                lfs_log_probe(\"before_ctz_find\", lfs, file, size, nsize, 0);\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                lfs_log_probe(\"after_ctz_find\", lfs, file, size, nsize, 0);\n                if (err) {\n                    lfs_log_probe(\"ctz_find_err\", lfs, file, size, nsize, 0);\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n                lfs_log_probe(\"inline_branch\", lfs, file, size, nsize, 0);\n            }\n\n            file->flags |= LFS_F_READING;\n        }\n\n        /* read as much as we can in current block */\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n\n        /* Log about to perform read, including parameters passed to subordinate reads */\n        lfs_log_probe(\"before_read_call\", lfs, file, size, nsize, diff);\n\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            lfs_log_probe(\"after_dir_getread\", lfs, file, size, nsize, diff);\n            if (err) {\n                lfs_log_probe(\"dir_getread_err\", lfs, file, size, nsize, diff);\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            lfs_log_probe(\"after_bd_read\", lfs, file, size, nsize, diff);\n            if (err) {\n                lfs_log_probe(\"bd_read_err\", lfs, file, size, nsize, diff);\n                return err;\n            }\n        }\n\n        /* Log state before updating file pointers */\n        lfs_log_probe(\"before_update_pointers\", lfs, file, size, nsize, diff);\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        /* Log state after update */\n        lfs_log_probe(\"after_update_pointers\", lfs, file, size, nsize, diff);\n    }\n\n    lfs_log_probe(\"exit\", lfs, file, size, 0, 0);\n    return size;\n}"
}