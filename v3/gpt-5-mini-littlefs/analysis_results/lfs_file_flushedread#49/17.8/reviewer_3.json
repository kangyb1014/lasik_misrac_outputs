{
  "user_message": "An agent A claimed that the following lfs_file_flushedread code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_file_flushedread.\n```c\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if (file->pos >= file->ctz.size) {\n        // eof if past end\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n        }\n\n        // read as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n    }\n\n    return size;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn lfs_ctz_find the parameter 'head' (a non-pointer parameter) is modified: its address (&head) is passed to lfs_bd_read which writes into it, and then it is assigned to with head = lfs_fromle32(head). This changes the function parameter 'head', violating MISRA C 2023 Rule 17.8.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter: file=0x7ffdf540a210 pos=0 off=0 block=0 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_ctz_find: file=0x7ffdf540a210 pos=0 off=0 block=0 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_ctz_find: file=0x7ffdf540a210 pos=0 off=0 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_new_block_setup: file=0x7ffdf540a210 pos=0 off=0 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_read: file=0x7ffdf540a210 pos=0 off=0 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_bd_read: file=0x7ffdf540a210 pos=0 off=0 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_progress: file=0x7ffdf540a210 pos=5 off=5 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nreturn_size: file=0x7ffdf540a210 pos=5 off=5 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nenter: file=0x7ffdf540a210 pos=5 off=5 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_read: file=0x7ffdf540a210 pos=5 off=5 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_bd_read: file=0x7ffdf540a210 pos=5 off=5 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_progress: file=0x7ffdf540a210 pos=10 off=10 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nreturn_size: file=0x7ffdf540a210 pos=10 off=10 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nenter: file=0x7ffdf540a210 pos=10 off=10 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_read: file=0x7ffdf540a210 pos=10 off=10 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_bd_read: file=0x7ffdf540a210 pos=10 off=10 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_progress: file=0x7ffdf540a210 pos=15 off=15 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nreturn_size: file=0x7ffdf540a210 pos=15 off=15 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nenter: file=0x7ffdf540a210 pos=15 off=15 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_read: file=0x7ffdf540a210 pos=15 off=15 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_bd_read: file=0x7ffdf540a210 pos=15 off=15 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_progress: file=0x7ffdf540a210 pos=20 off=20 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nreturn_size: file=0x7ffdf540a210 pos=20 off=20 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nenter: file=0x7ffdf540a210 pos=20 off=20 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_read: file=0x7ffdf540a210 pos=20 off=20 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_bd_read: file=0x7ffdf540a210 pos=20 off=20 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_progress: file=0x7ffdf540a210 pos=25 off=25 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nreturn_size: file=0x7ffdf540a210 pos=25 off=25 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nenter: file=0x7ffdf540a210 pos=25 off=25 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_read: file=0x7ffdf540a210 pos=25 off=25 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_bd_read: file=0x7ffdf540a210 pos=25 off=25 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_progress: file=0x7ffdf540a210 pos=30 off=30 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nreturn_size: file=0x7ffdf540a210 pos=30 off=30 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nenter: file=0x7ffdf540a210 pos=30 off=30 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_read: file=0x7ffdf540a210 pos=30 off=30 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_bd_read: file=0x7ffdf540a210 pos=30 off=30 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nafter_progress: file=0x7ffdf540a210 pos=35 off=35 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nreturn_size: file=0x7ffdf540a210 pos=35 off=35 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=0\nenter: file=0x7ffdf540a210 pos=35 off=35 block=1283 ctz_head=0x7ad ctz_size=343060 size=5 nsize=5\nbefore_read: file=0x7ffdf540a210 pos=35 off=35 block=1283 ctz_he\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_file_flushedread:\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        if (err) {\n            return err;\n        }\n\n        current -= 1 << skip;\n    }\n\n    *block = head;\n    *off = pos;\n    return 0;\n}\n...\nstatic int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t off, void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && pcache->block == LFS_BLOCK_INLINE &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (rcache->block == LFS_BLOCK_INLINE &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        // load to cache, first condition can no longer fail\n        rcache->block = LFS_BLOCK_INLINE;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),\n                lfs->cfg->cache_size);\n        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,\n                rcache->off, rcache->buffer, rcache->size);\n        if (err < 0) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\ntypedef struct lfs_file {\n    struct lfs_file *next;\n    uint16_t id;\n    uint8_t type;\n    lfs_mdir_t m;\n\n    struct lfs_ctz {\n        lfs_block_t head;\n        lfs_size_t size;\n    } ctz;\n\n    uint32_t flags;\n    lfs_off_t pos;\n    lfs_block_t block;\n    lfs_off_t off;\n    lfs_cache_t cache;\n\n    const struct lfs_file_config *cfg;\n} lfs_file_t\n...\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n...\ntypedef uint32_t lfs_size_t\n...\ntypedef int32_t  lfs_ssize_t\n...\n#define LFS_BLOCK_INLINE ((lfs_block_t)-2)\n...\n#define LFS_MKTAG(type, id, size) (((lfs_tag_t)(type)<<20)|((lfs_tag_t)(id)<<10)|(lfs_tag_t)(size))\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 17.8 prohibits modifying a function parameter (the value of a non\u2011pointer parameter) inside the function. lfs_file_flushedread itself does not assign to any of its formal parameter variables; it only calls other functions and updates members of the file object passed by pointer (which is allowed). The code that actually writes into a non\u2011pointer parameter is lfs_ctz_find: it passes &head to lfs_bd_read and then does head = lfs_fromle32(head), thereby modifying the function parameter head. That is a violation of Rule 17.8, but it occurs in lfs_ctz_find, not in lfs_file_flushedread. Therefore the report as stated (that lfs_file_flushedread violates Rule 17.8) is not correct, though the underlying coding in lfs_ctz_find does violate the rule."
}