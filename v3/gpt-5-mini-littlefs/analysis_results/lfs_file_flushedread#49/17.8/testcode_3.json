{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_ctz_find the parameter 'head' (a non-pointer parameter) is modified: its address (&head) is passed to lfs_bd_read which writes into it, and then it is assigned to with head = lfs_fromle32(head). This changes the function parameter 'head', violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_flushedread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/497.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_flushedread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_flushedread:\n```c\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    if (file->pos >= file->ctz.size) {\n        // eof if past end\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    while (nsize > 0) {\n        // check if we need a new block\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n                if (err) {\n                    return err;\n                }\n            } else {\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n        }\n\n        // read as much as we can in current block\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n            if (err) {\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n    }\n\n    return size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_flushedread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: log key fields of lfs_file_t to /tmp/logs/497.txt */\nstatic void lfs_probe_file_state(const char *stage, void *file_void,\n        unsigned long long pos, unsigned long long off,\n        unsigned long long block, unsigned long long ctz_head,\n        unsigned long long ctz_size, unsigned long long size, unsigned long long nsize) {\n    FILE *f = fopen(\"/tmp/logs/497.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: file=%p pos=%llu off=%llu block=%llu ctz_head=0x%llx ctz_size=%llu size=%llu nsize=%llu\\n\",\n            stage, file_void, pos, off, block, ctz_head, ctz_size, size, nsize);\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    lfs_size_t nsize = size;\n\n    /* Log entering state */\n    lfs_probe_file_state(\"enter\", (void*)file,\n            (unsigned long long)file->pos,\n            (unsigned long long)file->off,\n            (unsigned long long)file->block,\n            (unsigned long long)file->ctz.head,\n            (unsigned long long)file->ctz.size,\n            (unsigned long long)size,\n            (unsigned long long)nsize);\n\n    if (file->pos >= file->ctz.size) {\n        /* eof if past end */\n        lfs_probe_file_state(\"eof_before_return\", (void*)file,\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (unsigned long long)file->block,\n                (unsigned long long)file->ctz.head,\n                (unsigned long long)file->ctz.size,\n                (unsigned long long)size,\n                (unsigned long long)nsize);\n        return 0;\n    }\n\n    size = lfs_min(size, file->ctz.size - file->pos);\n    nsize = size;\n\n    while (nsize > 0) {\n        /* check if we need a new block */\n        if (!(file->flags & LFS_F_READING) ||\n                file->off == lfs->cfg->block_size) {\n            if (!(file->flags & LFS_F_INLINE)) {\n                /* Log just before calling lfs_ctz_find to capture the\n                   head argument and related state. This is critical to\n                   reproduce the scenario where the 'head' parameter is\n                   observed to change. */\n                lfs_probe_file_state(\"before_ctz_find\", (void*)file,\n                        (unsigned long long)file->pos,\n                        (unsigned long long)file->off,\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->ctz.head,\n                        (unsigned long long)file->ctz.size,\n                        (unsigned long long)size,\n                        (unsigned long long)nsize);\n\n                int err = lfs_ctz_find(lfs, NULL, &file->cache,\n                        file->ctz.head, file->ctz.size,\n                        file->pos, &file->block, &file->off);\n\n                /* Log immediately after calling lfs_ctz_find so callers can\n                   observe whether file->ctz.head or other fields changed as\n                   a result of the call. */\n                lfs_probe_file_state(\"after_ctz_find\", (void*)file,\n                        (unsigned long long)file->pos,\n                        (unsigned long long)file->off,\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->ctz.head,\n                        (unsigned long long)file->ctz.size,\n                        (unsigned long long)size,\n                        (unsigned long long)nsize);\n\n                if (err) {\n                    lfs_probe_file_state(\"ctz_find_err_return\", (void*)file,\n                            (unsigned long long)file->pos,\n                            (unsigned long long)file->off,\n                            (unsigned long long)file->block,\n                            (unsigned long long)file->ctz.head,\n                            (unsigned long long)file->ctz.size,\n                            (unsigned long long)size,\n                            (unsigned long long)nsize);\n                    return err;\n                }\n            } else {\n                lfs_probe_file_state(\"inline_branch\", (void*)file,\n                        (unsigned long long)file->pos,\n                        (unsigned long long)file->off,\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->ctz.head,\n                        (unsigned long long)file->ctz.size,\n                        (unsigned long long)size,\n                        (unsigned long long)nsize);\n\n                file->block = LFS_BLOCK_INLINE;\n                file->off = file->pos;\n            }\n\n            file->flags |= LFS_F_READING;\n\n            lfs_probe_file_state(\"after_new_block_setup\", (void*)file,\n                    (unsigned long long)file->pos,\n                    (unsigned long long)file->off,\n                    (unsigned long long)file->block,\n                    (unsigned long long)file->ctz.head,\n                    (unsigned long long)file->ctz.size,\n                    (unsigned long long)size,\n                    (unsigned long long)nsize);\n        }\n\n        /* read as much as we can in current block */\n        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n\n        /* Log prior to issuing the read */\n        lfs_probe_file_state(\"before_read\", (void*)file,\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (unsigned long long)file->block,\n                (unsigned long long)file->ctz.head,\n                (unsigned long long)file->ctz.size,\n                (unsigned long long)size,\n                (unsigned long long)nsize);\n\n        if (file->flags & LFS_F_INLINE) {\n            int err = lfs_dir_getread(lfs, &file->m,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    LFS_MKTAG(0xfff, 0x1ff, 0),\n                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),\n                    file->off, data, diff);\n\n            /* Log after inline read */\n            lfs_probe_file_state(\"after_inline_read\", (void*)file,\n                    (unsigned long long)file->pos,\n                    (unsigned long long)file->off,\n                    (unsigned long long)file->block,\n                    (unsigned long long)file->ctz.head,\n                    (unsigned long long)file->ctz.size,\n                    (unsigned long long)size,\n                    (unsigned long long)nsize);\n\n            if (err) {\n                lfs_probe_file_state(\"inline_read_err_return\", (void*)file,\n                        (unsigned long long)file->pos,\n                        (unsigned long long)file->off,\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->ctz.head,\n                        (unsigned long long)file->ctz.size,\n                        (unsigned long long)size,\n                        (unsigned long long)nsize);\n                return err;\n            }\n        } else {\n            int err = lfs_bd_read(lfs,\n                    NULL, &file->cache, lfs->cfg->block_size,\n                    file->block, file->off, data, diff);\n\n            /* Log after block device read */\n            lfs_probe_file_state(\"after_bd_read\", (void*)file,\n                    (unsigned long long)file->pos,\n                    (unsigned long long)file->off,\n                    (unsigned long long)file->block,\n                    (unsigned long long)file->ctz.head,\n                    (unsigned long long)file->ctz.size,\n                    (unsigned long long)size,\n                    (unsigned long long)nsize);\n\n            if (err) {\n                lfs_probe_file_state(\"bd_read_err_return\", (void*)file,\n                        (unsigned long long)file->pos,\n                        (unsigned long long)file->off,\n                        (unsigned long long)file->block,\n                        (unsigned long long)file->ctz.head,\n                        (unsigned long long)file->ctz.size,\n                        (unsigned long long)size,\n                        (unsigned long long)nsize);\n                return err;\n            }\n        }\n\n        file->pos += diff;\n        file->off += diff;\n        data += diff;\n        nsize -= diff;\n\n        lfs_probe_file_state(\"after_progress\", (void*)file,\n                (unsigned long long)file->pos,\n                (unsigned long long)file->off,\n                (unsigned long long)file->block,\n                (unsigned long long)file->ctz.head,\n                (unsigned long long)file->ctz.size,\n                (unsigned long long)size,\n                (unsigned long long)nsize);\n    }\n\n    lfs_probe_file_state(\"return_size\", (void*)file,\n            (unsigned long long)file->pos,\n            (unsigned long long)file->off,\n            (unsigned long long)file->block,\n            (unsigned long long)file->ctz.head,\n            (unsigned long long)file->ctz.size,\n            (unsigned long long)size,\n            (unsigned long long)nsize);\n\n    return size;\n}\n"
}