{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_dir_drop:\n```c\nstatic int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {\n    // steal state\n    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);\n    if (err) {\n        return err;\n    }\n\n    // steal tail\n    lfs_pair_tole32(tail->tail);\n    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));\n    lfs_pair_fromle32(tail->tail);\n    if (err) {\n        return err;\n    }\n\n    return 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_drop:\nuint8_t type\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nerr = lfs_dir_commit(lfs, dir, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No rule violation in the given fragment. The code passes tail->tail (a mutable buffer that is explicitly modified just before the call via lfs_pair_tole32 and restored afterwards) into LFS_MKATTRS/lfs_dir_commit. Rule 8.13 concerns pointer declarations that should be const-qualified; there is no pointer declaration shown here that is incorrectly non-const. Note: if the prototype of lfs_dir_commit (or the attribute/macro types) used a non-const pointer type even though the function does not modify the pointed-to bytes, that prototype would violate Rule 8.13. In the shown code, however, tail->tail is intentionally mutable, so using a non-const pointer here is appropriate."
}