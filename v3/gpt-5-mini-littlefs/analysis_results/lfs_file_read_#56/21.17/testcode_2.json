{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size) is not locally proven to respect the bounds of the source and destination buffers. The function uses the runtime value lfs->cfg->cache_size as the copy length but there is no check in this fragment that lfs->cfg->cache_size <= sizeof(file->cache.buffer) and <= sizeof(lfs->pcache.buffer). If, for example, the configuration structure was (mis)initialized so that cfg->cache_size is larger than the actual buffer arrays (or corrupted at runtime), memcpy would read/write beyond the bounds of the buffers, violating Rule 21.17. (If there is a global invariant elsewhere guaranteeing cfg->cache_size equals the compile-time buffer sizes, that must be documented/verified; otherwise the use is unsafe.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/569.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read_:\n```c\nstatic lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        // flush out any writes\n        int err = lfs_file_flush(lfs, file);\n        if (err) {\n            return err;\n        }\n    }\n#endif\n\n    return lfs_file_flushedread(lfs, file, buffer, size);\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/569.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/569.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    /* Log entry and key state needed to reproduce the memcpy bounds concern */\n    lfs_probe_log(\"ENTER: lfs_file_read_: lfs=%p file=%p buffer=%p size=%zu\",\n            (void*)lfs, (void*)file, (void*)buffer, (size_t)size);\n\n    if (file) {\n        lfs_probe_log(\"file->flags=0x%08x (LFS_O_RDONLY=0x%08x, LFS_F_WRITING=0x%08x)\",\n                (unsigned)file->flags,\n                (unsigned)LFS_O_RDONLY,\n                (unsigned)LFS_F_WRITING);\n        /* If available, log addresses of the caches involved in the reported memcpy */\n        /* These address logs help correlate whether cache pointers match expectations */\n        /* Access members only when file and lfs are non-NULL to avoid crashes */\n        if (&file->cache && file->cache.buffer) {\n            lfs_probe_log(\"file->cache.buffer=%p\", (void*)file->cache.buffer);\n        } else {\n            lfs_probe_log(\"file->cache.buffer=<(null or unavailable)>\");\n        }\n    }\n\n    if (lfs && lfs->pcache.buffer) {\n        lfs_probe_log(\"lfs=%p lfs->pcache.buffer=%p\", (void*)lfs, (void*)lfs->pcache.buffer);\n    } else if (lfs) {\n        lfs_probe_log(\"lfs=%p lfs->pcache.buffer=<(null or unavailable)>\", (void*)lfs);\n    }\n\n    if (lfs && lfs->cfg) {\n        /* Log the runtime cache_size used by the memcpy in the reported scenario */\n        lfs_probe_log(\"lfs->cfg=%p cfg->cache_size=%zu\", (void*)lfs->cfg, (size_t)lfs->cfg->cache_size);\n    } else if (lfs) {\n        lfs_probe_log(\"lfs->cfg=<(null)>\");\n    }\n\n    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        lfs_probe_log(\"file in writing mode: flushing before read\");\n        // flush out any writes\n        int err = lfs_file_flush(lfs, file);\n        lfs_probe_log(\"lfs_file_flush returned %d\", err);\n        if (err) {\n            lfs_probe_log(\"EXIT: lfs_file_read_ (flush err) returning %d\", err);\n            return err;\n        }\n    }\n#endif\n\n    lfs_probe_log(\"calling lfs_file_flushedread(lfs=%p, file=%p, buffer=%p, size=%zu)\",\n            (void*)lfs, (void*)file, (void*)buffer, (size_t)size);\n    lfs_ssize_t res = lfs_file_flushedread(lfs, file, buffer, size);\n    lfs_probe_log(\"returned from lfs_file_flushedread: res=%zd\", (ssize_t)res);\n    lfs_probe_log(\"EXIT: lfs_file_read_: lfs=%p file=%p result=%zd\", (void*)lfs, (void*)file, (ssize_t)res);\n\n    return res;\n}\n"
}