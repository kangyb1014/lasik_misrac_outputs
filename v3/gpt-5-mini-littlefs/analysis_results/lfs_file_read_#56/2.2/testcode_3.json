{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)lfs;' in lfs_cache_drop is an executed no-op that has no side effects. Removing this expression would not change program behaviour (the function still sets rcache->block), so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/562.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read_:\n```c\nstatic lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        // flush out any writes\n        int err = lfs_file_flush(lfs, file);\n        if (err) {\n            return err;\n        }\n    }\n#endif\n\n    return lfs_file_flushedread(lfs, file, buffer, size);\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdlib.h>\n\n/* Minimal stand-ins so this snippet compiles and preserves the original\n   control flow of lfs_file_read_. These are simple types and helpers\n   intended only for logging/testing; they are not full implementations. */\n\ntypedef struct lfs_tag { int dummy; } lfs_t;\ntypedef struct { int flags; } lfs_file_t;\ntypedef long lfs_ssize_t;\ntypedef size_t lfs_size_t;\n\nstatic const int LFS_O_RDONLY = 1;\nstatic const int LFS_F_WRITING = 2;\n\nstatic inline void LFS_ASSERT(int x) { (void)x; }\n\n/* Probe logger: append human readable logs to /tmp/logs/562.txt. Failures\n   to log are ignored so as not to change program behaviour. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/562.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Minimal stub implementations so the function under test links and runs.\n   They log their invocation and return benign results. */\nstatic int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {\n    /* Log that flush was requested and the state of file->flags. */\n    lfs_probe_log(\"lfs_file_flush: lfs=%p file=%p flags=0x%08x\",\n                  (void *)lfs, (void *)file, (unsigned)file->flags);\n    /* Simulate success */\n    return 0;\n}\n\nstatic lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,\n                                        void *buffer, lfs_size_t size) {\n    lfs_probe_log(\"lfs_file_flushedread: lfs=%p file=%p flags=0x%08x size=%zu\",\n                  (void *)lfs, (void *)file, (unsigned)file->flags, size);\n    /* For testing, pretend we read 'size' bytes successfully. */\n    (void)buffer; /* avoid unused param warning */\n    return (lfs_ssize_t)size;\n}\n\n/* Modified lfs_file_read_ with probes that capture control flow and state. */\nstatic lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);\n\n    /* Log entry and initial state */\n    lfs_probe_log(\"ENTER lfs_file_read_: lfs=%p file=%p flags=0x%08x size=%zu\",\n                  (void *)lfs, (void *)file, (unsigned)file->flags, size);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        /* Log that we will flush because file is marked writing */\n        lfs_probe_log(\"lfs_file_read_: file is in WRITING state (flags=0x%08x)\",\n                      (unsigned)file->flags);\n\n        /* flush out any writes */\n        int err = lfs_file_flush(lfs, file);\n\n        /* Log result of flush */\n        lfs_probe_log(\"lfs_file_read_: lfs_file_flush returned err=%d\", err);\n\n        if (err) {\n            lfs_probe_log(\"EXIT lfs_file_read_: returning err=%d\", err);\n            return err;\n        }\n    } else {\n        lfs_probe_log(\"lfs_file_read_: file NOT in WRITING state (flags=0x%08x)\",\n                      (unsigned)file->flags);\n    }\n#endif\n\n    /* Delegate to flushed read and log the return value */\n    lfs_ssize_t res = lfs_file_flushedread(lfs, file, buffer, size);\n    lfs_probe_log(\"EXIT lfs_file_read_: lfs_file_flushedread returned %ld\",\n                  (long)res);\n    return res;\n}\n"
}