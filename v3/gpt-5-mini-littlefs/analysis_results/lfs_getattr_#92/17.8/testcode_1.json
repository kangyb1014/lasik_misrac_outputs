{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: lfs_getattr_ passes the address of its parameter 'path' to lfs_dir_find (lfs_dir_find(lfs, &cwd, &path, NULL)). Inside lfs_dir_find the code assigns to *path (e.g. '*path = name;'), which modifies the value of the parameter 'path' in lfs_getattr_. This modifies the pointer parameter itself and therefore violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/927.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr_:\n```c\nstatic lfs_ssize_t lfs_getattr_(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    tag = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x7ff, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_USERATTR + type,\n                id, lfs_min(size, lfs->attr_max)),\n            buffer);\n    if (tag < 0) {\n        if (tag == LFS_ERR_NOENT) {\n            return LFS_ERR_NOATTR;\n        }\n\n        return tag;\n    }\n\n    return lfs_tag_size(tag);\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted log messages to /tmp/logs/927.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/927.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic lfs_ssize_t lfs_getattr_(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n\n    /* Log entry and initial state of the path pointer and its address. */\n    lfs_probe_log(\"ENTER lfs_getattr_: lfs=%p, &path=%p, path=%p, path_str=%s\",\n            (void *)lfs, (void *)&path, (void *)path, (path ? path : \"(null)\"));\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n\n    /* Log result of lfs_dir_find and the path pointer state after the call. */\n    lfs_probe_log(\"AFTER lfs_dir_find: tag=%lld, &path=%p, path=%p, path_str=%s\",\n            (long long)tag, (void *)&path, (void *)path, (path ? path : \"(null)\"));\n\n    if (tag < 0) {\n        lfs_probe_log(\"lfs_getattr_: lfs_dir_find returned error tag=%lld, returning immediately\",\n                (long long)tag);\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    lfs_probe_log(\"lfs_getattr_: initial id=%u (from tag)\", (unsigned)id);\n\n    if (id == 0x3ff) {\n        /* special case for root */\n        id = 0;\n        lfs_probe_log(\"lfs_getattr_: id indicated root, setting id=0 and fetching root dir\");\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            lfs_probe_log(\"lfs_getattr_: lfs_dir_fetch returned error=%d, returning immediately\", err);\n            return err;\n        }\n    }\n\n    tag = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x7ff, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_USERATTR + type,\n                id, lfs_min(size, lfs->attr_max)),\n            buffer);\n\n    lfs_probe_log(\"AFTER lfs_dir_get: tag=%lld, requested_type=%u, id=%u, requested_size=%zu\",\n            (long long)tag, (unsigned)(LFS_TYPE_USERATTR + type), (unsigned)id, (size_t)lfs_min(size, lfs->attr_max));\n\n    if (tag < 0) {\n        if (tag == LFS_ERR_NOENT) {\n            lfs_probe_log(\"lfs_getattr_: attribute not found (NOENT), returning LFS_ERR_NOATTR\");\n            return LFS_ERR_NOATTR;\n        }\n\n        lfs_probe_log(\"lfs_getattr_: lfs_dir_get returned error tag=%lld, returning tag\", (long long)tag);\n        return tag;\n    }\n\n    lfs_ssize_t result = lfs_tag_size(tag);\n    lfs_probe_log(\"EXIT lfs_getattr_: returning size=%zd\", result);\n    return result;\n}\n"
}