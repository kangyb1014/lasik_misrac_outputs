{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'lfs' (type lfs_t *) as a non-const userdata to lfs_fs_traverse_. If lfs_fs_traverse_ (and the callback lfs_alloc_lookahead) only read from the lfs structure, the parameter should be const-qualified (e.g. const lfs_t * or const void *) so the pointer points to a const-qualified type. If the traversal API/prototype currently declares the userdata parameter as a non-const pointer, this is a violation of MISRA C 2023 Rule 8.13. (If the API actually needs to modify lfs, then no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_alloc_scan code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_alloc_scan as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_alloc_scan:\n```c\nstatic int lfs_alloc_scan(lfs_t *lfs) {\n    // move lookahead buffer to the first unused block\n    //\n    // note we limit the lookahead buffer to at most the amount of blocks\n    // checkpointed, this prevents the math in lfs_alloc from underflowing\n    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) \n            % lfs->block_count;\n    lfs->lookahead.next = 0;\n    lfs->lookahead.size = lfs_min(\n            8*lfs->cfg->lookahead_size,\n            lfs->lookahead.ckpoint);\n\n    // find mask of free blocks from tree\n    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);\n    if (err) {\n        lfs_alloc_drop(lfs);\n        return err;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_alloc_scan code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/*\n * Probe helpers to log control flow and key state for diagnostics.\n * Logs are appended to /tmp/logs/23.txt so other agents can inspect\n * the sequence of operations and pointer values involved in the\n * call to lfs_fs_traverse_ that passes 'lfs' as userdata.\n */\nstatic void lfs_log_state(const char *stage, void *lfs_ptr, void *cfg_ptr,\n        uintptr_t lookahead_start, uintptr_t lookahead_next,\n        uintptr_t lookahead_size, uintptr_t lookahead_ckpoint,\n        uintptr_t block_count, void *buffer_ptr, uintptr_t lookahead_cfg_size)\n{\n    FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_alloc_scan] %s\\n\", stage);\n    fprintf(f, \"  lfs_ptr=%\" PRIuPTR \" cfg_ptr=%\" PRIuPTR \"\\n\",\n            (uintptr_t)lfs_ptr, (uintptr_t)cfg_ptr);\n    fprintf(f, \"  lookahead.start=%"
}