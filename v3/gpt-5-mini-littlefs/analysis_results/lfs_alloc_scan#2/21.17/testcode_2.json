{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential overflow in callback: earlier code sets lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->lookahead.ckpoint) which may be larger than the actual buffer allocation (which appears to be lfs->cfg->lookahead_size bytes, as used in the prior memset). The call int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true); invokes the lfs_alloc_lookahead callback (and/or other code inside lfs_fs_traverse_) which might use string.h functions (memcpy/memmove/memset/strcpy/...) to write lookahead.size bytes into lfs->lookahead.buffer. If such writes use lengths based on lfs->lookahead.size (or otherwise write beyond lfs->cfg->lookahead_size), that would access beyond the bounds of the buffer and violate MISRA C 2023 Rule 21.17. Without the implementations of lfs_fs_traverse_ and lfs_alloc_lookahead we cannot prove safe usage, so this call is potentially violating the rule when the callback performs string.h operations using lookahead.size > buffer capacity.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_alloc_scan code that contains useful probe functions that print useful logs to a file \"/tmp/logs/29.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_alloc_scan as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_alloc_scan:\n```c\nstatic int lfs_alloc_scan(lfs_t *lfs) {\n    // move lookahead buffer to the first unused block\n    //\n    // note we limit the lookahead buffer to at most the amount of blocks\n    // checkpointed, this prevents the math in lfs_alloc from underflowing\n    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) \n            % lfs->block_count;\n    lfs->lookahead.next = 0;\n    lfs->lookahead.size = lfs_min(\n            8*lfs->cfg->lookahead_size,\n            lfs->lookahead.ckpoint);\n\n    // find mask of free blocks from tree\n    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);\n    if (err) {\n        lfs_alloc_drop(lfs);\n        return err;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_alloc_scan code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\nstatic void lfs_alloc_scan_log(lfs_t *lfs, const char *stage, int err) {\n    FILE *f = fopen(\"/tmp/logs/29.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_alloc_scan] stage=%s\\n\", stage);\n    fprintf(f, \"  lfs_ptr=%p\\n\", (void *)lfs);\n\n    /* Print lookahead structure fields that are relevant to the scenario */\n    fprintf(f, \"  lookahead.start=%\" PRIuMAX \", next=%\" PRIuMAX \", size=%\" PRIuMAX \", ckpoint=%\" PRIuMAX \"\\n\",\n            (uintmax_t)lfs->lookahead.start,\n            (uintmax_t)lfs->lookahead.next,\n            (uintmax_t)lfs->lookahead.size,\n            (uintmax_t)lfs->lookahead.ckpoint);\n\n    /* Print configuration and buffer info */\n    fprintf(f, \"  cfg.lookahead_size=%\" PRIuMAX \" (bytes)\\n\",\n            (uintmax_t)lfs->cfg->lookahead_size);\n    fprintf(f, \"  computed_8x=%\" PRIuMAX \" (bytes)\\n\",\n            (uintmax_t)(8 * (uintmax_t)lfs->cfg->lookahead_size));\n    fprintf(f, \"  lookahead.buffer=%p, buffer_capacity=%\" PRIuMAX \"\\n\",\n            (void *)lfs->lookahead.buffer,\n            (uintmax_t)lfs->cfg->lookahead_size);\n\n    if (err) {\n        fprintf(f, \"  err=%d\\n\", err);\n    }\n\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nstatic int lfs_alloc_scan(lfs_t *lfs) {\n    /* Log entry state before we modify lookahead */\n    lfs_alloc_scan_log(lfs, \"entry\", 0);\n\n    // move lookahead buffer to the first unused block\n    //\n    // note we limit the lookahead buffer to at most the amount of blocks\n    // checkpointed, this prevents the math in lfs_alloc from underflowing\n    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) \n            % lfs->block_count;\n    lfs->lookahead.next = 0;\n    lfs->lookahead.size = lfs_min(\n            8*lfs->cfg->lookahead_size,\n            lfs->lookahead.ckpoint);\n\n    /* Log state after computing new lookahead.start/next/size */\n    lfs_alloc_scan_log(lfs, \"after_compute\", 0);\n\n    // find mask of free blocks from tree\n    /* Log the memset that is about to occur (size used for memset)\n       This captures the buffer capacity used for zeroing which is a key\n       part of the potential mismatch with lookahead.size. */\n    lfs_alloc_scan_log(lfs, \"before_memset\", 0);\n    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n    lfs_alloc_scan_log(lfs, \"after_memset\", 0);\n\n    /* Log just before invoking the traversal and callback which may\n       subsequently use lookahead.size to access the buffer. */\n    lfs_alloc_scan_log(lfs, \"before_traverse\", 0);\n    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);\n    lfs_alloc_scan_log(lfs, \"after_traverse\", err);\n    if (err) {\n        lfs_alloc_drop(lfs);\n        lfs_alloc_scan_log(lfs, \"after_drop\", err);\n        return err;\n    }\n\n    lfs_alloc_scan_log(lfs, \"exit\", 0);\n    return 0;\n}\n"
}