{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer-overflow: memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size) will write lfs->cfg->lookahead_size bytes into the object pointed to by lfs->lookahead.buffer. The shown fragment contains no local proof that the object underlying lfs->lookahead.buffer is at least lfs->cfg->lookahead_size bytes long (it could be smaller or NULL). If buffer is smaller than cfg->lookahead_size (or uninitialised/NULL), this memset will write beyond the object bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_alloc_scan code that contains useful probe functions that print useful logs to a file \"/tmp/logs/29.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_alloc_scan as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_alloc_scan:\n```c\nstatic int lfs_alloc_scan(lfs_t *lfs) {\n    // move lookahead buffer to the first unused block\n    //\n    // note we limit the lookahead buffer to at most the amount of blocks\n    // checkpointed, this prevents the math in lfs_alloc from underflowing\n    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) \n            % lfs->block_count;\n    lfs->lookahead.next = 0;\n    lfs->lookahead.size = lfs_min(\n            8*lfs->cfg->lookahead_size,\n            lfs->lookahead.ckpoint);\n\n    // find mask of free blocks from tree\n    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);\n    if (err) {\n        lfs_alloc_drop(lfs);\n        return err;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_alloc_scan code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe/logging helper. Writes a single line with key fields to /tmp/logs/29.txt. */\nstatic void lfs_log_probe(const lfs_t *lfs, const char *phase) {\n    FILE *f = fopen(\"/tmp/logs/29.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Print pointer values and important numeric fields. Cast numeric fields to\n       unsigned long long to avoid format mismatches. Do not dereference\n       lfs->lookahead.buffer to avoid UB if it is invalid. */\n    (void)fprintf(f,\n        \"%s: lfs=%p, lookahead.buffer=%p, cfg_lookahead_size=%llu, block_count=%llu, lookahead.start=%llu, lookahead.next=%llu, lookahead.size=%llu\\n\",\n        phase,\n        (const void *)lfs,\n        (const void *)lfs->lookahead.buffer,\n        (unsigned long long)lfs->cfg->lookahead_size,\n        (unsigned long long)lfs->block_count,\n        (unsigned long long)lfs->lookahead.start,\n        (unsigned long long)lfs->lookahead.next,\n        (unsigned long long)lfs->lookahead.size);\n    fclose(f);\n}\n\nstatic int lfs_alloc_scan(lfs_t *lfs) {\n    /* Log entry state */\n    lfs_log_probe(lfs, \"entry\");\n\n    // move lookahead buffer to the first unused block\n    //\n    // note we limit the lookahead buffer to at most the amount of blocks\n    // checkpointed, this prevents the math in lfs_alloc from underflowing\n    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) \n            % lfs->block_count;\n\n    /* Log after computing new start */\n    lfs_log_probe(lfs, \"after_start_update\");\n\n    lfs->lookahead.next = 0;\n    lfs->lookahead.size = lfs_min(\n            8*lfs->cfg->lookahead_size,\n            lfs->lookahead.ckpoint);\n\n    /* Log after computing lookahead.size */\n    lfs_log_probe(lfs, \"after_size_compute\");\n\n    // find mask of free blocks from tree\n    /* Log immediately before memset so callers can see the pointer and the\n       intended write length. We do not access the buffer contents here to\n       avoid creating additional UB. */\n    lfs_log_probe(lfs, \"before_memset\");\n\n    (void)memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n\n    /* Log immediately after memset to indicate the call was made */\n    lfs_log_probe(lfs, \"after_memset\");\n\n    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);\n    if (err) {\n        /* Log error and state prior to dropping */\n        FILE *f = fopen(\"/tmp/logs/29.txt\", \"a\");\n        if (f) {\n            (void)fprintf(f, \"traverse_error: err=%d, lfs=%p\\n\", err, (const void *)lfs);\n            fclose(f);\n        }\n\n        lfs_alloc_drop(lfs);\n        return err;\n    }\n\n    /* Final state log before returning success */\n    lfs_log_probe(lfs, \"exit_success\");\n\n    return 0;\n}\n"
}