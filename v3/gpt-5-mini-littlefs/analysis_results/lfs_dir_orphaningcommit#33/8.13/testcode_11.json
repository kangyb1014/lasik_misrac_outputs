{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment calls lfs_pair_cmp(lpair, d->m.pair). If lfs_pair_cmp is declared without const-qualified parameters (for example: int lfs_pair_cmp(lfs_block_t a[2], lfs_block_t b[2]) or int lfs_pair_cmp(lfs_block_t *a, lfs_block_t *b)), then the function accepts pointers to non-const data even though it merely compares them and does not need to modify them. In that case Rule 8.13 is violated: these pointer parameters (and thus the pointer argument d->m.pair) should be to const-qualified types (e.g. const lfs_block_t a[2] or const lfs_block_t *), so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_orphaningcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_orphaningcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_orphaningcommit:\n```c\nstatic int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const struct lfs_mattr *attrs, int attrcount) {\n    // check for any inline files that aren't RAM backed and\n    // forcefully evict them, needed for filesystem consistency\n    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {\n        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&\n                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&\n                f->ctz.size > lfs->cfg->cache_size) {\n            int err = lfs_file_outline(lfs, f);\n            if (err) {\n                return err;\n            }\n\n            err = lfs_file_flush(lfs, f);\n            if (err) {\n                return err;\n            }\n        }\n    }\n\n    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};\n    lfs_mdir_t ldir = *dir;\n    lfs_mdir_t pdir;\n    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,\n            attrs, attrcount, &pdir);\n    if (state < 0) {\n        return state;\n    }\n\n    // update if we're not in mlist, note we may have already been\n    // updated if we are in mlist\n    if (lfs_pair_cmp(dir->pair, lpair) == 0) {\n        *dir = ldir;\n    }\n\n    // commit was successful, but may require other changes in the\n    // filesystem, these would normally be tail recursive, but we have\n    // flattened them here avoid unbounded stack usage\n\n    // need to drop?\n    if (state == LFS_OK_DROPPED) {\n        // steal state\n        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);\n        if (err) {\n            return err;\n        }\n\n        // steal tail, note that this can't create a recursive drop\n        lpair[0] = pdir.pair[0];\n        lpair[1] = pdir.pair[1];\n        lfs_pair_tole32(dir->tail);\n        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(\n                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),\n                        dir->tail}),\n                NULL);\n        lfs_pair_fromle32(dir->tail);\n        if (state < 0) {\n            return state;\n        }\n\n        ldir = pdir;\n    }\n\n    // need to relocate?\n    bool orphans = false;\n    while (state == LFS_OK_RELOCATED) {\n        LFS_DEBUG(\"Relocating {0x%\"PRIx32\", 0x%\"PRIx32\"} \"\n                    \"-> {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);\n        state = 0;\n\n        // update internal root\n        if (lfs_pair_cmp(lpair, lfs->root) == 0) {\n            lfs->root[0] = ldir.pair[0];\n            lfs->root[1] = ldir.pair[1];\n        }\n\n        // update internally tracked dirs\n        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {\n                d->m.pair[0] = ldir.pair[0];\n                d->m.pair[1] = ldir.pair[1];\n            }\n\n            if (d->type == LFS_TYPE_DIR &&\n                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {\n                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];\n                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];\n            }\n        }\n\n        // find parent\n        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);\n        if (tag < 0 && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n\n        bool hasparent = (tag != LFS_ERR_NOENT);\n        if (tag != LFS_ERR_NOENT) {\n            // note that if we have a parent, we must have a pred, so this will\n            // always create an orphan\n            int err = lfs_fs_preporphans(lfs, +1);\n            if (err) {\n                return err;\n            }\n\n            // fix pending move in this pair? this looks like an optimization but\n            // is in fact _required_ since relocating may outdate the move.\n            uint16_t moveid = 0x3ff;\n            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                moveid = lfs_tag_id(lfs->gstate.tag);\n                LFS_DEBUG(\"Fixing move while relocating \"\n                        \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                        pdir.pair[0], pdir.pair[1], moveid);\n                lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                if (moveid < lfs_tag_id(tag)) {\n                    tag -= LFS_MKTAG(0, 1, 0);\n                }\n            }\n\n            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};\n            lfs_pair_tole32(ldir.pair);\n            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(\n                        {LFS_MKTAG_IF(moveid != 0x3ff,\n                            LFS_TYPE_DELETE, moveid, 0), NULL},\n                        {tag, ldir.pair}),\n                    NULL);\n            lfs_pair_fromle32(ldir.pair);\n            if (state < 0) {\n                return state;\n            }\n\n            if (state == LFS_OK_RELOCATED) {\n                lpair[0] = ppair[0];\n                lpair[1] = ppair[1];\n                ldir = pdir;\n                orphans = true;\n                continue;\n            }\n        }\n\n        // find pred\n        int err = lfs_fs_pred(lfs, lpair, &pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));\n\n        // if we can't find dir, it must be new\n        if (err != LFS_ERR_NOENT) {\n            if (lfs_gstate_hasorphans(&lfs->gstate)) {\n                // next step, clean up orphans\n                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);\n                if (err) {\n                    return err;\n                }\n            }\n\n            // fix pending move in this pair? this looks like an optimization\n            // but is in fact _required_ since relocating may outdate the move.\n            uint16_t moveid = 0x3ff;\n            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                moveid = lfs_tag_id(lfs->gstate.tag);\n                LFS_DEBUG(\"Fixing move while relocating \"\n                        \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                        pdir.pair[0], pdir.pair[1], moveid);\n                lfs_fs_prepmove(lfs, 0x3ff, NULL);\n            }\n\n            // replace bad pair, either we clean up desync, or no desync occured\n            lpair[0] = pdir.pair[0];\n            lpair[1] = pdir.pair[1];\n            lfs_pair_tole32(ldir.pair);\n            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(\n                        {LFS_MKTAG_IF(moveid != 0x3ff,\n                            LFS_TYPE_DELETE, moveid, 0), NULL},\n                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),\n                            ldir.pair}),\n                    NULL);\n            lfs_pair_fromle32(ldir.pair);\n            if (state < 0) {\n                return state;\n            }\n\n            ldir = pdir;\n        }\n    }\n\n    return orphans ? LFS_OK_ORPHANED : 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_orphaningcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/333.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_pair(const char *label, const lfs_block_t pair[2]) {\n    probe_log(\"%s: {0x%08\" PRIx32 \", 0x%08\" PRIx32 \"}\", label,\n            (uint32_t)pair[0], (uint32_t)pair[1]);\n}\n\nstatic void probe_log_ptr(const char *label, const void *p) {\n    probe_log(\"%s: %p\", label, p);\n}\n\nstatic int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const struct lfs_mattr *attrs, int attrcount) {\n    probe_log(\"ENTER lfs_dir_orphaningcommit: dir=%p, attrs=%p, attrcount=%d\",\n            (void*)dir, (void*)attrs, attrcount);\n    probe_log_pair(\"dir->pair at entry\", dir->pair);\n\n    // check for any inline files that aren't RAM backed and\n    // forcefully evict them, needed for filesystem consistency\n    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {\n        probe_log_ptr(\"mlist file\", f);\n        probe_log_pair(\" f->m.pair\", f->m.pair);\n        probe_log_pair(\" dir->pair (loop)\", dir->pair);\n        int _cmp_f_dir = lfs_pair_cmp(f->m.pair, dir->pair);\n        probe_log(\"lfs_pair_cmp(f->m.pair, dir->pair) -> %d\", _cmp_f_dir);\n        if (dir != &f->m && _cmp_f_dir == 0 &&\n                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&\n                f->ctz.size > lfs->cfg->cache_size) {\n            probe_log(\"Evicting inline file: %p\", (void*)f);\n            int err = lfs_file_outline(lfs, f);\n            probe_log(\"lfs_file_outline -> %d\", err);\n            if (err) {\n                probe_log(\"EXIT lfs_dir_orphaningcommit early (outline err): %d\", err);\n                return err;\n            }\n\n            err = lfs_file_flush(lfs, f);\n            probe_log(\"lfs_file_flush -> %d\", err);\n            if (err) {\n                probe_log(\"EXIT lfs_dir_orphaningcommit early (flush err): %d\", err);\n                return err;\n            }\n        }\n    }\n\n    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};\n    probe_log_pair(\"lpair initial copy\", lpair);\n    lfs_mdir_t ldir = *dir;\n    lfs_mdir_t pdir;\n    probe_log(\"Calling lfs_dir_relocatingcommit with ldir=%p, orig dir->pair=%p\",\n            (void*)&ldir, (void*)dir->pair);\n    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,\n            attrs, attrcount, &pdir);\n    probe_log(\"lfs_dir_relocatingcommit -> %d\", state);\n    if (state < 0) {\n        probe_log(\"EXIT lfs_dir_orphaningcommit early (relocatingcommit err): %d\", state);\n        return state;\n    }\n\n    // update if we're not in mlist, note we may have already been\n    // updated if we are in mlist\n    int _cmp_dir_lpair = lfs_pair_cmp(dir->pair, lpair);\n    probe_log(\"lfs_pair_cmp(dir->pair, lpair) -> %d\", _cmp_dir_lpair);\n    if (_cmp_dir_lpair == 0) {\n        probe_log(\"Updating *dir from ldir\");\n        *dir = ldir;\n    }\n\n    // commit was successful, but may require other changes in the\n    // filesystem, these would normally be tail recursive, but we have\n    // flattened them here avoid unbounded stack usage\n\n    // need to drop?\n    if (state == LFS_OK_DROPPED) {\n        probe_log(\"State indicates LFS_OK_DROPPED\");\n        // steal state\n        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);\n        probe_log(\"lfs_dir_getgstate -> %d\", err);\n        if (err) {\n            probe_log(\"EXIT lfs_dir_orphaningcommit early (getgstate err): %d\", err);\n            return err;\n        }\n\n        // steal tail, note that this can't create a recursive drop\n        lpair[0] = pdir.pair[0];\n        lpair[1] = pdir.pair[1];\n        probe_log_pair(\"lpair after steal\", lpair);\n        lfs_pair_tole32(dir->tail);\n        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(\n                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),\n                        dir->tail}),\n                NULL);\n        probe_log(\"lfs_dir_relocatingcommit (steal tail) -> %d\", state);\n        lfs_pair_fromle32(dir->tail);\n        if (state < 0) {\n            probe_log(\"EXIT lfs_dir_orphaningcommit early (reloc tail err): %d\", state);\n            return state;\n        }\n\n        ldir = pdir;\n    }\n\n    // need to relocate?\n    bool orphans = false;\n    while (state == LFS_OK_RELOCATED) {\n        probe_log(\"Relocating from lpair to ldir\");\n        probe_log_pair(\"lpair\", lpair);\n        probe_log_pair(\"ldir.pair\", ldir.pair);\n        LFS_DEBUG(\"Relocating {0x%\"PRIx32\", 0x%\"PRIx32\"} \"\n                    \"-> {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);\n        state = 0;\n\n        // update internal root\n        int _cmp_lpair_root = lfs_pair_cmp(lpair, lfs->root);\n        probe_log(\"lfs_pair_cmp(lpair, lfs->root) -> %d\", _cmp_lpair_root);\n        if (_cmp_lpair_root == 0) {\n            lfs->root[0] = ldir.pair[0];\n            lfs->root[1] = ldir.pair[1];\n            probe_log_pair(\"Updated lfs->root\", lfs->root);\n        }\n\n        // update internally tracked dirs\n        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n            probe_log_ptr(\"mlist entry d\", d);\n            probe_log_pair(\" d->m.pair (before)\", d->m.pair);\n            int _cmp_lpair_dmpair = lfs_pair_cmp(lpair, d->m.pair);\n            probe_log(\"lfs_pair_cmp(lpair, d->m.pair) -> %d\", _cmp_lpair_dmpair);\n            if (_cmp_lpair_dmpair == 0) {\n                d->m.pair[0] = ldir.pair[0];\n                d->m.pair[1] = ldir.pair[1];\n                probe_log_pair(\" d->m.pair (after)\", d->m.pair);\n            }\n\n            if (d->type == LFS_TYPE_DIR &&\n                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {\n                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];\n                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];\n                probe_log_pair(\" updated ((lfs_dir_t*)d)->head\", ((lfs_dir_t*)d)->head);\n            }\n        }\n\n        // find parent\n        probe_log_pair(\"Finding parent of lpair\", lpair);\n        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);\n        probe_log(\"lfs_fs_parent -> tag=%d, pdir=%p\", (int)tag, (void*)&pdir);\n        if (tag < 0 && tag != LFS_ERR_NOENT) {\n            probe_log(\"EXIT lfs_dir_orphaningcommit early (fs_parent err): %d\", (int)tag);\n            return tag;\n        }\n\n        bool hasparent = (tag != LFS_ERR_NOENT);\n        probe_log(\"hasparent=%d\", hasparent);\n        if (tag != LFS_ERR_NOENT) {\n            // note that if we have a parent, we must have a pred, so this will\n            // always create an orphan\n            int err = lfs_fs_preporphans(lfs, +1);\n            probe_log(\"lfs_fs_preporphans(+1) -> %d\", err);\n            if (err) {\n                probe_log(\"EXIT lfs_dir_orphaningcommit early (preporphans err): %d\", err);\n                return err;\n            }\n\n            // fix pending move in this pair? this looks like an optimization but\n            // is in fact _required_ since relocating may outdate the move.\n            uint16_t moveid = 0x3ff;\n            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                moveid = lfs_tag_id(lfs->gstate.tag);\n                LFS_DEBUG(\"Fixing move while relocating \"\n                        \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                        pdir.pair[0], pdir.pair[1], moveid);\n                probe_log(\"Detected move here: moveid=0x%03\" PRIx16, moveid);\n                lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                if (moveid < lfs_tag_id(tag)) {\n                    tag -= LFS_MKTAG(0, 1, 0);\n                    probe_log(\"Adjusted tag after moveid comparison -> %d\", (int)tag);\n                }\n            }\n\n            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};\n            probe_log_pair(\"ppair (parent pair)\", ppair);\n            lfs_pair_tole32(ldir.pair);\n            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(\n                        {LFS_MKTAG_IF(moveid != 0x3ff,\n                            LFS_TYPE_DELETE, moveid, 0), NULL},\n                        {tag, ldir.pair}),\n                    NULL);\n            lfs_pair_fromle32(ldir.pair);\n            probe_log(\"lfs_dir_relocatingcommit (parent) -> %d\", state);\n            if (state < 0) {\n                probe_log(\"EXIT lfs_dir_orphaningcommit early (parent reloc err): %d\", state);\n                return state;\n            }\n\n            if (state == LFS_OK_RELOCATED) {\n                lpair[0] = ppair[0];\n                lpair[1] = ppair[1];\n                ldir = pdir;\n                orphans = true;\n                probe_log(\"Relocated parent -> continue loop; new lpair:\");\n                probe_log_pair(\"lpair (after parent relocate)\", lpair);\n                continue;\n            }\n        }\n\n        // find pred\n        probe_log_pair(\"Finding pred of lpair\", lpair);\n        int err = lfs_fs_pred(lfs, lpair, &pdir);\n        probe_log(\"lfs_fs_pred -> %d\", err);\n        if (err && err != LFS_ERR_NOENT) {\n            probe_log(\"EXIT lfs_dir_orphaningcommit early (fs_pred err): %d\", err);\n            return err;\n        }\n        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));\n\n        // if we can't find dir, it must be new\n        if (err != LFS_ERR_NOENT) {\n            probe_log(\"Predicate found: cleaning up (err != NOENT)\");\n            if (lfs_gstate_hasorphans(&lfs->gstate)) {\n                // next step, clean up orphans\n                err = lfs_fs_preporphans(lfs, -(int8_t)hasparent);\n                probe_log(\"lfs_fs_preporphans(%d) -> %d\", -(int8_t)hasparent, err);\n                if (err) {\n                    probe_log(\"EXIT lfs_dir_orphaningcommit early (preporphans cleanup err): %d\", err);\n                    return err;\n                }\n            }\n\n            // fix pending move in this pair? this looks like an optimization\n            // but is in fact _required_ since relocating may outdate the move.\n            uint16_t moveid = 0x3ff;\n            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                moveid = lfs_tag_id(lfs->gstate.tag);\n                LFS_DEBUG(\"Fixing move while relocating \"\n                        \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                        pdir.pair[0], pdir.pair[1], moveid);\n                probe_log(\"Detected move here (pred): moveid=0x%03\" PRIx16, moveid);\n                lfs_fs_prepmove(lfs, 0x3ff, NULL);\n            }\n\n            // replace bad pair, either we clean up desync, or no desync occured\n            lpair[0] = pdir.pair[0];\n            lpair[1] = pdir.pair[1];\n            probe_log_pair(\"lpair replaced with pdir.pair\", lpair);\n            lfs_pair_tole32(ldir.pair);\n            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(\n                        {LFS_MKTAG_IF(moveid != 0x3ff,\n                            LFS_TYPE_DELETE, moveid, 0), NULL},\n                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),\n                            ldir.pair}),\n                    NULL);\n            lfs_pair_fromle32(ldir.pair);\n            probe_log(\"lfs_dir_relocatingcommit (pred replace) -> %d\", state);\n            if (state < 0) {\n                probe_log(\"EXIT lfs_dir_orphaningcommit early (pred reloc err): %d\", state);\n                return state;\n            }\n\n            ldir = pdir;\n        }\n    }\n\n    probe_log(\"EXIT lfs_dir_orphaningcommit: orphans=%d\", orphans);\n    return orphans ? LFS_OK_ORPHANED : 0;\n}\n"
}