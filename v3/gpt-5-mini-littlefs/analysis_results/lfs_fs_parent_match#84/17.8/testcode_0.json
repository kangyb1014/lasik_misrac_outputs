{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read the scalar parameters 'off' and 'size' are modified (off += diff; size -= diff;) inside the loop. This directly changes function parameters (not just the objects pointed-to), so Rule 17.8 is violated. (Note: modifying the local pointer 'data' or the contents of rcache->buffer is allowed; also modifying objects via pointer parameters is permitted, but altering the parameter variables 'off' and 'size' is not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/847.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent_match:\n```c\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent_match code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: append a single log entry to /tmp/logs/847.txt. */\nstatic void lfs_probe_log(const char *stage,\n        void *lfs_ptr, const void *disk_ptr,\n        unsigned long long off_val, unsigned long long size_val,\n        const void *child_ptr, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/847.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"STAGE=%s lfs=%p disk=%p off=%llu size=%llu err=%d child=%p\\n\",\n            stage, lfs_ptr, disk_ptr, off_val, size_val, err, child_ptr);\n    /* If child blocks are available, try to dump two 64-bit words (best-effort). */\n    if (child_ptr != NULL && err == 0) {\n        /* child is expected to be an array of two lfs_block_t values; print raw bytes */\n        const unsigned long long *u = (const unsigned long long*)child_ptr;\n        fprintf(f, \"  child[0]=%llu child[1]=%llu\\n\",\n                (unsigned long long)u[0], (unsigned long long)u[1]);\n    }\n\n    fclose(f);\n}\n\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n\n    /* Create local copies of the scalar parameters that are passed to lfs_bd_read.\n       This preserves original semantics while enabling us to log the values before\n       and after the call to detect any unexpected modifications. */\n    unsigned long long off_val = (unsigned long long)disk->off;\n    unsigned long long size_val = (unsigned long long)sizeof(child);\n\n    /* Log pre-call state */\n    lfs_probe_log(\"BEFORE_READ\", (void*)lfs, (const void*)disk,\n            off_val, size_val, NULL, -1);\n\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n\n    /* Log post-call state including returned error and child buffer contents. */\n    lfs_probe_log(\"AFTER_READ\", (void*)lfs, (const void*)disk,\n            off_val, size_val, (err == 0) ? (const void*)child : NULL, err);\n\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n"
}