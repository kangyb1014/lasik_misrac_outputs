{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read (called by lfs_fs_parent_match), the parameters 'off' and 'size' of lfs_bd_read are modified in the fragment (off += diff; size -= diff;). These are function parameters and are being written to, which violates MISRA C 2023 Rule 17.8. (The pointer 'buffer' is not modified directly; 'data' is a local pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/847.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent_match as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent_match:\n```c\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent_match code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Probe helpers for logging. These helpers do not modify their\n * parameters and therefore do not introduce a parameter-modification\n * violation. They create a log directory and append execution traces\n * to /tmp/logs/847.txt. */\nstatic void lfs_parent_match_ensure_log_dir(void) {\n    /* best-effort create directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void lfs_parent_match_log_before(void *lfs_ptr,\n        unsigned long long block, unsigned long long off, size_t size) {\n    lfs_parent_match_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/847.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"ENTER lfs_fs_parent_match: lfs=%p block=%llu off=%llu size=%zu\\n\",\n            lfs_ptr, block, off, size);\n    fclose(f);\n}\n\nstatic void lfs_parent_match_log_after(void *lfs_ptr, int err,\n        unsigned long long child0_pre, unsigned long long child1_pre,\n        unsigned long long child0_post, unsigned long long child1_post) {\n    lfs_parent_match_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/847.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"EXIT  lfs_fs_parent_match: lfs=%p err=%d\\n\",\n            lfs_ptr, err);\n    fprintf(f, \"  child (pre-conv):  [%llu, %llu]\\n\",\n            child0_pre, child1_pre);\n    fprintf(f, \"  child (post-conv): [%llu, %llu]\\n\",\n            child0_post, child1_post);\n    fclose(f);\n}\n\n/* Modified function: preserves original logic but adds logging probes. */\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n\n    /* Log inputs to the block device read. Use sizeof(child) as the\n     * requested size. Do not modify any function parameters. */\n    size_t read_size = sizeof(child);\n    lfs_parent_match_log_before((void*)lfs,\n            (unsigned long long)disk->block,\n            (unsigned long long)disk->off,\n            read_size);\n\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, read_size);\n\n    if (err) {\n        /* Log the error return so callers/reproducers can see the path */\n        lfs_parent_match_log_after((void*)lfs, err,\n                (unsigned long long)0, (unsigned long long)0,\n                (unsigned long long)0, (unsigned long long)0);\n        return err;\n    }\n\n    /* Capture values before and after the le32 conversion to show\n     * what lfs_bd_read provided and what lfs_pair_fromle32 changes. */\n    unsigned long long pre0 = (unsigned long long)child[0];\n    unsigned long long pre1 = (unsigned long long)child[1];\n\n    lfs_pair_fromle32(child);\n\n    unsigned long long post0 = (unsigned long long)child[0];\n    unsigned long long post1 = (unsigned long long)child[1];\n\n    /* Log the successful read and the child values. */\n    lfs_parent_match_log_after((void*)lfs, 0, pre0, pre1, post0, post1);\n\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n"
}