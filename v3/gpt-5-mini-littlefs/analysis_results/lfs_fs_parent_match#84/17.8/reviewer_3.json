{
  "user_message": "An agent A claimed that the following lfs_fs_parent_match code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_fs_parent_match.\n```c\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn lfs_bd_read, the scalar parameters 'off' and 'size' are modified in the fragment (off += diff; size -= diff;). This changes the function parameters passed by value, which violates MISRA C 2023 Rule 17.8. (Note: modifying the local pointer 'data' that was initialized from the parameter 'buffer' is allowed because the pointer parameter itself is not modified; modifying objects through pointer parameters like 'rcache' is also allowed.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 02 00 00 00 03 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 04 00 00 00 05 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 07 00 00 00 08 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 0a 00 00 00 0b 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 0f 00 00 00 10 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 12 00 00 00 13 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 17 00 00 00 18 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 1c 00 00 00 1d 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 1e 00 00 00 1f 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 21 00 00 00 22 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 24 00 00 00 25 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 29 00 00 00 2a 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 2c 00 00 00 2d 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 31 00 00 00 32 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 39 00 00 00 3a 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 3b 00 00 00 3c 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 3e 00 00 00 3f 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 41 00 00 00 42 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 46 00 00 00 47 00 00 00\nENTER lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, req_size=512\nEXIT lfs_fs_parent_match: lfs=0x7ffe91b76ce0, disk=0x7ffe91b76930, err=0, child_size=8\n  child raw: 49 00 00 00 4a 00 00\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_fs_parent_match:\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n...\nstruct lfs_diskoff {\n    lfs_block_t block;\n    lfs_off_t off;\n}\n...\ntypedef uint32_t lfs_tag_t\n...\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\nstatic inline void lfs_pair_fromle32(lfs_block_t pair[2]) {\n    pair[0] = lfs_fromle32(pair[0]);\n    pair[1] = lfs_fromle32(pair[1]);\n}\n...\nstatic inline int lfs_pair_cmp(\n        const lfs_block_t paira[2],\n        const lfs_block_t pairb[2]) {\n    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||\n             paira[0] == pairb[1] || paira[1] == pairb[0]);\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim as stated is incorrect. The function lfs_fs_parent_match itself does not modify any of its parameters (it only assigns local variables from them: find = data; disk = buffer; and casts away tag). The code that modifies parameters is lfs_bd_read, which increments off and decrements size inside its body. That is a violation of MISRA C 2023 Rule 17.8 (\u2018\u2018A function parameter should not be modified\u2019\u2019) in lfs_bd_read, not in lfs_fs_parent_match. Note also that assigning a local pointer (uint8_t *data = buffer) and modifying data is permitted by the rule because the pointer parameter buffer itself is not changed and objects referred to by pointer parameters may be modified. To fix the actual violation, make local copies of off and size in lfs_bd_read (e.g. lfs_off_t off_local = off; lfs_size_t size_local = size;) and operate on those, or document an approved deviation."
}