{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_prog (called by lfs_dir_commitprog) the value parameters 'off' and 'size' are modified inside the loop (statements: 'off += diff;' and 'size -= diff;'). MISRA C 2023 Rule 17.8 forbids modifying function parameters; only the object pointed to by a pointer parameter may be modified (but not the pointer itself). Although modifications to members of '*pcache' (e.g. 'pcache->block', 'pcache->off', 'pcache->size') are allowed, changing the scalar parameters 'off' and 'size' violates Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_commitprog code that contains useful probe functions that print useful logs to a file \"/tmp/logs/207.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_commitprog as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_commitprog:\n```c\nstatic int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,\n        const void *buffer, lfs_size_t size) {\n    int err = lfs_bd_prog(lfs,\n            &lfs->pcache, &lfs->rcache, false,\n            commit->block, commit->off ,\n            (const uint8_t*)buffer, size);\n    if (err) {\n        return err;\n    }\n\n    commit->crc = lfs_crc(commit->crc, buffer, size);\n    commit->off += size;\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_commitprog code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper to log control flow and state for lfs_dir_commitprog. */\nstatic void lfs_log_commitprog_state(const char *phase, lfs_t *lfs, struct lfs_commit *commit,\n        const void *buffer, lfs_size_t size, int err) {\n    FILE *f = fopen(\"/tmp/logs/207.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log basic phase and pointers */\n    fprintf(f, \"--- lfs_dir_commitprog %s ---\\n\", phase);\n    fprintf(f, \"lfs ptr: %p\\n\", (void*)lfs);\n    fprintf(f, \"commit ptr: %p\\n\", (void*)commit);\n\n    /* Log commit fields we rely on: block, off, size and crc. Use integer casts for safety. */\n    fprintf(f, \"commit->block: %llu\\n\", (unsigned long long)commit->block);\n    fprintf(f, \"commit->off: %llu\\n\", (unsigned long long)commit->off);\n    fprintf(f, \"commit->size (if present): %llu\\n\", (unsigned long long)commit->size);\n    fprintf(f, \"commit->crc: 0x%08\" PRIX32 \"\\n\", (uint32_t)commit->crc);\n\n    /* Log the buffer pointer and first up to 16 bytes as hex (if any) */\n    fprintf(f, \"buffer ptr: %p\\n\", (void*)buffer);\n    {\n        const uint8_t *b = (const uint8_t*)buffer;\n        lfs_size_t to_print = size;\n        if (to_print > 16) to_print = 16;\n        fprintf(f, \"buffer first %llu bytes:\", (unsigned long long)to_print);\n        for (lfs_size_t i = 0; i < to_print; i++) {\n            fprintf(f, \" %02X\", (unsigned)b[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"size (param): %llu\\n\", (unsigned long long)size);\n    fprintf(f, \"err (reported): %d\\n\", err);\n\n    /* Log addresses of internal caches used in the call to lfs_bd_prog to help trace what was passed. */\n    fprintf(f, \"&lfs->pcache: %p\\n\", (void*)&lfs->pcache);\n    fprintf(f, \"&lfs->rcache: %p\\n\", (void*)&lfs->rcache);\n\n    fprintf(f, \"--- end %s ---\\n\\n\", phase);\n    fclose(f);\n}\n\nstatic int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,\n        const void *buffer, lfs_size_t size) {\n    /* Log state before calling lfs_bd_prog so callers can reproduce values that may trigger violations. */\n    lfs_log_commitprog_state(\"before_bd_prog\", lfs, commit, buffer, size, 0);\n\n    int err = lfs_bd_prog(lfs,\n            &lfs->pcache, &lfs->rcache, false,\n            commit->block, commit->off ,\n            (const uint8_t*)buffer, size);\n\n    /* Log immediately after return from lfs_bd_prog to capture return value and any observable state. */\n    lfs_log_commitprog_state(\"after_bd_prog\", lfs, commit, buffer, size, err);\n\n    if (err) {\n        /* Log the error case explicitly for easier tracing. */\n        lfs_log_commitprog_state(\"error_return\", lfs, commit, buffer, size, err);\n        return err;\n    }\n\n    /* Log before updating crc and off so we have full trace of the state before mutation. */\n    lfs_log_commitprog_state(\"before_crc_and_off_update\", lfs, commit, buffer, size, 0);\n\n    commit->crc = lfs_crc(commit->crc, buffer, size);\n\n    /* Log after crc update, before off increment */\n    lfs_log_commitprog_state(\"after_crc_before_off\", lfs, commit, buffer, size, 0);\n\n    commit->off += size;\n\n    /* Final state log so callers can observe the final commit->off and commit->crc. */\n    lfs_log_commitprog_state(\"final\", lfs, commit, buffer, size, 0);\n\n    return 0;\n}\n"
}