{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe following controlling expression is invariant: the code does int err = LFS_LOCK(lfs->cfg); and LFS_LOCK is defined as ((void)cfg,0), so err is always 0. The subsequent controlling expression if (err) therefore becomes if (0) (always false) which is an invariant controlling expression and violates MISRA C 2023 Rule 14.3. The assignment statement itself is not a controlling expression, but it produces an invariant controlling expression later; the allowed exceptions (infinite loops or the permitted do-while pattern) do not apply to this if-statement.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/635.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logger that appends human-readable traces to /tmp/logs/635.txt.\n * Kept minimal and side-effect free as possible (checks for fopen success).\n */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/635.txt\", \"a\");\n    if (f) {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fputc('\\n', f);\n        fclose(f);\n    }\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    /* Capture the return of LFS_LOCK so we can observe invariant behavior. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and the value returned by LFS_LOCK. */\n    lfs_log_probe(\"ENTER lfs_file_sync: lfs=%p file=%p cfg=%p LFS_LOCK returned=%d\",\n                  (void*)lfs, (void*)file, (void*)lfs->cfg, err);\n\n    if (err) {\n        /* Log the early-return path with the error value. */\n        lfs_log_probe(\"lfs_file_sync: early return due to err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    /* Log the result of the internal sync operation. */\n    lfs_log_probe(\"lfs_file_sync: lfs_file_sync_ returned=%d\", err);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log that we have unlocked and the final return value. */\n    lfs_log_probe(\"lfs_file_sync: unlocked cfg=%p returning=%d\", (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}