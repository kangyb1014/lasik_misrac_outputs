{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro expands to ((void)cfg, 0). The sub-expression (void)cfg is evaluated (executed) but has no side\u2011effects and does not affect program behaviour; removing that cast/expression would not change the observable behaviour of the program. Therefore the code contains executed no\u2011op operations (dead code). For example, in lfs_file_sync the call int err = LFS_LOCK(lfs->cfg); always yields 0 and the (void)lfs->cfg has no effect, so that operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log to /tmp/logs/632.txt. Kept minimal to avoid changing logic. */\nstatic void lfs_probe_log_lock_attempt(const void *lfs_ptr, const void *file_ptr, const void *cfg_ptr) {\n    FILE *f = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"PROBE: attempting LFS_LOCK -> lfs=%p file=%p cfg=%p\\n\",\n            lfs_ptr, file_ptr, cfg_ptr);\n    fclose(f);\n}\n\nstatic void lfs_probe_log_lock_result(const void *lfs_ptr, const void *file_ptr, const void *cfg_ptr, int err) {\n    FILE *f = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"PROBE: LFS_LOCK returned %d -> lfs=%p file=%p cfg=%p\\n\",\n            err, lfs_ptr, file_ptr, cfg_ptr);\n    fclose(f);\n}\n\nstatic void lfs_probe_log_early_return(const void *lfs_ptr, const void *file_ptr, int err) {\n    FILE *f = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"PROBE: early return from lfs_file_sync -> err=%d lfs=%p file=%p\\n\",\n            err, lfs_ptr, file_ptr);\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    /* Log the attempt and the cfg pointer prior to calling LFS_LOCK. This\n       captures the fact that the (void)cfg sub-expression is evaluated by the\n       macro expansion and lets observers see the cfg pointer value and the\n       resulting return value from the macro call. */\n    lfs_probe_log_lock_attempt((const void*)lfs, (const void*)file,\n                               (const void*)(lfs ? lfs->cfg : NULL));\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock call and the pointers involved. */\n    lfs_probe_log_lock_result((const void*)lfs, (const void*)file,\n                              (const void*)(lfs ? lfs->cfg : NULL), err);\n\n    if (err) {\n        /* Log the early return so test harnesses can see the control path. */\n        lfs_probe_log_early_return((const void*)lfs, (const void*)file, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    lfs_probe_log_early_return((const void*)lfs, (const void*)file, err);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}