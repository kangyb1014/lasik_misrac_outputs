{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); invokes lfs_mlist_isopen which has no side-effects (it only traverses the list and returns true/false). The assert macro expands to nothing in release builds (when NDEBUG is defined), so the call is removed and its removal does not change program behaviour (aside from diagnostic/abort on failed assert). Because the executed operation has no effect on program state, it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a simple log entry to /tmp/logs/632.txt.\n   Keeps minimal behaviour impact and preserves original function logic. */\nstatic void lfs_file_sync_probe(const char *stage, const void *lfs, const void *file, int isopen)\n{\n    FILE *fp = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log the stage, pointers and the result of lfs_mlist_isopen (0/1). */\n    fprintf(fp, \"%s: lfs=%p file=%p lfs_mlist_isopen=%d\\n\", stage, lfs, file, isopen);\n    fclose(fp);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Probe before the assertion: record whether the file appears open.\n       This call mirrors the check inside LFS_ASSERT so that logs capture\n       the state even if the assert expands to nothing in release builds. */\n    int probe_isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_file_sync_probe(\"before_assert\", (void*)lfs, (void*)file, probe_isopen);\n\n    /* Original assertion kept intact to preserve original logic. */\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe after the assertion to capture any change (there should be none).\n       This helps demonstrate that removing the assert (and its call) does not\n       alter program state (lfs_mlist_isopen has no side-effects). */\n    probe_isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_file_sync_probe(\"after_assert\", (void*)lfs, (void*)file, probe_isopen);\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}