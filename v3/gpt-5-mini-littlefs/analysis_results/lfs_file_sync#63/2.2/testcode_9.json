{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg); is a reachable operation but the macro is defined as #define LFS_UNLOCK(cfg) ((void)cfg), i.e. a pure no-op with no side-effects. Removing that statement would not change program behaviour in the given project configuration, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/632.txt */\nstatic void lfs_probe_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1) {\n        fprintf(f, \"[%ld] \", (long)t);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Structured probe entry to record key state for lfs_file_sync */\nstatic void lfs_log_probe_state(lfs_t *lfs, lfs_file_t *file, const char *stage, int err)\n{\n    /* Log pointers and the error code. The cfg pointer is included because\n       LFS_UNLOCK is called with lfs->cfg in the target code; this helps\n       reproduce that the unlock call receives the cfg pointer even if it's a no-op. */\n    void *cfgptr = NULL;\n    if (lfs != NULL) {\n        cfgptr = (void*)lfs->cfg;\n    }\n\n    lfs_probe_write(\"%s: lfs=%p file=%p cfg=%p err=%d\",\n                    stage, (void*)lfs, (void*)file, cfgptr, err);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry */\n    lfs_log_probe_state(lfs, file, \"enter\", 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_log_probe_state(lfs, file, \"after_lock\", err);\n    if (err) {\n        lfs_probe_write(\"lfs_file_sync: returning due to lock error %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    /* Probe just before unlock to capture state and the cfg pointer passed */\n    lfs_log_probe_state(lfs, file, \"before_unlock\", err);\n\n    /* The call under inspection. We keep it in place to preserve original\n       semantics and to produce a trace that the call was made with the\n       given configuration pointer. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe immediately after unlock to show that control returns here\n       and no observable state change (from this function's perspective)\n       occurred across the unlock call. */\n    lfs_log_probe_state(lfs, file, \"after_unlock\", err);\n\n    return err;\n}\n"
}