{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_dir_tell_ is declared as lfs_dir_tell_(lfs_t *lfs, lfs_dir_t *dir) but neither parameter is modified: lfs is unused and dir is only read (return dir->pos). According to MISRA C 2023 Rule 8.13, these pointer parameters should be const-qualified (e.g. const lfs_t *lfs, const lfs_dir_t *dir).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe helper: logs state to /tmp/logs/433.txt without changing program logic. */\nstatic void lfs_dir_tell_probe_log(const char *stage, lfs_t *lfs, lfs_dir_t *dir, lfs_soff_t extra_pos)\n{\n    FILE *f;\n    /* Try to create directory if it doesn't exist; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/433.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log pointers and the dir->pos we observed. Use caution: only read fields that\n       are used elsewhere in this function to avoid changing behavior. */\n    fprintf(f, \"%s: lfs=%p, lfs->cfg=%p, dir=%p, dir->pos=%lld\\n\",\n            stage,\n            (void *)lfs,\n            (void *)(lfs ? lfs->cfg : NULL),\n            (void *)dir,\n            (long long)extra_pos);\n\n    fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that lock failed and the parameters as observed at this point. */\n        lfs_dir_tell_probe_log(\"lfs_dir_tell: lock_failed\", lfs, dir, (lfs_soff_t)0);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Capture observed state before calling the underlying function. */\n    lfs_soff_t observed_pos = (dir ? dir->pos : (lfs_soff_t)0);\n    lfs_dir_tell_probe_log(\"lfs_dir_tell: before\", lfs, dir, observed_pos);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    /* Capture observed state after the call to check for modifications. */\n    lfs_soff_t observed_pos_after = (dir ? dir->pos : (lfs_soff_t)0);\n    lfs_dir_tell_probe_log(\"lfs_dir_tell: after\", lfs, dir, observed_pos_after);\n\n    /* Additional concise comparison log entry to make it explicit whether dir->pos changed. */\n    {\n        FILE *f = fopen(\"/tmp/logs/433.txt\", \"a\");\n        if (f) {\n            if (observed_pos == observed_pos_after) {\n                fprintf(f, \"lfs_dir_tell: dir->pos unchanged (%lld)\\n\", (long long)observed_pos_after);\n            } else {\n                fprintf(f, \"lfs_dir_tell: dir->pos changed from %lld to %lld\\n\",\n                        (long long)observed_pos, (long long)observed_pos_after);\n            }\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_tell -> %\" PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}