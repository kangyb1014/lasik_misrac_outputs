{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the expression ((void)cfg), so calls like LFS_UNLOCK(lfs->cfg); become a statement that only evaluates and discards cfg. In the provided lfs_dir_tell function this operation has no observable effect (lfs->cfg is a plain member access), so removing the LFS_UNLOCK call would not change program behaviour. Therefore the statement is an executed no-op and constitutes dead code (violates MISRA C 2023 Rule 2.2). Note: if the cfg expression had side-effects or involved volatile accesses, the evaluation could be observable and this specific instance would not be dead; however in the given code it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/432.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/*\n * Probe helper: append a concise log entry to /tmp/logs/432.txt.\n * Does not modify program state; only performs FILE I/O.\n */\nstatic void lfs_log_probe(const char *stage, lfs_t *lfs, lfs_dir_t *dir,\n    lfs_soff_t res, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/432.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log the control point, pointers and numerical status. */\n    fprintf(f, \"%s: lfs=%p dir=%p err=%d res=%\" PRIdMAX \"\\n\",\n        stage, (void*)lfs, (void*)dir, err, (intmax_t)res);\n    fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to acquire lock and return value. */\n        lfs_log_probe(\"lfs_dir_tell: lock_failed\", lfs, dir, 0, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Log before calling the core helper. */\n    lfs_log_probe(\"lfs_dir_tell: before_tell\", lfs, dir, 0, 0);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\" PRId32, res);\n\n    /* Log right before the unlock call so we capture pre-unlock state. */\n    lfs_log_probe(\"lfs_dir_tell: before_unlock\", lfs, dir, res, 0);\n\n    /* The suspicious call: expected to be a no-op (expands to ((void)cfg)). */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log immediately after the unlock call to capture post-unlock state.\n     * If LFS_UNLOCK is a no-op, the before/after logs should show the same\n     * observable information (same pointers and res/err). This provides\n     * evidence that the call has no observable effect in this context.\n     */\n    lfs_log_probe(\"lfs_dir_tell: after_unlock\", lfs, dir, res, 0);\n\n    return res;\n}\n"
}