{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(lfs->cfg); invocation expands to ((void)lfs->cfg) per the provided macro definition. That expansion is a no-op (only a cast to void) and has no effect at runtime; removing that statement would not change program behaviour. Therefore this executed statement meets the definition of dead code in Rule 2.2 for the given project configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/432.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe helper: append a single-line log entry to /tmp/logs/432.txt. */\nstatic void lfs_dir_tell_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/432.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the failed lock path and state so callers can reproduce path where function returns early. */\n        lfs_dir_tell_probe(\"lfs_dir_tell: LFS_LOCK failed: err=%d, lfs=%p, cfg=%p, dir=%p\",\n            err, (void*)lfs, (void*)lfs->cfg, (void*)dir);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Record entry into the core operation and current relevant state. */\n    lfs_dir_tell_probe(\"lfs_dir_tell: entered core: lfs=%p, cfg=%p, dir=%p\",\n        (void*)lfs, (void*)lfs->cfg, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\" PRId32, res);\n\n    /* Log state immediately before calling LFS_UNLOCK so we can observe that the unlock call\n       does not change observable state when it expands to ((void)lfs->cfg). */\n    lfs_dir_tell_probe(\"lfs_dir_tell: before LFS_UNLOCK: lfs=%p, cfg=%p, dir=%p, res=%\" PRId32,\n        (void*)lfs, (void*)lfs->cfg, (void*)dir, res);\n\n    /* Original call preserved exactly to keep logic intact. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log state immediately after LFS_UNLOCK. If LFS_UNLOCK is a no-op (e.g. expands to ((void)lfs->cfg)),\n       the before/after lines will be identical, providing evidence of the reported dead-code/no-op. */\n    lfs_dir_tell_probe(\"lfs_dir_tell: after  LFS_UNLOCK: lfs=%p, cfg=%p, dir=%p, res=%\" PRId32,\n        (void*)lfs, (void*)lfs->cfg, (void*)dir, res);\n\n    return res;\n}"
}