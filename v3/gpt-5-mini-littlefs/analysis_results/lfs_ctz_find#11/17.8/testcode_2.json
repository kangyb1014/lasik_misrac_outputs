{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the non-pointer parameter 'head' (lfs_block_t) is being modified in the function. The statement 'head = lfs_fromle32(head);' assigns to the parameter (and earlier lfs_bd_read writes into &head), which violates MISRA C 2023 Rule 17.8 (function parameters shall not be modified). Use a local copy variable if mutation is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/117.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_find:\n```c\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        if (err) {\n            return err;\n        }\n\n        current -= 1 << skip;\n    }\n\n    *block = head;\n    *off = pos;\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging function to capture control flow and state. */\nstatic void lfs_ctz_log(const char *stage,\n        unsigned long long head_val,\n        unsigned long long size_val,\n        unsigned long long pos_val,\n        long long current_val,\n        long long target_val,\n        unsigned long long skip_val,\n        int err_val) {\n    FILE *f = fopen(\"/tmp/logs/117.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: head=%llu size=%llu pos=%llu current=%lld target=%lld skip=%llu err=%d\\n\",\n            stage, head_val, size_val, pos_val, current_val, target_val, skip_val, err_val);\n    fclose(f);\n}\n\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    /* Log entry state */\n    lfs_ctz_log(\"entry\", (unsigned long long)head, (unsigned long long)size,\n            (unsigned long long)pos, -1, -1, 0, 0);\n\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        lfs_ctz_log(\"size_zero\", (unsigned long long)head, (unsigned long long)size,\n                (unsigned long long)pos, -1, -1, 0, 0);\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    /* Log computed indices */\n    lfs_ctz_log(\"indices_computed\", (unsigned long long)head, (unsigned long long)size,\n            (unsigned long long)pos, (long long)current, (long long)target, 0, 0);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        /* Log before bd_read */\n        lfs_ctz_log(\"before_bd_read\", (unsigned long long)head, (unsigned long long)size,\n                (unsigned long long)pos, (long long)current, (long long)target, (unsigned long long)skip, 0);\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n\n        /* Log immediately after bd_read (raw value written into head) */\n        lfs_ctz_log(\"after_bd_read_raw\", (unsigned long long)head, (unsigned long long)size,\n                (unsigned long long)pos, (long long)current, (long long)target, (unsigned long long)skip, err);\n\n        head = lfs_fromle32(head);\n\n        /* Log after endianness conversion and assignment to parameter 'head' */\n        lfs_ctz_log(\"after_fromle32\", (unsigned long long)head, (unsigned long long)size,\n                (unsigned long long)pos, (long long)current, (long long)target, (unsigned long long)skip, err);\n\n        if (err) {\n            return err;\n        }\n\n        current -= 1 << skip;\n\n        /* Log loop iteration end state */\n        lfs_ctz_log(\"loop_iteration_end\", (unsigned long long)head, (unsigned long long)size,\n                (unsigned long long)pos, (long long)current, (long long)target, (unsigned long long)skip, 0);\n    }\n\n    *block = head;\n    *off = pos;\n\n    lfs_ctz_log(\"exit\", (unsigned long long)head, (unsigned long long)size,\n            (unsigned long long)pos, (long long)current, (long long)target, 0, 0);\n\n    return 0;\n}\n"
}