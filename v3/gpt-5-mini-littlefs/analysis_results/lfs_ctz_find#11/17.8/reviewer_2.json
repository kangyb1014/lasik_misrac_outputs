{
  "user_message": "An agent A claimed that the following lfs_ctz_find code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_ctz_find.\n```c\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        if (err) {\n            return err;\n        }\n\n        current -= 1 << skip;\n    }\n\n    *block = head;\n    *off = pos;\n    return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation: the non-pointer parameter 'head' (lfs_block_t) is being modified in the function. The statement 'head = lfs_fromle32(head);' assigns to the parameter (and earlier lfs_bd_read writes into &head), which violates MISRA C 2023 Rule 17.8 (function parameters shall not be modified). Use a local copy variable if mutation is required.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nentry: head=1965 size=343060 pos=0 current=-1 target=-1 skip=0 err=0\nindices_computed: head=1965 size=343060 pos=0 current=680 target=0 skip=0 err=0\nbefore_bd_read: head=1965 size=343060 pos=0 current=680 target=0 skip=3 err=0\nafter_bd_read_raw: head=1957 size=343060 pos=0 current=680 target=0 skip=3 err=0\nafter_fromle32: head=1957 size=343060 pos=0 current=680 target=0 skip=3 err=0\nloop_iteration_end: head=1957 size=343060 pos=0 current=672 target=0 skip=3 err=0\nbefore_bd_read: head=1957 size=343060 pos=0 current=672 target=0 skip=5 err=0\nafter_bd_read_raw: head=1925 size=343060 pos=0 current=672 target=0 skip=5 err=0\nafter_fromle32: head=1925 size=343060 pos=0 current=672 target=0 skip=5 err=0\nloop_iteration_end: head=1925 size=343060 pos=0 current=640 target=0 skip=5 err=0\nbefore_bd_read: head=1925 size=343060 pos=0 current=640 target=0 skip=7 err=0\nafter_bd_read_raw: head=1797 size=343060 pos=0 current=640 target=0 skip=7 err=0\nafter_fromle32: head=1797 size=343060 pos=0 current=640 target=0 skip=7 err=0\nloop_iteration_end: head=1797 size=343060 pos=0 current=512 target=0 skip=7 err=0\nbefore_bd_read: head=1797 size=343060 pos=0 current=512 target=0 skip=9 err=0\nafter_bd_read_raw: head=1283 size=343060 pos=0 current=512 target=0 skip=9 err=0\nafter_fromle32: head=1283 size=343060 pos=0 current=512 target=0 skip=9 err=0\nloop_iteration_end: head=1283 size=343060 pos=0 current=0 target=0 skip=9 err=0\nexit: head=1283 size=343060 pos=0 current=0 target=0 skip=0 err=0\nentry: head=1965 size=343060 pos=512 current=-1 target=-1 skip=0 err=0\nindices_computed: head=1965 size=343060 pos=4 current=680 target=1 skip=0 err=0\nbefore_bd_read: head=1965 size=343060 pos=4 current=680 target=1 skip=3 err=0\nafter_bd_read_raw: head=1957 size=343060 pos=4 current=680 target=1 skip=3 err=0\nafter_fromle32: head=1957 size=343060 pos=4 current=680 target=1 skip=3 err=0\nloop_iteration_end: head=1957 size=343060 pos=4 current=672 target=1 skip=3 err=0\nbefore_bd_read: head=1957 size=343060 pos=4 current=672 target=1 skip=5 err=0\nafter_bd_read_raw: head=1925 size=343060 pos=4 current=672 target=1 skip=5 err=0\nafter_fromle32: head=1925 size=343060 pos=4 current=672 target=1 skip=5 err=0\nloop_iteration_end: head=1925 size=343060 pos=4 current=640 target=1 skip=5 err=0\nbefore_bd_read: head=1925 size=343060 pos=4 current=640 target=1 skip=7 err=0\nafter_bd_read_raw: head=1797 size=343060 pos=4 current=640 target=1 skip=7 err=0\nafter_fromle32: head=1797 size=343060 pos=4 current=640 target=1 skip=7 err=0\nloop_iteration_end: head=1797 size=343060 pos=4 current=512 target=1 skip=7 err=0\nbefore_bd_read: head=1797 size=343060 pos=4 current=512 target=1 skip=8 err=0\nafter_bd_read_raw: head=1539 size=343060 pos=4 current=512 target=1 skip=8 err=0\nafter_fromle32: head=1539 size=343060 pos=4 current=512 target=1 skip=8 err=0\nloop_iteration_end: head=1539 size=343060 pos=4 current=256 target=1 skip=8 err=0\nbefore_bd_read: head=1539 size=343060 pos=4 current=256 target=1 skip=7 err=0\nafter_bd_read_raw: head=1411 size=343060 pos=4 current=256 target=1 skip=7 err=0\nafter_fromle32: head=1411 size=343060 pos=4 current=256 target=1 skip=7 err=0\nloop_iteration_end: head=1411 size=343060 pos=4 current=128 target=1 skip=7 err=0\nbefore_bd_read: head=1411 size=343060 pos=4 current=128 target=1 skip=6 err=0\nafter_bd_read_raw: head=1347 size=343060 pos=4 current=128 target=1 skip=6 err=0\nafter_fromle32: head=1347 size=343060 pos=4 current=128 target=1 skip=6 err=0\nloop_iteration_end: head=1347 size=343060 pos=4 current=64 target=1 skip=6 err=0\nbefore_bd_read: head=1347 size=343060 pos=4 current=64 target=1 skip=5 err=0\nafter_bd_read_raw: head=1315 size=343060 pos=4 current=64 target=1 skip=5 err=0\nafter_fromle32: head=1315 size=343060 pos=4 current=64 target=1 skip=5 err=0\nloop_iteration_end: head=1315 size=343060 pos=4 current=32 target=1 skip=5 err=0\nbefore_bd_read: head=1315 size=343060 pos=4 current=32 target=1 skip=4 err=0\nafter_bd_read_raw: head=1299 size=343060 pos=4 current=32 target=1 skip=4 err=0\nafter_fromle32: head=1299 size=343060 pos=4 current=32 target=1 skip=4 \n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_ctz_find:\nstatic int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {\n    lfs_off_t size = *off;\n    lfs_off_t b = lfs->cfg->block_size - 2*4;\n    lfs_off_t i = size / b;\n    if (i == 0) {\n        return 0;\n    }\n\n    i = (size - 4*(lfs_popc(i-1)+2)) / b;\n    *off = size - b*i - 4*lfs_popc(i);\n    return i;\n}\n...\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\ntypedef uint32_t lfs_block_t\n...\ntypedef uint32_t lfs_off_t\n...\ntypedef uint32_t lfs_size_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C:2023 Rule 17.8 states a function parameter shall not be modified. In lfs_ctz_find the parameter head is a non-pointer parameter (lfs_block_t head) and is modified inside the function: it is passed by address to lfs_bd_read (&head) which writes into that parameter variable, and it is later assigned to (head = lfs_fromle32(head)); both actions modify the parameter object. This violates Rule 17.8. The proper fix is to use a local variable (e.g. lfs_block_t cur = head) and pass &cur and assign/convert cur, leaving the parameter unmodified."
}