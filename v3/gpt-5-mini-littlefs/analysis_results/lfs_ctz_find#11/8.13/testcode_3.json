{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_ctz_index(lfs, &pos) passes the address of the non-const local parameter pos (type lfs_size_t) rather than a pointer to a const-qualified object. Earlier in the function a compound literal &(lfs_off_t){size-1} is used, which implies the callee only needs read-only access. Therefore the pointer argument should refer to a const-qualified type (for example by passing &(const lfs_off_t){pos} or by making the function parameter a pointer-to-const). As written, this use of &pos violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_find:\n```c\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        if (err) {\n            return err;\n        }\n\n        current -= 1 << skip;\n    }\n\n    *block = head;\n    *off = pos;\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void lfs_log_ctz_find(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/113.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    /* Log entry and inputs */\n    lfs_log_ctz_find(\"ENTER lfs_ctz_find: head=%llu size=%llu pos=%llu block_ptr=%p off_ptr=%p\\n\",\n            (unsigned long long)head,\n            (unsigned long long)size,\n            (unsigned long long)pos,\n            (void*)block,\n            (void*)off);\n\n    if (size == 0) {\n        lfs_log_ctz_find(\"size == 0: setting block = LFS_BLOCK_NULL, off = 0\\n\");\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        lfs_log_ctz_find(\"EXIT lfs_ctz_find: returned 0 (empty)\\n\");\n        return 0;\n    }\n\n    /* Capture address of the compound-literal-like object we will pass\n       to lfs_ctz_index so we can log its address and demonstrate the\n       contrast with the address of the non-const local parameter pos. */\n    const lfs_off_t *pliteral = &(lfs_off_t){size-1};\n    lfs_log_ctz_find(\"pliteral addr=%p (from &(lfs_off_t){size-1})\\n\", (void*)pliteral);\n\n    lfs_off_t current = lfs_ctz_index(lfs, pliteral);\n    lfs_log_ctz_find(\"after lfs_ctz_index(current): current=%lld\\n\", (long long)current);\n\n    /* Log that &pos (address of non-const local parameter) is passed below */\n    lfs_log_ctz_find(\"about to call lfs_ctz_index with &pos: addr_of_pos=%p pos_value=%llu\\n\",\n            (void*)&pos, (unsigned long long)pos);\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n    lfs_log_ctz_find(\"after lfs_ctz_index(target): target=%lld\\n\", (long long)target);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        lfs_log_ctz_find(\"loop iteration: current=%lld target=%lld skip=%llu head_before_read=%llu\\n\",\n                (long long)current, (long long)target, (unsigned long long)skip, (unsigned long long)head);\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n\n        lfs_log_ctz_find(\"bd_read returned err=%d head_after_read=%llu\\n\",\n                err, (unsigned long long)head);\n\n        if (err) {\n            lfs_log_ctz_find(\"EXIT lfs_ctz_find: returned err=%d\\n\", err);\n            return err;\n        }\n\n        current -= 1 << skip;\n        lfs_log_ctz_find(\"updated current=%lld (after subtracting 1<<skip)\\n\", (long long)current);\n    }\n\n    *block = head;\n    *off = pos;\n\n    lfs_log_ctz_find(\"EXIT lfs_ctz_find: block=%llu off=%lld return=0\\n\",\n            (unsigned long long)*block, (long long)*off);\n    return 0;\n}\n"
}