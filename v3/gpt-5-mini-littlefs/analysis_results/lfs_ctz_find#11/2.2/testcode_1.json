{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a compound literal &(lfs_off_t){0} for the out parameter 'off'. Inside lfs_ctz_find the function unconditionally performs '*off = pos;'. That write is executed but its result is never observed by the caller (the temporary is not used later), so the write is an operation whose removal would not affect program behaviour for this call \u2014 i.e. dead code (a dead store).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/112.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_find:\n```c\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    if (size == 0) {\n        *block = LFS_BLOCK_NULL;\n        *off = 0;\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target = lfs_ctz_index(lfs, &pos);\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n        if (err) {\n            return err;\n        }\n\n        current -= 1 << skip;\n    }\n\n    *block = head;\n    *off = pos;\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_find code.\n",
  "test_code": "#include <stdio.h>\n\nstatic int lfs_ctz_find(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {\n    /* Open log file for append. We keep each log entry self-contained to\n       help reproduce the scenario where the caller passes a compound literal\n       address for `off` (e.g. &(lfs_off_t){0}). */\n    FILE *log = fopen(\"/tmp/logs/112.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_ctz_find: size=%llu pos=%llu head=%llu block=%p off=%p\\n\",\n                (unsigned long long)size,\n                (unsigned long long)pos,\n                (unsigned long long)head,\n                (void*)block,\n                (void*)off);\n        fflush(log);\n    }\n\n    if (size == 0) {\n        if (log) {\n            fprintf(log, \"branch: size==0 -> setting *block=LFS_BLOCK_NULL and *off=0\\n\");\n            fflush(log);\n        }\n\n        *block = LFS_BLOCK_NULL;\n\n        /* Probe the out-parameter `off`. If the caller passed a temporary\n           compound literal (e.g. &(lfs_off_t){0}), this pointer will be\n           non-NULL and point into the caller's stack -- the write below will\n           modify memory that the caller may not observe. Log before/after\n           values to provide evidence of the store. */\n        if (off) {\n            /* Safe guarded read/write: only if off is non-NULL. */\n            lfs_off_t oldval = *off;\n            if (log) {\n                fprintf(log, \"before write (size==0): off=%p old=*off=%lld\\n\",\n                        (void*)off, (long long)oldval);\n                fflush(log);\n            }\n            *off = 0;\n            if (log) {\n                fprintf(log, \"after write (size==0): off=%p new=*off=%lld\\n\",\n                        (void*)off, (long long)*off);\n                fflush(log);\n            }\n        } else {\n            if (log) { fprintf(log, \"off is NULL, skipping probe write\\n\"); fflush(log); }\n        }\n\n        if (log) { fclose(log); }\n        return 0;\n    }\n\n    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_off_t target  = lfs_ctz_index(lfs, &pos);\n\n    if (log) {\n        fprintf(log, \"computed indices: current=%lld target=%lld\\n\",\n                (long long)current, (long long)target);\n        fflush(log);\n    }\n\n    while (current > target) {\n        lfs_size_t skip = lfs_min(\n                lfs_npw2(current-target+1) - 1,\n                lfs_ctz(current));\n\n        if (log) {\n            fprintf(log, \"loop iter: current=%lld target=%lld skip=%llu head(before read)=%llu\\n\",\n                    (long long)current, (long long)target,\n                    (unsigned long long)skip, (unsigned long long)head);\n            fflush(log);\n        }\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, sizeof(head),\n                head, 4*skip, &head, sizeof(head));\n        head = lfs_fromle32(head);\n\n        if (log) {\n            fprintf(log, \"bd_read -> err=%d head(after le32)=%llu\\n\",\n                    err, (unsigned long long)head);\n            fflush(log);\n        }\n\n        if (err) {\n            if (log) { fprintf(log, \"early return due to err=%d\\n\", err); fclose(log); }\n            return err;\n        }\n\n        current -= 1 << skip;\n    }\n\n    if (log) {\n        fprintf(log, \"after loop: head=%llu current=%lld target=%lld\\n\",\n                (unsigned long long)head, (long long)current, (long long)target);\n        fflush(log);\n    }\n\n    /* Preserve original behavior: assign block and off. Insert probes around\n       the write to *off so that the call-site using a compound literal as\n       an out-parameter can be observed (dead store evidence). */\n    *block = head;\n\n    if (log) {\n        if (off) {\n            lfs_off_t before = *off;\n            fprintf(log, \"before final write: off=%p *off(before)=%lld pos=%llu\\n\",\n                    (void*)off, (long long)before, (unsigned long long)pos);\n            fflush(log);\n        } else {\n            fprintf(log, \"off is NULL before final write\\n\"); fflush(log);\n        }\n    }\n\n    if (off) {\n        *off = pos;\n    }\n\n    if (log) {\n        if (off) {\n            fprintf(log, \"after final write: off=%p *off(after)=%lld\\n\",\n                    (void*)off, (long long)*off);\n        }\n        fprintf(log, \"EXIT lfs_ctz_find returning 0\\n\");\n        fflush(log);\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}