{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)buffer;' is an expression statement with no side-effects and exists only to suppress an \"unused parameter\" warning. Removing it would not affect program behaviour, so it constitutes dead code in violation of MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_traverse_filter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/452.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_traverse_filter as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_traverse_filter:\n```c\nstatic int lfs_dir_traverse_filter(void *p,\n        lfs_tag_t tag, const void *buffer) {\n    lfs_tag_t *filtertag = p;\n    (void)buffer;\n\n    // which mask depends on unique bit in tag structure\n    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))\n            ? LFS_MKTAG(0x7ff, 0x3ff, 0)\n            : LFS_MKTAG(0x700, 0x3ff, 0);\n\n    // check for redundancy\n    if ((mask & tag) == (mask & *filtertag) ||\n            lfs_tag_isdelete(*filtertag) ||\n            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (\n                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {\n        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);\n        return true;\n    }\n\n    // check if we need to adjust for created/deleted tags\n    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {\n        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n    }\n\n    return false;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_traverse_filter code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe/logging helpers. These preserve program logic and only add\n   diagnostic side-effects (file logging) to help reproduce the\n   violation scenario. */\nstatic void lfs_probe_ensure_dir(void) {\n    /* best-effort create directory /tmp/logs; ignore errors if it exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void lfs_probe_log_state(const char *stage, lfs_tag_t tag,\n        const lfs_tag_t *filtertag, const void *buffer) {\n    FILE *f;\n    lfs_probe_ensure_dir();\n    f = fopen(\"/tmp/logs/452.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Print stage, raw tag values and pointer to buffer so callers can\n       observe that 'buffer' is unused in control flow (evidence for\n       the '(void)buffer;' statement being dead code). */\n    fprintf(f, \"%s: tag=0x%llx filtertag=0x%llx filtertag_raw=%llu buffer=%p\\n\",\n            stage,\n            (unsigned long long)tag,\n            (unsigned long long)*filtertag,\n            (unsigned long long)*filtertag,\n            buffer);\n    fclose(f);\n}\n\n/* Modified function with logging probes. Original logic preserved. */\nstatic int lfs_dir_traverse_filter(void *p,\n        lfs_tag_t tag, const void *buffer) {\n    lfs_tag_t *filtertag = p;\n    (void)buffer;\n\n    /* Log entry and that buffer is intentionally unused. */\n    lfs_probe_log_state(\"entry\", tag, filtertag, buffer);\n\n    /* which mask depends on unique bit in tag structure */\n    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))\n            ? LFS_MKTAG(0x7ff, 0x3ff, 0)\n            : LFS_MKTAG(0x700, 0x3ff, 0);\n\n    lfs_probe_log_state(\"after_mask\", tag, filtertag, buffer);\n\n    /* check for redundancy */\n    bool cond1 = ((mask & tag) == (mask & *filtertag));\n    bool cond2 = lfs_tag_isdelete(*filtertag);\n    bool cond3 = ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (\n                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag)));\n\n    /* Log evaluation of redundancy subconditions for reproducibility */\n    {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"redundancy_check: cond1=%d cond2=%d cond3=%d\\n\",\n                    (int)cond1, (int)cond2, (int)cond3);\n            fclose(f);\n        }\n    }\n\n    if (cond1 || cond2 || cond3) {\n        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);\n        lfs_probe_log_state(\"redundant_taken\", tag, filtertag, buffer);\n        return true;\n    }\n\n    lfs_probe_log_state(\"redundant_not_taken\", tag, filtertag, buffer);\n\n    /* check if we need to adjust for created/deleted tags */\n    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {\n        lfs_probe_log_state(\"splice_before_adjust\", tag, filtertag, buffer);\n        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n        lfs_probe_log_state(\"splice_after_adjust\", tag, filtertag, buffer);\n    }\n\n    lfs_probe_log_state(\"exit_false\", tag, filtertag, buffer);\n    return false;\n}\n"
}