{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_mlist_isopen:\n```c\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The loop declares p as \"struct lfs_mlist **p = &head;\" even though p is only used to read the pointer values (it never modifies *p or the pointed-to struct). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Here p could be declared as a pointer to a const pointer (for example: \"struct lfs_mlist * const *p = &head\") \u2014 or, if the listed nodes themselves are immutable, as \"const struct lfs_mlist * const *p\". Example corrected fragment: for (struct lfs_mlist * const *p = &head; *p; p = &(*p)->next) { ... }"
}