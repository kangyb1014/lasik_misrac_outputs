{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameters are not const-qualified even though they are only read (the function only traverses and compares pointers). According to MISRA C 2023 Rule 8.13, these pointers should point to const-qualified types whenever possible. For example the signature could be changed to:\nstatic bool lfs_mlist_isopen(const struct lfs_mlist *head, const struct lfs_mlist *node)\nand the loop rewritten as for (const struct lfs_mlist *p = head; p; p = p->next) { if (p == node) return true; }\n(The current implementation using a struct lfs_mlist ** and &head prevents directly adding const without also changing the loop; however the loop can be rewritten to allow const, so the omission of const on the parameters is a violation.),\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mlist_isopen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mlist_isopen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mlist_isopen:\n```c\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```\n</target_code>\nPlease provide the modified lfs_mlist_isopen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nstatic void lfs_ensure_log_dir(void) {\n    struct stat st;\n    if (stat(\"/tmp/logs\", &st) != 0) {\n        /* try to create the directory; ignore errors */\n        (void)mkdir(\"/tmp/logs\", 0777);\n    }\n}\n\nstatic void lfs_log_ptr(const char *label, const void *ptr) {\n    lfs_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    (void)fprintf(f, \"%s: %p\\n\", label, ptr);\n    (void)fclose(f);\n}\n\nstatic void lfs_log_msg(const char *msg) {\n    lfs_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    (void)fprintf(f, \"%s\\n\", msg);\n    (void)fclose(f);\n}\n\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    /* Log entry and parameters */\n    lfs_log_msg(\"lfs_mlist_isopen called\");\n    lfs_log_ptr(\"head\", (const void *)head);\n    lfs_log_ptr(\"node\", (const void *)node);\n\n    int iter = 0;\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        /* Log loop progress and pointers: address of p, value *p, and (*p)->next */\n        lfs_log_msg(\"-- loop iteration start\");\n        lfs_log_ptr(\"p (address of pointer variable)\", (const void *)p);\n        lfs_log_ptr(\"*p (current node)\", (const void *)(*p));\n        lfs_log_ptr(\"(*p)->next (next node)\", (const void *)((*p)->next));\n\n        /* Log comparison about to be performed */\n        lfs_log_msg(\"Comparing *p to node...\");\n\n        if (*p == (struct lfs_mlist*)node) {\n            lfs_log_msg(\"Match found: returning true\");\n            lfs_log_ptr(\"matched *p\", (const void *)(*p));\n            return true;\n        }\n\n        iter++;\n    }\n\n    lfs_log_msg(\"No match found: returning false\");\n    return false;\n}\n"
}