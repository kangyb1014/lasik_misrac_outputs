{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function only inspects the list and does not modify the pointed-to objects, so the pointer parameters could and should be const-qualified (e.g. const struct lfs_mlist *head, const struct lfs_mlist *node). The fragment also contains an unnecessary cast (struct lfs_mlist*)node which would hide or discard const qualification if it were present. Therefore the code fails to qualify pointers as const where possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mlist_isopen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mlist_isopen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mlist_isopen:\n```c\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```\n</target_code>\nPlease provide the modified lfs_mlist_isopen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Minimal list node definition to allow this testable snippet to compile. */\nstruct lfs_mlist {\n    struct lfs_mlist *next;\n};\n\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    FILE *log = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_mlist_isopen: head=%p node=%p\\n\", (void *)head, (void *)node);\n    }\n\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (log) {\n            fprintf(log, \"LOOP: p=%p *p=%p next=%p\\n\",\n                    (void *)p, (void *)*p, (void *)(*p)->next);\n        }\n\n        if (*p == (struct lfs_mlist*)node) {\n            if (log) {\n                fprintf(log, \"MATCH: *p (%p) == node (%p) -> returning true\\n\",\n                        (void *)*p, (void *)node);\n                fclose(log);\n            }\n            return true;\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"EXIT lfs_mlist_isopen: not found -> returning false\\n\");\n        fclose(log);\n    }\n\n    return false;\n}\n"
}