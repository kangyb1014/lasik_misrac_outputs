{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'end = 1;' in the fragment modifies the function parameter 'end' (prototype: uint16_t end) of lfs_dir_splittingcompact. MISRA C 2023 Rule 17.8 states that function parameters shall not be modified (only objects referred to by pointer parameters may be changed). Therefore this assignment (executed when err == 0 in the expand-superblock path) violates Rule 17.8. Note: other assignments to 'end' in the function (e.g. 'end = split') are similar violations.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_splittingcompact code that contains useful probe functions that print useful logs to a file \"/tmp/logs/427.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_splittingcompact as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_splittingcompact:\n```c\nstatic int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t begin, uint16_t end) {\n    while (true) {\n        // find size of first split, we do this by halving the split until\n        // the metadata is guaranteed to fit\n        //\n        // Note that this isn't a true binary search, we never increase the\n        // split size. This may result in poorly distributed metadata but isn't\n        // worth the extra code size or performance hit to fix.\n        lfs_size_t split = begin;\n        while (end - split > 1) {\n            lfs_size_t size = 0;\n            int err = lfs_dir_traverse(lfs,\n                    source, 0, 0xffffffff, attrs, attrcount,\n                    LFS_MKTAG(0x400, 0x3ff, 0),\n                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),\n                    split, end, -split,\n                    lfs_dir_commit_size, &size);\n            if (err) {\n                return err;\n            }\n\n            // space is complicated, we need room for:\n            //\n            // - tail:         4+2*4 = 12 bytes\n            // - gstate:       4+3*4 = 16 bytes\n            // - move delete:  4     = 4 bytes\n            // - crc:          4+4   = 8 bytes\n            //                 total = 40 bytes\n            //\n            // And we cap at half a block to avoid degenerate cases with\n            // nearly-full metadata blocks.\n            //\n            lfs_size_t metadata_max = (lfs->cfg->metadata_max)\n                    ? lfs->cfg->metadata_max\n                    : lfs->cfg->block_size;\n            if (end - split < 0xff\n                    && size <= lfs_min(\n                        metadata_max - 40,\n                        lfs_alignup(\n                            metadata_max/2,\n                            lfs->cfg->prog_size))) {\n                break;\n            }\n\n            split = split + ((end - split) / 2);\n        }\n\n        if (split == begin) {\n            // no split needed\n            break;\n        }\n\n        // split into two metadata pairs and continue\n        int err = lfs_dir_split(lfs, dir, attrs, attrcount,\n                source, split, end);\n        if (err && err != LFS_ERR_NOSPC) {\n            return err;\n        }\n\n        if (err) {\n            // we can't allocate a new block, try to compact with degraded\n            // performance\n            LFS_WARN(\"Unable to split {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                    dir->pair[0], dir->pair[1]);\n            break;\n        } else {\n            end = split;\n        }\n    }\n\n    if (lfs_dir_needsrelocation(lfs, dir)\n            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {\n        // oh no! we're writing too much to the superblock,\n        // should we expand?\n        lfs_ssize_t size = lfs_fs_size_(lfs);\n        if (size < 0) {\n            return size;\n        }\n\n        // littlefs cannot reclaim expanded superblocks, so expand cautiously\n        //\n        // if our filesystem is more than ~88% full, don't expand, this is\n        // somewhat arbitrary\n        if (lfs->block_count - size > lfs->block_count/8) {\n            LFS_DEBUG(\"Expanding superblock at rev %\"PRIu32, dir->rev);\n            int err = lfs_dir_split(lfs, dir, attrs, attrcount,\n                    source, begin, end);\n            if (err && err != LFS_ERR_NOSPC) {\n                return err;\n            }\n\n            if (err) {\n                // welp, we tried, if we ran out of space there's not much\n                // we can do, we'll error later if we've become frozen\n                LFS_WARN(\"Unable to expand superblock\");\n            } else {\n                // duplicate the superblock entry into the new superblock\n                end = 1;\n            }\n        }\n    }\n\n    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_splittingcompact code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/*\n * Probe logging helpers for reproducing the Rule 17.8 scenario.\n * Logs appended to: /tmp/logs/427.txt\n */\nstatic void lfs_ensure_log_dir(void) {\n    /* Attempt to create directory /tmp/logs if it doesn't exist. */\n    /* Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void lfs_logf(const char *fmt, ...) {\n    lfs_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/427.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t begin, uint16_t end) {\n    lfs_logf(\"ENTER lfs_dir_splittingcompact: dir=%p, begin=%u, end=%u, attrcount=%d, pair0=%llu, pair1=%llu\",\n            (void*)dir, (unsigned)begin, (unsigned)end, attrcount,\n            (unsigned long long)dir->pair[0], (unsigned long long)dir->pair[1]);\n\n    while (true) {\n        /* find size of first split, we do this by halving the split until\n         * the metadata is guaranteed to fit\n         *\n         * Note that this isn't a true binary search, we never increase the\n         * split size. This may result in poorly distributed metadata but isn't\n         * worth the extra code size or performance hit to fix.\n         */\n        lfs_size_t split = begin;\n        lfs_logf(\"LOOP start: begin=%u, end=%u, initial_split=%llu\",\n                (unsigned)begin, (unsigned)end, (unsigned long long)split);\n\n        while (end - split > 1) {\n            lfs_size_t size = 0;\n            int err = lfs_dir_traverse(lfs,\n                    source, 0, 0xffffffff, attrs, attrcount,\n                    LFS_MKTAG(0x400, 0x3ff, 0),\n                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),\n                    split, end, -split,\n                    lfs_dir_commit_size, &size);\n            lfs_logf(\"traverse returned err=%d, computed size=%llu, split=%llu, end=%u\",\n                    err, (unsigned long long)size, (unsigned long long)split, (unsigned)end);\n            if (err) {\n                lfs_logf(\"EXIT (traverse err) lfs_dir_splittingcompact: err=%d\", err);\n                return err;\n            }\n\n            /* space is complicated, we need room for:\n             *\n             * - tail:         4+2*4 = 12 bytes\n             * - gstate:       4+3*4 = 16 bytes\n             * - move delete:  4     = 4 bytes\n             * - crc:          4+4   = 8 bytes\n             *                 total = 40 bytes\n             *\n             * And we cap at half a block to avoid degenerate cases with\n             * nearly-full metadata blocks.\n             *\n             */\n            lfs_size_t metadata_max = (lfs->cfg->metadata_max)\n                    ? lfs->cfg->metadata_max\n                    : lfs->cfg->block_size;\n            if (end - split < 0xff\n                    && size <= lfs_min(\n                        metadata_max - 40,\n                        lfs_alignup(\n                            metadata_max/2,\n                            lfs->cfg->prog_size))) {\n                lfs_logf(\"BREAK inner: split=%llu is sufficient (size=%llu, metadata_max=%llu)\",\n                        (unsigned long long)split, (unsigned long long)size, (unsigned long long)metadata_max);\n                break;\n            }\n\n            split = split + ((end - split) / 2);\n            lfs_logf(\"inner updated split=%llu (end=%u)\", (unsigned long long)split, (unsigned)end);\n        }\n\n        if (split == begin) {\n            /* no split needed */\n            lfs_logf(\"NO SPLIT NEEDED: split==begin==%u, end=%u\", (unsigned)begin, (unsigned)end);\n            break;\n        }\n\n        /* split into two metadata pairs and continue */\n        int err = lfs_dir_split(lfs, dir, attrs, attrcount,\n                source, split, end);\n        lfs_logf(\"lfs_dir_split returned err=%d for split=%llu (end=%u)\", err, (unsigned long long)split, (unsigned)end);\n        if (err && err != LFS_ERR_NOSPC) {\n            lfs_logf(\"EXIT (split err) lfs_dir_splittingcompact: err=%d\", err);\n            return err;\n        }\n\n        if (err) {\n            /* we can't allocate a new block, try to compact with degraded\n             * performance\n             */\n            LFS_WARN(\"Unable to split {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                    dir->pair[0], dir->pair[1]);\n            lfs_logf(\"WARN: Unable to split pair0=%llu, pair1=%llu\", (unsigned long long)dir->pair[0], (unsigned long long)dir->pair[1]);\n            break;\n        } else {\n            /* original code assigns to parameter 'end' here. Log it for evidence. */\n            lfs_logf(\"ASSIGN end = split (before): end=%u, split=%llu\", (unsigned)end, (unsigned long long)split);\n            end = split;\n            lfs_logf(\"ASSIGN end = split (after): end=%u\", (unsigned)end);\n        }\n    }\n\n    if (lfs_dir_needsrelocation(lfs, dir)\n            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {\n        /* oh no! we're writing too much to the superblock,\n         * should we expand?\n         */\n        lfs_ssize_t size = lfs_fs_size_(lfs);\n        if (size < 0) {\n            lfs_logf(\"EXIT (fs_size_ err) lfs_dir_splittingcompact: err=%lld\", (long long)size);\n            return size;\n        }\n\n        lfs_logf(\"RELOCATION needed: dir->rev=%llu, fs_size=%lld, block_count=%llu\",\n                (unsigned long long)dir->rev, (long long)size, (unsigned long long)lfs->block_count);\n\n        /* littlefs cannot reclaim expanded superblocks, so expand cautiously\n         *\n         * if our filesystem is more than ~88% full, don't expand, this is\n         * somewhat arbitrary\n         */\n        if (lfs->block_count - size > lfs->block_count/8) {\n            LFS_DEBUG(\"Expanding superblock at rev %\"PRIu32, dir->rev);\n            lfs_logf(\"Attempting expand-superblock with begin=%u, end=%u\", (unsigned)begin, (unsigned)end);\n            int err = lfs_dir_split(lfs, dir, attrs, attrcount,\n                    source, begin, end);\n            lfs_logf(\"lfs_dir_split (expand) returned err=%d\", err);\n            if (err && err != LFS_ERR_NOSPC) {\n                lfs_logf(\"EXIT (expand split err) lfs_dir_splittingcompact: err=%d\", err);\n                return err;\n            }\n\n            if (err) {\n                /* welp, we tried, if we ran out of space there's not much\n                 * we can do, we'll error later if we've become frozen\n                 */\n                LFS_WARN(\"Unable to expand superblock\");\n                lfs_logf(\"WARN: Unable to expand superblock\");\n            } else {\n                /* duplicate the superblock entry into the new superblock\n                 *\n                 * This is the assignment that modifies the function parameter\n                 * 'end' to 1 in the original code. We log before and after\n                 * so that the violation can be evidenced.\n                 */\n                lfs_logf(\"ASSIGN end = 1 (before): end=%u\", (unsigned)end);\n                end = 1;\n                lfs_logf(\"ASSIGN end = 1 (after): end=%u\", (unsigned)end);\n            }\n        } else {\n            lfs_logf(\"Not expanding superblock: block_count=%llu, fs_size=%lld\",\n                    (unsigned long long)lfs->block_count, (long long)size);\n        }\n    }\n\n    lfs_logf(\"CALLING lfs_dir_compact with begin=%u, end=%u\", (unsigned)begin, (unsigned)end);\n    int rc = lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);\n    lfs_logf(\"RETURN lfs_dir_splittingcompact rc=%d\", rc);\n    return rc;\n}\n"
}