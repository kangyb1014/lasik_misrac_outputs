{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0), so every call LFS_LOCK(lfs->cfg) always yields 0. In lfs_file_seek this makes \"err\" always zero, so the conditional check if (err) { return err; } can never be taken and the only executed operation from the macro, (void)cfg, is a no-op. Removing the (void)cfg evaluation (and/or the error check) would not change program behaviour (assuming cfg has no observable side-effects such as volatile access), so this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/592.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe helper: append human-readable logs for control-flow/state to /tmp/logs/592.txt */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence, int err, lfs_soff_t res) {\n    FILE *f = fopen(\"/tmp/logs/592.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] stage=%s lfs=%p file=%p off=%lld whence=%d err=%d res=%lld\\n\",\n            (long)t, stage, (void*)lfs, (void*)file,\n            (long long)off, whence, err, (long long)res);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock and input state so callers can observe whether\n       the lock produced a non-zero error. This captures the scenario where\n       LFS_LOCK expands to ((void)cfg, 0) and err is always 0. */\n    lfs_probe_log(\"after_lock\", lfs, file, off, whence, err, (lfs_soff_t)0);\n\n    if (err) {\n        /* Log the fact we are returning early due to err, preserving original behavior */\n        lfs_probe_log(\"return_on_err\", lfs, file, off, whence, err, (lfs_soff_t)0);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n\n    /* Log the result before unlocking so external tools can see that the\n       lock did not cause an error and that the subsequent operations were taken. */\n    lfs_probe_log(\"before_unlock\", lfs, file, off, whence, 0, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlocking to show full control path completed. */\n    lfs_probe_log(\"after_unlock\", lfs, file, off, whence, 0, res);\n    return res;\n}\n"
}