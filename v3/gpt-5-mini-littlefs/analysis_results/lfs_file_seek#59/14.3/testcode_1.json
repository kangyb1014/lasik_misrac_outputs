{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression 'if (err)' is invariant because LFS_LOCK(lfs->cfg) expands to '((void)cfg, 0)', so err is always 0 and the condition is always false. This is not an allowed exception (not an intentional infinite loop nor the permitted do-while constant-false case), therefore it violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper: appends human-readable logs to /tmp/logs/595.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/595.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    /* Log entry and parameters */\n    lfs_probe_log(\"ENTER lfs_file_seek: lfs=%p file=%p off=%\" PRId32 \" whence=%d\",\n            (void*)lfs, (void*)file, off, whence);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the immediate result of LFS_LOCK and the cfg pointer to help\n       reproduce whether LFS_LOCK returns 0 (invariant) as reported. */\n    lfs_probe_log(\"LFS_LOCK returned err=%d cfg=%p\", err, (void*)lfs->cfg);\n\n    /* Log intent to check the controlling expression */\n    lfs_probe_log(\"About to evaluate: if (err) -> err=%d\", err);\n\n    if (err) {\n        lfs_probe_log(\"Branch taken: if (err) true -> returning err=%d\", err);\n        return err;\n    }\n\n    /* If we reach here, the controlling expression was false. Record that. */\n    lfs_probe_log(\"Branch not taken: if (err) false -> continuing\");\n\n    LFS_TRACE(\"lfs_file_seek(%p, %p, \"% PRId32 \", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    /* Log the result from the internal seek and the subsequent unlock. */\n    lfs_probe_log(\"lfs_file_seek_ returned res=%\" PRId32, res);\n    LFS_TRACE(\"lfs_file_seek -> %\" PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"LFS_UNLOCK called for cfg=%p, returning res=%\" PRId32,\n            (void*)lfs->cfg, res);\n    return res;\n}\n"
}