{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes (struct lfs_mlist*)file to lfs_mlist_isopen which is declared as taking non-const pointers, but lfs_mlist_isopen only inspects the list and does not modify *head or *node. Therefore the parameters (and the argument) could and should be const-qualified (e.g. const struct lfs_mlist *). By using a non-const pointer/cast here the code fails to qualify pointers as const where possible, violating MISRA C 2023 Rule 8.13. A fix is to change lfs_mlist_isopen to take const struct lfs_mlist *head, const struct lfs_mlist *node and call it with (const struct lfs_mlist*)file (or avoid the cast if types permit).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: appends control-flow and state information to /tmp/logs/593.txt. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/593.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure before returning. */\n        lfs_probe_log(\"lfs_file_seek: LFS_LOCK failed err=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n\n    /*\n     * Probe: evaluate lfs_mlist_isopen once so we can log its return value\n     * and still preserve the original assertion behavior.\n     * Note: the original code casts 'file' to (struct lfs_mlist*). Keep the\n     * same cast here so behavior is unchanged while we record the usage.\n     */\n    int mlist_open = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_probe_log(\n        \"lfs_file_seek: lfs=%p file=%p (cast to struct lfs_mlist*)=%p lfs->mlist=%p lfs_mlist_isopen=%d\",\n        (void*)lfs, (void*)file, (void*)file, (void*)(lfs->mlist), mlist_open);\n\n    LFS_ASSERT(mlist_open);\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    /* Log result of inner seek for traceability. */\n    lfs_probe_log(\"lfs_file_seek: after seek res=%lld\", (long long)res);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}