{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided project configuration LFS_LOCK is defined as ((void)cfg,0), so the call int err = LFS_LOCK(lfs->cfg); always yields err == 0. Therefore the if (err) { return err; } branch can never be taken and is unreachable. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/591.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper that appends to /tmp/logs/591.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/591.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list va;\n    va_start(va, fmt);\n    vfprintf(f, fmt, va);\n    fprintf(f, \"\\n\");\n    va_end(va);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    /* Log entry and parameters */\n    lfs_probe_log(\"ENTER lfs_file_seek: lfs=%p file=%p off=%lld whence=%d\",\n            (void*)lfs, (void*)file, (long long)off, whence);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log the lock result and cfg pointer to capture the scenario where\n       LFS_LOCK is defined as ((void)cfg,0) and thus always returns 0. */\n    lfs_probe_log(\"LFS_LOCK returned: %d, cfg=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_probe_log(\"lfs_file_seek early return due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"Calling lfs_file_seek_ (internal) for file=%p\", (void*)file);\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    lfs_probe_log(\"lfs_file_seek_ returned: res=%lld for file=%p\", (long long)res, (void*)file);\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"LFS_UNLOCK called for cfg=%p\", (void*)lfs->cfg);\n    lfs_probe_log(\"EXIT lfs_file_seek: returning res=%lld\", (long long)res);\n    return res;\n}\n"
}