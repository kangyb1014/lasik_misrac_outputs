{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the parameter 'path' (const char *path) is modified\u2014its address is passed to lfs_dir_find(&path,...), which updates the local parameter value (advancing the pointer). This changes the function parameter itself, which violates MISRA C 2023 Rule 17.8. (Modifying objects pointed-to by pointer parameters, e.g., file->cfg = cfg, is allowed; modifying the pointer variable 'path' is not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe logger: append control-flow and state information to /tmp/logs/527.txt.\n   This helper does not modify any of the function parameters; it only inspects them\n   and records their values and addresses. */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags, const struct lfs_file_config *cfg, int err) {\n    FILE *fp = fopen(\"/tmp/logs/527.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    fprintf(fp, \"[%s] lfs=%p file=%p path_val=%p path_str=\\\"%s\\\" path_addr=%p flags=0x%x cfg=%p err=%d\\n\",\n            stage, (void*)lfs, (void*)file, (void*)path, (path != NULL) ? path : \"(null)\", (void*)&path, (unsigned)flags, (void*)cfg, err);\n\n    if (cfg != NULL) {\n        /* cfg->attr_count uses PRIu32 in original, preserve same printing style */\n        fprintf(fp, \"  cfg->buffer=%p cfg->attrs=%p cfg->attr_count=%\" PRIu32 \"\\n\",\n                cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    }\n\n    fclose(fp);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return due to lock failure. */\n        lfs_probe_log(\"entry-lock-fail\", lfs, file, path, flags, cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n    /* Log state after acquiring lock and current parameter information. */\n    lfs_probe_log(\"entry-post-lock\", lfs, file, path, flags, cfg, 0);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log right before delegating to lfs_file_opencfg_. This captures the\n       pointer value and the address of the local parameter 'path' so later\n       comparisons (outside/inside) can detect if a callee modifies its own\n       parameter. */\n    lfs_probe_log(\"before-lfs_file_opencfg_\", lfs, file, path, flags, cfg, 0);\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log right after returning from lfs_file_opencfg_. If a callee modified\n       its own parameter (for example by doing lfs_dir_find(&path, ...)), that\n       modification would not change this function's local 'path' variable.\n       However, recording this location and the returned error gives a\n       reproducible trace of control flow and state around the reported\n       violation scenario. */\n    lfs_probe_log(\"after-lfs_file_opencfg_\", lfs, file, path, flags, cfg, err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n\n    /* Log just before unlocking and returning. */\n    lfs_probe_log(\"exit-post-unlock\", lfs, file, path, flags, cfg, err);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}