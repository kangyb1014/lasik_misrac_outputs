{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes &path (address of the parameter 'path') to lfs_dir_find, which can (and in this codebase does) update the pointer value (e.g., advance it to the next path component). This modifies the function parameter 'path' itself rather than only the object it points to, violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe function to log path pointer and contents to /tmp/logs/527.txt. */\nstatic void lfs_probe_log_path(const char *stage, const char **path_addr, const char *path) {\n    FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log the stage, address of the parameter variable (the caller's parameter),\n       the pointer value held by that parameter, and the pointed-to string (if any). */\n    fprintf(f, \"%s: path_param_addr=%p, path_value=%p, path_str=\\\"%s\\\"\\n\",\n            stage, (void*)path_addr, (void*)path, (path != NULL) ? path : \"(null)\");\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Trace as in original code. */\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /*\n     * Probe before calling the inner implementation. We pass the address of the\n     * parameter variable 'path' so that the exact parameter address and its\n     * value can be recorded. This helps detect scenarios where a callee takes\n     * the address of its parameter and modifies it.\n     */\n    lfs_probe_log_path(\"enter_lfs_file_opencfg\", &path, path);\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Probe after the inner call to capture any change to the parameter\n       variable (its address should remain the same, but the value might\n       be different if a callee illegally modified it via its address). */\n    lfs_probe_log_path(\"exit_lfs_file_opencfg\", &path, path);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}