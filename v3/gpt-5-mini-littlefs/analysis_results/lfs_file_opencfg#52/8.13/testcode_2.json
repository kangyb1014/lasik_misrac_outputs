{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression (void*)cfg casts the parameter cfg (type: const struct lfs_file_config *) to void*, thereby discarding the const qualifier. This means the pointer no longer points to a const-qualified type when passed (e.g. to LFS_TRACE), which violates MISRA C 2023 Rule 8.13. A compliant approach would be to use (const void*)cfg or change the trace API to accept const void * so the const qualifier is preserved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "static void lfs_probe_log_cfg(const struct lfs_file_config *cfg,\n        const char *path, int flags, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"--- lfs_file_opencfg probe (%s) ---\\n\", stage);\n    fprintf(f, \"path=%s\\n\", path ? path : \"(null)\");\n    fprintf(f, \"flags=0x%x\\n\", (unsigned)flags);\n    /* Log the cfg pointer as const to avoid introducing a new const-discard. */\n    fprintf(f, \"cfg (const void*)=%p\\n\", (const void*)cfg);\n    if (cfg) {\n        fprintf(f, \"  .buffer=%p\\n\", (const void*)cfg->buffer);\n        fprintf(f, \"  .attrs=%p\\n\", (const void*)cfg->attrs);\n        fprintf(f, \"  .attr_count=%\" PRIu32 \"\\n\", cfg->attr_count);\n    } else {\n        fprintf(f, \"  cfg is NULL\\n\");\n    }\n\n    /* Note the original trace call casts away const: (void*)cfg */\n    fprintf(f, \"NOTE: original code calls LFS_TRACE with (void*)cfg which discards const qualifier\\n\");\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_probe_log_cfg(cfg, path, flags, \"lock_failed\");\n        return err;\n    }\n\n    /* Probe: log state before the original trace call */\n    lfs_probe_log_cfg(cfg, path, flags, \"before_LFS_TRACE\");\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Probe: log result and state after the internal call */\n    {\n        FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_file_opencfg result -> %d\\n\", err);\n            fprintf(f, \"Post-call cfg pointer (const void*)=%p\\n\", (const void*)cfg);\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}