{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member 'buffer' in struct lfs_file_config is declared as a non-const pointer (for example: void *buffer), then using cfg->buffer here violates MISRA C 2023 Rule 8.13 because a pointer (cfg->buffer) obtained from a const-qualified configuration object points to a non-const type. To conform, the member should be declared with a const-qualified pointee (for example: const void *buffer) or otherwise ensure the pointer type is const where possible. If, instead, 'buffer' is already declared as a const-qualified pointer (e.g. const void *buffer), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/523.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fputc('\\n', fp);\n    va_end(ap);\n    fclose(fp);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_log_probe(\"lfs_file_opencfg: LFS_LOCK failed -> %d (lfs=%p)\", err, (void*)lfs);\n        return err;\n    }\n\n    /* Log entry and parameter snapshot. Note: the function signature declares\n       cfg as a pointer to a const-qualified lfs_file_config. This is compile-\n       time information; the member types of that struct (e.g. whether buffer\n       is a const-qualified pointee) cannot be determined at runtime. We log\n       the pointers and values observed at runtime to help reproduce the\n       violation scenario reported by a static analysis tool. */\n    lfs_log_probe(\n        \"ENTRY lfs_file_opencfg: lfs=%p, file=%p, path=%s, flags=0x%X, cfg=%p (parameter declared const struct lfs_file_config *cfg)\",\n        (void*)lfs, (void*)file, (path ? path : \"(null)\"), (unsigned)flags, (void*)cfg);\n\n    /* Log cfg fields (as in original LFS_TRACE). Guarded prints for safety when cfg is NULL. */\n    if (cfg) {\n        lfs_log_probe(\"  cfg snapshot: .buffer=%p, .attrs=%p, .attr_count=%\" PRIu32,\n            cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n        if (cfg->buffer == NULL) {\n            lfs_log_probe(\"  NOTE: cfg->buffer is NULL\");\n        } else {\n            lfs_log_probe(\"  NOTE: cfg->buffer non-NULL at address %p. (Cannot determine at runtime whether the pointee type is const-qualified).\",\n                cfg->buffer);\n        }\n    } else {\n        lfs_log_probe(\"  WARNING: cfg is NULL (original code dereferences cfg without null-check). Potential early crash in original logic.\");\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg ? cfg->buffer : (void*)0, (void*)(cfg ? cfg->attrs : NULL), cfg ? cfg->attr_count : 0);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Call the underlying implementation and capture its result */\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log exit with the returned error code */\n    lfs_log_probe(\"EXIT lfs_file_opencfg: returned %d (lfs=%p, file=%p, cfg=%p)\", err, (void*)lfs, (void*)file, (void*)cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}