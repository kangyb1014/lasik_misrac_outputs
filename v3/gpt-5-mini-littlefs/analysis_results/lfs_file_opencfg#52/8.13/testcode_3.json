{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the 'file' pointer to a non-const target type: (struct lfs_mlist*)file. If the called routine (lfs_mlist_isopen) does not need to modify the object (or generally when the pointer can/should be read-only), the pointer target should be const-qualified (const struct lfs_mlist *). Casting to a non-const pointer here therefore violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/523.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure and preserve original behavior */\n        lfs_log_probe(\"lfs_file_opencfg: LFS_LOCK failed: err=%d, lfs=%p, file=%p, path=\\\"%s\\\", flags=0x%x, cfg=%p\",\n                      err, (void*)lfs, (void*)file, path ? path : \"(null)\", (unsigned)flags, (void*)cfg);\n        return err;\n    }\n\n    /* Entry trace (preserve original LFS_TRACE but also emit to our probe file) */\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n    /* Additional probe logging capturing call-site and state prior to assertion */\n    lfs_log_probe(\"ENTRY lfs_file_opencfg: lfs=%p, file=%p, path=\\\"%s\\\", flags=0x%x, cfg=%p, cfg->buffer=%p, cfg->attrs=%p, cfg->attr_count=%lu\",\n                  (void*)lfs, (void*)file, path ? path : \"(null)\", (unsigned)flags,\n                  (void*)cfg,\n                  (void*)(cfg ? cfg->buffer : NULL),\n                  (void*)(cfg ? cfg->attrs : NULL),\n                  (unsigned long)(cfg ? cfg->attr_count : 0UL));\n\n    /* Log the specific cast that is the source of the reported violation so it can be reproduced */\n    lfs_log_probe(\"About to call lfs_mlist_isopen with mlist=%p and file cast to (struct lfs_mlist*) (original file pointer=%p)\",\n                  (void*)(lfs ? lfs->mlist : NULL), (void*)file);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log immediately after the assertion point (if execution continues) */\n    lfs_log_probe(\"After LFS_ASSERT: continuing to call lfs_file_opencfg_ (lfs=%p, file=%p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log the return value and final state before unlocking */\n    lfs_log_probe(\"lfs_file_opencfg_: returned err=%d for lfs=%p, file=%p, path=\\\"%s\\\", flags=0x%x, cfg=%p\",\n                  err, (void*)lfs, (void*)file, path ? path : \"(null)\", (unsigned)flags, (void*)cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_probe(\"EXIT lfs_file_opencfg: returning %d (lfs=%p, file=%p)\", err, (void*)lfs, (void*)file);\n    return err;\n}\n"
}