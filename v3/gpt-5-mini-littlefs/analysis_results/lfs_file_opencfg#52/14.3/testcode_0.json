{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0), so in lfs_file_opencfg the statement int err = LFS_LOCK(lfs->cfg); sets err to 0 always. The subsequent controlling expression if (err) is therefore invariant (always false), which violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/525.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: append timestamped messages to /tmp/logs/525.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/525.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm;\n    char timestr[64] = \"\";\n    if (localtime_r(&t, &tm)) {\n        strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm);\n    }\n\n    fprintf(f, \"[%s] \", timestr[0] ? timestr : \"-\" );\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    /* Probe entry and parameters */\n    lfs_log_probe(\"ENTER lfs_file_opencfg: lfs=%p file=%p path=\\\"%s\\\" flags=0x%x cfg=%p\",\n            (void*)lfs, (void*)file, path ? path : \"(null)\", flags, (void*)cfg);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of LFS_LOCK to capture case where it expands to ((void)cfg,0) */\n    lfs_log_probe(\"After LFS_LOCK: err=%d (note: if LFS_LOCK expands to ((void)cfg,0) this will always be 0)\", err);\n\n    if (err) {\n        lfs_log_probe(\"Lock returned non-zero err=%d, exiting early\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n    /* Log cfg contents in a way that avoids adding new dependencies */\n    if (cfg) {\n        lfs_log_probe(\"cfg details: buffer=%p attrs=%p attr_count=%u\",\n                (void*)cfg->buffer, (void*)cfg->attrs, (unsigned)cfg->attr_count);\n    } else {\n        lfs_log_probe(\"cfg is NULL\");\n    }\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    lfs_log_probe(\"lfs_file_opencfg_: returned err=%d\", err);\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_probe(\"EXIT lfs_file_opencfg: returning %d\", err);\n    return err;\n}\n"
}