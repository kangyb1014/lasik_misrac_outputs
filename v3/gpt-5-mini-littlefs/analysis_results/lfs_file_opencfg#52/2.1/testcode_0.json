{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg, 0). In the caller: \"int err = LFS_LOCK(lfs->cfg); if (err) { return err; }\" the condition 'if (err)' is always false and its body (the 'return err;' branch) is unreachable. Therefore, with this macro definition present in the project, the code contains unreachable code (the conditional branch) and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/521.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append logs about control flow and state to /tmp/logs/521.txt */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags, const struct lfs_file_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/521.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_file_opencfg] %s\\n\", stage);\n    fprintf(f, \"  lfs=%p file=%p path=%s flags=%d cfg=%p err=%d\\n\",\n            (void*)lfs, (void*)file, (path ? path : \"(null)\"), flags, (void*)cfg, err);\n    if (cfg) {\n        fprintf(f, \"  cfg->buffer=%p cfg->attrs=%p cfg->attr_count=%llu\\n\",\n                cfg->buffer, (void*)cfg->attrs, (unsigned long long)cfg->attr_count);\n    }\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    /* Log entry before lock attempt (do not dereference cfg here) */\n    lfs_probe_log(\"entering (pre-lock)\", lfs, file, path, flags, cfg, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock expression and captured err value */\n    lfs_probe_log(\"after LFS_LOCK\", lfs, file, path, flags, cfg, err);\n\n    if (err) {\n        /* This branch is expected to be unreachable if LFS_LOCK expands to ((void)cfg, 0).\n         * Keep logging here so evidence is produced if it ever executes. */\n        lfs_probe_log(\"err non-zero: returning early\", lfs, file, path, flags, cfg, err);\n        return err;\n    }\n\n    /* Log that we are continuing past the lock check */\n    lfs_probe_log(\"continuing past lock (err == 0)\", lfs, file, path, flags, cfg, err);\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log result from the underlying open call */\n    lfs_probe_log(\"after lfs_file_opencfg_ call\", lfs, file, path, flags, cfg, err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"exiting (post-unlock)\", lfs, file, path, flags, cfg, err);\n    return err;\n}\n"
}