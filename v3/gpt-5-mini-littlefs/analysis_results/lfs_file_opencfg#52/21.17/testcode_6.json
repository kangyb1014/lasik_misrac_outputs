{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the 'path' (and thus 'name') pointer does not point to a properly NUL-terminated string (for example, a buffer of length N without a terminating '\\0' or a corrupted/non-terminated input), then the calls to strspn(name, \"/\") and strcspn(name, \"/\") will scan past the end of that buffer and perform out-of-bounds reads, violating MISRA C 2023 Rule 21.17. The code does not perform bounds/termination checks to guarantee the string is NUL-terminated before calling these string.h functions.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/529.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/*\n * Probe logging helper: append human-readable records about the\n * control flow and state to /tmp/logs/529.txt. This helper avoids\n * reading the contents of the 'path' string (to avoid introducing\n * additional out-of-bounds reads) and only logs pointer values and\n * other readily-available state.\n *\n * We purposely do not attempt to dereference 'path' here to check\n * for a NUL byte because doing so could itself read out-of-bounds\n * and introduce a new violation. The goal is to record the pointers\n * and configuration that lead into the code-path that uses string\n * handling functions (which will expose any termination problems).\n */\nstatic void lfs_probe_log(const char *phase,\n        void *lfs_ptr, void *file_ptr, const char *path_ptr,\n        unsigned flags, const void *cfg_ptr,\n        const void *cfg_buffer, const void *cfg_attrs, uint32_t cfg_attr_count) {\n    FILE *f = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_probe] phase=%s\\n\", phase);\n    fprintf(f, \"  lfs=%p file=%p path=%p flags=0x%08x cfg=%p\\n\",\n            lfs_ptr, file_ptr, (const void*)path_ptr, flags, cfg_ptr);\n    fprintf(f, \"  cfg->buffer=%p cfg->attrs=%p cfg->attr_count=%\" PRIu32 \"\\n\",\n            cfg_buffer, cfg_attrs, cfg_attr_count);\n    fprintf(f, \"  NOTE: probe does not inspect *path to avoid doing additional reads\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/* Forward declarations for types used by the function. These are\n * intentionally incomplete \u2014 actual definitions exist in the\n * surrounding codebase. We only need the members of\n * struct lfs_file_config that are accessed in the function.\n */\ntypedef struct lfs_s lfs_t;\ntypedef struct lfs_file_s lfs_file_t;\nstruct lfs_file_config {\n    void *buffer;\n    void *attrs;\n    uint32_t attr_count;\n};\n\n/* The original function with inserted probe logging. The original\n * logic is preserved; probes are added before and after the call to\n * the underlying implementation to capture the control path and\n * relevant pointer-state that could lead to the reported violation.\n */\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log entry and the early-return reason. */\n        lfs_probe_log(\"entry_and_lock_failed\",\n                (void*)lfs, (void*)file, path, (unsigned)flags,\n                (void*)cfg, (cfg ? cfg->buffer : NULL), (cfg ? cfg->attrs : NULL),\n                (cfg ? cfg->attr_count : 0));\n        return err;\n    }\n\n    /* Probe: record state on successful lock before proceeding. We avoid\n     * dereferencing 'path' to prevent introducing additional reads.\n     */\n    lfs_probe_log(\"after_lock_before_trace\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, (cfg ? cfg->buffer : NULL), (cfg ? cfg->attrs : NULL),\n            (cfg ? cfg->attr_count : 0));\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe: about to call the underlying implementation which will\n     * eventually call string.h functions (e.g. strspn/strcspn). If\n     * 'path' is not NUL-terminated, those calls may read out-of-bounds.\n     * We record the pointer and configuration so that later analysis can\n     * correlate these logs with memory layout and reproduce the issue.\n     */\n    lfs_probe_log(\"before_lfs_file_opencfg_\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, (cfg ? cfg->buffer : NULL), (cfg ? cfg->attrs : NULL),\n            (cfg ? cfg->attr_count : 0));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    lfs_probe_log(\"after_lfs_file_opencfg_\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, (cfg ? cfg->buffer : NULL), (cfg ? cfg->attrs : NULL),\n            (cfg ? cfg->attr_count : 0));\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}