{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(name, \".\", 1) (and similarly memcmp(name, \"..\", 2) elsewhere) to compare path components against the string literals \".\" and \"..\". These are null-terminated string literals and memcmp is being used to compare them as strings, which violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/528.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/528.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/528.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe helper: log path components and flag occurrences of \".\" and \"..\" */\nstatic void lfs_log_path_components(const char *path)\n{\n    if (path == NULL) {\n        lfs_log_probe(\"path: (NULL)\");\n        return;\n    }\n\n    lfs_log_probe(\"path: \\\"%s\\\"\", path);\n\n    const char *p = path;\n    while (*p != '\\0') {\n        /* skip any leading slashes */\n        while (*p == '/') {\n            p++;\n        }\n        if (*p == '\\0') {\n            break;\n        }\n        const char *start = p;\n        while (*p != '\\0' && *p != '/') {\n            p++;\n        }\n        size_t len = (size_t)(p - start);\n        /* Limit component size to a reasonable buffer */\n        char comp[256];\n        if (len >= sizeof(comp)) {\n            len = sizeof(comp) - 1;\n        }\n        memcpy(comp, start, len);\n        comp[len] = '\\0';\n\n        lfs_log_probe(\"component: \\\"%s\\\" (len=%zu)\", comp, len);\n        /* Use strcmp/strncmp (not memcmp) to detect dot and dotdot components */\n        if (strcmp(comp, \".\") == 0) {\n            lfs_log_probe(\"component is '.'\");\n        }\n        else if (strcmp(comp, \"..\") == 0) {\n            lfs_log_probe(\"component is '..'\");\n        }\n    }\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    lfs_log_probe(\"ENTER lfs_file_opencfg: lfs=%p, file=%p, path=\\\"%s\\\", flags=0x%x, cfg=%p\",\n            (void*)lfs, (void*)file, path ? path : \"(NULL)\", (unsigned)flags, (void*)cfg);\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_log_probe(\"LFS_LOCK failed -> %d\", err);\n        return err;\n    }\n    lfs_log_probe(\"LFS_LOCK succeeded\");\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n    /* Log path components to allow reproducing comparisons against \".\" and \"..\" */\n    lfs_log_path_components(path);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_log_probe(\"calling lfs_file_opencfg_\");\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n    lfs_log_probe(\"lfs_file_opencfg_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"EXIT lfs_file_opencfg -> %d\", err);\n    return err;\n}\n"
}