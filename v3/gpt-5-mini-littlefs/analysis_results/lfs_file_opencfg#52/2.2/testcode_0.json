{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg); expands to the macro definition ((void)cfg), which has no side-effects. Executing this cast-to-void expression does not change program state, so removing the statement would not affect program behaviour in the provided build. Therefore this statement is dead code (it only exists for symmetry with a non-no-op unlock in other configurations).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/522.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\nstatic void lfs_probe_log_state(const lfs_t *lfs, const lfs_file_t *file,\n        const struct lfs_file_config *cfg, const char *phase, int err) {\n    FILE *fp = fopen(\"/tmp/logs/522.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Safely print cfg internals only if cfg is non-NULL */\n    const void *cfg_buffer = cfg ? cfg->buffer : NULL;\n    const void *cfg_attrs  = cfg ? (const void*)cfg->attrs : NULL;\n    uint32_t cfg_attr_count = cfg ? cfg->attr_count : 0;\n\n    fprintf(fp,\n            \"phase=%s lfs=%p file=%p cfg=%p cfg->buffer=%p cfg->attrs=%p cfg->attr_count=%\" PRIu32 \" err=%d\\n\",\n            phase, (const void*)lfs, (const void*)file, (const void*)cfg,\n            cfg_buffer, cfg_attrs, cfg_attr_count, err);\n    fclose(fp);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that lock failed and we are returning early */\n        lfs_probe_log_state(lfs, file, cfg, \"lock_failed_return\", err);\n        return err;\n    }\n\n    /* Log after successful lock */\n    lfs_probe_log_state(lfs, file, cfg, \"after_lock\", err);\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log result of the inner open function before trace/unlock */\n    lfs_probe_log_state(lfs, file, cfg, \"after_inner_open\", err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n\n    /* Log state immediately before unlocking (the reported violation: unlock is a no-op) */\n    lfs_probe_log_state(lfs, file, cfg, \"before_unlock\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log state immediately after unlocking to capture whether unlock changed anything */\n    lfs_probe_log_state(lfs, file, cfg, \"after_unlock\", err);\n\n    return err;\n}\n"
}