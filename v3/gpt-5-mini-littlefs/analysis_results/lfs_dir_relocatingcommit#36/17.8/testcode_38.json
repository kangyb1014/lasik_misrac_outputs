{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_traverse the parameter pointer 'dir' (declared as const lfs_mdir_t *dir) is assigned to: dir = stack[sp-1].dir;. This changes the pointer parameter itself (rebinds which object it points to) rather than modifying the object pointed to, thus violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers */\nstatic void lfs_probe_vlog(const char *fmt, va_list ap) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void lfs_probe_log(const char *fmt, ...) {\n    va_list ap;\n    va_start(ap, fmt);\n    lfs_probe_vlog(fmt, ap);\n    va_end(ap);\n}\n\nstatic void lfs_probe_log_dir(const char *prefix, const lfs_mdir_t *dir) {\n    if (!dir) {\n        lfs_probe_log(\"%s: dir=NULL\", prefix);\n        return;\n    }\n    /* Print basic fields that are used in this function */\n    lfs_probe_log(\n        \"%s: dir=%p pair=[%llu,%llu] off=%llu etag=%u erased=%d count=%d split=%d tail=[%llu,%llu]\",\n        prefix,\n        (void*)dir,\n        (unsigned long long)dir->pair[0], (unsigned long long)dir->pair[1],\n        (unsigned long long)dir->off,\n        (unsigned)dir->etag,\n        (int)dir->erased,\n        (int)dir->count,\n        (int)dir->split,\n        (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1]\n    );\n}\n\nstatic void lfs_probe_log_attrs(const struct lfs_mattr *attrs, int attrcount) {\n    for (int i = 0; i < attrcount; i++) {\n        const struct lfs_mattr *a = &attrs[i];\n        lfs_probe_log(\"attr[%d]: tag=%u type3=%u type1=%u chunk=%u buffer=%p\", i,\n            (unsigned)a->tag, (unsigned)lfs_tag_type3(a->tag), (unsigned)lfs_tag_type1(a->tag),\n            (unsigned)lfs_tag_chunk(a->tag), (void*)a->buffer);\n    }\n}\n\nstatic void lfs_probe_log_state(const char *where, lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2], const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    lfs_probe_log(\"--- %s ---\", where);\n    lfs_probe_log(\"lfs=%p pdir=%p pair=[%llu,%llu] attrcount=%d\", (void*)lfs,\n        (void*)pdir, (unsigned long long)pair[0], (unsigned long long)pair[1], attrcount);\n    lfs_probe_log_dir(\"dir(before)\", dir);\n    lfs_probe_log_attrs(attrs, attrcount);\n}\n\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    /* Probe: log entry and initial state */\n    lfs_probe_log_state(\"enter lfs_dir_relocatingcommit\", lfs, dir, pair, attrs, attrcount, pdir);\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    /* Probe: after applying attr changes */\n    lfs_probe_log_dir(\"after attr loop\", dir);\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        /* Probe: log result of fs_pred */\n        lfs_probe_log(\"lfs_fs_pred returned %d; pdir=%p split=%d\", err, (void*)pdir, (int)pdir->split);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_probe_log(\"early return from fs_pred with err=%d\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            lfs_probe_log(\"state set to LFS_OK_DROPPED, goto fixmlist\");\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        /* Probe: about to traverse attrs that need to be written out */\n        lfs_probe_log(\"about to call lfs_dir_traverse with dir=%p\", (void*)dir);\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n\n        /* Probe: after lfs_dir_traverse returns */\n        lfs_probe_log(\"lfs_dir_traverse returned %d\", err);\n        lfs_probe_log_dir(\"dir(after lfs_dir_traverse)\", dir);\n\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_probe_log(\"lfs_dir_traverse signalled NOSPC or CORRUPT, goto compact\");\n                goto compact;\n            }\n            lfs_probe_log(\"lfs_dir_traverse returned error %d -> returning\", err);\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                lfs_probe_log(\"lfs_dir_getgstate returned %d -> returning\", err);\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    lfs_probe_log(\"lfs_dir_commitattr signalled NOSPC or CORRUPT, goto compact\");\n                    goto compact;\n                }\n                lfs_probe_log(\"lfs_dir_commitattr returned %d -> returning\", err);\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_probe_log(\"lfs_dir_commitcrc signalled NOSPC or CORRUPT, goto compact\");\n                goto compact;\n            }\n            lfs_probe_log(\"lfs_dir_commitcrc returned %d -> returning\", err);\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        lfs_probe_log_dir(\"dir(after successful commit)\", dir);\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_probe_log(\"enter compact path: dropping pcache and calling lfs_dir_splittingcompact\");\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    lfs_probe_log(\"lfs_dir_splittingcompact returned %d\", state);\n    if (state < 0) {\n        lfs_probe_log(\"compact returned error %d -> returning\", state);\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    lfs_probe_log(\"enter fixmlist; oldpair=[%llu,%llu]\", (unsigned long long)oldpair[0], (unsigned long long)oldpair[1]);\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            lfs_probe_log(\"fixing mlist entry d=%p id=%d type=%d\", (void*)d, (int)d->id, (int)d->type);\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                        lfs_probe_log(\"mlist d=%p: cleared pair because of delete attr[%d]\", (void*)d, i);\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                        lfs_probe_log(\"mlist d=%p: decremented id to %d due to delete attr[%d]\", (void*)d, (int)d->id, i);\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                        lfs_probe_log(\"mlist d=%p: incremented id to %d due to create attr[%d]\", (void*)d, (int)d->id, i);\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                lfs_probe_log(\"mlist d=%p: fetching tail=%p (pair=[%llu,%llu])\", (void*)d, (void*)d->m.tail,\n                    (unsigned long long)d->m.tail[0], (unsigned long long)d->m.tail[1]);\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                lfs_probe_log(\"lfs_dir_fetch returned %d for mlist d=%p\", err, (void*)d);\n                if (err) {\n                    lfs_probe_log(\"lfs_dir_fetch error %d -> returning\", err);\n                    return err;\n                }\n            }\n        }\n    }\n\n    lfs_probe_log(\"exit lfs_dir_relocatingcommit state=%d\", state);\n    return state;\n}\n"
}