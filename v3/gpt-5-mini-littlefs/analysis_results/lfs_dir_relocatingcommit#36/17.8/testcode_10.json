{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_traverse (signature includes parameters 'uint16_t begin, uint16_t end'), the statement 'end = fromid+1;' assigns to the parameter 'end'. This modifies a non-pointer function parameter (uint16_t end) within the function, which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/367.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    /* Log entry and initial state */\n    lfs_log_probe(\"ENTER lfs_dir_relocatingcommit: dir=%p pair=[%llu,%llu] dir->count=%d attrcount=%d dir->off=%llu dir->etag=%u\",\n            (void*)dir, (unsigned long long)pair[0], (unsigned long long)pair[1],\n            (int)dir->count, attrcount, (unsigned long long)dir->off, (unsigned)dir->etag);\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        unsigned tagtype3 = (unsigned)lfs_tag_type3(attrs[i].tag);\n        unsigned tagtype1 = (unsigned)lfs_tag_type1(attrs[i].tag);\n        lfs_log_probe(\"attrs[%d]: tag=0x%x tagtype3=%u tagtype1=%u\", i, (unsigned)attrs[i].tag, tagtype3, tagtype1);\n\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            lfs_log_probe(\"  CREATE before dir->count=%d\", (int)dir->count);\n            dir->count += 1;\n            lfs_log_probe(\"  CREATE after dir->count=%d\", (int)dir->count);\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            lfs_log_probe(\"  DELETE before dir->count=%d (will decrement)\", (int)dir->count);\n            dir->count -= 1;\n            hasdelete = true;\n            lfs_log_probe(\"  DELETE after dir->count=%d hasdelete=%d\", (int)dir->count, (int)hasdelete);\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n            lfs_log_probe(\"  TAIL set tail=[%llu,%llu] split=%d\", (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1], (int)dir->split);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        lfs_log_probe(\"HASDELETE and dir->count==0: calling lfs_fs_pred\");\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        lfs_log_probe(\"  lfs_fs_pred returned %d err (LFS_ERR_NOENT=%d)\", err, (int)LFS_ERR_NOENT);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_log_probe(\"  lfs_fs_pred hard error -> returning %d\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            lfs_log_probe(\"  Directory dropped: state set to LFS_OK_DROPPED -> goto fixmlist\");\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        /* try to commit */\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        lfs_log_probe(\"COMMIT path: commit.block=%llu commit.off=%llu commit.ptag=%u commit.begin=%llu commit.end=%llu\",\n                (unsigned long long)commit.block, (unsigned long long)commit.off, (unsigned)commit.ptag,\n                (unsigned long long)commit.begin, (unsigned long long)commit.end);\n\n        /* traverse attrs that need to be written out */\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n\n        lfs_log_probe(\"  lfs_dir_traverse returned err=%d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe(\"  traverse signaled NOSPC or CORRUPT -> goto compact\");\n                goto compact;\n            }\n            lfs_log_probe(\"  traverse returned fatal err=%d -> returning\", err);\n            return err;\n        }\n\n        /* commit any global diffs if we have any */\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        lfs_log_probe(\"  computed delta.tag=0x%x\", (unsigned)delta.tag);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            lfs_log_probe(\"  lfs_dir_getgstate returned %d\", err);\n            if (err) {\n                lfs_log_probe(\"  lfs_dir_getgstate fatal -> returning %d\", err);\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            lfs_log_probe(\"  lfs_dir_commitattr returned %d\", err);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe(\"  commitattr signaled NOSPC or CORRUPT -> goto compact\");\n                    goto compact;\n                }\n                lfs_log_probe(\"  commitattr fatal -> returning %d\", err);\n                return err;\n            }\n        }\n\n        /* finalize commit with the crc */\n        err = lfs_dir_commitcrc(lfs, &commit);\n        lfs_log_probe(\"  lfs_dir_commitcrc returned %d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe(\"  commitcrc signaled NOSPC or CORRUPT -> goto compact\");\n                goto compact;\n            }\n            lfs_log_probe(\"  commitcrc fatal -> returning %d\", err);\n            return err;\n        }\n\n        /* successful commit, update dir */\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        /* and update gstate */\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        lfs_log_probe(\"  commit SUCCESS: dir->off=%llu dir->etag=%u\", (unsigned long long)dir->off, (unsigned)dir->etag);\n\n        goto fixmlist;\n    }\n\ncompact:\n    /* fall back to compaction */\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    lfs_log_probe(\"COMPACT path: calling lfs_dir_splittingcompact with dir->count=%d\", (int)dir->count);\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    lfs_log_probe(\"  lfs_dir_splittingcompact returned state=%d\", state);\n    if (state < 0) {\n        lfs_log_probe(\"  lfs_dir_splittingcompact fatal -> returning %d\", state);\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    /* this complicated bit of logic is for fixing up any active\n     * metadata-pairs that we may have affected\n     *\n     * note we have to make two passes since the mdir passed to\n     * lfs_dir_commit could also be in this list, and even then\n     * we need to copy the pair so they don't get clobbered if we refetch\n     * our mdir.\n     */\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    lfs_log_probe(\"FIXMLIST: oldpair=[%llu,%llu] state=%d\", (unsigned long long)oldpair[0], (unsigned long long)oldpair[1], state);\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            lfs_log_probe(\"  mlist entry matched: d=%p id=%d type=%d m.count=%d m.split=%d\", (void*)d, (int)d->id, (int)d->type, (int)d->m.count, (int)d->m.split);\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        lfs_log_probe(\"    ADJUST: DELETE clears pair for d id=%d (type=%d)\", (int)d->id, (int)d->type);\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        lfs_log_probe(\"    ADJUST: DELETE decrements id from %d to %d\", (int)d->id, (int)(d->id - 1));\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                            lfs_log_probe(\"      DIR type: pos decremented to %d\", (int)((lfs_dir_t*)d)->pos);\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        lfs_log_probe(\"    ADJUST: CREATE increments id from %d to %d\", (int)d->id, (int)(d->id + 1));\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                            lfs_log_probe(\"      DIR type: pos incremented to %d\", (int)((lfs_dir_t*)d)->pos);\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                /* we split and id is on tail now */\n                lfs_log_probe(\"    WHILE: d->id=%d >= d->m.count=%d and split=%d -> tail fetch\", (int)d->id, (int)d->m.count, (int)d->m.split);\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                    lfs_log_probe(\"      id adjusted for tail -> new id=%d\", (int)d->id);\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                lfs_log_probe(\"      lfs_dir_fetch returned %d\", err);\n                if (err) {\n                    lfs_log_probe(\"      lfs_dir_fetch fatal -> returning %d\", err);\n                    return err;\n                }\n            }\n        }\n    }\n\n    lfs_log_probe(\"EXIT lfs_dir_relocatingcommit: returning state=%d\", state);\n    return state;\n}\n"
}