{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_traverse the statement 'data = stack[sp-1].data;' reassigns the function parameter 'data' (void *data). This changes the pointer parameter itself rather than the object it points to, which violates MISRA C 2023 Rule 17.8 (a function parameter shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - writes to /tmp/logs/367.txt */\nstatic void lfs_log_probe_367(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    /* Log entry and basic inputs */\n    lfs_log_probe_367(\"ENTER lfs_dir_relocatingcommit: lfs=%p dir=%p pair=[%u,%u] attrs=%p attrcount=%d pdir=%p\",\n            (void*)lfs, (void*)dir,\n            (unsigned)pair[0], (unsigned)pair[1], (void*)attrs, attrcount, (void*)pdir);\n\n    /* calculate changes to the directory */\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        unsigned tag = attrs[i].tag;\n        int t3 = lfs_tag_type3(tag);\n        int t1 = lfs_tag_type1(tag);\n\n        lfs_log_probe_367(\"attr[%d]: tag=0x%08x type3=%d type1=%d chunk=%d id=%d\",\n                i, (unsigned)tag, t3, t1, (int)lfs_tag_chunk(tag), (int)lfs_tag_id(tag));\n\n        if (t3 == LFS_TYPE_CREATE) {\n            dir->count += 1;\n            lfs_log_probe_367(\"  CREATE: dir->count now=%d\", dir->count);\n        } else if (t3 == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n            lfs_log_probe_367(\"  DELETE: dir->count now=%d hasdelete=%d\", dir->count, hasdelete);\n        } else if (t1 == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n            lfs_log_probe_367(\"  TAIL: tail=[%u,%u] split=%d\", (unsigned)dir->tail[0], (unsigned)dir->tail[1], (int)dir->split);\n        }\n    }\n\n    lfs_log_probe_367(\"after attr loop: dir->count=%d hasdelete=%d dir->split=%d dir->erased=%d\", dir->count, hasdelete, dir->split, dir->erased);\n\n    /* should we actually drop the directory block? */\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        lfs_log_probe_367(\"hasdelete && dir->count == 0 -> checking parent\");\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        lfs_log_probe_367(\"  lfs_fs_pred returned %d, pdir=%p pdir->split=%d\", err, (void*)pdir, (pdir ? (int)pdir->split : -1));\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_log_probe_367(\"  lfs_fs_pred error -> returning %d\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            lfs_log_probe_367(\"  dropping directory: state set to LFS_OK_DROPPED, goto fixmlist\");\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        /* try to commit */\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        lfs_log_probe_367(\"attempting commit: commit.block=%u commit.off=%u commit.ptag=%u begin=%u end=%u\",\n                (unsigned)commit.block, (unsigned)commit.off, (unsigned)commit.ptag, (unsigned)commit.begin, (unsigned)commit.end);\n\n        /* traverse attrs that need to be written out */\n        lfs_pair_tole32(dir->tail);\n\n        /* Create a named data object for the callback so we can log its address\n           and avoid taking the address of a compound literal. This preserves\n           behaviour but makes the pointer explicit in logs. */\n        struct lfs_dir_commit_commit commit_data = { lfs, &commit };\n        lfs_log_probe_367(\"prepared commit_data at %p (contains lfs=%p commit=%p)\", (void*)&commit_data, (void*)commit_data.lfs, (void*)commit_data.c);\n\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &commit_data);\n\n        lfs_log_probe_367(\"lfs_dir_traverse returned %d; post-traverse commit_data at %p (lfs=%p commit=%p)\",\n                err, (void*)&commit_data, (void*)commit_data.lfs, (void*)commit_data.c);\n\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            lfs_log_probe_367(\"  traverse error %d\", err);\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe_367(\"  traverse indicated NOSPC or CORRUPT -> goto compact\");\n                goto compact;\n            }\n            return err;\n        }\n\n        /* commit any global diffs if we have any */\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        lfs_log_probe_367(\"computed delta.tag=0x%08x\", (unsigned)delta.tag);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            lfs_log_probe_367(\"  lfs_dir_getgstate returned %d\", err);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            lfs_log_probe_367(\"  lfs_dir_commitattr returned %d\", err);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe_367(\"  commitattr indicated NOSPC or CORRUPT -> goto compact\");\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        /* finalize commit with the crc */\n        err = lfs_dir_commitcrc(lfs, &commit);\n        lfs_log_probe_367(\"  lfs_dir_commitcrc returned %d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe_367(\"  commitcrc indicated NOSPC or CORRUPT -> goto compact\");\n                goto compact;\n            }\n            return err;\n        }\n\n        /* successful commit, update dir */\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        /* and update gstate */\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        lfs_log_probe_367(\"commit successful: dir->off=%u dir->etag=%u\", (unsigned)dir->off, (unsigned)dir->etag);\n\n        goto fixmlist;\n    }\n\ncompact:\n    /* fall back to compaction */\n    lfs_log_probe_367(\"compact: dropping pcache and calling lfs_dir_splittingcompact\");\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    lfs_log_probe_367(\"lfs_dir_splittingcompact returned %d\", state);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    /* this complicated bit of logic is for fixing up any active\n       metadata-pairs that we may have affected\n       note we have to make two passes since the mdir passed to\n       lfs_dir_commit could also be in this list, and even then\n       we need to copy the pair so they don't get clobbered if we refetch\n       our mdir. */\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    lfs_log_probe_367(\"fixmlist: oldpair=[%u,%u]\", (unsigned)oldpair[0], (unsigned)oldpair[1]);\n\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            lfs_log_probe_367(\"  matching mlist entry found: d=%p id=%d type=%d m.pair=[%u,%u]\",\n                    (void*)d, d->id, d->type, (unsigned)d->m.pair[0], (unsigned)d->m.pair[1]);\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    int t3 = lfs_tag_type3(attrs[i].tag);\n                    if (t3 == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                        lfs_log_probe_367(\"    applied delete to mlist entry (id match): set pair to NULL\");\n                    } else if (t3 == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                        lfs_log_probe_367(\"    applied delete to mlist entry (id>) new id=%d\", d->id);\n                    } else if (t3 == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                        lfs_log_probe_367(\"    applied create to mlist entry new id=%d\", d->id);\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                /* we split and id is on tail now */\n                lfs_log_probe_367(\"    id >= m.count and m.split: id=%d m.count=%d, fetching tail %u %u\",\n                        d->id, d->m.count, (unsigned)d->m.tail[0], (unsigned)d->m.tail[1]);\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                lfs_log_probe_367(\"    lfs_dir_fetch returned %d\", err);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    lfs_log_probe_367(\"EXIT lfs_dir_relocatingcommit: state=%d\", state);\n    return state;\n}\n"
}