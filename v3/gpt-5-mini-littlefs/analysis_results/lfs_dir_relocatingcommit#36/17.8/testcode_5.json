{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment modifies the function parameter 'tmask' (a non-pointer parameter) inside lfs_dir_traverse: tmask = stack[sp-1].tmask;. This changes the value of a parameter rather than using/altering a local copy (the code also sets tmask = 0 earlier). According to MISRA C 2023 Rule 17.8, modifying a function parameter is not allowed. A fix is to copy the parameter to a local variable (e.g., lfs_tag_t local_tmask = tmask;) and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging utilities. These are lightweight and conservative: they\n   attempt to log useful state to /tmp/logs/367.txt but do not alter any\n   program state or control flow. */\nstatic void lfs_log_probe_enter(const char *tag) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    fprintf(f, \"[ENTER] %s\\n\", tag);\n    fclose(f);\n}\n\nstatic void lfs_log_probe_printf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Log some key fields of dir, pair, attrs (as tags) and control points.\n   Keep the logging non-intrusive: we never modify parameters and only\n   open/close the log file. */\nstatic void lfs_log_dir_state(const char *prefix, lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2], const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    fprintf(f, \"%s: dir=%p pair=[%u,%u] attrcount=%d dir->count=%d dir->erased=%d dir->off=%u dir->etag=%u\\n\",\n            prefix, (void*)dir, (unsigned)pair[0], (unsigned)pair[1], attrcount,\n            (int)(dir ? dir->count : -1), (int)(dir ? dir->erased : -1),\n            (unsigned)(dir ? dir->off : 0), (unsigned)(dir ? dir->etag : 0));\n    if (dir) {\n        fprintf(f, \"%s: dir->tail=[%u,%u] split=%d\\n\", prefix,\n                (unsigned)dir->tail[0], (unsigned)dir->tail[1], (int)dir->split);\n    }\n    if (attrs && attrcount > 0) {\n        fprintf(f, \"%s: attrs tags:\", prefix);\n        for (int i = 0; i < attrcount; i++) {\n            fprintf(f, \" 0x%08x\", (unsigned)attrs[i].tag);\n        }\n        fprintf(f, \"\\n\");\n    }\n    if (pdir) {\n        fprintf(f, \"%s: pdir=%p pdir->split=%d pdir->pair=[%u,%u]\\n\", prefix,\n                (void*)pdir, (int)pdir->split, (unsigned)pdir->pair[0], (unsigned)pdir->pair[1]);\n    }\n    fclose(f);\n}\n\nstatic void lfs_log_mlist_changes(const char *prefix, lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t oldpair[2], const struct lfs_mattr *attrs, int attrcount) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) { return; }\n    fprintf(f, \"%s: scanning mlist for oldpair=[%u,%u]\\n\", prefix, (unsigned)oldpair[0], (unsigned)oldpair[1]);\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        fprintf(f, \"  mlist node %p: id=%d type=%d pair=[%u,%u] m.count=%d m.split=%d\\n\",\n                (void*)d, (int)d->id, (int)d->type, (unsigned)d->m.pair[0], (unsigned)d->m.pair[1],\n                (int)d->m.count, (int)d->m.split);\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            fprintf(f, \"    -> match; will copy dir state into this node\\n\");\n            /* We don't print internal modifications here (they happen below)\n               but we record relevant attrs decisions for reproducibility. */\n            for (int i = 0; i < attrcount; i++) {\n                unsigned tag = (unsigned)attrs[i].tag;\n                fprintf(f, \"      attr[%d].tag=0x%08x\\n\", i, tag);\n            }\n        }\n    }\n    fclose(f);\n}\n\n/* Modified lfs_dir_relocatingcommit with conservative logging probes inserted.\n   Original logic preserved, probes only add logging calls. */\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    /* Log entry and initial state */\n    lfs_log_probe_enter(\"lfs_dir_relocatingcommit\");\n    lfs_log_dir_state(\"entry\", lfs, dir, pair, attrs, attrcount, pdir);\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    /* Log after calculating changes */\n    lfs_log_dir_state(\"after_calc_changes\", lfs, dir, pair, attrs, attrcount, pdir);\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        lfs_log_probe_printf(\"hasdelete && dir->count==0: lfs_fs_pred returned %d\", err);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_log_probe_printf(\"returning err=%d from lfs_fs_pred branch\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            lfs_log_probe_printf(\"dropping directory: state set to LFS_OK_DROPPED\");\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        lfs_log_probe_printf(\"dir->erased true: attempting commit\");\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        lfs_log_probe_printf(\"before lfs_dir_traverse: commit.block=%u commit.off=%u commit.ptag=%u\", (unsigned)commit.block, (unsigned)commit.off, (unsigned)commit.ptag);\n        /* Log attrs tags and relevant zeros we pass to lfs_dir_traverse so that\n           other agents can reproduce parameter values and detect modifications\n           of parameters inside lfs_dir_traverse (e.g. tmask changing). */\n        lfs_log_dir_state(\"before_traverse\", lfs, dir, pair, attrs, attrcount, pdir);\n\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n\n        lfs_log_probe_printf(\"after lfs_dir_traverse: err=%d\", err);\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe_printf(\"lfs_dir_traverse -> goto compact because err=%d\", err);\n                goto compact;\n            }\n            lfs_log_probe_printf(\"returning err=%d from lfs_dir_traverse branch\", err);\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            lfs_log_probe_printf(\"lfs_dir_getgstate returned %d\", err);\n            if (err) {\n                lfs_log_probe_printf(\"returning err=%d from getgstate branch\", err);\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            lfs_log_probe_printf(\"lfs_dir_commitattr (movestate) returned %d\", err);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe_printf(\"lfs_dir_commitattr -> goto compact because err=%d\", err);\n                    goto compact;\n                }\n                lfs_log_probe_printf(\"returning err=%d from commitattr branch\", err);\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        lfs_log_probe_printf(\"lfs_dir_commitcrc returned %d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe_printf(\"lfs_dir_commitcrc -> goto compact because err=%d\", err);\n                goto compact;\n            }\n            lfs_log_probe_printf(\"returning err=%d from commitcrc branch\", err);\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        lfs_log_dir_state(\"after_successful_commit\", lfs, dir, pair, attrs, attrcount, pdir);\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_log_probe_printf(\"compact: performing splitting/compaction\");\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    lfs_log_probe_printf(\"lfs_dir_splittingcompact returned %d\", state);\n    if (state < 0) {\n        lfs_log_probe_printf(\"returning state=%d from compact branch\", state);\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    lfs_log_probe_printf(\"enter fixmlist\");\n    /* this complicated bit of logic is for fixing up any active\n       metadata-pairs that we may have affected\n       ... */\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n\n    /* Log the mlist scanning plan so other agents can reproduce and\n       observe how nodes that match oldpair are modified. */\n    lfs_log_mlist_changes(\"fixmlist_before_changes\", lfs, dir, oldpair, attrs, attrcount);\n\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                        lfs_log_probe_printf(\"fixmlist: cleared pair for node %p due to delete attr[%d] (id==%d)\", (void*)d, i, d->id);\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                        lfs_log_probe_printf(\"fixmlist: decremented id for node %p due to delete attr[%d], new id=%d\", (void*)d, i, d->id);\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                        lfs_log_probe_printf(\"fixmlist: incremented id for node %p due to create attr[%d], new id=%d\", (void*)d, i, d->id);\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                /* we split and id is on tail now */\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                lfs_log_probe_printf(\"fixmlist: lfs_dir_fetch returned %d for node %p\", err, (void*)d);\n                if (err) {\n                    lfs_log_probe_printf(\"fixmlist: returning err=%d from fetch loop\", err);\n                    return err;\n                }\n            }\n        }\n    }\n\n    lfs_log_probe_printf(\"exit lfs_dir_relocatingcommit state=%d\", state);\n    return state;\n}\n"
}