{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn function lfs_dir_traverse the statement 'end = stack[sp-1].end;' assigns to the parameter 'end' (a uint16_t function parameter). This overwrites a non-pointer function parameter variable (and is mirrored by similar assignments to other parameters when popping the stack), which modifies a function parameter and thus violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_relocatingcommit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_relocatingcommit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_relocatingcommit:\n```c\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            if (err) {\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    goto compact;\n                }\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                goto compact;\n            }\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    if (state < 0) {\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(attrs[i].tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(attrs[i].tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(attrs[i].tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                if (err) {\n                    return err;\n                }\n            }\n        }\n    }\n\n    return state;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_relocatingcommit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/367.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,\n        const lfs_block_t pair[2],\n        const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *pdir) {\n    int state = 0;\n\n    /* Log entry and key initial state */\n    lfs_log_probe(\"ENTER lfs_dir_relocatingcommit: lfs=%p dir=%p pair=[%lu,%lu] pdir=%p attrcount=%d dir->count=%d dir->erased=%d dir->off=%lu dir->etag=%lu split=%d tail=[%lu,%lu]\", \n            (void*)lfs, (void*)dir, (unsigned long)pair[0], (unsigned long)pair[1], (void*)pdir, attrcount,\n            (int)dir->count, (int)dir->erased, (unsigned long)dir->off, (unsigned long)dir->etag,\n            (int)dir->split, (unsigned long)dir->tail[0], (unsigned long)dir->tail[1]);\n\n    // calculate changes to the directory\n    bool hasdelete = false;\n    for (int i = 0; i < attrcount; i++) {\n        unsigned tag = attrs[i].tag;\n        if (lfs_tag_type3(tag) == LFS_TYPE_CREATE) {\n            dir->count += 1;\n            lfs_log_probe(\"ATTR[%d]: CREATE tag=0x%08x -> dir->count=%d\", i, tag, (int)dir->count);\n        } else if (lfs_tag_type3(tag) == LFS_TYPE_DELETE) {\n            LFS_ASSERT(dir->count > 0);\n            dir->count -= 1;\n            hasdelete = true;\n            lfs_log_probe(\"ATTR[%d]: DELETE tag=0x%08x -> dir->count=%d\", i, tag, (int)dir->count);\n        } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {\n            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];\n            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];\n            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);\n            lfs_pair_fromle32(dir->tail);\n            lfs_log_probe(\"ATTR[%d]: TAIL tag=0x%08x -> tail=[%lu,%lu] split=%d\", i, tag, (unsigned long)dir->tail[0], (unsigned long)dir->tail[1], (int)dir->split);\n        } else {\n            lfs_log_probe(\"ATTR[%d]: OTHER tag=0x%08x (no change)\", i, tag);\n        }\n    }\n\n    // should we actually drop the directory block?\n    if (hasdelete && dir->count == 0) {\n        LFS_ASSERT(pdir);\n        lfs_log_probe(\"hasdelete && dir->count==0 -> calling lfs_fs_pred with dir->pair=[%lu,%lu]\", (unsigned long)dir->pair[0], (unsigned long)dir->pair[1]);\n        int err = lfs_fs_pred(lfs, dir->pair, pdir);\n        lfs_log_probe(\"lfs_fs_pred returned %d pdir->split=%d\", err, (int)pdir->split);\n        if (err && err != LFS_ERR_NOENT) {\n            lfs_log_probe(\"lfs_fs_pred fatal err=%d -> RETURN\", err);\n            return err;\n        }\n\n        if (err != LFS_ERR_NOENT && pdir->split) {\n            state = LFS_OK_DROPPED;\n            lfs_log_probe(\"state set to LFS_OK_DROPPED, jumping to fixmlist\");\n            goto fixmlist;\n        }\n    }\n\n    if (dir->erased) {\n        // try to commit\n        struct lfs_commit commit = {\n            .block = dir->pair[0],\n            .off = dir->off,\n            .ptag = dir->etag,\n            .crc = 0xffffffff,\n\n            .begin = dir->off,\n            .end = (lfs->cfg->metadata_max ?\n                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,\n        };\n\n        lfs_log_probe(\"Attempt commit: commit.block=%lu commit.off=%lu commit.ptag=%lu commit.begin=%lu commit.end=%lu\", \n                (unsigned long)commit.block, (unsigned long)commit.off, (unsigned long)commit.ptag,\n                (unsigned long)commit.begin, (unsigned long)commit.end);\n\n        // traverse attrs that need to be written out\n        lfs_pair_tole32(dir->tail);\n        lfs_log_probe(\"Calling lfs_dir_traverse: begin=%lu end=%lu dir->off=%lu dir->etag=%lu attrs=%p attrcount=%d\", \n                (unsigned long)dir->off, (unsigned long)dir->etag, (unsigned long)dir->off, (unsigned long)dir->etag,\n                (void*)attrs, attrcount);\n        int err = lfs_dir_traverse(lfs,\n                dir, dir->off, dir->etag, attrs, attrcount,\n                0, 0, 0, 0, 0,\n                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){\n                    lfs, &commit});\n        lfs_pair_fromle32(dir->tail);\n        lfs_log_probe(\"lfs_dir_traverse returned %d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe(\"lfs_dir_traverse -> NOSPC or CORRUPT -> goto compact\");\n                goto compact;\n            }\n            lfs_log_probe(\"lfs_dir_traverse -> fatal err=%d -> RETURN\", err);\n            return err;\n        }\n\n        // commit any global diffs if we have any\n        lfs_gstate_t delta = {0};\n        lfs_gstate_xor(&delta, &lfs->gstate);\n        lfs_gstate_xor(&delta, &lfs->gdisk);\n        lfs_gstate_xor(&delta, &lfs->gdelta);\n        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);\n        if (!lfs_gstate_iszero(&delta)) {\n            lfs_log_probe(\"Non-zero gstate delta detected, calling lfs_dir_getgstate\");\n            err = lfs_dir_getgstate(lfs, dir, &delta);\n            lfs_log_probe(\"lfs_dir_getgstate returned %d\", err);\n            if (err) {\n                lfs_log_probe(\"lfs_dir_getgstate -> fatal err=%d -> RETURN\", err);\n                return err;\n            }\n\n            lfs_gstate_tole32(&delta);\n            err = lfs_dir_commitattr(lfs, &commit,\n                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,\n                        sizeof(delta)), &delta);\n            lfs_log_probe(\"lfs_dir_commitattr MOVESTATE returned %d\", err);\n            if (err) {\n                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                    lfs_log_probe(\"lfs_dir_commitattr -> NOSPC or CORRUPT -> goto compact\");\n                    goto compact;\n                }\n                lfs_log_probe(\"lfs_dir_commitattr -> fatal err=%d -> RETURN\", err);\n                return err;\n            }\n        }\n\n        // finalize commit with the crc\n        err = lfs_dir_commitcrc(lfs, &commit);\n        lfs_log_probe(\"lfs_dir_commitcrc returned %d\", err);\n        if (err) {\n            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {\n                lfs_log_probe(\"lfs_dir_commitcrc -> NOSPC or CORRUPT -> goto compact\");\n                goto compact;\n            }\n            lfs_log_probe(\"lfs_dir_commitcrc -> fatal err=%d -> RETURN\", err);\n            return err;\n        }\n\n        // successful commit, update dir\n        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);\n        dir->off = commit.off;\n        dir->etag = commit.ptag;\n        // and update gstate\n        lfs->gdisk = lfs->gstate;\n        lfs->gdelta = (lfs_gstate_t){0};\n\n        lfs_log_probe(\"Commit success: dir->off=%lu dir->etag=%lu gstate updated\", (unsigned long)dir->off, (unsigned long)dir->etag);\n\n        goto fixmlist;\n    }\n\ncompact:\n    // fall back to compaction\n    lfs_log_probe(\"Entering compact path: dropping pcache and calling lfs_dir_splittingcompact\");\n    lfs_cache_drop(lfs, &lfs->pcache);\n\n    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,\n            dir, 0, dir->count);\n    lfs_log_probe(\"lfs_dir_splittingcompact returned %d\", state);\n    if (state < 0) {\n        lfs_log_probe(\"lfs_dir_splittingcompact -> fatal state=%d -> RETURN\", state);\n        return state;\n    }\n\n    goto fixmlist;\n\nfixmlist:;\n    // this complicated bit of logic is for fixing up any active\n    // metadata-pairs that we may have affected\n    //\n    // note we have to make two passes since the mdir passed to\n    // lfs_dir_commit could also be in this list, and even then\n    // we need to copy the pair so they don't get clobbered if we refetch\n    // our mdir.\n    lfs_block_t oldpair[2] = {pair[0], pair[1]};\n    lfs_log_probe(\"fixmlist: iterating mlist with oldpair=[%lu,%lu]\", (unsigned long)oldpair[0], (unsigned long)oldpair[1]);\n    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {\n        lfs_log_probe(\"mlist node: d=%p id=%d type=%d m.pair=[%lu,%lu] m.count=%d m.split=%d\", (void*)d, (int)d->id, (int)d->type, (unsigned long)d->m.pair[0], (unsigned long)d->m.pair[1], (int)d->m.count, (int)d->m.split);\n        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {\n            lfs_log_probe(\"mlist match found -> copying dir into d->m\");\n            d->m = *dir;\n            if (d->m.pair != pair) {\n                for (int i = 0; i < attrcount; i++) {\n                    unsigned tag = attrs[i].tag;\n                    if (lfs_tag_type3(tag) == LFS_TYPE_DELETE &&\n                            d->id == lfs_tag_id(tag) &&\n                            d->type != LFS_TYPE_DIR) {\n                        d->m.pair[0] = LFS_BLOCK_NULL;\n                        d->m.pair[1] = LFS_BLOCK_NULL;\n                        lfs_log_probe(\"mlist update: DELETE affected non-dir id=%d -> set pair to NULL\", d->id);\n                    } else if (lfs_tag_type3(tag) == LFS_TYPE_DELETE &&\n                            d->id > lfs_tag_id(tag)) {\n                        d->id -= 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos -= 1;\n                        }\n                        lfs_log_probe(\"mlist update: DELETE id adjustment -> new d->id=%d\", d->id);\n                    } else if (lfs_tag_type3(tag) == LFS_TYPE_CREATE &&\n                            d->id >= lfs_tag_id(tag)) {\n                        d->id += 1;\n                        if (d->type == LFS_TYPE_DIR) {\n                            ((lfs_dir_t*)d)->pos += 1;\n                        }\n                        lfs_log_probe(\"mlist update: CREATE id adjustment -> new d->id=%d\", d->id);\n                    }\n                }\n            }\n\n            while (d->id >= d->m.count && d->m.split) {\n                // we split and id is on tail now\n                lfs_log_probe(\"mlist node requires fetch: d->id=%d >= d->m.count=%d && d->m.split=%d\", d->id, d->m.count, (int)d->m.split);\n                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {\n                    d->id -= d->m.count;\n                    lfs_log_probe(\"Adjusted d->id after tail handling -> %d\", d->id);\n                }\n                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n                lfs_log_probe(\"lfs_dir_fetch returned %d for d=%p\", err, (void*)d);\n                if (err) {\n                    lfs_log_probe(\"lfs_dir_fetch -> fatal err=%d -> RETURN\", err);\n                    return err;\n                }\n            }\n        }\n    }\n\n    lfs_log_probe(\"EXIT lfs_dir_relocatingcommit: returning state=%d\", state);\n    return state;\n}\n"
}