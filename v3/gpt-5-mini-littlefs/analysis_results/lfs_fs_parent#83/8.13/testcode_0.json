{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_fs_parent_match the void* data is cast to a non-const pointer: \"struct lfs_fs_parent_match *find = data;\". The function only reads from find (no modifications), so per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type (e.g. \"const struct lfs_fs_parent_match *find = data;\"). As written it violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent:\n```c\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            return err;\n        }\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n        if (tag && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append logs to /tmp/logs/833.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/833.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n\n    lfs_probe_log(\"lfs_fs_parent: enter (lfs=%p, pair=[%llu,%llu])\",\n            (void*)lfs, (unsigned long long)pair[0], (unsigned long long)pair[1]);\n\n    while (!lfs_pair_isnull(parent->tail)) {\n        lfs_probe_log(\"lfs_fs_parent: loop start parent->tail=[%llu,%llu]\", \n                (unsigned long long)parent->tail[0], (unsigned long long)parent->tail[1]);\n\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        lfs_probe_log(\"lfs_fs_parent: lfs_tortoise_detectcycles returned %d (tortoise.pair=[%llu,%llu], i=%d, period=%d)\",\n                err,\n                (unsigned long long)tortoise.pair[0], (unsigned long long)tortoise.pair[1],\n                tortoise.i, tortoise.period);\n        if (err < 0) {\n            lfs_probe_log(\"lfs_fs_parent: returning err=%d due to detectcycles\", err);\n            return err;\n        }\n\n        /*\n         * Preserve original logic: create a local struct with the same contents\n         * as the original compound literal so we can log its address and fields\n         * before passing it to lfs_dir_fetchmatch.\n         */\n        struct lfs_fs_parent_match find = { lfs, {pair[0], pair[1]} };\n\n        lfs_probe_log(\"lfs_fs_parent: about to call lfs_dir_fetchmatch with find@%p (find.lfs=%p, find.pair=[%llu,%llu])\",\n                (void*)&find, (void*)find.lfs,\n                (unsigned long long)find.pair[0], (unsigned long long)find.pair[1]);\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &find);\n\n        lfs_probe_log(\"lfs_fs_parent: lfs_dir_fetchmatch returned tag=%lld (LFS_ERR_NOENT=%lld)\",\n                (long long)tag, (long long)LFS_ERR_NOENT);\n\n        if (tag && tag != LFS_ERR_NOENT) {\n            lfs_probe_log(\"lfs_fs_parent: returning tag=%lld (non-zero and not NOENT)\", (long long)tag);\n            return tag;\n        }\n\n        lfs_probe_log(\"lfs_fs_parent: loop continue (parent->tail now=[%llu,%llu])\",\n                (unsigned long long)parent->tail[0], (unsigned long long)parent->tail[1]);\n    }\n\n    lfs_probe_log(\"lfs_fs_parent: exiting with LFS_ERR_NOENT\");\n    return LFS_ERR_NOENT;\n}\n"
}