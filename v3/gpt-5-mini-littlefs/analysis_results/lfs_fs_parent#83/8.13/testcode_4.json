{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe address of a non-const compound literal is passed as a plain (non-const) void* to the fetch/match machinery, even though the callback only reads the data. Concretely: &(struct lfs_fs_parent_match){ lfs, {pair[0], pair[1]} } is passed to lfs_dir_fetchmatch and later interpreted in lfs_fs_parent_match as a read-only struct. The pointer therefore could and should point to a const-qualified type (for example pass a const struct lfs_fs_parent_match* or change the callback/data parameter to const void*), so the current usage violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent:\n```c\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            return err;\n        }\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n        if (tag && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append logs about control flow and relevant state to /tmp/logs/833.txt */\nstatic void lfs_fs_parent_probe(const char *stage, lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent, const struct lfs_tortoise_t *tortoise, const void *data_addr) {\n    FILE *f = fopen(\"/tmp/logs/833.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"--- lfs_fs_parent probe: %s ---\\n\", stage);\n    fprintf(f, \"lfs=%p parent=%p data_addr=%p\\n\", (void *)lfs, (void *)parent, data_addr);\n    fprintf(f, \"pair=[%llu, %llu]\\n\", (unsigned long long)pair[0], (unsigned long long)pair[1]);\n    if (parent != NULL) {\n        fprintf(f, \"parent->tail=[%llu, %llu]\\n\",\n                (unsigned long long)parent->tail[0],\n                (unsigned long long)parent->tail[1]);\n    }\n    if (tortoise != NULL) {\n        fprintf(f, \"tortoise.pair=[%llu, %llu] i=%d period=%d\\n\",\n                (unsigned long long)tortoise->pair[0],\n                (unsigned long long)tortoise->pair[1],\n                (int)tortoise->i, (int)tortoise->period);\n    }\n    fprintf(f, \"--- end probe ---\\n\\n\");\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    /* use fetchmatch with callback to find pairs */\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            /* log error path */\n            lfs_fs_parent_probe(\"after_detectcycles_error\", lfs, pair, parent, &tortoise, NULL);\n            return err;\n        }\n\n        /*\n         * Create an explicit local instance (rather than using a compound\n         * literal directly) so we can log its address and contents. This\n         * preserves original logic while providing reproducible evidence of\n         * what address/value is passed into lfs_dir_fetchmatch.\n         */\n        struct lfs_fs_parent_match match = { lfs, {pair[0], pair[1]} };\n\n        /* Log state right before calling lfs_dir_fetchmatch */\n        lfs_fs_parent_probe(\"before_lfs_dir_fetchmatch\", lfs, pair, parent, &tortoise, &match);\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &match);\n\n        /* Log the result of the fetchmatch call */\n        lfs_fs_parent_probe(\"after_lfs_dir_fetchmatch\", lfs, pair, parent, &tortoise, &match);\n\n        if (tag && tag != LFS_ERR_NOENT) {\n            /* Log return path with tag */\n            FILE *f = fopen(\"/tmp/logs/833.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"lfs_fs_parent returning tag=%lld\\n\\n\", (long long)tag);\n                fclose(f);\n            }\n            return tag;\n        }\n    }\n\n    /* Log final no-entry path */\n    lfs_fs_parent_probe(\"return_noent\", lfs, pair, parent, &tortoise, NULL);\n    return LFS_ERR_NOENT;\n}\n"
}