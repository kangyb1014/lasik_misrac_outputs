{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)tag;' inside lfs_fs_parent_match is an executed no-op whose removal would not change program behaviour (it only suppresses an unused-parameter warning). According to Rule 2.2, this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/832.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent:\n```c\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            return err;\n        }\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n        if (tag && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable trace lines to /tmp/logs/832.txt */\nstatic void lfs_log_probe(const char *fmt, ... ) {\n    FILE *f = fopen(\"/tmp/logs/832.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_fs_parent with logging probes. Original logic preserved. */\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    /* set initial parent tail exactly as original implementation */\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n\n    lfs_log_probe(\"lfs_fs_parent ENTRY: pair=[%llu,%llu], parent_tail=[%llu,%llu]\",\n            (unsigned long long)pair[0], (unsigned long long)pair[1],\n            (unsigned long long)parent->tail[0], (unsigned long long)parent->tail[1]);\n\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    int __lfs_parent_iter = 0;\n\n    while (!lfs_pair_isnull(parent->tail)) {\n        __lfs_parent_iter++;\n        lfs_log_probe(\"lfs_fs_parent ITER %d start: parent_tail=[%llu,%llu]\",\n                __lfs_parent_iter,\n                (unsigned long long)parent->tail[0], (unsigned long long)parent->tail[1]);\n\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        lfs_log_probe(\"lfs_tortoise_detectcycles returned err=%d (ITER %d)\", err, __lfs_parent_iter);\n        if (err < 0) {\n            lfs_log_probe(\"lfs_fs_parent EXIT_ERR: err=%d (ITER %d)\", err, __lfs_parent_iter);\n            return err;\n        }\n\n        lfs_log_probe(\"lfs_fs_parent calling lfs_dir_fetchmatch (ITER %d): search_tag_mask=0x7ff, dir_tag=%u, pair=[%llu,%llu], parent_tail=[%llu,%llu]\",\n                __lfs_parent_iter,\n                (unsigned)0, /* placeholder to indicate tag types used in original call */\n                (unsigned long long)pair[0], (unsigned long long)pair[1],\n                (unsigned long long)parent->tail[0], (unsigned long long)parent->tail[1]);\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n\n        lfs_log_probe(\"lfs_dir_fetchmatch returned tag=%lld (ITER %d)\", (long long)tag, __lfs_parent_iter);\n\n        if (tag && tag != LFS_ERR_NOENT) {\n            lfs_log_probe(\"lfs_fs_parent EXIT_TAG: returning tag=%lld (ITER %d)\", (long long)tag, __lfs_parent_iter);\n            return tag;\n        }\n\n        lfs_log_probe(\"lfs_fs_parent ITER %d end: continuing loop (parent_tail now=[%llu,%llu])\",\n                __lfs_parent_iter,\n                (unsigned long long)parent->tail[0], (unsigned long long)parent->tail[1]);\n    }\n\n    lfs_log_probe(\"lfs_fs_parent EXIT_NOENT: returning LFS_ERR_NOENT\");\n    return LFS_ERR_NOENT;\n}\n"
}