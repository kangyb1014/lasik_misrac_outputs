{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_fs_parent the local variable 'err' is initialized at declaration with int err = LFS_ERR_OK;. That initial assignment is never used: the first assignment to err occurs inside the while loop (err = lfs_tortoise_detectcycles(...)) before any read of err, and on the path where the loop is not entered the initialized value is also never used. Therefore the initialization is an executed operation whose removal would not affect program behaviour (it is redundant/dead), violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/832.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_parent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent:\n```c\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(parent->tail)) {\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        if (err < 0) {\n            return err;\n        }\n\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n        if (tag && tag != LFS_ERR_NOENT) {\n            return tag;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_parent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/832.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],\n        lfs_mdir_t *parent) {\n    /* Log function entry and input state */\n    lfs_log_probe(\"ENTER lfs_fs_parent: lfs=%p pair=[%llu,%llu] parent=%p\",\n            (void *)lfs,\n            (unsigned long long)pair[0], (unsigned long long)pair[1],\n            (void *)parent);\n\n    // use fetchmatch with callback to find pairs\n    parent->tail[0] = 0;\n    parent->tail[1] = 1;\n    lfs_log_probe(\"Initialized parent->tail to [0,1]\");\n\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n\n    int err = LFS_ERR_OK;\n    /* Log the initial assignment so we have evidence whether it is used */\n    lfs_log_probe(\"Local variable 'err' initialized at declaration: err=%d\", err);\n\n    /* Log whether the while-loop will be entered (captures the path where initialization might be unused) */\n    int will_enter_loop = !lfs_pair_isnull(parent->tail);\n    lfs_log_probe(\"Before while: will_enter_loop=%d parent->tail=[%llu,%llu]\",\n            will_enter_loop,\n            (unsigned long long)parent->tail[0],\n            (unsigned long long)parent->tail[1]);\n\n    while (!lfs_pair_isnull(parent->tail)) {\n        lfs_log_probe(\"WHILE-START parent->tail=[%llu,%llu]\",\n                (unsigned long long)parent->tail[0],\n                (unsigned long long)parent->tail[1]);\n\n        lfs_log_probe(\"Calling lfs_tortoise_detectcycles(...)\");\n        err = lfs_tortoise_detectcycles(parent, &tortoise);\n        lfs_log_probe(\"Returned from lfs_tortoise_detectcycles: err=%d\", err);\n\n        if (err < 0) {\n            lfs_log_probe(\"Returning early due to err<0: %d\", err);\n            return err;\n        }\n\n        lfs_log_probe(\"Calling lfs_dir_fetchmatch with parent->tail=[%llu,%llu]\",\n                (unsigned long long)parent->tail[0],\n                (unsigned long long)parent->tail[1]);\n        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,\n                LFS_MKTAG(0x7ff, 0, 0x3ff),\n                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),\n                NULL,\n                lfs_fs_parent_match, &(struct lfs_fs_parent_match){\n                    lfs, {pair[0], pair[1]}});\n        lfs_log_probe(\"lfs_dir_fetchmatch returned tag=%lld\", (long long)tag);\n        if (tag && tag != LFS_ERR_NOENT) {\n            lfs_log_probe(\"Returning tag (found parent): %lld\", (long long)tag);\n            return tag;\n        }\n\n        lfs_log_probe(\"End of iteration: parent->tail now=[%llu,%llu]\",\n                (unsigned long long)parent->tail[0],\n                (unsigned long long)parent->tail[1]);\n    }\n\n    lfs_log_probe(\"Exited while-loop without finding parent; returning LFS_ERR_NOENT\");\n    return LFS_ERR_NOENT;\n}\n"
}