{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_pair_fromle32(pair) immediately after lfs_dir_orphaningcommit is redundant: pair was converted to little-endian with lfs_pair_tole32(pair) solely for the commit call, and the restored host-endian pair is never used before the code either continues or returns. Removing this lfs_pair_fromle32(pair) would not change program behaviour (the array is a local buffer and the commit has already consumed the LE values), so the operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_deorphan code that contains useful probe functions that print useful logs to a file \"/tmp/logs/732.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_deorphan as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_deorphan:\n```c\nstatic int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {\n    if (!lfs_gstate_hasorphans(&lfs->gstate)) {\n        return 0;\n    }\n\n    // Check for orphans in two separate passes:\n    // - 1 for half-orphans (relocations)\n    // - 2 for full-orphans (removes/renames)\n    //\n    // Two separate passes are needed as half-orphans can contain outdated\n    // references to full-orphans, effectively hiding them from the deorphan\n    // search.\n    //\n    int pass = 0;\n    while (pass < 2) {\n        // Fix any orphans\n        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};\n        lfs_mdir_t dir;\n        bool moreorphans = false;\n\n        // iterate over all directory directory entries\n        while (!lfs_pair_isnull(pdir.tail)) {\n            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);\n            if (err) {\n                return err;\n            }\n\n            // check head blocks for orphans\n            if (!pdir.split) {\n                // check if we have a parent\n                lfs_mdir_t parent;\n                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);\n                if (tag < 0 && tag != LFS_ERR_NOENT) {\n                    return tag;\n                }\n\n                if (pass == 0 && tag != LFS_ERR_NOENT) {\n                    lfs_block_t pair[2];\n                    lfs_stag_t state = lfs_dir_get(lfs, &parent,\n                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);\n                    if (state < 0) {\n                        return state;\n                    }\n                    lfs_pair_fromle32(pair);\n\n                    if (!lfs_pair_issync(pair, pdir.tail)) {\n                        // we have desynced\n                        LFS_DEBUG(\"Fixing half-orphan \"\n                                \"{0x%\"PRIx32\", 0x%\"PRIx32\"} \"\n                                \"-> {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);\n\n                        // fix pending move in this pair? this looks like an\n                        // optimization but is in fact _required_ since\n                        // relocating may outdate the move.\n                        uint16_t moveid = 0x3ff;\n                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                            moveid = lfs_tag_id(lfs->gstate.tag);\n                            LFS_DEBUG(\"Fixing move while fixing orphans \"\n                                    \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                                    pdir.pair[0], pdir.pair[1], moveid);\n                            lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                        }\n\n                        lfs_pair_tole32(pair);\n                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                                {LFS_MKTAG_IF(moveid != 0x3ff,\n                                    LFS_TYPE_DELETE, moveid, 0), NULL},\n                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),\n                                    pair}));\n                        lfs_pair_fromle32(pair);\n                        if (state < 0) {\n                            return state;\n                        }\n\n                        // did our commit create more orphans?\n                        if (state == LFS_OK_ORPHANED) {\n                            moreorphans = true;\n                        }\n\n                        // refetch tail\n                        continue;\n                    }\n                }\n\n                // note we only check for full orphans if we may have had a\n                // power-loss, otherwise orphans are created intentionally\n                // during operations such as lfs_mkdir\n                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {\n                    // we are an orphan\n                    LFS_DEBUG(\"Fixing orphan {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                            pdir.tail[0], pdir.tail[1]);\n\n                    // steal state\n                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);\n                    if (err) {\n                        return err;\n                    }\n\n                    // steal tail\n                    lfs_pair_tole32(dir.tail);\n                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),\n                                dir.tail}));\n                    lfs_pair_fromle32(dir.tail);\n                    if (state < 0) {\n                        return state;\n                    }\n\n                    // did our commit create more orphans?\n                    if (state == LFS_OK_ORPHANED) {\n                        moreorphans = true;\n                    }\n\n                    // refetch tail\n                    continue;\n                }\n            }\n\n            pdir = dir;\n        }\n\n        pass = moreorphans ? 0 : pass+1;\n    }\n\n    // mark orphans as fixed\n    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_deorphan code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <time.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *fp = fopen(\"/tmp/logs/732.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    time_t t = time(NULL);\n    struct tm tm;\n    localtime_r(&t, &tm);\n    fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d: \",\n            tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n            tm.tm_hour, tm.tm_min, tm.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {\n    lfs_log_probe(\"ENTER lfs_fs_deorphan: powerloss=%d, hasorphans=%d\",\n            (int)powerloss, (int)lfs_gstate_hasorphans(&lfs->gstate));\n\n    if (!lfs_gstate_hasorphans(&lfs->gstate)) {\n        lfs_log_probe(\"NO ORPHANS: returning 0\");\n        return 0;\n    }\n\n    // Check for orphans in two separate passes:\n    // - 1 for half-orphans (relocations)\n    // - 2 for full-orphans (removes/renames)\n    //\n    // Two separate passes are needed as half-orphans can contain outdated\n    // references to full-orphans, effectively hiding them from the deorphan\n    // search.\n    //\n    int pass = 0;\n    while (pass < 2) {\n        // Fix any orphans\n        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};\n        lfs_mdir_t dir;\n        bool moreorphans = false;\n\n        lfs_log_probe(\"START PASS %d\", pass);\n\n        // iterate over all directory directory entries\n        while (!lfs_pair_isnull(pdir.tail)) {\n            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);\n            if (err) {\n                lfs_log_probe(\"lfs_dir_fetch failed: err=%d\", err);\n                return err;\n            }\n\n            // check head blocks for orphans\n            if (!pdir.split) {\n                // check if we have a parent\n                lfs_mdir_t parent;\n                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);\n                if (tag < 0 && tag != LFS_ERR_NOENT) {\n                    lfs_log_probe(\"lfs_fs_parent failed: tag=%d\", (int)tag);\n                    return tag;\n                }\n\n                if (pass == 0 && tag != LFS_ERR_NOENT) {\n                    lfs_block_t pair[2];\n                    lfs_stag_t state = lfs_dir_get(lfs, &parent,\n                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);\n                    if (state < 0) {\n                        lfs_log_probe(\"lfs_dir_get failed: state=%d\", (int)state);\n                        return state;\n                    }\n\n                    // Log the original host-endian pair before any conversion\n                    lfs_log_probe(\"HALF-ORPHAN: before fromle32: pdir.tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}, pair={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                            (uint32_t)pdir.tail[0], (uint32_t)pdir.tail[1],\n                            (uint32_t)pair[0], (uint32_t)pair[1]);\n\n                    lfs_pair_fromle32(pair);\n\n                    // Log the pair after converting from little-endian\n                    lfs_log_probe(\"HALF-ORPHAN: after fromle32 (host endian): pair={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                            (uint32_t)pair[0], (uint32_t)pair[1]);\n\n                    if (!lfs_pair_issync(pair, pdir.tail)) {\n                        // we have desynced\n                        LFS_DEBUG(\"Fixing half-orphan \"\n                                \"{0x%\"PRIx32\", 0x%\"PRIx32\"} \"\n                                \"-> {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);\n\n                        // fix pending move in this pair? this looks like an\n                        // optimization but is in fact _required_ since\n                        // relocating may outdate the move.\n                        uint16_t moveid = 0x3ff;\n                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                            moveid = lfs_tag_id(lfs->gstate.tag);\n                            LFS_DEBUG(\"Fixing move while fixing orphans \"\n                                    \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                                    pdir.pair[0], pdir.pair[1], moveid);\n                            lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                        }\n\n                        // Log before converting to little-endian for commit\n                        lfs_log_probe(\"COMMIT PREP: converting pair to LE for commit: pair(before tole)={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                                (uint32_t)pair[0], (uint32_t)pair[1]);\n\n                        lfs_pair_tole32(pair);\n\n                        // Log after tole conversion\n                        lfs_log_probe(\"COMMIT PREP: pair(after tole)={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                                (uint32_t)pair[0], (uint32_t)pair[1]);\n\n                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                                {LFS_MKTAG_IF(moveid != 0x3ff,\n                                    LFS_TYPE_DELETE, moveid, 0), NULL},\n                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),\n                                    pair}));\n\n                        // Log immediately after commit returns (pair still in LE)\n                        lfs_log_probe(\"COMMIT RETURNED: state=%d, pair(after commit, still LE)={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                                (int)state, (uint32_t)pair[0], (uint32_t)pair[1]);\n\n                        lfs_pair_fromle32(pair);\n\n                        // Log after conversion back from LE to host-endian\n                        lfs_log_probe(\"AFTER RESTORE: pair(after fromle)={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                                (uint32_t)pair[0], (uint32_t)pair[1]);\n\n                        if (state < 0) {\n                            lfs_log_probe(\"COMMIT ERROR: returning %d\", (int)state);\n                            return state;\n                        }\n\n                        // did our commit create more orphans?\n                        if (state == LFS_OK_ORPHANED) {\n                            moreorphans = true;\n                            lfs_log_probe(\"COMMIT CREATED MORE ORPHANS: moreorphans=true\");\n                        }\n\n                        // refetch tail\n                        lfs_log_probe(\"REFETCH TAIL after commit (continuing loop)\");\n                        continue;\n                    }\n                }\n\n                // note we only check for full orphans if we may have had a\n                // power-loss, otherwise orphans are created intentionally\n                // during operations such as lfs_mkdir\n                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {\n                    // we are an orphan\n                    lfs_log_probe(\"FULL-ORPHAN detected: pdir.tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                            (uint32_t)pdir.tail[0], (uint32_t)pdir.tail[1]);\n\n                    // steal state\n                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);\n                    if (err) {\n                        lfs_log_probe(\"lfs_dir_getgstate failed: err=%d\", err);\n                        return err;\n                    }\n\n                    // steal tail\n                    lfs_pair_tole32(dir.tail);\n                    lfs_log_probe(\"FULL-ORPHAN PREP: dir.tail(after tole)={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                            (uint32_t)dir.tail[0], (uint32_t)dir.tail[1]);\n                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),\n                                dir.tail}));\n\n                    lfs_log_probe(\"FULL-ORPHAN COMMIT RETURNED: state=%d, dir.tail(after commit, still LE)={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                            state, (uint32_t)dir.tail[0], (uint32_t)dir.tail[1]);\n\n                    lfs_pair_fromle32(dir.tail);\n                    lfs_log_probe(\"FULL-ORPHAN AFTER RESTORE: dir.tail(after fromle)={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\",\n                            (uint32_t)dir.tail[0], (uint32_t)dir.tail[1]);\n\n                    if (state < 0) {\n                        lfs_log_probe(\"FULL-ORPHAN COMMIT ERROR: returning %d\", state);\n                        return state;\n                    }\n\n                    // did our commit create more orphans?\n                    if (state == LFS_OK_ORPHANED) {\n                        moreorphans = true;\n                        lfs_log_probe(\"FULL-ORPHAN COMMIT CREATED MORE ORPHANS: moreorphans=true\");\n                    }\n\n                    // refetch tail\n                    lfs_log_probe(\"REFETCH TAIL after full-orphan commit (continuing loop)\");\n                    continue;\n                }\n            }\n\n            pdir = dir;\n        }\n\n        pass = moreorphans ? 0 : pass+1;\n        lfs_log_probe(\"END PASS: next pass=%d\", pass);\n    }\n\n    // mark orphans as fixed\n    int res = lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));\n    lfs_log_probe(\"EXIT lfs_fs_deorphan: result=%d\", res);\n    return res;\n}\n"
}