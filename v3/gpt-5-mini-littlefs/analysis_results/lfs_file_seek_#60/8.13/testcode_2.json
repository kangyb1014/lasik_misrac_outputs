{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call takes the address of a non-const compound literal and passes it to lfs_ctz_index: lfs_ctz_index(lfs, &(lfs_off_t){file->pos}); If lfs_ctz_index does not modify the pointed-to value (i.e. its parameter could/should be declared as const lfs_off_t *), then the pointer parameter is not const-qualified even though it could be. This violates MISRA C 2023 Rule 8.13. Example fix: change the function prototype to take const lfs_off_t * (or pass &(const lfs_off_t){file->pos}) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek_:\n```c\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    // find new pos\n    //\n    // fortunately for us, littlefs is limited to 31-bit file sizes, so we\n    // don't have to worry too much about integer overflow\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n    }\n\n    if (npos > lfs->file_max) {\n        // file position out of range\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        // noop - position has not changed\n        return npos;\n    }\n\n    // if we're only reading and our new offset is still in the file's cache\n    // we can avoid flushing and needing to reread the data\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            return npos;\n        }\n    }\n\n    // write out everything beforehand, may be noop if rdonly\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        return err;\n    }\n\n    // update pos\n    file->pos = npos;\n    return npos;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek_ code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger to capture control flow and state for lfs_file_seek_ */\nstatic void lfs_seek_log_state(const char *stage, lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off_param, int whence, lfs_off_t npos) {\n    FILE *f = fopen(\"/tmp/logs/603.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Print key state values. Cast numeric types to long long / unsigned long long\n       for portable printing without assuming exact typedefs. */\n    fprintf(f, \"[lfs_file_seek_] stage=%s whence=%d off_param=%lld npos=%lld file->pos=%lld file->off=%lld flags=0x%X block_size=%llu cache.off=%lld cache.size=%lld file_max=%lld\\n\",\n            stage,\n            whence,\n            (long long)off_param,\n            (long long)npos,\n            (long long)file->pos,\n            (long long)file->off,\n            (unsigned)file->flags,\n            (unsigned long long)lfs->cfg->block_size,\n            (long long)file->cache.off,\n            (long long)file->cache.size,\n            (long long)lfs->file_max);\n\n    fclose(f);\n}\n\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    /* find new pos\n     *\n     * fortunately for us, littlefs is limited to 31-bit file sizes, so we\n     * don't have to worry too much about integer overflow\n     */\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n    }\n\n    lfs_seek_log_state(\"after_calc_npos\", lfs, file, off, whence, npos);\n\n    if (npos > lfs->file_max) {\n        /* file position out of range */\n        lfs_seek_log_state(\"npos_out_of_range\", lfs, file, off, whence, npos);\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        /* noop - position has not changed */\n        lfs_seek_log_state(\"noop_same_pos\", lfs, file, off, whence, npos);\n        return npos;\n    }\n\n    /* if we're only reading and our new offset is still in the file's cache\n     * we can avoid flushing and needing to reread the data\n     */\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        /* Log that we're about to call lfs_ctz_index with a compound literal\n         * (this is the reported potential MISRA Rule 8.13 violation site).\n         * We record the exact value being passed (file->pos) for evidence. */\n        lfs_seek_log_state(\"enter_reading_branch_before_ctz_calls\", lfs, file, off, whence, npos);\n        {\n            int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n            lfs_off_t noff = npos;\n            int nindex = lfs_ctz_index(lfs, &noff);\n\n            /* Log results from lfs_ctz_index calls and relevant cache bounds. */\n            FILE *f = fopen(\"/tmp/logs/603.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"[lfs_file_seek_] after_ctz_calls oindex=%d nindex=%d noff=%lld cache.off=%lld cache.size=%lld\\n\",\n                        oindex, nindex, (long long)noff,\n                        (long long)file->cache.off, (long long)file->cache.size);\n                fclose(f);\n            }\n\n            if (oindex == nindex\n                    && noff >= file->cache.off\n                    && noff < file->cache.off + file->cache.size) {\n                file->pos = npos;\n                file->off = noff;\n                lfs_seek_log_state(\"fastpath_cache_hit\", lfs, file, off, whence, npos);\n                return npos;\n            }\n        }\n    }\n\n    /* write out everything beforehand, may be noop if rdonly */\n    lfs_seek_log_state(\"before_flush\", lfs, file, off, whence, npos);\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        lfs_seek_log_state(\"flush_error\", lfs, file, off, whence, npos);\n        return err;\n    }\n\n    /* update pos */\n    file->pos = npos;\n    lfs_seek_log_state(\"updated_pos\", lfs, file, off, whence, npos);\n    return npos;\n}\n"
}