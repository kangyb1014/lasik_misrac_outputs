{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes the address of a non-const local (lfs_off_t noff) to lfs_ctz_index via &noff. If lfs_ctz_index only reads the value (as implied by usage, e.g. also called with &(lfs_off_t){file->pos}), its parameter should be a pointer-to-const (const lfs_off_t *). As written this passes a non-const pointer where a const-qualified pointer would be sufficient, violating Rule 8.13. Change the callee signature to accept const lfs_off_t * (and update calls) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek_:\n```c\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    // find new pos\n    //\n    // fortunately for us, littlefs is limited to 31-bit file sizes, so we\n    // don't have to worry too much about integer overflow\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n    }\n\n    if (npos > lfs->file_max) {\n        // file position out of range\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        // noop - position has not changed\n        return npos;\n    }\n\n    // if we're only reading and our new offset is still in the file's cache\n    // we can avoid flushing and needing to reread the data\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            return npos;\n        }\n    }\n\n    // write out everything beforehand, may be noop if rdonly\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        return err;\n    }\n\n    // update pos\n    file->pos = npos;\n    return npos;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek_ code.\n",
  "test_code": "/* Probe helpers for logging control flow and state to /tmp/logs/603.txt */\n#include <stdio.h>\n#include <stdarg.h>\n\nstatic void lfs_log_printf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/603.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    // find new pos\n    //\n    // fortunately for us, littlefs is limited to 31-bit file sizes, so we\n    // don't have to worry too much about integer overflow\n    lfs_off_t npos = file->pos;\n\n    lfs_log_printf(\"seek: entry file->pos=%lld off_param=%lld whence=%d\",\n            (long long)file->pos, (long long)off, whence);\n\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n        lfs_log_printf(\"seek: branch LFS_SEEK_SET => npos=%lld\", (long long)npos);\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n        lfs_log_printf(\"seek: branch LFS_SEEK_CUR => npos=%lld\", (long long)npos);\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n        lfs_log_printf(\"seek: branch LFS_SEEK_END => size=%lld off=%lld npos=%lld\",\n            (long long)lfs_file_size_(lfs, file), (long long)off, (long long)npos);\n    }\n\n    if (npos > lfs->file_max) {\n        // file position out of range\n        lfs_log_printf(\"seek: npos=%lld > file_max=%lld => return LFS_ERR_INVAL\",\n                (long long)npos, (long long)lfs->file_max);\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        // noop - position has not changed\n        lfs_log_printf(\"seek: noop file->pos == npos == %lld => return npos\",\n                (long long)npos);\n        return npos;\n    }\n\n    // if we're only reading and our new offset is still in the file's cache\n    // we can avoid flushing and needing to reread the data\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        /* Log the relevant state before computing indices */\n        lfs_log_printf(\"seek: reading state: flags=0x%08x file->off=%lld block_size=%llu cache.off=%lld cache.size=%llu\",\n                (unsigned)file->flags, (long long)file->off,\n                (unsigned long long)lfs->cfg->block_size,\n                (long long)file->cache.off, (unsigned long long)file->cache.size);\n\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_log_printf(\"seek: oindex computed from &(lfs_off_t){file->pos} => oindex=%d file->pos=%lld\",\n                oindex, (long long)file->pos);\n\n        /* Preserve original logic: create a local non-const lfs_off_t noff\n           (this is the variable that will be passed by address below). */\n        lfs_off_t noff = npos;\n\n        /* Log before calling lfs_ctz_index with the address of a non-const local. */\n        lfs_log_printf(\"seek: before lfs_ctz_index(&noff): &noff=%p noff=%lld\",\n                (void *)&noff, (long long)noff);\n\n        int nindex = lfs_ctz_index(lfs, &noff);\n\n        /* Log after call to capture whether the callee modified the pointed value\n           and what index it returned. This helps reproduce the scenario where\n           a non-const pointer is passed even though only read access is needed. */\n        lfs_log_printf(\"seek: after  lfs_ctz_index(&noff): &noff=%p noff=%lld nindex=%d\",\n                (void *)&noff, (long long)noff, nindex);\n\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            lfs_log_printf(\"seek: cache hit => update pos=%lld off=%lld and return npos=%lld\",\n                    (long long)file->pos, (long long)file->off, (long long)npos);\n            return npos;\n        }\n\n        lfs_log_printf(\"seek: cache miss or index mismatch oindex=%d nindex=%d noff=%lld cache.off=%lld cache.size=%llu\",\n                oindex, nindex, (long long)noff, (long long)file->cache.off,\n                (unsigned long long)file->cache.size);\n    }\n\n    // write out everything beforehand, may be noop if rdonly\n    lfs_log_printf(\"seek: flushing file before changing pos\");\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        lfs_log_printf(\"seek: lfs_file_flush returned err=%d => return err\", err);\n        return err;\n    }\n\n    // update pos\n    file->pos = npos;\n    lfs_log_printf(\"seek: finalize update file->pos=%lld => return npos=%lld\",\n            (long long)file->pos, (long long)npos);\n    return npos;\n}\n"
}