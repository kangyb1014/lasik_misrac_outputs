{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg, 0), which always evaluates to 0. In the shown code this makes the controlling test effectively invariant: int err = LFS_LOCK(lfs->cfg); if (err) { ... } \u2014 the if-condition is always false. Using LFS_LOCK directly in a controlling expression (e.g. if (LFS_LOCK(cfg)) or while (LFS_LOCK(cfg))) would also be an invariant controlling expression. Neither MISRA exception (infinite-loop invariant or the permitted do-while constant-false form) applies here, so this is a violation of Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_gc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/775.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_gc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc:\n```c\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_gc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper for lfs_fs_gc.\n * Appends a single line with timestamp-like info to /tmp/logs/775.txt.\n * Kept static to limit scope and preserve original logic.\n */\nstatic void lfs_gc_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/775.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Lightweight probe that logs the LFS pointer and an integer state value.\n */\nstatic void lfs_gc_probe_state(const char *stage, const void *lfs_ptr, int state)\n{\n    /* Example entry: \"after_LFS_LOCK: lfs=0x12345678 state=0\" */\n    lfs_gc_log(\"%s: lfs=%p state=%d\", stage, lfs_ptr, state);\n}\n\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock operation and the pointer to the lfs structure. */\n    lfs_gc_probe_state(\"after_LFS_LOCK\", (void*)lfs, err);\n\n    if (err) {\n        /* If the lock reported an error, log and return as original logic dictates. */\n        lfs_gc_probe_state(\"lock_error_return\", (void*)lfs, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    /* Log before calling the internal GC routine. */\n    lfs_gc_log(\"before_lfs_fs_gc_: lfs=%p\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    /* Log the result returned from the internal GC routine. */\n    lfs_gc_probe_state(\"after_lfs_fs_gc_\", (void*)lfs, err);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe before returning to capture the exit state. */\n    lfs_gc_probe_state(\"final_return\", (void*)lfs, err);\n\n    return err;\n}\n"
}