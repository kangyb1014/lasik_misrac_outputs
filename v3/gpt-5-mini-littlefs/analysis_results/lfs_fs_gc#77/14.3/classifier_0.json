{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc:\n```c\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_fs_gc:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define LFS_LOCK(cfg) ((void)cfg,0)\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg, 0), which always evaluates to 0. In the shown code this makes the controlling test effectively invariant: int err = LFS_LOCK(lfs->cfg); if (err) { ... } \u2014 the if-condition is always false. Using LFS_LOCK directly in a controlling expression (e.g. if (LFS_LOCK(cfg)) or while (LFS_LOCK(cfg))) would also be an invariant controlling expression. Neither MISRA exception (infinite-loop invariant or the permitted do-while constant-false form) applies here, so this is a violation of Rule 14.3."
}