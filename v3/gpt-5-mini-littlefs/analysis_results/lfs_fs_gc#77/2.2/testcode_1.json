{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0). Thus the expression LFS_LOCK(lfs->cfg) has no side effects (the (void) cast only evaluates the operand without effect) and always yields 0. The assignment int err = LFS_LOCK(lfs->cfg); therefore only stores a constant 0 into err; removing this assignment (and the immediately following check if (err) return err;) would not change program behaviour in this configuration. Hence this operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_gc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/772.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_gc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc:\n```c\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_gc code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helpers for reproducing the lock-dead-code scenario.\n * These helpers only append diagnostic information to /tmp/logs/772.txt\n * and do not alter program behaviour. They intentionally avoid changing\n * the value of any variables used by the original function.\n */\nstatic void lfs_fs_gc_log_lock_result(lfs_t *lfs, int lock_ret) {\n    FILE *f = fopen(\"/tmp/logs/772.txt\", \"a\");\n    if (f) {\n        /* log the lfs pointer, the cfg pointer (if available), and lock result */\n        fprintf(f, \"lfs_fs_gc: lfs=%p, cfg=%p, LFS_LOCK returned=%d\\n\",\n                (void*)lfs,\n                (void*)(lfs ? (void*)lfs->cfg : (void*)0),\n                lock_ret);\n        fclose(f);\n    }\n}\n\nstatic void lfs_fs_gc_log_before_exit(int err) {\n    FILE *f = fopen(\"/tmp/logs/772.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_fs_gc: early return due to lock error=%d\\n\", err);\n        fclose(f);\n    }\n}\n\nstatic void lfs_fs_gc_log_after_gc(lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/772.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_fs_gc: after lfs_fs_gc_ call, result=%d, lfs=%p, cfg=%p\\n\",\n                err, (void*)lfs, (void*)(lfs ? (void*)lfs->cfg : (void*)0));\n        fclose(f);\n    }\n}\n\nstatic void lfs_fs_gc_log_after_unlock(lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/772.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_fs_gc: LFS_UNLOCK called, returning=%d, lfs=%p, cfg=%p\\n\",\n                err, (void*)lfs, (void*)(lfs ? (void*)lfs->cfg : (void*)0));\n        fclose(f);\n    }\n}\n\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe the lock result without altering behaviour. This documents\n     * the scenario where LFS_LOCK expands to ((void)cfg, 0) and therefore\n     * always yields 0. */\n    lfs_fs_gc_log_lock_result(lfs, err);\n\n    if (err) {\n        /* Log the early-return path so the presence (or absence) of this\n         * branch can be observed in runtime traces. */\n        lfs_fs_gc_log_before_exit(err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    /* Log the result of the internal gc function. */\n    lfs_fs_gc_log_after_gc(lfs, err);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log that unlock has been called and what will be returned. */\n    lfs_fs_gc_log_after_unlock(lfs, err);\n    return err;\n}\n"
}