{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg, 0), so int err = LFS_LOCK(lfs->cfg); always sets err to 0. Therefore the conditional if (err) { return err; } can never be true and the return statement is unreachable (dead code). This violates MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_gc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/771.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_gc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_gc:\n```c\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_gc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append a formatted message to /tmp/logs/771.txt */\nstatic void lfs_gc_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/771.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\n/*\n * The original function logic is preserved. Added logging probes before and after\n * key operations so that runtime evidence can be collected showing whether the\n * if (err) { return err; } branch is ever executed. This helps reproduce the\n * scenario where LFS_LOCK is defined as ((void)cfg, 0) and thus err is always 0.\n */\nint lfs_fs_gc(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and LFS_LOCK result */\n    lfs_gc_log(\"ENTER lfs_fs_gc: lfs=%p\", (void*)lfs);\n    /* Attempt to log cfg pointer if available (best-effort) */\n    /* Note: we assume lfs->cfg is a valid pointer in the running system */\n    lfs_gc_log(\"lfs->cfg = %p\", (void*)lfs->cfg);\n    lfs_gc_log(\"LFS_LOCK returned %d\", err);\n\n    if (err) {\n        /* Log that the error-early-return branch is taken */\n        lfs_gc_log(\"if(err) branch taken: returning %d\", err);\n        return err;\n    }\n\n    /* Log that the early-return branch was not taken */\n    lfs_gc_log(\"if(err) branch NOT taken: continuing\");\n\n    LFS_TRACE(\"lfs_fs_gc(%p)\", (void*)lfs);\n\n    err = lfs_fs_gc_(lfs);\n\n    /* Log result of internal GC call */\n    lfs_gc_log(\"lfs_fs_gc_ returned %d\", err);\n    LFS_TRACE(\"lfs_fs_gc -> %d\", err);\n\n    lfs_gc_log(\"About to call LFS_UNLOCK on cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_gc_log(\"After LFS_UNLOCK, returning %d\", err);\n\n    return err;\n}\n"
}