{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0), so err is initialized to the constant 0. The controlling expression if (err) is therefore always false (an invariant). This is an invariant controlling expression in an if-statement, and does not fall under the permitted exceptions (infinite loops or the do-while integer-constant exception). Hence the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1055.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/1055.txt */\nstatic void lfs_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Preserve original lock semantics */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock and relevant state (addresses and path) */\n    lfs_probe(\"lfs_stat: after LFS_LOCK -> err=%d, lfs=%p, cfg=%p, path=\\\"%s\\\", info=%p\",\n              err,\n              (void*)lfs,\n              (void*)(lfs ? lfs->cfg : NULL),\n              path ? path : \"(null)\",\n              (void*)info);\n\n    /* Log which branch is taken for the controlling expression */\n    if (err) {\n        lfs_probe(\"lfs_stat: if(err) evaluated true -> returning err=%d\", err);\n        return err;\n    } else {\n        lfs_probe(\"lfs_stat: if(err) evaluated false -> continuing\");\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    lfs_probe(\"lfs_stat: lfs_stat_ returned err=%d\", err);\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe(\"lfs_stat: after LFS_UNLOCK -> returning err=%d\", err);\n    return err;\n}\n"
}