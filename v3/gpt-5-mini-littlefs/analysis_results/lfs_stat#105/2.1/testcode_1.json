{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg, 0), so err is always assigned 0. Therefore the condition if (err) is always false and the statement return err; is never reachable. This constitutes unreachable code (the return inside the if).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1051.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/1051.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1051.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Preserve original logic: capture the return from LFS_LOCK into err */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record the result of the lock attempt and key context */\n    lfs_log_probe(\"[probe] lfs_stat: entered. lfs=%p, path=\\\"%s\\\", info=%p\", (void*)lfs, path ? path : \"(null)\", (void*)info);\n    lfs_log_probe(\"[probe] lfs_stat: after LFS_LOCK: err=%d\", err);\n\n    if (err) {\n        /* Probe: log that the error branch is taken and what is returned */\n        lfs_log_probe(\"[probe] lfs_stat: if (err) branch taken: returning %d\", err);\n        return err;\n    }\n\n    /* Original trace retained */\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Probe: about to call underlying implementation */\n    lfs_log_probe(\"[probe] lfs_stat: calling lfs_stat_ with path=\\\"%s\\\"\", path ? path : \"(null)\");\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Probe: record result of lfs_stat_ */\n    lfs_log_probe(\"[probe] lfs_stat: lfs_stat_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: record final unlocking and return value */\n    lfs_log_probe(\"[probe] lfs_stat: LFS_UNLOCK called. returning %d\", err);\n\n    return err;\n}\n"
}