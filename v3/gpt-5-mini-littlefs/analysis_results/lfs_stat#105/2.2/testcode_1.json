{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), which is executed in lfs_stat but performs no action (it merely evaluates/discards cfg). Removing the LFS_UNLOCK(lfs->cfg); statement would not change program behaviour in this build, so the operation constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1052.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1052.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and lock result and CFG pointer for reproducing the no-op unlock scenario. */\n    lfs_probe_log(\"[probe] ENTER lfs_stat: lfs=%p path=%s info=%p cfg=%p lock_err=%d\",\n                  (void*)lfs, (path != NULL) ? path : \"(null)\", (void*)info, (void*)lfs->cfg, err);\n\n    if (err) {\n        lfs_probe_log(\"[probe] lfs_stat: returning early due to lock error=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n\n    /* Capture state immediately before the unlock call. This records the cfg pointer and\n       the most recent return code from the internal stat. In the build where\n       LFS_UNLOCK(cfg) expands to ((void)cfg), the following two probe logs will show\n       that executing the unlock performs no observable state change. */\n    lfs_probe_log(\"[probe] before LFS_UNLOCK: cfg=%p err=%d\", (void*)lfs->cfg, err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"[probe] after LFS_UNLOCK: cfg=%p (unlock executed)\", (void*)lfs->cfg);\n\n    lfs_probe_log(\"[probe] EXIT lfs_stat: returning %d\", err);\n    return err;\n}\n"
}