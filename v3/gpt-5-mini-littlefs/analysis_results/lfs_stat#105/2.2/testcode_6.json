{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg) expands to the macro definition ((void)cfg), which performs no action. The expression merely evaluates and discards lfs->cfg; removing the line would not change program behaviour in this configuration, so this executed operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1052.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Probe helper: append a structured log entry to /tmp/logs/1052.txt.\n   Keeps original behavior intact; only observes state around LFS_UNLOCK. */\nstatic void lfs_stat_probe(const char *label, void *lfs_ptr, void *cfg_ptr,\n                           const char *path, void *info_ptr, int err) {\n    FILE *f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n    char timestr[32];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"[%s] lfs_stat probe: %s\\n\", timestr, label);\n    fprintf(f, \"  lfs=%p, cfg=%p, path=\\\"%s\\\", info=%p, err=%d\\n\",\n            lfs_ptr, cfg_ptr, (path ? path : \"(null)\"), info_ptr, err);\n\n    /* Dump up to 16 bytes from cfg pointer to help detect no-op unlock (shows cfg contents).\n       We read memory only if cfg_ptr is non-NULL. */\n    if (cfg_ptr) {\n        const unsigned char *p = (const unsigned char *)cfg_ptr;\n        fprintf(f, \"  cfg_bytes=\");\n        for (size_t i = 0; i < 16; i++) {\n            /* Safe guard: do not crash on platforms where reading arbitrary memory is unsafe is\n               beyond our control; assume cfg_ptr is valid in normal usage. */\n            fprintf(f, \"%02X\", (unsigned)p[i]);\n            if (i + 1 < 16) fprintf(f, \" \");\n        }\n        fprintf(f, \"\\n\");\n    } else {\n        fprintf(f, \"  cfg_bytes=(null)\\n\");\n    }\n\n    fprintf(f, \"--\\n\");\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n\n    /* Probe before calling LFS_UNLOCK to capture pre-unlock state. */\n    lfs_stat_probe(\"before_unlock\", (void*)lfs, (void*)lfs->cfg, path, (void*)info, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe after calling LFS_UNLOCK to capture post-unlock state.\n       If LFS_UNLOCK is a no-op (e.g. expands to ((void)cfg)), the before/after\n       logs will be identical, providing evidence of dead executed code. */\n    lfs_stat_probe(\"after_unlock\", (void*)lfs, (void*)lfs->cfg, path, (void*)info, err);\n\n    return err;\n}\n"
}