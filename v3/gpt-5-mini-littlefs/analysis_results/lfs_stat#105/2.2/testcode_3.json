{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as an empty replacement: #define LFS_TRACE(__VA_ARGS__) . Therefore the line LFS_TRACE(\"lfs_stat -> %d\", err); expands to a null statement with no side-effects. Its removal would not change program behaviour in the provided project, so it constitutes dead code under MISRA C 2023 Rule 2.2. (If LFS_TRACE were conditionally defined to perform logging in some build configurations, then in those configurations the call would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1052.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1052.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1052.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Log entry and input state */\n    lfs_probe_log(\"lfs_stat: entered. lfs=%p path=\\\"%s\\\" info=%p\", (void*)lfs, path ? path : \"(null)\", (void*)info);\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log locking failure path */\n        lfs_probe_log(\"lfs_stat: LFS_LOCK returned error %d\", err);\n        return err;\n    }\n\n    /* Original trace point (may be an empty macro in some builds) */\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n    /* Probe log to capture intended trace information regardless of macro definition */\n    lfs_probe_log(\"lfs_stat: TRACE point invoked (source contains LFS_TRACE for lfs=%p, path=\\\"%s\\\", info=%p)\", (void*)lfs, path ? path : \"(null)\", (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log result from the internal implementation */\n    lfs_probe_log(\"lfs_stat: lfs_stat_ returned %d\", err);\n\n    /* Original trace point (may be an empty macro in some builds) */\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    /* Probe log to show that the source contains a TRACE here which may be removed by preprocessor */\n    lfs_probe_log(\"lfs_stat: TRACE point (final) invoked in source; intended value -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_stat: LFS_UNLOCK called. returning %d\", err);\n\n    return err;\n}\n"
}