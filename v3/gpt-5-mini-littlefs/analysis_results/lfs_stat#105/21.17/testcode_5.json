{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. strcpy(info->name, \"/\") can overflow when info->name is too small. For example, if LFS_NAME_MAX is defined as 0 then info->name has size LFS_NAME_MAX+1 == 1 and cannot hold the two bytes needed for \"/\\0\"; strcpy will write beyond the bounds of info->name. (Also, if the caller passes info == NULL this call will dereference a null pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1059.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable trace info for reproducing the violation\n   scenario to /tmp/logs/1059.txt. This preserves original lfs_stat logic and\n   only observes state. */\nstatic void lfs_stat_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/1059.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Log entry state (does not change program logic). */\n    lfs_stat_probe_log(\"ENTER lfs_stat: lfs=%p, cfg=%p, path=%p (%s), info=%p\",\n                       (void*)lfs, lfs ? (void*)lfs->cfg : (void*)0,\n                       (void*)path, path ? path : \"(null)\", (void*)info);\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_stat_probe_log(\"LFS_LOCK failed: err=%d (returning)\", err);\n        return err;\n    }\n\n    lfs_stat_probe_log(\"LFS_LOCK succeeded: cfg=%p\", (void*)lfs->cfg);\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path ? path : \"(null)\", (void*)info);\n\n    /* Probe right before calling the underlying implementation where the\n       strcpy(info->name, \"/\") violation was reported. We record whether\n       info is NULL, and the compile-time size of info->name (if available),\n       so callers can see whether the buffer could hold the two bytes '/\\0'. */\n    if (info == NULL) {\n        lfs_stat_probe_log(\"PROBE: info == NULL -> calling lfs_stat_ will dereference NULL (bad)\");\n    } else {\n        /* sizeof(info->name) is a compile-time computation based on the\n           definition of struct lfs_info in this translation unit. It does not\n           dereference the info pointer. */\n        size_t name_size = 0;\n        /* Attempt to obtain the size of the name buffer if the member exists.\n           If the project has struct lfs_info with a member 'name', this will\n           compile and provide the buffer size to help reproduce overflow. */\n#ifdef __GNUC__\n        /* Use a GNU C trick to avoid an unused-variable warning when 'name' is not\n           present; however, we still rely on the presence of the member in the\n           actual build environment. */\n        (void)name_size;\n#endif\n        /* The following will compile only if struct lfs_info contains 'name'. */\n        /* We use a separate block to avoid evaluating any expressions when info is NULL. */\n        name_size = sizeof(info->name);\n        lfs_stat_probe_log(\"PROBE: info=%p, info->name ptr=%p, name_size=%zu\",\n                           (void*)info, (void*)info->name, name_size);\n        if (name_size < 2) {\n            lfs_stat_probe_log(\"POTENTIAL OVERFLOW: name buffer size %zu < 2 -> cannot hold '/\\\\0'\", name_size);\n        } else {\n            lfs_stat_probe_log(\"name buffer appears large enough (size=%zu) to hold '/\\\\0'\", name_size);\n        }\n    }\n\n    err = lfs_stat_(lfs, path, info);\n\n    lfs_stat_probe_log(\"lfs_stat_ returned err=%d\", err);\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_stat_probe_log(\"EXIT lfs_stat: unlocked cfg=%p, returning %d\", (void*)lfs->cfg, err);\n    return err;\n}\n"
}