{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_dir_find(lfs, &cwd, &path, NULL) passes the address of the parameter 'path' (&path) so the called function can assign to *(&path) (i.e. update the local parameter variable 'path'). This modifies the function parameter itself (e.g. advancing the pointer to the next path component), which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1057.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state to /tmp/logs/1057.txt */\nstatic void lfs_stat_log(const lfs_t *lfs, const char *path, const struct lfs_info *info, const char *event)\n{\n    FILE *f = fopen(\"/tmp/logs/1057.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"%s: lfs=%p, path_ptr=%p, path_val=%s, info=%p\\n\",\n                event, (const void*)lfs, (const void*)path,\n                (path != NULL) ? path : \"(null)\", (const void*)info);\n        fclose(f);\n    }\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log state before calling lfs_stat_ so we can detect modifications to the\n       local parameter 'path' (e.g. if lfs_stat_ passes &path to other functions).\n       This captures the pointer value and the pointed-to string if non-NULL. */\n    lfs_stat_log(lfs, path, info, \"BEFORE_lfs_stat_\");\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log state after returning from lfs_stat_. If a callee modified the\n       local variable 'path' via its address, the pointer value printed here\n       will differ from the one printed above, providing evidence of the\n       violation scenario described. */\n    lfs_stat_log(lfs, path, info, \"AFTER_lfs_stat_\");\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}