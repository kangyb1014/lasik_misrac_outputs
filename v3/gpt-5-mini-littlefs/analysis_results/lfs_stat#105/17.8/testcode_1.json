{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'path' is passed by address to lfs_dir_find(&path), which allows that callee to modify the local parameter variable 'path' (the pointer itself). This modifies the function parameter (the pointer), violating Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1057.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe function to log control flow and state to /tmp/logs/1057.txt.\n   This function is intentionally lightweight and preserves the original\n   logic of lfs_stat. It logs the pointer value, the address of the\n   local pointer variable (so callers can see if a callee has modified\n   the caller's memory), and the pointed-to string (safely).\n*/\nstatic void lfs_stat_probe(const char *stage, lfs_t *lfs, const char *path, const char **path_addr, struct lfs_info *info, int err) {\n    FILE *f = fopen(\"/tmp/logs/1057.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Safely capture a limited snapshot of the path string */\n    char buf[257];\n    if (path == NULL) {\n        buf[0] = '\\0';\n    } else {\n        /* ensure NUL-termination and limit output size */\n        strncpy(buf, path, sizeof(buf) - 1);\n        buf[sizeof(buf) - 1] = '\\0';\n    }\n\n    fprintf(f, \"%s: lfs=%p, path_value=%p, path_str=\\\"%s\\\", path_addr=%p, info=%p, err=%d\\n\",\n            stage,\n            (void*)lfs,\n            (void*)path,\n            (path == NULL) ? \"(NULL)\" : buf,\n            (void*)path_addr,\n            (void*)info,\n            err);\n\n    /* Also print a hexdump of the pointer variable memory (portable-sized) */\n    /* This helps detect low-level overwrites of the caller's stack variable. */\n    unsigned char *p = (unsigned char*)path_addr;\n    fprintf(f, \"%s: path_addr_memory_bytes:\", stage);\n    for (size_t i = 0; i < sizeof(const char*); i++) {\n        fprintf(f, \" %02x\", (unsigned)p[i]);\n    }\n    fprintf(f, \"\\n\\n\");\n\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log state before calling into the internal implementation. We pass the\n       address of the local pointer variable so the callee (or deeper callees)\n       that take its address and modify it can be detected by comparing logs\n       before and after the call. */\n    lfs_stat_probe(\"ENTER\", lfs, path, &path, info, /*err=*/0);\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log state after returning from the internal implementation so any\n       unexpected modifications to the local 'path' pointer (or surrounding\n       stack) can be observed. */\n    lfs_stat_probe(\"EXIT\", lfs, path, &path, info, err);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}