{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); in lfs_remove() is an executed no\u2011op with no side effects. Removing that statement would not change the program behaviour, so it constitutes dead code in this configuration (no locking implementation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/992.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/*\n * Probe / logging helpers. These functions append human-readable\n * logs to /tmp/logs/992.txt to capture control flow and state\n * information for lfs_remove. They are non-intrusive and preserve\n * the original logic of lfs_remove.\n */\nstatic FILE * __log_get_file(void) {\n    static FILE *f = NULL;\n    if (f) {\n        return f;\n    }\n\n    /* Ensure directory exists (best-effort). */\n    if (mkdir(\"/tmp/logs\", 0777) != 0) {\n        if (errno != EEXIST) {\n            /* ignore errors; we'll still try to open the file */\n        }\n    }\n\n    f = fopen(\"/tmp/logs/992.txt\", \"a\");\n    if (f) {\n        /* Write a timestamp header for a new invocation */\n        time_t t = time(NULL);\n        struct tm tm;\n        if (localtime_r(&t, &tm)) {\n            char buf[64];\n            strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm);\n            fprintf(f, \"\\n[%s] lfs_remove probe start\\n\", buf);\n        } else {\n            fprintf(f, \"\\n[unknown time] lfs_remove probe start\\n\");\n        }\n        fflush(f);\n    }\n    return f;\n}\n\nstatic void __log_printf(const char *fmt, ...) {\n    FILE *f = __log_get_file();\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n}\n\n/*\n * Modified lfs_remove with probes. Original logic preserved; only\n * additional logging calls are inserted to capture the control\n * path and state around the locking/unlocking operations.\n */\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log the result of the lock attempt and relevant state */\n    __log_printf(\"lfs_remove: after LFS_LOCK -> err=%d, lfs=%p, path=\\\"%s\\\", cfg=%p\",\n                 err, (void*)lfs, path ? path : \"(null)\", (void*)lfs->cfg);\n\n    if (err) {\n        /* Preserve original early return behavior */\n        __log_printf(\"lfs_remove: aborting due to lock error=%d\", err);\n        return err;\n    }\n\n    /* Preserve original trace call */\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Log that we are about to enter the internal remove */\n    __log_printf(\"lfs_remove: calling lfs_remove_ (lfs=%p, path=\\\"%s\\\")\",\n                 (void*)lfs, path ? path : \"(null)\");\n\n    err = lfs_remove_(lfs, path);\n\n    /* Log the return from the internal remove */\n    __log_printf(\"lfs_remove: lfs_remove_ returned %d (lfs=%p, path=\\\"%s\\\")\",\n                 err, (void*)lfs, path ? path : \"(null)\");\n\n    /* Preserve original trace call */\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n\n    /* Capture state immediately before unlock */\n    __log_printf(\"lfs_remove: before LFS_UNLOCK, cfg=%p\", (void*)lfs->cfg);\n\n    /* Call the unlock macro as in the original code. This is the\n     * operation under inspection: in configurations where\n     * LFS_UNLOCK(cfg) expands to ((void)cfg), this call is a no-op.\n     * We log before and after to provide evidence for that behavior. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Capture state immediately after unlock to show whether anything changed */\n    __log_printf(\"lfs_remove: after LFS_UNLOCK, cfg=%p\", (void*)lfs->cfg);\n\n    __log_printf(\"lfs_remove: exiting with err=%d\", err);\n    return err;\n}\n"
}