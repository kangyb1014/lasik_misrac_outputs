{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(suffix, \".\", 1) (and similarly memcmp(name, \".\", 1) elsewhere) to compare path components against the null-terminated string literal \".\". This is using memcmp to compare null-terminated strings (the path buffer and the string literal), which violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/998.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "static void probe_log_path_info_entry(lfs_t *lfs, const char *path, int lock_err) {\n    FILE *f = fopen(\"/tmp/logs/998.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"probe: lfs_remove entry: lfs=%p path=\\\"%s\\\" lock_err=%d\\n\",\n            (void*)lfs, path ? path : \"(null)\", lock_err);\n\n    if (path) {\n        /* compute length without relying on strlen to reduce header dependencies */\n        size_t len = 0;\n        const char *p = path;\n        while (*p++) {\n            len++;\n        }\n        unsigned int first = (unsigned char)path[0];\n        fprintf(f, \"probe: path[0]=%c (0x%02x) length=%zu\\n\",\n                path[0] ? path[0] : '?', first, len);\n\n        /* Check for \".\" and \"..\" explicitly without using memcmp/strcmp */\n        if (path[0] == '.' && path[1] == '\\0') {\n            fprintf(f, \"probe: path equals \\\".\\\"\\n\");\n        }\n        else if (path[0] == '.' && path[1] == '.' && path[2] == '\\0') {\n            fprintf(f, \"probe: path equals \\\"..\\\"\\n\");\n        }\n        else {\n            fprintf(f, \"probe: path is other\\n\");\n        }\n    }\n\n    fclose(f);\n}\n\nstatic void probe_log_path_info_exit(lfs_t *lfs, const char *path, int result) {\n    FILE *f = fopen(\"/tmp/logs/998.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"probe: lfs_remove exit: lfs=%p path=\\\"%s\\\" result=%d\\n\",\n            (void*)lfs, path ? path : \"(null)\", result);\n    fclose(f);\n}\n\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log entry including lock result and path info. This helps reproduce\n       scenarios where callers compare path components against string literals\n       such as \".\" or \"..\" elsewhere in the code. */\n    probe_log_path_info_entry(lfs, path, err);\n\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n\n    /* Probe: log exit status and path for later analysis. */\n    probe_log_path_info_exit(lfs, path, err);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}