{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: lfs_remove_ has parameter 'path' declared as const char *path. The call lfs_dir_find(lfs, &cwd, &path, NULL) passes &path (a pointer to the parameter), allowing the callee to modify the pointer value 'path' itself (e.g. advance it). MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer value); only the object pointed to may be modified. Therefore this use violates Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/997.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helper: append a single line of diagnostic information to\n   /tmp/logs/997.txt. This function does not modify any inputs; it\n   only records them so other agents can inspect the call/return\n   behavior and stack addresses. */\nstatic void lfs_probe_log(const char *stage, void *lfs, const char *path, const void *path_addr, int err) {\n    FILE *f = fopen(\"/tmp/logs/997.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Print stage, lfs pointer, path pointer value, address of the\n       parameter 'path' on the stack for this frame, the path string\n       (or \"(null)\"), and the error code (if available). */\n    fprintf(f, \"%s: lfs=%p, path=%p, &path=%p, path_str=\\\"%s\\\", err=%d\\n\",\n            stage, lfs, (void*)path, path_addr, path ? path : \"(null)\", err);\n    fclose(f);\n}\n\n/* Original function with probes inserted. Probes are inserted before\n   and after the call to lfs_remove_ so that an external reviewer can\n   see the pointer value and the address of the parameter in this\n   frame. This allows tracing whether a callee might take the address\n   of a parameter (e.g. &path) and potentially modify it (the\n   violation scenario). The probes do not modify any parameters and\n   preserve the original logic. */\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Log entry state. Use (void*)&path to record the address of the\n       parameter \"path\" on the stack for this function frame. */\n    lfs_probe_log(\"ENTER lfs_remove\", (void*)lfs, path, (const void*)&path, -1);\n\n    err = lfs_remove_(lfs, path);\n\n    /* Log exit state. Record the same pieces of information and the\n       returned error value. If a callee modified the pointer value of\n       a parameter of lfs_remove_, comparing the ENTRY and EXIT logs\n       would reveal a change in the recorded path or path address. */\n    lfs_probe_log(\"EXIT  lfs_remove\", (void*)lfs, path, (const void*)&path, err);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}