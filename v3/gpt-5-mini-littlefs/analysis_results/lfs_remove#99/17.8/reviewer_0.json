{
  "user_message": "An agent A claimed that the following lfs_remove code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_remove.\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation: lfs_remove_ has parameter 'path' declared as const char *path. The call lfs_dir_find(lfs, &cwd, &path, NULL) passes &path (a pointer to the parameter), allowing the callee to modify the pointer value 'path' itself (e.g. advance it). MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer value); only the object pointed to may be modified. Therefore this use violates Rule 17.8.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_remove:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_remove_(lfs_t *lfs, const char *path) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {\n        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;\n    }\n\n    struct lfs_mlist dir;\n    dir.next = lfs->mlist;\n    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t pair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(pair);\n\n        err = lfs_dir_fetch(lfs, &dir.m, pair);\n        if (err) {\n            return err;\n        }\n\n        if (dir.m.count > 0 || dir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        dir.type = 0;\n        dir.id = 0;\n        lfs->mlist = &dir;\n    }\n\n    // delete the entry\n    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));\n    if (err) {\n        lfs->mlist = dir.next;\n        return err;\n    }\n\n    lfs->mlist = dir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(lfs_tag_type3(tag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &cwd, &dir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In lfs_remove_ the parameter is declared as const char *path (the pointer itself is a function parameter). The call lfs_dir_find(lfs, &cwd, &path, NULL) passes the address of that parameter, allowing the callee to change the value of the parameter (advance the pointer). MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer value); only the object pointed to may be modified. Passing &path and then having the callee update it is exactly a modification of the function parameter, so this is a violation. (If one wanted to avoid the violation, make a local copy of path and pass &local_copy instead.)"
}