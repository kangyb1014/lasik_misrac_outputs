{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(pcache->buffer, 0xff, lfs->cfg->cache_size) can write lfs->cfg->cache_size bytes into pcache->buffer without any check that the buffer actually has at least that many bytes. If pcache->buffer points to an object smaller than lfs->cfg->cache_size (e.g. due to a misconfigured/invalid cfg->cache_size, different-sized buffer implementation, or corrupted pcache), this will access beyond the bounds of the object and violate Rule 21.17. The code performs no runtime bound check on pcache->buffer against lfs->cfg->cache_size.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_flush code that contains useful probe functions that print useful logs to a file \"/tmp/logs/59.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_flush as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_flush:\n```c\nstatic int lfs_bd_flush(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {\n        LFS_ASSERT(pcache->block < lfs->block_count);\n        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);\n        int err = lfs->cfg->prog(lfs->cfg, pcache->block,\n                pcache->off, pcache->buffer, diff);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n\n        if (validate) {\n            // check data on disk\n            lfs_cache_drop(lfs, rcache);\n            int res = lfs_bd_cmp(lfs,\n                    NULL, rcache, diff,\n                    pcache->block, pcache->off, pcache->buffer, diff);\n            if (res < 0) {\n                return res;\n            }\n\n            if (res != LFS_CMP_EQ) {\n                return LFS_ERR_CORRUPT;\n            }\n        }\n\n        lfs_cache_zero(lfs, pcache);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_flush code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper. Appends lines to /tmp/logs/59.txt. */\nstatic void lfs_probe_logf(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_flush(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    /* Log entry and key state values that are relevant to the reported\n       Rule 21.17 violation scenario. We intentionally avoid dereferencing\n       pcache->buffer (other than printing the pointer value) to not risk\n       further undefined behavior while collecting evidence. */\n    lfs_probe_logf(\"lfs_bd_flush ENTRY: lfs=%p pcache=%p rcache=%p validate=%d\",\n            (void*)lfs, (void*)pcache, (void*)rcache, (int)validate);\n\n    if (pcache) {\n        /* Log cache-related metadata */\n        lfs_probe_logf(\"pcache metadata: block=%llu size=%llu off=%llu buffer=%p\",\n                (unsigned long long)pcache->block,\n                (unsigned long long)pcache->size,\n                (unsigned long long)pcache->off,\n                (void*)pcache->buffer);\n    } else {\n        lfs_probe_logf(\"pcache is NULL\");\n    }\n\n    if (lfs && lfs->cfg) {\n        lfs_probe_logf(\"lfs metadata: cfg=%p block_count=%llu prog_size=%llu cache_size=%llu\",\n                (void*)lfs->cfg,\n                (unsigned long long)lfs->block_count,\n                (unsigned long long)lfs->cfg->prog_size,\n                (unsigned long long)lfs->cfg->cache_size);\n    } else {\n        lfs_probe_logf(\"lfs or lfs->cfg is NULL\");\n    }\n\n    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {\n        LFS_ASSERT(pcache->block < lfs->block_count);\n\n        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);\n        lfs_probe_logf(\"computed diff=%llu (aligned from pcache->size=%llu using prog_size=%llu)\",\n                (unsigned long long)diff,\n                (unsigned long long)pcache->size,\n                (unsigned long long)lfs->cfg->prog_size);\n\n        lfs_probe_logf(\"calling prog: prog=%p block=%llu off=%llu buffer=%p diff=%llu\",\n                (void*)lfs->cfg->prog,\n                (unsigned long long)pcache->block,\n                (unsigned long long)pcache->off,\n                (void*)pcache->buffer,\n                (unsigned long long)diff);\n\n        int err = lfs->cfg->prog(lfs->cfg, pcache->block,\n                pcache->off, pcache->buffer, diff);\n\n        lfs_probe_logf(\"prog returned err=%d\", err);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            lfs_probe_logf(\"lfs_bd_flush EXIT (prog error): returning %d\", err);\n            return err;\n        }\n\n        if (validate) {\n            /* check data on disk */\n            lfs_probe_logf(\"validate==true: dropping rcache and comparing on-disk data\");\n            lfs_cache_drop(lfs, rcache);\n\n            lfs_probe_logf(\"calling lfs_bd_cmp: diff=%llu block=%llu off=%llu buffer=%p\",\n                    (unsigned long long)diff,\n                    (unsigned long long)pcache->block,\n                    (unsigned long long)pcache->off,\n                    (void*)pcache->buffer);\n\n            int res = lfs_bd_cmp(lfs,\n                    NULL, rcache, diff,\n                    pcache->block, pcache->off, pcache->buffer, diff);\n\n            lfs_probe_logf(\"lfs_bd_cmp returned res=%d\", res);\n            if (res < 0) {\n                lfs_probe_logf(\"lfs_bd_flush EXIT (cmp error): returning %d\", res);\n                return res;\n            }\n\n            if (res != LFS_CMP_EQ) {\n                lfs_probe_logf(\"lfs_bd_flush EXIT (cmp mismatch): returning LFS_ERR_CORRUPT (%d)\", LFS_ERR_CORRUPT);\n                return LFS_ERR_CORRUPT;\n            }\n        }\n\n        lfs_probe_logf(\"zeroing pcache via lfs_cache_zero(pcache=%p)\", (void*)pcache);\n        lfs_cache_zero(lfs, pcache);\n    } else {\n        lfs_probe_logf(\"pcache->block indicates no flush needed (block=%llu)\", (unsigned long long)pcache->block);\n    }\n\n    lfs_probe_logf(\"lfs_bd_flush EXIT: returning 0\");\n    return 0;\n}\n"
}