{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_dir_fetch calls lfs_dir_fetchmatch passing NULL for the pointer output parameters (the last three args). If lfs_dir_fetchmatch later uses any <string.h> functions (e.g. memcpy, memmove, strcpy, etc.) to copy data into those pointer parameters without first checking for NULL or ensuring a zero length, such calls will dereference the NULL pointer or write beyond the bounds of the object referenced by the pointer, violating MISRA C 2023 Rule 21.17. Example concrete violation: lfs_dir_fetchmatch(..., NULL /* buffer */, NULL, NULL) internally does memcpy(NULL, src, n) with n>0.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/799.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable trace info to /tmp/logs/799.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/799.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Additional lightweight probe that records key state before and after calls */\nstatic void lfs_probe_state(void *lfs_ptr, unsigned long long block_count, const char *stage, int err) {\n    /* err can be -1 if not applicable */\n    lfs_probe_log(\"[probe] stage=%s lfs=%p block_count=%llu err=%d\", lfs_ptr, block_count, err);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log lock result and entry state */\n    lfs_probe_state((void*)lfs, (unsigned long long)block_count, \"after_lock\", err);\n    if (err) {\n        /* Capture early return due to lock failure */\n        lfs_probe_log(\"[probe] lfs_fs_grow: lock failed, returning %d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    /* Log just before delegating to internal grow implementation */\n    lfs_probe_log(\"[probe] calling lfs_fs_grow_ with lfs=%p block_count=%llu\", (void*)lfs, (unsigned long long)block_count);\n    err = lfs_fs_grow_(lfs, block_count);\n    /* Log result from internal implementation */\n    lfs_probe_state((void*)lfs, (unsigned long long)block_count, \"after_internal_grow\", err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    /* Log just before unlocking */\n    lfs_probe_log(\"[probe] unlocking lfs (lfs=%p) with err=%d\", (void*)lfs, err);\n    LFS_UNLOCK(lfs->cfg);\n    /* Final state log after unlock */\n    lfs_probe_state((void*)lfs, (unsigned long long)block_count, \"exit\", err);\n    return err;\n}\n"
}