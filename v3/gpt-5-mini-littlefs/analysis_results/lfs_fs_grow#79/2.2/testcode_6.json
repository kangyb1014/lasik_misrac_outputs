{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); becomes an expression-statement that evaluates lfs->cfg and does nothing. This statement is reachable and executed, but removing it would not affect program behaviour in this configuration (no side-effects), therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/792.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: log state around the unlock point to /tmp/logs/792.txt.\n   This function intentionally avoids dereferencing any pointers beyond lfs\n   itself to minimise the chance of changing program behaviour. */\nstatic void lfs_probe_unlock(const lfs_t *lfs, const char *stage, int err) {\n    FILE *f = fopen(\"/tmp/logs/792.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    if (lfs == NULL) {\n        fprintf(f, \"%s: lfs=NULL err=%d\\n\", stage, err);\n        fclose(f);\n        return;\n    }\n\n    /* Compute a simple checksum over the raw bytes of the cfg member so\n       we can detect whether its in-memory contents change across the\n       LFS_UNLOCK call without assuming the type of cfg or dereferencing\n       any deeper pointers. */\n    size_t cfg_size = sizeof(lfs->cfg);\n    const unsigned char *bytes = (const unsigned char *)&lfs->cfg;\n    uint32_t checksum = 0u;\n    for (size_t i = 0; i < cfg_size; i++) {\n        checksum = (checksum + bytes[i]) & 0xFFFFFFFFu;\n    }\n\n    fprintf(f, \"%s: lfs=%p cfg_addr=%p cfg_size=%zu cfg_checksum=0x%08x err=%d\\n\",\n            stage, (const void *)lfs, (const void *)&lfs->cfg,\n            cfg_size, checksum, err);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n\n    /* Probe before and after the unlock to capture evidence that\n       LFS_UNLOCK(lfs->cfg) may be a no-op in this configuration. */\n    lfs_probe_unlock(lfs, \"pre_unlock\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_unlock(lfs, \"post_unlock\", err);\n\n    return err;\n}\n"
}