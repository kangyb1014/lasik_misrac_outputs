{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg, 0), so the expression \"int err = LFS_LOCK(lfs->cfg); if (err) { return err; }\" always assigns 0 to err and the conditional is never true. The assignment and the if-branch have no effect on program behaviour and could be removed without changing the program, which constitutes dead code. Therefore this violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/792.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper: write control-flow and state information to /tmp/logs/792.txt\n   This function is intended to be non-intrusive (it does not change program\n   logic or return values) and just records the result of the LFS_LOCK call\n   and later the result returned from lfs_fs_grow_. */\nstatic void lfs_probe_write_lock_state(const lfs_t *lfs, int err, lfs_size_t block_count) {\n    /* Try to ensure the directory exists; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/792.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    (void)fprintf(f, \"[probe] lfs_fs_grow enter: lfs=%p, block_count=%lu\\n\",\n                  (void*)lfs, (unsigned long)block_count);\n\n    (void)fprintf(f, \"[probe] after LFS_LOCK: err=%d, cfg=%p\\n\",\n                  err, (void*)(lfs ? lfs->cfg : NULL));\n\n    if (err) {\n        (void)fprintf(f, \"[probe] LFS_LOCK returned non-zero; branch taken to return %d\\n\", err);\n    } else {\n        (void)fprintf(f, \"[probe] LFS_LOCK returned zero; continue execution\\n\");\n    }\n\n    (void)fclose(f);\n}\n\nstatic void lfs_probe_write_result_state(const lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/792.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    (void)fprintf(f, \"[probe] lfs_fs_grow -> %d, lfs=%p\\n\", err, (void*)lfs);\n    (void)fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after the lock to record the returned value and cfg. */\n    lfs_probe_write_lock_state(lfs, err, block_count);\n\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Probe the result before unlocking to capture final outcome. */\n    lfs_probe_write_result_state(lfs, err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}