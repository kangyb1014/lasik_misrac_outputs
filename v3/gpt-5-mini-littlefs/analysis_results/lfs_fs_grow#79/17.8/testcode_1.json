{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code takes the address of the value parameter block_count (\"&block_count\") and passes it to lfs_fs_traverse_. If lfs_fs_traverse_ or the callback lfs_shrink_checkblock writes through that pointer (e.g. modifies *(&block_count)), it will modify the function parameter block_count indirectly, which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/797.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helpers to log control flow and state for debugging. */\nstatic void probe_log_before(const void *lfs_ptr, const void *addr_block_count, unsigned long long block_count)\n{\n    FILE *f = fopen(\"/tmp/logs/797.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[lfs_fs_grow] ENTER\\n\");\n        fprintf(f, \"  lfs=%p\\n\", lfs_ptr);\n        fprintf(f, \"  &block_count=%p\\n\", addr_block_count);\n        fprintf(f, \"  block_count(before)=%llu\\n\", block_count);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_after(const void *lfs_ptr, const void *addr_block_count, unsigned long long block_count_before,\n                            unsigned long long block_count_after, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/797.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[lfs_fs_grow] EXIT\\n\");\n        fprintf(f, \"  lfs=%p\\n\", lfs_ptr);\n        fprintf(f, \"  &block_count=%p\\n\", addr_block_count);\n        fprintf(f, \"  block_count(before)=%llu\\n\", block_count_before);\n        fprintf(f, \"  block_count(after)=%llu\\n\", block_count_after);\n        fprintf(f, \"  err=%d\\n\", err);\n        if (block_count_before != block_count_after) {\n            fprintf(f, \"  WARNING: block_count value changed during call!\\n\");\n        }\n        fclose(f);\n    }\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* Save original value for later comparison; do NOT modify the parameter. */\n    lfs_size_t saved_block_count = block_count;\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    /* Probe before calling internal grow function. Log the address of the\n       parameter so callers/handlers that take its address can be detected. */\n    probe_log_before((void*)lfs, (void*)&block_count, (unsigned long long)block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Probe after the call to detect whether the value (or memory at the\n       address of the parameter) was modified by callees. */\n    probe_log_after((void*)lfs, (void*)&block_count,\n                    (unsigned long long)saved_block_count,\n                    (unsigned long long)block_count,\n                    err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}