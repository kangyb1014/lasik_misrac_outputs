{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression 'if (err)' is invariant in the presented translation unit. 'err' is initialized as int err = LFS_LOCK(lfs->cfg); and LFS_LOCK is defined as ((void)cfg,0), so err is guaranteed to be 0 at that point and the test is always false. Neither of the permitted exceptions (infinite loop or the specific do-while constant-false case) applies, so this violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/795.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helpers to log control flow and state for reproducing the invariant test */\nstatic void lfs_probe_log_state(const char *stage, lfs_t *lfs, lfs_size_t block_count, int err) {\n    FILE *f = fopen(\"/tmp/logs/795.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: lfs=%p block_count=%\" PRIu32 \" err=%d\\n\",\n                stage, (void*)lfs, block_count, err);\n        fclose(f);\n    }\n}\n\nstatic void lfs_probe_log_msg(const char *msg, int err) {\n    FILE *f = fopen(\"/tmp/logs/795.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s err=%d\\n\", msg, err);\n        fclose(f);\n    }\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* preserve original logic but add probes to capture invariant behavior */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the value immediately after acquiring the lock (or simulated lock) */\n    lfs_probe_log_state(\"after LFS_LOCK\", lfs, block_count, err);\n\n    if (err) {\n        /* Log that the early-return branch was taken */\n        lfs_probe_log_msg(\"lfs_fs_grow: early return due to err\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    /* Log just before calling the inner grow function */\n    lfs_probe_log_state(\"before lfs_fs_grow_\", lfs, block_count, err);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Log result from inner grow */\n    lfs_probe_log_state(\"after lfs_fs_grow_\", lfs, block_count, err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlocking and before returning */\n    lfs_probe_log_state(\"after LFS_UNLOCK (returning)\", lfs, block_count, err);\n    return err;\n}\n"
}