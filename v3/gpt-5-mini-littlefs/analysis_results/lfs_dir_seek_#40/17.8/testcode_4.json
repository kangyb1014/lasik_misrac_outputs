{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'off' (type lfs_off_t) is modified inside the function (e.g. 'off -= dir->pos;' and 'off -= diff;'). This directly alters a non-pointer function parameter, violating Rule 17.8. (Pointer parameters are only dereferenced/used; the pointers themselves are not reassigned.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/407.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek_:\n```c\nstatic int lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    // simply walk from head dir\n    int err = lfs_dir_rewind_(lfs, dir);\n    if (err) {\n        return err;\n    }\n\n    // first two for ./..\n    dir->pos = lfs_min(2, off);\n    off -= dir->pos;\n\n    // skip superblock entry\n    dir->id = (off > 0 && lfs_pair_cmp(dir->head, lfs->root) == 0);\n\n    while (off > 0) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return LFS_ERR_INVAL;\n            }\n\n            err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int diff = lfs_min(dir->m.count - dir->id, off);\n        dir->id += diff;\n        dir->pos += diff;\n        off -= diff;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/407.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    lfs_log_probe(\"ENTER lfs_dir_seek_: lfs=%p dir=%p off=%lld\", (void*)lfs, (void*)dir, (long long)off);\n\n    // simply walk from head dir\n    int err = lfs_dir_rewind_(lfs, dir);\n    lfs_log_probe(\"after lfs_dir_rewind_: err=%d dir->pos=%lld dir->id=%d\", err, (long long)dir->pos, dir->id);\n    if (err) {\n        lfs_log_probe(\"RETURN (rewind err) lfs_dir_seek_: err=%d\", err);\n        return err;\n    }\n\n    // first two for ./..\n    dir->pos = lfs_min(2, off);\n    lfs_log_probe(\"after ./.. compute: dir->pos=%lld (set to min(2,off))\", (long long)dir->pos);\n    off -= dir->pos;\n    lfs_log_probe(\"after subtracting dir->pos from off: off=%lld\", (long long)off);\n\n    // skip superblock entry\n    dir->id = (off > 0 && lfs_pair_cmp(dir->head, lfs->root) == 0);\n    lfs_log_probe(\"after skip superblock: dir->id=%d (off=%lld head==root=%d)\", dir->id, (long long)off, (int)(off > 0 && lfs_pair_cmp(dir->head, lfs->root) == 0));\n\n    while (off > 0) {\n        lfs_log_probe(\"WHILE loop start: off=%lld dir->id=%d dir->m.count=%d dir->m.split=%d\", (long long)off, dir->id, (int)dir->m.count, (int)dir->m.split);\n        if (dir->id == dir->m.count) {\n            lfs_log_probe(\"dir->id == dir->m.count branch: id=%d count=%d split=%d\", dir->id, (int)dir->m.count, (int)dir->m.split);\n            if (!dir->m.split) {\n                lfs_log_probe(\"RETURN (INVAL) lfs_dir_seek_: no split and id==count\");\n                return LFS_ERR_INVAL;\n            }\n\n            err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            lfs_log_probe(\"after lfs_dir_fetch: err=%d (fetched tail=%d)\", err, (int)dir->m.tail);\n            if (err) {\n                lfs_log_probe(\"RETURN (fetch err) lfs_dir_seek_: err=%d\", err);\n                return err;\n            }\n\n            dir->id = 0;\n            lfs_log_probe(\"after reset dir->id to 0 following fetch\");\n        }\n\n        int diff = lfs_min(dir->m.count - dir->id, off);\n        lfs_log_probe(\"computed diff=min(count-id, off) = %d\", diff);\n        dir->id += diff;\n        dir->pos += diff;\n        off -= diff;\n        lfs_log_probe(\"after advancing: dir->id=%d dir->pos=%lld off=%lld\", dir->id, (long long)dir->pos, (long long)off);\n    }\n\n    lfs_log_probe(\"EXIT lfs_dir_seek_: success dir->pos=%lld dir->id=%d off=%lld\", (long long)dir->pos, dir->id, (long long)off);\n    return 0;\n}\n"
}