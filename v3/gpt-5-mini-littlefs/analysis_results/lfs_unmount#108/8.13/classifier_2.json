{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_unmount:\n```c\nint lfs_unmount(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_unmount(%p)\", (void*)lfs);\n\n    err = lfs_unmount_(lfs);\n\n    LFS_TRACE(\"lfs_unmount -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nLFS_LOCK(lfs->cfg);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Cannot determine from the fragment alone. The expression LFS_LOCK(lfs->cfg) only violates MISRA C 2023 Rule 8.13 if the cfg member is declared as a pointer to a non-const type even though the pointed-to object is not modified and therefore should be const-qualified. For example, this would be a violation: \n\nstruct lfs_config { /* ... */ };\nstruct lfs { struct lfs_config *cfg; };\n/* LFS_LOCK prototype takes a non-const pointer but only reads the config: */\nvoid LFS_LOCK(struct lfs_config *cfg);\n\nIf LFS_LOCK and other users only read cfg, the member should be declared const struct lfs_config *cfg (and LFS_LOCK should accept const struct lfs_config *), otherwise Rule 8.13 is violated. If cfg is already a pointer to const or if callers modify the pointed-to object, then there is no violation."
}