{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe variable err is initialized from LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as ((void)cfg,0), so err is always 0 at the if. The controlling expression if (err) is therefore an invariant (constant false) expression, which is not one of the permitted exceptions for Rule 14.3 (the exceptions only allow invariants for infinite loops or a do-while false constant).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1085.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_unmount:\n```c\nint lfs_unmount(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_unmount(%p)\", (void*)lfs);\n\n    err = lfs_unmount_(lfs);\n\n    LFS_TRACE(\"lfs_unmount -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_unmount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal type used by lfs_unmount. Real definition lives elsewhere. */\ntypedef struct lfs { void *cfg; } lfs_t;\n\n/* Probe logger that appends to the required logfile. */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/1085.txt\", \"a\");\n    if (!f) { return; }\n\n    /* Timestamp for easier tracing */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf)) {\n        char times[32];\n        if (strftime(times, sizeof(times), \"%Y-%m-%d %H:%M:%S\", &tm_buf)) {\n            fprintf(f, \"%s - \", times);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Minimal stubs to make this file compilable and runnable for testing purposes.\n   These mimic the behavior described in the violation scenario:\n   LFS_LOCK(cfg) behaves like ((void)cfg, 0) returning 0. */\nstatic int LFS_LOCK(void *cfg) {\n    (void)cfg;\n    probe_log(\"LFS_LOCK called with cfg=%p -> returning 0 (stub)\", cfg);\n    return 0; /* matches the reported macro ((void)cfg,0) */\n}\n\nstatic void LFS_UNLOCK(void *cfg) {\n    (void)cfg;\n    probe_log(\"LFS_UNLOCK called with cfg=%p\", cfg);\n}\n\nstatic void LFS_TRACE(const char *fmt, ...) {\n    va_list ap;\n    va_start(ap, fmt);\n    /* Forward trace message to the probe log with a TRACE tag. */\n    char buf[512];\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    probe_log(\"TRACE: %s\", buf);\n}\n\n/* Stub for the internal unmount. In real system this is provided elsewhere. */\nstatic int lfs_unmount_(lfs_t *lfs) {\n    probe_log(\"lfs_unmount_ called with lfs=%p\", (void*)lfs);\n    /* Return success for test execution. */\n    return 0;\n}\n\nint lfs_unmount(lfs_t *lfs) {\n    /* Preserve original logic while adding probes. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the initial state to allow reproduction of the invariant scenario. */\n    probe_log(\"After LFS_LOCK: lfs=%p, lfs->cfg=%p, err=%d\", (void*)lfs, lfs ? lfs->cfg : NULL, err);\n\n    if (err) {\n        probe_log(\"Branch taken: if (err) with err=%d -> returning err\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_unmount(%p)\", (void*)lfs);\n    probe_log(\"Calling lfs_unmount_ for lfs=%p\", (void*)lfs);\n\n    err = lfs_unmount_(lfs);\n\n    LFS_TRACE(\"lfs_unmount -> %d\", err);\n    probe_log(\"After lfs_unmount_: err=%d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"Returning from lfs_unmount with err=%d\", err);\n    return err;\n}\n"
}