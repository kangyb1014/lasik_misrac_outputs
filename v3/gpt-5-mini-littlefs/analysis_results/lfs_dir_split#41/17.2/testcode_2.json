{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement calls the callback pointer cb from within lfs_dir_traverse. If cb is (or eventually calls) lfs_dir_traverse (for example cb == lfs_dir_traverse_filter or any callback that calls lfs_dir_traverse), then lfs_dir_traverse -> cb -> lfs_dir_traverse creates an indirect recursive call chain. The code even contains checks (e.g. skipping recursion when cb == lfs_dir_traverse_filter in the LFS_FROM_MOVE case) which indicate such indirect recursion is possible. Therefore Rule 17.2 is violated in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_split code that contains useful probe functions that print useful logs to a file \"/tmp/logs/416.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_split as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_split:\n```c\nstatic int lfs_dir_split(lfs_t *lfs,\n        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t split, uint16_t end) {\n    // create tail metadata pair\n    lfs_mdir_t tail;\n    int err = lfs_dir_alloc(lfs, &tail);\n    if (err) {\n        return err;\n    }\n\n    tail.split = dir->split;\n    tail.tail[0] = dir->tail[0];\n    tail.tail[1] = dir->tail[1];\n\n    // note we don't care about LFS_OK_RELOCATED\n    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n    if (res < 0) {\n        return res;\n    }\n\n    dir->tail[0] = tail.pair[0];\n    dir->tail[1] = tail.pair[1];\n    dir->split = true;\n\n    // update root if needed\n    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {\n        lfs->root[0] = tail.pair[0];\n        lfs->root[1] = tail.pair[1];\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_split code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging function to capture control flow and state. */\nstatic void lfs_log_probe(const char *tag, void *lfs_ptr, void *dir_ptr, void *tail_ptr,\n        const void *attrs_ptr, int attrcount, void *source_ptr,\n        uint16_t split, uint16_t end, int code) {\n    FILE *f = fopen(\"/tmp/logs/416.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* %p for pointers, %d for integers, %u for uint16_t cast to unsigned */\n    fprintf(f, \"[%s] lfs=%p dir=%p tail=%p attrs=%p attrcount=%d source=%p split=%u end=%u code=%d\\n\",\n            tag, lfs_ptr, dir_ptr, tail_ptr, attrs_ptr, attrcount, source_ptr,\n            (unsigned)split, (unsigned)end, code);\n    fflush(f);\n    fclose(f);\n}\n\nstatic int lfs_dir_split(lfs_t *lfs,\n        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t split, uint16_t end) {\n    /* Log entry and input parameters */\n    lfs_log_probe(\"enter\", (void*)lfs, (void*)dir, NULL, (const void*)attrs,\n                  attrcount, (void*)source, split, end, 0);\n\n    // create tail metadata pair\n    lfs_mdir_t tail;\n    int err = lfs_dir_alloc(lfs, &tail);\n\n    /* Log result of allocation */\n    lfs_log_probe(\"after_alloc\", (void*)lfs, (void*)dir, (void*)&tail,\n                  (const void*)attrs, attrcount, (void*)source, split, end, err);\n\n    if (err) {\n        /* Log early return */\n        lfs_log_probe(\"return_err_alloc\", (void*)lfs, (void*)dir, (void*)&tail,\n                      (const void*)attrs, attrcount, (void*)source, split, end, err);\n        return err;\n    }\n\n    tail.split = dir->split;\n    tail.tail[0] = dir->tail[0];\n    tail.tail[1] = dir->tail[1];\n\n    /* Log tail initialization state */\n    lfs_log_probe(\"tail_initialized\", (void*)lfs, (void*)dir, (void*)&tail,\n                  (const void*)attrs, attrcount, (void*)source, split, end, 0);\n\n    // note we don't care about LFS_OK_RELOCATED\n    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n\n    /* Log result of compaction */\n    lfs_log_probe(\"after_compact\", (void*)lfs, (void*)dir, (void*)&tail,\n                  (const void*)attrs, attrcount, (void*)source, split, end, res);\n\n    if (res < 0) {\n        /* Log early return */\n        lfs_log_probe(\"return_err_compact\", (void*)lfs, (void*)dir, (void*)&tail,\n                      (const void*)attrs, attrcount, (void*)source, split, end, res);\n        return res;\n    }\n\n    /* Log before updating dir with tail pairs (old values included via pointers) */\n    lfs_log_probe(\"before_update_dir\", (void*)lfs, (void*)dir, (void*)&tail,\n                  (const void*)attrs, attrcount, (void*)source, split, end, 0);\n\n    dir->tail[0] = tail.pair[0];\n    dir->tail[1] = tail.pair[1];\n    dir->split = true;\n\n    /* Log after updating dir */\n    lfs_log_probe(\"after_update_dir\", (void*)lfs, (void*)dir, (void*)&tail,\n                  (const void*)attrs, attrcount, (void*)source, split, end, 0);\n\n    // update root if needed\n    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {\n        /* Log root update condition and values */\n        lfs_log_probe(\"updating_root\", (void*)lfs, (void*)dir, (void*)&tail,\n                      (const void*)attrs, attrcount, (void*)source, split, end, 0);\n\n        lfs->root[0] = tail.pair[0];\n        lfs->root[1] = tail.pair[1];\n\n        /* Log after root update */\n        lfs_log_probe(\"after_root_update\", (void*)lfs, (void*)dir, (void*)&tail,\n                      (const void*)attrs, attrcount, (void*)source, split, end, 0);\n    }\n\n    /* Log normal exit */\n    lfs_log_probe(\"exit\", (void*)lfs, (void*)dir, (void*)&tail,\n                  (const void*)attrs, attrcount, (void*)source, split, end, 0);\n\n    return 0;\n}\n"
}