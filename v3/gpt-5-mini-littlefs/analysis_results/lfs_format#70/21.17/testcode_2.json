{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment assigns a user-supplied read_buffer directly to lfs->rcache.buffer without validating that the supplied buffer is at least cfg->cache_size bytes. Later lfs_init calls lfs_cache_zero(lfs, &lfs->rcache) which performs a memset(lfs->rcache.buffer, 0, lfs->cfg->cache_size). If the application provides a cfg->read_buffer smaller than cfg->cache_size, that memset will write past the end of the object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/709.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "static void lfs_format_log_probe(const char *phase, lfs_t *lfs, const struct lfs_config *cfg, int err) {\n    /* Attempt to open the log file; best-effort only. Do not alter program flow on failure. */\n    FILE *f = fopen(\"/tmp/logs/709.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log a concise snapshot of relevant control-state that can help reproduce\n       the scenario described: pointers and sizes that determine buffer usage. */\n    fprintf(f, \"LFS_FORMAT_PROBE %s\\n\", phase);\n    fprintf(f, \"  lfs=%p\\n\", (void*)lfs);\n    fprintf(f, \"  cfg=%p\\n\", (void*)cfg);\n\n    if (cfg) {\n        /* Print configuration fields that are relevant to the reported violation.\n           Use casts to void* for pointer printing. */\n        fprintf(f, \"  cfg->context=%p\\n\", cfg->context);\n        fprintf(f, \"  cfg->read=%p, cfg->prog=%p, cfg->erase=%p, cfg->sync=%p\\n\",\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"  cfg->read_size=%\" PRIu32 \", cfg->prog_size=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size);\n        fprintf(f, \"  cfg->block_size=%\" PRIu32 \", cfg->block_count=%\" PRIu32 \"\\n\",\n                cfg->block_size, cfg->block_count);\n        fprintf(f, \"  cfg->cache_size=%\" PRIu32 \", cfg->lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->cache_size, cfg->lookahead_size);\n        fprintf(f, \"  cfg->read_buffer=%p, cfg->prog_buffer=%p, cfg->lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n        fprintf(f, \"  cfg->name_max=%\" PRIu32 \", cfg->file_max=%\" PRIu32 \", cfg->attr_max=%\" PRIu32 \"\\n\",\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n    }\n\n    /* If error code is meaningful at this point, print it. */\n    if (err != 0 || phase == \"exit\") {\n        fprintf(f, \"  err=%d\\n\", err);\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Probe: log configuration and pointers BEFORE calling into the formatter.\n       This captures the state that can lead to an out-of-bounds memset later\n       when a user-supplied read_buffer is smaller than cfg->cache_size. */\n    lfs_format_log_probe(\"enter\", lfs, cfg, 0);\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Probe: log after the call, including the returned error code. */\n    lfs_format_log_probe(\"exit\", lfs, cfg, err);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}"
}