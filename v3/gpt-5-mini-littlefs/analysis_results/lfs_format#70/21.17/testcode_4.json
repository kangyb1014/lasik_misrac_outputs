{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller supplies cfg->lookahead_buffer that is smaller than cfg->lookahead_size, lfs_init assigns lfs->lookahead.buffer = cfg->lookahead_buffer without validating its size. Shortly afterwards lfs_format_ calls memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size), which would write beyond the bounds of the provided buffer. There is no runtime check that the user-provided buffer has at least lookahead_size bytes, so the use of memset can result in out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/709.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe function to log configuration and control flow for debugging.\n   Writes logs to /tmp/logs/709.txt. Does not change program logic. */\nstatic void lfs_format_probe(const void *lfs, const struct lfs_config *cfg, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/709.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"==== lfs_format probe: %s ====\\n\", stage);\n    fprintf(f, \"lfs=%p, cfg=%p\\n\", lfs, (void*)cfg);\n    if (cfg) {\n        fprintf(f, \"cfg->context=%p\\n\", cfg->context);\n        fprintf(f, \"cfg->read=%p, cfg->prog=%p, cfg->erase=%p, cfg->sync=%p\\n\",\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"sizes: read_size=%\"PRIu32\", prog_size=%\"PRIu32\", block_size=%\"PRIu32\", block_count=%\"PRIu32\"\\n\",\n                cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n        fprintf(f, \"other: block_cycles=%\"PRId32\", cache_size=%\"PRIu32\", lookahead_size=%\"PRIu32\"\\n\",\n                cfg->block_cycles, cfg->cache_size, cfg->lookahead_size);\n        fprintf(f, \"buffers: read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n        fprintf(f, \"limits: name_max=%\"PRIu32\", file_max=%\"PRIu32\", attr_max=%\"PRIu32\"\\n\",\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n    }\n    fprintf(f, \"===============================\\n\");\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log lock failure so callers can see control flow */\n        lfs_format_probe(lfs, cfg, \"lock_failed\");\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}),\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Probe before calling the internal formatter so we capture the\n       configuration that will be used/assigned inside lfs_format_. This\n       helps reproduce scenarios where a user-supplied lookahead_buffer is\n       smaller than lookahead_size. */\n    lfs_format_probe(lfs, cfg, \"before_lfs_format_\");\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Probe after formatting to capture result and confirm control flow. */\n    lfs_format_probe(lfs, cfg, err == 0 ? \"after_lfs_format_success\" : \"after_lfs_format_failure\");\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}