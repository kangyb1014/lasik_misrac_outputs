{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memset call writes lfs->cfg->lookahead_size bytes to lfs->lookahead.buffer. If the user supplied cfg->lookahead_buffer that is smaller than cfg->lookahead_size (the API requires the user buffer to be of size lookahead_size but this is not checked at runtime), memset can write beyond the bounds of the provided buffer. Although lfs_init() allocates a buffer of exactly lookahead_size when no user buffer is provided, the user-buffer path is unchecked and thus allows a potential out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/709.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Open log file for append. Non-fatal if it fails. */\n    FILE *log = fopen(\"/tmp/logs/709.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_format: lfs=%p cfg=%p\\n\", (void*)lfs, (void*)cfg);\n        fflush(log);\n    }\n\n    int err = LFS_LOCK(cfg);\n    if (log) {\n        fprintf(log, \"LFS_LOCK returned: %d\\n\", err);\n        fflush(log);\n    }\n    if (err) {\n        if (log) {\n            fprintf(log, \"lfs_format early return due to LFS_LOCK failure: %d\\n\", err);\n            fclose(log);\n        }\n        return err;\n    }\n\n    /* Log configuration state after acquiring lock. Avoid dereferencing NULL cfg. */\n    if (log) {\n        if (cfg) {\n            fprintf(log, \"cfg pointer: %p\\n\", (void*)cfg);\n            fprintf(log, \"  context=%p\\n\", (void*)cfg->context);\n            fprintf(log, \"  read=%p prog=%p erase=%p sync=%p\\n\",\n                    (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                    (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n            fprintf(log, \"  read_size=%llu prog_size=%llu block_size=%llu block_count=%llu\\n\",\n                    (unsigned long long)cfg->read_size,\n                    (unsigned long long)cfg->prog_size,\n                    (unsigned long long)cfg->block_size,\n                    (unsigned long long)cfg->block_count);\n            fprintf(log, \"  block_cycles=%lld cache_size=%llu lookahead_size=%llu\\n\",\n                    (long long)cfg->block_cycles,\n                    (unsigned long long)cfg->cache_size,\n                    (unsigned long long)cfg->lookahead_size);\n            fprintf(log, \"  read_buffer=%p prog_buffer=%p lookahead_buffer=%p\\n\",\n                    (void*)cfg->read_buffer, (void*)cfg->prog_buffer,\n                    (void*)cfg->lookahead_buffer);\n            fprintf(log, \"  name_max=%llu file_max=%llu attr_max=%llu\\n\",\n                    (unsigned long long)cfg->name_max,\n                    (unsigned long long)cfg->file_max,\n                    (unsigned long long)cfg->attr_max);\n        } else {\n            fprintf(log, \"cfg is NULL\\n\");\n        }\n        fflush(log);\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    if (log) {\n        fprintf(log, \"Calling lfs_format_ (delegated format routine)\\n\");\n        fflush(log);\n    }\n\n    err = lfs_format_(lfs, cfg);\n\n    if (log) {\n        fprintf(log, \"lfs_format_ returned: %d\\n\", err);\n        /* Re-log lookahead details to capture any changes possibly made by lfs_format_. */\n        if (cfg) {\n            fprintf(log, \"post-format lookahead_size=%llu lookahead_buffer=%p\\n\",\n                    (unsigned long long)cfg->lookahead_size,\n                    (void*)cfg->lookahead_buffer);\n        }\n        fflush(log);\n    }\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    if (log) {\n        fprintf(log, \"EXIT lfs_format: returning %d\\n\", err);\n        fclose(log);\n    }\n\n    return err;\n}\n"
}