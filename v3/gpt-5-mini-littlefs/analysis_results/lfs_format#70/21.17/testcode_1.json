{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the user supplies cfg->prog_buffer that is smaller than cfg->cache_size, the code assigns lfs->pcache.buffer = cfg->prog_buffer without validating its size. Later lfs_cache_zero(lfs, &lfs->pcache) (which internally uses memset to zero cache_size bytes) will call memset(lfs->pcache.buffer, 0, lfs->cfg->cache_size) and thus may write beyond the provided buffer. This would result in an out-of-bounds access via a <string.h> function (memset), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/709.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe logging function for reproducing potential overflow scenario.\n * Appends human-readable diagnostic information to /tmp/logs/709.txt.\n * This function intentionally does not change program logic; it only\n * records the configuration and control flow state so other agents can\n * reproduce and gather evidence for the reported violation scenario.\n */\nstatic void lfs_format_probe_log(lfs_t *lfs, const struct lfs_config *cfg,\n        const char *stage, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/709.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Record basic control-flow stage and key configuration fields that are\n     * relevant to the reported violation: prog_buffer pointer and cache_size.\n     * Include other fields to help reproduce the environment.\n     */\n    fprintf(f, \"STAGE=%s lfs=%p cfg=%p err=%d\\n\",\n            stage, (void*)lfs, (void*)cfg, err);\n\n    if (cfg) {\n        fprintf(f, \"  cfg->context=%p\\n\", cfg->context);\n        fprintf(f, \"  cfg->read=%p cfg->prog=%p cfg->erase=%p cfg->sync=%p\\n\",\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"  cfg->read_size=%\" PRIu32 \" cfg->prog_size=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size);\n        fprintf(f, \"  cfg->block_size=%\" PRIu32 \" cfg->block_count=%\" PRIu32 \"\\n\",\n                cfg->block_size, cfg->block_count);\n        fprintf(f, \"  cfg->cache_size=%\" PRIu32 \" cfg->lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->cache_size, cfg->lookahead_size);\n        fprintf(f, \"  cfg->read_buffer=%p cfg->prog_buffer=%p cfg->lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n        fprintf(f, \"  cfg->name_max=%\" PRIu32 \" cfg->file_max=%\" PRIu32 \" cfg->attr_max=%\" PRIu32 \"\\n\",\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n\n        /* Heuristic checks that may help catch misuse: while we cannot know\n         * the actual allocated size of cfg->prog_buffer from here, we log\n         * a few comparisons that are commonly related to the reported issue.\n         */\n        if (cfg->prog_buffer == NULL) {\n            fprintf(f, \"  NOTE: prog_buffer is NULL\\n\");\n        }\n        /* If these fields exist and might indicate expected buffer sizes,\n         * log when cache_size exceeds related sizes to highlight suspicious\n         * configurations for later analysis.\n         */\n        if (cfg->cache_size > cfg->prog_size) {\n            fprintf(f, \"  WARNING: cfg->cache_size (%\" PRIu32 \") > cfg->prog_size (%\" PRIu32 \")\\n\",\n                    cfg->cache_size, cfg->prog_size);\n        }\n    }\n\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log the early-exit due to lock failure */\n        lfs_format_probe_log(lfs, cfg, \"lock_failed\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log state just before calling the internal formatter so the exact\n     * configuration used by lfs_format_ is recorded for reproduction.\n     */\n    lfs_format_probe_log(lfs, cfg, \"before_format_\", 0);\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Log state after returning from lfs_format_ including the returned error\n     * value. This helps correlate the configuration with the result and\n     * provides evidence when an overflow occurs later during cache zeroing.\n     */\n    lfs_format_probe_log(lfs, cfg, \"after_format_\", err);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}