{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression of the if statement is invariant: err is initialized from LFS_LOCK(lfs->cfg), and LFS_LOCK is defined as ((void)cfg,0) so err is always 0. Therefore the condition if (err) is always false (an invariant) and violates Rule 14.3. This is not covered by the allowed exceptions (not an infinite loop and not the permitted do-while case).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/665.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/665.txt.\n   This preserves the original logic and only records state for debugging. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/665.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log state right after acquiring/attempting lock */\n    lfs_probe_log(\"lfs_file_truncate: after LFS_LOCK, err=%d, lfs=%p, file=%p, size=%lld\",\n                  err, (void*)lfs, (void*)file, (long long)size);\n\n    if (err) {\n        /* Log the early return path so callers can see control flow */\n        lfs_probe_log(\"lfs_file_truncate: returning early due to err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    /* Log result from the internal truncate operation */\n    lfs_probe_log(\"lfs_file_truncate: lfs_file_truncate_ returned err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n\n    /* Log immediately before unlocking and returning */\n    lfs_probe_log(\"lfs_file_truncate: unlocking and returning err=%d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}