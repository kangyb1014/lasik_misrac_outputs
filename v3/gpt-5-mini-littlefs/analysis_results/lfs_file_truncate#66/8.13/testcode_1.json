{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the file pointer to a non-const 'struct lfs_mlist *' for a read-only check. The function lfs_file_truncate takes lfs_file_t *file but does not modify *file (it only asserts that the file is open). Therefore the pointer should be to a const-qualified type (e.g. const lfs_file_t *file and pass as (const struct lfs_mlist *)file or have lfs_mlist_isopen take a const pointer). The explicit cast to a non-const target hides the missing const-qualification and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/663.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/663.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"ENTER lfs_file_truncate: lfs=%p file=%p size=%\" PRIu32, (void*)lfs, (void*)file, size);\n    probe_log(\"LFS_LOCK returned %d\", err);\n    if (err) {\n        probe_log(\"LOCK failed, returning %d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n\n    /* Log the fact that code casts file to (struct lfs_mlist*) for the is-open check. */\n    probe_log(\"About to call lfs_mlist_isopen with cast to (struct lfs_mlist*)file: file=%p\", (void*)file);\n\n    /* Call once and record result for logging, then assert the same condition. This preserves behavior\n       while providing evidence of the cast and the call result. */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    probe_log(\"lfs_mlist_isopen returned %d for file=%p (cast to non-const struct lfs_mlist*)\",\n              isopen, (void*)file);\n    LFS_ASSERT(isopen);\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    probe_log(\"lfs_file_truncate_ returned %d\", err);\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"UNLOCK called, returning %d\", err);\n    return err;\n}\n"
}