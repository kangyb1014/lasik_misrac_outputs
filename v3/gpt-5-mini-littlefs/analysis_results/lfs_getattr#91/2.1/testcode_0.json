{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg, 0), so LFS_LOCK(lfs->cfg) always evaluates to 0. In lfs_getattr the code 'int err = LFS_LOCK(lfs->cfg); if (err) { return err; }' therefore has an if-branch that can never be taken (the return inside the if is unreachable) in the project as configured.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/911.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function: append control-flow and state information to /tmp/logs/911.txt */\nstatic void lfs_probe_log(const char *label, void *lfs_ptr, const char *path,\n        uint8_t type, void *buffer, unsigned long size, int err) {\n    FILE *f = fopen(\"/tmp/logs/911.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: lfs=%p path=\\\"%s\\\" type=%u buffer=%p size=%lu err=%d\\n\",\n            label, lfs_ptr, (path ? path : \"(null)\"), (unsigned)type, buffer, size, err);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    /* Preserve original logic: call LFS_LOCK and return on error. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock attempt and input state so callers can reproduce whether the\n       lock branch is taken or not. Use a safe cast for size for logging. */\n    lfs_probe_log(\"after_lock\", (void*)lfs, path, type, buffer, (unsigned long)size, err);\n\n    if (err) {\n        /* Log that the error branch was taken before returning. This branch is expected\n           to be unreachable with the project's LFS_LOCK definition that expands to 0,\n           but we keep the original return to preserve behavior. */\n        lfs_probe_log(\"lock_failed_branch\", (void*)lfs, path, type, buffer, (unsigned long)size, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_probe_log(\"before_getattr_\", (void*)lfs, path, type, buffer, (unsigned long)size, 0);\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n    lfs_probe_log(\"after_getattr_\", (void*)lfs, path, type, buffer, (unsigned long)size, (int)res);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"returning\", (void*)lfs, path, type, buffer, (unsigned long)size, (int)res);\n    return res;\n}\n"
}