{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so int err = LFS_LOCK(lfs->cfg) always yields err == 0. Therefore the branch if (err) { return err; } can never be taken (unreachable code) in this project configuration, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/911.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/911.txt */\nstatic void lfs_probe_vlog(const char *fmt, va_list ap) {\n    /* Ensure directory exists; ignore errors if it already does */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/911.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void lfs_probe_log(const char *fmt, ...) {\n    va_list ap;\n    va_start(ap, fmt);\n    lfs_probe_vlog(fmt, ap);\n    va_end(ap);\n}\n\n/* Modified lfs_getattr with inserted probes. Original logic preserved. */\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    /* Log entry and parameters */\n    lfs_probe_log(\"ENTER: lfs_getattr: lfs=%p, path=\\\"%s\\\", type=%u, buffer=%p, size=%llu\",\n            (void*)lfs, path ? path : \"(null)\", (unsigned)type, buffer, (unsigned long long)size);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of LFS_LOCK to demonstrate the violation scenario */\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d, cfg=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        /* This branch is expected to be unreachable when LFS_LOCK expands to ((void)cfg,0)\n           but we still log if it ever occurs to provide evidence. */\n        lfs_probe_log(\"UNREACHABLE_BRANCH_TAKEN: lfs_getattr returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_probe_log(\"CALLING lfs_getattr_ with path=\\\"%s\\\", type=%u, size=%llu\",\n            path ? path : \"(null)\", (unsigned)type, (unsigned long long)size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    lfs_probe_log(\"RETURNED from lfs_getattr_: res=%lld\", (long long)res);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"EXIT: lfs_getattr: res=%lld (after unlock)\", (long long)res);\n    return res;\n}\n"
}