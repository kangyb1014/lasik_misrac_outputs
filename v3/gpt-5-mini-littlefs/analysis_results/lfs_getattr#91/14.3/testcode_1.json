{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression in the subsequent if statement, 'if (err)', is invariant false because err is initialized from LFS_LOCK(lfs->cfg), and the provided macro definition LFS_LOCK(cfg) expands to '((void)cfg, 0)', which always evaluates to 0. Thus the controlling expression is invariant and the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/915.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/915.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/915.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    /* Log entry and input state */\n    lfs_log_probe(\"ENTER lfs_getattr: lfs=%p, path='%s', type=%\" PRIu8 \", buffer=%p, size=%\" PRIu32,\n            (void*)lfs, (path != NULL) ? path : \"(null)\", type, buffer, (uint32_t)size);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of lock and the cfg pointer to show the invariant state */\n    lfs_log_probe(\"AFTER LFS_LOCK: cfg=%p, err=%d\", (void*)lfs->cfg, err);\n\n    if (err) {\n        lfs_log_probe(\"lfs_getattr: early return due to lock error: err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    /* Log the result of the internal call */\n    lfs_log_probe(\"lfs_getattr_: res=%\" PRId32, (int32_t)res);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"LFS_UNLOCK called for cfg=%p\", (void*)lfs->cfg);\n\n    return res;\n}\n"
}