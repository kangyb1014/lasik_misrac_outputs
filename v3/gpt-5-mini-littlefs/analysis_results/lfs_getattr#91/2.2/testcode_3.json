{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE call is expanded to an empty macro (LFS_TRACE(__VA_ARGS__) is defined as nothing). After preprocessing the statement becomes a null statement (effectively a no-op). This null statement is executed but its removal would not affect program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/912.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helpers to log control flow and state for reproducing the LFS_TRACE empty-macro scenario.\n   These helpers do not change logic of lfs_getattr; they only append diagnostics to /tmp/logs/912.txt.\n*/\nstatic void probe_log_enter(void *lfs_ptr, const char *path, uint8_t type, void *buffer, uint32_t size) {\n    FILE *f = fopen(\"/tmp/logs/912.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[probe] enter: lfs=%p path=\\\"%s\\\" type=%\" PRIu8 \" buffer=%p size=%\" PRIu32 \"\\n\",\n                lfs_ptr, path ? path : \"(null)\", type, buffer, size);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_result(void *lfs_ptr, const char *path, uint8_t type, void *buffer, uint32_t size, int32_t res) {\n    FILE *f = fopen(\"/tmp/logs/912.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[probe] result: lfs=%p path=\\\"%s\\\" type=%\" PRIu8 \" buffer=%p size=%\" PRIu32 \" res=%\" PRId32 \"\\n\",\n                lfs_ptr, path ? path : \"(null)\", type, buffer, size, res);\n        fclose(f);\n    }\n}\n\n/* Original function logic preserved; probe calls inserted immediately after LFS_TRACE invocations\n   so agents can observe that LFS_TRACE produced no output while our probes still run. */\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Probe immediately after the trace call to capture parameters regardless of\n       whether LFS_TRACE expands to a no-op. */\n    probe_log_enter((void*)lfs, path, type, buffer, (uint32_t)size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n\n    /* Probe result so the log contains the return value and context. */\n    probe_log_result((void*)lfs, path, type, buffer, (uint32_t)size, (int32_t)res);\n\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}