{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK expands to ((void)cfg,0), so int err = LFS_LOCK(lfs->cfg); always evaluates to 0 and its evaluation has no observable side-effects. Consequently the stored value is constant-zero and the subsequent if (err) branch is never taken (the branch is effectively unreachable). The assignment/evaluation therefore performs no effect on program behaviour and can be removed without changing program behaviour, which constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/912.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/*\n * Probe helper: append human-readable execution state to /tmp/logs/912.txt.\n * Kept small and defensive so it can be compiled into the existing project\n * without changing original logic of lfs_getattr.\n */\nstatic void lfs_log_probe(const char *stage, void *lfs_ptr, const char *path,\n        uint8_t type, void *buffer, uint32_t size, int err, int32_t res) {\n    FILE *f = fopen(\"/tmp/logs/912.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    /* Print a compact single-line record for easy grepping */\n    fprintf(f, \"%s: lfs=%p path=\\\"%s\\\" type=%\" PRIu8 \" buffer=%p size=%\" PRIu32 \" err=%d res=%\" PRId32 \"\\n\",\n            stage, lfs_ptr, (path != NULL) ? path : \"(null)\", type, buffer, size, err, res);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    /* Preserve original assignment to err so behaviour is unchanged. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log lock result and current parameters to help reproduce the reported\n     * scenario where LFS_LOCK expands to ((void)cfg,0) and err is always 0. */\n    lfs_log_probe(\"after_lock\", (void*)lfs, path, type, buffer,\n            (uint32_t)size, err, (int32_t)0);\n\n    if (err) {\n        /* Log that the early-return branch was taken and the err value. */\n        lfs_log_probe(\"early_return_on_lock\", (void*)lfs, path, type, buffer,\n                (uint32_t)size, err, (int32_t)0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Log just before calling the underlying implementation. */\n    lfs_log_probe(\"before_getattr_\", (void*)lfs, path, type, buffer,\n            (uint32_t)size, err, (int32_t)0);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    /* Log result of the call so tools can detect whether the lock branch\n     * was actually relevant and observe that res is returned to the caller. */\n    lfs_log_probe(\"after_getattr_\", (void*)lfs, path, type, buffer,\n            (uint32_t)size, err, (int32_t)res);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log to indicate completion of the function. */\n    lfs_log_probe(\"return\", (void*)lfs, path, type, buffer,\n            (uint32_t)size, err, (int32_t)res);\n\n    return res;\n}\n"
}