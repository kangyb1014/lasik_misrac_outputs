{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the expression ((void)cfg), which evaluates its operand only to discard it and has no side-effects for normal (non-volatile, non-function-call) expressions. Calls such as LFS_UNLOCK(lfs->cfg); therefore execute an operation whose removal would not change program behaviour, i.e. dead code. This violates MISRA C 2023 Rule 2.2. (Note: if the cfg expression had observable side-effects \u2014 e.g. volatile access or a function call \u2014 the expression would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/912.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helper: logs a label and the cfg pointer value to /tmp/logs/912.txt\n   This function is designed to have no side-effects on program state other than\n   producing the diagnostic file used to reproduce the violation scenario. */\nstatic void lfs_probe_log_cfg(const char *label, const void *cfg) {\n    FILE *f = fopen(\"/tmp/logs/912.txt\", \"a\");\n    if (f) {\n        /* Print label and pointer value so callers can verify that the\n           expression passed to LFS_UNLOCK is a plain evaluation with no\n           observable side-effects. */\n        (void)fprintf(f, \"%s: cfg=%p\\n\", label, cfg);\n        (void)fflush(f);\n        (void)fclose(f);\n    }\n}\n\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n\n    /* Probes to capture the state before and after the LFS_UNLOCK invocation.\n       Because LFS_UNLOCK(cfg) expands to ((void)cfg), these probes will\n       demonstrate that evaluating the cfg expression has no observable\n       side-effects (the pointer value remains identical). */\n    lfs_probe_log_cfg(\"before_unlock\", (const void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log_cfg(\"after_unlock\", (const void*)lfs->cfg);\n\n    return res;\n}\n"
}