{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop uses a pointer-to-pointer loop counter 'p' (declared in the first clause) but the second clause tests '*p' and the third clause computes 'p = &(*p)->next'. The object '*p' (the pointed-to list node) is modified inside the loop body ('*p = (*p)->next;'). This means the second clause uses an object that is modified in the loop body and the third clause reads an object that is modified in the loop body. These violate clauses 2 and 3 of MISRA C 2023 Rule 14.2 (the condition and iteration expressions must not use objects that are modified in the loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/164.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper that does not depend on project types. */\nstatic void lfs_probe_log(const char *stage, const void *lfs_ptr, const void *dir_ptr, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/164.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* Timestamp for better correlation */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d | %s | lfs=%p | dir=%p | err=%d\\n\",\n        tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n        tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec,\n        stage, lfs_ptr, dir_ptr, err);\n\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Log entry with pointers */\n    lfs_probe_log(\"ENTRY\", (const void *)lfs, (const void *)dir, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock attempt */\n    lfs_probe_log(\"AFTER_LOCK\", (const void *)lfs, (const void *)dir, err);\n\n    if (err) {\n        lfs_probe_log(\"LOCK_FAILED_RETURN\", (const void *)lfs, (const void *)dir, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Log just before calling the internal close function */\n    lfs_probe_log(\"BEFORE_lfs_dir_close_\", (const void *)lfs, (const void *)dir, 0);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    /* Log after internal close returns, including its error code */\n    lfs_probe_log(\"AFTER_lfs_dir_close_\", (const void *)lfs, (const void *)dir, err);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final state before returning */\n    lfs_probe_log(\"RETURN\", (const void *)lfs, (const void *)dir, err);\n    return err;\n}\n"
}