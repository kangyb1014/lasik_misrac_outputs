{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). In typical usage (e.g. lfs_dir_close), this evaluates (void)lfs->cfg which has no observable side effects when cfg is not volatile or does not perform I/O, so the evaluation is an operation whose removal would not affect program behaviour. Thus the (void)cfg evaluation (and the empty locking/unlocking pattern) constitutes dead code. If cfg were volatile or mapped to I/O, removing it could change behaviour; but in the common (non-volatile) case this is a Rule 2.2 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/162.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Simple file logger used as probes. Appends lines to /tmp/logs/162.txt.\n   Keep very small and non-intrusive so original logic is preserved. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Probe: record attempt to lock and cfg pointer. This helps show that\n       the LFS_LOCK(cfg) expansion only evaluates cfg (address logged) but\n       typically does not cause side-effects. */\n    lfs_probe_log(\"ENTER lfs_dir_close: lfs=%p dir=%p cfg_ptr=%p\", (void*)lfs, (void*)dir, (void*)(lfs ? lfs->cfg : NULL));\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d cfg_ptr=%p\", err, (void*)(lfs ? lfs->cfg : NULL));\n\n    if (err) {\n        lfs_probe_log(\"EXIT lfs_dir_close early due to lock error: err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_probe_log(\"CALL lfs_dir_close_: lfs=%p dir=%p\", (void*)lfs, (void*)dir);\n    err = lfs_dir_close_(lfs, dir);\n    lfs_probe_log(\"RETURN lfs_dir_close_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n\n    lfs_probe_log(\"BEFORE LFS_UNLOCK: cfg_ptr=%p\", (void*)(lfs ? lfs->cfg : NULL));\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_UNLOCK\");\n\n    lfs_probe_log(\"EXIT lfs_dir_close: returning err=%d\", err);\n    return err;\n}\n"
}