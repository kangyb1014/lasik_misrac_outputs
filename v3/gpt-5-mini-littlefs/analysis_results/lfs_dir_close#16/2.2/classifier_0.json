{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_close:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);\n\n    return 0;\n}\n...\nstatic void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {\n    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {\n        if (*p == mlist) {\n            *p = (*p)->next;\n            break;\n        }\n    }\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define LFS_LOCK(cfg) ((void)cfg,0)\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The macro LFS_LOCK(cfg) expands to ((void)cfg,0). In typical usage (e.g. lfs_dir_close), this evaluates (void)lfs->cfg which has no observable side effects when cfg is not volatile or does not perform I/O, so the evaluation is an operation whose removal would not affect program behaviour. Thus the (void)cfg evaluation (and the empty locking/unlocking pattern) constitutes dead code. If cfg were volatile or mapped to I/O, removing it could change behaviour; but in the common (non-volatile) case this is a Rule 2.2 violation."
}