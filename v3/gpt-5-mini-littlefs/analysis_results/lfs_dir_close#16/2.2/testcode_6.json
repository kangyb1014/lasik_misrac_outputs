{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); merely evaluates lfs->cfg (no side effects if the cfg member is not volatile) and discards the result. Removing that statement would not change program behaviour (functional effect), so it is dead code. (Caveat: if evaluation of lfs->cfg relied on side effects or timing was considered part of system behaviour, it might not be removable; with the given definitions it has no side effects.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/162.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper that appends human-readable traces to /tmp/logs/162.txt\n   This function is intentionally lightweight and preserves the behavior of\n   lfs_dir_close apart from additional observations. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Log entry and parameters */\n    lfs_probe_log(\"ENTER lfs_dir_close: lfs=%p dir=%p\", (void*)lfs, (void*)dir);\n\n    lfs_probe_log(\"About to call LFS_LOCK with cfg=%p\", (void*)(lfs ? lfs->cfg : NULL));\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"LFS_LOCK returned %d\", err);\n\n    if (err) {\n        lfs_probe_log(\"Early return due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n    lfs_probe_log(\"Calling lfs_dir_close_ with lfs=%p dir=%p\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    lfs_probe_log(\"lfs_dir_close_ returned %d\", err);\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n\n    /* Probing the LFS_UNLOCK evaluation: capture cfg before and after the call.\n       According to the reported violation, LFS_UNLOCK(cfg) is defined as\n       ((void)cfg) and thus merely evaluates and discards cfg. We log the\n       value observed before/after to provide evidence whether the evaluation\n       has any observable effect on cfg. */\n    void *cfg_before = (void*)(lfs ? lfs->cfg : NULL);\n    lfs_probe_log(\"CFG value before LFS_UNLOCK: %p\", cfg_before);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    void *cfg_after = (void*)(lfs ? lfs->cfg : NULL);\n    lfs_probe_log(\"CFG value after LFS_UNLOCK: %p\", cfg_after);\n\n    if (cfg_before == cfg_after) {\n        lfs_probe_log(\"CFG unchanged by LFS_UNLOCK evaluation (supports dead-code hypothesis)\");\n    } else {\n        lfs_probe_log(\"CFG changed by LFS_UNLOCK evaluation (possible side-effect)\");\n    }\n\n    lfs_probe_log(\"EXIT lfs_dir_close returning %d\", err);\n    return err;\n}\n"
}