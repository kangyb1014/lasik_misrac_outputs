{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read (called by lfs_dir_getslice), the value parameters 'off' and 'size' are modified inside the loop (off += diff; size -= diff;). Modifying function parameters (even scalars passed by value) violates MISRA C 2023 Rule 17.8. (Note: modifying the local pointer 'data' derived from 'buffer' is acceptable, and modifying objects pointed to by pointer parameters is allowed, but changing the parameter variables 'off' and 'size' is a violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getslice code that contains useful probe functions that print useful logs to a file \"/tmp/logs/297.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getslice as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getslice:\n```c\nstatic lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {\n    lfs_off_t off = dir->off;\n    lfs_tag_t ntag = dir->etag;\n    lfs_stag_t gdiff = 0;\n\n    // synthetic moves\n    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&\n            lfs_tag_id(gmask) != 0) {\n        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {\n            return LFS_ERR_NOENT;\n        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {\n            gdiff -= LFS_MKTAG(0, 1, 0);\n        }\n    }\n\n    // iterate over dir block backwards (for faster lookups)\n    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {\n        off -= lfs_tag_dsize(ntag);\n        lfs_tag_t tag = ntag;\n        int err = lfs_bd_read(lfs,\n                NULL, &lfs->rcache, sizeof(ntag),\n                dir->pair[0], off, &ntag, sizeof(ntag));\n        if (err) {\n            return err;\n        }\n\n        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;\n\n        if (lfs_tag_id(gmask) != 0 &&\n                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {\n            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {\n                // found where we were created\n                return LFS_ERR_NOENT;\n            }\n\n            // move around splices\n            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n        }\n\n        if ((gmask & tag) == (gmask & (gtag - gdiff))) {\n            if (lfs_tag_isdelete(tag)) {\n                return LFS_ERR_NOENT;\n            }\n\n            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, diff,\n                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);\n            if (err) {\n                return err;\n            }\n\n            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);\n\n            return tag + gdiff;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getslice code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/297.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/297.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {\n    lfs_off_t off = dir->off;\n    lfs_tag_t ntag = dir->etag;\n    lfs_stag_t gdiff = 0;\n\n    /* Log entry state */\n    lfs_log_probe(\"ENTER lfs_dir_getslice: dir->off=%lld dir->etag=0x%08x gmask=0x%08x gtag=0x%08x goff=%lld gbuffer=%p gsize=%llu\",\n        (long long)dir->off, (unsigned)dir->etag, (unsigned)gmask, (unsigned)gtag,\n        (long long)goff, (void*)gbuffer, (unsigned long long)gsize);\n\n    /* synthetic moves */\n    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&\n            lfs_tag_id(gmask) != 0) {\n        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {\n            lfs_log_probe(\"SYNTHETIC: gdisk.tag id == gtag id -> return LFS_ERR_NOENT\");\n            return LFS_ERR_NOENT;\n        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {\n            gdiff -= LFS_MKTAG(0, 1, 0);\n            lfs_log_probe(\"SYNTHETIC: adjusted gdiff -> %lld\", (long long)gdiff);\n        }\n    }\n\n    /* iterate over dir block backwards (for faster lookups) */\n    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {\n        /* Log loop head */\n        lfs_log_probe(\"LOOP_HEAD: off=%lld ntag=0x%08x gdiff=%lld\",\n            (long long)off, (unsigned)ntag, (long long)gdiff);\n\n        off -= lfs_tag_dsize(ntag);\n        lfs_tag_t tag = ntag;\n\n        lfs_log_probe(\"READ_TAG: about to read tag at pair[0]=%llu off=%lld size=%zu\",\n            (unsigned long long)dir->pair[0], (long long)off, sizeof(ntag));\n\n        int err = lfs_bd_read(lfs,\n                NULL, &lfs->rcache, sizeof(ntag),\n                dir->pair[0], off, &ntag, sizeof(ntag));\n        if (err) {\n            lfs_log_probe(\"READ_TAG_ERR: err=%d -> returning err\", err);\n            return err;\n        }\n\n        lfs_log_probe(\"READ_TAG_OK: raw_ntag=0x%08x\", (unsigned)ntag);\n\n        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;\n\n        lfs_log_probe(\"DECODE_TAG: tag=0x%08x decoded_ntag=0x%08x\",\n            (unsigned)tag, (unsigned)ntag);\n\n        if (lfs_tag_id(gmask) != 0 &&\n                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {\n            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {\n                /* found where we were created */\n                lfs_log_probe(\"FOUND_CREATE: tag indicates creation -> return LFS_ERR_NOENT\");\n                return LFS_ERR_NOENT;\n            }\n\n            /* move around splices */\n            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n            lfs_log_probe(\"SPLICE: tag=0x%08x splice=%u updated gdiff=%lld\",\n                (unsigned)tag, (unsigned)lfs_tag_splice(tag), (long long)gdiff);\n        }\n\n        if ((gmask & tag) == (gmask & (gtag - gdiff))) {\n            if (lfs_tag_isdelete(tag)) {\n                lfs_log_probe(\"MATCH_DELETE: tag indicates delete -> return LFS_ERR_NOENT\");\n                return LFS_ERR_NOENT;\n            }\n\n            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);\n\n            lfs_log_probe(\"MATCH_READ: tag=0x%08x tag_size=%llu gsize=%llu diff=%llu goff=%lld off+sizeof(tag)+goff=%lld gbuffer=%p\",\n                (unsigned)tag,\n                (unsigned long long)lfs_tag_size(tag), (unsigned long long)gsize,\n                (unsigned long long)diff, (long long)goff,\n                (long long)(off + sizeof(tag) + goff), (void*)gbuffer);\n\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, diff,\n                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);\n            if (err) {\n                lfs_log_probe(\"MATCH_READ_ERR: err=%d -> returning err\", err);\n                return err;\n            }\n\n            lfs_log_probe(\"MATCH_READ_OK: read diff=%llu bytes into gbuffer=%p\", (unsigned long long)diff, (void*)gbuffer);\n\n            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);\n\n            lfs_log_probe(\"RETURN_SUCCESS: returning tag+gdiff=0x%08x (tag=0x%08x gdiff=%lld)\",\n                (unsigned)(tag + gdiff), (unsigned)tag, (long long)gdiff);\n\n            return tag + gdiff;\n        }\n    }\n\n    lfs_log_probe(\"LOOP_END: no matching tag found -> return LFS_ERR_NOENT\");\n    return LFS_ERR_NOENT;\n}\n"
}