{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read, the value parameters 'off' and 'size' are modified (e.g. 'off += diff;' and 'size -= diff;') inside the function. These are scalar function parameters passed by value and are being assigned to after entry, which violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getslice code that contains useful probe functions that print useful logs to a file \"/tmp/logs/297.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getslice as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getslice:\n```c\nstatic lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {\n    lfs_off_t off = dir->off;\n    lfs_tag_t ntag = dir->etag;\n    lfs_stag_t gdiff = 0;\n\n    // synthetic moves\n    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&\n            lfs_tag_id(gmask) != 0) {\n        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {\n            return LFS_ERR_NOENT;\n        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {\n            gdiff -= LFS_MKTAG(0, 1, 0);\n        }\n    }\n\n    // iterate over dir block backwards (for faster lookups)\n    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {\n        off -= lfs_tag_dsize(ntag);\n        lfs_tag_t tag = ntag;\n        int err = lfs_bd_read(lfs,\n                NULL, &lfs->rcache, sizeof(ntag),\n                dir->pair[0], off, &ntag, sizeof(ntag));\n        if (err) {\n            return err;\n        }\n\n        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;\n\n        if (lfs_tag_id(gmask) != 0 &&\n                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {\n            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {\n                // found where we were created\n                return LFS_ERR_NOENT;\n            }\n\n            // move around splices\n            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n        }\n\n        if ((gmask & tag) == (gmask & (gtag - gdiff))) {\n            if (lfs_tag_isdelete(tag)) {\n                return LFS_ERR_NOENT;\n            }\n\n            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, diff,\n                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);\n            if (err) {\n                return err;\n            }\n\n            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);\n\n            return tag + gdiff;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getslice code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/297.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {\n    lfs_off_t off = dir->off;\n    lfs_tag_t ntag = dir->etag;\n    lfs_stag_t gdiff = 0;\n\n    /* Log entry state */\n    lfs_log_probe(\"lfs_dir_getslice ENTRY: dir->off=%lld, dir->etag=0x%llx, gmask=0x%llx, gtag=0x%llx, goff=%lld, gbuffer=%p, gsize=%lld\", (long long)off, (unsigned long long)ntag, (unsigned long long)gmask, (unsigned long long)gtag, (long long)goff, gbuffer, (long long)gsize);\n\n    // synthetic moves\n    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&\n            lfs_tag_id(gmask) != 0) {\n        lfs_log_probe(\"synthetic moves: gdisk.tag=0x%llx, gmask id=%lld\", (unsigned long long)lfs->gdisk.tag, (long long)lfs_tag_id(gmask));\n        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {\n            lfs_log_probe(\"synthetic moves: early return LFS_ERR_NOENT (gdisk.tag id == gtag id)\");\n            return LFS_ERR_NOENT;\n        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {\n            gdiff -= LFS_MKTAG(0, 1, 0);\n            lfs_log_probe(\"synthetic moves: adjusted gdiff=%lld\", (long long)gdiff);\n        }\n    }\n\n    // iterate over dir block backwards (for faster lookups)\n    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {\n        lfs_log_probe(\"while: top: off=%lld, ntag=0x%llx, gdiff=0x%llx\", (long long)off, (unsigned long long)ntag, (unsigned long long)gdiff);\n\n        off -= lfs_tag_dsize(ntag);\n        lfs_tag_t tag = ntag;\n\n        lfs_log_probe(\"about to read tag: calling lfs_bd_read(size=%lld, pair0=%lld, off=%lld)\", (long long)sizeof(ntag), (long long)dir->pair[0], (long long)off);\n        int err = lfs_bd_read(lfs,\n                NULL, &lfs->rcache, sizeof(ntag),\n                dir->pair[0], off, &ntag, sizeof(ntag));\n        lfs_log_probe(\"lfs_bd_read returned err=%d; raw ntag=0x%llx\", err, (unsigned long long)ntag);\n        if (err) {\n            lfs_log_probe(\"read error: returning err=%d\", err);\n            return err;\n        }\n\n        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;\n        lfs_log_probe(\"decoded ntag=0x%llx after xor with tag=0x%llx\", (unsigned long long)ntag, (unsigned long long)tag);\n\n        if (lfs_tag_id(gmask) != 0 &&\n                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {\n            lfs_log_probe(\"splice handling: tag=0x%llx, tag id=%lld <= (gtag-gdiff) id=%lld\", (unsigned long long)tag, (long long)lfs_tag_id(tag), (long long)lfs_tag_id(gtag - gdiff));\n            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {\n                /* found where we were created */\n                lfs_log_probe(\"splice: found creation tag, returning LFS_ERR_NOENT\");\n                return LFS_ERR_NOENT;\n            }\n\n            /* move around splices */\n            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n            lfs_log_probe(\"splice: updated gdiff=0x%llx\", (unsigned long long)gdiff);\n        }\n\n        if ((gmask & tag) == (gmask & (gtag - gdiff))) {\n            lfs_log_probe(\"matching tag condition met: tag=0x%llx, gtag-gdiff=0x%llx\", (unsigned long long)tag, (unsigned long long)(gtag - gdiff));\n            if (lfs_tag_isdelete(tag)) {\n                lfs_log_probe(\"tag is delete: returning LFS_ERR_NOENT\");\n                return LFS_ERR_NOENT;\n            }\n\n            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);\n            lfs_log_probe(\"about to read data: diff=%lld, read_offset=%lld (off+sizeof(tag)+goff=%lld), gsize=%lld, goff=%lld, gbuffer=%p\", (long long)diff, (long long)(off + sizeof(tag) + goff), (long long)(off + sizeof(tag) + goff), (long long)gsize, (long long)goff, gbuffer);\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, diff,\n                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);\n            lfs_log_probe(\"lfs_bd_read (data) returned err=%d\", err);\n            if (err) {\n                lfs_log_probe(\"data read error: returning err=%d\", err);\n                return err;\n            }\n\n            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);\n            lfs_log_probe(\"memset zeroed from offset %lld length %lld\", (long long)diff, (long long)(gsize - diff));\n\n            lfs_log_probe(\"returning tag+gdiff = 0x%llx\", (unsigned long long)(tag + gdiff));\n            return tag + gdiff;\n        }\n    }\n\n    lfs_log_probe(\"end of while: returning LFS_ERR_NOENT\");\n    return LFS_ERR_NOENT;\n}\n"
}