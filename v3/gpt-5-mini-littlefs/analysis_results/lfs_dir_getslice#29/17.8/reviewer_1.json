{
  "user_message": "An agent A claimed that the following lfs_dir_getslice code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_dir_getslice.\n```c\nstatic lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {\n    lfs_off_t off = dir->off;\n    lfs_tag_t ntag = dir->etag;\n    lfs_stag_t gdiff = 0;\n\n    // synthetic moves\n    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&\n            lfs_tag_id(gmask) != 0) {\n        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {\n            return LFS_ERR_NOENT;\n        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {\n            gdiff -= LFS_MKTAG(0, 1, 0);\n        }\n    }\n\n    // iterate over dir block backwards (for faster lookups)\n    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {\n        off -= lfs_tag_dsize(ntag);\n        lfs_tag_t tag = ntag;\n        int err = lfs_bd_read(lfs,\n                NULL, &lfs->rcache, sizeof(ntag),\n                dir->pair[0], off, &ntag, sizeof(ntag));\n        if (err) {\n            return err;\n        }\n\n        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;\n\n        if (lfs_tag_id(gmask) != 0 &&\n                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {\n            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {\n                // found where we were created\n                return LFS_ERR_NOENT;\n            }\n\n            // move around splices\n            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n        }\n\n        if ((gmask & tag) == (gmask & (gtag - gdiff))) {\n            if (lfs_tag_isdelete(tag)) {\n                return LFS_ERR_NOENT;\n            }\n\n            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, diff,\n                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);\n            if (err) {\n                return err;\n            }\n\n            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);\n\n            return tag + gdiff;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn lfs_bd_read (called by lfs_dir_getslice), the value parameters 'off' and 'size' are modified inside the loop (off += diff; size -= diff;). Modifying function parameters (even scalars passed by value) violates MISRA C 2023 Rule 17.8. (Note: modifying the local pointer 'data' derived from 'buffer' is acceptable, and modifying objects pointed to by pointer parameters is allowed, but changing the parameter variables 'off' and 'size' is a violation.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER lfs_dir_getslice: dir->off=4 dir->etag=0xffffffff gmask=0x7ff00000 gtag=0x7ff0000c goff=0 gbuffer=0x7ffebe48b55c gsize=12\nLOOP_END: no matching tag found -> return LFS_ERR_NOENT\nENTER lfs_dir_getslice: dir->off=64 dir->etag=0x500ffc04 gmask=0x7ff00000 gtag=0x7ff0000c goff=0 gbuffer=0x7ffebe48b55c gsize=12\nLOOP_HEAD: off=64 ntag=0x500ffc04 gdiff=0\nREAD_TAG: about to read tag at pair[0]=0 off=56 size=4\nREAD_TAG_OK: raw_ntag=0x0c00f00f\nDECODE_TAG: tag=0x500ffc04 decoded_ntag=0x5ffffc08\nLOOP_HEAD: off=56 ntag=0x5ffffc08 gdiff=0\nREAD_TAG: about to read tag at pair[0]=0 off=44 size=4\nREAD_TAG_OK: raw_ntag=0x10fcef7f\nDECODE_TAG: tag=0x5ffffc08 decoded_ntag=0x20100018\nLOOP_HEAD: off=44 ntag=0x20100018 gdiff=0\nREAD_TAG: about to read tag at pair[0]=0 off=16 size=4\nREAD_TAG_OK: raw_ntag=0x1000e02f\nDECODE_TAG: tag=0x20100018 decoded_ntag=0x0ff00008\nLOOP_HEAD: off=16 ntag=0x0ff00008 gdiff=0\nREAD_TAG: about to read tag at pair[0]=0 off=4 size=4\nREAD_TAG_OK: raw_ntag=0xf7ff0ff0\nDECODE_TAG: tag=0x0ff00008 decoded_ntag=0x7fffffff\nLOOP_END: no matching tag found -> return LFS_ERR_NOENT\nENTER lfs_dir_getslice: dir->off=64 dir->etag=0x500ffc04 gmask=0x7ffffc00 gtag=0x20100018 goff=0 gbuffer=0x7ffebe48b890 gsize=24\nLOOP_HEAD: off=64 ntag=0x500ffc04 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=56 size=4\nREAD_TAG_OK: raw_ntag=0x0c00f00f\nDECODE_TAG: tag=0x500ffc04 decoded_ntag=0x5ffffc08\nLOOP_HEAD: off=56 ntag=0x5ffffc08 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=44 size=4\nREAD_TAG_OK: raw_ntag=0x10fcef7f\nDECODE_TAG: tag=0x5ffffc08 decoded_ntag=0x20100018\nLOOP_HEAD: off=44 ntag=0x20100018 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=16 size=4\nREAD_TAG_OK: raw_ntag=0x1000e02f\nDECODE_TAG: tag=0x20100018 decoded_ntag=0x0ff00008\nMATCH_READ: tag=0x20100018 tag_size=24 gsize=24 diff=24 goff=0 off+sizeof(tag)+goff=20 gbuffer=0x7ffebe48b890\nMATCH_READ_OK: read diff=24 bytes into gbuffer=0x7ffebe48b890\nRETURN_SUCCESS: returning tag+gdiff=0x20100018 (tag=0x20100018 gdiff=0)\nENTER lfs_dir_getslice: dir->off=64 dir->etag=0x500ffc04 gmask=0x7ff00000 gtag=0x7ff0000c goff=0 gbuffer=0x7ffebe48b82c gsize=12\nLOOP_HEAD: off=64 ntag=0x500ffc04 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=56 size=4\nREAD_TAG_OK: raw_ntag=0x0c00f00f\nDECODE_TAG: tag=0x500ffc04 decoded_ntag=0x5ffffc08\nLOOP_HEAD: off=56 ntag=0x5ffffc08 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=44 size=4\nREAD_TAG_OK: raw_ntag=0x10fcef7f\nDECODE_TAG: tag=0x5ffffc08 decoded_ntag=0x20100018\nLOOP_HEAD: off=44 ntag=0x20100018 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=16 size=4\nREAD_TAG_OK: raw_ntag=0x1000e02f\nDECODE_TAG: tag=0x20100018 decoded_ntag=0x0ff00008\nLOOP_HEAD: off=16 ntag=0x0ff00008 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=4 size=4\nREAD_TAG_OK: raw_ntag=0xf7ff0ff0\nDECODE_TAG: tag=0x0ff00008 decoded_ntag=0x7fffffff\nLOOP_END: no matching tag found -> return LFS_ERR_NOENT\nENTER lfs_dir_getslice: dir->off=64 dir->etag=0x500ffc04 gmask=0x700ffc00 gtag=0x20000008 goff=0 gbuffer=0x7ffebe48b720 gsize=8\nLOOP_HEAD: off=64 ntag=0x500ffc04 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=56 size=4\nREAD_TAG_OK: raw_ntag=0x0c00f00f\nDECODE_TAG: tag=0x500ffc04 decoded_ntag=0x5ffffc08\nLOOP_HEAD: off=56 ntag=0x5ffffc08 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=44 size=4\nREAD_TAG_OK: raw_ntag=0x10fcef7f\nDECODE_TAG: tag=0x5ffffc08 decoded_ntag=0x20100018\nLOOP_HEAD: off=44 ntag=0x20100018 gdiff=0\nREAD_TAG: about to read tag at pair[0]=1 off=16 size=4\nREAD_TAG_OK: raw_ntag=0x1000e02f\nDECODE_TAG: tag=0x20100018 decoded_ntag=0x0ff00008\nMATCH_READ: tag=0x20100018 tag_size=24 gsize=8 diff=8 goff=0 off+sizeof(tag)+goff=20 gbuffer=0x7ffebe48b720\nMATCH_READ_OK: read diff=8 bytes into gbuffer=0x7ffebe48b720\nRETURN_SUCCESS: returning tag+gdiff=0x20100018 (tag=0x20100018 gdiff=0)\nENTER lfs_dir_getslice: dir->off=4 dir->etag=0xffffffff gmask=0x7ff00000 gtag=0x7ff0000c goff=0 gbuffer=0x7ffebe48b4ec gsize=12\nLOOP_END: no matching tag found -> return LFS_ERR_NOENT\nENTER lfs_dir_getslice: dir->off=128 dir->etag=0x500ffc07 gmask=0x7ffffc00 gtag=0x20\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_getslice:\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\nstatic inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,\n        const lfs_block_t *pair) {\n    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;\n}\n...\n#define LFS_MKTAG(type, id, size) (((lfs_tag_t)(type)<<20)|((lfs_tag_t)(id)<<10)|(lfs_tag_t)(size))\n...\nstatic inline uint16_t lfs_tag_id(lfs_tag_t tag) {\n    return (tag & 0x000ffc00) >> 10;\n}\n...\nstatic inline uint16_t lfs_tag_type1(lfs_tag_t tag) {\n    return (tag & 0x70000000) >> 20;\n}\n...\nstatic inline int8_t lfs_tag_splice(lfs_tag_t tag) {\n    return (int8_t)lfs_tag_chunk(tag);\n}\n...\nstatic inline bool lfs_tag_isdelete(lfs_tag_t tag) {\n    return ((int32_t)(tag << 22) >> 22) == -1;\n}\n...\nstatic inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {\n    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));\n}\n...\nstatic inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {\n    return tag & 0x000003ff;\n}\n...\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n...\ntypedef struct lfs_mdir {\n    lfs_block_t pair[2];\n    uint32_t rev;\n    lfs_off_t off;\n    uint32_t etag;\n    uint16_t count;\n    bool erased;\n    bool split;\n    lfs_block_t tail[2];\n} lfs_mdir_t\n...\ntypedef struct lfs_gstate {\n    uint32_t tag;\n    lfs_block_t pair[2];\n} lfs_gstate_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s claim is not correct for the reported function. Rule 17.8 forbids modifying a function\u2019s own parameter variables. In the presented code, lfs_dir_getslice does not modify any of its parameter variables (it only reads them and creates local variables such as off, ntag, gdiff). The modifications Agent A points to (off += diff; size -= diff;) occur inside lfs_bd_read \u2014 i.e. the callee modifies its own parameters. That means the potential Rule 17.8 violation (if any) is in lfs_bd_read, not in lfs_dir_getslice. Therefore the report that lfs_dir_getslice violates MISRA C:2023 Rule 17.8 is incorrect. (As an implementation note: to comply with Rule 17.8, lfs_bd_read should avoid modifying its parameter variables directly \u2014 e.g. copy off and size into local variables and update those.)"
}