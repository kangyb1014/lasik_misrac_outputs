{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nInside the shown fragment the outer if requires lfs_tag_type1(tag) == LFS_TYPE_SPLICE (i.e. tag has type SPLICE). The nested if then compares tag == (LFS_MKTAG(LFS_TYPE_CREATE,0,0) | (LFS_MKTAG(0,0x3ff,0) & (gtag - gdiff))). That constructed value has its type bits set to LFS_TYPE_CREATE. Assuming LFS_TYPE_CREATE and LFS_TYPE_SPLICE are distinct type constants (as intended), a tag whose type is SPLICE can never equal a tag whose type is CREATE, so the nested equality (and its return) is unreachable. Thus the code contains unreachable code and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getslice code that contains useful probe functions that print useful logs to a file \"/tmp/logs/291.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getslice as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getslice:\n```c\nstatic lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {\n    lfs_off_t off = dir->off;\n    lfs_tag_t ntag = dir->etag;\n    lfs_stag_t gdiff = 0;\n\n    // synthetic moves\n    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&\n            lfs_tag_id(gmask) != 0) {\n        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {\n            return LFS_ERR_NOENT;\n        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {\n            gdiff -= LFS_MKTAG(0, 1, 0);\n        }\n    }\n\n    // iterate over dir block backwards (for faster lookups)\n    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {\n        off -= lfs_tag_dsize(ntag);\n        lfs_tag_t tag = ntag;\n        int err = lfs_bd_read(lfs,\n                NULL, &lfs->rcache, sizeof(ntag),\n                dir->pair[0], off, &ntag, sizeof(ntag));\n        if (err) {\n            return err;\n        }\n\n        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;\n\n        if (lfs_tag_id(gmask) != 0 &&\n                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {\n            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {\n                // found where we were created\n                return LFS_ERR_NOENT;\n            }\n\n            // move around splices\n            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n        }\n\n        if ((gmask & tag) == (gmask & (gtag - gdiff))) {\n            if (lfs_tag_isdelete(tag)) {\n                return LFS_ERR_NOENT;\n            }\n\n            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, diff,\n                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);\n            if (err) {\n                return err;\n            }\n\n            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);\n\n            return tag + gdiff;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getslice code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Helper logging function to append probe information to /tmp/logs/291.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/291.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,\n        lfs_tag_t gmask, lfs_tag_t gtag,\n        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {\n    lfs_off_t off = dir->off;\n    lfs_tag_t ntag = dir->etag;\n    lfs_stag_t gdiff = 0;\n\n    /* Log initial state */\n    lfs_probe_log(\"ENTER lfs_dir_getslice: off=%lld, dir->etag=0x%08x, gmask=0x%08x, gtag=0x%08x, gdiff=%lld\",\n            (long long)off, (unsigned)ntag, (unsigned)gmask, (unsigned)gtag, (long long)gdiff);\n\n    /* synthetic moves */\n    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&\n            lfs_tag_id(gmask) != 0) {\n        lfs_probe_log(\"synthetic moves: movehere=true, lfs_tag_id(gmask)=%u\", (unsigned)lfs_tag_id(gmask));\n        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {\n            lfs_probe_log(\"synthetic move: gdisk.tag id == gtag id -> return LFS_ERR_NOENT (gdisk.tag=0x%08x, gtag=0x%08x)\",\n                    (unsigned)lfs->gdisk.tag, (unsigned)gtag);\n            return LFS_ERR_NOENT;\n        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {\n            lfs_probe_log(\"synthetic move: gdisk.tag id < gtag id -> decrement gdiff (gdisk.tag id=%u, gtag id=%u)\",\n                    (unsigned)lfs_tag_id(lfs->gdisk.tag), (unsigned)lfs_tag_id(gtag));\n            gdiff -= LFS_MKTAG(0, 1, 0);\n            lfs_probe_log(\"gdiff updated to %lld\", (long long)gdiff);\n        } else {\n            lfs_probe_log(\"synthetic move: gdisk.tag id > gtag id -> no change (gdisk.tag id=%u, gtag id=%u)\",\n                    (unsigned)lfs_tag_id(lfs->gdisk.tag), (unsigned)lfs_tag_id(gtag));\n        }\n    } else {\n        lfs_probe_log(\"synthetic moves: movehere=false or lfs_tag_id(gmask)==0 (hasmove=%d, lfs_tag_id(gmask)=%u)\",\n                (int)lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair), (unsigned)lfs_tag_id(gmask));\n    }\n\n    /* iterate over dir block backwards (for faster lookups) */\n    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {\n        off -= lfs_tag_dsize(ntag);\n        lfs_tag_t tag = ntag;\n\n        lfs_probe_log(\"loop iter: off=%lld, tag(before read)=0x%08x, ntag(before read)=0x%08x\",\n                (long long)off, (unsigned)tag, (unsigned)ntag);\n\n        int err = lfs_bd_read(lfs,\n                NULL, &lfs->rcache, sizeof(ntag),\n                dir->pair[0], off, &ntag, sizeof(ntag));\n        if (err) {\n            lfs_probe_log(\"lfs_bd_read returned err=%d at off=%lld\", err, (long long)off);\n            return err;\n        }\n\n        lfs_tag_t raw_ntag = ntag;\n        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;\n\n        lfs_probe_log(\"read raw_ntag=0x%08x, computed ntag=0x%08x\", (unsigned)raw_ntag, (unsigned)ntag);\n\n        if (lfs_tag_id(gmask) != 0 &&\n                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&\n                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {\n\n            /* Log detailed state for the splice branch and the nested equality check */\n            lfs_probe_log(\"splice-branch: gmask_id=%u, tag_type1=%d (LFS_TYPE_SPLICE=%d), tag_id=%u, gtag-gdiff id=%u, gdiff=%lld\",\n                    (unsigned)lfs_tag_id(gmask), (int)lfs_tag_type1(tag), (int)LFS_TYPE_SPLICE,\n                    (unsigned)lfs_tag_id(tag), (unsigned)lfs_tag_id(gtag - gdiff), (long long)gdiff);\n\n            lfs_tag_t constructed = (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |\n                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)));\n\n            lfs_probe_log(\"splice-branch: comparing tag=0x%08x to constructed=0x%08x (constructed type LFS_TYPE_CREATE=%d)\",\n                    (unsigned)tag, (unsigned)constructed, (int)LFS_TYPE_CREATE);\n\n            if (tag == constructed) {\n                /* found where we were created */\n                lfs_probe_log(\"splice-branch: equality matched -> return LFS_ERR_NOENT (tag=0x%08x, constructed=0x%08x)\",\n                        (unsigned)tag, (unsigned)constructed);\n                return LFS_ERR_NOENT;\n            }\n\n            /* move around splices */\n            lfs_probe_log(\"splice-branch: moving around splice, splice_count=%u (before gdiff=%lld)\",\n                    (unsigned)lfs_tag_splice(tag), (long long)gdiff);\n            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);\n            lfs_probe_log(\"splice-branch: gdiff updated to %lld\", (long long)gdiff);\n        }\n\n        if ((gmask & tag) == (gmask & (gtag - gdiff))) {\n            lfs_probe_log(\"mask-match: (gmask & tag)=0x%08x matches (gmask & (gtag-gdiff))=0x%08x\",\n                    (unsigned)(gmask & tag), (unsigned)(gmask & (gtag - gdiff)));\n\n            if (lfs_tag_isdelete(tag)) {\n                lfs_probe_log(\"mask-match: tag is delete -> return LFS_ERR_NOENT (tag=0x%08x)\", (unsigned)tag);\n                return LFS_ERR_NOENT;\n            }\n\n            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);\n            lfs_probe_log(\"mask-match: about to read data diff=%zu, goff=%lld, off+sizeof(tag)+goff=%lld\",\n                    (size_t)diff, (long long)goff, (long long)(off + sizeof(tag) + goff));\n\n            err = lfs_bd_read(lfs,\n                    NULL, &lfs->rcache, diff,\n                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);\n            if (err) {\n                lfs_probe_log(\"data read err=%d\", err);\n                return err;\n            }\n\n            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);\n\n            lfs_probe_log(\"returning tag+gdiff: tag=0x%08x, gdiff=%lld, result=0x%08x\",\n                    (unsigned)tag, (long long)gdiff, (unsigned)(tag + gdiff));\n\n            return tag + gdiff;\n        }\n    }\n\n    lfs_probe_log(\"end of loop: returning LFS_ERR_NOENT\");\n    return LFS_ERR_NOENT;\n}\n"
}