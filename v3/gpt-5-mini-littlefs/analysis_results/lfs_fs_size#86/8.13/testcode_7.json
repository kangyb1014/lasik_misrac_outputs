{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe cast (lfs_file_t*)lfs->mlist strips a const qualifier if lfs->mlist is declared with const (for example: 'const lfs_file_t *mlist' or 'const void *mlist'). That yields a non-const pointer 'f' into an object that was originally const, violating MISRA C 2023 Rule 8.13. Fixes: avoid casting away const and use 'const lfs_file_t *f = (const lfs_file_t*)lfs->mlist;' or make mlist non-const if mutation is intended.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logger that appends control-flow and state information to /tmp/logs/863.txt.\n   This preserves const-correctness by printing pointer values as integers (uintptr_t)\n   rather than casting away const qualifiers to produce void* for %p. */\nstatic void lfs_log_probe(const char *stage, lfs_t *lfs, int err, lfs_ssize_t res) {\n    FILE *f = fopen(\"/tmp/logs/863.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* Print basic stage, lfs pointer, lock error and result. Use uintptr_t to avoid\n       casting away const qualifiers on any pointer fields (for example, mlist).\n       This produces reproducible evidence of the control flow and pointer values\n       without changing program semantics. */\n    (void)fprintf(f, \"[lfs_fs_size] stage=%s lfs=0x%\" PRIxPTR \" err=%d res=%\" PRId32 \"\\n\",\n                  stage,\n                  (uintptr_t)(const void *)lfs,\n                  err,\n                  res);\n\n    /* Log known members used elsewhere in the codebase. These members are accessed\n       in the original code (lfs->cfg) and are relevant to the reported violation\n       (lfs->mlist). We print their addresses as integer values to avoid casting\n       away const qualifiers. If a member does not exist in the translation unit,\n       compilation will fail \u2014 this follows the original code's assumptions. */\n    (void)fprintf(f, \"  cfg=0x%\" PRIxPTR \"\\n\",\n                  (uintptr_t)(const void *)lfs->cfg);\n\n    /* mlist may be const-qualified in some builds; do not cast away const. Print\n       its address as an integer so that other agents can correlate it to the\n       location where a cast might later strip const. */\n    (void)fprintf(f, \"  mlist=0x%\" PRIxPTR \" (may be const-qualified)\\n\",\n                  (uintptr_t)(const void *)lfs->mlist);\n\n    (void)fclose(f);\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log lock attempt and result so agents can see whether early exit happened. */\n    lfs_log_probe(\"after-lock\", lfs, err, 0);\n\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    /* Log right before invoking the internal size computation. This helps\n       correlate the lfs pointer and its mlist field with any casts performed\n       later in lfs_fs_size_. */\n    lfs_log_probe(\"before-size_\", lfs, err, 0);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    /* Log the result of the internal computation and the state observed after it. */\n    lfs_log_probe(\"after-size_\", lfs, 0, res);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}