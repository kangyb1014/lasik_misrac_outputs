{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_fs_size, LFS_LOCK is defined as ((void)cfg, 0), so int err = LFS_LOCK(lfs->cfg); always yields 0. Therefore the conditional if (err) { return err; } can never be true and the return inside that block is unreachable \u2014 violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/861.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/*\n * Probe logger: append human-readable traces to /tmp/logs/861.txt\n * This helper is intentionally small and preserves the original logic\n * of lfs_fs_size; it only observes state and control flow.\n */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/861.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    /* Preserve original call and semantics */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record the lock return value and pointers involved. */\n    lfs_probe_log(\"lfs_fs_size: called with lfs=%p, cfg=%p, LFS_LOCK returned=%d\",\n                  (void*)lfs, (void*)lfs->cfg, err);\n\n    if (err) {\n        /* Probe: record that the early-return path was taken. */\n        lfs_probe_log(\"lfs_fs_size: early return due to non-zero err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n    lfs_probe_log(\"lfs_fs_size: lock succeeded, invoking lfs_fs_size_ with lfs=%p\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    lfs_probe_log(\"lfs_fs_size: lfs_fs_size_ returned=%\" PRId32 \", about to unlock cfg=%p\",\n                  res, (void*)lfs->cfg);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_fs_size: unlocked cfg=%p, returning=%\" PRId32, (void*)lfs->cfg, res);\n\n    return res;\n}\n"
}