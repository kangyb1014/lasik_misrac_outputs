{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn this build configuration LFS_UNLOCK is defined as #define LFS_UNLOCK(cfg) ((void)cfg), so the call LFS_UNLOCK(lfs->cfg); compiles to a no-op cast-to-void expression with no runtime effect. Removing that statement would not change program behaviour, so it constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/862.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Probe logging helpers. Appends human-readable traces to /tmp/logs/862.txt\n * These functions are intentionally lightweight and preserve the original\n * control flow and return values of lfs_fs_size.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/862.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* Modified lfs_fs_size with probes inserted to record control flow and state\n * information relevant to observing whether LFS_UNLOCK is a no-op in a given\n * build configuration. The original logic is preserved.\n */\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    probe_log(\"ENTER lfs_fs_size: lfs=%p\", (void*)lfs);\n\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"LFS_LOCK returned: %d\", err);\n    if (err) {\n        probe_log(\"EARLY RETURN due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n    probe_log(\"Result from lfs_fs_size_: %\" PRId32, res);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n\n    /* Capture state before and after the unlock call so consumers can\n     * observe whether the unlock has any observable runtime effect.\n     * If LFS_UNLOCK is defined as a no-op (e.g. ((void)cfg)), the logs\n     * will show the call site but no state change attributable to it.\n     */\n    probe_log(\"Before LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"After LFS_UNLOCK (called): cfg=%p\", (void*)lfs->cfg);\n\n    probe_log(\"EXIT lfs_fs_size: returning %\" PRId32, res);\n    return res;\n}\n"
}