{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg). In lfs_fs_size this expands to ((void)lfs->cfg); which merely evaluates and discards the value and has no effect on program behaviour. Removing this call (or the cast) would not change program behaviour in the shown code, so the operation is dead code and thus violates MISRA C 2023 Rule 2.2. (Note: if the cfg expression had side-effects, the cast would not be dead \u2014 but in the provided usage it does not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/862.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger that appends control-flow/state information to /tmp/logs/862.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/862.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Modified lfs_fs_size with probes. Original logic is preserved as closely as possible. */\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and result of the lock call and the cfg pointer value. */\n    probe_log(\"lfs_fs_size: entry lfs=%p, cfg=%p, LFS_LOCK_err=%d\",\n              (void *)lfs, (void *)lfs->cfg, err);\n\n    if (err) {\n        probe_log(\"lfs_fs_size: early return due to lock error=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n\n    /*\n     * Capture the cfg expression once into a local variable and use that\n     * value both for logging and for the unlock call. This avoids\n     * re-evaluating the cfg expression and preserves the original\n     * behaviour while providing evidence (in the logs) that the\n     * LFS_UNLOCK(cfg) invocation only receives and discards the value.\n     */\n    void *cfg_val = (void *)lfs->cfg;\n    probe_log(\"lfs_fs_size: before LFS_UNLOCK cfg_val=%p\", cfg_val);\n\n    LFS_UNLOCK(cfg_val);\n\n    probe_log(\"lfs_fs_size: after LFS_UNLOCK cfg_val=%p\", cfg_val);\n    probe_log(\"lfs_fs_size: exit res=%\" PRId32, res);\n\n    return res;\n}\n"
}