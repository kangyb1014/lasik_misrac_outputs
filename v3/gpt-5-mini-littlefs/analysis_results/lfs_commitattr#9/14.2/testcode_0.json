{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop uses the pointer variable f as the single loop counter: initialization (lfs->mlist), condition (f) and iteration (f = f->next). However, the loop body calls functions (lfs_file_outline and lfs_file_flush) that may modify the file object pointed to by f or the linked-list (for example f->next or lfs->mlist). If any of these functions modify the loop counter object or the objects accessed in the second/third clauses (notably the next pointer), the for-loop would violate MISRA C 2023 Rule 14.2 (the loop counter must not be modified in the loop body and the third clause must not use objects modified in the loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_commitattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/94.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_commitattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_commitattr:\n```c\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n```\n</target_code>\nPlease provide the modified lfs_commitattr code.\n",
  "test_code": "#include <stdio.h>\n\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n\n    /* Open log for appending probe information. */\n    FILE *log = fopen(\"/tmp/logs/94.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTRY lfs_commitattr: lfs=%p path=\\\"%s\\\" type=%u buffer=%p size=%llu\\n\",\n                (void *)lfs, (path != NULL) ? path : \"(null)\", (unsigned)type,\n                buffer, (unsigned long long)size);\n        fflush(log);\n    }\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (log) {\n        fprintf(log, \"AFTER lfs_dir_find: tag=%d (0x%X) path_now=\\\"%s\\\" cwd_addr=%p\\n\",\n                (int)tag, (unsigned)tag, (path != NULL) ? path : \"(null)\", (void *)&cwd);\n        fflush(log);\n    }\n\n    if (tag < 0) {\n        if (log) {\n            fprintf(log, \"EXIT lfs_commitattr: lfs_dir_find returned error %d\\n\", (int)tag);\n            fclose(log);\n        }\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (log) {\n        fprintf(log, \"derived id from tag: id=%u\\n\", (unsigned)id);\n        fflush(log);\n    }\n\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        if (log) {\n            fprintf(log, \"id was 0x3FF; using root special case, set id=%u\\n\", (unsigned)id);\n            fflush(log);\n        }\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (log) {\n            fprintf(log, \"AFTER lfs_dir_fetch: err=%d cwd_addr=%p\\n\", err, (void *)&cwd);\n            fflush(log);\n        }\n        if (err) {\n            if (log) {\n                fprintf(log, \"EXIT lfs_commitattr: lfs_dir_fetch returned error %d\\n\", err);\n                fclose(log);\n            }\n            return err;\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"BEFORE lfs_dir_commit: id=%u type=%u size=%llu buffer=%p cwd_addr=%p\\n\",\n                (unsigned)id, (unsigned)type, (unsigned long long)size, buffer, (void *)&cwd);\n        fflush(log);\n    }\n\n    int res = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n\n    if (log) {\n        fprintf(log, \"AFTER lfs_dir_commit: res=%d\\n\", res);\n        fclose(log);\n    }\n\n    return res;\n}\n"
}