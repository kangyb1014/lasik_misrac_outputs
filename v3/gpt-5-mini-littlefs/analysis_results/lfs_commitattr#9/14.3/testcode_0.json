{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe while (true) loop at the start of the fragment has an invariant controlling expression ('true'). This controlling expression is not being used to create a deliberately infinite loop (the loop exits via break or goto when suffix processing finishes), so it does not meet the permitted exception for invariant expressions. Therefore the use of while (true) here violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_commitattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/95.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_commitattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_commitattr:\n```c\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n```\n</target_code>\nPlease provide the modified lfs_commitattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper: append a single line with current state to /tmp/logs/95.txt */\nstatic void lfs_commitattr_probe(const char *stage, void *lfs_ptr, const char *path,\n        uint8_t type, unsigned long size, long tag, unsigned int id, int err, int commit_res) {\n    FILE *f = fopen(\"/tmp/logs/95.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"stage=%s lfs=%p path=%p\\\"%s\\\" type=%u size=%lu tag=%ld id=%u err=%d commit_res=%d\\n\",\n            stage, lfs_ptr, (const void*)path, (path != NULL) ? path : \"(null)\",\n            (unsigned)type, size, tag, id, err, commit_res);\n    fclose(f);\n}\n\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    /* Log entry with initial parameters */\n    lfs_commitattr_probe(\"entry\", (void*)lfs, path, type, (unsigned long)size, -1, 0, 0, 0);\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    /* Log result of lfs_dir_find */\n    lfs_commitattr_probe(\"after_dir_find\", (void*)lfs, path, type, (unsigned long)size, (long)tag, 0, 0, 0);\n\n    if (tag < 0) {\n        /* Log the early return due to error from lfs_dir_find */\n        lfs_commitattr_probe(\"return_tag_error\", (void*)lfs, path, type, (unsigned long)size, (long)tag, 0, (int)tag, 0);\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    /* Log computed id */\n    lfs_commitattr_probe(\"after_tag_id\", (void*)lfs, path, type, (unsigned long)size, (long)tag, id, 0, 0);\n\n    if (id == 0x3ff) {\n        /* special case for root */\n        lfs_commitattr_probe(\"special_root_enter\", (void*)lfs, path, type, (unsigned long)size, (long)tag, id, 0, 0);\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        /* Log result of lfs_dir_fetch */\n        lfs_commitattr_probe(\"after_dir_fetch\", (void*)lfs, path, type, (unsigned long)size, (long)tag, id, err, 0);\n        if (err) {\n            /* Log the early return due to error from lfs_dir_fetch */\n            lfs_commitattr_probe(\"return_fetch_error\", (void*)lfs, path, type, (unsigned long)size, (long)tag, id, err, 0);\n            return err;\n        }\n    }\n\n    /* Perform commit and log its result prior to returning */\n    int commit_res = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n    lfs_commitattr_probe(\"after_dir_commit\", (void*)lfs, path, type, (unsigned long)size, (long)tag, id, 0, commit_res);\n\n    return commit_res;\n}\n"
}