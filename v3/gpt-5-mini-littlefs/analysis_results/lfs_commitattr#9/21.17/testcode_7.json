{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strspn(name, \"/\") assumes 'name' points to a valid null\u2011terminated C string. lfs_dir_find obtains 'name' from the caller-supplied path pointer (passed through lfs_commitattr) without verifying termination or bounds. If the caller provides a non\u2011null\u2011terminated buffer or a pointer near the end of an allocated object, strspn may read past the object\u2019s bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_commitattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_commitattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_commitattr:\n```c\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n```\n</target_code>\nPlease provide the modified lfs_commitattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helpers: write concise runtime traces to /tmp/logs/99.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    /* Log entry and key context so callers can reproduce path-related issues. */\n    lfs_probe_log(\"[lfs_commitattr] entry: lfs=%p, path=%p, type=%u, buffer=%p, size=%llu\",\n            (void *)lfs, (const void *)path, (unsigned)type, buffer,\n            (unsigned long long)size);\n\n    lfs_mdir_t cwd;\n    lfs_probe_log(\"[lfs_commitattr] about to call lfs_dir_find with path=%p\", (const void *)path);\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    lfs_probe_log(\"[lfs_commitattr] returned from lfs_dir_find: tag=%ld\", (long)tag);\n    if (tag < 0) {\n        lfs_probe_log(\"[lfs_commitattr] early return: tag (error)=%ld\", (long)tag);\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    lfs_probe_log(\"[lfs_commitattr] computed id from tag: id=%u\", (unsigned)id);\n    if (id == 0x3ff) {\n        /* special case for root */\n        id = 0;\n        lfs_probe_log(\"[lfs_commitattr] id indicated root (0x3ff). Fetching root directory (lfs->root=%p)\", (void *)lfs->root);\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        lfs_probe_log(\"[lfs_commitattr] lfs_dir_fetch returned: err=%d\", err);\n        if (err) {\n            lfs_probe_log(\"[lfs_commitattr] returning err from lfs_dir_fetch: %d\", err);\n            return err;\n        }\n    }\n\n    lfs_probe_log(\"[lfs_commitattr] committing attrs: type=%u, id=%u, size=%llu, buffer=%p\",\n            (unsigned)type, (unsigned)id, (unsigned long long)size, buffer);\n    int res = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n    lfs_probe_log(\"[lfs_commitattr] lfs_dir_commit returned: res=%d\", res);\n    return res;\n}\n"
}