{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)lfs;' in lfs_file_tell_ is an executed no-op meant to suppress an unused-parameter warning. Removing that cast-to-void statement does not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/652.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append control-flow and state information to /tmp/logs/652.txt */\nstatic void lfs_probe_log(const char *event, void *lfs_ptr, void *file_ptr, int err, long long res) {\n    FILE *f = fopen(\"/tmp/logs/652.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"EVENT=%s lfs=%p file=%p err=%d res=%lld\\n\", event, lfs_ptr, file_ptr, err, res);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry into function with input pointers. */\n    lfs_probe_log(\"enter\", (void*)lfs, (void*)file, 0, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt. */\n    lfs_probe_log(\"after_lock\", (void*)lfs, (void*)file, err, 0);\n\n    if (err) {\n        /* Log early return due to lock failure. */\n        lfs_probe_log(\"lock_failed_return\", (void*)lfs, (void*)file, err, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log just before calling the implementation that contains the unused-parameter cast. */\n    lfs_probe_log(\"before_call_impl\", (void*)lfs, (void*)file, 0, 0);\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    /* Log after the call with the returned result to capture state and control flow. */\n    lfs_probe_log(\"after_call_impl\", (void*)lfs, (void*)file, 0, (long long)res);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log exit with final result. */\n    lfs_probe_log(\"exit\", (void*)lfs, (void*)file, 0, (long long)res);\n    return res;\n}\n"
}