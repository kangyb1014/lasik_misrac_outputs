{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0), so every call yields 0 and the cast-to-void has no effect. In lfs_file_tell this makes 'int err = LFS_LOCK(lfs->cfg);' always set err==0, so the conditional 'if (err) { return err; }' can never be taken. The executed no-op expression ((void)cfg,0) and the unreachable error-return branch constitute dead code in this build configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/652.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "static void lfs_probe_logf(const char *fmt, ...) {\n    /* Lightweight probe logger that appends to /tmp/logs/652.txt. */\n    FILE *f = fopen(\"/tmp/logs/652.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original locking call and capture its result for logging. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the fact that we called LFS_LOCK and the immediate result. */\n    lfs_probe_logf(\"lfs_file_tell: called with lfs=%p, file=%p, cfg=%p, LFS_LOCK_result=%d\",\n                    (void*)lfs, (void*)file, (void*)lfs->cfg, err);\n\n    if (err) {\n        /* Log the error-return path so callers can see if/when it is taken. */\n        lfs_probe_logf(\"lfs_file_tell: early return due to lock error err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    /* Log the result from the underlying implementation. Use a generic cast to\n       long long for portability of the textual log (avoids dependence on PRId32\n       in the probe). */\n    lfs_probe_logf(\"lfs_file_tell: lfs_file_tell_ returned res=%lld\", (long long)res);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log that we unlocked the cfg and are returning the final result. */\n    lfs_probe_logf(\"lfs_file_tell: unlocked cfg=%p, returning res=%lld\",\n                    (void*)lfs->cfg, (long long)res);\n\n    return res;\n}"
}