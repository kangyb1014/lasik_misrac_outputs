{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(lfs->cfg) expands to ((void)cfg), which is an expression statement with no side effects. It is executed but removing this statement would not change the program behaviour in the given configuration, so it constitutes dead code under MISRA C 2023 Rule 2.2. (Note: if in other build configurations LFS_UNLOCK expands to a real unlock operation, then it would not be dead; but in the provided code it is.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/652.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Probe helpers: append human-readable traces to /tmp/logs/652.txt. */\nstatic void lfs_probe_log(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/652.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void lfs_probe_dump_bytes(const void *p, size_t n){\n    if (p == NULL) {\n        lfs_probe_log(\"dump_bytes: NULL\");\n        return;\n    }\n    FILE *f = fopen(\"/tmp/logs/652.txt\", \"a\");\n    if (!f) return;\n    const unsigned char *b = (const unsigned char*)p;\n    fprintf(f, \"dump_bytes (%p) :\", p);\n    for (size_t i = 0; i < n; i++){\n        fprintf(f, \" %02X\", b[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_file_tell with probes. The original logic is preserved. */\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_probe_log(\"lfs_file_tell: LFS_LOCK returned err=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* record state before calling internal tell */\n    lfs_probe_log(\"lfs_file_tell: pre-tell: lfs=%p file=%p cfg=%p\", (void*)lfs, (void*)file, (void*)lfs->cfg);\n    /* dump a small prefix of cfg to capture state; size 16 bytes is conservative */\n    lfs_probe_dump_bytes((const void*)lfs->cfg, 16);\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n\n    /* Probe immediately before unlock to capture state that should be affected by a real unlock */\n    lfs_probe_log(\"lfs_file_tell: before LFS_UNLOCK: res=%\" PRId32, res);\n    lfs_probe_log(\"lfs_file_tell: before LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    lfs_probe_dump_bytes((const void*)lfs->cfg, 16);\n\n    /* Original unlock call retained verbatim. If LFS_UNLOCK is a no-op ((void)cfg),\n       the probes above and below will show identical state and thus provide evidence\n       that the statement had no runtime effect. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe after unlock */\n    lfs_probe_log(\"lfs_file_tell: after LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    lfs_probe_dump_bytes((const void*)lfs->cfg, 16);\n\n    return res;\n}\n"
}