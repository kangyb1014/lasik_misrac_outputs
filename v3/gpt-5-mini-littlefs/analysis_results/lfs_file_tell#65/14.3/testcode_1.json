{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression is 'err' in 'if (err)'. 'err' is initialized from the macro LFS_LOCK(lfs->cfg), which is defined as ((void)cfg,0) \u2014 a comma expression that always yields the constant 0. Therefore the if condition is invariantly false (never taken), violating MISRA C 2023 Rule 14.3 (controlling expressions shall not be invariant).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/655.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append control-flow and state information to /tmp/logs/655.txt */\nstatic void lfs_file_tell_probe(const char *label, void *lfs_ptr, void *file_ptr, long long value)\n{\n    FILE *f = fopen(\"/tmp/logs/655.txt\", \"a\");\n    if (f) {\n        /* Log label, pointers and numeric value. Keep it simple and robust. */\n        fprintf(f, \"%s: lfs=%p file=%p value=%lld\\n\", label, lfs_ptr, file_ptr, value);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after the lock to capture the exact value returned by LFS_LOCK. */\n    lfs_file_tell_probe(\"after LFS_LOCK\", (void*)lfs, (void*)file, (long long)err);\n\n    if (err) {\n        /* If this branch is ever taken, record it and the err value before returning. */\n        lfs_file_tell_probe(\"if(err) TAKEN - returning err\", (void*)lfs, (void*)file, (long long)err);\n        return err;\n    }\n\n    /* Record that the if branch was not taken and normal execution continues. */\n    lfs_file_tell_probe(\"if(err) NOT taken - continuing\", (void*)lfs, (void*)file, (long long)err);\n\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n\n    /* Log the result before unlocking so we can correlate value with control flow. */\n    lfs_file_tell_probe(\"before LFS_UNLOCK - res\", (void*)lfs, (void*)file, (long long)res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlock to capture final state just before return. */\n    lfs_file_tell_probe(\"after LFS_UNLOCK - returning res\", (void*)lfs, (void*)file, (long long)res);\n\n    return res;\n}\n"
}