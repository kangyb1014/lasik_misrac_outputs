{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg, 0). In lfs_file_tell this sets err to 0 unconditionally, so the branch if (err) { return err; } can never be taken. That branch is therefore unreachable in the presented project configuration, which constitutes unreachable code and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/651.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: appends timestamped messages to /tmp/logs/651.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/651.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    char timestr[64] = \"\";\n    if (t != (time_t)-1) {\n        struct tm *tm = localtime(&t);\n        if (tm) {\n            (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm);\n        }\n    }\n\n    fprintf(f, \"[%s] \", timestr[0] ? timestr : \"unknown-time\");\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    lfs_probe_log(\"ENTER lfs_file_tell: lfs=%p, file=%p\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"LFS_LOCK returned: %d\", err);\n\n    if (err) {\n        lfs_probe_log(\"Taking error branch in lfs_file_tell: returning %d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    lfs_probe_log(\"Computed res in lfs_file_tell: %lld\", (long long)res);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"EXIT lfs_file_tell: returning %lld\", (long long)res);\n    return res;\n}\n"
}