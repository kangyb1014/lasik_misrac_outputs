{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0), which always yields the constant 0. In lfs_file_open this makes the subsequent check if (err) { return err; } (and any other branches that depend on a non\u2011zero lock error) unreachable in the compiled project configuration shown. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/511.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger to capture control flow and state for the violation scenario. */\nstatic void lfs_log_probe_511(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/511.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock and basic input state. */\n    lfs_log_probe_511(\n        \"[probe] lfs_file_open ENTRY: lfs=%p file=%p path=\\\"%s\\\" flags=0x%X cfg=%p LFS_LOCK_value=%d\",\n        (void*)lfs, (void*)file, (path ? path : \"(null)\"), (unsigned)flags, (void*)(lfs ? lfs->cfg : NULL), err);\n\n    if (err) {\n        /* Log before early return so the presence of an early-return path is evidenced. */\n        lfs_log_probe_511(\"[probe] lfs_file_open EARLY RETURN: lock error err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_log_probe_511(\"[probe] calling lfs_file_open_: before call (lfs=%p file=%p)\", (void*)lfs, (void*)file);\n    err = lfs_file_open_(lfs, file, path, flags);\n    lfs_log_probe_511(\"[probe] returned from lfs_file_open_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_probe_511(\"[probe] lfs_file_open EXIT: returning %d\", err);\n    return err;\n}\n"
}