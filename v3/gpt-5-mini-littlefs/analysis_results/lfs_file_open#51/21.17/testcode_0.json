{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_cache_zero likely uses a string.h function (e.g., memset) to zero file->cache.buffer using the FS cache size. file->cache.buffer can be set to a user-supplied pointer file->cfg->buffer whose actual allocation size is not validated here. If the user-supplied buffer is smaller than lfs->cfg->cache_size, the memset in lfs_cache_zero will write past the end of the buffer, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append human-readable traces to /tmp/logs/519.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/519.txt\", \"a\");\n    if (!f) { return; }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    fflush(f);\n    va_end(ap);\n    fclose(f);\n}\n\n/* Dump some state information. This tries to log the fields mentioned in the\n   violation scenario (cfg pointers, cache_size, user buffer pointers) so that\n   other agents can reproduce and inspect potential out-of-bounds writes.\n\n   Note: This function only reads fields; it does not modify program state. */\nstatic void lfs_probe_dump_state(lfs_t *lfs, lfs_file_t *file, const char *stage) {\n    lfs_probe_log(\"[probe] STAGE: %s\", stage ? stage : \"(null)\");\n    lfs_probe_log(\"[probe] lfs=%p, file=%p\", (void*)lfs, (void*)file);\n\n    if (lfs) {\n        /* Try to log lfs->cfg and its cache_size if present */\n        if (lfs->cfg) {\n            /* Many implementations store a cache_size in cfg; log it if available */\n            lfs_probe_log(\"[probe] lfs->cfg=%p\", (void*)lfs->cfg);\n            /* Print cache_size if present (cast to unsigned for display) */\n            lfs_probe_log(\"[probe] lfs->cfg->cache_size=%u\", (unsigned)lfs->cfg->cache_size);\n        } else {\n            lfs_probe_log(\"[probe] lfs->cfg is NULL\");\n        }\n    }\n\n    if (file) {\n        /* Try to log file configuration and cache buffer pointers */\n        /* Many projects have file->cfg and a cfg->buffer that may be user-supplied */\n        if (file->cfg) {\n            lfs_probe_log(\"[probe] file->cfg=%p\", (void*)file->cfg);\n            /* Log user-supplied buffer pointer if cfg->buffer exists */\n            lfs_probe_log(\"[probe] file->cfg->buffer=%p\", (void*)file->cfg->buffer);\n            /* If there is a field for buffer size, log it as a hint (may not exist in all configs) */\n            /* This cast is safe for typical unsigned integer fields */\n            lfs_probe_log(\"[probe] file->cfg->buffer_size=%u\", (unsigned)file->cfg->buffer_size);\n        } else {\n            lfs_probe_log(\"[probe] file->cfg is NULL\");\n        }\n\n        /* Many implementations keep a per-file cache structure; try to log it */\n        /* Log pointer to file->cache and the cache buffer / size if available */\n        lfs_probe_log(\"[probe] file->cache=%p\", (void*)&file->cache);\n        lfs_probe_log(\"[probe] file->cache.buffer=%p\", (void*)file->cache.buffer);\n        lfs_probe_log(\"[probe] file->cache.size=%u\", (unsigned)file->cache.size);\n    }\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    /* Log entry state so callers can see what pointers and sizes are at open time. */\n    lfs_probe_dump_state(lfs, file, \"entry\");\n    lfs_probe_log(\"[probe] lfs_file_open called with path=\\\"%s\\\", flags=0x%x\", path ? path : \"(null)\", (unsigned)flags);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt and state immediately after acquiring lock */\n    lfs_probe_log(\"[probe] after LFS_LOCK: err=%d\", err);\n    if (err) {\n        lfs_probe_log(\"[probe] LFS_LOCK failed, returning %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Capture state right before delegating to lfs_file_open_ so we can see\n       what values are used by subsequent calls (e.g. cache zeroing). */\n    lfs_probe_dump_state(lfs, file, \"before_lfs_file_open_\");\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    /* Capture state after the lower-level open completes */\n    lfs_probe_log(\"[probe] lfs_file_open_ returned %d\", err);\n    lfs_probe_dump_state(lfs, file, \"after_lfs_file_open_\");\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"[probe] returning from lfs_file_open with err=%d\", err);\n    return err;\n}\n"
}