{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds read when copying the file name into metadata: lfs_dir_commit is called with a tag that encodes the name length (nlen) and the pointer path. If the implementation of lfs_dir_commit (or functions it calls) uses a string/memory function from <string.h> (e.g., memcpy, strlen) to read or copy exactly nlen bytes from path, and path does not actually refer to at least nlen bytes (for example path is not null-terminated, or points to a shorter buffer, or lfs_path_namelen returned an incorrect/tainted length), then the copy will read beyond the bounds of the object referenced by path. The code only checks nlen against lfs->name_max, not that the path buffer actually contains nlen bytes, so this scenario can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helper: append control-flow and state info to /tmp/logs/519.txt\n * Keeps behavior of lfs_file_open unchanged; only records pointers and flags.\n */\nstatic void lfs_file_open_probe(const char *stage, void *lfs, void *file, const char *path, int flags, int err) {\n    FILE *fp = fopen(\"/tmp/logs/519.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log stage, pointers, flags and errno-like result. Avoid dereferencing path to\n       prevent introducing new out-of-bounds reads. */\n    fprintf(fp, \"%s: lfs=%p file=%p path=%p flags=0x%08x err=%d\\n\",\n            stage, lfs, file, (void*)path, (unsigned)flags, err);\n    fclose(fp);\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log immediately after attempting lock so we can see entry and lock result. */\n    lfs_file_open_probe(\"lfs_file_open.entry_after_lock\", lfs, file, path, flags, err);\n    if (err) {\n        /* Log the early return path. */\n        lfs_file_open_probe(\"lfs_file_open.lock_failed_return\", lfs, file, path, flags, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log right before delegating to the internal open to capture parameters.\n       We purposely do NOT inspect path contents here to avoid any new OOB reads. */\n    lfs_file_open_probe(\"lfs_file_open.before_lfs_file_open_\", lfs, file, path, flags, -1);\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    /* Log result returned by internal open function. */\n    lfs_file_open_probe(\"lfs_file_open.after_lfs_file_open_\", lfs, file, path, flags, err);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final exit log for complete control-flow trace. */\n    lfs_file_open_probe(\"lfs_file_open.exit\", lfs, file, path, flags, err);\n    return err;\n}\n"
}