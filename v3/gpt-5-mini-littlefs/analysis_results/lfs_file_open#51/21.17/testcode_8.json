{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling lfs_path_isdir(path) here may invoke string.h routines (e.g. strlen/strspn/strrchr) on the path parameter. There is no prior validation in this function that path is non-NULL and a valid NUL-terminated buffer, and the code even uses path in LFS_TRACE with \"%s\". If a caller passes a non-NUL-terminated buffer or an invalid pointer/shorter buffer, those string.h calls can read past the end of the object and thus violate MISRA C 2023 Rule 21.17. A concrete violating scenario: the caller supplies a char array lacking a terminating '\\0' (or a pointer into a buffer so that the remaining bytes do not contain a NUL); lfs_path_isdir internally calls strlen or similar, which reads past the allocated bounds and causes an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe helper that logs control-flow and basic state WITHOUT dereferencing 'path'.\n   It intentionally records only the pointer value and whether path is NULL to avoid\n   performing any unsafe reads that could themselves trigger out-of-bounds accesses.\n*/\nstatic void lfs_file_open_probe(const char *stage, const void *lfs, const void *file,\n        const char *path, unsigned flags, int err) {\n    FILE *fp = fopen(\"/tmp/logs/519.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    time_t t = time(NULL);\n    /* Record timestamp, stage, pointer values, whether path is NULL, flags and err. */\n    fprintf(fp, \"%ld | %s | lfs=%p file=%p path_ptr=%p path_is_null=%d flags=0x%08x err=%d\\n\",\n            (long)t, stage, lfs, file, (const void*)path, (path == NULL), flags, err);\n    fclose(fp);\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that lock failed before returning. Avoid dereferencing 'path'. */\n        lfs_file_open_probe(\"lfs_file_open:lock_failed\", (const void*)lfs,\n                (const void*)file, path, (unsigned)flags, err);\n        return err;\n    }\n\n    /* Preserve original trace (may itself read 'path'). We also add a safe probe\n       that does NOT dereference 'path' so callers can inspect pointer values.\n    */\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n\n    lfs_file_open_probe(\"lfs_file_open:entry\", (const void*)lfs,\n            (const void*)file, path, (unsigned)flags, 0);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    /* Log result of the inner open operation. */\n    lfs_file_open_probe(\"lfs_file_open:after_open_\", (const void*)lfs,\n            (const void*)file, path, (unsigned)flags, err);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}