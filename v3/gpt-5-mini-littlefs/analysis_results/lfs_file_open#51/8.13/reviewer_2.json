{
  "user_message": "An agent A claimed that the following lfs_file_open code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of lfs_file_open.\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function lfs_mlist_isopen takes non-const pointers (struct lfs_mlist *head, struct lfs_mlist *node) but only reads from the list and does not modify the pointed-to objects. Therefore both parameters should be const-qualified (e.g. const struct lfs_mlist *head, const struct lfs_mlist *node). The current signature violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1756105020] lfs_file_open ENTER: lfs=0x7ffd32897318 file=0x7ffd328970b0 path=\"breakfast/bacon\" flags=0x902 lock_err=0\n[1756105020] lfs_file_open: about to call lfs_mlist_isopen with mlist=(nil) node=0x7ffd328970b0\n[1756105020] lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\n[1756105020] lfs_file_open: lfs_mlist_isopen finished (assert passed)\n[1756105020] lfs_file_open: lfs_file_open_ returned err=0\n[1756105020] lfs_file_open EXIT: returning err=0\n[1756105020] lfs_file_open ENTER: lfs=0x7ffd32897318 file=0x7ffd32897118 path=\"breakfast/eggs\" flags=0x902 lock_err=0\n[1756105020] lfs_file_open: about to call lfs_mlist_isopen with mlist=0x7ffd328970b0 node=0x7ffd32897118\n[1756105020] lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\n[1756105020] lfs_file_open: lfs_mlist_isopen finished (assert passed)\n[1756105020] lfs_file_open: lfs_file_open_ returned err=0\n[1756105020] lfs_file_open EXIT: returning err=0\n[1756105020] lfs_file_open ENTER: lfs=0x7ffd32897318 file=0x7ffd32897180 path=\"breakfast/pancakes\" flags=0x902 lock_err=0\n[1756105020] lfs_file_open: about to call lfs_mlist_isopen with mlist=0x7ffd32897118 node=0x7ffd32897180\n[1756105020] lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\n[1756105020] lfs_file_open: lfs_mlist_isopen finished (assert passed)\n[1756105020] lfs_file_open: lfs_file_open_ returned err=0\n[1756105020] lfs_file_open EXIT: returning err=0\n[1756105020] lfs_file_open ENTER: lfs=0x7ffd32897318 file=0x7ffd328972b0 path=\"breakfast/bacon\" flags=0x1 lock_err=0\n[1756105020] lfs_file_open: about to call lfs_mlist_isopen with mlist=(nil) node=0x7ffd328972b0\n[1756105020] lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\n[1756105020] lfs_file_open: lfs_mlist_isopen finished (assert passed)\n[1756105020] lfs_file_open: lfs_file_open_ returned err=0\n[1756105020] lfs_file_open EXIT: returning err=0\n[1756105020] lfs_file_open ENTER: lfs=0x7ffd32897318 file=0x7ffd328972b0 path=\"breakfast/eggs\" flags=0x1 lock_err=0\n[1756105020] lfs_file_open: about to call lfs_mlist_isopen with mlist=(nil) node=0x7ffd328972b0\n[1756105020] lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\n[1756105020] lfs_file_open: lfs_mlist_isopen finished (assert passed)\n[1756105020] lfs_file_open: lfs_file_open_ returned err=0\n[1756105020] lfs_file_open EXIT: returning err=0\n[1756105020] lfs_file_open ENTER: lfs=0x7ffd32897318 file=0x7ffd328972b0 path=\"breakfast/pancakes\" flags=0x1 lock_err=0\n[1756105020] lfs_file_open: about to call lfs_mlist_isopen with mlist=(nil) node=0x7ffd328972b0\n[1756105020] lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\n[1756105020] lfs_file_open: lfs_mlist_isopen finished (assert passed)\n[1756105020] lfs_file_open: lfs_file_open_ returned err=0\n[1756105020] lfs_file_open EXIT: returning err=0\n[1756105020] lfs_file_open ENTER: lfs=0x7ffd32897318 file=0x7ffd328970b0 path=\"breakfast/bacon\" flags=0x902 lock_err=0\n[1756105020] lfs_file_open: about to call lfs_mlist_isopen with mlist=(nil) node=0x7ffd328970b0\n[1756105020] lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\n[1756105020] lfs_file_open: lfs_mlist_isopen finished (assert passed)\n[1756105020] lfs_file_open: lfs_file_open_ returned err=0\n[1756105020] lfs_file_open EXIT: returning err=0\n[1756105020] lfs_file_open ENTER: lfs=0x7ffd32897318 file=0x7ffd32897118 path=\"breakfast/eggs\" flags=0x902 lock_err=0\n[1756105020] lfs_file_open: about to call lfs_mlist_isopen with mlist=0x7ffd328970b0 node=0x7ffd32897118\n[1756105020] lfs_file_open: NOTE: lfs_mlist_isopen takes non-const pointers in the current ABI - this is the reported MISRA 8.13 concern\n[1756105020] lfs_\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_file_open:\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n...\nstatic int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags) {\n    static const struct lfs_file_config defaults = {0};\n    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);\n    return err;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. The static helper lfs_mlist_isopen only reads the list and does not modify the objects it is given, so its parameters can and should be const-qualified under MISRA C 2023 Rule 8.13. The current signature uses non-const pointers and even contains a cast to (struct lfs_mlist*) which suppresses the const information; that is exactly the kind of situation Rule 8.13 is intended to prevent. The function can be rewritten simply as, for example:\n\nstatic bool lfs_mlist_isopen(const struct lfs_mlist *head,\n                             const struct lfs_mlist *node) {\n    for (const struct lfs_mlist *p = head; p; p = p->next) {\n        if (p == node) {\n            return true;\n        }\n    }\n    return false;\n}\n\nSince lfs_mlist_isopen is static (internal linkage) this change does not affect an external ABI and fixes the MISRA violation. Therefore the report that the code violates Rule 8.13 is correct."
}