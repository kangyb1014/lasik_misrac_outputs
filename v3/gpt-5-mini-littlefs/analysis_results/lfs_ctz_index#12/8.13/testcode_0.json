{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'lfs' is a pointer that is only read (used to access lfs->cfg->block_size) and is not modified inside lfs_ctz_index, so it should be a pointer to a const-qualified type. Change the signature to: static int lfs_ctz_index(const lfs_t *lfs, lfs_off_t *off). Note: 'off' must remain non-const because the function assigns to *off.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_index code that contains useful probe functions that print useful logs to a file \"/tmp/logs/123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_index as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_index:\n```c\nstatic int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {\n    lfs_off_t size = *off;\n    lfs_off_t b = lfs->cfg->block_size - 2*4;\n    lfs_off_t i = size / b;\n    if (i == 0) {\n        return 0;\n    }\n\n    i = (size - 4*(lfs_popc(i-1)+2)) / b;\n    *off = size - b*i - 4*lfs_popc(i);\n    return i;\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_index code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Minimal type stubs to allow compilation for testing purposes */\ntypedef long long lfs_off_t;\n\nstruct lfs_config {\n    lfs_off_t block_size;\n};\n\ntypedef struct {\n    struct lfs_config *cfg;\n} lfs_t;\n\n/* Simple popcount implementation used by the real code */\nstatic int lfs_popc(lfs_off_t x) {\n    /* use builtin for simplicity */\n    return __builtin_popcountll((unsigned long long)x);\n}\n\n/* Helper to append logs about control flow and state to a file */\nstatic void lfs_ctz_log(const char *tag, const lfs_t *lfs, const lfs_off_t *off,\n                        lfs_off_t size, lfs_off_t b, lfs_off_t i,\n                        int popc_i_minus1, int popc_i) {\n    FILE *f = fopen(\"/tmp/logs/123.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_ctz_index] %s\\n\", tag);\n    fprintf(f, \"  lfs=%p, off_ptr=%p\\n\", (const void*)lfs, (const void*)off);\n    fprintf(f, \"  initial *off=%lld\\n\", (long long)size);\n    if (lfs && lfs->cfg) {\n        fprintf(f, \"  block_size=%lld\\n\", (long long)lfs->cfg->block_size);\n    } else {\n        fprintf(f, \"  block_size=(null)\\n\");\n    }\n    fprintf(f, \"  b=%lld, i=%lld\\n\", (long long)b, (long long)i);\n    fprintf(f, \"  popc(i-1)=%d, popc(i)=%d\\n\", popc_i_minus1, popc_i);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with logging probes inserted. Keeps the exact logic. */\nstatic int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {\n    lfs_off_t size = *off;\n    lfs_off_t b = lfs->cfg->block_size - 2*4;\n    lfs_off_t i = size / b;\n\n    /* Log initial state */\n    lfs_ctz_log(\"entry\", lfs, off, size, b, i, -1, -1);\n\n    if (i == 0) {\n        lfs_ctz_log(\"early_return_i_zero\", lfs, off, size, b, i, -1, -1);\n        return 0;\n    }\n\n    int popc_i_minus1 = lfs_popc(i-1);\n    i = (size - 4*(popc_i_minus1+2)) / b;\n    int popc_i = lfs_popc(i);\n    *off = size - b*i - 4*popc_i;\n\n    /* Log computed values before returning */\n    lfs_ctz_log(\"computed\", lfs, off, size, b, i, popc_i_minus1, popc_i);\n\n    return (int)i;\n}\n"
}