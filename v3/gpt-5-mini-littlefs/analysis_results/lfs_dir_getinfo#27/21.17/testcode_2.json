{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \".\") writes two bytes ('.' plus terminating '\\0') into info->name, whose size is LFS_NAME_MAX+1. If LFS_NAME_MAX is 0 (or otherwise < 1) then info->name is only 1 byte long and the strcpy will write beyond the buffer. Because the function does not ensure at compile- or run-time that LFS_NAME_MAX >= 1, the use of strcpy can potentially access beyond the bounds of info->name.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getinfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/279.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getinfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getinfo:\n```c\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    if (id == 0x3ff) {\n        // special case for root\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getinfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append logs about state to /tmp/logs/279.txt */\nstatic void lfs_dir_getinfo_log_state(const char *stage, lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info, lfs_stag_t tag, const struct lfs_ctz *ctz) {\n    FILE *fp = fopen(\"/tmp/logs/279.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    /* Basic context */\n    fprintf(fp, \"stage=%s id=0x%03x lfs=%p dir=%p info=%p name_max=%u tag=%ld\\n\",\n            stage, (unsigned)id, (void*)lfs, (void*)dir, (void*)info,\n            (unsigned)(lfs ? lfs->name_max : 0), (long)tag);\n\n    /* If info available, print name safely with a bounded precision so we don't read beyond\n       the expected maximum. Use lfs->name_max+1 to include room for terminating '\\0' if present. */\n    if (info && lfs) {\n        unsigned maxprint = (unsigned)(lfs->name_max + 1);\n        if (maxprint == 0) { maxprint = 1; }\n        fprintf(fp, \"info->name (up to %u bytes): %.*s\\n\", maxprint, (int)maxprint, info->name);\n        fprintf(fp, \"info->type=%d info->size=%"
}