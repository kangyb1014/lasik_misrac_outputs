{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \"..\") copies three bytes (two '.' characters plus the terminating NUL). This is safe only if sizeof(info->name) >= 3, i.e. LFS_NAME_MAX+1 >= 3 (LFS_NAME_MAX >= 2). If LFS_NAME_MAX < 2 (for example LFS_NAME_MAX == 1 or 0), info->name has size < 3 and the strcpy will write beyond the bounds of info->name, causing a buffer overflow. The shown code does not guarantee at compile time that LFS_NAME_MAX >= 2 (nor show validation that runtime lfs->name_max is consistent with the compile-time array size), so the strcpy may violate MISRA C 2023 Rule 21.17 in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getinfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/279.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getinfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getinfo:\n```c\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    if (id == 0x3ff) {\n        // special case for root\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getinfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe function to append logs to /tmp/logs/279.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/279.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    /* Log entry and key state */\n    if (lfs != NULL) {\n        /* lfs->name_max is used below; log its value */\n        lfs_log_probe(\"ENTER lfs_dir_getinfo: lfs=%p, dir=%p, id=0x%04x, info=%p, lfs->name_max=%d\",\n                (void*)lfs, (void*)dir, (unsigned)id, (void*)info, (int)lfs->name_max);\n    } else {\n        lfs_log_probe(\"ENTER lfs_dir_getinfo: lfs=NULL, dir=%p, id=0x%04x, info=%p\",\n                (void*)dir, (unsigned)id, (void*)info);\n    }\n\n    if (id == 0x3ff) {\n        /* special case for root */\n        lfs_log_probe(\"ID is root (0x3ff): preparing to strcpy info->name with \\\"/\\\"\");\n        /* Log pointer to destination buffer */\n        lfs_log_probe(\"info->name pointer = %p, expected copy length = %d (including NUL)\",\n                (void*)info->name, 2);\n\n        /* Original behavior preserved */\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n\n        lfs_log_probe(\"After root strcpy: info->name='%s', info->type=%d\", info->name, (int)info->type);\n        lfs_log_probe(\"EXIT lfs_dir_getinfo: return=0\");\n        return 0;\n    }\n\n    lfs_log_probe(\"Retrieving name tag: id=%d, name_max+1=%d\", (int)id, (int)(lfs->name_max + 1));\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    lfs_log_probe(\"lfs_dir_get(name) returned tag=%ld\", (long)tag);\n    if (tag < 0) {\n        lfs_log_probe(\"lfs_dir_get(name) error: tag=%ld, returning %d\", (long)tag, (int)tag);\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n    lfs_log_probe(\"Name tag ok: info->type=%d\", (int)info->type);\n\n    struct lfs_ctz ctz;\n    lfs_log_probe(\"Retrieving struct tag (ctz): sizeof(ctz)=%d\", (int)sizeof(ctz));\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    lfs_log_probe(\"lfs_dir_get(ctz) returned tag=%ld\", (long)tag);\n    if (tag < 0) {\n        lfs_log_probe(\"lfs_dir_get(ctz) error: tag=%ld, returning %d\", (long)tag, (int)tag);\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n    lfs_log_probe(\"ctz after le32 conversion: ctz.size=%u\", (unsigned)ctz.size);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n        lfs_log_probe(\"Tag indicates CTZSTRUCT: info->size=%u\", (unsigned)info->size);\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n        lfs_log_probe(\"Tag indicates INLINESTRUCT: info->size=%u (from lfs_tag_size)\", (unsigned)info->size);\n    } else {\n        lfs_log_probe(\"Tag indicates other type: lfs_tag_type3(tag)=%d\", (int)lfs_tag_type3(tag));\n    }\n\n    lfs_log_probe(\"EXIT lfs_dir_getinfo: return=0\");\n    return 0;\n}\n"
}