{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \"/\") can overflow info->name if LFS_NAME_MAX is configured too small. info->name has size LFS_NAME_MAX+1, and strcpy copies two bytes for \"/\" (the '/' plus terminating '\\0'). If LFS_NAME_MAX==0 (name array size 1) or LFS_NAME_MAX==0/1 depending on other uses (e.g. other code also copies \".\" and \"..\"), this write will exceed the bounds and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getinfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/279.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_getinfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getinfo:\n```c\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    if (id == 0x3ff) {\n        // special case for root\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_getinfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Helper probe: log control flow and relevant state to /tmp/logs/279.txt */\nstatic void lfs_log_dir_getinfo_state(lfs_t *lfs, uint16_t id, struct lfs_info *info,\n        const char *stage, lfs_stag_t tag_before) {\n    FILE *f = fopen(\"/tmp/logs/279.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Try to safely log numeric state without dereferencing possibly invalid memory.\n       We log: stage, id, lfs->name_max, computed name buffer size, pointer to info->name,\n       and a simple check for the root-name copy (\"/\") which needs 2 bytes including '\\0'. */\n    size_t name_max = 0;\n    if (lfs) {\n        /* cast to size_t to avoid negative/overflow prints */\n        name_max = (size_t)lfs->name_max;\n    }\n\n    size_t buf_sz = name_max + 1u;\n\n    fprintf(f, \"[lfs_dir_getinfo] stage=%s id=0x%03x lfs_name_max=%zu buf_sz=%zu info_name_ptr=%p tag_before=%ld\\n\",\n            stage, (unsigned)id, name_max, buf_sz, (void*)(info ? info->name : NULL), (long)tag_before);\n\n    /* If this is the special root case, report whether the copy of \"/\" will fit. */\n    if (id == 0x3ff) {\n        const char *root = \"/\"; /* length = 1, need 2 including '\\0' */\n        size_t need = strlen(root) + 1u;\n        fprintf(f, \"[lfs_dir_getinfo] root copy: need=%zu bytes\\n\", need);\n        if (buf_sz < need) {\n            fprintf(f, \"[lfs_dir_getinfo] POTENTIAL OVERFLOW: buffer too small for root name! buf_sz=%zu < need=%zu\\n\",\n                    buf_sz, need);\n        } else {\n            fprintf(f, \"[lfs_dir_getinfo] buffer sufficient for root name: buf_sz=%zu >= need=%zu\\n\",\n                    buf_sz, need);\n        }\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    /* Log entry state */\n    lfs_log_dir_getinfo_state(lfs, id, info, \"entry\", 0);\n\n    if (id == 0x3ff) {\n        /* special case for root */\n        /* Log right before performing the copy so callers can see buffer sizes and decision */\n        lfs_log_dir_getinfo_state(lfs, id, info, \"before_root_strcpy\", 0);\n\n        strcpy(info->name, \"/\");\n\n        /* Log after the copy to capture resulting state pointer and indicate copy occurred. */\n        lfs_log_dir_getinfo_state(lfs, id, info, \"after_root_strcpy\", 0);\n\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n\n    /* Log result of name fetch */\n    lfs_log_dir_getinfo_state(lfs, id, info, \"after_name_get\", tag);\n\n    if (tag < 0) {\n        /* Log failure tag */\n        lfs_log_dir_getinfo_state(lfs, id, info, \"name_get_failed\", tag);\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n\n    /* Log result of struct fetch */\n    lfs_log_dir_getinfo_state(lfs, id, info, \"after_struct_get\", tag);\n\n    if (tag < 0) {\n        lfs_log_dir_getinfo_state(lfs, id, info, \"struct_get_failed\", tag);\n        return (int)tag;\n    }\n\n    lfs_ctz_fromle32(&ctz);\n\n    /* Log ctz size and tag type before assigning info->size */\n    {\n        FILE *f = fopen(\"/tmp/logs/279.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[lfs_dir_getinfo] ctz.size=%"
}