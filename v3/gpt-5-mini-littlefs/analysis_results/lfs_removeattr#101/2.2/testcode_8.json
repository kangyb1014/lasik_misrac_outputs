{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK is defined as ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); performs only a void cast with no side effects. Removing this call would not change program behaviour in the current project configuration, so the operation is dead code. (Note: LFS_LOCK is also defined as a no-op ((void)cfg,0), making the lock/unlock pair dead in this build.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_removeattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1012.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_removeattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_removeattr:\n```c\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    err = lfs_removeattr_(lfs, path, type);\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_removeattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <inttypes.h>\n\n/*\n * Probe helper: append a timestamped message to /tmp/logs/1012.txt.\n * This helper is intended to be non-intrusive and preserve the\n * original behavior of the function under test.\n */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/1012.txt\", \"a\");\n    if (!f) {\n        /* Try creating the directory once, then try open again. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/1012.txt\", \"a\");\n        if (!f) {\n            return;\n        }\n    }\n\n    time_t t = time(NULL);\n    pid_t pid = getpid();\n    struct tm tmbuf;\n    (void)localtime_r(&t, &tmbuf);\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d pid=%d \",\n        tmbuf.tm_year + 1900, tmbuf.tm_mon + 1, tmbuf.tm_mday,\n        tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec,\n        (int)pid);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type) {\n    /* Log entry and inputs */\n    lfs_probe_log(\"ENTER lfs_removeattr: lfs=%p path=\\\"%s\\\" type=%\" PRIu8,\n                  (void*)lfs, path ? path : \"(null)\", type);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock and cfg pointer value. This helps show that\n       LFS_LOCK is a no-op in this build (err==0) and that cfg is unchanged. */\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d cfg=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_probe_log(\"RETURN (lock failed): err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    err = lfs_removeattr_(lfs, path, type);\n\n    /* Log result of internal removal call */\n    lfs_probe_log(\"AFTER lfs_removeattr_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n\n    /* Log immediately before and after unlock to capture control flow.\n       If LFS_UNLOCK is a no-op, these logs will show identical state.\n       We deliberately do not modify lfs->cfg or other state here. */\n    lfs_probe_log(\"BEFORE LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n\n    lfs_probe_log(\"EXIT lfs_removeattr: return=%d\", err);\n    return err;\n}\n"
}