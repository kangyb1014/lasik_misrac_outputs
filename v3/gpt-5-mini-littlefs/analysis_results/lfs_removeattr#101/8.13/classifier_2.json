{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_removeattr:\n```c\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    err = lfs_removeattr_(lfs, path, type);\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_removeattr:\nconst struct lfs_file_config *cfg\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nerr = lfs_removeattr_(lfs, path, type);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The call passes 'path' (declared as 'const char *') to lfs_removeattr_. If lfs_removeattr_ is prototyped as taking a non-const pointer (for example: int lfs_removeattr_(lfs_t *lfs, char *path, uint8_t type)), the const qualifier on 'path' is discarded when calling the function. That discarding of const violates MISRA C 2023 Rule 8.13. The fix is to ensure lfs_removeattr_ is declared to take 'const char *path' (or otherwise avoid passing a const-qualified object to a non-const parameter)."
}