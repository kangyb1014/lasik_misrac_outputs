{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses a pointer 'f' as the loop counter and the third clause reads f->next (f = f->next). The loop body calls functions (lfs_ctz_traverse and the user callback 'cb') that may modify the file objects or the mlist (e.g. close/unlink an open file), which would modify the object whose member (f->next) is used in the third clause. Rule 14.2 requires the second/third clauses not to use objects that are modified in the loop body (including via called functions). Therefore this for-loop is not well-formed and violates MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_tortoise_detectcycles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1074.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_tortoise_detectcycles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_tortoise_detectcycles:\n```c\nstatic int lfs_tortoise_detectcycles(\n    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {\n    // detect cycles with Brent's algorithm\n    if (lfs_pair_issync(dir->tail, tortoise->pair)) {\n        LFS_WARN(\"Cycle detected in tail list\");\n        return LFS_ERR_CORRUPT;\n    }\n    if (tortoise->i == tortoise->period) {\n        tortoise->pair[0] = dir->tail[0];\n        tortoise->pair[1] = dir->tail[1];\n        tortoise->i = 0;\n        tortoise->period *= 2;\n    }\n    tortoise->i += 1;\n\n    return LFS_ERR_OK;\n}\n```\n</target_code>\nPlease provide the modified lfs_tortoise_detectcycles code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    /* Best-effort ensure directory exists; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/1074.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int lfs_tortoise_detectcycles(\n    const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise) {\n    /* Log entry and key state values */\n    lfs_log_probe(\"ENTER lfs_tortoise_detectcycles: dir->tail=[%lu,%lu], \"\n                  \"tortoise->pair=[%lu,%lu], i=%u, period=%u\",\n                  (unsigned long)dir->tail[0], (unsigned long)dir->tail[1],\n                  (unsigned long)tortoise->pair[0], (unsigned long)tortoise->pair[1],\n                  (unsigned)tortoise->i, (unsigned)tortoise->period);\n\n    /* detect cycles with Brent's algorithm */\n    if (lfs_pair_issync(dir->tail, tortoise->pair)) {\n        lfs_log_probe(\"Cycle detected: dir->tail matches tortoise->pair\");\n        LFS_WARN(\"Cycle detected in tail list\");\n        lfs_log_probe(\"RETURN LFS_ERR_CORRUPT\");\n        return LFS_ERR_CORRUPT;\n    }\n\n    if (tortoise->i == tortoise->period) {\n        lfs_log_probe(\"tortoise->i == tortoise->period: resetting pair. \"\n                      \"old_pair=[%lu,%lu], new_tail=[%lu,%lu], old_period=%u\",\n                      (unsigned long)tortoise->pair[0], (unsigned long)tortoise->pair[1],\n                      (unsigned long)dir->tail[0], (unsigned long)dir->tail[1],\n                      (unsigned)tortoise->period);\n\n        tortoise->pair[0] = dir->tail[0];\n        tortoise->pair[1] = dir->tail[1];\n        tortoise->i = 0;\n        tortoise->period *= 2;\n\n        lfs_log_probe(\"After reset: tortoise->pair=[%lu,%lu], i=%u, period=%u\",\n                      (unsigned long)tortoise->pair[0], (unsigned long)tortoise->pair[1],\n                      (unsigned)tortoise->i, (unsigned)tortoise->period);\n    }\n\n    tortoise->i += 1;\n\n    lfs_log_probe(\"EXIT lfs_tortoise_detectcycles: tortoise->pair=[%lu,%lu], i=%u, period=%u\",\n                  (unsigned long)tortoise->pair[0], (unsigned long)tortoise->pair[1],\n                  (unsigned)tortoise->i, (unsigned)tortoise->period);\n\n    lfs_log_probe(\"RETURN LFS_ERR_OK\");\n    return LFS_ERR_OK;\n}\n"
}