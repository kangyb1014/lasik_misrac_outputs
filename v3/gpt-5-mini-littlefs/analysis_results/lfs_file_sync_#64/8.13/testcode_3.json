{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member 'attrs' is accessed via file->cfg, where cfg is declared as 'const struct lfs_file_config *cfg'. If the lfs_file_config structure declares 'attrs' as a pointer to a non-const type (e.g. 'lfs_attr_t *attrs'), then the expression 'file->cfg->attrs' yields a pointer-to-non-const (the pointer itself is const, but it points to non-const data). That violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when the data is not intended to be modified. To fix, declare the member as pointing to const data (e.g. 'const lfs_attr_t *attrs').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/643.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync_:\n```c\nstatic int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {\n    if (file->flags & LFS_F_ERRED) {\n        // it's not safe to do anything if our file errored\n        return 0;\n    }\n\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        file->flags |= LFS_F_ERRED;\n        return err;\n    }\n\n\n    if ((file->flags & LFS_F_DIRTY) &&\n            !lfs_pair_isnull(file->m.pair)) {\n        // before we commit metadata, we need sync the disk to make sure\n        // data writes don't complete after metadata writes\n        if (!(file->flags & LFS_F_INLINE)) {\n            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);\n            if (err) {\n                return err;\n            }\n        }\n\n        // update dir entry\n        uint16_t type;\n        const void *buffer;\n        lfs_size_t size;\n        struct lfs_ctz ctz;\n        if (file->flags & LFS_F_INLINE) {\n            // inline the whole file\n            type = LFS_TYPE_INLINESTRUCT;\n            buffer = file->cache.buffer;\n            size = file->ctz.size;\n        } else {\n            // update the ctz reference\n            type = LFS_TYPE_CTZSTRUCT;\n            // copy ctz so alloc will work during a relocate\n            ctz = file->ctz;\n            lfs_ctz_tole32(&ctz);\n            buffer = &ctz;\n            size = sizeof(ctz);\n        }\n\n        // commit file data and attributes\n        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(\n                {LFS_MKTAG(type, file->id, size), buffer},\n                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,\n                    file->cfg->attr_count), file->cfg->attrs}));\n        if (err) {\n            file->flags |= LFS_F_ERRED;\n            return err;\n        }\n\n        file->flags &= ~LFS_F_DIRTY;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/643.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {\n    /* probe: entry */\n    lfs_log_probe(\"[lfs_file_sync_] ENTRY: lfs=%p file=%p flags=0x%08x id=%u\",\n            (void *)lfs, (void *)file, (unsigned)file->flags, (unsigned)file->id);\n\n    if (file->flags & LFS_F_ERRED) {\n        /* probe: early exit due to errored file */\n        lfs_log_probe(\"[lfs_file_sync_] EARLY_EXIT: file errored (flags=0x%08x)\", (unsigned)file->flags);\n        return 0;\n    }\n\n    int err = lfs_file_flush(lfs, file);\n    /* probe: after flush */\n    lfs_log_probe(\"[lfs_file_sync_] after lfs_file_flush: err=%d\", err);\n    if (err) {\n        file->flags |= LFS_F_ERRED;\n        lfs_log_probe(\"[lfs_file_sync_] flush error -> set ERRED and return: flags=0x%08x\", (unsigned)file->flags);\n        return err;\n    }\n\n\n    if ((file->flags & LFS_F_DIRTY) &&\n            !lfs_pair_isnull(file->m.pair)) {\n        /* probe: entering dirty & not-null-pair branch */\n        lfs_log_probe(\"[lfs_file_sync_] DIRTY branch: flags=0x%08x pair=%p\",\n                (unsigned)file->flags, (void *)&file->m.pair);\n\n        /* before we commit metadata, we need sync the disk to make sure\n         * data writes don't complete after metadata writes */\n        if (!(file->flags & LFS_F_INLINE)) {\n            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);\n            lfs_log_probe(\"[lfs_file_sync_] after lfs_bd_sync: err=%d\", err);\n            if (err) {\n                return err;\n            }\n        }\n\n        /* update dir entry */\n        uint16_t type;\n        const void *buffer;\n        lfs_size_t size;\n        struct lfs_ctz ctz;\n        if (file->flags & LFS_F_INLINE) {\n            /* inline the whole file */\n            type = LFS_TYPE_INLINESTRUCT;\n            buffer = file->cache.buffer;\n            size = file->ctz.size;\n            lfs_log_probe(\"[lfs_file_sync_] INLINE: type=%u buffer=%p size=%u\",\n                    (unsigned)type, (void *)buffer, (unsigned)size);\n        } else {\n            /* update the ctz reference */\n            type = LFS_TYPE_CTZSTRUCT;\n            /* copy ctz so alloc will work during a relocate */\n            ctz = file->ctz;\n            lfs_ctz_tole32(&ctz);\n            buffer = &ctz;\n            size = sizeof(ctz);\n            lfs_log_probe(\"[lfs_file_sync_] CTZ: type=%u buffer=%p size=%u (ctz.size=%u)\",\n                    (unsigned)type, (void *)buffer, (unsigned)size, (unsigned)file->ctz.size);\n        }\n\n        /* probe: configuration and attributes info (captures potential Rule 8.13 scenario)\n         * We only log pointer/value information and counts to avoid modifying data.\n         * Note: file->cfg is const struct lfs_file_config *cfg; its member attrs may be\n         * a pointer-to-non-const in the target code (the reported violation). Here we\n         * log the pointer value and attr_count to provide evidence without mutating data. */\n        if (file->cfg) {\n            const void *attrs_ptr = (const void *)file->cfg->attrs; /* add const for safe read */\n            lfs_log_probe(\"[lfs_file_sync_] cfg=%p attr_count=%u attrs_ptr=%p\",\n                    (void *)file->cfg, (unsigned)file->cfg->attr_count, attrs_ptr);\n        } else {\n            lfs_log_probe(\"[lfs_file_sync_] cfg=NULL\");\n        }\n\n        /* commit file data and attributes */\n        lfs_log_probe(\"[lfs_file_sync_] calling lfs_dir_commit: m=%p id=%u type=%u size=%u\",\n                (void *)&file->m, (unsigned)file->id, (unsigned)type, (unsigned)size);\n        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(\n                {LFS_MKTAG(type, file->id, size), buffer},\n                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,\n                    file->cfg->attr_count), file->cfg->attrs}));\n        lfs_log_probe(\"[lfs_file_sync_] after lfs_dir_commit: err=%d\", err);\n        if (err) {\n            file->flags |= LFS_F_ERRED;\n            lfs_log_probe(\"[lfs_file_sync_] commit error -> set ERRED and return: flags=0x%08x\", (unsigned)file->flags);\n            return err;\n        }\n\n        file->flags &= ~LFS_F_DIRTY;\n        lfs_log_probe(\"[lfs_file_sync_] commit success -> cleared DIRTY: flags=0x%08x\", (unsigned)file->flags);\n    }\n\n    lfs_log_probe(\"[lfs_file_sync_] EXIT: returning 0\");\n    return 0;\n}\n"
}