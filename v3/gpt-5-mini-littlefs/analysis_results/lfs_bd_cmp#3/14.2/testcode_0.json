{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop's third clause is 'i += diff', but 'diff' is assigned inside the loop body via 'diff = lfs_min(size - i, sizeof(dat));'. Rule 14.2 forbids the third clause from using objects that are modified in the loop body, so using 'diff' (modified inside the loop) to update the loop counter violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_cmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/34.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_cmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_cmp:\n```c\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n        if (res) {\n            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n        }\n    }\n\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_cmp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper. Writes logs to /tmp/logs/34.txt. */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    lfs_log_probe(\"lfs_bd_cmp START: size=%lld hint=%lld block=%lld off=%lld buffer=%p\",\n            (long long)size, (long long)hint, (long long)block, (long long)off, buffer);\n    lfs_log_probe(\"init: diff=%lld\", (long long)diff);\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        lfs_log_probe(\"LOOP ENTRY: i=%lld diff(before)=%lld\", (long long)i, (long long)diff);\n\n        uint8_t dat[8];\n\n        diff = lfs_min(size - i, sizeof(dat));\n        lfs_log_probe(\"diff assigned: diff=%lld size-i=%lld sizeof(dat)=%zu\",\n                (long long)diff, (long long)(size - i), sizeof(dat));\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint - i,\n                block, off + i, &dat, diff);\n        lfs_log_probe(\"lfs_bd_read returned err=%d (hint-i=%lld block=%lld off+i=%lld diff=%lld)\",\n                err, (long long)(hint - i), (long long)block, (long long)(off + i), (long long)diff);\n        if (err) {\n            lfs_log_probe(\"RETURN err=%d\", err);\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n        lfs_log_probe(\"memcmp res=%d (i=%lld diff=%lld)\", res, (long long)i, (long long)diff);\n        if (res) {\n            int ret = res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n            lfs_log_probe(\"RETURN cmp ret=%d\", ret);\n            return ret;\n        }\n\n        lfs_log_probe(\"LOOP EXIT: will increment i by diff -> next i=%lld\", (long long)(i + diff));\n    }\n\n    lfs_log_probe(\"RETURN LFS_CMP_EQ\");\n    return LFS_CMP_EQ;\n}\n"
}