{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read the parameters 'off' (lfs_off_t off) and 'size' (lfs_size_t size) are modified in the fragment (off += diff; size -= diff;). This directly changes function parameters, which violates MISRA C 2023 Rule 17.8. Note: 'data' is a local pointer initialized from parameter 'buffer' and modifying 'data' (data += diff) does not modify the pointer parameter itself, so it is not a violation \u2014 the violations are the modifications of 'off' and 'size'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_cmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/37.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_cmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_cmp:\n```c\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n        if (res) {\n            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n        }\n    }\n\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_cmp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helpers: append logs to /tmp/logs/37.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void lfs_log_bin(const uint8_t *buf, unsigned int len) {\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    for (unsigned int k = 0; k < len; k++) {\n        fprintf(f, \"%02x \", buf[k]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    /* Log entry with initial parameter values */\n    lfs_log_probe(\"lfs_bd_cmp: enter hint=%llu block=%llu off=%llu size=%llu buffer=%p\",\n            (unsigned long long)hint,\n            (unsigned long long)block,\n            (unsigned long long)off,\n            (unsigned long long)size,\n            buffer);\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n\n        /* Log call parameters for lfs_bd_read */\n        lfs_log_probe(\"lfs_bd_cmp: iter i=%llu diff=%llu calling lfs_bd_read(hint-i=%llu, block=%llu, off+i=%llu, buf=%p, size=%llu)\",\n                (unsigned long long)i,\n                (unsigned long long)diff,\n                (unsigned long long)(hint - i),\n                (unsigned long long)block,\n                (unsigned long long)(off + i),\n                (void*)&dat,\n                (unsigned long long)diff);\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            lfs_log_probe(\"lfs_bd_cmp: lfs_bd_read returned err=%d at i=%llu\", err, (unsigned long long)i);\n            return err;\n        }\n\n        /* Log the data read from block */\n        lfs_log_probe(\"lfs_bd_cmp: data read (hex) for i=%llu diff=%llu:\", (unsigned long long)i, (unsigned long long)diff);\n        lfs_log_bin(dat, (unsigned int)diff);\n\n        int res = memcmp(dat, data + i, diff);\n        lfs_log_probe(\"lfs_bd_cmp: memcmp result=%d for i=%llu diff=%llu\", res, (unsigned long long)i, (unsigned long long)diff);\n        if (res) {\n            int ret = res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n            lfs_log_probe(\"lfs_bd_cmp: returning %d (res=%d)\", ret, res);\n            return ret;\n        }\n    }\n\n    lfs_log_probe(\"lfs_bd_cmp: all data equal, returning LFS_CMP_EQ\");\n    return LFS_CMP_EQ;\n}\n"
}