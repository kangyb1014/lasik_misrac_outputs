{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nWithin lfs_bd_read the function parameters 'off' and 'size' are modified (off += diff; size -= diff;) in the loop. This violates MISRA C 2023 Rule 17.8, which forbids modifying function parameters. (Note: advancing the local pointer 'data' is allowed since 'buffer' itself is not modified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_cmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/37.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_cmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_cmp:\n```c\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n        if (res) {\n            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n        }\n    }\n\n    return LFS_CMP_EQ;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_cmp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper. Appends one line to /tmp/logs/37.txt. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nstatic int lfs_bd_cmp(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        const void *buffer, lfs_size_t size) {\n    const uint8_t *data = buffer;\n    lfs_size_t diff = 0;\n\n    /* Log entrance and initial state (do not modify parameters) */\n    lfs_probe_log(\"ENTER lfs_bd_cmp: lfs=%p pcache=%p rcache=%p hint=%lld block=%lld off=%lld buffer=%p size=%lld\",\n            (void *)lfs, (const void *)pcache, (void *)rcache,\n            (long long)hint, (long long)block, (long long)off,\n            buffer, (long long)size);\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n\n        diff = lfs_min(size-i, sizeof(dat));\n\n        /* Log state before read */\n        lfs_probe_log(\"ITER lfs_bd_cmp: i=%lld diff=%lld hint_minus_i=%lld block=%lld off_plus_i=%lld size=%lld\",\n                (long long)i, (long long)diff, (long long)(hint - i), (long long)block, (long long)(off + i), (long long)size);\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            /* Log read error and return */\n            lfs_probe_log(\"ERROR lfs_bd_cmp: lfs_bd_read returned err=%d at i=%lld diff=%lld off_plus_i=%lld\",\n                    err, (long long)i, (long long)diff, (long long)(off + i));\n            return err;\n        }\n\n        int res = memcmp(dat, data + i, diff);\n\n        /* Log comparison result for this chunk */\n        lfs_probe_log(\"CMP lfs_bd_cmp: i=%lld diff=%lld res=%d\",\n                (long long)i, (long long)diff, res);\n\n        if (res) {\n            int out = res < 0 ? LFS_CMP_LT : LFS_CMP_GT;\n            lfs_probe_log(\"RETURN lfs_bd_cmp: comparison non-zero, res=%d returning=%d\",\n                    res, out);\n            return out;\n        }\n    }\n\n    lfs_probe_log(\"RETURN lfs_bd_cmp: all equal returning=%d\", LFS_CMP_EQ);\n    return LFS_CMP_EQ;\n}\n"
}