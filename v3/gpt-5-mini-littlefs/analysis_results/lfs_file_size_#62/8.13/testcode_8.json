{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_file_size_ takes a non-const pointer parameter (lfs_t *lfs) but never uses or modifies the pointed-to object (the code only does (void)lfs; to silence an unused-parameter warning). The pointer could and should be declared as pointing to a const-qualified type (e.g. const lfs_t *lfs). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size_:\n```c\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size_ code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void lfs_log_state(const char *event, lfs_t *lfs, lfs_file_t *file) {\n    FILE *fp = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    /* Log basic pointers and event */\n    (void)fprintf(fp, \"%s: lfs=%p file=%p\\n\", event, (void *)lfs, (void *)file);\n\n    /* If file is available, log its key fields used by this function. Casts to\n       long long/unsigned are for stable printing; they do not modify state. */\n    if (file) {\n        (void)fprintf(fp, \"  flags=0x%08x pos=%lld ctz.size=%lld\\n\",\n                      (unsigned)file->flags,\n                      (long long)file->pos,\n                      (long long)file->ctz.size);\n    }\n\n    (void)fclose(fp);\n}\n\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry and parameters to capture that lfs is passed but unused. */\n    lfs_log_state(\"enter\", lfs, file);\n\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        /* Log decision taken when file is in writing mode. */\n        lfs_log_state(\"branch: writing\", lfs, file);\n        lfs_soff_t result = lfs_max(file->pos, file->ctz.size);\n        lfs_log_state(\"exit: writing\", lfs, file);\n        return result;\n    }\n#endif\n\n    lfs_log_state(\"exit: readonly-or-closed\", lfs, file);\n    return file->ctz.size;\n}\n"
}