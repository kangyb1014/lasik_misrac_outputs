{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as a non-const pointer (lfs_t *lfs) but the parameter is unused/ not modified in lfs_file_size_. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible (e.g. const lfs_t *lfs). Therefore the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size_:\n```c\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable control-flow and state info to /tmp/logs/623.txt */\nstatic void lfs_file_size_log_(const char *stage, lfs_t *lfs, lfs_file_t *file, lfs_soff_t result, int has_result) {\n    FILE *fp = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    fprintf(fp, \"lfs_file_size_: %s\\n\", stage);\n    fprintf(fp, \"  lfs=%p, file=%p\\n\", (void *)lfs, (void *)file);\n\n    if (file) {\n        /* print core file state used by the function */\n        fprintf(fp, \"  file->flags=0x%08x, file->pos=%lld, file->ctz.size=%lld\\n\",\n                (unsigned)file->flags,\n                (long long)file->pos,\n                (long long)file->ctz.size);\n    } else {\n        fprintf(fp, \"  file is NULL\\n\");\n    }\n\n    if (has_result) {\n        fprintf(fp, \"  returning=%lld\\n\", (long long)result);\n    }\n\n    fprintf(fp, \"----\\n\");\n    fclose(fp);\n}\n\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry and inputs */\n    lfs_file_size_log_(\"entry\", lfs, file, 0, 0);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        lfs_soff_t res = lfs_max(file->pos, file->ctz.size);\n        /* Log branch taken and result */\n        lfs_file_size_log_(\"branch WRITING\", lfs, file, res, 1);\n        return res;\n    }\n#endif\n\n    /* Log the default return path */\n    lfs_file_size_log_(\"return CTZ.size\", lfs, file, file->ctz.size, 1);\n    return file->ctz.size;\n}\n"
}