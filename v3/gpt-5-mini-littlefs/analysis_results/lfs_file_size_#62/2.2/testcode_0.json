{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression '(void)lfs;' is an executed no-op whose removal would not affect program behaviour. It exists only to suppress an unused-parameter warning (e.g. when LFS_READONLY makes 'lfs' otherwise unused), so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/622.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size_:\n```c\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size_ code.\n",
  "test_code": "static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    /* Keep the explicit no-op to demonstrate the reported violation scenario. */\n    (void)lfs;\n\n    /*\n     * Probe logging: append a short trace of the control flow and key state\n     * to /tmp/logs/622.txt. We intentionally do not reference 'lfs' anywhere\n     * else so that the (void)lfs; statement remains an executed no-op.\n     *\n     * We declare minimal extern prototypes using void* for FILE* to avoid\n     * requiring inclusion of <stdio.h> here and to reduce likelihood of\n     * conflicting typedefs. These declarations are only for the probe and\n     * should not alter program logic.\n     */\n    extern void *fopen(const char *, const char *);\n    extern int fprintf(void *, const char *, ...);\n    extern int fclose(void *);\n\n    void *logf = fopen(\"/tmp/logs/622.txt\", \"a\");\n    if (logf) {\n        /* Indicate the no-op was executed */\n        (void)fprintf(logf,\n            \"lfs_file_size_ called: (void)lfs executed (lfs parameter intentionally unused)\\n\");\n\n        /* Log file structure pointer and important fields to show control path */\n        (void)fprintf(logf,\n            \"file=%p, flags=0x%08x, pos=%lld, ctz.size=%lld\\n\",\n            (void *)file,\n            (unsigned int)file->flags,\n            (long long)file->pos,\n            (long long)file->ctz.size);\n\n        (void)fclose(logf);\n    }\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n"
}