{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_remove_ the call lfs_dir_find(lfs, &cwd, &path, NULL) passes the address of the function parameter path. lfs_dir_find writes to *path (see line \"*path = name;\"), which modifies the caller's parameter variable path itself (i.e. the pointer), not the object it points to. This is a direct modification of a function parameter and thus violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1007.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove_:\n```c\nstatic int lfs_remove_(lfs_t *lfs, const char *path) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {\n        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;\n    }\n\n    struct lfs_mlist dir;\n    dir.next = lfs->mlist;\n    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t pair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(pair);\n\n        err = lfs_dir_fetch(lfs, &dir.m, pair);\n        if (err) {\n            return err;\n        }\n\n        if (dir.m.count > 0 || dir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        dir.type = 0;\n        dir.id = 0;\n        lfs->mlist = &dir;\n    }\n\n    // delete the entry\n    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));\n    if (err) {\n        lfs->mlist = dir.next;\n        return err;\n    }\n\n    lfs->mlist = dir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(lfs_tag_type3(tag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &cwd, &dir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Probe logging helper. Appends logs to /tmp/logs/1007.txt.\n * Kept minimal so it doesn't change program logic.\n */\nstatic void lfs_probe_log(const char *fmt, ... ) {\n    FILE *f = fopen(\"/tmp/logs/1007.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int lfs_remove_(lfs_t *lfs, const char *path) {\n    /* log entry and parameter state */\n    lfs_probe_log(\"ENTER lfs_remove_: &path=%p, path=%p, path_str=\\\"%s\\\"\\n\",\n            (void *)&path, (void *)path, (path != NULL) ? path : \"(null)\");\n\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        lfs_probe_log(\"lfs_remove_: lfs_fs_forceconsistency returned err=%d\\n\", err);\n        return err;\n    }\n\n    lfs_mdir_t cwd;\n    /*\n     * Log state immediately before calling lfs_dir_find which receives &path.\n     * This is the critical call in the reported violation scenario.\n     */\n    lfs_probe_log(\"BEFORE lfs_dir_find: &path=%p, path=%p, path_str=\\\"%s\\\"\\n\",\n            (void *)&path, (void *)path, (path != NULL) ? path : \"(null)\");\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n\n    /*\n     * Log state immediately after lfs_dir_find. If lfs_dir_find wrote to *(&path)\n     * (i.e. modified the caller's parameter variable \"path\"), the value logged\n     * here for \"path\" will reflect that modification.\n     */\n    lfs_probe_log(\"AFTER lfs_dir_find: tag=%lld, &path=%p, path=%p, path_str=\\\"%s\\\"\\n\",\n            (long long)tag, (void *)&path, (void *)path, (path != NULL) ? path : \"(null)\");\n\n    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {\n        int ret = (tag < 0) ? (int)tag : LFS_ERR_INVAL;\n        lfs_probe_log(\"lfs_remove_: early return due to tag check, tag=%lld, ret=%d\\n\",\n                (long long)tag, ret);\n        return ret;\n    }\n\n    struct lfs_mlist dir;\n    dir.next = lfs->mlist;\n    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t pair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            lfs_probe_log(\"lfs_remove_: lfs_dir_get returned res=%lld\\n\", (long long)res);\n            return (int)res;\n        }\n        lfs_pair_fromle32(pair);\n\n        err = lfs_dir_fetch(lfs, &dir.m, pair);\n        if (err) {\n            lfs_probe_log(\"lfs_remove_: lfs_dir_fetch returned err=%d\\n\", err);\n            return err;\n        }\n\n        if (dir.m.count > 0 || dir.m.split) {\n            lfs_probe_log(\"lfs_remove_: directory not empty (count=%u, split=%u)\\n\",\n                    (unsigned)dir.m.count, (unsigned)dir.m.split);\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            lfs_probe_log(\"lfs_remove_: lfs_fs_preporphans(+1) returned err=%d\\n\", err);\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        dir.type = 0;\n        dir.id = 0;\n        lfs->mlist = &dir;\n    }\n\n    // delete the entry\n    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));\n    if (err) {\n        lfs_probe_log(\"lfs_remove_: lfs_dir_commit returned err=%d, cleaning mlist\\n\", err);\n        lfs->mlist = dir.next;\n        return err;\n    }\n\n    lfs->mlist = dir.next;\n    lfs_probe_log(\"lfs_remove_: after commit, gstate_hasorphans=%d\\n\",\n            (int)lfs_gstate_hasorphans(&lfs->gstate));\n\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(lfs_tag_type3(tag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            lfs_probe_log(\"lfs_remove_: lfs_fs_preporphans(-1) returned err=%d\\n\", err);\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n        if (err) {\n            lfs_probe_log(\"lfs_remove_: lfs_fs_pred returned err=%d\\n\", err);\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &cwd, &dir.m);\n        if (err) {\n            lfs_probe_log(\"lfs_remove_: lfs_dir_drop returned err=%d\\n\", err);\n            return err;\n        }\n    }\n\n    lfs_probe_log(\"EXIT lfs_remove_: returning 0, final &path=%p, path=%p, path_str=\\\"%s\\\"\\n\",\n            (void *)&path, (void *)path, (path != NULL) ? path : \"(null)\");\n\n    return 0;\n}\n"
}