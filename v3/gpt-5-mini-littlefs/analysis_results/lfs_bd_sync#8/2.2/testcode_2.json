{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe explicit cast-to-void expression \u201c(void)lfs;\u201d is an executed no-op whose removal would not affect program behaviour. It exists only to suppress an unused-parameter warning, so it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/82.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_sync:\n```c\nstatic int lfs_bd_sync(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    lfs_cache_drop(lfs, rcache);\n\n    int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n    if (err) {\n        return err;\n    }\n\n    err = lfs->cfg->sync(lfs->cfg);\n    LFS_ASSERT(err <= 0);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/82.txt */\nstatic void lfs_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int lfs_bd_sync(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    /* Log entry and parameter state */\n    lfs_logf(\"ENTER lfs_bd_sync: lfs=%p, pcache=%p, rcache=%p, validate=%d\",\n            (void *)lfs, (void *)pcache, (void *)rcache, validate ? 1 : 0);\n\n    lfs_cache_drop(lfs, rcache);\n    lfs_logf(\"Called lfs_cache_drop(lfs, rcache)\");\n\n    int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n    lfs_logf(\"Called lfs_bd_flush(lfs, pcache, rcache, validate) -> err=%d\", err);\n    if (err) {\n        lfs_logf(\"EARLY RETURN from lfs_bd_sync with err=%d\", err);\n        return err;\n    }\n\n    /* Call the device sync and record its result */\n    err = lfs->cfg->sync(lfs->cfg);\n    lfs_logf(\"Called lfs->cfg->sync(lfs->cfg) -> err=%d\", err);\n\n    LFS_ASSERT(err <= 0);\n\n    lfs_logf(\"EXIT lfs_bd_sync returning err=%d\", err);\n    return err;\n}\n"
}