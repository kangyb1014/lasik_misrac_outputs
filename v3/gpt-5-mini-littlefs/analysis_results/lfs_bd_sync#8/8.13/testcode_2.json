{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter lfs is not modified in lfs_cache_drop and is only used in a (void)lfs cast, so it could be declared as const lfs_t *lfs. Declaring it non-const violates MISRA C 2023 Rule 8.13 which requires pointer parameters to be const-qualified whenever possible. (The rcache parameter is legitimately non-const because the function writes rcache->block.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_sync:\n```c\nstatic int lfs_bd_sync(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    lfs_cache_drop(lfs, rcache);\n\n    int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n    if (err) {\n        return err;\n    }\n\n    err = lfs->cfg->sync(lfs->cfg);\n    LFS_ASSERT(err <= 0);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe helper: logs control flow and key pointer/state info to /tmp/logs/83.txt */\nstatic void lfs_dbg_log(const char *stage, lfs_t *lfs, lfs_cache_t *pcache,\n        lfs_cache_t *rcache, bool validate, int err) {\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, pointer identities, validate flag and error code */\n    fprintf(f, \"%s: lfs=%p pcache=%p rcache=%p validate=%d err=%d\\n\",\n            stage, (void *)lfs, (void *)pcache, (void *)rcache,\n            validate ? 1 : 0, err);\n    fflush(f);\n    fclose(f);\n}\n\nstatic int lfs_bd_sync(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    /* Entry log */\n    lfs_dbg_log(\"enter lfs_bd_sync\", lfs, pcache, rcache, validate, 0);\n\n    /* Log just before calling lfs_cache_drop to capture that lfs is\n       passed but not modified by that call (investigation target). */\n    lfs_dbg_log(\"before lfs_cache_drop\", lfs, pcache, rcache, validate, 0);\n    lfs_cache_drop(lfs, rcache);\n    lfs_dbg_log(\"after lfs_cache_drop\", lfs, pcache, rcache, validate, 0);\n\n    int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n    lfs_dbg_log(\"after lfs_bd_flush\", lfs, pcache, rcache, validate, err);\n    if (err) {\n        lfs_dbg_log(\"return early from lfs_bd_sync (err)\", lfs, pcache, rcache, validate, err);\n        return err;\n    }\n\n    err = lfs->cfg->sync(lfs->cfg);\n    lfs_dbg_log(\"after cfg->sync\", lfs, pcache, rcache, validate, err);\n    LFS_ASSERT(err <= 0);\n\n    lfs_dbg_log(\"exit lfs_bd_sync\", lfs, pcache, rcache, validate, err);\n    return err;\n}\n"
}