{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the third clause 'i += diff' uses the object 'diff', which is assigned within the loop body (diff = lfs_min(...)). MISRA C 2023 Rule 14.2 clause 3 requires the third clause to modify only the loop counter and not use objects that are modified in the loop body, so this for-loop is not well-formed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/84.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_sync:\n```c\nstatic int lfs_bd_sync(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    lfs_cache_drop(lfs, rcache);\n\n    int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n    if (err) {\n        return err;\n    }\n\n    err = lfs->cfg->sync(lfs->cfg);\n    LFS_ASSERT(err <= 0);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/84.txt. */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/84.txt\", \"a\");\n    if (!f) {\n        /* If logging fails, silently continue to preserve original behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int lfs_bd_sync(lfs_t *lfs,\n        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {\n    /* Log entry and input state */\n    lfs_log_probe(\"lfs_bd_sync: ENTER lfs=%p pcache=%p rcache=%p validate=%d\",\n            (void*)lfs, (void*)pcache, (void*)rcache, (int)validate);\n\n    lfs_cache_drop(lfs, rcache);\n    lfs_log_probe(\"lfs_bd_sync: after lfs_cache_drop rcache=%p\", (void*)rcache);\n\n    int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n    lfs_log_probe(\"lfs_bd_sync: after lfs_bd_flush err=%d\", err);\n    if (err) {\n        lfs_log_probe(\"lfs_bd_sync: RETURN early err=%d\", err);\n        return err;\n    }\n\n    lfs_log_probe(\"lfs_bd_sync: calling lfs->cfg->sync with cfg=%p\", (void*)lfs->cfg);\n    err = lfs->cfg->sync(lfs->cfg);\n    lfs_log_probe(\"lfs_bd_sync: lfs->cfg->sync returned err=%d\", err);\n    LFS_ASSERT(err <= 0);\n    lfs_log_probe(\"lfs_bd_sync: RETURN final err=%d\", err);\n    return err;\n}\n"
}