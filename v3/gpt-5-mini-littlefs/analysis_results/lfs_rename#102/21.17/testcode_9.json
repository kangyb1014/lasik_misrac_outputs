{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe inline function calls strcspn(path, \"/\") with no explicit bound or prior guarantee that the memory pointed to by path contains a terminating '\\0'. If a caller passes a char array or a pointer into a buffer that is not null-terminated within its object bounds (for example, a fixed-size buffer filled exactly to capacity without a terminating '\\0', or an interior pointer whose remaining region lacks a '\\0'), strcspn may read past the end of the object and access out-of-bounds memory. This can also lead to out-of-bounds indexing in callers such as lfs_path_isdir or lfs_path_islast which index path[namelen] or path[namelen + ...].\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1029.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper: append control-flow and pointer state to the log file.\n   This deliberately avoids dereferencing the provided path pointers to prevent\n   introducing new out-of-bounds accesses; it logs pointer values and NULLness\n   only. */\nstatic void lfs_log_probe(const char *stage, void *lfs_ptr,\n                          const char *oldpath, const char *newpath,\n                          int err)\n{\n    FILE *f = fopen(\"/tmp/logs/1029.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] lfs_rename %s: lfs=%p oldpath=%p newpath=%p err=%d\\n\",\n            (long)t, stage, lfs_ptr, (const void*)oldpath,\n            (const void*)newpath, err);\n\n    if (oldpath == NULL) {\n        fprintf(f, \"  oldpath: NULL\\n\");\n    } else {\n        fprintf(f, \"  oldpath: non-NULL (pointer only; contents NOT read)\\n\");\n    }\n\n    if (newpath == NULL) {\n        fprintf(f, \"  newpath: NULL\\n\");\n    } else {\n        fprintf(f, \"  newpath: non-NULL (pointer only; contents NOT read)\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure and early return. */\n        lfs_log_probe(\"lock-failed\", (void*)lfs, oldpath, newpath, err);\n        return err;\n    }\n\n    /* Log entry to lfs_rename with pointer state (without dereferencing strings). */\n    lfs_log_probe(\"entry\", (void*)lfs, oldpath, newpath, 0);\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    /* Log result of the inner rename operation. */\n    lfs_log_probe(\"after-rename_\", (void*)lfs, oldpath, newpath, err);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log final exit. */\n    lfs_log_probe(\"exit\", (void*)lfs, oldpath, newpath, err);\n    return err;\n}\n"
}