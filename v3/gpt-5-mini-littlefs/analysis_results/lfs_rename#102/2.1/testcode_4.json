{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0), so err is always 0. Therefore the conditional 'if (err) { return err; }' can never be true and the return statement inside the if is unreachable. This constitutes unreachable code in the project and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1021.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers for reproducing MISRA Rule 2.1 scenario.\n   Logs are appended to /tmp/logs/1021.txt so that other agents can\n   inspect control flow and state values (notably the value of err\n   after LFS_LOCK).\n\n   These helpers preserve the original logic of lfs_rename and only\n   add non-intrusive logging. */\nstatic void lfs_1021_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1021.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void lfs_1021_log_state(const char *stage, const void *lfs_ptr,\n                               const char *oldpath, const char *newpath, int err)\n{\n    lfs_1021_logf(\"[1021] %s: lfs=%p old=\\\"%s\\\" new=\\\"%s\\\" err=%d\",\n                  stage, lfs_ptr,\n                  (oldpath != NULL) ? oldpath : \"(null)\",\n                  (newpath != NULL) ? newpath : \"(null)\",\n                  err);\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the immediate result of the lock so we can demonstrate\n       whether err can ever be non-zero (the reported violation).\n       This preserves original program logic: we do not change any\n       side-effects, only add logging. */\n    lfs_1021_log_state(\"after_lock\", (void*)lfs, oldpath, newpath, err);\n\n    if (err) {\n        /* Log that the error branch is taken and the value being\n           returned. This is normally unreachable if the macro\n           expands to ( (void)cfg, 0 ). */\n        lfs_1021_log_state(\"if_err_branch_taken\", (void*)lfs, oldpath, newpath, err);\n        return err;\n    } else {\n        /* Log that the branch was not taken (the typical case in the\n           reported scenario). */\n        lfs_1021_log_state(\"if_err_branch_not_taken\", (void*)lfs, oldpath, newpath, err);\n    }\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    lfs_1021_logf(\"[1021] calling lfs_rename_()\");\n    err = lfs_rename_(lfs, oldpath, newpath);\n    lfs_1021_log_state(\"after_rename_\", (void*)lfs, oldpath, newpath, err);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_1021_log_state(\"returning\", (void*)lfs, oldpath, newpath, err);\n    return err;\n}\n"
}