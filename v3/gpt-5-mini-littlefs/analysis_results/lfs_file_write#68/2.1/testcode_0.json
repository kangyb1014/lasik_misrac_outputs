{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0), i.e. a constant zero. In lfs_file_write this makes \"int err = LFS_LOCK(lfs->cfg); if (err) { return err; }\" always evaluate err == 0, so the conditional branch (the return on error) is never executed. That branch is therefore unreachable code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/681.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    /* Probe helper: append a concise snapshot to /tmp/logs/681.txt. */\n    static void probe_log(const char *stage, lfs_t *lfs_p, lfs_file_t *file_p,\n            const void *buffer_p, lfs_size_t size_p, int err_p, lfs_ssize_t res_p) {\n        FILE *f = fopen(\"/tmp/logs/681.txt\", \"a\");\n        if (!f) { return; }\n        /* Print stage and key state. Use same PRI macros as project for sizes. */\n        fprintf(f, \"%s: lfs=%p file=%p buffer=%p size=%\" PRIu32 \" err=%d res=%\" PRId32 \"\\n\",\n                stage, (void*)lfs_p, (void*)file_p, buffer_p, size_p, err_p, res_p);\n        fclose(f);\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log the result of LFS_LOCK and relevant pointers so callers can observe\n       that LFS_LOCK returns 0 (making the error branch effectively unreachable). */\n    probe_log(\"after LFS_LOCK\", lfs, file, buffer, size, err, (lfs_ssize_t)0);\n\n    if (err) {\n        /* Log the fact that we would return due to error (this branch is expected\n           to be unreachable for the reported scenario). */\n        probe_log(\"LFS_LOCK non-zero: returning err\", lfs, file, buffer, size, err, (lfs_ssize_t)err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    /* Log result before unlocking so the log shows the full control path and\n       the value returned by the real write implementation. */\n    probe_log(\"before LFS_UNLOCK\", lfs, file, buffer, size, 0, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log after unlock to show the unlocked state and final return value. */\n    probe_log(\"after LFS_UNLOCK\", lfs, file, buffer, size, 0, res);\n\n    return res;\n}\n"
}