{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(lfs->cfg) is defined as ((void)cfg,0), so err is always assigned the constant 0. Therefore the controlling expression 'if (err)' is invariant (always false), which violates MISRA C 2023 Rule 14.3 (no applicable exception applies).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/685.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: appends human-readable logs to /tmp/logs/685.txt. */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/685.txt\", \"a\");\n    if (f == (FILE*)0) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    /* Preserve original lock semantics. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and the result of the lock to reproduce the invariant. */\n    lfs_log_probe(\"ENTER lfs_file_write: lfs=%p file=%p buffer=%p size=%lu\",\n            (void*)lfs, (void*)file, buffer, (unsigned long)size);\n    lfs_log_probe(\"LFS_LOCK returned err=%d\", err);\n\n    if (err) {\n        lfs_log_probe(\"LFS_LOCK indicated error, returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_log_probe(\"Calling lfs_file_write_ with lfs=%p file=%p size=%lu\",\n            (void*)lfs, (void*)file, (unsigned long)size);\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    lfs_log_probe(\"lfs_file_write_ returned res=%ld\", (long)res);\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"LFS_UNLOCK called for lfs=%p\", (void*)lfs);\n\n    return res;\n}\n"
}