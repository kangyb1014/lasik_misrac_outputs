{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0). When called (e.g. int err = LFS_LOCK(lfs->cfg);) the sub-expression (void)cfg is evaluated but has no effect; removing that evaluation would not change program behaviour (the result 0 is still returned). The executed, effectless cast/reads of cfg therefore constitute dead code and violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/682.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers to log control flow and state for the LFS_LOCK evaluation\n * Writes logs to \"/tmp/logs/682.txt\".\n */\nstatic void lfs_probe_log_cfg(const char *stage, const void *cfg) {\n    FILE *f = fopen(\"/tmp/logs/682.txt\", \"a\");\n    if (f) {\n        /* Log the stage and the cfg pointer value so callers can correlate\n         * when cfg was observed in relation to LFS_LOCK invocation.\n         */\n        fprintf(f, \"%s: cfg=%p\\n\", stage, cfg);\n        fclose(f);\n    }\n}\n\nstatic void lfs_probe_log_lock_result(const char *stage, const void *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/682.txt\", \"a\");\n    if (f) {\n        /* Log the result of LFS_LOCK and cfg again to show there was no visible\n         * effect from evaluating the cfg sub-expression inside the macro.\n         */\n        fprintf(f, \"%s: cfg=%p err=%d\\n\", stage, cfg, err);\n        fclose(f);\n    }\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    /* Log cfg prior to invoking LFS_LOCK, so we can correlate the pointer\n     * value with the lock invocation and its result. This read is only for\n     * probing and preserves original behaviour.\n     */\n    lfs_probe_log_cfg(\"before LFS_LOCK\", (void*)lfs->cfg);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log outcome of LFS_LOCK and cfg again. The scenario of interest is that\n     * LFS_LOCK evaluates (void)cfg but returns 0: we log both the cfg pointer\n     * and the returned err so other agents can reproduce and inspect the\n     * sequence and state.\n     */\n    lfs_probe_log_lock_result(\"after LFS_LOCK\", (void*)lfs->cfg, err);\n\n    if (err) {\n        /* Log early return due to lock failure (non-zero err). */\n        lfs_probe_log_lock_result(\"LFS_LOCK returned non-zero, returning\", (void*)lfs->cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    /* Log before unlocking to capture full control flow for the write call. */\n    lfs_probe_log_cfg(\"before LFS_UNLOCK\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log_cfg(\"exit lfs_file_write\", (void*)lfs->cfg);\n    return res;\n}\n"
}