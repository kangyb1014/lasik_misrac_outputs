{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'buffer' which is declared as 'const void *' in lfs_file_write to the helper lfs_file_write_. If lfs_file_write_ is prototyped to take a non-const pointer (e.g. 'void *buffer'), this call discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. The specific violation is at the call: lfs_file_write_(lfs, file, buffer, size); where a const-qualified pointer is passed to a parameter that is not const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/683.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/683.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\n/* Probe state dump: writes pointers, size and first up-to-16 bytes of buffer (hex) */\nstatic void probe_log_state(void *lfs, void *file, const void *buffer, unsigned long size, const char *stage)\n{\n    FILE *fp = fopen(\"/tmp/logs/683.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    fprintf(fp, \"%s: lfs=%p file=%p buffer=%p size=%lu\\n\",\n            stage, lfs, file, buffer, size);\n\n    if (buffer != NULL && size > 0) {\n        const unsigned char *b = (const unsigned char *)buffer;\n        unsigned long show = (size < 16UL) ? size : 16UL;\n        fprintf(fp, \"%s: first_%lu_bytes_hex=\", stage, show);\n        for (unsigned long i = 0; i < show; i++) {\n            fprintf(fp, \"%02X\", b[i]);\n            if (i + 1 < show) {\n                fputc(' ', fp);\n            }\n        }\n        fputc('\\n', fp);\n    }\n\n    fclose(fp);\n}\n\n/* Modified lfs_file_write with probes inserted. Original logic preserved. */\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the early return and reason */\n        probe_log(\"lfs_file_write: lock failed, err=%d\", err);\n        return err;\n    }\n\n    /* Trace as before */\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n\n    /* Log entry state (includes buffer pointer and first bytes) */\n    probe_log_state((void*)lfs, (void*)file, buffer, (unsigned long)size, \"ENTER\");\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log just before calling helper to capture the control flow */\n    probe_log(\"lfs_file_write: about to call lfs_file_write_ (buffer=%p, size=%lu)\",\n            buffer, (unsigned long)size);\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    /* Log result and exit state */\n    probe_log(\"lfs_file_write -> %ld\", (long)res);\n    probe_log_state((void*)lfs, (void*)file, buffer, (unsigned long)size, \"EXIT\");\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}