{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts 'file' to a non-const pointer type when only a read/check operation is performed. Specifically: LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); likely calls a function that merely checks whether the entry is open, so the parameter should be a pointer to const (e.g. const struct lfs_mlist *). Casting to (struct lfs_mlist*) prevents using a const-qualified pointer and violates the guideline that pointers should be const-qualified whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log the usage and the cast that is reported as a potential violation.\n   Writes to /tmp/logs/683.txt so other agents can inspect the control flow/state without\n   changing the original logic of lfs_file_write. */\nstatic void lfs_log_probe_mlist_cast(const char *stage, lfs_t *lfs, lfs_file_t *file) {\n    FILE *f = fopen(\"/tmp/logs/683.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log the stage, raw pointer values and the explicit cast target address (same as file).\n       This captures the fact that the code casts file to (struct lfs_mlist*) when calling\n       lfs_mlist_isopen in the original implementation. */\n    fprintf(f, \"%s: lfs=%p, file=%p, cast_to_struct_lfs_mlist=%p\\n\",\n            stage, (void*)lfs, (void*)file, (void*)file);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n\n    /* Probe just before the assertion that performs the cast. This logs the\n       pointer values and the fact that the same pointer is cast to\n       (struct lfs_mlist*). We do not call lfs_mlist_isopen here to avoid\n       changing any potential side-effects or timing; we only record the\n       control-flow and state relevant to the reported violation. */\n    lfs_log_probe_mlist_cast(\"pre-assert\", lfs, file);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log that the assertion was reached (i.e. passed in builds where\n       LFS_ASSERT does not abort). */\n    lfs_log_probe_mlist_cast(\"post-assert\", lfs, file);\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    /* Log the result of the write operation for completeness. */\n    {\n        FILE *f = fopen(\"/tmp/logs/683.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"result: res=%\" PRId32 \"\\n\", res);\n            fclose(f);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}"
}