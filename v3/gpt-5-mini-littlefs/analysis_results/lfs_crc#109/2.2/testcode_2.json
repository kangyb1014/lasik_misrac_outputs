{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe right-shift by zero in (data[i] >> 0) is a no-op: it is executed but can be removed without changing program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_crc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1092.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_crc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_crc:\n```c\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = buffer;\n\n    for (size_t i = 0; i < size; i++) {\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];\n    }\n\n    return crc;\n}\n```\n</target_code>\nPlease provide the modified lfs_crc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n\nstatic void lfs_crc_log(size_t index, uint8_t data_byte,\n                        uint32_t before_crc, uint8_t sh0, unsigned idx1,\n                        uint32_t after_first, uint8_t sh4, unsigned idx2,\n                        uint32_t after_second) {\n    FILE *f = fopen(\"/tmp/logs/1092.txt\", \"a\");\n    if (f) {\n        /* Log the control path and state relevant to the two shifts and CRC updates. */\n        fprintf(f,\n                \"i=%zu data=0x%02x before_crc=0x%08\" PRIx32\n                \" sh0=0x%02x idx1=%u after_first=0x%08\" PRIx32\n                \" sh4=0x%02x idx2=%u after=0x%08\" PRIx32 \"\\n\",\n                index,\n                (unsigned)data_byte,\n                before_crc,\n                (unsigned)sh0, idx1, after_first,\n                (unsigned)sh4, idx2, after_second);\n        fclose(f);\n    }\n}\n\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = (const uint8_t *)buffer;\n\n    for (size_t i = 0; i < size; i++) {\n        /* Preserve original logic while capturing state for logging. */\n        uint8_t v = data[i];\n\n        uint32_t before_crc = crc;\n\n        /* These compute the same values as the original expressions:\n         * (data[i] >> 0) and (data[i] >> 4). The right-shift by zero is a no-op.\n         */\n        uint8_t sh0 = (uint8_t)(v >> 0);\n        unsigned idx1 = (unsigned)((before_crc ^ sh0) & 0xf);\n        crc = (crc >> 4) ^ rtable[idx1];\n\n        uint32_t after_first = crc;\n\n        uint8_t sh4 = (uint8_t)(v >> 4);\n        unsigned idx2 = (unsigned)((crc ^ sh4) & 0xf);\n        crc = (crc >> 4) ^ rtable[idx2];\n\n        /* Log the detailed per-iteration state to allow other agents to reproduce\n         * and gather evidence that the (data[i] >> 0) shift is a no-op.\n         */\n        lfs_crc_log(i, v, before_crc, sh0, idx1, after_first, sh4, idx2, crc);\n    }\n\n    return crc;\n}\n"
}