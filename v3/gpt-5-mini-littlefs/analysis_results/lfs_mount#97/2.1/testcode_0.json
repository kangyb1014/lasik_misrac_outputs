{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK(cfg) macro is defined as '((void)cfg,0)', so err is always 0; therefore the 'if (err) { return err; }' branch can never be taken, making that return statement unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/971.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe functions to log control flow and state for lfs_mount. */\nstatic void lfs_probe_log_state(const void *lfs_ptr, const void *cfg_ptr,\n                                const char *stage, int err) {\n    FILE *f = fopen(\"/tmp/logs/971.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Basic information: stage, pointers and error value. */\n    fprintf(f, \"[lfs_mount] stage=%s lfs=%p cfg=%p err=%d\\n\",\n            stage, lfs_ptr, cfg_ptr, err);\n\n    /* Attempt to print a couple of cfg fields if possible. We can't\n       rely on the exact struct definition here, so guard dereference. */\n    if (cfg_ptr) {\n        /* We avoid dereferencing unknown-sized fields here except\n           for a common pattern: a context pointer at the start of the\n           config structure in many implementations. The original\n           lfs_mount uses cfg->context in LFS_TRACE; if that field\n           exists, this prints it. If it doesn't, this compile will\n           fail when building in the real project (where struct is\n           defined) \u2014 but then the field exists in that environment.\n        */\n        const void *context = *((const void * const *)cfg_ptr);\n        fprintf(f, \"  cfg->context=%p\\n\", context);\n    }\n\n    fclose(f);\n}\n\n/* Modified lfs_mount with inserted probes. The original logic is\n   preserved exactly; only non-intrusive logging calls are added. */\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Log entry before attempting to lock */\n    lfs_probe_log_state((void*)lfs, (void*)cfg, \"entry_before_lock\", 0);\n\n    int err = LFS_LOCK(cfg);\n\n    /* Log the return value from LFS_LOCK to capture if it's ever non-zero */\n    lfs_probe_log_state((void*)lfs, (void*)cfg, \"after_lock\", err);\n\n    if (err) {\n        /* If this branch is ever taken, log evidence and return as before. */\n        lfs_probe_log_state((void*)lfs, (void*)cfg, \"lock_failed_return\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log just before calling the internal mount implementation */\n    lfs_probe_log_state((void*)lfs, (void*)cfg, \"before_mount_call\", 0);\n\n    err = lfs_mount_(lfs, cfg);\n\n    /* Log result from lfs_mount_ */\n    lfs_probe_log_state((void*)lfs, (void*)cfg, \"after_mount_call\", err);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    /* Final exit log with the returned error code */\n    lfs_probe_log_state((void*)lfs, (void*)cfg, \"exit\", err);\n\n    return err;\n}\n"
}