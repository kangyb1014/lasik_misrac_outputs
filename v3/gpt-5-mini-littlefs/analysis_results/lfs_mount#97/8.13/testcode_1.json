{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct lfs_config declares read_buffer, prog_buffer or lookahead_buffer as pointers to non-const (e.g. void *read_buffer; void *prog_buffer; void *lookahead_buffer;), then Rule 8.13 is violated. The code only reads/prints these buffers (does not modify pointees), so the members should be const-qualified (e.g. const void *read_buffer, const void *prog_buffer, const void *lookahead_buffer) to indicate the pointees are not to be modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: logs state of lfs_config to a file for reproducing the violation scenario.\n   Writes to /tmp/logs/973.txt in append mode. Does not alter cfg or its buffers. */\nstatic void lfs_probe_log_state(const struct lfs_config *cfg, const char *stage) {\n    if (cfg == NULL || stage == NULL) {\n        return;\n    }\n\n    FILE *f = fopen(\"/tmp/logs/973.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"--- lfs_probe (%s) ---\\n\", stage);\n    fprintf(f, \"cfg=%p, context=%p\\n\", (void*)cfg, (void*)cfg->context);\n\n    /* function pointers (printed via uintptr_t to avoid direct function-pointer->void* cast warnings) */\n    fprintf(f, \"read=%p, prog=%p, erase=%p, sync=%p\\n\",\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n\n    /* buffer pointers (may be non-const in target code) */\n    fprintf(f, \"read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n            (const void*)cfg->read_buffer, (const void*)cfg->prog_buffer,\n            (const void*)cfg->lookahead_buffer);\n\n    /* sizes and limits */\n    fprintf(f, \"read_size=%llu, prog_size=%llu, block_size=%llu, block_count=%llu\\n\",\n            (unsigned long long)cfg->read_size, (unsigned long long)cfg->prog_size,\n            (unsigned long long)cfg->block_size, (unsigned long long)cfg->block_count);\n    fprintf(f, \"block_cycles=%lld, cache_size=%llu, lookahead_size=%llu\\n\",\n            (long long)cfg->block_cycles, (unsigned long long)cfg->cache_size,\n            (unsigned long long)cfg->lookahead_size);\n    fprintf(f, \"name_max=%llu, file_max=%llu, attr_max=%llu\\n\",\n            (unsigned long long)cfg->name_max, (unsigned long long)cfg->file_max,\n            (unsigned long long)cfg->attr_max);\n\n    fprintf(f, \"-------------------------\\n\\n\");\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log early exit */\n        FILE *f = fopen(\"/tmp/logs/973.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_mount: LFS_LOCK failed -> %d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* Log entry state */\n    lfs_probe_log_state(cfg, \"entry\");\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Capture buffer pointer values before calling lfs_mount_ */\n    const void *read_before = (const void*)cfg->read_buffer;\n    const void *prog_before = (const void*)cfg->prog_buffer;\n    const void *lookahead_before = (const void*)cfg->lookahead_buffer;\n\n    lfs_probe_log_state(cfg, \"before_lfs_mount_\");\n\n    err = lfs_mount_(lfs, cfg);\n\n    /* Capture buffer pointer values after calling lfs_mount_ */\n    const void *read_after = (const void*)cfg->read_buffer;\n    const void *prog_after = (const void*)cfg->prog_buffer;\n    const void *lookahead_after = (const void*)cfg->lookahead_buffer;\n\n    /* Log comparison and result to help show whether pointers/pointees were modified */\n    FILE *f = fopen(\"/tmp/logs/973.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"lfs_mount: returned err=%d\\n\", err);\n        fprintf(f, \"read_buffer before=%p after=%p %s\\n\",\n                read_before, read_after,\n                (read_before == read_after) ? \"(unchanged)\" : \"(changed)\");\n        fprintf(f, \"prog_buffer  before=%p after=%p %s\\n\",\n                prog_before, prog_after,\n                (prog_before == prog_after) ? \"(unchanged)\" : \"(changed)\");\n        fprintf(f, \"lookahead_buffer before=%p after=%p %s\\n\",\n                lookahead_before, lookahead_after,\n                (lookahead_before == lookahead_after) ? \"(unchanged)\" : \"(changed)\");\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}