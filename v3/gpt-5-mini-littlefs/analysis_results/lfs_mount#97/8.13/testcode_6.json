{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the const-qualified pointer cfg (type: const struct lfs_config *) to a non-const void * by writing (void*)cfg. This discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. A correct approach is to preserve constness (for example cast to const void * or change the LFS_TRACE prototype to accept const void *), instead of using (void*)cfg.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "static void lfs_mount_probe(const struct lfs_config *cfg, const char *where, int err) {\n    /* Probe function that logs state without discarding const qualifiers. */\n    FILE *f = fopen(\"/tmp/logs/973.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"--- lfs_mount probe: %s ---\\n\", where);\n    fprintf(f, \"cfg (declared const) = %p\\n\", (const void *)cfg);\n    fprintf(f, \"cfg->context = %p\\n\", cfg->context);\n\n    /* Print function pointers as pointer-sized integers cast back to const void* for logging.\n       This preserves const-qualification (we do not cast cfg to non-const). */\n    fprintf(f, \"read=%p, prog=%p, erase=%p, sync=%p\\n\",\n            (const void *)(uintptr_t)cfg->read,\n            (const void *)(uintptr_t)cfg->prog,\n            (const void *)(uintptr_t)cfg->erase,\n            (const void *)(uintptr_t)cfg->sync);\n\n    fprintf(f, \"read_size=%llu, prog_size=%llu, block_size=%llu, block_count=%llu\\n\",\n            (unsigned long long)cfg->read_size,\n            (unsigned long long)cfg->prog_size,\n            (unsigned long long)cfg->block_size,\n            (unsigned long long)cfg->block_count);\n\n    fprintf(f, \"block_cycles=%lld, cache_size=%llu, lookahead_size=%llu\\n\",\n            (long long)cfg->block_cycles,\n            (unsigned long long)cfg->cache_size,\n            (unsigned long long)cfg->lookahead_size);\n\n    fprintf(f, \"read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n\n    fprintf(f, \"name_max=%llu, file_max=%llu, attr_max=%llu\\n\",\n            (unsigned long long)cfg->name_max,\n            (unsigned long long)cfg->file_max,\n            (unsigned long long)cfg->attr_max);\n\n    fprintf(f, \"err (probe) = %d\\n\", err);\n    fprintf(f, \"-------------------------------\\n\");\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log the lock failure and return. */\n        lfs_mount_probe(cfg, \"after_LFS_LOCK_failure\", err);\n        return err;\n    }\n\n    /* Log state before calling LFS_TRACE (we keep the original LFS_TRACE call unchanged).\n       Note: we preserve constness in our probe logging (we do NOT cast cfg to non-const). */\n    lfs_mount_probe(cfg, \"before_LFS_TRACE\", 0);\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log state immediately after the LFS_TRACE call (demonstrates the same cfg pointer and values).\n       This provides a traceable sequence in /tmp/logs/973.txt that can be used as evidence. */\n    lfs_mount_probe(cfg, \"after_LFS_TRACE_before_lfs_mount_\", 0);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n\n    /* Final probe with result. */\n    lfs_mount_probe(cfg, \"after_lfs_mount_\", err);\n\n    LFS_UNLOCK(cfg);\n    return err;\n}"
}