{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns a user-supplied lookahead_buffer (cfg->lookahead_buffer) directly to lfs->lookahead.buffer without validating that the provided buffer is at least cfg->lookahead_size bytes. Later code may call standard library functions (e.g. memset/memcpy or other string.h functions) using lfs->lookahead.buffer together with cfg->lookahead_size. If the user-supplied buffer is smaller than cfg->lookahead_size, those calls would access beyond the bounds of the object and violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/979.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/979.txt\n * These helpers try to preserve the original logic of lfs_mount and\n * only add side-effect logging. They do not change return values or\n * behavior. They are defensive: if logging cannot proceed (e.g. file\n * can't be opened) they silently fail so as not to alter program flow.\n */\nstatic void lfs_mount_log_pre(const struct lfs_config *cfg, const void *lfs)\n{\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    char buf[64] = \"\";\n    if (t != (time_t)-1) {\n        struct tm tm;\n        if (localtime_r(&t, &tm) != NULL) {\n            strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm);\n        }\n    }\n\n    fprintf(f, \"[%s] PRE lfs_mount: lfs=%p cfg=%p\\n\", buf, lfs, (const void*)cfg);\n    if (cfg == NULL) {\n        fprintf(f, \"[%s]   cfg is NULL\\n\", buf);\n        fclose(f);\n        return;\n    }\n\n    /* Log configuration items relevant to lookahead usage */\n    fprintf(f, \"[%s]   cfg->context=%p\\n\", buf, cfg->context);\n    fprintf(f, \"[%s]   cfg->read=%p, cfg->prog=%p, cfg->erase=%p, cfg->sync=%p\\n\",\n            buf, (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n\n    fprintf(f, \"[%s]   cfg->read_size=%\" PRIu32 \", cfg->prog_size=%\" PRIu32 \"\\n\",\n            buf, cfg->read_size, cfg->prog_size);\n    fprintf(f, \"[%s]   cfg->block_size=%\" PRIu32 \", cfg->block_count=%\" PRIu32 \"\\n\",\n            buf, cfg->block_size, cfg->block_count);\n    fprintf(f, \"[%s]   cfg->cache_size=%\" PRIu32 \", cfg->lookahead_size=%\" PRIu32 \"\\n\",\n            buf, cfg->cache_size, cfg->lookahead_size);\n\n    fprintf(f, \"[%s]   cfg->read_buffer=%p, cfg->prog_buffer=%p, cfg->lookahead_buffer=%p\\n\",\n            buf, cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n    fprintf(f, \"[%s]   cfg->name_max=%\" PRIu32 \", cfg->file_max=%\" PRIu32 \", cfg->attr_max=%\" PRIu32 \"\\n\",\n            buf, cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Provide a focused warning line that helps reproduce the violation: */\n    fprintf(f, \"[%s]   CHECK: If cfg->lookahead_buffer points to a buffer smaller than cfg->lookahead_size,\\n\",\n            buf);\n    fprintf(f, \"[%s]          later calls that assume cfg->lookahead_size bytes (memset/memcpy/etc.) may access out-of-bounds.\\n\",\n            buf);\n\n    fclose(f);\n}\n\nstatic void lfs_mount_log_post(const struct lfs_config *cfg, const void *lfs, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    char buf[64] = \"\";\n    if (t != (time_t)-1) {\n        struct tm tm;\n        if (localtime_r(&t, &tm) != NULL) {\n            strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm);\n        }\n    }\n\n    fprintf(f, \"[%s] POST lfs_mount: lfs=%p cfg=%p err=%d\\n\", buf, lfs, (const void*)cfg, err);\n    if (cfg != NULL) {\n        /* Re-log the lookahead pointers and sizes so callers can compare pre/post */\n        fprintf(f, \"[%s]   cfg->lookahead_buffer=%p, cfg->lookahead_size=%\" PRIu32 \"\\n\",\n                buf, cfg->lookahead_buffer, cfg->lookahead_size);\n    }\n\n    /* Note: we avoid dereferencing internal lfs fields here to remain\n     * agnostic to the lfs_t layout, and to preserve original behavior.\n     * Other agents can compare cfg->lookahead_buffer and cfg->lookahead_size\n     * with the internal state after mount by inspecting lfs directly. */\n\n    if (err != 0) {\n        fprintf(f, \"[%s]   lfs_mount returned error %d\\n\", buf, err);\n    } else {\n        fprintf(f, \"[%s]   lfs_mount succeeded\\n\", buf);\n    }\n\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log the early lock failure to aid debugging */\n        FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n        if (f) {\n            time_t t = time(NULL);\n            char buf[64] = \"\";\n            if (t != (time_t)-1) {\n                struct tm tm;\n                if (localtime_r(&t, &tm) != NULL) {\n                    strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm);\n                }\n            }\n            fprintf(f, \"[%s] lfs_mount: LFS_LOCK failed err=%d lfs=%p cfg=%p\\n\",\n                    buf, err, (void*)lfs, (const void*)cfg);\n            fclose(f);\n        }\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Insert pre-call probe to capture input state that may lead to the violation */\n    lfs_mount_log_pre(cfg, lfs);\n\n    err = lfs_mount_(lfs, cfg);\n\n    /* Insert post-call probe to capture resulting state and return value */\n    lfs_mount_log_post(cfg, lfs, err);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}