{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf cfg->read_buffer points to a user-supplied buffer that is smaller than cfg->cache_size, the code stores that pointer in lfs->rcache.buffer without validating its size. Later lfs_cache_zero(lfs, &lfs->rcache) will zero cache_size bytes (typically via memset), which would write past the end of the user buffer and thus invoke a string.h function (memset) that accesses beyond the bounds of the referenced object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/979.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "static void lfs_mount_log_probe(const char *stage, lfs_t *lfs, const struct lfs_config *cfg, int err) {\n    /* Probe that logs state useful for reproducing the violation scenario.\n       Appends to /tmp/logs/979.txt so multiple runs are preserved. */\n    FILE *fp = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n\n    fprintf(fp, \"[lfs_mount][%s] lfs=%p cfg=%p err=%d\\n\",\n            stage, (void*)lfs, (void*)cfg, err);\n\n    if (cfg) {\n        /* Log callback pointers and sizes. These are the key values in the\n           reported violation scenario: cfg->read_buffer (user buffer) and\n           cfg->cache_size (number of bytes zeroed later). */\n        fprintf(fp, \"[lfs_mount][%s] context=%p, read=%p, prog=%p, erase=%p, sync=%p\\n\",\n                stage, cfg->context,\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n\n        fprintf(fp, \"[lfs_mount][%s] read_size=%\" PRIu32 \", prog_size=%\" PRIu32\n                    \", block_size=%\" PRIu32 \", block_count=%\" PRIu32\n                    \", block_cycles=%\" PRId32 \", cache_size=%\" PRIu32\n                    \", lookahead_size=%\" PRIu32 \"\\n\",\n                stage,\n                cfg->read_size, cfg->prog_size,\n                cfg->block_size, cfg->block_count,\n                cfg->block_cycles, cfg->cache_size,\n                cfg->lookahead_size);\n\n        fprintf(fp, \"[lfs_mount][%s] read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                stage, cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n\n        fprintf(fp, \"[lfs_mount][%s] name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n                stage, cfg->name_max, cfg->file_max, cfg->attr_max);\n\n        /* Additional hint: if a user supplied read_buffer, we can't know its\n           actual allocation size here, but logging the pointer together with\n           cache_size and read_size helps later reproduction and forensic. */\n        if (cfg->read_buffer) {\n            fprintf(fp, \"[lfs_mount][%s] NOTE: read_buffer is non-NULL. Ensure the\n                   user allocation >= cache_size (%\" PRIu32 \") to avoid overflow.\\n\",\n                    stage, cfg->cache_size);\n        }\n    } else {\n        fprintf(fp, \"[lfs_mount][%s] cfg is NULL\\n\", stage);\n    }\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log lock failure and return as before */\n        lfs_mount_log_probe(\"lock_failed\", lfs, cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Probe before calling the internal mount implementation so we capture\n       the exact inputs (notably read_buffer and cache_size) that can lead\n       to the violation described. */\n    lfs_mount_log_probe(\"before_lfs_mount_\", lfs, cfg, 0);\n\n    err = lfs_mount_(lfs, cfg);\n\n    /* Probe after the internal mount to capture the resulting state. This\n       helps determine whether lfs->rcache.buffer (or similar) was set to the\n       user-supplied pointer and whether the mount succeeded/failed. */\n    lfs_mount_log_probe(\"after_lfs_mount_\", lfs, cfg, err);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n\n    /* Log just before unlocking and just after to capture unlocking behavior. */\n    lfs_mount_log_probe(\"before_unlock\", lfs, cfg, err);\n    LFS_UNLOCK(cfg);\n    lfs_mount_log_probe(\"after_unlock\", lfs, cfg, err);\n\n    return err;\n}\n"
}