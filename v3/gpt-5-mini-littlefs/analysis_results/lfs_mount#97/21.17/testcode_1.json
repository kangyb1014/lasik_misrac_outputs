{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_cache_zero likely uses a string.h function such as memset to zero the cache buffer using lfs->cfg->cache_size. If a user-supplied read_buffer or prog_buffer is smaller than cfg->cache_size (e.g. cfg->cache_size == 512 but the provided buffer is only 128 bytes), the memset will write past the end of the provided object causing an out-of-bounds access (overflow). This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/979.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Probe logging for lfs_mount to help reproduce potential out-of-bounds\n * writes when cache buffers are zeroed (e.g. via memset). Logs are\n * appended to \"/tmp/logs/979.txt\" and contain the important cfg fields\n * and a simple heuristic that highlights when cache_size exceeds the\n * read/prog buffer sizes indicated in the configuration.\n *\n * This helper preserves the logic of lfs_mount; it only records state\n * and control flow to a file for later analysis.\n */\nstatic void lfs_mount_probe(const char *stage, lfs_t *lfs, const struct lfs_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (!f) {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[lfs_mount_probe] stage=%s, lfs=%p, cfg=%p, err=%d\\n\",\n            stage, (void*)lfs, (void*)cfg, err);\n\n    if (cfg) {\n        fprintf(f, \"  cfg->context=%p, read=%p, prog=%p, erase=%p, sync=%p\\n\",\n                cfg->context,\n                (void*)(uintptr_t)cfg->read,\n                (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase,\n                (void*)(uintptr_t)cfg->sync);\n\n        fprintf(f, \"  sizes: read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size, cfg->block_size);\n        fprintf(f, \"  counts: block_count=%\" PRIu32 \", block_cycles=%\" PRId32 \"\\n\",\n                cfg->block_count, cfg->block_cycles);\n\n        fprintf(f, \"  cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->cache_size, cfg->lookahead_size);\n\n        fprintf(f, \"  buffers: read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n\n        fprintf(f, \"  name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n\n        /* Heuristic checks to highlight the reported violation scenario.\n         * These checks only log potential problems; they do not alter control flow. */\n        if (cfg->read_buffer != NULL) {\n            if (cfg->cache_size > cfg->read_size) {\n                fprintf(f, \"  WARNING: cfg->cache_size (%\" PRIu32 \") > cfg->read_size (%\" PRIu32 \") -> potential overflow when zeroing into read_buffer\\n\",\n                        cfg->cache_size, cfg->read_size);\n            } else {\n                fprintf(f, \"  NOTE: cfg->cache_size <= cfg->read_size (no obvious overflow w.r.t. read buffer)\\n\");\n            }\n        } else {\n            fprintf(f, \"  NOTE: read_buffer is NULL\\n\");\n        }\n\n        if (cfg->prog_buffer != NULL) {\n            if (cfg->cache_size > cfg->prog_size) {\n                fprintf(f, \"  WARNING: cfg->cache_size (%\" PRIu32 \") > cfg->prog_size (%\" PRIu32 \") -> potential overflow when zeroing into prog_buffer\\n\",\n                        cfg->cache_size, cfg->prog_size);\n            } else {\n                fprintf(f, \"  NOTE: cfg->cache_size <= cfg->prog_size (no obvious overflow w.r.t. prog buffer)\\n\");\n            }\n        } else {\n            fprintf(f, \"  NOTE: prog_buffer is NULL\\n\");\n        }\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Log entry */\n    lfs_mount_probe(\"entry\", lfs, cfg, 0);\n\n    int err = LFS_LOCK(cfg);\n\n    /* Log after attempting lock */\n    lfs_mount_probe(\"after_lock\", lfs, cfg, err);\n\n    if (err) {\n        /* Preserve original behavior while recording that we are returning early */\n        lfs_mount_probe(\"return_on_lock_err\", lfs, cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log just before calling the internal mount implementation */\n    lfs_mount_probe(\"before_lfs_mount_\", lfs, cfg, 0);\n\n    err = lfs_mount_(lfs, cfg);\n\n    /* Log result of inner mount call */\n    lfs_mount_probe(\"after_lfs_mount_\", lfs, cfg, err);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    /* Final exit log */\n    lfs_mount_probe(\"exit\", lfs, cfg, err);\n\n    return err;\n}\n"
}