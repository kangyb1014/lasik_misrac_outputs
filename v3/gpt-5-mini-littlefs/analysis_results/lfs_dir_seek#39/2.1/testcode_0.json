{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe check if (err) { return err; } is unreachable because LFS_LOCK(lfs->cfg) is defined as ((void)cfg, 0), so err is always 0. The body of the if can never be executed in this translation unit/configuration, which violates MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/391.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/391.txt */\nstatic void lfs_probe_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/391.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    /* Preserve original locking call and capture its result */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and the lock result and cfg pointer so callers can observe\n       whether the LFS_LOCK macro yields a non-zero error (making the\n       if (err) branch reachable) or always yields 0 as in the reported\n       translation unit. */\n    lfs_probe_printf(\"lfs_dir_seek ENTER: lfs=%p dir=%p off=%\" PRIu32,\n            (void*)lfs, (void*)dir, off);\n    lfs_probe_printf(\"lfs_dir_seek AFTER LFS_LOCK: err=%d cfg=%p\",\n            err, (void*)lfs->cfg);\n\n    if (err) {\n        /* Log when the branch is taken. If this line never appears in\n           the logs for any run/build, it is evidence that the branch is\n           unreachable in that configuration. */\n        lfs_probe_printf(\"lfs_dir_seek BRANCH if(err) taken: returning %d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    lfs_probe_printf(\"lfs_dir_seek calling lfs_dir_seek_: lfs=%p dir=%p off=%\" PRIu32,\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    lfs_probe_printf(\"lfs_dir_seek AFTER lfs_dir_seek_: err=%d\", err);\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n\n    lfs_probe_printf(\"lfs_dir_seek about to LFS_UNLOCK cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_printf(\"lfs_dir_seek EXIT returning %d\", err);\n    return err;\n}\n"
}