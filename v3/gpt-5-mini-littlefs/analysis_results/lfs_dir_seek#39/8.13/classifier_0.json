{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n        (void*)lfs, (void*)dir, off);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment simply casts the existing lfs_t * and lfs_dir_t * pointers to void* for logging: (void*)lfs, (void*)dir. This does not itself violate MISRA C 2023 Rule 8.13. Rule 8.13 requires that a pointer be const-qualified when it can be, i.e. when the pointed-to object is not modified. If the design intended lfs and dir to be non-modifiable in this function then they should have been declared as const lfs_t * and const lfs_dir_t *; in that case the remainder of the code (and the casts) would need adjustment. As written, assuming lfs and dir are legitimately non-const because they may be modified/used for mutation (e.g. locking, seeking), the cast-to-void* for tracing does not violate Rule 8.13."
}