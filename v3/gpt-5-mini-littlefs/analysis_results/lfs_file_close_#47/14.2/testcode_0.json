{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop declares the loop counter as 'p' (a pointer-to-pointer). However, the second clause uses '*p' and the third clause uses '(*p)->next', while the loop body modifies '*p' (assignment '*p = (*p)->next'). MISRA C 2023 Rule 14.2 forbids the second clause from using objects that are modified in the loop body and forbids the third clause from using objects modified in the loop body. Because both the second and third clauses access the object pointed-to by p which is modified in the body, this for loop violates Rule 14.2 (clauses 2 and 3).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/474.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close_:\n```c\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        lfs_free(file->cache.buffer);\n    }\n\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close_ code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log state for reproduction and evidence */\nstatic void lfs_file_close_log_probe(const char *stage, lfs_t *lfs, lfs_file_t *file, int err) {\n    FILE *fp = fopen(\"/tmp/logs/474.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    /* Log a small header for the stage */\n    fprintf(fp, \"--- lfs_file_close_ probe: %s ---\\n\", stage);\n\n    /* Basic pointers and error code */\n    fprintf(fp, \"lfs=%p file=%p err=%d\\n\", (void*)lfs, (void*)file, err);\n\n    if (file) {\n        /* Some fields are conditionally present; check pointers before deref */\n        fprintf(fp, \"  file (addr) = %p\\n\", (void*)file);\n        fprintf(fp, \"  file->cache (addr) = %p\\n\", (void*)&file->cache);\n        fprintf(fp, \"  file->cache.buffer = %p\\n\", (void*)file->cache.buffer);\n\n        /* cfg may contain a 'buffer' that is either a pointer or flag; evaluate existence\n           as an integer to avoid incorrect casts while still providing useful info. */\n        if (file->cfg) {\n            int cfg_has_buffer = (file->cfg->buffer != 0) ? 1 : 0;\n            fprintf(fp, \"  file->cfg = %p\\n\", (void*)file->cfg);\n            fprintf(fp, \"  file->cfg->buffer (exists?) = %d\\n\", cfg_has_buffer);\n        } else {\n            fprintf(fp, \"  file->cfg = (NULL)\\n\");\n        }\n    }\n\n    fflush(fp);\n    fclose(fp);\n}\n\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    /* Log state after sync attempt */\n    lfs_file_close_log_probe(\"after-sync\", lfs, file, err);\n\n    /* remove from list of mdirs */\n    lfs_file_close_log_probe(\"before-mlist-remove\", lfs, file, err);\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n    lfs_file_close_log_probe(\"after-mlist-remove\", lfs, file, err);\n\n    /* clean up memory */\n    if (!file->cfg->buffer) {\n        lfs_file_close_log_probe(\"before-free-cache-buffer\", lfs, file, err);\n        lfs_free(file->cache.buffer);\n        lfs_file_close_log_probe(\"after-free-cache-buffer\", lfs, file, err);\n    }\n\n    lfs_file_close_log_probe(\"return\", lfs, file, err);\n    return err;\n}\n"
}