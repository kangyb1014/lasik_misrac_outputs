{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_cache_zero uses memset(pcache->buffer, 0xff, lfs->cfg->cache_size). In lfs_file_opencfg_ file->cache.buffer may be set to an external buffer (file->cfg->buffer) provided by the caller. If that caller-provided buffer is smaller than lfs->cfg->cache_size (or otherwise not at least cache_size bytes), the memset will write past the end of the buffer. Thus the call can access beyond the bounds of the object referenced by pcache->buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close_:\n```c\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        lfs_free(file->cache.buffer);\n    }\n\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close_ code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void lfs_log_close_probe(const char *stage, lfs_t *lfs, lfs_file_t *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/479.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_file_close_] stage=%s err=%d\\n\", stage, err);\n    fprintf(f, \"lfs=%p file=%p\\n\", (void*)lfs, (void*)file);\n\n    if (lfs) {\n        if (lfs->cfg) {\n            /* cache_size is sized_t in many implementations; print as size_t */\n            fprintf(f, \"lfs->cfg=%p cache_size=%zu\\n\", (void*)lfs->cfg, (size_t)lfs->cfg->cache_size);\n        } else {\n            fprintf(f, \"lfs->cfg=NULL\\n\");\n        }\n    }\n\n    if (file) {\n        if (file->cfg) {\n            fprintf(f, \"file->cfg=%p file->cfg->buffer=%p\\n\", (void*)file->cfg, (void*)file->cfg->buffer);\n        } else {\n            fprintf(f, \"file->cfg=NULL\\n\");\n        }\n        /* file->cache.buffer is the buffer that may be freed here */\n        fprintf(f, \"file->cache.buffer=%p\\n\", (void*)file->cache.buffer);\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    /* Log state after sync and before any modifications */\n    lfs_log_close_probe(\"after_sync\", lfs, file, err);\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    /* Log state after removal from mdirs */\n    lfs_log_close_probe(\"after_mlist_remove\", lfs, file, err);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        /* Log right before freeing the cache buffer so we can capture pointer and sizes */\n        lfs_log_close_probe(\"before_free_cache\", lfs, file, err);\n        lfs_free(file->cache.buffer);\n        /* Log right after freeing (pointer value unchanged in struct until caller clears it) */\n        lfs_log_close_probe(\"after_free_cache\", lfs, file, err);\n    } else {\n        lfs_log_close_probe(\"external_buffer_in_use\", lfs, file, err);\n    }\n\n    return err;\n}\n"
}