{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes file->cfg->attrs[i].buffer to lfs_dir_get together with a tag that encodes file->cfg->attrs[i].size, but there is no check in the read path that the provided buffer is actually large enough to hold attrs[i].size bytes. If lfs_dir_get internally uses memcpy/memmove/strncpy (string.h functions) to copy attrs[i].size bytes into the supplied buffer, and the user-supplied buffer is smaller than attrs[i].size (or NULL), that will write beyond the buffer bounds. For example, a caller could set attrs[i].size = N but provide a buffer of size M < N; lfs_dir_get copying N bytes into the buffer would cause an out-of-bounds access and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close_:\n```c\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        lfs_free(file->cache.buffer);\n    }\n\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/479.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/479.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Modified lfs_file_close_: added probes to capture control flow and state. */\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    lfs_probe_log(\"lfs_file_close_: ENTER file=%p, lfs=%p\", (void*)file, (void*)lfs);\n    /* Log known pointer fields without changing original control flow */\n    lfs_probe_log(\"lfs_file_close_: file->cfg=%p, file->cache.buffer=%p\",\n                  (void*)(file ? file->cfg : NULL),\n                  (void*)(file ? file->cache.buffer : NULL));\n\n    int err = lfs_file_sync_(lfs, file);\n    lfs_probe_log(\"lfs_file_close_: after lfs_file_sync_ -> err=%d\", err);\n#else\n    int err = 0;\n#endif\n\n    lfs_probe_log(\"lfs_file_close_: about to remove from mdirs list: file=%p\", (void*)file);\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n    lfs_probe_log(\"lfs_file_close_: removed from mdirs list: file=%p\", (void*)file);\n\n    /* Preserve original logic: evaluate the same condition as original code */\n    /* This mirrors: if (!file->cfg->buffer) { lfs_free(file->cache.buffer); } */\n    void *cfg_ptr = (file ? file->cfg : NULL);\n    void *cfg_buffer_ptr = NULL;\n    if (cfg_ptr) {\n        /* safe to read the buffer member because original code does the same dereference */\n        cfg_buffer_ptr = file->cfg->buffer;\n    }\n\n    lfs_probe_log(\"lfs_file_close_: file->cfg->buffer=%p (interpreted)\", cfg_buffer_ptr);\n\n    if (!cfg_buffer_ptr) {\n        lfs_probe_log(\"lfs_file_close_: cfg buffer is NULL -> freeing file->cache.buffer=%p\",\n                      (void*)(file ? file->cache.buffer : NULL));\n        lfs_free(file->cache.buffer);\n        lfs_probe_log(\"lfs_file_close_: freed file->cache.buffer\");\n    } else {\n        lfs_probe_log(\"lfs_file_close_: cfg buffer is non-NULL -> not freeing file->cache.buffer=%p\",\n                      (void*)(file ? file->cache.buffer : NULL));\n    }\n\n    lfs_probe_log(\"lfs_file_close_: EXIT file=%p, err=%d\", (void*)file, err);\n    return err;\n}\n"
}