{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen file->flags has LFS_F_INLINE set and file->ctz.size can be larger than the capacity of file->cache.buffer (which is file->cfg->cache_size). In lfs_file_sync_ the code sets buffer = file->cache.buffer and size = file->ctz.size and then calls lfs_dir_commit. If file->ctz.size > file->cache.size, later operations that copy/handle 'buffer' using standard string/memory functions (e.g. memcpy/memmove/memset) with the supplied size will read beyond the allocated buffer and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close_:\n```c\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        lfs_free(file->cache.buffer);\n    }\n\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close_ code.\n",
  "test_code": "static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n    /* Probe logging to help reproduce potential Rule 21.17 violation.\n       Appends diagnostic information to /tmp/logs/479.txt. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (logf) {\n            /* Safely print key pointers and sizes. Cast numeric sizes to unsigned long long for portability. */\n            fprintf(logf,\n                \"ENTRY lfs_file_close_: lfs=%p file=%p flags=0x%08x cfg_ptr=%p cfg_buffer=%p cfg_cache_size=%llu cache_buffer=%p ctz_size=%llu\\n\",\n                (void*)lfs,\n                (void*)file,\n                (unsigned)file->flags,\n                (void*)(file->cfg),\n                (void*)(file->cfg ? file->cfg->buffer : NULL),\n                (unsigned long long)(file->cfg ? (unsigned long long)file->cfg->cache_size : 0ULL),\n                (void*)file->cache.buffer,\n                (unsigned long long)file->ctz.size);\n\n            if (file->cfg && file->cache.buffer && (unsigned long long)file->ctz.size > (unsigned long long)file->cfg->cache_size) {\n                fprintf(logf,\n                    \"POTENTIAL_VIOLATION: file->ctz.size (%llu) > file->cfg->cache_size (%llu). flags=0x%08x\\n\",\n                    (unsigned long long)file->ctz.size,\n                    (unsigned long long)file->cfg->cache_size,\n                    (unsigned)file->flags);\n            }\n            fclose(logf);\n        }\n    }\n\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    /* Log result of sync */\n    {\n        FILE *logf = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"AFTER_SYNC lfs_file_close_: err=%d file=%p cache_buffer=%p ctz_size=%llu\\n\",\n                err, (void*)file, (void*)file->cache.buffer, (unsigned long long)file->ctz.size);\n            fclose(logf);\n        }\n    }\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    /* Log removal from mdirs */\n    {\n        FILE *logf = fopen(\"/tmp/logs/479.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"MLIST_REMOVE done for file=%p\\n\", (void*)file);\n            fclose(logf);\n        }\n    }\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        /* Log about to free cache.buffer (do not dereference after free). */\n        {\n            FILE *logf = fopen(\"/tmp/logs/479.txt\", \"a\");\n            if (logf) {\n                fprintf(logf, \"ABOUT_TO_FREE cache.buffer=%p for file=%p\\n\", (void*)file->cache.buffer, (void*)file);\n                fclose(logf);\n            }\n        }\n\n        lfs_free(file->cache.buffer);\n\n        /* Log freed pointer value (note: pointer value may be stale after free) */\n        {\n            FILE *logf = fopen(\"/tmp/logs/479.txt\", \"a\");\n            if (logf) {\n                fprintf(logf, \"FREED cache.buffer (previous value logged) for file=%p\\n\", (void*)file);\n                fclose(logf);\n            }\n        }\n    }\n\n    return err;\n}\n"
}