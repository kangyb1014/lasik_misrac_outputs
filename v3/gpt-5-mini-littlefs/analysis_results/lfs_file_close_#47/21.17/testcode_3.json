{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf file->cfg->buffer is a user-supplied pointer that is smaller than lfs->cfg->cache_size, then after the assignment file->cache.buffer = file->cfg->buffer the subsequent call lfs_cache_zero -> memset(pcache->buffer, 0xff, lfs->cfg->cache_size) will write past the end of that object. The assignment itself doesn't call <string.h>, but it enables a later memset that can access beyond the buffer bounds, thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close_:\n```c\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        lfs_free(file->cache.buffer);\n    }\n\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close_ code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe: log LFS file state to /tmp/logs/479.txt\n * This helper preserves original logic and only emits observational data\n * to help reproduce the scenario described.\n */\nstatic void lfs_log_state(const char *stage, lfs_t *lfs, lfs_file_t *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/479.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Safely gather pointers and sizes without dereferencing user buffers */\n    const void *lfs_ptr = (const void *)lfs;\n    const void *file_ptr = (const void *)file;\n    const void *cfg_ptr = NULL;\n    const void *cfg_buffer_ptr = NULL;\n    const void *cache_buffer_ptr = NULL;\n    unsigned long long cache_size = 0ULL;\n\n    if (file) {\n        cfg_ptr = (const void *)file->cfg;\n        if (file->cfg) {\n            cfg_buffer_ptr = (const void *)file->cfg->buffer;\n        }\n        cache_buffer_ptr = (const void *)file->cache.buffer;\n    }\n\n    if (lfs && lfs->cfg) {\n        /* copy/cache_size in an unsigned long long to print portably */\n        cache_size = (unsigned long long)lfs->cfg->cache_size;\n    }\n\n    fprintf(f,\n        \"stage=%s err=%d lfs=%p file=%p file->cfg=%p file->cfg->buffer=%p file->cache.buffer=%p lfs->cfg->cache_size=%llu\\n\",\n        stage ? stage : \"(null)\", err, lfs_ptr, file_ptr, cfg_ptr, cfg_buffer_ptr, cache_buffer_ptr, cache_size);\n\n    fclose(f);\n}\n\nstatic int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {\n#ifndef LFS_READONLY\n    int err = lfs_file_sync_(lfs, file);\n#else\n    int err = 0;\n#endif\n\n    /* Log state immediately after sync/err is known */\n    lfs_log_state(\"after_sync\", lfs, file, err);\n\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);\n\n    /* Log state after removal from mdirs */\n    lfs_log_state(\"after_mlist_remove\", lfs, file, err);\n\n    // clean up memory\n    if (!file->cfg->buffer) {\n        /* Log state just before freeing cache.buffer. This is the key\n         * probe for the violation scenario: we capture pointers to\n         * file->cfg->buffer and file->cache.buffer, and lfs->cfg->cache_size\n         * so later analysis can determine if file->cache.buffer aliases a\n         * user-supplied buffer that is too small.\n         */\n        lfs_log_state(\"before_free\", lfs, file, err);\n\n        lfs_free(file->cache.buffer);\n    }\n\n    /* Final state prior to return */\n    lfs_log_state(\"before_return\", lfs, file, err);\n\n    return err;\n}\n"
}