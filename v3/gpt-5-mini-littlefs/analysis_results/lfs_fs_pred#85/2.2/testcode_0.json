{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization 'int err = LFS_ERR_OK;' at the start of lfs_fs_pred is dead code. The variable err is immediately assigned the return of lfs_tortoise_detectcycles(...) at the top of the while-loop before any read, and later an inner declaration 'int err = lfs_dir_fetch(...)' shadows it. The initial write of LFS_ERR_OK is therefore executed but never observed, so removing it would not affect program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_pred code that contains useful probe functions that print useful logs to a file \"/tmp/logs/852.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_pred as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_pred:\n```c\nstatic int lfs_fs_pred(lfs_t *lfs,\n        const lfs_block_t pair[2], lfs_mdir_t *pdir) {\n    // iterate over all directory directory entries\n    pdir->tail[0] = 0;\n    pdir->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    while (!lfs_pair_isnull(pdir->tail)) {\n        err = lfs_tortoise_detectcycles(pdir, &tortoise);\n        if (err < 0) {\n            return LFS_ERR_CORRUPT;\n        }\n\n        if (lfs_pair_cmp(pdir->tail, pair) == 0) {\n            return 0;\n        }\n\n        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);\n        if (err) {\n            return err;\n        }\n    }\n\n    return LFS_ERR_NOENT;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_pred code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/852.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_fs_pred(lfs_t *lfs,\n        const lfs_block_t pair[2], lfs_mdir_t *pdir) {\n    /* iterate over all directory directory entries */\n    pdir->tail[0] = 0;\n    pdir->tail[1] = 1;\n    struct lfs_tortoise_t tortoise = {\n        .pair = {LFS_BLOCK_NULL, LFS_BLOCK_NULL},\n        .i = 1,\n        .period = 1,\n    };\n    int err = LFS_ERR_OK;\n    /* keep a pointer to the outer \"err\" so we can observe it even when\n       an inner variable shadows the name \"err\" */\n    int *outer_err_ptr = &err;\n\n    log_probe(\"lfs_fs_pred: enter, initial outer err=%d, &outer_err=%p, pdir->tail=[%llu,%llu], pair=[%llu,%llu]\",\n              err, (void*)outer_err_ptr,\n              (unsigned long long)pdir->tail[0], (unsigned long long)pdir->tail[1],\n              (unsigned long long)pair[0], (unsigned long long)pair[1]);\n\n    while (!lfs_pair_isnull(pdir->tail)) {\n        log_probe(\"lfs_fs_pred: loop top, outer err(before detect)=%d, &outer_err=%p, pdir->tail=[%llu,%llu]\",\n                  *outer_err_ptr, (void*)outer_err_ptr,\n                  (unsigned long long)pdir->tail[0], (unsigned long long)pdir->tail[1]);\n\n        err = lfs_tortoise_detectcycles(pdir, &tortoise);\n        log_probe(\"lfs_fs_pred: after lfs_tortoise_detectcycles, outer err=%d, &outer_err=%p\",\n                  err, (void*)outer_err_ptr);\n\n        if (err < 0) {\n            log_probe(\"lfs_fs_pred: detectcycles reported error (err=%d) -> returning LFS_ERR_CORRUPT\", err);\n            return LFS_ERR_CORRUPT;\n        }\n\n        if (lfs_pair_cmp(pdir->tail, pair) == 0) {\n            log_probe(\"lfs_fs_pred: found matching pair -> returning 0, pdir->tail=[%llu,%llu], pair=[%llu,%llu]\",\n                      (unsigned long long)pdir->tail[0], (unsigned long long)pdir->tail[1],\n                      (unsigned long long)pair[0], (unsigned long long)pair[1]);\n            return 0;\n        }\n\n        log_probe(\"lfs_fs_pred: about to call lfs_dir_fetch; outer err(current)=%d, &outer_err=%p\",\n                  *outer_err_ptr, (void*)outer_err_ptr);\n\n        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);\n        /* after inner declaration, the name \"err\" refers to the inner one.\n           Log both the inner and outer values (outer via pointer) and their addresses\n           to show that the initial initialization of outer err was overwritten / unused. */\n        log_probe(\"lfs_fs_pred: after lfs_dir_fetch, inner err=%d, &inner_err=%p, outer err(via ptr)=%d, &outer_err=%p\",\n                  err, (void*)&err, *outer_err_ptr, (void*)outer_err_ptr);\n\n        if (err) {\n            log_probe(\"lfs_fs_pred: lfs_dir_fetch returned err=%d -> returning err\", err);\n            return err;\n        }\n    }\n\n    log_probe(\"lfs_fs_pred: finished loop, returning LFS_ERR_NOENT\");\n    return LFS_ERR_NOENT;\n}\n"
}