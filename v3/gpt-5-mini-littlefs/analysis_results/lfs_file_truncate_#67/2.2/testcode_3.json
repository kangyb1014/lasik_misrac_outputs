{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)lfs;' in lfs_file_size_ is an expression statement with no side effects; removing it does not change program behaviour (it only suppresses an unused-parameter warning). As such it is an executed operation whose removal would not affect behaviour and therefore constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/672.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "static int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Minimal logging helpers (declare stdio types/functions locally to avoid\n       adding new includes in this snippet). These are only used to append\n       diagnostic information to /tmp/logs/672.txt so other agents can\n       reproduce the control flow and state leading to the reported\n       violation scenario. */\n    typedef struct _IO_FILE FILE;\n    extern FILE* fopen(const char *filename, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    FILE *log = fopen(\"/tmp/logs/672.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_file_truncate_: lfs=%p file=%p req_size=%lld file->pos=%lld file->flags=0x%08x inline_max=%lld\\n\",\n                (void*)lfs, (void*)file, (long long)size, (long long)file->pos, (unsigned)file->flags, (long long)lfs->inline_max);\n    }\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        if (log) {\n            fprintf(log, \"EXIT lfs_file_truncate_: invalid size > LFS_FILE_MAX (req=%lld)\\n\", (long long)size);\n            fclose(log);\n        }\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n\n    if (log) {\n        fprintf(log, \"Calling lfs_file_size_ to get oldsize (file=%p)\\n\", (void*)file);\n    }\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (log) {\n        fprintf(log, \"lfs_file_size_ returned oldsize=%lld\\n\", (long long)oldsize);\n    }\n\n    if (size < oldsize) {\n        if (log) {\n            fprintf(log, \"Branch: size < oldsize (req=%lld old=%lld)\\n\", (long long)size, (long long)oldsize);\n        }\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            if (log) {\n                fprintf(log, \"Sub-branch: revert to inline (req=%lld inline_max=%lld)\\n\", (long long)size, (long long)lfs->inline_max);\n            }\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                if (log) {\n                    fprintf(log, \"ERROR: lfs_file_seek_ to head returned %lld\\n\", (long long)res);\n                    fclose(log);\n                }\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                if (log) {\n                    fprintf(log, \"ERROR: lfs_file_flushedread returned %lld\\n\", (long long)res);\n                    fclose(log);\n                }\n                return (int)res;\n            }\n\n            if (log) {\n                fprintf(log, \"Switching to inline: head=INLINE size=%lld\\n\", (long long)size);\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            if (log) {\n                fprintf(log, \"Sub-branch: truncate in-place (not inline)\\n\");\n            }\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                if (log) {\n                    fprintf(log, \"ERROR: lfs_file_flush returned %d\\n\", err);\n                    fclose(log);\n                }\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                if (log) {\n                    fprintf(log, \"ERROR: lfs_ctz_find returned %d\\n\", err);\n                    fclose(log);\n                }\n                return err;\n            }\n\n            if (log) {\n                fprintf(log, \"Truncated metadata updated: new head=%lld newsize=%lld\\n\",\n                        (long long)file->block, (long long)size);\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        if (log) {\n            fprintf(log, \"Branch: size > oldsize (req=%lld old=%lld) - will extend with zeros\\n\", (long long)size, (long long)oldsize);\n        }\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            if (log) {\n                fprintf(log, \"ERROR: lfs_file_seek_ to end returned %lld\\n\", (long long)res);\n                fclose(log);\n            }\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            if (log) {\n                fprintf(log, \"Extending: writing zero at pos=%lld (target=%lld)\\n\", (long long)file->pos, (long long)size);\n            }\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                if (log) {\n                    fprintf(log, \"ERROR: lfs_file_write_ returned %lld\\n\", (long long)res);\n                    fclose(log);\n                }\n                return (int)res;\n            }\n        }\n    } else {\n        if (log) {\n            fprintf(log, \"Branch: size == oldsize (no-op)\");\n            fprintf(log, \"\\n\");\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      if (log) {\n          fprintf(log, \"ERROR: restore seek to pos=%lld returned %lld\\n\", (long long)pos, (long long)res);\n          fclose(log);\n      }\n      return (int)res;\n    }\n\n    if (log) {\n        fprintf(log, \"EXIT lfs_file_truncate_: success. restored pos=%lld final_pos=%lld final_flags=0x%08x final_ctz_head=%lld final_ctz_size=%lld\\n\",\n                (long long)pos, (long long)file->pos, (unsigned)file->flags, (long long)file->ctz.head, (long long)file->ctz.size);\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}