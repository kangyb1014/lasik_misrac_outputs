{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a local lfs_off_t (noff) to lfs_ctz_index(lfs, &noff). The called function appears to only read the value (other call sites pass compound literals like &(lfs_off_t){...}), so its parameter should be a pointer to const (e.g. const lfs_off_t *). As written the parameter is (apparently) a non-const pointer, violating MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append human-readable state to /tmp/logs/673.txt */\nstatic void lfs_truncate_log(const char *stage, void *lfs_ptr, void *file_ptr,\n        long long size, long long oldsize, long long pos, long long flags,\n        long long ctz_head, long long ctz_size, long long block, long long ret)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_file_truncate_] %s\\n\", stage);\n    fprintf(f, \"  lfs=%p file=%p size=%lld oldsize=%lld pos=%lld flags=0x%llx\\n\",\n            lfs_ptr, file_ptr, size, oldsize, pos, flags);\n    fprintf(f, \"  ctz.head=%lld ctz.size=%lld block=%lld ret=%lld\\n\",\n            ctz_head, ctz_size, block, ret);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Additional helper to log specific information about the ctz_find call. */\nstatic void lfs_truncate_log_ctz_find_args(void *lfs_ptr, void *file_ptr,\n        long long ctz_head, long long ctz_size, long long lookup_index)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_file_truncate_] calling lfs_ctz_find with arguments:\\n\");\n    fprintf(f, \"  lfs=%p file=%p ctz.head=%lld ctz.size=%lld lookup_index=%lld\\n\",\n            lfs_ptr, file_ptr, ctz_head, ctz_size, lookup_index);\n    fprintf(f, \"  NOTE: passing address of a compound literal &(lfs_off_t){0} as output argument\\n\\n\");\n    fclose(f);\n}\n\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    /* initial state log */\n    lfs_truncate_log(\"entry\", lfs, file, (long long)size,\n            (long long)0, (long long)file->pos, (long long)file->flags,\n            (long long)file->ctz.head, (long long)file->ctz.size,\n            (long long)file->block, (long long)0);\n\n    if (size > LFS_FILE_MAX) {\n        lfs_truncate_log(\"size > LFS_FILE_MAX, returning LFS_ERR_INVAL\",\n                lfs, file, (long long)size, (long long)0, (long long)file->pos,\n                (long long)file->flags, (long long)file->ctz.head,\n                (long long)file->ctz.size, (long long)file->block,\n                (long long)LFS_ERR_INVAL);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    lfs_truncate_log(\"after size check and obtaining oldsize\",\n            lfs, file, (long long)size, (long long)oldsize, (long long)pos,\n            (long long)file->flags, (long long)file->ctz.head,\n            (long long)file->ctz.size, (long long)file->block, (long long)0);\n\n    if (size < oldsize) {\n        /* revert to inline file? */\n        if (size <= lfs->inline_max) {\n            /* flush+seek to head */\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            lfs_truncate_log(\"inline path: after seek to head\",\n                    lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                    (long long)file->flags, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)file->block, (long long)res);\n            if (res < 0) {\n                lfs_truncate_log(\"inline path: seek error, returning\",\n                        lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                        (long long)file->flags, (long long)file->ctz.head,\n                        (long long)file->ctz.size, (long long)file->block, (long long)res);\n                return (int)res;\n            }\n\n            /* read our data into rcache temporarily */\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            lfs_truncate_log(\"inline path: after flushedread\",\n                    lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                    (long long)file->flags, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)file->block, (long long)res);\n            if (res < 0) {\n                lfs_truncate_log(\"inline path: flushedread error, returning\",\n                        lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                        (long long)file->flags, (long long)file->ctz.head,\n                        (long long)file->ctz.size, (long long)file->block, (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            lfs_truncate_log(\"inline path: completed inline revert\",\n                    lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                    (long long)file->flags, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)file->block, (long long)0);\n\n        } else {\n            /* need to flush since directly changing metadata */\n            int err = lfs_file_flush(lfs, file);\n            lfs_truncate_log(\"non-inline path: after flush\",\n                    lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                    (long long)file->flags, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)file->block, (long long)err);\n            if (err) {\n                lfs_truncate_log(\"non-inline path: flush error, returning\",\n                        lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                        (long long)file->flags, (long long)file->ctz.head,\n                        (long long)file->ctz.size, (long long)file->block, (long long)err);\n                return err;\n            }\n\n            /* lookup new head in ctz skip list */\n            /* Log the arguments and note that a compound literal address is used */\n            lfs_truncate_log_ctz_find_args(lfs, file,\n                    (long long)file->ctz.head, (long long)file->ctz.size, (long long)(size-1));\n\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n\n            lfs_truncate_log(\"non-inline path: after lfs_ctz_find\",\n                    lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                    (long long)file->flags, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)file->block, (long long)err);\n\n            if (err) {\n                lfs_truncate_log(\"non-inline path: lfs_ctz_find error, returning\",\n                        lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                        (long long)file->flags, (long long)file->ctz.head,\n                        (long long)file->ctz.size, (long long)file->block, (long long)err);\n                return err;\n            }\n\n            /* need to set pos/block/off consistently so seeking back to\n             * the old position does not get confused */\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            lfs_truncate_log(\"non-inline path: updated file metadata after ctz_find\",\n                    lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                    (long long)file->flags, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)file->block, (long long)0);\n        }\n    } else if (size > oldsize) {\n        /* flush+seek if not already at end */\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        lfs_truncate_log(\"size > oldsize: after seek to end\",\n                lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                (long long)file->flags, (long long)file->ctz.head,\n                (long long)file->ctz.size, (long long)file->block, (long long)res);\n        if (res < 0) {\n            lfs_truncate_log(\"size > oldsize: seek error, returning\",\n                    lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                    (long long)file->flags, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)file->block, (long long)res);\n            return (int)res;\n        }\n\n        /* fill with zeros */\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            lfs_truncate_log(\"size > oldsize: during zero-fill loop\",\n                    lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                    (long long)file->flags, (long long)file->ctz.head,\n                    (long long)file->ctz.size, (long long)file->block, (long long)res);\n            if (res < 0) {\n                lfs_truncate_log(\"size > oldsize: write error, returning\",\n                        lfs, file, (long long)size, (long long)oldsize, (long long)file->pos,\n                        (long long)file->flags, (long long)file->ctz.head,\n                        (long long)file->ctz.size, (long long)file->block, (long long)res);\n                return (int)res;\n            }\n        }\n    }\n\n    /* restore pos */\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    lfs_truncate_log(\"before final restore seek\",\n            lfs, file, (long long)size, (long long)oldsize, (long long)pos,\n            (long long)file->flags, (long long)file->ctz.head,\n            (long long)file->ctz.size, (long long)file->block, (long long)res);\n    if (res < 0) {\n      lfs_truncate_log(\"final restore seek error, returning\",\n              lfs, file, (long long)size, (long long)oldsize, (long long)pos,\n              (long long)file->flags, (long long)file->ctz.head,\n              (long long)file->ctz.size, (long long)file->block, (long long)res);\n      return (int)res;\n    }\n\n    lfs_truncate_log(\"exit success\",\n            lfs, file, (long long)size, (long long)oldsize, (long long)pos,\n            (long long)file->flags, (long long)file->ctz.head,\n            (long long)file->ctz.size, (long long)file->block, (long long)0);\n\n    return 0;\n}\n"
}