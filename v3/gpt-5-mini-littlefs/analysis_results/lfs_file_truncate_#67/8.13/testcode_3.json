{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_ctz_index(lfs, &pos) passes the address of the local scalar 'pos' (type lfs_size_t) as a non-const pointer argument. If lfs_ctz_index merely reads the value (which is implied by its use to compute an index), its parameter should be declared to point to a const-qualified lfs_off_t (e.g. const lfs_off_t *), so the pointer would point to a const-qualified type. As written, the pointer points to a non-const object though const would be possible \u2014 this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Simple probe logger that appends messages to /tmp/logs/673.txt */\nstatic void lfs_probe_log(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Log entry and key state */\n    lfs_probe_log(\"ENTER: lfs_file_truncate_: lfs=%p, file=%p, requested size=%lld, file->pos=%lld, file->flags=0x%X, inline_max=%lld\",\n            (void *)lfs, (void *)file, (long long)size,\n            (long long)file->pos, (unsigned)file->flags,\n            (long long)lfs->inline_max);\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        lfs_probe_log(\"EXIT: size > LFS_FILE_MAX (%lld > %lld): returning LFS_ERR_INVAL\",\n                (long long)size, (long long)LFS_FILE_MAX);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    lfs_probe_log(\"state: pos=%lld, oldsize=%lld, requested size=%lld\",\n            (long long)pos, (long long)oldsize, (long long)size);\n\n    if (size < oldsize) {\n        lfs_probe_log(\"BRANCH: size < oldsize (shrink): %lld < %lld\", (long long)size, (long long)oldsize);\n        /* revert to inline file? */\n        if (size <= lfs->inline_max) {\n            lfs_probe_log(\"SUB-BRANCH: shrink to inline (size <= inline_max): %lld <= %lld\", (long long)size, (long long)lfs->inline_max);\n            /* flush+seek to head */\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            lfs_probe_log(\"call: lfs_file_seek_ to head returned %lld\", (long long)res);\n            if (res < 0) {\n                lfs_probe_log(\"EXIT: seek to head failed with %lld\", (long long)res);\n                return (int)res;\n            }\n\n            /* read our data into rcache temporarily */\n            lfs_probe_log(\"call: lfs_cache_drop on rcache\");\n            lfs_cache_drop(lfs, &lfs->rcache);\n            lfs_probe_log(\"call: lfs_file_flushedread of size %lld into rcache\", (long long)size);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            lfs_probe_log(\"call: lfs_file_flushedread returned %lld\", (long long)res);\n            if (res < 0) {\n                lfs_probe_log(\"EXIT: flushedread failed with %lld\", (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            lfs_probe_log(\"AFTER INLINE: head=%llu, ctz.size=%lld, flags=0x%X, cache.block=%llu, cache.off=%llu, cache.size=%llu\",\n                    (unsigned long long)file->ctz.head, (long long)file->ctz.size,\n                    (unsigned)file->flags,\n                    (unsigned long long)file->cache.block,\n                    (unsigned long long)file->cache.off,\n                    (unsigned long long)file->cache.size);\n\n        } else {\n            lfs_probe_log(\"SUB-BRANCH: shrink with separate blocks (need flush), size=%lld > inline_max=%lld\", (long long)size, (long long)lfs->inline_max);\n            /* need to flush since directly changing metadata */\n            int err = lfs_file_flush(lfs, file);\n            lfs_probe_log(\"call: lfs_file_flush returned %d\", err);\n            if (err) {\n                lfs_probe_log(\"EXIT: flush failed with %d\", err);\n                return err;\n            }\n\n            /* lookup new head in ctz skip list */\n            lfs_probe_log(\"call: lfs_ctz_find: head=%llu, ctz.size=%lld, target size-1=%lld, passing & (lfs_off_t){0} as temp address\",\n                    (unsigned long long)file->ctz.head, (long long)file->ctz.size, (long long)(size-1));\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            lfs_probe_log(\"call: lfs_ctz_find returned %d, new block=%llu\", err, (unsigned long long)file->block);\n            if (err) {\n                lfs_probe_log(\"EXIT: lfs_ctz_find failed with %d\", err);\n                return err;\n            }\n\n            /* need to set pos/block/off consistently so seeking back to\n               the old position does not get confused */\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            lfs_probe_log(\"AFTER CTZ_FIND: file->pos=%lld, ctz.head=%llu, ctz.size=%lld, flags=0x%X\",\n                    (long long)file->pos, (unsigned long long)file->ctz.head,\n                    (long long)file->ctz.size, (unsigned)file->flags);\n        }\n    } else if (size > oldsize) {\n        lfs_probe_log(\"BRANCH: size > oldsize (extend): %lld > %lld\", (long long)size, (long long)oldsize);\n        /* flush+seek if not already at end */\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        lfs_probe_log(\"call: lfs_file_seek_ to end returned %lld\", (long long)res);\n        if (res < 0) {\n            lfs_probe_log(\"EXIT: seek to end failed with %lld\", (long long)res);\n            return (int)res;\n        }\n\n        /* fill with zeros */\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            lfs_probe_log(\"call: lfs_file_write_ wrote zero byte, returned %lld, file->pos now=%lld\", (long long)res, (long long)file->pos);\n            if (res < 0) {\n                lfs_probe_log(\"EXIT: write failed with %lld\", (long long)res);\n                return (int)res;\n            }\n        }\n    }\n\n    /* restore pos */\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    lfs_probe_log(\"call: lfs_file_seek_ restore pos=%lld returned %lld\", (long long)pos, (long long)res);\n    if (res < 0) {\n      lfs_probe_log(\"EXIT: restore seek failed with %lld\", (long long)res);\n      return (int)res;\n    }\n\n    lfs_probe_log(\"EXIT: lfs_file_truncate_ SUCCESS\");\n    return 0;\n}\n"
}