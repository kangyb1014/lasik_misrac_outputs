{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPossible buffer overflow when size (<= lfs->inline_max) is larger than the actual capacity of lfs->rcache.buffer (or file->cache.buffer). The call lfs_file_flushedread(lfs, file, lfs->rcache.buffer, size) will make the read routine write size bytes into rcache.buffer; immediately afterwards memcpy(file->cache.buffer, lfs->rcache.buffer, size) copies the same size. If the allocated buffers pointed to by lfs->rcache.buffer or file->cache.buffer are smaller than size (for example if cfg->cache_size < lfs->inline_max or buffers were not allocated to at least inline_max), this results in accesses beyond the bounds of those objects and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Lightweight logging helper that appends formatted messages to\n * /tmp/logs/679.txt. Kept minimal to avoid changing program logic.\n */\nstatic void lfs_logf(const char *fmt, ...) {\n    va_list ap;\n    char buf[512];\n    va_start(ap, fmt);\n    (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    FILE *f = fopen(\"/tmp/logs/679.txt\", \"a\");\n    if (f) {\n        (void)fprintf(f, \"%s\\n\", buf);\n        (void)fclose(f);\n    }\n}\n\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    lfs_logf(\"ENTER lfs_file_truncate_: lfs=%p file=%p requested_size=%lld flags=0x%02x\",\n            (void *)lfs, (void *)file, (long long)size, (unsigned)file->flags);\n\n    if (size > LFS_FILE_MAX) {\n        lfs_logf(\"RETURN LFS_ERR_INVAL: requested size %lld > LFS_FILE_MAX\", (long long)size);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n\n    lfs_logf(\"current pos=%lld oldsize=%lld inline_max=%lld cfg_cache_size=%lld ctz.head=%lld ctz.size=%lld\",\n            (long long)pos, (long long)oldsize,\n            (long long)lfs->inline_max,\n            (long long)lfs->cfg->cache_size,\n            (long long)file->ctz.head, (long long)file->ctz.size);\n\n    if (size < oldsize) {\n        lfs_logf(\"BRANCH: size < oldsize (size=%lld oldsize=%lld)\", (long long)size, (long long)oldsize);\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            lfs_logf(\"SUB-BRANCH: revert to inline file (size <= inline_max).\\n  rcache.buffer=%p file.cache.buffer=%p file.cache.size=%lld\",\n                    (void *)lfs->rcache.buffer, (void *)file->cache.buffer,\n                    (long long)file->cache.size);\n\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            lfs_logf(\"lfs_file_seek_ to head returned %lld\", (long long)res);\n            if (res < 0) {\n                lfs_logf(\"RETURN (seek error) %lld\", (long long)res);\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            lfs_logf(\"Dropped rcache. About to call lfs_file_flushedread with size=%lld rcache.buffer=%p\",\n                    (long long)size, (void *)lfs->rcache.buffer);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            lfs_logf(\"lfs_file_flushedread returned %lld\", (long long)res);\n            if (res < 0) {\n                lfs_logf(\"RETURN (flushedread error) %lld\", (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n\n            lfs_logf(\"Before memcpy: file->cache.buffer=%p lfs->rcache.buffer=%p copy_size=%lld file->cache.size=%lld cfg->cache_size=%lld\",\n                    (void *)file->cache.buffer, (void *)lfs->rcache.buffer,\n                    (long long)size, (long long)file->cache.size, (long long)lfs->cfg->cache_size);\n\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            lfs_logf(\"After memcpy: copied %lld bytes into file->cache.buffer=%p\",\n                    (long long)size, (void *)file->cache.buffer);\n\n        } else {\n            lfs_logf(\"SUB-BRANCH: shrink within blocks (size > inline_max). Flushing file first.\");\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            lfs_logf(\"lfs_file_flush returned %d\", err);\n            if (err) {\n                lfs_logf(\"RETURN (flush error) %d\", err);\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            lfs_logf(\"Calling lfs_ctz_find to find new head for size-1=%lld (was ctz.size=%lld)\",\n                    (long long)(size-1), (long long)file->ctz.size);\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            lfs_logf(\"lfs_ctz_find returned %d new block=%lld\", err, (long long)file->block);\n            if (err) {\n                lfs_logf(\"RETURN (ctz_find error) %d\", err);\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            lfs_logf(\"After shrink: file->pos=%lld file->ctz.head=%lld file->ctz.size=%lld\",\n                    (long long)file->pos, (long long)file->ctz.head, (long long)file->ctz.size);\n        }\n    } else if (size > oldsize) {\n        lfs_logf(\"BRANCH: size > oldsize (size=%lld oldsize=%lld). Seeking to end and filling with zeros.\",\n                (long long)size, (long long)oldsize);\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        lfs_logf(\"lfs_file_seek_ to end returned %lld\", (long long)res);\n        if (res < 0) {\n            lfs_logf(\"RETURN (seek end error) %lld\", (long long)res);\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                lfs_logf(\"RETURN (write zero error) %lld\", (long long)res);\n                return (int)res;\n            }\n        }\n        lfs_logf(\"Finished zero-fill. file->pos=%lld target_size=%lld\", (long long)file->pos, (long long)size);\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    lfs_logf(\"Restoring pos: seek to %lld returned %lld\", (long long)pos, (long long)res);\n    if (res < 0) {\n      lfs_logf(\"RETURN (restore seek error) %lld\", (long long)res);\n      return (int)res;\n    }\n\n    lfs_logf(\"EXIT lfs_file_truncate_: success final_pos=%lld final_ctz.size=%lld final_flags=0x%02x\",\n            (long long)file->pos, (long long)file->ctz.size, (unsigned)file->flags);\n\n    return 0;\n}\n"
}