{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind_:\n```c\nstatic int lfs_dir_rewind_(lfs_t *lfs, lfs_dir_t *dir) {\n    // reload the head dir\n    int err = lfs_dir_fetch(lfs, &dir->m, dir->head);\n    if (err) {\n        return err;\n    }\n\n    dir->id = 0;\n    dir->pos = 0;\n    return 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nint err = lfs_dir_fetch(lfs, &dir->m, dir->head);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No. In this call, &dir->m is passed so that lfs_dir_fetch can populate/modify the m member (so a non-const pointer is appropriate). dir->head in typical littlefs code is an integer block identifier (lfs_block_t), not a pointer, so Rule 8.13 is not applicable. (If the prototype of lfs_dir_fetch used a non-const pointer for some data that it does not modify, then the prototype \u2014 not this call site \u2014 would violate Rule 8.13.)"
}