{
  "user_message": "An agent A claimed that the following lfs_bd_crc code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of lfs_bd_crc.\n```c\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        *crc = lfs_crc(*crc, &dat, diff);\n    }\n\n    return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn lfs_bd_read the fragment modifies the parameters 'off' and 'size' (off += diff; size -= diff;). MISRA C 2023 Rule 17.8 forbids modifying function parameters; although modifying objects pointed-to by pointer parameters is allowed, these scalar parameters are value parameters being changed within the function, so this is a violation. (The local pointer 'data' is a local copy of 'buffer' and its modification is fine.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER lfs_bd_crc: hint=16 block=0 off=64 size=16 crc_in=4294967295\nCALL lfs_bd_read: iter_i=0 diff=8 hint_i=16 block=0 off_i=64 size_i=8 crc_in=4294967295\nRET  lfs_bd_read: iter_i=0 err=0 post_off=64 post_size=16 crc_mid=4294967295\nUPDATE crc: iter_i=0 diff=8 crc_out=3736805603 next_i=8\nCALL lfs_bd_read: iter_i=8 diff=8 hint_i=8 block=0 off_i=72 size_i=8 crc_in=3736805603\nRET  lfs_bd_read: iter_i=8 err=0 post_off=64 post_size=16 crc_mid=3736805603\nUPDATE crc: iter_i=8 diff=8 crc_out=3226221029 next_i=16\nEXIT lfs_bd_crc: success crc_out=3226221029\nENTER lfs_bd_crc: hint=64 block=0 off=0 size=60 crc_in=4294967295\nCALL lfs_bd_read: iter_i=0 diff=8 hint_i=64 block=0 off_i=0 size_i=8 crc_in=4294967295\nRET  lfs_bd_read: iter_i=0 err=0 post_off=0 post_size=60 crc_mid=4294967295\nUPDATE crc: iter_i=0 diff=8 crc_out=2803559361 next_i=8\nCALL lfs_bd_read: iter_i=8 diff=8 hint_i=56 block=0 off_i=8 size_i=8 crc_in=2803559361\nRET  lfs_bd_read: iter_i=8 err=0 post_off=0 post_size=60 crc_mid=2803559361\nUPDATE crc: iter_i=8 diff=8 crc_out=388878322 next_i=16\nCALL lfs_bd_read: iter_i=16 diff=8 hint_i=48 block=0 off_i=16 size_i=8 crc_in=388878322\nRET  lfs_bd_read: iter_i=16 err=0 post_off=0 post_size=60 crc_mid=388878322\nUPDATE crc: iter_i=16 diff=8 crc_out=662037927 next_i=24\nCALL lfs_bd_read: iter_i=24 diff=8 hint_i=40 block=0 off_i=24 size_i=8 crc_in=662037927\nRET  lfs_bd_read: iter_i=24 err=0 post_off=0 post_size=60 crc_mid=662037927\nUPDATE crc: iter_i=24 diff=8 crc_out=1083328722 next_i=32\nCALL lfs_bd_read: iter_i=32 diff=8 hint_i=32 block=0 off_i=32 size_i=8 crc_in=1083328722\nRET  lfs_bd_read: iter_i=32 err=0 post_off=0 post_size=60 crc_mid=1083328722\nUPDATE crc: iter_i=32 diff=8 crc_out=784924763 next_i=40\nCALL lfs_bd_read: iter_i=40 diff=8 hint_i=24 block=0 off_i=40 size_i=8 crc_in=784924763\nRET  lfs_bd_read: iter_i=40 err=0 post_off=0 post_size=60 crc_mid=784924763\nUPDATE crc: iter_i=40 diff=8 crc_out=2937042158 next_i=48\nCALL lfs_bd_read: iter_i=48 diff=8 hint_i=16 block=0 off_i=48 size_i=8 crc_in=2937042158\nRET  lfs_bd_read: iter_i=48 err=0 post_off=0 post_size=60 crc_mid=2937042158\nUPDATE crc: iter_i=48 diff=8 crc_out=810121973 next_i=56\nCALL lfs_bd_read: iter_i=56 diff=4 hint_i=8 block=0 off_i=56 size_i=4 crc_in=810121973\nRET  lfs_bd_read: iter_i=56 err=0 post_off=0 post_size=60 crc_mid=810121973\nUPDATE crc: iter_i=56 diff=4 crc_out=195944542 next_i=60\nEXIT lfs_bd_crc: success crc_out=195944542\nENTER lfs_bd_crc: hint=4 block=0 off=60 size=4 crc_in=195944542\nCALL lfs_bd_read: iter_i=0 diff=4 hint_i=4 block=0 off_i=60 size_i=4 crc_in=195944542\nRET  lfs_bd_read: iter_i=0 err=0 post_off=60 post_size=4 crc_mid=195944542\nUPDATE crc: iter_i=0 diff=4 crc_out=0 next_i=4\nEXIT lfs_bd_crc: success crc_out=0\nENTER lfs_bd_crc: hint=16 block=1 off=64 size=16 crc_in=4294967295\nCALL lfs_bd_read: iter_i=0 diff=8 hint_i=16 block=1 off_i=64 size_i=8 crc_in=4294967295\nRET  lfs_bd_read: iter_i=0 err=0 post_off=64 post_size=16 crc_mid=4294967295\nUPDATE crc: iter_i=0 diff=8 crc_out=3736805603 next_i=8\nCALL lfs_bd_read: iter_i=8 diff=8 hint_i=8 block=1 off_i=72 size_i=8 crc_in=3736805603\nRET  lfs_bd_read: iter_i=8 err=0 post_off=64 post_size=16 crc_mid=3736805603\nUPDATE crc: iter_i=8 diff=8 crc_out=3226221029 next_i=16\nEXIT lfs_bd_crc: success crc_out=3226221029\nENTER lfs_bd_crc: hint=64 block=1 off=0 size=60 crc_in=4294967295\nCALL lfs_bd_read: iter_i=0 diff=8 hint_i=64 block=1 off_i=0 size_i=8 crc_in=4294967295\nRET  lfs_bd_read: iter_i=0 err=0 post_off=0 post_size=60 crc_mid=4294967295\nUPDATE crc: iter_i=0 diff=8 crc_out=1806756703 next_i=8\nCALL lfs_bd_read: iter_i=8 diff=8 hint_i=56 block=1 off_i=8 size_i=8 crc_in=1806756703\nRET  lfs_bd_read: iter_i=8 err=0 post_off=0 post_size=60 crc_mid=1806756703\nUPDATE crc: iter_i=8 diff=8 crc_out=3108331107 next_i=16\nCALL lfs_bd_read: iter_i=16 diff=8 hint_i=48 block=1 off_i=16 size_i=8 crc_in=3108331107\nRET  lfs_bd_read: iter_i=16 err=0 post_off=0 post_size=60 crc_mid=3108331107\nUPDATE crc: iter_i=16 diff=8 crc_out=2790293632 next_i=24\nCALL lfs_bd_read: iter_i=24 diff=8 hint_i=40 block=1 off_i=24 size_i=8 crc_i\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_bd_crc:\nstatic int lfs_bd_read(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off,\n        void *buffer, lfs_size_t size) {\n    uint8_t *data = buffer;\n    if (off+size > lfs->cfg->block_size\n            || (lfs->block_count && block >= lfs->block_count)) {\n        return LFS_ERR_CORRUPT;\n    }\n\n    while (size > 0) {\n        lfs_size_t diff = size;\n\n        if (pcache && block == pcache->block &&\n                off < pcache->off + pcache->size) {\n            if (off >= pcache->off) {\n                // is already in pcache?\n                diff = lfs_min(diff, pcache->size - (off-pcache->off));\n                memcpy(data, &pcache->buffer[off-pcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // pcache takes priority\n            diff = lfs_min(diff, pcache->off-off);\n        }\n\n        if (block == rcache->block &&\n                off < rcache->off + rcache->size) {\n            if (off >= rcache->off) {\n                // is already in rcache?\n                diff = lfs_min(diff, rcache->size - (off-rcache->off));\n                memcpy(data, &rcache->buffer[off-rcache->off], diff);\n\n                data += diff;\n                off += diff;\n                size -= diff;\n                continue;\n            }\n\n            // rcache takes priority\n            diff = lfs_min(diff, rcache->off-off);\n        }\n\n        if (size >= hint && off % lfs->cfg->read_size == 0 &&\n                size >= lfs->cfg->read_size) {\n            // bypass cache?\n            diff = lfs_aligndown(diff, lfs->cfg->read_size);\n            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n            if (err) {\n                return err;\n            }\n\n            data += diff;\n            off += diff;\n            size -= diff;\n            continue;\n        }\n\n        // load to cache, first condition can no longer fail\n        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);\n        rcache->block = block;\n        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n        rcache->size = lfs_min(\n                lfs_min(\n                    lfs_alignup(off+hint, lfs->cfg->read_size),\n                    lfs->cfg->block_size)\n                - rcache->off,\n                lfs->cfg->cache_size);\n        int err = lfs->cfg->read(lfs->cfg, rcache->block,\n                rcache->off, rcache->buffer, rcache->size);\n        LFS_ASSERT(err <= 0);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = buffer;\n\n    for (size_t i = 0; i < size; i++) {\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];\n    }\n\n    return crc;\n}\n...\nuint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {\n    static const uint32_t rtable[16] = {\n        0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,\n        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,\n        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,\n        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,\n    };\n\n    const uint8_t *data = buffer;\n\n    for (size_t i = 0; i < size; i++) {\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];\n        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];\n    }\n\n    return crc;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for lfs_bd_crc. MISRA C:2023 Rule 17.8 forbids modifying a function\u2019s parameters (the parameter variables themselves); it allows modifying the object referred to by a pointer parameter but not the pointer value. lfs_bd_crc does not assign to any of its parameter variables. It updates *crc (the object pointed to by the crc parameter), which is explicitly permitted, and it passes expressions (e.g. off + i) to lfs_bd_read \u2014 these do not modify lfs_bd_crc\u2019s parameters.\n\nThe code that does modify parameter variables is lfs_bd_read (off += diff; size -= diff;). That function, not lfs_bd_crc, would be the one to flag under Rule 17.8. Note also that lfs_bd_read uses a local pointer data = buffer and mutates data; that is allowed because the pointer parameter buffer is not modified and the object pointed-to may be accessed via a local pointer.\n\nTherefore the agent A\u2019s claim that lfs_bd_crc violates Rule 17.8 is incorrect; the actual violation (if any) would be in lfs_bd_read."
}