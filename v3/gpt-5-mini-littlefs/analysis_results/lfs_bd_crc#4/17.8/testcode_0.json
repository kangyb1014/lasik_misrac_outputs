{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read the value parameters 'off' and 'size' are modified (e.g. 'off += diff;' and 'size -= diff;'), which alters function parameters passed by value. This violates MISRA C 2023 Rule 17.8. (Note: modifying 'data' is fine because it's a local pointer initialized from the 'buffer' parameter; modifying the objects pointed to by pointer parameters such as rcache is allowed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_crc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_crc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_crc:\n```c\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        *crc = lfs_crc(*crc, &dat, diff);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_crc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/47.txt */\nstatic void lfs_bd_crc_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    /* Log entry with initial state */\n    lfs_bd_crc_probe(\"lfs_bd_crc ENTER: hint=%lld, block=%llu, off=%lld, size=%llu, crc=%llu\",\n            (long long)hint, (unsigned long long)block,\n            (long long)off, (unsigned long long)size,\n            (unsigned long long)(crc ? *crc : 0U));\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n\n        /* Log before calling lfs_bd_read: computed parameters for this call */\n        lfs_bd_crc_probe(\"ITER: i=%lld, diff=%llu, call: hint-i=%lld, block=%llu, off+i=%lld, read_size=%llu\",\n                (long long)i, (unsigned long long)diff,\n                (long long)(hint - i), (unsigned long long)block,\n                (long long)(off + i), (unsigned long long)diff);\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            /* Log error and exit */\n            lfs_bd_crc_probe(\"lfs_bd_read ERROR: err=%d at i=%lld, diff=%llu, off+i=%lld\",\n                    err, (long long)i, (unsigned long long)diff, (long long)(off + i));\n            return err;\n        }\n\n        /* Log data chunk processed and crc before/after update */\n        lfs_bd_crc_probe(\"BEFORE_CRC: crc=%llu, processed_diff=%llu\",\n                (unsigned long long)(crc ? *crc : 0U), (unsigned long long)diff);\n\n        *crc = lfs_crc(*crc, &dat, diff);\n\n        lfs_bd_crc_probe(\"AFTER_CRC: crc=%llu\",\n                (unsigned long long)(crc ? *crc : 0U));\n    }\n\n    lfs_bd_crc_probe(\"lfs_bd_crc EXIT: crc=%llu\",\n            (unsigned long long)(crc ? *crc : 0U));\n\n    return 0;\n}\n"
}