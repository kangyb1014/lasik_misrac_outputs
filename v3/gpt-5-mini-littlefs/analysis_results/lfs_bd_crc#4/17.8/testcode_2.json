{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read the fragment modifies the parameters 'off' and 'size' (off += diff; size -= diff;). MISRA C 2023 Rule 17.8 forbids modifying function parameters; although modifying objects pointed-to by pointer parameters is allowed, these scalar parameters are value parameters being changed within the function, so this is a violation. (The local pointer 'data' is a local copy of 'buffer' and its modification is fine.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_crc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_crc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_crc:\n```c\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        *crc = lfs_crc(*crc, &dat, diff);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_crc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    /* Log entry and initial state */\n    lfs_log_probe(\"ENTER lfs_bd_crc: hint=%llu block=%llu off=%llu size=%llu crc_in=%lu\",\n            (unsigned long long)hint,\n            (unsigned long long)block,\n            (unsigned long long)off,\n            (unsigned long long)size,\n            (unsigned long)*crc);\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n\n        /* Log before calling lfs_bd_read to capture arguments passed */\n        lfs_log_probe(\"CALL lfs_bd_read: iter_i=%llu diff=%llu hint_i=%llu block=%llu off_i=%llu size_i=%llu crc_in=%lu\",\n                (unsigned long long)i,\n                (unsigned long long)diff,\n                (unsigned long long)(hint - i),\n                (unsigned long long)block,\n                (unsigned long long)(off + i),\n                (unsigned long long)diff,\n                (unsigned long)*crc);\n\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n\n        /* Log after call to detect any unexpected changes to parameters or state */\n        lfs_log_probe(\"RET  lfs_bd_read: iter_i=%llu err=%d post_off=%llu post_size=%llu crc_mid=%lu\",\n                (unsigned long long)i,\n                err,\n                (unsigned long long)off,\n                (unsigned long long)size,\n                (unsigned long)*crc);\n\n        if (err) {\n            lfs_log_probe(\"EXIT lfs_bd_crc: error=%d\", err);\n            return err;\n        }\n\n        *crc = lfs_crc(*crc, &dat, diff);\n\n        /* Log CRC update and loop progress */\n        lfs_log_probe(\"UPDATE crc: iter_i=%llu diff=%llu crc_out=%lu next_i=%llu\",\n                (unsigned long long)i,\n                (unsigned long long)diff,\n                (unsigned long)*crc,\n                (unsigned long long)(i + diff));\n    }\n\n    lfs_log_probe(\"EXIT lfs_bd_crc: success crc_out=%lu\", (unsigned long)*crc);\n    return 0;\n}\n"
}