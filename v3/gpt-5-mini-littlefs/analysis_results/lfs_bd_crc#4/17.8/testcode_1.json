{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'crc' is assigned to inside lfs_crc (crc = ... within the loop). Modifying the function parameter 'crc' violates MISRA C 2023 Rule 17.8 (a parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_bd_crc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_bd_crc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_bd_crc:\n```c\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n        if (err) {\n            return err;\n        }\n\n        *crc = lfs_crc(*crc, &dat, diff);\n    }\n\n    return 0;\n}\n```\n</target_code>\nPlease provide the modified lfs_bd_crc code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logger for lfs_bd_crc. Appends human-readable logs to /tmp/logs/47.txt\n   Logs loop iterations, buffer sizes, addresses used for reads, crc input and output,\n   and read errors. This function deliberately does not modify any function\n   parameters; it only observes state. */\nstatic void lfs_bd_crc_log(const char *stage,\n        lfs_off_t i, lfs_size_t diff, lfs_size_t hint_minus_i,\n        lfs_block_t block, lfs_off_t off_plus_i,\n        uint32_t crc_in, uint32_t crc_out, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"[%s] i=%jd diff=%zu hint-i=%zu block=%ju off+i=%jd crc_in=%\" PRIu32 \" crc_out=%\" PRIu32 \" err=%d\\n\",\n            stage,\n            (intmax_t)i,\n            (size_t)diff,\n            (size_t)hint_minus_i,\n            (uintmax_t)block,\n            (intmax_t)off_plus_i,\n            crc_in, crc_out, err);\n\n    fclose(f);\n}\n\nstatic int lfs_bd_crc(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,\n        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {\n    lfs_size_t diff = 0;\n\n    /* Log entry with initial crc value */\n    if (crc != NULL) {\n        lfs_bd_crc_log(\"entry\", 0, 0, (lfs_size_t)hint, block, off, *crc, *crc, 0);\n    } else {\n        lfs_bd_crc_log(\"entry\", 0, 0, (lfs_size_t)hint, block, off, 0u, 0u, 0);\n    }\n\n    for (lfs_off_t i = 0; i < size; i += diff) {\n        uint8_t dat[8];\n        diff = lfs_min(size-i, sizeof(dat));\n        int err = lfs_bd_read(lfs,\n                pcache, rcache, hint-i,\n                block, off+i, &dat, diff);\n\n        /* Log result of read */\n        uint32_t crc_before = (crc != NULL) ? *crc : 0u;\n        lfs_bd_crc_log(\"after_read\", i, diff, (lfs_size_t)(hint - i), block, off + i, crc_before, crc_before, err);\n\n        if (err) {\n            /* Log and propagate error */\n            lfs_bd_crc_log(\"read_error\", i, diff, (lfs_size_t)(hint - i), block, off + i, crc_before, crc_before, err);\n            return err;\n        }\n\n        /* Call lfs_crc using a local copy of the incoming crc value so we can\n           log the input and output values around the call. Preserve original\n           behavior by storing the returned value back through the pointer. */\n        uint32_t crc_in = crc_before;\n        uint32_t crc_out = lfs_crc(crc_in, &dat, diff);\n\n        /* Log before committing the updated crc */\n        lfs_bd_crc_log(\"crc_updated\", i, diff, (lfs_size_t)(hint - i), block, off + i, crc_in, crc_out, 0);\n\n        if (crc != NULL) {\n            *crc = crc_out;\n        }\n    }\n\n    /* Log exit with final crc value */\n    if (crc != NULL) {\n        lfs_bd_crc_log(\"exit\", (lfs_off_t)size, 0, (lfs_size_t)hint, block, off + (lfs_off_t)size, *crc, *crc, 0);\n    } else {\n        lfs_bd_crc_log(\"exit\", (lfs_off_t)size, 0, (lfs_size_t)hint, block, off + (lfs_off_t)size, 0u, 0u, 0);\n    }\n\n    return 0;\n}\n"
}