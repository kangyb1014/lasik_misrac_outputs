{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a file pointer to a non-const struct lfs_mlist* and passes it to lfs_mlist_isopen, but lfs_mlist_isopen only reads the pointed-to data (it compares pointers and does not modify the objects). Therefore the pointer could and should be to a const-qualified type. In other words, the parameter types of lfs_mlist_isopen could be declared as const struct lfs_mlist *head, const struct lfs_mlist *node, and the call adjusted to (const struct lfs_mlist *)file. As written, the code does not use const where possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/553.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "static void lfs_probe_log_mlist(const char *stage, lfs_t *lfs, lfs_file_t *file, int isopen, void *buffer, lfs_size_t size, lfs_ssize_t res) {\n    FILE *f = fopen(\"/tmp/logs/553.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log stage, pointers, sizes, and the result if available. */\n    fprintf(f, \"STAGE=%s\\n\", stage);\n    fprintf(f, \"  lfs=%p\\n\", (void*)lfs);\n    fprintf(f, \"  file=%p\\n\", (void*)file);\n\n    /* Show the cast that is under scrutiny: casting file to (struct lfs_mlist*).\n       We also show a const-qualified cast for comparison (this is only for log\n       purposes and does not alter program behavior). */\n    fprintf(f, \"  cast_to_nonconst=(struct lfs_mlist*)%p\\n\", (void*)((struct lfs_mlist*)file));\n    fprintf(f, \"  cast_to_const=(const struct lfs_mlist*)%p\\n\", (void*)((const struct lfs_mlist*)file));\n\n    fprintf(f, \"  buffer=%p size=%\" PRIu32 \"\\n\", buffer, size);\n\n    /* If we have a valid isopen value, print it. */\n    fprintf(f, \"  isopen=%d\\n\", isopen);\n\n    /* If a result is provided (res >= 0 or negative error), print it. Use a\n       sentinel of (INT32_MIN) when res is not set. */\n    if (res != (lfs_ssize_t)INT32_MIN) {\n        fprintf(f, \"  res=%\" PRId32 \"\\n\", res);\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the failed lock so we can trace control flow leading to early return. */\n        lfs_probe_log_mlist(\"lock_failed\", lfs, file, 0, buffer, size, (lfs_ssize_t)INT32_MIN);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n\n    /* Probe: call the check once to capture its return value and log the\n       pointer casts. We keep the original LFS_ASSERT call to preserve\n       behavior (it calls the same check). */\n    int probe_isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_probe_log_mlist(\"before_assert\", lfs, file, probe_isopen, buffer, size, (lfs_ssize_t)INT32_MIN);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    /* Log the result of the read and the fact we reached the end of the\n       function path. */\n    lfs_probe_log_mlist(\"after_read\", lfs, file, probe_isopen, buffer, size, res);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}"
}