{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg) expands to ((void)cfg) (a no-op). It performs no observable action (just discards lfs->cfg) so removing this statement would not affect program behaviour. Therefore this executed operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/552.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe logging helper. Writes a single line describing the current\n   control point and relevant state to /tmp/logs/552.txt. Keeps the\n   original logic intact; only appends diagnostics. */\nstatic void lfs_probe_log(const char *label, lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size, lfs_ssize_t res, int err) {\n    FILE *f = fopen(\"/tmp/logs/552.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log pointer state and numeric results. Use PRIu32/PRId32 for\n       size and res formatting consistent with the codebase. */\n    fprintf(f, \"%s: lfs=%p file=%p buffer=%p size=%\" PRIu32 \" res=%\" PRId32 \" err=%d\\n\",\n            label, (void*)lfs, (void*)file, buffer, size, res, err);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    /* Log entry with initial state. */\n    lfs_probe_log(\"ENTRY\", lfs, file, buffer, size, (lfs_ssize_t)0, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt. */\n    lfs_probe_log(\"AFTER_LOCK\", lfs, file, buffer, size, (lfs_ssize_t)0, err);\n\n    if (err) {\n        /* Log early return due to lock failure. */\n        lfs_probe_log(\"RETURN_LOCK_ERR\", lfs, file, buffer, size, (lfs_ssize_t)err, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log just before delegating to underlying implementation. */\n    lfs_probe_log(\"BEFORE_READ_\", lfs, file, buffer, size, (lfs_ssize_t)0, 0);\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n\n    /* Log state immediately prior to unlock. This is critical to\n       reproduce the scenario where LFS_UNLOCK is a no-op: we capture\n       state both before and after the call so agents can compare. */\n    lfs_probe_log(\"BEFORE_UNLOCK\", lfs, file, buffer, size, res, 0);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log state immediately after unlock. If LFS_UNLOCK is a no-op,\n       the logged state before and after should be identical, providing\n       evidence of the dead operation. */\n    lfs_probe_log(\"AFTER_UNLOCK\", lfs, file, buffer, size, res, 0);\n\n    /* Final return; original behavior preserved. */\n    lfs_probe_log(\"RETURN\", lfs, file, buffer, size, res, 0);\n    return res;\n}\n"
}