{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0). In lfs_file_read it is used as 'int err = LFS_LOCK(lfs->cfg);' which executes but has no side\u2011effects (the cast-to-void does nothing) and always yields 0. Removing the call (or substituting a literal 0) would not change program behaviour, so the operation is dead code. (Note: LFS_UNLOCK(cfg) is similarly a no-op ((void)cfg).)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/552.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/552.txt\n * This function is deliberately simple to avoid changing program logic.\n */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/552.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    lfs_probe_log(\"ENTER lfs_file_read: lfs=%p file=%p buffer=%p size=%llu\\n\",\n            (void*)lfs, (void*)file, buffer, (unsigned long long)size);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log the lock result and the assumption that the lock is a no-op (0) in\n     * the reported scenario. This captures the control-flow/state evidence:\n     * the call executes and yields a value in 'err'. */\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d\\n\", err);\n    if (err) {\n        lfs_probe_log(\"RETURN (lock error): err=%d\\n\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"CALL lfs_file_read_: lfs=%p file=%p size=%llu\\n\",\n            (void*)lfs, (void*)file, (unsigned long long)size);\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    lfs_probe_log(\"RETURNED from lfs_file_read_: res=%lld\\n\", (long long)res);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_UNLOCK (no-op expected): lfs=%p\\n\", (void*)lfs);\n\n    lfs_probe_log(\"EXIT lfs_file_read: returning res=%lld\\n\", (long long)res);\n    return res;\n}\n"
}