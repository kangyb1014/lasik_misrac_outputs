{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_file_read the code calls int err = LFS_LOCK(lfs->cfg); but LFS_LOCK is defined as ((void)cfg, 0), so err is always 0. Therefore the branch if (err) { return err; } can never be taken and the return statement inside that branch is unreachable. This constitutes unreachable code (MISRA C 2023 Rule 2.1).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/551.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log the result of LFS_LOCK and whether the if(err) branch will be taken. */\n    {\n        FILE *__log = fopen(\"/tmp/logs/551.txt\", \"a\");\n        if (__log) {\n            /* Print basic state useful for reproducing the reported scenario. */\n            fprintf(__log, \"lfs_file_read: entry lfs=%p file=%p buffer=%p size=%u LFS_LOCK returned=%d\\n\",\n                    (void*)lfs, (void*)file, buffer, (unsigned)size, err);\n            if (err) {\n                fprintf(__log, \"lfs_file_read: if(err) branch will be taken, returning %d\\n\", err);\n            } else {\n                fprintf(__log, \"lfs_file_read: if(err) branch NOT taken\\n\");\n            }\n            fclose(__log);\n        }\n    }\n\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    /* Probe: log the result of the underlying read and the unlocking step. */\n    {\n        FILE *__log = fopen(\"/tmp/logs/551.txt\", \"a\");\n        if (__log) {\n            fprintf(__log, \"lfs_file_read: lfs_file_read_ returned res=%ld\\n\", (long)res);\n            fprintf(__log, \"lfs_file_read: about to call LFS_UNLOCK and return\\n\");\n            fclose(__log);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}