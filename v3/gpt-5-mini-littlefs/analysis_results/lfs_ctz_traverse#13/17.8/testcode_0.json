{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'head = heads[count-1];' modifies the function parameter 'head' (a non-pointer parameter) inside lfs_ctz_traverse. MISRA C 2023 Rule 17.8 prohibits modifying function parameters. Replace with a local variable (e.g. lfs_block_t cur = head; update cur) or avoid assigning to the parameter to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/137.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_traverse:\n```c\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n\n    while (true) {\n        int err = cb(data, head);\n        if (err) {\n            return err;\n        }\n\n        if (index == 0) {\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (err) {\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            err = cb(data, heads[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        index -= count;\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_traverse code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper: append logs to /tmp/logs/137.txt */\nstatic void lfs_ctz_log(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/137.txt\", \"a\");\n    if (!f) { return; }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        lfs_ctz_log(\"lfs_ctz_traverse: size==0, head=%llu\", (unsigned long long)head);\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_ctz_log(\"lfs_ctz_traverse ENTER: head=%llu size=%llu index=%lld\",\n            (unsigned long long)head, (unsigned long long)size, (long long)index);\n\n    while (true) {\n        int err = cb(data, head);\n        lfs_ctz_log(\"cb called: head=%llu cb_err=%d\", (unsigned long long)head, err);\n        if (err) {\n            lfs_ctz_log(\"cb returned error: %d for head=%llu\", err, (unsigned long long)head);\n            return err;\n        }\n\n        if (index == 0) {\n            lfs_ctz_log(\"index==0, exiting traverse, head=%llu\", (unsigned long long)head);\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        lfs_ctz_log(\"about to read heads: head=%llu index=%lld count=%d\",\n                (unsigned long long)head, (long long)index, count);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        lfs_ctz_log(\"read heads: heads[0]=%llu heads[1]=%llu read_err=%d\",\n                (unsigned long long)heads[0], (unsigned long long)heads[1], err);\n        if (err) {\n            lfs_ctz_log(\"lfs_bd_read error: %d\", err);\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            err = cb(data, heads[i]);\n            lfs_ctz_log(\"cb called for heads[%d]=%llu cb_err=%d\", i,\n                    (unsigned long long)heads[i], err);\n            if (err) {\n                lfs_ctz_log(\"cb returned error for heads[%d]=%llu: %d\", i,\n                        (unsigned long long)heads[i], err);\n                return err;\n            }\n        }\n\n        /* Violation scenario: assignment to function parameter 'head' */\n        lfs_ctz_log(\"about to assign head = heads[count-1]: old_head=%llu new_head=%llu\",\n                (unsigned long long)head, (unsigned long long)heads[count-1]);\n        head = heads[count-1];\n        lfs_ctz_log(\"after assignment: head=%llu index_before=%lld\", (unsigned long long)head, (long long)index);\n        index -= count;\n        lfs_ctz_log(\"index updated: index=%lld\", (long long)index);\n    }\n}\n"
}