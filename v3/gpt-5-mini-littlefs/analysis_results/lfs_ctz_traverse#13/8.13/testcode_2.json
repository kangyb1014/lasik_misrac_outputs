{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'lfs' is declared as lfs_t *lfs but the function does not modify the object pointed to. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible (i.e. const lfs_t *lfs). Note: pcache is correctly const and rcache/buffer are non-const because they are modified/written to.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_traverse:\n```c\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n\n    while (true) {\n        int err = cb(data, head);\n        if (err) {\n            return err;\n        }\n\n        if (index == 0) {\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (err) {\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            err = cb(data, heads[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        index -= count;\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_traverse code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends logs to /tmp/logs/133.txt. */\nstatic void lfs_probe_log(const char *fmt, ...){\n    FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    lfs_probe_log(\"ENTER lfs_ctz_traverse: lfs=%p pcache=%p rcache=%p head=%llu size=%llu\",\n            (void*)lfs, (void*)pcache, (void*)rcache,\n            (unsigned long long)head, (unsigned long long)size);\n\n    if (size == 0) {\n        lfs_probe_log(\"EXIT lfs_ctz_traverse: size==0 -> return 0\");\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_probe_log(\"Computed index=%lld (from size-1=%llu)\", (long long)index, (unsigned long long)(size-1));\n\n    while (true) {\n        lfs_probe_log(\"ABOUT_TO_CB: head=%llu index=%lld\", (unsigned long long)head, (long long)index);\n        int err = cb(data, head);\n        lfs_probe_log(\"CB_RETURN: head=%llu err=%d\", (unsigned long long)head, err);\n        if (err) {\n            lfs_probe_log(\"EXIT lfs_ctz_traverse: cb returned err=%d\", err);\n            return err;\n        }\n\n        if (index == 0) {\n            lfs_probe_log(\"EXIT lfs_ctz_traverse: index==0 -> return 0\");\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        lfs_probe_log(\"About to read from bd: head=%llu count=%d read_size=%zu\",\n                (unsigned long long)head, count, (size_t)(count*sizeof(head)));\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        lfs_probe_log(\"BD_READ_RETURN: err=%d\", err);\n\n        /* Convert endianness in place as original code does */\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        lfs_probe_log(\"Read heads after le conversion: heads[0]=%llu heads[1]=%llu\",\n                (unsigned long long)heads[0], (unsigned long long)heads[1]);\n\n        if (err) {\n            lfs_probe_log(\"EXIT lfs_ctz_traverse: lfs_bd_read err=%d\", err);\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            lfs_probe_log(\"ABOUT_TO_CB for heads[%d]=%llu\", i, (unsigned long long)heads[i]);\n            err = cb(data, heads[i]);\n            lfs_probe_log(\"CB_RETURN for heads[%d]=%llu err=%d\", i, (unsigned long long)heads[i], err);\n            if (err) {\n                lfs_probe_log(\"EXIT lfs_ctz_traverse: cb returned err=%d for heads[%d]\", err, i);\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        lfs_probe_log(\"Advance head -> %llu ; index before decrement=%lld count=%d\", (unsigned long long)head, (long long)index, count);\n        index -= count;\n        lfs_probe_log(\"Index after decrement=%lld\", (long long)index);\n    }\n}\n"
}