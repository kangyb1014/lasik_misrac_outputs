{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe EventHandler function pointer and the 'data' parameter are non-const (void *). In OS_NotifyEvent the prototype uses 'void *data' and the global handler is invoked as OS_SharedGlobalVars.EventHandler(event, object_id, data); since this pointer is passed only for notification (read-only), the pointer should be const-qualified (const void *data) and the EventHandler type should accept const void * to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Probe logging helpers: append-only logging to /tmp/logs/1913.txt\n * These helpers are inserted to capture control flow and state for\n * the reported violation scenario. They intentionally do not change\n * the logic/state of OS_ObjectIdAllocateNew.\n */\nstatic void probe_log_internal(const char *msg)\n{\n    FILE *fp = NULL;\n\n    /* Ensure directory exists (best-effort). */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/1913.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"%s\\n\", msg);\n    fclose(fp);\n}\n\nstatic void probe_logf(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    if (t != (time_t)(-1))\n    {\n        (void)localtime_r(&t, &tm_buf);\n        (void)snprintf(buf, sizeof(buf), \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                       tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n                       tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n    }\n    else\n    {\n        buf[0] = '\\0';\n    }\n\n    size_t off = strlen(buf);\n\n    va_start(ap, fmt);\n    (void)vsnprintf(buf + off, sizeof(buf) - off, fmt, ap);\n    va_end(ap);\n\n    probe_log_internal(buf);\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    probe_logf(\"ENTER: OS_ObjectIdAllocateNew(idtype=%d, name=%p, token=%p)\", (int)idtype, (const void *)name, (const void *)token);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        probe_logf(\"ABORT: GlobalState indicates shutdown (GlobalState=0x%08X)\", (unsigned)OS_SharedGlobalVars.GlobalState);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    probe_logf(\"After OS_ObjectIdTransactionInit: return_code=%d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_logf(\"EXIT: OS_ObjectIdAllocateNew early return (transaction init failed) return_code=%d\", (int)return_code);\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        probe_logf(\"Checking for existing name: name=%s (ptr=%p)\", name, (const void *)name);\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n        probe_logf(\"After OS_ObjectIdFindNextMatch: return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        probe_logf(\"No name provided (name == NULL)\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_logf(\"Name already taken: setting return_code=OS_ERR_NAME_TAKEN\");\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        probe_logf(\"Name not found; finding next free ID\");\n        return_code = OS_ObjectIdFindNextFree(token);\n        probe_logf(\"After OS_ObjectIdFindNextFree: return_code=%d, token=%p\", (int)return_code, (const void *)token);\n        if (token != NULL)\n        {\n            probe_logf(\"Token state after FindNextFree: obj_id=%d\", (int)token->obj_id);\n        }\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        probe_logf(\"Allocation failed before notify (return_code=%d), cancelling transaction\", (int)return_code);\n        OS_ObjectIdTransactionCancel(token);\n        probe_logf(\"Transaction cancelled, returning %d\", (int)return_code);\n        return return_code;\n    }\n    else\n    {\n        /*\n         * Probe the event notification call. The reported violation concerns\n         * the EventHandler prototype and the 'data' pointer constness. Capture\n         * the control flow and values used when invoking OS_NotifyEvent.\n         */\n        void *notify_data = NULL; /* original code passes NULL */\n\n        probe_logf(\"About to call OS_NotifyEvent(event=OS_EVENT_RESOURCE_ALLOCATED, obj_id=%d, data=%p)\", (int)token->obj_id, (const void *)notify_data);\n\n        /* If available, log the EventHandler pointer value from shared globals.\n         * This helps demonstrate that a function pointer (likely of type\n         * EventHandler) is invoked by OS_NotifyEvent internally. We do not\n         * dereference it here; only capture its address for evidence. */\n#ifdef OS_SharedGlobalVars\n        /* Some builds may have this symbol; guard access. */\n        /* Note: Using a cast to const void* to print the pointer value only. */\n        probe_logf(\"Shared global EventHandler pointer (if present) = %p\", (const void *)OS_SharedGlobalVars.EventHandler);\n#endif\n\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, notify_data);\n        probe_logf(\"After OS_NotifyEvent: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_logf(\"Converting token to ID (OS_ObjectIdConvertToken)\");\n        return_code = OS_ObjectIdConvertToken(token);\n        probe_logf(\"After OS_ObjectIdConvertToken: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_logf(\"Finalizing new object due to error (return_code=%d)\", (int)return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        probe_logf(\"After OS_ObjectIdFinalizeNew: return_code=%d\", (int)return_code);\n    }\n\n    probe_logf(\"EXIT: OS_ObjectIdAllocateNew returning %d\", (int)return_code);\n    return return_code;\n}\n"
}