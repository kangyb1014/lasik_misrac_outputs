{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy may read beyond the source buffer if Rvc->Data.Rvc.Buf.IndirectPtr is NULL or points to a buffer smaller than StubPtr->Data.Buff.TotalSize. Although the code checks StubPtr->Data.Rvc.ActualSz == StubPtr->Data.Buff.TotalSize, there is no explicit check that IndirectPtr is non-NULL and actually refers to at least ActualSz bytes (or that the buffer has not been freed). If IndirectPtr is invalid or smaller than TotalSize (and TotalSize > 0), the memcpy(\u2026, IndirectPtr, TotalSize) will access out of bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3049.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteVaHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Probe logging to help reproduce potential out-of-bounds / invalid-pointer scenarios */\n    FILE *logf = fopen(\"/tmp/logs/3049.txt\", \"a\");\n    if (logf == NULL)\n    {\n        /* Fallback if directory /tmp/logs does not exist */\n        logf = fopen(\"/tmp/3049.txt\", \"a\");\n    }\n\n    if (logf != NULL)\n    {\n        /* Log entry state: key, function name, handler pointer, address of va_list for inspection */\n        fprintf(logf, \"UT_ExecuteVaHandler ENTRY: FuncKey=%llu, FunctionName=%s, DefaultHandler=%p, VaList_addr=%p\\n\",\n                (unsigned long long)(uintptr_t)FuncKey,\n                (FunctionName != NULL) ? FunctionName : \"(null)\",\n                (void *)DefaultHandler,\n                (void *)&VaList);\n        fflush(logf);\n    }\n\n    /* Evaluate stub entry once and record result (preserve original control flow) */\n    void *stubEntry = (void *)UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_GetStubEntry returned %p\\n\", stubEntry);\n        fflush(logf);\n    }\n\n    /* Preserve original behavior: if no final handler registered and a default handler is provided, register it */\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Condition: stubEntry == NULL && DefaultHandler != NULL -> calling UT_SetVaHandlerFunction\\n\");\n            fflush(logf);\n        }\n\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"UT_SetVaHandlerFunction completed for FuncKey=%llu\\n\", (unsigned long long)(uintptr_t)FuncKey);\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"No registration: stubEntry %s, DefaultHandler %s\\n\",\n                    (stubEntry == NULL) ? \"NULL\" : \"non-NULL\",\n                    (DefaultHandler == NULL) ? \"NULL\" : \"non-NULL\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"About to call UT_DefaultStubImplWithArgs(FunctionName=\\\"%s\\\", FuncKey=%llu, argCount=0, VaList_addr=%p)\\n\",\n                (FunctionName != NULL) ? FunctionName : \"(null)\",\n                (unsigned long long)(uintptr_t)FuncKey,\n                (void *)&VaList);\n        fclose(logf);\n    }\n\n    /* Original functionality retained */\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n"
}