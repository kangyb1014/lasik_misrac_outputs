{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memset call can write TotalSize bytes to StubPtr->Data.Buff.BasePtr without checking that BasePtr is non-NULL or that TotalSize does not exceed the actual allocated size. If a UT_StubTable entry exists whose Data.Buff.TotalSize > 0 but BasePtr is NULL or points to a smaller/dangling buffer (for example: a return-buffer entry was created with TotalSize set but the backing memory was not allocated or was freed elsewhere, or corruption/logic bug left TotalSize larger than the actual allocation), the memset will access memory beyond the object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3049.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteVaHandler code.\n",
  "test_code": "void UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Probe logging to capture control flow and state for debugging potential out-of-bounds string/memory ops */\n    void *stub_entry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    /* Open log file (append) and write useful state information. Keep this non-intrusive. */\n    {\n        FILE *log = fopen(\"/tmp/logs/3049.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Print caller visible state. Avoid dereferencing stub internals here to prevent side-effects. */\n            fprintf(log, \"UT_ExecuteVaHandler enter\\n\");\n            fprintf(log, \"  FuncKey: %llu\\n\", (unsigned long long)FuncKey);\n            fprintf(log, \"  FunctionName: %s\\n\", FunctionName ? FunctionName : \"(null)\");\n            fprintf(log, \"  DefaultHandler: %p\\n\", (void *)DefaultHandler);\n            fprintf(log, \"  Stub entry pointer: %p\\n\", stub_entry);\n\n            if (stub_entry == NULL)\n            {\n                fprintf(log, \"  Stub entry: NULL (will set default handler if provided)\\n\");\n            }\n            else\n            {\n                /* We intentionally do not dereference internal stub fields here (like BasePtr/TotalSize)\n                 * because their layout may not be visible in this translation unit. Instead, log that\n                 * the stub exists so downstream code that manipulates stub internals can be examined\n                 * (and any unsafe operations can be correlated with this entry). */\n                fprintf(log, \"  Stub entry: non-NULL (internal fields not dereferenced in this probe)\\n\");\n            }\n\n            fprintf(log, \"  About to evaluate condition and/or call UT_DefaultStubImplWithArgs\\n\");\n            fclose(log);\n        }\n    }\n\n    /* Preserve original control-flow/logic as much as possible, using the previously obtained stub_entry */\n    if (stub_entry == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    /* Call the original default stub implementation. */\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    /* Log return from UT_DefaultStubImplWithArgs to help trace whether subsequent unsafe behavior occurs. */\n    {\n        FILE *log = fopen(\"/tmp/logs/3049.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_ExecuteVaHandler exit (returned from UT_DefaultStubImplWithArgs)\\n\\n\");\n            fclose(log);\n        }\n    }\n}\n"
}