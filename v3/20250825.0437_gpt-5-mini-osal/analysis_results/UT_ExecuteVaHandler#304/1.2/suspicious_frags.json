{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UT_ExecuteVaHandler:\ntypedef cpuaddr UT_EntryKey_t\n...\ntypedef void (*UT_VaHandlerFunc_t)(void *UserObj, UT_EntryKey_t FuncKey, const UT_StubContext_t *Context, va_list va)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler-specific language extensions are present in the provided code. The function uses standard C constructs only: a prototype-style function definition, typedef-based types, a function pointer typedef, the standard va_list from <stdarg.h>, NULL, and ordinary function calls and control flow. There are no uses of known compiler extensions such as __attribute__, __asm__, __builtin_*, typeof, statement expressions ({ ... }), nested functions, inline assembly, Microsoft-specific keywords, or other vendor-specific tokens that would be explicitly documented as language extensions. The only item that could be ambiguous is the identifier \"cpuaddr\" in the typedef shown (typedef cpuaddr UT_EntryKey_t); that by itself is just a type name alias and not a language extension \u2014 whether it maps to a compiler-specific builtin type would depend on its definition elsewhere, so its definition (not the code shown here) would need to be checked if there is concern. Based on the code provided, no fragments require investigation for MISRA C 2023 Rule 1.2."
}