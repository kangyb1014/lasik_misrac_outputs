{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_ConsoleWrite accepts a const char *Str and forwards it to OS_Console_CopyOut/other console-output code which likely uses string.h routines (e.g. strlen/strcpy) to determine or copy the string. If a caller passes a pointer that is not NUL-terminated (or otherwise points near the end of an object), those string functions can read beyond the bounds of the referenced object. Although the shown caller OS_printf ensures msg_buffer is NUL-terminated, other callers could pass non-terminated buffers and trigger out-of-bounds accesses, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2289.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_printf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_printf code.\n",
  "test_code": "void OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n    FILE   *logf = NULL;\n    int     i, limit, lim;\n\n    /* Probe: log entry and pointer value */\n    logf = fopen(\"/tmp/logs/2289.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_printf ENTRY: String=%p\\n\", (const void *)String);\n        fclose(logf);\n    }\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         * Also log this control path for repro/evidence purposes.\n         */\n        logf = fopen(\"/tmp/logs/2289.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_printf: called when OSAL not initialized; String=%p\\n\", (const void *)String);\n            fclose(logf);\n        }\n\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        /*\n         * Probe: log the formatted buffer, its size, and the console id.\n         * All accesses here are limited to msg_buffer (which is safely sized\n         * and explicitly NUL-terminated) to avoid introducing new out-of-bounds\n         * memory accesses.\n         */\n        logf = fopen(\"/tmp/logs/2289.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_printf: formatted size=%d truncated=%s console=%d\\n\",\n                    actualsz,\n                    (actualsz == (OS_BUFFER_SIZE - 1)) ? \"yes\" : \"no\",\n                    OS_SharedGlobalVars.PrintfConsoleId);\n\n            fprintf(logf, \"msg_buffer (printable/escaped up to 256 bytes): \");\n            limit = (actualsz < 256) ? actualsz : 256;\n            for (i = 0; i < limit; ++i)\n            {\n                unsigned char c = (unsigned char)msg_buffer[i];\n                if (c >= 32 && c < 127)\n                {\n                    fputc(c, logf);\n                }\n                else\n                {\n                    fprintf(logf, \"\\\\x%02X\", c);\n                }\n            }\n            fputc('\\n', logf);\n\n            fprintf(logf, \"msg_buffer hex (first 64 bytes): \");\n            lim = (actualsz < 64) ? actualsz : 64;\n            for (i = 0; i < lim; ++i)\n            {\n                fprintf(logf, \"%02X \", (unsigned char)msg_buffer[i]);\n            }\n            fputc('\\n', logf);\n\n            fclose(logf);\n        }\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}"
}