{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation when OS_DEBUG is defined as an empty macro: OS_DEBUG(\"BUG: ...\", String) expands to nothing, leaving the if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER) { /* empty */ } branch effectively empty. The condition is evaluated and the branch executed but contains no effectual operation; removing the entire if-branch (or the evaluated debug call) would not change program behaviour (aside from timing), so this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_printf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_printf code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append diagnostic information to /tmp/logs/2282.txt\n * This function is intentionally simple and non-intrusive. It preserves the\n * original OS_printf logic while recording the control-flow decisions and\n * relevant state so that the scenario where OS_DEBUG expands to nothing can\n * be reproduced and analyzed. */\nstatic void OS_printf_log_probe(const char *stage, const char *String)\n{\n    FILE *f = fopen(\"/tmp/logs/2282.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Write a single-line record describing the probe point and key state.\n         * Use safe formatting for a possibly NULL String. */\n        fprintf(f, \"%s: GlobalState=%u, OS_INIT_MAGIC_NUMBER=%u, PrintfEnabled=%d, PrintfConsoleId=%d, String=\\\"%s\\\"\\n\",\n                stage,\n                (unsigned)OS_SharedGlobalVars.GlobalState,\n                (unsigned)OS_INIT_MAGIC_NUMBER,\n                (int)OS_SharedGlobalVars.PrintfEnabled,\n                (int)OS_SharedGlobalVars.PrintfConsoleId,\n                (String != NULL) ? String : \"(null)\");\n        fclose(f);\n    }\n}\n\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    /* Probe at function entry */\n    OS_printf_log_probe(\"entry\", String);\n\n    /* Evaluate the condition into a local variable so the probe can record\n     * the decision without changing the original control flow semantics. */\n    int not_initialized = (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER);\n\n    /* Record the evaluated condition before branching. */\n    OS_printf_log_probe(not_initialized ? \"cond_true_pre\" : \"cond_false_pre\", String);\n\n    if (not_initialized)\n    {\n        /* Log that the not-initialized branch was taken. This provides a\n         * persistent trace to reproduce the scenario in which the OS_DEBUG\n         * macro might expand to nothing (leaving the branch effectless). */\n        OS_printf_log_probe(\"branch_not_initialized\", String);\n\n        /* Preserve original behaviour: attempt to emit a debug message. */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        /* Probe just before writing to the console so the log captures the\n         * formatted message and where it will be directed. */\n        OS_printf_log_probe(\"about_to_console_write\", msg_buffer);\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n\n    /* Probe at function exit */\n    OS_printf_log_probe(\"exit\", String);\n}\n"
}