{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_Posix_BinSemAcquireMutex:\n```c\nint32 OS_Posix_BinSemAcquireMutex(pthread_mutex_t *mut)\n{\n    struct timespec timeout;\n\n    if (clock_gettime(CLOCK_REALTIME, &timeout) != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    timeout.tv_sec += OS_POSIX_BINSEM_MAX_WAIT_SECONDS;\n\n    if (pthread_mutex_timedlock(mut, &timeout) != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_Posix_BinSemAcquireMutex:\n#define OS_POSIX_BINSEM_MAX_WAIT_SECONDS 2\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n...\nint32 OS_BinSemGive_Impl(const OS_object_token_t *token)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /*\n     * Note there is a possibility that another thread is concurrently taking this sem,\n     * and has just checked the current_value but not yet inside the cond_wait call.\n     *\n     * To address this possibility - the lock must be taken here.  This is unfortunate\n     * as it means there may be a task switch when _giving_ a binary semaphore.  But the\n     * alternative of having a BinSemGive not wake up the other thread is a bigger issue.\n     *\n     * Counting sems do not suffer from this, as there is a native POSIX mechanism for those.\n     *\n     * Note: This lock should be readily available, with only minimal delay if any.\n     * If a long delay occurs here, it means something is fundamentally wrong.\n     */\n\n    /* Lock the mutex ( not the table! ) */\n    if (OS_Posix_BinSemAcquireMutex(&sem->id) != OS_SUCCESS)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* Binary semaphores are always set as \"1\" when given */\n    sem->current_value = 1;\n\n    /* unblock one thread that is waiting on this sem */\n    pthread_cond_signal(&(sem->cv));\n\n    pthread_mutex_unlock(&(sem->id));\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_BinSemFlush_Impl(const OS_object_token_t *token)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* Lock the mutex ( not the table! ) */\n    if (OS_Posix_BinSemAcquireMutex(&sem->id) != OS_SUCCESS)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* increment the flush counter.  Any other threads that are\n     * currently pending in SemTake() will see the counter change and\n     * return _without_ modifying the semaphore count.\n     */\n    ++sem->flush_request;\n\n    /* unblock all threads that are be waiting on this sem */\n    pthread_cond_broadcast(&(sem->cv));\n\n    pthread_mutex_unlock(&(sem->id));\n\n    return OS_SUCCESS;\n}\n...\nstatic int32 OS_GenericBinSemTake_Impl(const OS_object_token_t *token, const struct timespec *timeout)\n{\n    sig_atomic_t                      flush_count;\n    int32                             return_code;\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /*\n     * Note - this lock should be quickly available - should not delay here.\n     * The main delay is in the pthread_cond_wait() below.\n     */\n    /* Lock the mutex ( not the table! ) */\n    if (OS_Posix_BinSemAcquireMutex(&sem->id) != OS_SUCCESS)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* because pthread_cond_wait() is also a cancellation point,\n     * this uses a cleanup handler to ensure that if canceled during this call,\n     * the mutex is also released */\n    pthread_cleanup_push(OS_Posix_BinSemReleaseMutex, &sem->id);\n\n    return_code = OS_SUCCESS;\n\n    /*\n     * Note that for vxWorks compatibility, we need to stop pending on the semaphore\n     * and return from this function under two possible circumstances:\n     *\n     *  a) the semaphore count was nonzero (may be pre-existing or due to a give)\n     *     this is the normal case, we should decrement the count by 1 and return.\n     *  b) the semaphore got \"flushed\"\n     *     in this case ALL tasks are un-blocked and we do NOT decrement the count.\n     */\n\n    /*\n     * first take a local snapshot of the flush request counter,\n     * if it changes, we know that someone else called SemFlush.\n     */\n    flush_count = sem->flush_request;\n\n    /* Note - the condition must be checked in a while loop because\n     * even if pthread_cond_wait() returns, it does NOT guarantee that\n     * the condition we are looking for has been met.\n     *\n     * Also if the current_value is already nonzero we will not wait.\n     */\n    while (sem->current_value == 0 && sem->flush_request == flush_count)\n    {\n        /* Must pend until something changes */\n        if (timeout == NULL)\n        {\n            /* wait forever */\n            pthread_cond_wait(&(sem->cv), &(sem->id));\n        }\n        else if (pthread_cond_timedwait(&(sem->cv), &(sem->id), timeout) == ETIMEDOUT)\n        {\n            return_code = OS_SEM_TIMEOUT;\n            break;\n        }\n    }\n\n    /* If the flush counter did not change, set the value to zero */\n    if (return_code == OS_SUCCESS && sem->flush_request == flush_count)\n    {\n        sem->current_value = 0;\n    }\n\n    /*\n     * Pop the cleanup handler.\n     * Passing \"true\" means it will be executed, which\n     * handles releasing the mutex.\n     */\n    pthread_cleanup_pop(true);\n\n    return return_code;\n}\n...\nint32 OS_BinSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemFlush_Impl(&token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_BinSemTake_Impl(const OS_object_token_t *token)\n{\n    return (OS_GenericBinSemTake_Impl(token, NULL));\n}\n...\nint32 OS_BinSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec ts;\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    return (OS_GenericBinSemTake_Impl(token, &ts));\n}\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n    /* Lock the mutex ( not the table! ) */\n    if (OS_Posix_BinSemAcquireMutex(&sem->id) != OS_SUCCESS)\n    {\n        return OS_SEM_FAILURE;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The return on failure is reachable because OS_Posix_BinSemAcquireMutex can fail (it returns OS_SEM_FAILURE if clock_gettime or pthread_mutex_timedlock fails). Therefore the if branch and its return are not unreachable."
}