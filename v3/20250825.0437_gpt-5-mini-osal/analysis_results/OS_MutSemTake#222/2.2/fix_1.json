{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_2222_EnsureLogDir(void)\n{\n    /* Attempt to create the /tmp/logs directory if it doesn't exist. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\nstatic void OS_2222_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    OS_2222_EnsureLogDir();\n    f = fopen(\"/tmp/logs/2222.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and token/sem_id state */\n    OS_2222_Log(\"OS_MutSemTake: after OS_ObjectIdGetById - sem_id=%lu return_code=%ld token=%lu\",\n                (unsigned long)sem_id, (long)return_code, (unsigned long)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Log the obtained mutex pointer */\n        OS_2222_Log(\"OS_MutSemTake: resolved mutex pointer=%p for sem_id=%lu\",\n                    (void *)mutex, (unsigned long)sem_id);\n\n        return_code = OS_MutSemTake_Impl(&token);\n\n        /* Log the result of the platform-specific take implementation */\n        OS_2222_Log(\"OS_MutSemTake: after OS_MutSemTake_Impl - sem_id=%lu return_code=%ld\",\n                    (unsigned long)sem_id, (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            /* Probe: capture task id once, log it, then set owner (preserves original logic) */\n            osal_id_t task_id = OS_TaskGetId();\n\n            OS_2222_Log(\"OS_MutSemTake: obtained task_id=%lu for sem_id=%lu\",\n                        (unsigned long)task_id, (unsigned long)sem_id);\n\n            mutex->last_owner = task_id;\n\n            OS_2222_Log(\"OS_MutSemTake: set mutex->last_owner=%lu for sem_id=%lu\",\n                        (unsigned long)mutex->last_owner, (unsigned long)sem_id);\n        }\n    }\n\n    /* Final return value - unchanged semantics */\n    OS_2222_Log(\"OS_MutSemTake: returning return_code=%ld for sem_id=%lu\",\n                (long)return_code, (unsigned long)sem_id);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp7q7dvhyj/src/src/os/shared/src/osapi-mutex.c: In function 'OS_MutSemTake':\n/tmp/tmp7q7dvhyj/src/src/os/shared/src/osapi-mutex.c:226:17: error: aggregate value used where an integer was expected\n  226 |                 (unsigned long)sem_id, (long)return_code, (unsigned long)token);\n      |                 ^\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:244: CMakeFiles/osal.dir/src/os/shared/src/osapi-mutex.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemTake as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <stdint.h>\n\n/* Minimal type aliases used by the function under test */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\n\n/* Represent the object token type as a struct so it is an aggregate (as in the real code). */\ntypedef struct\n{\n    uint32_t value;\n} OS_object_token_t;\n\n/* Mutex internal record with only the fields used here. */\ntypedef struct\n{\n    osal_id_t last_owner;\n} OS_mutex_internal_record_t;\n\n/* Constants used by the implementation (use enums/consts rather than macros). */\nenum\n{\n    OS_LOCK_MODE_NONE = 0,\n    LOCAL_OBJID_TYPE = 0,\n    OS_SUCCESS = 0\n};\n\n/* External symbol used in the call to OS_OBJECT_TABLE_GET in the original code. */\nextern void *OS_mutex_table;\n\n/* Prototypes for functions that exist elsewhere in the full project.  We only declare them\n   here so this translation unit compiles; we do not provide mock implementations. */\nint32 OS_ObjectIdGetById(int lock_mode, int local_type, osal_id_t id, OS_object_token_t *token);\nOS_mutex_internal_record_t *OS_OBJECT_TABLE_GET(void *table, OS_object_token_t token);\nint32 OS_MutSemTake_Impl(OS_object_token_t *token);\nosal_id_t OS_TaskGetId(void);\n\nstatic void OS_2222_EnsureLogDir(void)\n{\n    /* Attempt to create the /tmp/logs directory if it doesn't exist. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\nstatic void OS_2222_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    OS_2222_EnsureLogDir();\n    f = fopen(\"/tmp/logs/2222.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and token/sem_id state\n       Note: token is an aggregate type, so print its address rather than casting it to an integer. */\n    OS_2222_Log(\"OS_MutSemTake: after OS_ObjectIdGetById - sem_id=%lu return_code=%ld token=%p\",\n                (unsigned long)sem_id, (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Log the obtained mutex pointer */\n        OS_2222_Log(\"OS_MutSemTake: resolved mutex pointer=%p for sem_id=%lu\",\n                    (void *)mutex, (unsigned long)sem_id);\n\n        return_code = OS_MutSemTake_Impl(&token);\n\n        /* Log the result of the platform-specific take implementation */\n        OS_2222_Log(\"OS_MutSemTake: after OS_MutSemTake_Impl - sem_id=%lu return_code=%ld\",\n                    (unsigned long)sem_id, (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            /* Probe: capture task id once, log it, then set owner (preserves original logic) */\n            osal_id_t task_id = OS_TaskGetId();\n\n            OS_2222_Log(\"OS_MutSemTake: obtained task_id=%lu for sem_id=%lu\",\n                        (unsigned long)task_id, (unsigned long)sem_id);\n\n            mutex->last_owner = task_id;\n\n            OS_2222_Log(\"OS_MutSemTake: set mutex->last_owner=%lu for sem_id=%lu\",\n                        (unsigned long)mutex->last_owner, (unsigned long)sem_id);\n        }\n    }\n\n    /* Final return value - unchanged semantics */\n    OS_2222_Log(\"OS_MutSemTake: returning return_code=%ld for sem_id=%lu\",\n                (long)return_code, (unsigned long)sem_id);\n\n    return return_code;\n}\n",
  "explanation": "The compile error came from attempting to cast and print an aggregate type (OS_object_token_t) as an integer (%lu). I changed the log to print the address of the token using %p and (void *)&token, which is valid for aggregate types. To make this translation unit self-contained and compileable, I added the necessary includes, type definitions (int32, osal_id_t, OS_object_token_t, OS_mutex_internal_record_t), enum constants, and function prototypes for external functions/objects referenced by OS_MutSemTake. No mock functions or macros were defined; only declarations and the original logic were preserved."
}