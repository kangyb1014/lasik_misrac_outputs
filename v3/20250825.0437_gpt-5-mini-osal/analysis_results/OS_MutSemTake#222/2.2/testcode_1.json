{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'task_id' and its assignment are redundant. The statement 'task_id = OS_TaskGetId_Impl();' merely stores the value into a temporary that is immediately returned; replacing the function body with 'return OS_TaskGetId_Impl();' does not change program behaviour. Because the assignment is an executed operation whose removal would not affect behaviour, this constitutes dead code (violates MISRA C 2023 Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2222.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake:\n```c\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        return_code = OS_MutSemTake_Impl(&token);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            mutex->last_owner = OS_TaskGetId();\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: ensure the log directory exists and append a formatted message. */\nstatic void OS_2222_EnsureLogDir(void)\n{\n    /* Attempt to create the /tmp/logs directory if it doesn't exist. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void OS_2222_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    OS_2222_EnsureLogDir();\n    f = fopen(\"/tmp/logs/2222.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and token/sem_id state */\n    OS_2222_Log(\"OS_MutSemTake: after OS_ObjectIdGetById - sem_id=%lu return_code=%ld token=%lu\",\n                (unsigned long)sem_id, (long)return_code, (unsigned long)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Log the obtained mutex pointer */\n        OS_2222_Log(\"OS_MutSemTake: resolved mutex pointer=%p for sem_id=%lu\",\n                    (void *)mutex, (unsigned long)sem_id);\n\n        return_code = OS_MutSemTake_Impl(&token);\n\n        /* Log the result of the platform-specific take implementation */\n        OS_2222_Log(\"OS_MutSemTake: after OS_MutSemTake_Impl - sem_id=%lu return_code=%ld\",\n                    (unsigned long)sem_id, (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            /* Probe: capture task id once, log it, then set owner (preserves original logic) */\n            osal_id_t task_id = OS_TaskGetId();\n\n            OS_2222_Log(\"OS_MutSemTake: obtained task_id=%lu for sem_id=%lu\",\n                        (unsigned long)task_id, (unsigned long)sem_id);\n\n            mutex->last_owner = task_id;\n\n            OS_2222_Log(\"OS_MutSemTake: set mutex->last_owner=%lu for sem_id=%lu\",\n                        (unsigned long)mutex->last_owner, (unsigned long)sem_id);\n        }\n    }\n\n    /* Final return value - unchanged semantics */\n    OS_2222_Log(\"OS_MutSemTake: returning return_code=%ld for sem_id=%lu\",\n                (long)return_code, (unsigned long)sem_id);\n\n    return return_code;\n}"
}