{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * (name) to a non-const void *: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This discards the const qualifier and produces a pointer that can be treated as mutable by the callee (OS_ObjectIdFindNextMatch/OS_ObjectNameMatch). Under MISRA C 2023 Rule 8.13 this is a violation because the pointer should point to a const-qualified type whenever possible (the function parameter should accept a const void * or the code should avoid casting away const). This also risks undefined behavior if the callee attempts to modify the pointed-to data (e.g. string literal).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function to log control flow and state for OS_MutSemCreate\n * Logs are appended to /tmp/logs/2173.txt. This helper is written\n * to avoid changing the logic of OS_MutSemCreate and does not cast\n * away const qualifiers. */\nstatic void OS_MutSemCreate_Log(const char *stage,\n                                const osal_id_t *sem_id,\n                                const char *sem_name,\n                                uint32 options,\n                                int32 return_code,\n                                OS_object_token_t token)\n{\n    FILE *f = fopen(\"/tmp/logs/2173.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging is unavailable, do not affect behavior */\n    }\n\n    /* Print a safe representation of each parameter.\n     * sem_name is const char* so print it directly (or a placeholder).\n     * sem_id printed as pointer address; token printed as integer via uintptr_t. */\n    fprintf(f,\n            \"[OS_MutSemCreate] %s: sem_id=%p sem_name=%s options=%llu return_code=%lld token=%llu\\n\",\n            stage,\n            (const void *)sem_id,\n            (sem_name != NULL) ? sem_name : \"(null)\",\n            (unsigned long long)options,\n            (long long)return_code,\n            (unsigned long long)(uintptr_t)token);\n\n    fclose(f);\n}\n\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Log function entry with initial parameters. Do not print an uninitialized token. */\n    OS_MutSemCreate_Log(\"entry\", sem_id, sem_name, options, -1, (OS_object_token_t)0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt; token is valid only if return_code == OS_SUCCESS. */\n    OS_MutSemCreate_Log(\"after_allocate\", sem_id, sem_name, options, return_code,\n                        (return_code == OS_SUCCESS) ? token : (OS_object_token_t)0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Log after initialization of table entry */\n        OS_MutSemCreate_Log(\"after_init\", sem_id, sem_name, options, return_code, token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Log after OS-specific implementation */\n        OS_MutSemCreate_Log(\"after_impl\", sem_id, sem_name, options, return_code, token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Final log before return */\n        OS_MutSemCreate_Log(\"before_return\", sem_id, sem_name, options, return_code, token);\n    }\n    else\n    {\n        /* Log failure path where allocation did not succeed */\n        OS_MutSemCreate_Log(\"alloc_failed\", sem_id, sem_name, options, return_code, (OS_object_token_t)0);\n    }\n\n    return return_code;\n}\n"
}