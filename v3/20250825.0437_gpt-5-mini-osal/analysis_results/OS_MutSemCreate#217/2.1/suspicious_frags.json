{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemCreate:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_CHECK_APINAME(str) OS_CHECK_STRING(str,OS_MAX_API_NAME,OS_ERR_NAME_TOO_LONG)\n...\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\n#define OS_OBJECT_INIT(tok, ref, namefield, nameval) {memset(ref,0,sizeof(*ref));strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1);OS_ObjectIdGlobalFromToken(&tok)->name_entry=ref->namefield;}\n...\nint32 OS_MutSemCreate_Impl(const OS_object_token_t *token, uint32 options)\n{\n    int                              return_code;\n    pthread_mutexattr_t              mutex_attr;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n    ** initialize the attribute with default values\n    */\n    return_code = pthread_mutexattr_init(&mutex_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_init failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    ** Allow the mutex to use priority inheritance\n    */\n    return_code = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_setprotocol failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    **  Set the mutex type to RECURSIVE so a thread can do nested locks\n    */\n    return_code = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_RECURSIVE);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_settype failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    ** create the mutex\n    ** upon successful initialization, the state of the mutex becomes initialized and unlocked\n    */\n    return_code = pthread_mutex_init(&impl->id, &mutex_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. ID = %lu: %s\\n\", OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)),\n                 strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char      obj_name[OS_MAX_API_NAME];\n    osal_id_t last_owner;\n} OS_mutex_internal_record_t\n...\n#define OS_SUCCESS (0)\n...\ntypedef uint32 osal_id_t\n...\nvoid UtAssert_Abort(const char *Message)\n{\n    UT_BSP_DoText(UTASSERT_CASETYPE_ABORT, Message);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return_code = pthread_mutexattr_init(&mutex_attr);\nif (return_code != 0)\n{\n    OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_init failed ID = %lu: %s\\n\",\n             OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n    return OS_SEM_FAILURE;\n}",
    "if (return_code == OS_SUCCESS)\n{\n    mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n    /* Reset the table entry and save the name */\n    OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n    /* Now call the OS-specific implementation.  This reads info from the table. */\n    return_code = OS_MutSemCreate_Impl(&token, options);\n\n    /* Check result, finalize record, and unlock global table. */\n    return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n}",
    "return_code = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\nif (return_code != 0)\n{\n    OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_setprotocol failed ID = %lu: %s\\n\",\n             OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n    return OS_SEM_FAILURE;\n}",
    "if (return_code == OS_SUCCESS)\n{\n    return_code = OS_ERR_NAME_TAKEN;\n}\nelse\n{\n    return_code = OS_ObjectIdFindNextFree(token);\n}",
    "if (return_code != OS_SUCCESS)\n{\n    return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n}",
    "return_code = pthread_mutex_init(&impl->id, &mutex_attr);\nif (return_code != 0)\n{\n    OS_DEBUG(\"Error: Mutex could not be created. ID = %lu: %s\\n\", OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)),\n             strerror(return_code));\n    return OS_SEM_FAILURE;\n}",
    "if (return_code == OS_SUCCESS)\n{\n    return_code = OS_ObjectIdConvertToken(token);\n}",
    "if (name != NULL)\n{\n    return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n}\nelse\n{\n    return_code = OS_ERR_NAME_NOT_FOUND;\n}",
    "return_code = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_RECURSIVE);\nif (return_code != 0)\n{\n    OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_settype failed ID = %lu: %s\\n\",\n             OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n    return OS_SEM_FAILURE;\n}",
    "if (return_code != OS_SUCCESS)\n{\n    OS_ObjectIdTransactionCancel(token);\n    return return_code;\n}\nelse\n{\n    return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n}"
  ],
  "explanation": "I reported all conditional branches and early-return paths that could potentially be unreachable or depend on conditions outside the snippet, so they should be investigated for compliance with MISRA C Rule 2.1 (no unreachable code). These include: the entire success-path block in OS_MutSemCreate, the name-null and name-match branches in OS_ObjectIdAllocateNew, the allocation/finalization/notification branches, the convert/finalize failure handling, and all error-return branches in the OS-specific mutex creation implementation. \n\nOther fragments in the provided code were not flagged because they are simple straight-line code or well-formed final returns that are manifestly reachable given the surrounding control flow (for example the final \"return return_code;\" statements, the definitions of small macros and type declarations, the OS_OBJECT_TABLE_GET macro use sites, and the body of OS_ObjectIdFinalizeNew which performs cleanup and notification). Those pieces are standard control-flow constructs that are reached via the conditional paths already reported above or are unconditional exits; they do not by themselves indicate statically unreachable code and so do not require further investigation for Rule 2.1 in this context."
}