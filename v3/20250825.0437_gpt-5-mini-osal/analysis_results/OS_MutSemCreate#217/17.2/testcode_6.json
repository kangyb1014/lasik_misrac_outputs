{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS is not initialized. If OS_DEBUG is implemented in terms of OS_printf (or otherwise invokes OS_printf), this creates an indirect recursive call chain: OS_printf -> OS_DEBUG -> OS_printf, violating Rule 17.2. Another possible chain is OS_printf -> OS_ConsoleWrite -> OS_ConsoleOutput_Impl (or Wakeup) -> (any code that calls) OS_printf, which would also be an indirect recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2176.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdint.h>\n#include <string.h>\n#include <pthread.h>\n#include <errno.h>\n\n/* Probe logging helper: write formatted log lines to /tmp/logs/2176.txt\n * Uses low-level POSIX I/O to avoid calling any project logging wrappers\n * that might themselves call OS_printf/OS_DEBUG and cause recursion. */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    char buf[1024];\n    int fd;\n    ssize_t res;\n    va_list ap;\n\n    fd = open(\"/tmp/logs/2176.txt\", O_WRONLY | O_APPEND | O_CREAT, 0644);\n    if (fd < 0)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    va_start(ap, fmt);\n    /* Prepend a small prefix with pid and thread id for context */\n    {\n        pid_t pid = getpid();\n        unsigned long tid = (unsigned long)pthread_self();\n        int n = snprintf(buf, sizeof(buf), \"[pid=%d tid=%lu] \", (int)pid, tid);\n        if (n < 0)\n        {\n            n = 0;\n        }\n        if ((size_t)n < sizeof(buf))\n        {\n            vsnprintf(buf + n, sizeof(buf) - (size_t)n, fmt, ap);\n        }\n    }\n    va_end(ap);\n\n    /* Ensure newline */\n    size_t len = strnlen(buf, sizeof(buf));\n    if (len == 0 || buf[len-1] != '\\n')\n    {\n        if (len + 1 < sizeof(buf))\n        {\n            buf[len++] = '\\n';\n            buf[len] = '\\0';\n        }\n    }\n\n    /* Best-effort write; ignore partial-write handling for brevity */\n    res = write(fd, buf, strlen(buf));\n    (void)res;\n    close(fd);\n}\n\n/* Modified OS_MutSemCreate with probes inserted. Preserves original logic. */\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Log entry and parameters. Avoid calling any OS logging API. */\n    OS_ProbeLog(\"ENTER OS_MutSemCreate: sem_id_ptr=%p sem_name=%s options=0x%08x\",\n                (void *)sem_id,\n                (sem_name != NULL) ? sem_name : \"(null)\",\n                (unsigned int)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    OS_ProbeLog(\"After OS_ObjectIdAllocateNew: return_code=%d token_addr=%p\",\n                (int)return_code,\n                (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n        OS_ProbeLog(\"After OS_OBJECT_INIT: token_addr=%p mutex_addr=%p obj_name=%s\",\n                    (void *)&token,\n                    (void *)mutex,\n                    (sem_name != NULL) ? sem_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_ProbeLog(\"Before OS_MutSemCreate_Impl: token_addr=%p options=0x%08x\",\n                    (void *)&token,\n                    (unsigned int)options);\n\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        OS_ProbeLog(\"After OS_MutSemCreate_Impl: return_code=%d token_addr=%p\",\n                    (int)return_code,\n                    (void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        /* Capture sem_id value if set by finalize (best-effort) */\n        uintptr_t sem_id_val = 0;\n        if (sem_id != NULL)\n        {\n            /* The value might be uninitialized until finalize sets it; still record whatever it is. */\n            sem_id_val = (uintptr_t)(*sem_id);\n        }\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        OS_ProbeLog(\"After OS_ObjectIdFinalizeNew: return_code=%d sem_id_ptr=%p sem_id_value=0x%lx\",\n                    (int)return_code,\n                    (void *)sem_id,\n                    (unsigned long)sem_id_val);\n    }\n    else\n    {\n        OS_ProbeLog(\"OS_ObjectIdAllocateNew failed: return_code=%d\", (int)return_code);\n    }\n\n    OS_ProbeLog(\"EXIT OS_MutSemCreate: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}