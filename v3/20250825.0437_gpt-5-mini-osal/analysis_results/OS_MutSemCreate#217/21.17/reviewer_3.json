{
  "user_message": "An agent A claimed that the following OS_MutSemCreate code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemCreate.\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro OS_CHECK_APINAME expands to OS_CHECK_STRING, which (based on typical implementations) must examine the contents/length of the sem_name string using string.h routines. If sem_name is a non-NULL pointer to a char buffer that is not NUL-terminated or that has fewer accessible bytes than the code assumes, functions such as strlen (or other string.h functions) used inside OS_CHECK_STRING could read beyond the bounds of the object. For example, if the caller passes a pointer to a buffer of length N that lacks a terminating '\\0', a strlen(sem_name) inside OS_CHECK_STRING would walk past the buffer boundary and violate Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nstage=before_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b29abe sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b29abe sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_objid_allocate sem_id=0x7fff68eac184 sem_name=0x55a231b29abe sem_name_is_null=0 options=0 return_code=-1 token_ptr=0x7fff68eac120\nstage=function_exit sem_id=0x7fff68eac184 sem_name=0x55a231b29abe sem_name_is_null=0 options=0 return_code=-1 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b29abe sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b29abe sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_objid_allocate sem_id=0x7fff68eac184 sem_name=0x55a231b29abe sem_name_is_null=0 options=0 return_code=-35 token_ptr=0x7fff68eac120\nstage=function_exit sem_id=0x7fff68eac184 sem_name=0x55a231b29abe sem_name_is_null=0 options=0 return_code=-35 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac130 sem_name=(nil) sem_name_is_null=1 options=0 return_code=0 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac130 sem_name=0x7fff68eac160 sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac130 sem_name=0x7fff68eac140 sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_apiname_check sem_id=0x7fff68eac130 sem_name=0x7fff68eac140 sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_objid_allocate sem_id=0x7fff68eac130 sem_name=0x7fff68eac140 sem_name_is_null=0 options=0 return_code=-35 token_ptr=0x7fff68eac100\nstage=function_exit sem_id=0x7fff68eac130 sem_name=0x7fff68eac140 sem_name_is_null=0 options=0 return_code=-35 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac134 sem_name=0x55a231b2c38a sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_apiname_check sem_id=0x7fff68eac134 sem_name=0x55a231b2c38a sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_objid_allocate sem_id=0x7fff68eac134 sem_name=0x55a231b2c38a sem_name_is_null=0 options=0 return_code=-35 token_ptr=0x7fff68eac100\nstage=function_exit sem_id=0x7fff68eac134 sem_name=0x55a231b2c38a sem_name_is_null=0 options=0 return_code=-35 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac130 sem_name=0x55a231b2c422 sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_apiname_check sem_id=0x7fff68eac130 sem_name=0x55a231b2c422 sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_objid_allocate sem_id=0x7fff68eac130 sem_name=0x55a231b2c422 sem_name_is_null=0 options=0 return_code=-35 token_ptr=0x7fff68eac100\nstage=function_exit sem_id=0x7fff68eac130 sem_name=0x55a231b2c422 sem_name_is_null=0 options=0 return_code=-35 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b2c4d0 sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b2c4d0 sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_objid_allocate sem_id=0x7fff68eac184 sem_name=0x55a231b2c4d0 sem_name_is_null=0 options=0 return_code=-35 token_ptr=0x7fff68eac150\nstage=function_exit sem_id=0x7fff68eac184 sem_name=0x55a231b2c4d0 sem_name_is_null=0 options=0 return_code=-35 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b2c55e sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b2c55e sem_name_is_null=0 options=0 return_code=0 token_ptr=(nil)\nstage=after_objid_allocate sem_id=0x7fff68eac184 sem_name=0x55a231b2c55e sem_name_is_null=0 options=0 return_code=-35 token_ptr=0x7fff68eac150\nstage=function_exit sem_id=0x7fff68eac184 sem_name=0x55a231b2c55e sem_name_is_null=0 options=0 return_code=-35 token_ptr=(nil)\nstage=before_apiname_check sem_id=0x7fff68eac184 sem_name=0x55a231b2c616 sem_name_is_null=0 options=0 return_cod\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemCreate:\n#define OS_CHECK_APINAME(str) OS_CHECK_STRING(str,OS_MAX_API_NAME,OS_ERR_NAME_TOO_LONG)\n...\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\n#define OS_OBJECT_INIT(tok, ref, namefield, nameval) {memset(ref,0,sizeof(*ref));strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1);OS_ObjectIdGlobalFromToken(&tok)->name_entry=ref->namefield;}\n...\ntypedef struct\n{\n    char      obj_name[OS_MAX_API_NAME];\n    osal_id_t last_owner;\n} OS_mutex_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nint32 OS_MutSemCreate_Impl(const OS_object_token_t *token, uint32 options)\n{\n    int                              return_code;\n    pthread_mutexattr_t              mutex_attr;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n    ** initialize the attribute with default values\n    */\n    return_code = pthread_mutexattr_init(&mutex_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_init failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    ** Allow the mutex to use priority inheritance\n    */\n    return_code = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_setprotocol failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    **  Set the mutex type to RECURSIVE so a thread can do nested locks\n    */\n    return_code = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_RECURSIVE);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. pthread_mutexattr_settype failed ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    /*\n    ** create the mutex\n    ** upon successful initialization, the state of the mutex becomes initialized and unlocked\n    */\n    return_code = pthread_mutex_init(&impl->id, &mutex_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"Error: Mutex could not be created. ID = %lu: %s\\n\", OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)),\n                 strerror(return_code));\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough evidence to conclude a definite MISRA C 2023 Rule 21.17 violation. The reported problem depends entirely on how OS_CHECK_STRING (the expansion behind OS_CHECK_APINAME) is implemented. If OS_CHECK_STRING performs a bounded length check (for example using a limited search for '\\0' up to OS_MAX_API_NAME or otherwise guarantees the string is NUL-terminated and shorter than the bound without walking past the caller's object) then the subsequent use of strncpy(sizeof(name)-1) does not cause an out\u2011of\u2011bounds read and Rule 21.17 is not violated. Conversely, if OS_CHECK_STRING uses an unbounded strlen or other unbounded string.h routine that can read past the caller's object when the caller supplied a non\u2011NUL\u2011terminated buffer, then there would be a real Rule 21.17 violation \u2014 but that is a problem in OS_CHECK_STRING, not in OS_MutSemCreate itself.\n\nIn summary: Agent A\u2019s claim is speculative. The code as shown uses an API-name check macro before calling string.h functions, so you must inspect the implementation of OS_CHECK_STRING to determine compliance. Also note a related (but separate) issue: OS_OBJECT_INIT uses strncpy(..., sizeof(field)-1) but does not explicitly NUL-terminate the destination afterwards; that can lead to non\u2011NUL-terminated stored names if the source length >= sizeof(field)-1 (this is a correctness/robustness concern, though not the specific Rule 21.17 claim here)."
}