{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf Data.Rvc.Buf.IndirectPtr is declared as a non-const pointer (e.g. void *IndirectPtr), then the assignment StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr; stores a const void * (ValuePtr) into a non-const pointer, discarding the const qualifier. This violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3073.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetStubEntry:\n```c\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            StubPtr = NULL;\n            break;\n        }\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            break;\n        }\n        ++Idx;\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            Idx = 0;\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_MaxStubSearchLen = SearchLen;\n    }\n\n    return StubPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_GetStubEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends human-readable trace info to the log file.\n * Kept static to limit linkage and avoid introducing global symbols.\n */\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3073.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* Log initial state */\n    UT_LogProbe(\"UT_GetStubEntry START: FuncKey=%u, TestMode=%u, initial Idx=%u\", (unsigned)FuncKey, (unsigned)TestMode, (unsigned)Idx);\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n        UT_LogProbe(\"Mode=UNUSED: SearchLimit=%u, SearchKey=%u\", (unsigned)SearchLimit, (unsigned)SearchKey);\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n        UT_LogProbe(\"Mode=BOUND: SearchLimit=%u (UT_MaxStubSearchLen), SearchKey=%u\", (unsigned)SearchLimit, (unsigned)SearchKey);\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            StubPtr = NULL;\n            UT_LogProbe(\"Exit: SearchLen (%u) >= SearchLimit (%u) -> not found\", (unsigned)SearchLen, (unsigned)SearchLimit);\n            break;\n        }\n\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n\n        /* Log per-iteration state to help reproduce issues that depend on table contents */\n        UT_LogProbe(\"Iter: SearchLen=%u, Idx=%u, StubPtr=%p, Stub.EntryType=%u, Stub.FuncKey=%u\",\n                    (unsigned)SearchLen,\n                    (unsigned)Idx,\n                    (void *)StubPtr,\n                    (unsigned)StubPtr->EntryType,\n                    (unsigned)StubPtr->FuncKey);\n\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            UT_LogProbe(\"Found matching stub at Idx=%u (SearchLen=%u)\", (unsigned)Idx, (unsigned)SearchLen);\n            break;\n        }\n\n        ++Idx;\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            Idx = 0;\n            UT_LogProbe(\"Wrapped Idx to 0\");\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_LogProbe(\"Updating UT_MaxStubSearchLen: old=%u, new=%u\", (unsigned)UT_MaxStubSearchLen, (unsigned)SearchLen);\n        UT_MaxStubSearchLen = SearchLen;\n    }\n    else\n    {\n        UT_LogProbe(\"UT_MaxStubSearchLen unchanged: %u\", (unsigned)UT_MaxStubSearchLen);\n    }\n\n    UT_LogProbe(\"UT_GetStubEntry RETURN: StubPtr=%p\", (void *)StubPtr);\n\n    return StubPtr;\n}\n"
}