{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a string literal to UT_BSP_DoText. If UT_BSP_DoText is declared as taking a non-const pointer (for example: void UT_BSP_DoText(int type, char *text)), then the function should instead take a pointer to const (const char *text) because the text is not modified. In that case Rule 8.13 is violated. (If UT_BSP_DoText is already declared as taking const char * then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\nPlease provide the modified UtAssert_EndTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Helper probe function to append logs */\nstatic void UtAssert_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2833.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UtAssert_LogProbe(\"ENTER: UtAssert_EndTest\");\n\n    UT_BSP_Lock();\n\n    /* Log state before computing SegmentValid */\n    UtAssert_LogProbe(\"State before SegmentValid: UT_SegmentCounters.TotalTestCases=%u\", (unsigned)UT_SegmentCounters.TotalTestCases);\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    UtAssert_LogProbe(\"Computed SegmentValid=%s\", SegmentValid ? \"true\" : \"false\");\n\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        /* Log copied segment information */\n        UtAssert_LogProbe(\"Segment copied: Local_SegmentName=\\\"%s\\\"\", Local_SegmentName);\n        UtAssert_LogProbe(\"Local_SegmentCounters.TotalTestCases=%u\", (unsigned)Local_SegmentCounters.TotalTestCases);\n    }\n\n    /* Log that we are about to reset UT_SegmentCounters */\n    UtAssert_LogProbe(\"About to memset UT_SegmentCounters (was TotalTestCases=%u)\", (unsigned)UT_SegmentCounters.TotalTestCases);\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_LogProbe(\"Calling UtAssert_DoTestSegmentReport with Local_SegmentName=\\\"%s\\\", Local_SegmentCounters.TotalTestCases=%u\",\n                           Local_SegmentName, (unsigned)Local_SegmentCounters.TotalTestCases);\n\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n\n        UtAssert_LogProbe(\"Returned from UtAssert_DoTestSegmentReport\");\n    }\n    else\n    {\n        /*\n         * This is the call of interest for the Rule 8.13 violation scenario:\n         * a string literal is passed to UT_BSP_DoText. Log the pointer value\n         * and the literal contents so that agents can reproduce and collect\n         * evidence (pointer address, content and when it was called).\n         */\n        const char *literal = \"No test cases\\n\";\n        UtAssert_LogProbe(\"Calling UT_BSP_DoText with literal at %p: \\\"%s\\\"\", (const void *)literal, literal);\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n\n        UtAssert_LogProbe(\"Returned from UT_BSP_DoText\");\n    }\n\n    UtAssert_LogProbe(\"EXIT: UtAssert_EndTest\");\n}\n"
}