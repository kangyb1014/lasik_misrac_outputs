{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur when OS_BSP_Lock_Impl handles a pthread_mutex_lock error. The code calls BSP_DEBUG(..., strerror(...)) on error; if BSP_DEBUG is implemented via the UT_BSP logging path (e.g. calls UT_BSP_DoText), that path calls UT_BSP_Lock which calls OS_BSP_Lock_Impl again. This yields OS_BSP_Lock_Impl -> BSP_DEBUG -> UT_BSP_DoText -> UT_BSP_Lock -> OS_BSP_Lock_Impl (indirect recursive call).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2836.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\nPlease provide the modified UtAssert_EndTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe logging helper - append to /tmp/logs/2836.txt */\nstatic void Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2836.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier ordering of events */\n    {\n        time_t t = time(NULL);\n        struct tm tmv;\n        if (localtime_r(&t, &tmv) != NULL)\n        {\n            char buf[64];\n            if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tmv) > 0)\n            {\n                fprintf(f, \"%s \", buf);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    /* Probe: entering function and initial state */\n    Probe_Log(\"Enter UtAssert_EndTest: UT_SegmentCounters.TotalTestCases=%u, CurrentSegment=\\\"%s\\\"\",\n              (unsigned)UT_SegmentCounters.TotalTestCases, CurrentSegment);\n\n    Probe_Log(\"About to call UT_BSP_Lock()\");\n    UT_BSP_Lock();\n    Probe_Log(\"Returned from UT_BSP_Lock() (if this log appears then UT_BSP_Lock returned)\");\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    Probe_Log(\"SegmentValid evaluated to %s\", SegmentValid ? \"true\" : \"false\");\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        Probe_Log(\"Segment summary copied: Local_SegmentName=\\\"%s\\\", Local_SegmentCounters.TotalTestCases=%u\",\n                  Local_SegmentName, (unsigned)Local_SegmentCounters.TotalTestCases);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    Probe_Log(\"About to call UT_BSP_Unlock()\");\n    UT_BSP_Unlock();\n    Probe_Log(\"Returned from UT_BSP_Unlock()\");\n\n    if (SegmentValid)\n    {\n        Probe_Log(\"About to call UtAssert_DoTestSegmentReport with Local_SegmentName=\\\"%s\\\"\",\n                  Local_SegmentName);\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n        Probe_Log(\"Returned from UtAssert_DoTestSegmentReport\");\n    }\n    else\n    {\n        /*\n         * Probe specifically around UT_BSP_DoText to capture the sequence when logging\n         * occurs. This is critical to reproduce the reported indirect recursion path:\n         * UT_BSP_Lock -> BSP_DEBUG -> UT_BSP_DoText -> UT_BSP_Lock -> ...\n         */\n        Probe_Log(\"About to call UT_BSP_DoText(UTASSERT_CASETYPE_END, \\\"No test cases\\\\n\\\")\");\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n        Probe_Log(\"Returned from UT_BSP_DoText\");\n    }\n\n    Probe_Log(\"Exit UtAssert_EndTest\");\n}\n"
}