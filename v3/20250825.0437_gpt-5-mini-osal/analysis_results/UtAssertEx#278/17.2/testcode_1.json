{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. In the error path OS_BSP_Unlock_Impl calls BSP_DEBUG, and BSP_DEBUG may call UT_BSP_DoText (or other logging that uses the UT BSP lock/unlock wrappers). UT_BSP_DoText calls UT_BSP_Unlock, which in turn calls OS_BSP_Unlock_Impl (the implementation under analysis). This yields an indirect recursive call chain: OS_BSP_Unlock_Impl -> BSP_DEBUG -> UT_BSP_DoText -> UT_BSP_Unlock -> OS_BSP_Unlock_Impl, violating MISRA C 2023 Rule 17.2. (This conclusion assumes BSP_DEBUG uses the UT BSP text output path shown in the additional code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2786.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "/* Probe logging helper - appends to /tmp/logs/2786.txt */\nstatic void UtAssert_Log(const char *Format, ...)\n{\n    FILE *F = fopen(\"/tmp/logs/2786.txt\", \"a\");\n    if (F == NULL)\n    {\n        return;\n    }\n\n    va_list Args;\n    va_start(Args, Format);\n    vfprintf(F, Format, Args);\n    va_end(Args);\n\n    fprintf(F, \"\\n\");\n    fclose(F);\n}\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Log entry and initial state */\n    UtAssert_Log(\"ENTRY: UtAssertEx Expression=%d CaseType=%u File=%s Line=%u\", (int)Expression, (unsigned)CaseType, File ? File : \"(null)\", (unsigned)Line);\n\n    UT_BSP_Lock();\n\n    UtAssert_Log(\"AFTER UT_BSP_Lock: (about to increment TotalTestCases)\");\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    UtAssert_Log(\"UPDATED TotalTestCases=%u\", (unsigned)UT_SegmentCounters.TotalTestCases);\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n        UtAssert_Log(\"Expression true -> CaseType set to PASS (%u)\", (unsigned)CaseType);\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n        UtAssert_Log(\"Incremented CaseCount[%u]=%u\", (unsigned)CaseType, (unsigned)UT_SegmentCounters.CaseCount[(uint32)CaseType]);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UtAssert_Log(\"Computed TestSegmentCount=%u TotalTestCases=%u CurrentSegment=%u\", (unsigned)TestSegmentCount, (unsigned)TotalTestCases, (unsigned)CurrentSegment);\n\n    UtAssert_Log(\"BEFORE UT_BSP_Unlock (this is a crucial point: unlocking may trigger BSP debug/logging)\");\n\n    UT_BSP_Unlock();\n\n    UtAssert_Log(\"AFTER UT_BSP_Unlock\");\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_Log(\"FINAL MESSAGE prepared (len=%u): %s\", (unsigned)strlen(FinalMessage), FinalMessage);\n\n    UtAssert_Log(\"CALL UtAssert_DoReport File=%s Line=%u TestSegmentCount=%u TotalTestCases=%u CaseType=%u CurrentSegment=%u\", File ? File : \"(null)\", (unsigned)Line, (unsigned)TestSegmentCount, (unsigned)TotalTestCases, (unsigned)CaseType, (unsigned)CurrentSegment);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    UtAssert_Log(\"EXIT: UtAssertEx returning %d\", (int)Expression);\n\n    return Expression;\n}\n"
}