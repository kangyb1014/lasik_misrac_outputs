{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe if branch 'if (status < 0)' is effectively unreachable: pthread_mutex_unlock( ) per POSIX returns 0 on success or a positive error number on failure, it does not return negative values. Thus the BSP_DEBUG(...) path can never be taken with compliant pthreads implementations. Replace the test with 'if (status != 0)' (or similar) to handle error returns and remove the unreachable branch.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2781.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <time.h>\n\n/* Minimal supporting types and globals to make this testable while preserving original logic. */\ntypedef uint32_t uint32;\n\ntypedef enum\n{\n    UTASSERT_CASETYPE_PASS = 0,\n    UTASSERT_CASETYPE_FAIL,\n    UTASSERT_CASETYPE_TBD,\n    UTASSERT_CASETYPE_MAX\n} UtAssert_CaseType_t;\n\n/* Minimal segment counters structure */\nstruct\n{\n    uint32 TotalTestCases;\n    uint32 CaseCount[UTASSERT_CASETYPE_MAX];\n} UT_SegmentCounters = {0, {0}};\n\nstruct\n{\n    uint32 TestSegmentCount;\n} UT_TotalCounters = {0};\n\nconst char *CurrentSegment = \"default\";\n\n/* Minimal stubs for BSP lock/unlock and report; these preserve original behavior (no-ops) */\nvoid UT_BSP_Lock(void) { /* stub - no-op for test harness */ }\nvoid UT_BSP_Unlock(void) { /* stub - no-op for test harness */ }\n\nvoid UtAssert_DoReport(const char *File, uint32 Line, uint32 TestSegmentCount, uint32 TotalTestCases,\n                       UtAssert_CaseType_t CaseType, const char *Segment, const char *Message)\n{\n    /* Keep original reporting behavior as a stub. For test harness, also mirror to the log file. */\n    FILE *f = fopen(\"/tmp/logs/2781.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"REPORT: %s:%u segment_count=%u total_cases=%u case_type=%u segment=%s message=%s\\n\",\n                File ? File : \"(null)\", (unsigned)Line, (unsigned)TestSegmentCount, (unsigned)TotalTestCases,\n                (unsigned)CaseType, Segment ? Segment : \"(null)\", Message ? Message : \"(null)\");\n        fclose(f);\n    }\n}\n\n/* Helper probe function to write timestamped messages to the log file for diagnostics. */\nstatic void UtAssert_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2781.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timebuf[64];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s - \", timebuf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified UtAssertEx with probes inserted to capture control flow and state. */\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Probe: entering function */\n    UtAssert_LogProbe(\"ENTER UtAssertEx: Expression=%d CaseType=%u File=%s Line=%u MessageFormat=%s\",\n                      Expression ? 1 : 0,\n                      (unsigned)CaseType,\n                      File ? File : \"(null)\",\n                      (unsigned)Line,\n                      MessageFormat ? MessageFormat : \"(null)\");\n\n    UT_BSP_Lock();\n    UtAssert_LogProbe(\"After UT_BSP_Lock\");\n\n    ++UT_SegmentCounters.TotalTestCases;\n    UtAssert_LogProbe(\"Incremented TotalTestCases -> %u\", (unsigned)UT_SegmentCounters.TotalTestCases);\n\n    if (Expression)\n    {\n        UtAssert_LogProbe(\"Expression is true: setting CaseType to UTASSERT_CASETYPE_PASS (%u)\", (unsigned)UTASSERT_CASETYPE_PASS);\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n    else\n    {\n        UtAssert_LogProbe(\"Expression is false: leaving CaseType as %u\", (unsigned)CaseType);\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n        UtAssert_LogProbe(\"Incremented CaseCount[%u] -> %u\", (unsigned)CaseType,\n                          (unsigned)UT_SegmentCounters.CaseCount[(uint32)CaseType]);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"CaseType %u out of range, not incrementing CaseCount\", (unsigned)CaseType);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UtAssert_LogProbe(\"Computed TestSegmentCount=%u TotalTestCases=%u\", (unsigned)TestSegmentCount, (unsigned)TotalTestCases);\n\n    UT_BSP_Unlock();\n    UtAssert_LogProbe(\"After UT_BSP_Unlock\");\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    /* Probe: final message content */\n    UtAssert_LogProbe(\"FinalMessage='%s' (len=%u)\", FinalMessage, (unsigned)strlen(FinalMessage));\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    UtAssert_LogProbe(\"EXIT UtAssertEx: returning Expression=%d\", Expression ? 1 : 0);\n\n    return Expression;\n}\n"
}