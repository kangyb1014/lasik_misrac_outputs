{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe branch guarded by `if (status < 0)` is effectively unreachable: POSIX pthread_mutex_lock() returns 0 on success and a positive error number on failure (not negative), so status < 0 will never hold for a conforming pthreads implementation. As a result the BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status)); path cannot be executed, violating MISRA C 2023 Rule 2.1. (Fix: test for error with `status != 0` or handle returned error codes explicitly.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2781.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper for UtAssertEx. Appends concise control-flow and state info to /tmp/logs/2781.txt. */\nstatic void UtAssert_ProbeLog(const char *label, const char *file, unsigned int line, const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2781.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"[UtAssertEx] %s | %s:%u | \", label, (file != NULL) ? file : \"(null)\", line);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Log entry with key parameter values */\n    UtAssert_ProbeLog(\"ENTRY\", File, Line, \"Expression=%d CaseType=%u MessageFormat=%s\", (int)Expression, (unsigned)CaseType, (MessageFormat != NULL) ? MessageFormat : \"(null)\");\n\n    UT_BSP_Lock();\n\n    UtAssert_ProbeLog(\"AFTER_LOCK\", File, Line, \"(lock acquired). TotalTestCases before increment=%u\", (unsigned)UT_SegmentCounters.TotalTestCases);\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n        UtAssert_ProbeLog(\"EXPRESSION_TRUE\", File, Line, \"Expression true -> CaseType set to PASS (%u)\", (unsigned)CaseType);\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n        UtAssert_ProbeLog(\"CASECOUNT_INC\", File, Line, \"Incremented CaseCount[%u] -> new value=%u\", (unsigned)CaseType, (unsigned)UT_SegmentCounters.CaseCount[(uint32)CaseType]);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UtAssert_ProbeLog(\"PRE_UNLOCK\", File, Line, \"Computed TestSegmentCount=%u TotalTestCases=%u\", (unsigned)TestSegmentCount, (unsigned)TotalTestCases);\n\n    UT_BSP_Unlock();\n\n    /* Format the final message and log it so any caller-supplied data is captured */\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_ProbeLog(\"FINAL_MESSAGE\", File, Line, \"FinalMessage=\\\"%s\\\"\", FinalMessage);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    UtAssert_ProbeLog(\"EXIT\", File, Line, \"Returning Expression=%d (TestSegmentCount=%u TotalTestCases=%u CaseType=%u)\", (int)Expression, (unsigned)TestSegmentCount, (unsigned)TotalTestCases, (unsigned)CaseType);\n\n    return Expression;\n}\n"
}