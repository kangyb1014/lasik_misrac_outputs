{
  "user_message": "An agent A claimed that the following UtAssertEx code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of UtAssertEx.\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'CaseType' is assigned in the fragment: if (Expression) { CaseType = UTASSERT_CASETYPE_PASS; }. This directly modifies a function parameter, which violates MISRA C 2023 Rule 17.8 (the pointer exception does not apply here).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=42\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=42\nAfterAssignBranch: Expression=1, CaseType=11, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=42\nBeforeUnlock: TestSegmentCount=1, TotalTestCases=1, CaseType=11\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=53\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=53\nAfterAssignBranch: Expression=1, CaseType=11, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=53\nBeforeUnlock: TestSegmentCount=2, TotalTestCases=1, CaseType=11\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=56\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=56\nAfterAssignBranch: Expression=1, CaseType=11, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=56\nBeforeUnlock: TestSegmentCount=2, TotalTestCases=2, CaseType=11\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=67\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=67\nAfterAssignBranch: Expression=1, CaseType=11, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=67\nBeforeUnlock: TestSegmentCount=3, TotalTestCases=1, CaseType=11\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=78\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=78\nAfterAssignBranch: Expression=1, CaseType=11, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=78\nBeforeUnlock: TestSegmentCount=4, TotalTestCases=1, CaseType=11\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=81\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=81\nAfterAssignBranch: Expression=1, CaseType=11, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=81\nBeforeUnlock: TestSegmentCount=4, TotalTestCases=2, CaseType=11\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=92\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=92\nAfterAssignBranch: Expression=1, CaseType=11, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=92\nBeforeUnlock: TestSegmentCount=5, TotalTestCases=1, CaseType=11\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=95\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=95\nAfterAssignBranch: Expression=1, CaseType=11, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=95\nBeforeUnlock: TestSegmentCount=5, TotalTestCases=2, CaseType=11\nBeforeAssignCheck: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-binsem.c, Line=106\nEnteringAssignBranch: Expression=1, CaseType=2, File=/tmp/tmprzqhxufl/src/src/unit-test-coverage/vxworks/src/coveragetest-bins\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In the posted code the parameter CaseType (an ordinary, non\u2011pointer parameter) is assigned to inside the function: if (Expression) { CaseType = UTASSERT_CASETYPE_PASS; } \u2014 this directly modifies the parameter object and therefore violates Rule 17.8 (the pointer exception does not apply).\n\nFix recommendation: introduce a local variable (e.g. UtAssert_CaseType_t localCase = CaseType;) and modify localCase instead, then use localCase when reporting. This preserves semantics while complying with the rule."
}