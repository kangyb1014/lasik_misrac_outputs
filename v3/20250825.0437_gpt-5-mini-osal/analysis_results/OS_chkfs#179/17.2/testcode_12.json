{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion possible: OS_ConsoleWrite() calls OS_ConsoleOutput_Impl(&token) (or OS_Console_CopyOut()). If either of those implementation functions calls OS_printf() (or otherwise calls back into OS_ConsoleWrite()), then the chain OS_ConsoleWrite -> OS_ConsoleOutput_Impl -> OS_printf -> OS_ConsoleWrite would create an indirect self-call, violating Rule 17.2. Note: the fragment itself does not directly call itself, but given the provided OS_printf implementation (which calls OS_ConsoleWrite), any helper impl that calls OS_printf (or OS_ConsoleWrite) would produce indirect recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1796.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chkfs:\n```c\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <time.h>\n#include <string.h>\n#include <stdint.h>\n#include <fcntl.h>\n#include <unistd.h>\n\n/* Probe logging helper for OS_chkfs\n * Writes timestamped control-flow and state information to /tmp/logs/1796.txt.\n * Designed to avoid calling higher-level OS logging functions that could\n * themselves route through OS_ConsoleWrite/OS_printf.\n */\nstatic void OS_chkfs_probe_log(const char *stage, const char *name, bool repair, const void *token_ptr, long return_code)\n{\n    char buf[512];\n    time_t t = time(NULL);\n    int n = snprintf(buf, sizeof(buf), \"%ld: stage=%s name=%p repair=%d token=%p return=%ld\\n\",\n                     (long)t, stage, (const void *)name, repair ? 1 : 0, token_ptr, return_code);\n\n    if (n > 0)\n    {\n        /* Use low-level POSIX I/O to avoid possible redirection into OS-level printf wrappers. */\n        int fd = open(\"/tmp/logs/1796.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n        if (fd >= 0)\n        {\n            /* Ignore write errors; this probe must not change program logic. */\n            (void)write(fd, buf, (size_t)n);\n            (void)close(fd);\n        }\n    }\n}\n\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with initial parameters. */\n    OS_chkfs_probe_log(\"entry\", name, repair, NULL, 0);\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    /* Log result of ObjectIdGetBySearch. Token address is logged so callers can correlate token lifecycle.\n     * Note: token contents are implementation-defined, so we only log the token pointer/address. */\n    OS_chkfs_probe_log(\"after_ObjectIdGetBySearch\", name, repair, &token, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation to capture the control path. */\n        OS_chkfs_probe_log(\"before_FileSysCheckVolume_Impl\", name, repair, &token, (long)return_code);\n\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        /* Log after the implementation returns, capturing its return code. */\n        OS_chkfs_probe_log(\"after_FileSysCheckVolume_Impl\", name, repair, &token, (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token to capture full lifecycle. */\n        OS_chkfs_probe_log(\"after_ObjectIdRelease\", name, repair, NULL, (long)return_code);\n    }\n    else\n    {\n        /* Log the early exit path. */\n        OS_chkfs_probe_log(\"exit_error\", name, repair, NULL, (long)return_code);\n    }\n\n    /* Final exit log and return. */\n    OS_chkfs_probe_log(\"exit\", name, repair, NULL, (long)return_code);\n\n    return return_code;\n}\n"
}