{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_ObjectIdGetBySearch uses the matcher OS_FileSys_FindVirtMountPoint, which only returns records for which (filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) is set. The fragment then tests for OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM and only executes the strncpy branch when that bit is set. Since virtual-mounted records and system-mounted records are (by design) mutually exclusive, the true branch that copies filesys->system_mountpt is never reached. Therefore the strncpy and the subsequent assignment are unreachable code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1721.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append human-readable diagnostics to /tmp/logs/1721.txt */\nstatic void OS_FS_LogProbe(const char *stage, const char *MountPoint, int32 return_code, OS_filesys_internal_record_t *filesys)\n{\n    FILE *f = fopen(\"/tmp/logs/1721.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"Stage: %s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"MountPoint: '%s'\\n\", (MountPoint != NULL) ? MountPoint : \"(null)\");\n    fprintf(f, \"return_code: %ld\\n\", (long)return_code);\n\n    if (filesys != NULL)\n    {\n        /* Log pointer and flags */\n        fprintf(f, \"filesys ptr: %p\\n\", (void *)filesys);\n        fprintf(f, \"filesys->flags: 0x%08x\\n\", (unsigned)filesys->flags);\n\n        /* Print individual flag status so callers can reproduce the scenario */\n        fprintf(f, \"IS_MOUNTED_VIRTUAL: %s\\n\",\n                (filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) ? \"yes\" : \"no\");\n        fprintf(f, \"IS_MOUNTED_SYSTEM:  %s\\n\",\n                (filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) ? \"yes\" : \"no\");\n\n        /* Log the system_mountpt buffer up to the physical name length */\n        /* Protect against missing definitions by checking length macro at compile-time in the original project. */\n        fprintf(f, \"system_mountpt: '%.*s'\\n\", (int)(OS_FS_PHYS_NAME_LEN - 1), filesys->system_mountpt);\n    }\n    else\n    {\n        fprintf(f, \"filesys: (null)\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log input state before attempting the search */\n    OS_FS_LogProbe(\"before_search\", MountPoint, 0, NULL);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    /* Log result of search. filesys is unknown until after success. */\n    OS_FS_LogProbe(\"after_search\", MountPoint, return_code, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log the filesys state obtained from table for reproduction */\n        OS_FS_LogProbe(\"after_lookup\", MountPoint, return_code, filesys);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log that we are taking the system-mounted branch */\n            OS_FS_LogProbe(\"enter_system_branch\", MountPoint, return_code, filesys);\n\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            /* Log that we are taking the non-system branch */\n            OS_FS_LogProbe(\"enter_non_system_branch\", MountPoint, return_code, filesys);\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log the name-not-found outcome */\n        OS_FS_LogProbe(\"search_failed_not_found\", MountPoint, return_code, NULL);\n\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    /* Final state log */\n    OS_FS_LogProbe(\"function_exit\", MountPoint, return_code, (return_code == OS_SUCCESS) ? filesys : NULL);\n\n    return return_code;\n}"
}