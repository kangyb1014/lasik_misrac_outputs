{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS is not initialized. If OS_DEBUG is implemented by forwarding to OS_printf (a common pattern for debug logging), this produces an indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1726.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - appends structured log lines to /tmp/logs/1726.txt\n * This helper is intentionally implemented using standard C library calls\n * to avoid any dependence on OS_printf/OS_DEBUG and to prevent recursion.\n */\nstatic void probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1726.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Fallback to a more generic tmp location if the logs directory doesn't exist. */\n        f = fopen(\"/tmp/1726.txt\", \"a\");\n        if (f == NULL)\n        {\n            return; /* If logging fails, do not alter program control flow. */\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[OS_FS_GetPhysDriveName] %s: \", tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Log entry and parameter state before any checks */\n    probe_log(\"ENTRY\", \"PhysDriveName=%p, MountPoint=%p\", (void *)PhysDriveName, (const void *)MountPoint);\n    if (MountPoint != NULL)\n    {\n        /* Print a small prefix of MountPoint to avoid assuming large/unsafe strings */\n        char mpbuf[64] = \"\";\n        size_t mplen = strnlen(MountPoint, sizeof(mpbuf) - 1);\n        if (mplen > 0)\n        {\n            memcpy(mpbuf, MountPoint, mplen);\n            mpbuf[mplen] = '\\0';\n        }\n        probe_log(\"PARAM\", \"MountPoint(look)='%s'\", mpbuf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    probe_log(\"CHECKS_PASSED\", \"Parameter checks completed (did not early return)\");\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    probe_log(\"CALL\", \"Calling OS_ObjectIdGetBySearch with search func OS_FileSys_FindVirtMountPoint and arg=%p\", (const void *)MountPoint);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    probe_log(\"CALL_RET\", \"OS_ObjectIdGetBySearch returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        probe_log(\"FILESYS\", \"filesys=%p, flags=0x%08lx, system_mountpt_ptr=%p\",\n                  (void *)filesys, (unsigned long)filesys->flags, (void *)filesys->system_mountpt);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log the value about to be copied */\n            {\n                char smbuf[OS_FS_PHYS_NAME_LEN];\n                /* Ensure null termination for safe logging */\n                strncpy(smbuf, filesys->system_mountpt, sizeof(smbuf) - 1);\n                smbuf[sizeof(smbuf) - 1] = '\\0';\n                probe_log(\"BRANCH\", \"Mounted system branch taken. system_mountpt='%s'\", smbuf);\n            }\n\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            /* Log the value after copy */\n            probe_log(\"ASSIGN\", \"PhysDriveName set to '%s'\", PhysDriveName);\n        }\n        else\n        {\n            probe_log(\"BRANCH\", \"Not mounted system; setting return_code to OS_ERR_INCORRECT_OBJ_STATE\");\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"RELEASE\", \"Released object token %p\", (void *)&token);\n    }\n    else\n    {\n        probe_log(\"NOT_FOUND\", \"OS_ObjectIdGetBySearch indicated name not found; mapping to OS_ERR_NAME_NOT_FOUND\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    probe_log(\"EXIT\", \"Returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}