{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a destination buffer smaller than OS_FS_PHYS_NAME_LEN (64). The code calls strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1) which may write up to 63 bytes into PhysDriveName, and then writes a terminator at PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] (index 63). If PhysDriveName does not point to at least 64 bytes (for example char buf[16]; OS_FS_GetPhysDriveName(buf, ...) ), these writes will exceed the buffer bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1729.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "int32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Local prototypes for logging - declared here to avoid requiring headers in this snippet. */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    /* Small helper to append a log line to the diagnostics file. */\n    auto void fs_log(const char *fmt, void *p1, int64_t i1)\n    {\n        FILE *f = fopen(\"/tmp/logs/1729.txt\", \"a\");\n        if (f != (FILE *)0)\n        {\n            /* Support limited formatting: string fmt may include %p and %lld as used below. */\n            fprintf(f, fmt, p1, (long long)i1);\n            fprintf(f, \"\\n\");\n            fclose(f);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry state */\n    fs_log(\"OS_FS_GetPhysDriveName ENTRY: PhysDriveName=%p MountPoint=%p\", (void *)PhysDriveName, (int64_t)MountPoint);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    fs_log(\"OS_FS_GetPhysDriveName ObjectIdGetBySearch returned %p (code=%d)\", (void *)&token, (int64_t)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log resolved filesystem record and flags */\n        fs_log(\"Resolved filesys=%p flags=%p\", (void *)filesys, (int64_t)filesys->flags);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log the copy operation intent so callers can reproduce overflow scenarios: */\n            fs_log(\"About to strncpy dest=%p src=%p n=%d\", (void *)PhysDriveName, (void *)filesys->system_mountpt,\n                   (int64_t)(OS_FS_PHYS_NAME_LEN - 1));\n\n            /* Preserve original logic: perform the copy and ensure null termination exactly as before. */\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            /* Log what was written (pointer info only to avoid reading caller buffer size). */\n            fs_log(\"After copy: dest=%p intended_term_index=%d\", (void *)PhysDriveName,\n                   (int64_t)(OS_FS_PHYS_NAME_LEN - 1));\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            fs_log(\"Filesystem not a mounted system (flags=%p) -> return %d\", (void *)filesys->flags, (int64_t)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        fs_log(\"ObjectIdGetBySearch failed -> return %d\", (void *)0, (int64_t)return_code);\n    }\n\n    fs_log(\"OS_FS_GetPhysDriveName EXIT: return_code=%d\", (void *)0, (int64_t)return_code);\n\n    return return_code;\n}\n"
}