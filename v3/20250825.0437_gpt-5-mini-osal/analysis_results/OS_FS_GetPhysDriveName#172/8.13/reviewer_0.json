{
  "user_message": "An agent A claimed that the following OS_FS_GetPhysDriveName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_FS_GetPhysDriveName.\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nMountPoint is declared as const char * but is passed as (void *)MountPoint to OS_ObjectIdGetBySearch, discarding the const qualifier. Casting away const in this call makes the pointer point to a non-const type and therefore violates MISRA C 2023 Rule 8.13. The correct approach is to have OS_ObjectIdGetBySearch accept a const void * (or otherwise preserve the const qualification) or to pass a non-const copy if modification is truly required.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_FS_GetPhysDriveName:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The code casts away the const qualifier when calling OS_ObjectIdGetBySearch: (void *)MountPoint converts a const char * to void *, discarding const. MISRA C 2023 Rule 8.13 requires pointers point to const-qualified types whenever possible; preserving const-qualification across APIs is required practice. If OS_ObjectIdGetBySearch does not need to modify the pointed data, its parameter should be const void * (and related callback prototypes should accept const parameters). If the function truly needs to modify the data, a non-const copy should be made and passed. Therefore the reported violation is valid (unless the callee signature already uses const-qualified pointer types, in which case the explicit cast would be unnecessary)."
}