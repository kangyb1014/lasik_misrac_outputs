{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextFree:\n```c\nint32 OS_ObjectIdFindNextFree(OS_object_token_t *token)\n{\n    uint32              max_id;\n    uint32              base_id;\n    uint32              local_id = 0;\n    uint32              serial;\n    uint32              i;\n    int32               return_code;\n    OS_common_record_t *obj = NULL;\n    OS_objtype_state_t *objtype_state;\n\n    base_id       = OS_GetBaseForObjectType(token->obj_type);\n    max_id        = OS_GetMaxForObjectType(token->obj_type);\n    objtype_state = &OS_objtype_state[token->obj_type];\n\n    if (max_id == 0)\n    {\n        /* if the max id is zero, then this build of OSAL\n         * does not include any support for that object type.\n         * Return the \"not implemented\" to differentiate between\n         * this case vs. running out of valid slots  */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n        serial      = 0;\n    }\n    else\n    {\n        return_code = OS_ERR_NO_FREE_IDS;\n        serial      = OS_ObjectIdToSerialNumber_Impl(objtype_state->last_id_issued);\n    }\n\n    for (i = 0; i < max_id; ++i)\n    {\n        local_id = (++serial) % max_id;\n        if (serial >= OS_OBJECT_INDEX_MASK)\n        {\n            /* reset to beginning of ID space */\n            serial = local_id;\n        }\n        obj = &OS_common_table[local_id + base_id];\n        if (!OS_ObjectIdDefined(obj->active_id))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(local_id);\n        OS_ObjectIdCompose_Impl(token->obj_type, serial, &token->obj_id);\n\n        /* Ensure any data in the record has been cleared */\n        obj->active_id  = token->obj_id;\n        obj->name_entry = NULL;\n        obj->creator    = OS_TaskGetId();\n        obj->refcount   = 0;\n\n        /* preemptively update the last id issued */\n        objtype_state->last_id_issued = token->obj_id;\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(-1);\n        token->obj_id  = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ObjectIdFindNextFree:\nstatic OS_common_record_t OS_common_table[OS_MAX_TOTAL_RECORDS]\n...\nOS_objtype_state_t OS_objtype_state[OS_OBJECT_TYPE_USER]\n...\n#define OS_OBJECT_INDEX_MASK 0xFFFF\n...\n#define OSAL_INDEX_C(X) ((osal_index_t)(X))\n...\n#define OS_OBJECT_ID_UNDEFINED ((osal_id_t){0})\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERR_NOT_IMPLEMENTED (-28)\n...\n#define OS_ERR_NO_FREE_IDS (-14)\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    /* Keep track of the last successfully-issued object ID of each type */\n    osal_id_t last_id_issued;\n\n    /* The number of individual transactions (lock/unlock cycles) on this type */\n    uint32 transaction_count;\n\n    /* The key required to unlock this table */\n    osal_key_t owner_key;\n} OS_objtype_state_t\n...\nosal_id_t obj_id\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (serial >= OS_OBJECT_INDEX_MASK)\n        {\n            /* reset to beginning of ID space */\n            serial = local_id;\n        }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The assignment serial = local_id; is executed when serial >= OS_OBJECT_INDEX_MASK and it changes the value of serial used in subsequent iterations and later in OS_ObjectIdCompose_Impl/last_id_issued. local_id is derived from (++serial) % max_id, so resetting serial to local_id affects the next ++serial and the composed object id; removing this assignment would change runtime behaviour (wrapping behavior of serial), therefore it is not dead code."
}