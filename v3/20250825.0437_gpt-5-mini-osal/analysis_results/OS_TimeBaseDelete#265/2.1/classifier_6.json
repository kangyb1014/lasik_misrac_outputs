{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseDelete:\n```c\nint32 OS_TimeBaseDelete(osal_id_t timer_id)\n{\n    int32             return_code;\n    osal_objtype_t    objtype;\n    OS_object_token_t token;\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TimeBaseDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TimeBaseDelete:\nstatic inline osal_objtype_t OS_ObjectIdToType_Impl(osal_id_t id)\n{\n    return (OS_ObjectIdToInteger(id) >> OS_OBJECT_TYPE_SHIFT);\n}\n...\nosal_id_t OS_TaskGetId_Impl(void)\n{\n    OS_VoidPtrValueWrapper_t self_record;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    self_record.opaque_arg = pthread_getspecific(POSIX_GlobalVars.ThreadKey);\n\n    return self_record.id;\n}\n...\n#define OS_OBJECT_TYPE_OS_TIMEBASE 0x08\n...\n#define OS_ERR_INCORRECT_OBJ_STATE (-35)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_SUCCESS (0)\n...\nint32 OS_TimeBaseDelete_Impl(const OS_object_token_t *token)\n{\n    OS_impl_timebase_internal_record_t *local;\n    int                                 status;\n\n    local = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n\n    pthread_cancel(local->handler_thread);\n\n    /*\n    ** Delete the timer\n    */\n    if (local->assigned_signal != 0)\n    {\n        status = timer_delete(local->host_timerid);\n        if (status < 0)\n        {\n            OS_DEBUG(\"Error deleting timer: %s\\n\", strerror(errno));\n            return OS_TIMER_ERR_INTERNAL;\n        }\n\n        local->assigned_signal = 0;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n...\ntypedef uint32 osal_objtype_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef uint32 osal_id_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nobjtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated \u2014 the early return is reachable at runtime when OS_TaskGetId_Impl() yields an ID whose object type equals OS_OBJECT_TYPE_OS_TIMEBASE (for example, when the current thread is the timer handler thread and its thread-specific ID has been set to the timebase object's ID). There is no static guarantee that this branch cannot occur, so the code is not unreachable."
}