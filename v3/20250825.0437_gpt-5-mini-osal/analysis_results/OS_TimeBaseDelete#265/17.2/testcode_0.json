{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdFinalizeDelete calls OS_NotifyEvent which invokes the user-registered EventHandler (OS_SharedGlobalVars.EventHandler). If that handler calls an OS delete function (for example OS_TimeBaseDelete), that delete path eventually calls OS_ObjectIdFinalizeDelete again (OS_TimeBaseDelete -> OS_ObjectIdFinalizeDelete). Thus OS_ObjectIdFinalizeDelete can be invoked indirectly via the notification callback, causing indirect recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2656.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseDelete:\n```c\nint32 OS_TimeBaseDelete(osal_id_t timer_id)\n{\n    int32             return_code;\n    osal_objtype_t    objtype;\n    OS_object_token_t token;\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TimeBaseDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe logging helper - keeps minimal footprint and does not change control flow */\nstatic void OS_TimeBaseDelete_Log(const char *stage,\n                                  osal_id_t timer_id,\n                                  osal_objtype_t objtype,\n                                  int32 return_code,\n                                  const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/2656.txt\", \"a\");\n    if (f)\n    {\n        /* Log: stage, timer id, object type, return code, token pointer */\n        fprintf(f, \"OS_TimeBaseDelete - %s: timer_id=%lu, objtype=%d, return_code=%ld, token=%p\\n\",\n                stage,\n                (unsigned long)timer_id,\n                (int)objtype,\n                (long)return_code,\n                (const void *)token);\n        fclose(f);\n    }\n}\n\nint32 OS_TimeBaseDelete(osal_id_t timer_id)\n{\n    int32             return_code;\n    osal_objtype_t    objtype;\n    OS_object_token_t token;\n\n    /* Log entry */\n    OS_TimeBaseDelete_Log(\"entry\", timer_id, (osal_objtype_t)0, (int32)0, (const OS_object_token_t *)NULL);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log objtype observed */\n    OS_TimeBaseDelete_Log(\"after_context_check\", timer_id, objtype, (int32)0, (const OS_object_token_t *)NULL);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log early return due to incorrect context */\n        OS_TimeBaseDelete_Log(\"early_return_incorrect_obj_state\", timer_id, objtype, (int32)OS_ERR_INCORRECT_OBJ_STATE, (const OS_object_token_t *)NULL);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TimeBaseDelete_Log(\"after_getbyid\", timer_id, objtype, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Call implementation and capture its return for logging */\n        int32 impl_rc = OS_TimeBaseDelete_Impl(&token);\n\n        /* Log return from Impl */\n        OS_TimeBaseDelete_Log(\"after_impl\", timer_id, objtype, impl_rc, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(impl_rc, &token);\n\n        /* Log finalization result */\n        OS_TimeBaseDelete_Log(\"after_finalize\", timer_id, objtype, return_code, &token);\n    }\n\n    /* Log exit */\n    OS_TimeBaseDelete_Log(\"exit\", timer_id, objtype, return_code, &token);\n\n    return return_code;\n}\n"
}