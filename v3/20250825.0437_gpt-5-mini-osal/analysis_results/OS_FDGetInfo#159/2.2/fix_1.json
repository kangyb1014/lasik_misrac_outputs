{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_FDGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1592.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp each log entry */\n    time_t t = time(NULL);\n    struct tm tm;\n\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(fp, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and incoming parameters */\n    OS_FDGetInfo_Log(\"ENTRY: OS_FDGetInfo called: filedes=%lld, fd_prop=%p\", (long long)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    OS_FDGetInfo_Log(\"After OS_CHECK_POINTER: fd_prop=%p\", (void *)fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    OS_FDGetInfo_Log(\"After memset(fd_prop): zeroed sizeof=%zu\", sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    OS_FDGetInfo_Log(\"OS_ObjectIdGetById returned: return_code=%lld\", (long long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        OS_FDGetInfo_Log(\"OS_OBJECT_TABLE_GET: token=%p, record=%p\", (void *)&token, (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            OS_FDGetInfo_Log(\"record->name_entry present: name_entry=%p, name='%s'\", (void *)record->name_entry, record->name_entry);\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n            OS_FDGetInfo_Log(\"After strncpy: fd_prop->Path='%s' (truncated to %zu)\", fd_prop->Path, sizeof(fd_prop->Path) - 1);\n        }\n        else\n        {\n            OS_FDGetInfo_Log(\"record->name_entry is NULL\");\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_FDGetInfo_Log(\"Set fd_prop->User=%lld, fd_prop->IsValid=%d\", (long long)fd_prop->User, (int)fd_prop->IsValid);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_FDGetInfo_Log(\"After OS_ObjectIdRelease: token released\");\n    }\n    else\n    {\n        OS_FDGetInfo_Log(\"OS_ObjectIdGetById failed with return_code=%lld; no record processed\", (long long)return_code);\n    }\n\n    OS_FDGetInfo_Log(\"EXIT: OS_FDGetInfo returning return_code=%lld\", (long long)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp35564pfz/src/src/os/shared/src/osapi-file.c: In function 'OS_FDGetInfo_Log':\n/tmp/tmp35564pfz/src/src/os/shared/src/osapi-file.c:499:15: error: storage size of 'tm' isn't known\n  499 |     struct tm tm;\n      |               ^~\n/tmp/tmp35564pfz/src/src/os/shared/src/osapi-file.c:512:23: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  512 |     vfprintf(fp, fmt, ap);\n      |                       ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-file.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-file.dir/__/__/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3601: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-file.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\nstatic void OS_FDGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1592.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp each log entry */\n    time_t t = time(NULL);\n    struct tm tm;\n\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(fp, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the system va_list to avoid mismatches with project-specific va_list typedefs */\n    vfprintf(fp, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and incoming parameters */\n    OS_FDGetInfo_Log(\"ENTRY: OS_FDGetInfo called: filedes=%lld, fd_prop=%p\", (long long)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    OS_FDGetInfo_Log(\"After OS_CHECK_POINTER: fd_prop=%p\", (void *)fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    OS_FDGetInfo_Log(\"After memset(fd_prop): zeroed sizeof=%zu\", sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    OS_FDGetInfo_Log(\"OS_ObjectIdGetById returned: return_code=%lld\", (long long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        OS_FDGetInfo_Log(\"OS_OBJECT_TABLE_GET: token=%p, record=%p\", (void *)&token, (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            OS_FDGetInfo_Log(\"record->name_entry present: name_entry=%p, name='%s'\", (void *)record->name_entry, record->name_entry);\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n            OS_FDGetInfo_Log(\"After strncpy: fd_prop->Path='%s' (truncated to %zu)\", fd_prop->Path, sizeof(fd_prop->Path) - 1);\n        }\n        else\n        {\n            OS_FDGetInfo_Log(\"record->name_entry is NULL\");\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_FDGetInfo_Log(\"Set fd_prop->User=%lld, fd_prop->IsValid=%d\", (long long)fd_prop->User, (int)fd_prop->IsValid);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_FDGetInfo_Log(\"After OS_ObjectIdRelease: token released\");\n    }\n    else\n    {\n        OS_FDGetInfo_Log(\"OS_ObjectIdGetById failed with return_code=%lld; no record processed\", (long long)return_code);\n    }\n\n    OS_FDGetInfo_Log(\"EXIT: OS_FDGetInfo returning return_code=%lld\", (long long)return_code);\n\n    return return_code;\n}\n",
  "explanation": "I added the necessary includes (<time.h> and <stdarg.h>, plus stdio.h, string.h, stdbool.h) so struct tm and va_list are defined. I also cast the variadic list when calling vfprintf to (va_list)ap to avoid type-mismatch errors that can occur if the build environment uses a project-specific va_list typedef. No other logic was changed; all original behavior is preserved."
}