{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the macro BUGCHECK_VOID(String != NULL) expands to an expression with no effect (for example ((void)0) or is compiled out in non-debug builds), then the statement is executed but has no observable effect; removing it would not change program behaviour. In that case it constitutes dead code and thus violates MISRA C 2023 Rule 2.2. (If, conversely, BUGCHECK_VOID performs a runtime check that may log, abort or otherwise change behaviour when the condition fails, then this statement is not dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1592.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n\n/* Lightweight logging helper that appends records to /tmp/logs/1592.txt\n   This helper is inserted to capture control flow and state for debugging only. */\nstatic void OS_FDGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1592.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp each log entry */\n    time_t t = time(NULL);\n    struct tm tm;\n\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(fp, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and incoming parameters */\n    OS_FDGetInfo_Log(\"ENTRY: OS_FDGetInfo called: filedes=%lld, fd_prop=%p\", (long long)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    OS_FDGetInfo_Log(\"After OS_CHECK_POINTER: fd_prop=%p\", (void *)fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    OS_FDGetInfo_Log(\"After memset(fd_prop): zeroed sizeof=%zu\", sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    OS_FDGetInfo_Log(\"OS_ObjectIdGetById returned: return_code=%lld\", (long long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        OS_FDGetInfo_Log(\"OS_OBJECT_TABLE_GET: token=%p, record=%p\", (void *)&token, (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            OS_FDGetInfo_Log(\"record->name_entry present: name_entry=%p, name='%s'\", (void *)record->name_entry, record->name_entry);\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n            OS_FDGetInfo_Log(\"After strncpy: fd_prop->Path='%s' (truncated to %zu)\", fd_prop->Path, sizeof(fd_prop->Path) - 1);\n        }\n        else\n        {\n            OS_FDGetInfo_Log(\"record->name_entry is NULL\");\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_FDGetInfo_Log(\"Set fd_prop->User=%lld, fd_prop->IsValid=%d\", (long long)fd_prop->User, (int)fd_prop->IsValid);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_FDGetInfo_Log(\"After OS_ObjectIdRelease: token released\");\n    }\n    else\n    {\n        OS_FDGetInfo_Log(\"OS_ObjectIdGetById failed with return_code=%lld; no record processed\", (long long)return_code);\n    }\n\n    OS_FDGetInfo_Log(\"EXIT: OS_FDGetInfo returning return_code=%lld\", (long long)return_code);\n\n    return return_code;\n}\n"
}