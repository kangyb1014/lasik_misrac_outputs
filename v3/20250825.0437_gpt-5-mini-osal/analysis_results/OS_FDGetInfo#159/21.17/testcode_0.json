{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1) can read from record->name_entry up to (sizeof(fd_prop->Path)-1) bytes. There is no check that the object pointed to by record->name_entry is at least that large or contains a NUL within that many bytes. If record->name_entry refers to a shorter object or a non\u2011NUL\u2011terminated buffer (e.g. a char array smaller than sizeof(fd_prop->Path)-1 or a string missing a terminating '\\0'), strncpy may read beyond the bounds of the source object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1599.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "int32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Early log: function entry and parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/1599.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_FDGetInfo: filedes=%d, fd_prop=%p\\n\", (int)filedes, (void *)fd_prop);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1599.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %d (OS_SUCCESS=%d) for filedes=%d, token=%p\\n\",\n                    (int)return_code, (int)OS_SUCCESS, (int)filedes, (void *)&token);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log the record pointers and relevant sizes that will be used for the strncpy call.\n         * Note: Do NOT attempt to probe the source buffer contents here (record->name_entry) because\n         * that could itself read past the source object. We only log the pointer value and the copy size\n         * so an external reproducer can determine whether the source object might be too small. */\n        {\n            size_t copy_len = sizeof(fd_prop->Path) - 1;\n            FILE *log = fopen(\"/tmp/logs/1599.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"record=%p, record->name_entry=%p, fd_prop->Path_size=%zu, strncpy_count=%zu\\n\",\n                        (void *)record, (void *)record->name_entry, (size_t)sizeof(fd_prop->Path), copy_len);\n                fclose(log);\n            }\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* Log that we are about to perform the copy (parameters only). */\n            {\n                size_t copy_len = sizeof(fd_prop->Path) - 1;\n                FILE *log = fopen(\"/tmp/logs/1599.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"About to call strncpy(dst=fd_prop->Path, src=record->name_entry, n=%zu)\\n\", copy_len);\n                    fclose(log);\n                }\n            }\n\n            /* Perform the copy using the original logic. */\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n\n            /* Ensure NUL-termination of destination to avoid downstream issues when logging the result. */\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n\n            /* Log the resulting destination buffer (safe to read because it's the destination). */\n            {\n                FILE *log = fopen(\"/tmp/logs/1599.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"After strncpy, fd_prop->Path=\");\n                    /* Print as string but protect against very long output */\n                    fprintf(log, \"%s\\n\", fd_prop->Path);\n                    fclose(log);\n                }\n            }\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        /* Log user and validity state */\n        {\n            FILE *log = fopen(\"/tmp/logs/1599.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Set fd_prop->User=%u, fd_prop->IsValid=%s\\n\", (unsigned)fd_prop->User,\n                        fd_prop->IsValid ? \"true\" : \"false\");\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log release and leaving function */\n        {\n            FILE *log = fopen(\"/tmp/logs/1599.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Exiting OS_FDGetInfo with return_code=%d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log failure path */\n        FILE *log = fopen(\"/tmp/logs/1599.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_FDGetInfo failed to get object id for filedes=%d, return_code=%d\\n\", (int)filedes, (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}