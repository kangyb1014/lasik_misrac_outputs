{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation: record->name_entry is used only as a source string but (presumably) declared as non-const (e.g. char *name_entry) in OS_common_record_t. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible; here the source pointer should be declared const char *name_entry since strncpy does not modify the source. The destination fd_prop->Path is an array (modifiable) and is fine. Recommendation: change the declaration of name_entry to const char * to satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append log entries to /tmp/logs/1593.txt */\nstatic void OS_FDGetInfo_Log(const char *fmt, ...)\n{\n    va_list args;\n    FILE *fp = fopen(\"/tmp/logs/1593.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    fprintf(fp, \"\\n\");\n    va_end(args);\n    fclose(fp);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and input state */\n    OS_FDGetInfo_Log(\"OS_FDGetInfo ENTRY: filedes=%d, fd_prop=%p\", (int)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    OS_FDGetInfo_Log(\"OS_ObjectIdGetById returned %d for filedes=%d, token=%p\", (int)return_code, (int)filedes, (void *)&token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        OS_FDGetInfo_Log(\"Record resolved: record=%p\", (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            /* Log the source pointer and a truncated view of its contents to show it's only used as source */\n            OS_FDGetInfo_Log(\"record->name_entry != NULL: ptr=%p, preview='%.200s'\", (void *)record->name_entry, record->name_entry);\n\n            /* Note in the log that strncpy will be used to copy from the source into the destination buffer */\n            OS_FDGetInfo_Log(\"About to strncpy into fd_prop->Path (size=%zu)\", sizeof(fd_prop->Path));\n\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n\n            /* Log the destination buffer after copy */\n            OS_FDGetInfo_Log(\"fd_prop->Path after strncpy preview='%.200s'\", fd_prop->Path);\n        }\n        else\n        {\n            OS_FDGetInfo_Log(\"record->name_entry is NULL\");\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_FDGetInfo_Log(\"fd_prop->User=%u, fd_prop->IsValid=%s\", (unsigned)fd_prop->User, fd_prop->IsValid ? \"true\" : \"false\");\n\n        OS_ObjectIdRelease(&token);\n        OS_FDGetInfo_Log(\"Released token %p\", (void *)&token);\n    }\n    else\n    {\n        OS_FDGetInfo_Log(\"OS_ObjectIdGetById did not succeed, returning %d\", (int)return_code);\n    }\n\n    OS_FDGetInfo_Log(\"OS_FDGetInfo EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}