{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * and is assigned from OS_OBJECT_TABLE_GET(OS_global_stream_table, token). In OS_FDGetInfo the code only reads fields from *record (record->name_entry, record->creator) and does not modify the pointed-to object. Therefore the pointer could and should be declared to point to a const-qualified type (const OS_common_record_t *record). Declaring it non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - appends human-readable traces to /tmp/logs/1593.txt */\nstatic void os_fdgetinfo_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1593.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and input parameter */\n    os_fdgetinfo_log(\"OS_FDGetInfo ENTRY: filedes=%lld, fd_prop=%p\", (long long)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n    os_fdgetinfo_log(\"fd_prop cleared (memset)\\n\");\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    os_fdgetinfo_log(\"OS_ObjectIdGetById returned: %d, token=%lld\", return_code, (long long)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        os_fdgetinfo_log(\"OS_OBJECT_TABLE_GET returned record=%p\", (void *)record);\n\n        /* The original logic reads fields from *record and does not modify it. Log those reads. */\n        if (record->name_entry != NULL)\n        {\n            /* Log the name entry content (truncate to reasonable length for logs) */\n            char name_buf[128];\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n            os_fdgetinfo_log(\"record->name_entry: '%s'\", name_buf);\n\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            os_fdgetinfo_log(\"fd_prop->Path set from record->name_entry\");\n        }\n        else\n        {\n            os_fdgetinfo_log(\"record->name_entry is NULL\");\n        }\n\n        os_fdgetinfo_log(\"record->creator: %u\", (unsigned)record->creator);\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n        os_fdgetinfo_log(\"fd_prop->User set, fd_prop->IsValid set to true\");\n\n        OS_ObjectIdRelease(&token);\n        os_fdgetinfo_log(\"OS_ObjectIdRelease called for token=%lld\", (long long)token);\n    }\n\n    os_fdgetinfo_log(\"OS_FDGetInfo EXIT: return_code=%d\", return_code);\n    return return_code;\n}"
}