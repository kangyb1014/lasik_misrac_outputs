{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is only used to read fields (record->name_entry, record->creator) and is not modified. According to MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (e.g. const OS_common_record_t *record). Declaring it non-const here unnecessarily permits modification and thus violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1593.txt */\nstatic void write_probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists (ignore errors if it already exists) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/1593.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect program flow */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Probe: entry */\n    write_probe_log(\"OS_FDGetInfo ENTRY: filedes=%llu, fd_prop=%p\", (unsigned long long)filedes, (void *)fd_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Probe: after memset */\n    write_probe_log(\"OS_FDGetInfo: fd_prop zeroed\");\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Probe: result of ObjectIdGetById */\n    write_probe_log(\"OS_FDGetInfo: OS_ObjectIdGetById returned %ld, token addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Probe: record pointer obtained */\n        write_probe_log(\"OS_FDGetInfo: record=%p\", (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            /* Probe: name_entry present and its content (bounded) */\n            char _probe_name[128];\n            strncpy(_probe_name, record->name_entry, sizeof(_probe_name) - 1);\n            _probe_name[sizeof(_probe_name) - 1] = '\\0';\n            write_probe_log(\"OS_FDGetInfo: record->name_entry=%p, content='%s'\", (void *)record->name_entry, _probe_name);\n\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n\n            /* Probe: after strncpy to fd_prop->Path */\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n            write_probe_log(\"OS_FDGetInfo: fd_prop->Path set to '%s'\", fd_prop->Path);\n        }\n        else\n        {\n            write_probe_log(\"OS_FDGetInfo: record->name_entry is NULL\");\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        /* Probe: user and valid state */\n        write_probe_log(\"OS_FDGetInfo: fd_prop->User=%llu, fd_prop->IsValid=%s\",\n                        (unsigned long long)fd_prop->User,\n                        fd_prop->IsValid ? \"true\" : \"false\");\n\n        OS_ObjectIdRelease(&token);\n\n        /* Probe: released token */\n        write_probe_log(\"OS_FDGetInfo: OS_ObjectIdRelease called for token addr=%p\", (void *)&token);\n    }\n    else\n    {\n        write_probe_log(\"OS_FDGetInfo: returning without success, return_code=%ld\", (long)return_code);\n    }\n\n    /* Probe: exit */\n    write_probe_log(\"OS_FDGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}