{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code can underflow and produce a very large ActualCopy, leading memcpy to write beyond the destination buffer. Example: StubPtr->Data.Buff.TotalSize == 100, StubPtr->Data.Buff.Position == 200 (Position > TotalSize), and MaxSize == 500. The subtraction yields ActualCopy = (size_t)(100 - 200) -> very large value; the subsequent if (MaxSize < ActualCopy) sets ActualCopy = 500, then memcpy(&BasePtr[200], LocalBuffer, 500) writes far past the allocated 100-byte buffer. Thus accesses beyond object bounds can occur.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3169.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyFromLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/*\n * Modified UT_Stub_CopyFromLocal with logging probes.\n * Logs control flow and state to /tmp/logs/3169.txt to help reproduce\n * the underflow/overflow scenario described in the violation report.\n *\n * This preserves the original logic and only adds observable logging.\n */\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        /* Compute preliminary ActualCopy using original logic */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        /* Open log file (attempt to create directory if necessary) */\n        FILE *log = fopen(\"/tmp/logs/3169.txt\", \"a\");\n        if (log == NULL)\n        {\n            /* Try to create directory and reopen */\n            if (mkdir(\"/tmp/logs\", 0777) == 0 || errno == EEXIST)\n            {\n                log = fopen(\"/tmp/logs/3169.txt\", \"a\");\n            }\n        }\n\n        if (log != NULL)\n        {\n            uintptr_t stub_addr = (uintptr_t)StubPtr;\n            uintptr_t baseptr = (uintptr_t)StubPtr->Data.Buff.BasePtr;\n            uintptr_t destaddr = (uintptr_t)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position];\n            uintptr_t localptr = (uintptr_t)LocalBuffer;\n\n            fprintf(log, \"-- UT_Stub_CopyFromLocal entry --\\n\");\n            fprintf(log, \"FuncKey: 0x%016\" PRIxPTR \"\\n\", (uintptr_t)FuncKey);\n            fprintf(log, \"StubPtr: 0x%016\" PRIxPTR \"\\n\", stub_addr);\n            fprintf(log, \"TotalSize: %zu\\n\", StubPtr->Data.Buff.TotalSize);\n            fprintf(log, \"Position: %zu\\n\", StubPtr->Data.Buff.Position);\n            fprintf(log, \"Preliminary ActualCopy (TotalSize - Position): %zu\\n\", ActualCopy);\n            fprintf(log, \"MaxSize: %zu\\n\", MaxSize);\n            fprintf(log, \"BasePtr: 0x%016\" PRIxPTR \"\\n\", baseptr);\n            fprintf(log, \"Destination address (&BasePtr[Position]): 0x%016\" PRIxPTR \"\\n\", destaddr);\n            fprintf(log, \"LocalBuffer pointer: 0x%016\" PRIxPTR \"\\n\", localptr);\n            fflush(log);\n        }\n\n        /* Original capping logic (preserved) */\n        if (MaxSize < ActualCopy)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"MaxSize < ActualCopy: capping ActualCopy from %zu to %zu\\n\", ActualCopy, MaxSize);\n                fflush(log);\n            }\n            ActualCopy = MaxSize;\n        }\n\n        /* Log just before memcpy to capture the values used in the call */\n        if (log != NULL)\n        {\n            fprintf(log, \"About to memcpy dest=0x%016\" PRIxPTR \" src=0x%016\" PRIxPTR \" size=%zu\\n\",\n                    (uintptr_t)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position],\n                    (uintptr_t)LocalBuffer,\n                    ActualCopy);\n            fflush(log);\n        }\n\n        /* Perform the original memory copy */\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /* Log after memcpy and after updating Position */\n        if (log != NULL)\n        {\n            fprintf(log, \"After memcpy: ActualCopy used=%zu\\n\", ActualCopy);\n            fprintf(log, \"New Position: %zu\\n\", StubPtr->Data.Buff.Position);\n            fflush(log);\n        }\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Position >= TotalSize => calling UT_ClearStubEntry(StubPtr=0x%016\" PRIxPTR \")\\n\",\n                        (uintptr_t)StubPtr);\n                fflush(log);\n            }\n\n            UT_ClearStubEntry(StubPtr);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"UT_ClearStubEntry returned for StubPtr=0x%016\" PRIxPTR \"\\n\", (uintptr_t)StubPtr);\n                fflush(log);\n            }\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"-- UT_Stub_CopyFromLocal exit (ActualCopy=%zu) --\\n\\n\", ActualCopy);\n            fclose(log);\n        }\n    }\n\n    return ActualCopy;\n}\n"
}