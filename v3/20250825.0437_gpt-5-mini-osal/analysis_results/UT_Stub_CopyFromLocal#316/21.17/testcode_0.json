{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If StubPtr->Data.Buff.Position is greater than StubPtr->Data.Buff.TotalSize (for example due to corruption or lack of prior validation), the subtraction ActualCopy = TotalSize - Position will underflow (size_t wrap) producing a very large value. If MaxSize is smaller than that large value, ActualCopy becomes MaxSize which can still exceed the actual remaining space in BasePtr, so the subsequent memcpy(&BasePtr[Position], LocalBuffer, ActualCopy) can write past the bounds of BasePtr. The following update StubPtr->Data.Buff.Position += ActualCopy can also overflow/wrap and leave Position beyond the buffer bounds. Therefore the use of memcpy in this sequence can result in accesses beyond the bounds of the object and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3169.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyFromLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends logs to /tmp/logs/3169.txt */\nstatic void UT_Stub_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n\n    UT_Stub_LogProbe(\"UT_Stub_CopyFromLocal ENTRY: FuncKey=%llu, LocalBuffer=%p, MaxSize=%zu\",\n                     (unsigned long long)FuncKey, LocalBuffer, MaxSize);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        UT_Stub_LogProbe(\"No stub entry found for FuncKey=%llu\", (unsigned long long)FuncKey);\n    }\n    else\n    {\n        /* Log buffer state before computation */\n        UT_Stub_LogProbe(\"Stub found: BasePtr=%p, Position=%zu, TotalSize=%zu\",\n                         (void *)StubPtr->Data.Buff.BasePtr,\n                         StubPtr->Data.Buff.Position,\n                         StubPtr->Data.Buff.TotalSize);\n\n        /* Original logic preserved: compute remaining bytes */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        UT_Stub_LogProbe(\"Computed ActualCopy (before clamp) = %zu\", ActualCopy);\n\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n            UT_Stub_LogProbe(\"Clamped ActualCopy to MaxSize = %zu\", ActualCopy);\n        }\n        else\n        {\n            UT_Stub_LogProbe(\"ActualCopy remains = %zu\", ActualCopy);\n        }\n\n        /* Log destination pointer and sizes prior to memcpy */\n        UT_Stub_LogProbe(\"About to memcpy dest=%p, src=%p, n=%zu; BufferBase=%p, Position=%zu, TotalSize=%zu\",\n                         (void *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position],\n                         LocalBuffer,\n                         ActualCopy,\n                         (void *)StubPtr->Data.Buff.BasePtr,\n                         StubPtr->Data.Buff.Position,\n                         StubPtr->Data.Buff.TotalSize);\n\n        /* Perform the copy (preserve original behavior) */\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n\n        UT_Stub_LogProbe(\"memcpy completed: wrote %zu bytes to BasePtr at offset %zu\",\n                         ActualCopy, StubPtr->Data.Buff.Position);\n\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        UT_Stub_LogProbe(\"Updated Position = %zu (after adding %zu)\",\n                         StubPtr->Data.Buff.Position, ActualCopy);\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_Stub_LogProbe(\"Position >= TotalSize (%zu >= %zu): clearing stub entry\",\n                             StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n            UT_ClearStubEntry(StubPtr);\n        }\n        else\n        {\n            UT_Stub_LogProbe(\"Position < TotalSize (%zu < %zu): leaving stub entry intact\",\n                             StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n        }\n    }\n\n    UT_Stub_LogProbe(\"UT_Stub_CopyFromLocal EXIT: ActualCopy=%zu\", ActualCopy);\n    return ActualCopy;\n}\n"
}