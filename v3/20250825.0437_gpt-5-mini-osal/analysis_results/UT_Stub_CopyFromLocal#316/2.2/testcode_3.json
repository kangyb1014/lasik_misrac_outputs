{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_DefaultHandler_OS_printf the initial assignment 'size_t length = strlen(string);' is redundant: the variable 'length' is recomputed (length = strlen(string);) inside the subsequent 'if (status >= 0)' block before any use, and if status < 0 the initial value is never used. Thus the call to strlen and the assignment constitute dead code \u2014 removing that line would not affect program behaviour (aside from minor timing differences).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3162.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyFromLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Open log file (append). If it fails, proceed without logging to avoid changing behavior. */\n    FILE *log = fopen(\"/tmp/logs/3162.txt\", \"a\");\n    if (log)\n    {\n        /* Try to record the inputs; cast FuncKey to unsigned long for safe printing in many environments. */\n        fprintf(log, \"UT_Stub_CopyFromLocal called: FuncKey=%lu, LocalBuffer=%p, MaxSize=%zu\\n\",\n                (unsigned long)FuncKey, LocalBuffer, MaxSize);\n    }\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (log)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        size_t beforeTotal = StubPtr->Data.Buff.TotalSize;\n        size_t beforePos   = StubPtr->Data.Buff.Position;\n\n        if (log)\n        {\n            fprintf(log, \"Before copy: TotalSize=%zu, Position=%zu\\n\", beforeTotal, beforePos);\n        }\n\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        if (log)\n        {\n            fprintf(log, \"Initial computed ActualCopy=%zu\\n\", ActualCopy);\n        }\n\n        if (MaxSize < ActualCopy)\n        {\n            if (log)\n            {\n                fprintf(log, \"MaxSize (%zu) < ActualCopy (%zu) \u2014 limiting ActualCopy to MaxSize\\n\", MaxSize, ActualCopy);\n            }\n            ActualCopy = MaxSize;\n        }\n\n        if (log)\n        {\n            fprintf(log, \"ActualCopy to perform=%zu\\n\", ActualCopy);\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n\n        if (log)\n        {\n            fprintf(log, \"memcpy performed: src=%p, dest=BasePtr+%zu, bytes=%zu\\n\",\n                    LocalBuffer, StubPtr->Data.Buff.Position, ActualCopy);\n        }\n\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        if (log)\n        {\n            fprintf(log, \"Updated Position=%zu\\n\", StubPtr->Data.Buff.Position);\n        }\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (log)\n            {\n                fprintf(log, \"Buffer complete (Position=%zu >= TotalSize=%zu). Clearing entry.\\n\",\n                        StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n            }\n            UT_ClearStubEntry(StubPtr);\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"Buffer not complete (Position=%zu < TotalSize=%zu). Entry retained.\\n\",\n                        StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n            }\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"No stub entry found for FuncKey=%lu\\n\", (unsigned long)FuncKey);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Return ActualCopy=%zu\\n\\n\", ActualCopy);\n        fclose(log);\n    }\n\n    return ActualCopy;\n}\n"
}