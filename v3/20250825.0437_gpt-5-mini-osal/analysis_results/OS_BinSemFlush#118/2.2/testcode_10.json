{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment token->obj_idx = OSAL_INDEX_C(-1); in OS_ObjectIdTransactionInit is redundant. In the call sequence used by OS_BinSemFlush, OS_ObjectIdGetById always calls OS_ObjectIdToArrayIndex immediately after TransactionInit, which (on success) overwrites token->obj_idx, and on failure the token->obj_idx value is never used (the transaction is canceled). Removing this assignment would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemFlush code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1182.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemFlush as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemFlush:\n```c\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemFlush_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemFlush code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n    FILE *log = fopen(\"/tmp/logs/1182.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_BinSemFlush: entered with sem_id=%lu\\n\", (unsigned long)sem_id);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n\n        /* Dump the raw bytes of the token so callers can see what was written by TransactionInit */\n        fprintf(log, \"token raw bytes (size=%zu): \", sizeof(token));\n        {\n            const unsigned char *p = (const unsigned char *)&token;\n            size_t i;\n            for (i = 0; i < sizeof(token); ++i)\n            {\n                fprintf(log, \"%02x\", (unsigned)p[i]);\n            }\n        }\n        fprintf(log, \"\\n\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_BinSemFlush_Impl with token\\n\");\n        }\n\n        return_code = OS_BinSemFlush_Impl(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_BinSemFlush_Impl returned %ld\\n\", (long)return_code);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_BinSemFlush returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}