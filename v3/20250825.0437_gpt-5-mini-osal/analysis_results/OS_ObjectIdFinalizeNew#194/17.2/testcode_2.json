{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdFinalizeNew calls OS_NotifyEvent, which invokes the function pointer OS_SharedGlobalVars.EventHandler. If the registered EventHandler (an application callback) calls back into the OS notification path (for example calls OS_NotifyEvent or a function that eventually calls OS_ObjectIdFinalizeNew/OS_NotifyEvent), this creates an indirect recursion: OS_ObjectIdFinalizeNew -> OS_NotifyEvent -> EventHandler -> OS_NotifyEvent (or OS_ObjectIdFinalizeNew) ... This potential for indirect self-call violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1946.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeNew:\n```c\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helpers - write append-only logs to /tmp/logs/1946.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1946.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/* Forward declarations/types are expected to exist in the build environment. */\n/* We only reference them here; do not redefine OS types. */\n\nstatic void probe_log_state(const char *stage, int32 operation_status, const OS_object_token_t *token, osal_id_t final_id, const osal_id_t *outid)\n{\n    osal_id_t token_id = (token != NULL) ? token->obj_id : (osal_id_t)-1;\n    probe_log(\"%s: operation_status=%ld token=%p token->obj_id=%ld final_id=%ld outid=%p\",\n              stage,\n              (long)operation_status,\n              (const void *)token,\n              (long)token_id,\n              (long)final_id,\n              (const void *)outid);\n}\n\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* Log entry and initial state */\n    probe_log_state(\"ENTER\", operation_status, token, (osal_id_t)0, outid);\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n        probe_log(\"DECISION: operation successful, using token->obj_id=%ld\", (long)token->obj_id);\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        probe_log(\"DECISION: operation failed, setting final_id=OS_OBJECT_ID_UNDEFINED\");\n    }\n\n    /* Either way we must unlock the object type */\n    probe_log_state(\"BEFORE_TX_FINISH\", operation_status, token, final_id, outid);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    probe_log_state(\"AFTER_TX_FINISH\", operation_status, token, final_id, outid);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        /* Log immediately before calling the event path so nested calls can be observed */\n        probe_log(\"BEFORE_NOTIFY: event=OS_EVENT_RESOURCE_CREATED id=%ld\", (long)token->obj_id);\n\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n\n        /* Log after notify - if a callback re-enters this function the logs will show nested ENTER/BEFORE_NOTIFY sequences */\n        probe_log(\"AFTER_NOTIFY: event=OS_EVENT_RESOURCE_CREATED id=%ld\", (long)token->obj_id);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n        probe_log(\"OUTID_WRITTEN: outid_ptr=%p final_id=%ld\", (const void *)outid, (long)final_id);\n    }\n\n    probe_log_state(\"EXIT\", operation_status, token, final_id, outid);\n\n    return operation_status;\n}\n"
}