{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'SysMountPointLen = 0;' is executed unconditionally but has no effect on program behaviour: whenever the function later uses SysMountPointLen it has been overwritten in the success path (set from filesys->system_mountpt length), and in the error paths the later code that would use it is not executed because return_code != OS_SUCCESS. Removing this assignment would not change program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: append logs to /tmp/logs/1702.txt */\nstatic void OS_rename_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1702.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    OS_rename_log(\"OS_rename ENTRY: old=\\\"%s\\\" new=\\\"%s\\\"\", old ? old : \"(null)\", new ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    OS_rename_log(\"After OS_TranslatePath(old): return_code=%d old_path=\\\"%s\\\"\", return_code, (return_code==OS_SUCCESS)? old_path : \"(invalid)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        OS_rename_log(\"After OS_TranslatePath(new): return_code=%d new_path=\\\"%s\\\"\", return_code, (return_code==OS_SUCCESS)? new_path : \"(invalid)\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        OS_rename_log(\"After OS_FileRename_Impl: return_code=%d old_path=\\\"%s\\\" new_path=\\\"%s\\\"\", return_code, old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_rename_log(\"Starting to iterate object table for potential open streams to update names\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log stream state before comparison */\n            OS_rename_log(\"Iterator token=%u stream_name=\\\"%s\\\" socket_domain=%d\", (unsigned)iter.token, stream->stream_name, (int)stream->socket_domain);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                OS_rename_log(\"Match found: token=%u old_name=\\\"%s\\\" -> renaming to \\\"%s\\\"\", (unsigned)iter.token, old, new);\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                OS_rename_log(\"Stream name updated: token=%u new_stream_name=\\\"%s\\\"\", (unsigned)iter.token, stream->stream_name);\n            }\n            else\n            {\n                OS_rename_log(\"No match/update for token=%u (socket_domain=%d comparison=%d)\", (unsigned)iter.token, (int)stream->socket_domain, (int)(stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0));\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        OS_rename_log(\"Finished iterating object table\");\n    }\n\n    OS_rename_log(\"OS_rename EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n"
}