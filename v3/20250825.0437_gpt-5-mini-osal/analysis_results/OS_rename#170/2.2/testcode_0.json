{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment VirtPathBegin = VirtPathLen; is dead code. In all execution paths where the later code that uses VirtPathBegin runs, VirtPathBegin is overwritten with the filesystem virtual mount point length (filesys->virtual_mountpt) after a successful OS_ObjectIdGetBySearch; if OS_ObjectIdGetBySearch fails or the filesystem is not marked as mounted, return_code is set to an error and the subsequent code that would use VirtPathBegin is not executed. Therefore removing this assignment does not affect program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\nstatic void OS_rename_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1702.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input parameters */\n    OS_rename_log(\"OS_rename ENTRY: old=\\\"%s\\\" new=\\\"%s\\\"\", (old != NULL) ? old : \"(null)\", (new != NULL) ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    OS_rename_log(\"OS_TranslatePath(old) -> return_code=%ld, old_path=\\\"%s\\\"\", (long)return_code, old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        OS_rename_log(\"OS_TranslatePath(new) -> return_code=%ld, new_path=\\\"%s\\\"\", (long)return_code, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        OS_rename_log(\"OS_FileRename_Impl(\\\"%s\\\", \\\"%s\\\") -> return_code=%ld\", old_path, new_path, (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_rename_log(\"File rename succeeded, preparing to iterate active LOCAL_OBJID_TYPE objects\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log stream state before potential update */\n            OS_rename_log(\"Iterator token=%d, socket_domain=%d, stream_name=\\\"%s\\\"\", (int)iter.token, (int)stream->socket_domain, stream->stream_name);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                OS_rename_log(\"Match found: updating stream_name for token=%d from \\\"%s\\\" to \\\"%s\\\"\", (int)iter.token, stream->stream_name, new);\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                OS_rename_log(\"Updated stream_name for token=%d now=\\\"%s\\\"\", (int)iter.token, stream->stream_name);\n            }\n            else\n            {\n                OS_rename_log(\"No update needed for token=%d (socket_domain=%d, name=\\\"%s\\\")\", (int)iter.token, (int)stream->socket_domain, stream->stream_name);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        OS_rename_log(\"Finished iterating streams\");\n    }\n    else\n    {\n        OS_rename_log(\"OS_rename will not iterate streams because return_code=%ld\", (long)return_code);\n    }\n\n    OS_rename_log(\"OS_rename RETURN: %ld\", (long)return_code);\n    return return_code;\n}\n"
}