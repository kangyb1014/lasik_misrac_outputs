{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmemchr(name_ptr, 0, OS_MAX_FILE_NAME) scans up to OS_MAX_FILE_NAME bytes starting at name_ptr but there is no guarantee the object referenced by name_ptr (the buffer containing VirtualPath) has that many bytes available. For example, if VirtualPath points to a minimally sized buffer that only contains the string and its terminating NUL (so the bytes remaining from name_ptr to the end of the object are less than OS_MAX_FILE_NAME), memchr will read past the buffer bounds. The earlier strnlen(VirtualPath, OS_MAX_PATH_LEN) only ensures a NUL is present within OS_MAX_PATH_LEN bytes and does not guarantee that OS_MAX_FILE_NAME bytes are accessible from name_ptr, so this can result in out\u2011of\u2011bounds access and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1709.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\nstatic void os_rename_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1709.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    os_rename_log(\"OS_rename ENTRY: old_ptr=%p new_ptr=%p\", (const void *)old, (const void *)new);\n\n    return_code = OS_TranslatePath(old, old_path);\n    os_rename_log(\"After OS_TranslatePath(old): return_code=%ld old_path_len=%zu old_path_capacity=%zu\",\n                  (long)return_code,\n                  strnlen(old_path, sizeof(old_path)),\n                  sizeof(old_path));\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        os_rename_log(\"After OS_TranslatePath(new): return_code=%ld new_path_len=%zu new_path_capacity=%zu\",\n                      (long)return_code,\n                      strnlen(new_path, sizeof(new_path)),\n                      sizeof(new_path));\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        os_rename_log(\"After OS_FileRename_Impl: return_code=%ld old_path=%.*s new_path=%.*s\",\n                      (long)return_code,\n                      (int)strnlen(old_path, sizeof(old_path)), old_path,\n                      (int)strnlen(new_path, sizeof(new_path)), new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n        os_rename_log(\"IterateActive called: iterator_initialized\");\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log stream metadata (safe accesses within known object bounds) */\n            os_rename_log(\"Processing stream token=%u stream_ptr=%p stream_name_capacity=%zu stream_name_len=%zu socket_domain=%d\",\n                          (unsigned)iter.token,\n                          (const void *)stream,\n                          sizeof(stream->stream_name),\n                          strnlen(stream->stream_name, sizeof(stream->stream_name)),\n                          (int)stream->socket_domain);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                os_rename_log(\"Match found: token=%u old_stream_name=%.*s\", (unsigned)iter.token,\n                              (int)strnlen(stream->stream_name, sizeof(stream->stream_name)), stream->stream_name);\n\n                /* Preserve original logic: update the stream name */\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                os_rename_log(\"After strncpy: token=%u new_stream_name=%.*s new_stream_name_len=%zu new_stream_capacity=%zu\",\n                              (unsigned)iter.token,\n                              (int)strnlen(stream->stream_name, sizeof(stream->stream_name)), stream->stream_name,\n                              strnlen(stream->stream_name, sizeof(stream->stream_name)),\n                              sizeof(stream->stream_name));\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        os_rename_log(\"Iterator destroyed\");\n    }\n\n    os_rename_log(\"OS_rename EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}