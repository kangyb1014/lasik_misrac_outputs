{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'queue' is declared as OS_queue_internal_record_t * but in this function it is only used for read access (e.g. comparing size > queue->max_size). Per MISRA C 2023 Rule 8.13 it should be declared as const OS_queue_internal_record_t *queue so the pointer points to a const-qualified type whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueuePut as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut:\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueuePut code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe/log helper: append control-flow and state info to /tmp/logs/2343.txt */\nstatic void OS_QueuePut_Log(const char *stage,\n                            unsigned long queue_id_val,\n                            const void *data,\n                            size_t size,\n                            unsigned long flags_val,\n                            void *queue_ptr,\n                            size_t queue_max_size,\n                            int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2343.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Write a compact, readable single-line record */\n        fprintf(f, \"OS_QueuePut %s: queue_id=%lu data=%p size=%zu flags=0x%08lx return=%d queue_ptr=%p\",\n                stage, queue_id_val, data, size, flags_val, return_code, queue_ptr);\n        if (queue_ptr != NULL)\n        {\n            fprintf(f, \" queue->max_size=%zu\", queue_max_size);\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry state (before parameter checks to capture raw inputs) */\n    OS_QueuePut_Log(\"entry\", (unsigned long)queue_id, data, size, (unsigned long)flags, NULL, 0u, -1);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log after attempting to get object id */\n    OS_QueuePut_Log(\"after_ObjectIdGetById\", (unsigned long)queue_id, data, size, (unsigned long)flags, NULL, 0u, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log after resolving queue pointer */\n        /* Capture queue->max_size only when queue is non-NULL */\n        if (queue != NULL)\n        {\n            OS_QueuePut_Log(\"resolved_queue\", (unsigned long)queue_id, data, size, (unsigned long)flags, (void *)queue, (size_t)queue->max_size, return_code);\n        }\n        else\n        {\n            OS_QueuePut_Log(\"resolved_queue_null\", (unsigned long)queue_id, data, size, (unsigned long)flags, NULL, 0u, return_code);\n        }\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n\n            /* Log the failure path and relevant sizes */\n            OS_QueuePut_Log(\"size_too_large\", (unsigned long)queue_id, data, size, (unsigned long)flags, (void *)queue, (size_t)queue->max_size, return_code);\n        }\n        else\n        {\n            /* Log before calling implementation */\n            OS_QueuePut_Log(\"before_Impl\", (unsigned long)queue_id, data, size, (unsigned long)flags, (void *)queue, (size_t)queue->max_size, return_code);\n\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n\n            /* Log after implementation returns */\n            OS_QueuePut_Log(\"after_Impl\", (unsigned long)queue_id, data, size, (unsigned long)flags, (void *)queue, (size_t)queue->max_size, return_code);\n        }\n    }\n\n    /* Final return logging */\n    OS_QueuePut_Log(\"exit\", (unsigned long)queue_id, data, size, (unsigned long)flags, (void *)queue, (queue != NULL ? (size_t)queue->max_size : 0u), return_code);\n\n    return return_code;\n}\n"
}