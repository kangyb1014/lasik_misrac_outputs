{
  "user_message": "An agent A claimed that the following OS_QueuePut code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueuePut.\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer variable 'queue' is declared as OS_queue_internal_record_t * but in this function it is only used for read access (e.g. comparing size > queue->max_size). Per MISRA C 2023 Rule 8.13 it should be declared as const OS_queue_internal_record_t *queue so the pointer points to a const-qualified type whenever possible.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_QueuePut entry: queue_id=3735928559 data=0x7fffcdc45ba0 size=4 flags=0x00000000 return=-1 queue_ptr=(nil)\nOS_QueuePut after_ObjectIdGetById: queue_id=3735928559 data=0x7fffcdc45ba0 size=4 flags=0x00000000 return=-35 queue_ptr=(nil)\nOS_QueuePut exit: queue_id=3735928559 data=0x7fffcdc45ba0 size=4 flags=0x00000000 return=-35 queue_ptr=0x564d304d2c02 queue->max_size=399493142640350714\nOS_QueuePut entry: queue_id=0 data=0x7fffcdc45ba0 size=4 flags=0x00000000 return=-1 queue_ptr=(nil)\nOS_QueuePut after_ObjectIdGetById: queue_id=0 data=0x7fffcdc45ba0 size=4 flags=0x00000000 return=-35 queue_ptr=(nil)\nOS_QueuePut exit: queue_id=0 data=0x7fffcdc45ba0 size=4 flags=0x00000000 return=-35 queue_ptr=0x564d304d7328 queue->max_size=7310518073137460527\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_QueuePut the local variable queue is only used for read access (queue->max_size) and is never written to or passed to an API that would require a non-const pointer. Per MISRA C 2023 Rule 8.13 the pointer should therefore point to a const-qualified type where possible (e.g. const OS_queue_internal_record_t *queue). Assigning the result of OS_OBJECT_TABLE_GET (a non-const pointer) to a const-qualified pointer is permitted (adding const), so there is no technical blocker in the shown code. If there is some other use not shown here that mutates the object or that requires a non-const pointer, that would justify keeping the non-const type, but based on the provided function body and log the agent A\u2019s claim is valid."
}