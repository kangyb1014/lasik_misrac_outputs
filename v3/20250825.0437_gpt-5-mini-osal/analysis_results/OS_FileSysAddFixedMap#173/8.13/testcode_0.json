{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * (name) to void * via (void *)name when invoking OS_ObjectIdFindNextMatch. This discards the const qualifier from the pointer (i.e., converting const char * \u2192 void *) and thus violates MISRA C 2023 Rule 8.13. A proper fix is to have the callee accept a const void * (or otherwise preserve the const qualification) instead of casting it away.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1733.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysAddFixedMap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Probe logging function - preserves const correctness */\nstatic void OS_LogAddFixedMapState(const char *label, const void *token_addr, const char *dev_name, const char *phys_path, const char *virt_path, int32_t return_code)\n{\n    FILE *log = fopen(\"/tmp/logs/1733.txt\", \"a\");\n    if (log == NULL)\n    {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    fprintf(log, \"[OS_FileSysAddFixedMap] %s\\n\", label);\n    fprintf(log, \"  return_code: %d\\n\", (int)return_code);\n\n    /* Print pointer values as integer to avoid casting away const qualifier */\n    fprintf(log, \"  token_addr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)token_addr);\n    fprintf(log, \"  dev_name ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)dev_name);\n    fprintf(log, \"  phys_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)phys_path);\n    fprintf(log, \"  virt_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)virt_path);\n\n    if (dev_name != NULL)\n    {\n        fprintf(log, \"  dev_name: '%s'\\n\", dev_name);\n        fprintf(log, \"  dev_name_len: %zu\\n\", strlen(dev_name));\n    }\n    if (phys_path != NULL)\n    {\n        fprintf(log, \"  phys_path: '%s'\\n\", phys_path);\n        fprintf(log, \"  phys_path_len: %zu\\n\", strlen(phys_path));\n    }\n    if (virt_path != NULL)\n    {\n        fprintf(log, \"  virt_path: '%s'\\n\", virt_path);\n        fprintf(log, \"  virt_path_len: %zu\\n\", strlen(virt_path));\n    }\n\n    fprintf(log, \"---\\n\");\n    fclose(log);\n}\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    /* Log after computing dev_name */\n    OS_LogAddFixedMapState(\"after basename extraction\", &token, dev_name, phys_path, virt_path, 0);\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        OS_LogAddFixedMapState(\"name too long (memchr check failed)\", &token, dev_name, phys_path, virt_path, OS_ERR_NAME_TOO_LONG);\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    OS_LogAddFixedMapState(\"after OS_ObjectIdAllocateNew\", &token, dev_name, phys_path, virt_path, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /* Log after populating record fields */\n        OS_LogAddFixedMapState(\"after populating filesys record\", &token, dev_name, phys_path, virt_path, return_code);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        OS_LogAddFixedMapState(\"after OS_FileSysStartVolume_Impl\", &token, dev_name, phys_path, virt_path, return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n            OS_LogAddFixedMapState(\"after OS_FileSysMountVolume_Impl\", &token, dev_name, phys_path, virt_path, return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            OS_LogAddFixedMapState(\"marked mounted flags\", &token, dev_name, phys_path, virt_path, return_code);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n        OS_LogAddFixedMapState(\"after OS_ObjectIdFinalizeNew\", &token, dev_name, phys_path, virt_path, return_code);\n    }\n\n    /* Final log before returning */\n    OS_LogAddFixedMapState(\"final return\", &token, dev_name, phys_path, virt_path, return_code);\n\n    return return_code;\n}\n"
}