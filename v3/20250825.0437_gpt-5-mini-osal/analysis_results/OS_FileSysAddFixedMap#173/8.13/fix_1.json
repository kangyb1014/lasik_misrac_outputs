{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_LogAddFixedMapState(const char *label, const void *token_addr, const char *dev_name, const char *phys_path, const char *virt_path, int32_t return_code)\n{\n    FILE *log = fopen(\"/tmp/logs/1733.txt\", \"a\");\n    if (log == NULL)\n    {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    fprintf(log, \"[OS_FileSysAddFixedMap] %s\\n\", label);\n    fprintf(log, \"  return_code: %d\\n\", (int)return_code);\n\n    /* Print pointer values as integer to avoid casting away const qualifier */\n    fprintf(log, \"  token_addr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)token_addr);\n    fprintf(log, \"  dev_name ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)dev_name);\n    fprintf(log, \"  phys_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)phys_path);\n    fprintf(log, \"  virt_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)virt_path);\n\n    if (dev_name != NULL)\n    {\n        fprintf(log, \"  dev_name: '%s'\\n\", dev_name);\n        fprintf(log, \"  dev_name_len: %zu\\n\", strlen(dev_name));\n    }\n    if (phys_path != NULL)\n    {\n        fprintf(log, \"  phys_path: '%s'\\n\", phys_path);\n        fprintf(log, \"  phys_path_len: %zu\\n\", strlen(phys_path));\n    }\n    if (virt_path != NULL)\n    {\n        fprintf(log, \"  virt_path: '%s'\\n\", virt_path);\n        fprintf(log, \"  virt_path_len: %zu\\n\", strlen(virt_path));\n    }\n\n    fprintf(log, \"---\\n\");\n    fclose(log);\n}\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    /* Log after computing dev_name */\n    OS_LogAddFixedMapState(\"after basename extraction\", &token, dev_name, phys_path, virt_path, 0);\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        OS_LogAddFixedMapState(\"name too long (memchr check failed)\", &token, dev_name, phys_path, virt_path, OS_ERR_NAME_TOO_LONG);\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    OS_LogAddFixedMapState(\"after OS_ObjectIdAllocateNew\", &token, dev_name, phys_path, virt_path, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /* Log after populating record fields */\n        OS_LogAddFixedMapState(\"after populating filesys record\", &token, dev_name, phys_path, virt_path, return_code);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        OS_LogAddFixedMapState(\"after OS_FileSysStartVolume_Impl\", &token, dev_name, phys_path, virt_path, return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n            OS_LogAddFixedMapState(\"after OS_FileSysMountVolume_Impl\", &token, dev_name, phys_path, virt_path, return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            OS_LogAddFixedMapState(\"marked mounted flags\", &token, dev_name, phys_path, virt_path, return_code);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n        OS_LogAddFixedMapState(\"after OS_ObjectIdFinalizeNew\", &token, dev_name, phys_path, virt_path, return_code);\n    }\n\n    /* Final log before returning */\n    OS_LogAddFixedMapState(\"final return\", &token, dev_name, phys_path, virt_path, return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:1:\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c: In function 'OS_LogAddFixedMapState':\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:264:38: error: expected ')' before 'PRIxPTR'\n  264 |     fprintf(log, \"  token_addr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)token_addr);\n      |                                      ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:53:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   52 | #include \"os-shared-common.h\"\n  +++ |+#include <inttypes.h>\n   53 | \nIn file included from /tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:1:\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:264:5: note: in expansion of macro 'fprintf'\n  264 |     fprintf(log, \"  token_addr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)token_addr);\n      |     ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:265:40: error: expected ')' before 'PRIxPTR'\n  265 |     fprintf(log, \"  dev_name ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)dev_name);\n      |                                        ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:265:40: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  265 |     fprintf(log, \"  dev_name ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)dev_name);\n      |                                        ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:265:5: note: in expansion of macro 'fprintf'\n  265 |     fprintf(log, \"  dev_name ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)dev_name);\n      |     ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:266:41: error: expected ')' before 'PRIxPTR'\n  266 |     fprintf(log, \"  phys_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)phys_path);\n      |                                         ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:266:41: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  266 |     fprintf(log, \"  phys_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)phys_path);\n      |                                         ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:266:5: note: in expansion of macro 'fprintf'\n  266 |     fprintf(log, \"  phys_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)phys_path);\n      |     ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:267:41: error: expected ')' before 'PRIxPTR'\n  267 |     fprintf(log, \"  virt_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)virt_path);\n      |                                         ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:267:41: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  267 |     fprintf(log, \"  virt_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)virt_path);\n      |                                         ^~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpi5eqptnl/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpi5eqptnl/src/src/os/shared/src/osapi-filesys.c:267:5: note: in expansion of macro 'fprintf'\n  267 |     fprintf(log, \"  virt_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)virt_path);\n      |     ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/__/__/os/shared/src/osapi-filesys.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3663: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include \"os-shared-common.h\"\n#include <inttypes.h>\n\nstatic void OS_LogAddFixedMapState(const char *label, const void *token_addr, const char *dev_name, const char *phys_path, const char *virt_path, int32_t return_code)\n{\n    FILE *log = fopen(\"/tmp/logs/1733.txt\", \"a\");\n    if (log == NULL)\n    {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    fprintf(log, \"[OS_FileSysAddFixedMap] %s\\n\", label);\n    fprintf(log, \"  return_code: %d\\n\", (int)return_code);\n\n    /* Print pointer values as integer to avoid casting away const qualifier */\n    fprintf(log, \"  token_addr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)token_addr);\n    fprintf(log, \"  dev_name ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)dev_name);\n    fprintf(log, \"  phys_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)phys_path);\n    fprintf(log, \"  virt_path ptr: 0x%\" PRIxPTR \"\\n\", (uintptr_t)(const void *)virt_path);\n\n    if (dev_name != NULL)\n    {\n        fprintf(log, \"  dev_name: '%s'\\n\", dev_name);\n        fprintf(log, \"  dev_name_len: %zu\\n\", strlen(dev_name));\n    }\n    if (phys_path != NULL)\n    {\n        fprintf(log, \"  phys_path: '%s'\\n\", phys_path);\n        fprintf(log, \"  phys_path_len: %zu\\n\", strlen(phys_path));\n    }\n    if (virt_path != NULL)\n    {\n        fprintf(log, \"  virt_path: '%s'\\n\", virt_path);\n        fprintf(log, \"  virt_path_len: %zu\\n\", strlen(virt_path));\n    }\n\n    fprintf(log, \"---\\n\");\n    fclose(log);\n}\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    /* Log after computing dev_name */\n    OS_LogAddFixedMapState(\"after basename extraction\", &token, dev_name, phys_path, virt_path, 0);\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        OS_LogAddFixedMapState(\"name too long (memchr check failed)\", &token, dev_name, phys_path, virt_path, OS_ERR_NAME_TOO_LONG);\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    OS_LogAddFixedMapState(\"after OS_ObjectIdAllocateNew\", &token, dev_name, phys_path, virt_path, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /* Log after populating record fields */\n        OS_LogAddFixedMapState(\"after populating filesys record\", &token, dev_name, phys_path, virt_path, return_code);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        OS_LogAddFixedMapState(\"after OS_FileSysStartVolume_Impl\", &token, dev_name, phys_path, virt_path, return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n            OS_LogAddFixedMapState(\"after OS_FileSysMountVolume_Impl\", &token, dev_name, phys_path, virt_path, return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            OS_LogAddFixedMapState(\"marked mounted flags\", &token, dev_name, phys_path, virt_path, return_code);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n        OS_LogAddFixedMapState(\"after OS_ObjectIdFinalizeNew\", &token, dev_name, phys_path, virt_path, return_code);\n    }\n\n    /* Final log before returning */\n    OS_LogAddFixedMapState(\"final return\", &token, dev_name, phys_path, virt_path, return_code);\n\n    return return_code;\n}\n",
  "explanation": "Added #include <inttypes.h> so the PRIxPTR macro (used in the fprintf format strings) is defined. This resolves the compile errors related to the format token for uintptr_t. No other logic was changed."
}