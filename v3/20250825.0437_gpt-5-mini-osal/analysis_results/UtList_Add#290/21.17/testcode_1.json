{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. memcpy(AllocNode->Node.Data, Data, DataSize) can access beyond object bounds if malloc fails (AllocNode == NULL) or if the caller passes a Data pointer that does not point to at least DataSize bytes. The function does not check the return value of malloc nor validate the source buffer length/NULL, so memcpy may read/write out of bounds (NULL dereference or buffer overrun).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2909.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append logs to /tmp/logs/2909.txt */\nstatic void UtList_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2909.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If log file can't be opened, avoid further actions to not alter program flow */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    UtList_ProbeLog(\"UtList_Add ENTRY: ListHead=%p Data=%p DataSize=%u Tag=%u\",\n                    (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag);\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    UtList_ProbeLog(\"UtList_Add: UtList_GetHead returned TagHead=%p\", (void *)TagHead);\n\n    if (TagHead != NULL)\n    {\n        UtList_ProbeLog(\"UtList_Add: TagHead != NULL, creating new node with Data=%p DataSize=%u\",\n                        Data, (unsigned)DataSize);\n\n        NewNode = UtList_NewNode(Data, DataSize);\n\n        /* Log the result of node allocation before any dereference/assignment */\n        UtList_ProbeLog(\"UtList_Add: UtList_NewNode returned NewNode=%p\", (void *)NewNode);\n\n        /* Preserve original logic: perform the same assignment as in the target code. */\n        UtList_ProbeLog(\"UtList_Add: about to assign NewNode->Tag = %u (this may crash if NewNode is NULL)\",\n                        (unsigned)Tag);\n        NewNode->Tag = Tag;\n\n        UtList_ProbeLog(\"UtList_Add: assigned NewNode->Tag (continuing to insert)\");\n        UtList_Insert_Before(TagHead, NewNode);\n        UtList_ProbeLog(\"UtList_Add: UtList_Insert_Before returned (operation complete)\");\n    }\n    else\n    {\n        UtList_ProbeLog(\"UtList_Add: TagHead is NULL, nothing to add for Tag=%u\", (unsigned)Tag);\n    }\n\n    UtList_ProbeLog(\"UtList_Add EXIT: ListHead=%p Tag=%u\\n\", (void *)ListHead, (unsigned)Tag);\n}\n"
}