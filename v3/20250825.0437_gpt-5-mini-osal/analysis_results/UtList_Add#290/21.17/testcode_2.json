{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nAllocNode is not checked for NULL after malloc. If malloc fails (AllocNode == NULL), the expression &AllocNode[1] dereferences a NULL pointer and the subsequent memcpy(AllocNode->Node.Data, Data, DataSize) will attempt to write through an invalid pointer \u2014 resulting in an access beyond the bounds of the object referenced by the destination pointer parameter of memcpy (violation of MISRA C 2023 Rule 21.17).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2909.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void UtList_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2909.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    UtList_Log(\"ENTER: UtList_Add ListHead=%p Data=%p DataSize=%lu Tag=%lu\",\n               (void *)ListHead, Data, (unsigned long)DataSize, (unsigned long)Tag);\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    UtList_Log(\"TagHead returned: %p\", (void *)TagHead);\n\n    if (TagHead != NULL)\n    {\n        NewNode = UtList_NewNode(Data, DataSize);\n        UtList_Log(\"UtList_NewNode returned: %p (Data=%p DataSize=%lu)\",\n                   (void *)NewNode, Data, (unsigned long)DataSize);\n\n        /* Probe: log the value before the original code dereferences it\n           This lets testers observe a NULL return from UtList_NewNode while\n           preserving the original behavior (the code still assigns NewNode->Tag\n           as in the original implementation). */\n        UtList_Log(\"About to set NewNode->Tag; NewNode=%p Tag=%lu\",\n                   (void *)NewNode, (unsigned long)Tag);\n\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n\n        UtList_Log(\"Inserted NewNode %p before TagHead %p\", (void *)NewNode, (void *)TagHead);\n    }\n    else\n    {\n        UtList_Log(\"No TagHead found for Tag=%lu; no insertion performed\", (unsigned long)Tag);\n    }\n\n    UtList_Log(\"EXIT: UtList_Add ListHead=%p\", (void *)ListHead);\n}\n"
}