{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2546.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) == NULL)\n    {\n        /* Fallback to writing without timestamp */\n        fprintf(f, \"[no-time] pid=%d: \", (int)getpid());\n    }\n    else\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] pid=%d: \",\n                tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n                tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec, (int)getpid());\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Log entry and input state */\n    probe_log(\"Enter OS_TaskDelete: task_id=%llu\", (unsigned long long)task_id);\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    probe_log(\"OS_ObjectIdGetById returned %ld for task_id=%llu; token address=%p\",\n              (long)return_code, (unsigned long long)task_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log the resolved task record and delete hook pointer */\n        probe_log(\"Resolved task record at %p; delete_hook_pointer=%p\",\n                  (void *)task,\n                  (void *)(uintptr_t)delete_hook);\n\n        probe_log(\"Calling OS_TaskDelete_Impl with token=%p\", (void *)&token);\n        return_code = OS_TaskDelete_Impl(&token);\n        probe_log(\"OS_TaskDelete_Impl returned %ld for token=%p\", (long)return_code, (void *)&token);\n\n        /* Complete the operation via the common routine */\n        probe_log(\"Calling OS_ObjectIdFinalizeDelete(return_code=%ld, token=%p)\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        probe_log(\"OS_ObjectIdFinalizeDelete returned %ld for token=%p\", (long)return_code, (void *)&token);\n    }\n    else\n    {\n        probe_log(\"OS_TaskDelete: OS_ObjectIdGetById failed with %ld; skipping delete flow\", (long)return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        probe_log(\"About to call delete_hook=%p for task_id=%llu\", (void *)(uintptr_t)delete_hook, (unsigned long long)task_id);\n\n        /* Call the user-supplied delete hook. This is intentionally performed\n         * after the object-finalize so that the lock state matches original behavior.\n         */\n        delete_hook();\n\n        probe_log(\"Returned from delete_hook=%p for task_id=%llu\", (void *)(uintptr_t)delete_hook, (unsigned long long)task_id);\n    }\n\n    probe_log(\"Exit OS_TaskDelete: return_code=%ld for task_id=%llu\", (long)return_code, (unsigned long long)task_id);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpaxtzs6xm/src/src/os/shared/src/osapi-task.c: In function 'probe_log':\n/tmp/tmpaxtzs6xm/src/src/os/shared/src/osapi-task.c:233:15: error: storage size of 'tm_buf' isn't known\n  233 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpaxtzs6xm/src/src/os/shared/src/osapi-task.c:248:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  248 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-task.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-task.dir/__/__/os/shared/src/osapi-task.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4283: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-task.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n#include <stdint.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2546.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) == NULL)\n    {\n        /* Fallback to writing without timestamp */\n        fprintf(f, \"[no-time] pid=%d: \", (int)getpid());\n    }\n    else\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] pid=%d: \",\n                tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n                tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec, (int)getpid());\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the library's va_list type in case an alternate typedef is used */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Log entry and input state */\n    probe_log(\"Enter OS_TaskDelete: task_id=%llu\", (unsigned long long)task_id);\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    probe_log(\"OS_ObjectIdGetById returned %ld for task_id=%llu; token address=%p\",\n              (long)return_code, (unsigned long long)task_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log the resolved task record and delete hook pointer */\n        probe_log(\"Resolved task record at %p; delete_hook_pointer=%p\",\n                  (void *)task,\n                  (void *)(uintptr_t)delete_hook);\n\n        probe_log(\"Calling OS_TaskDelete_Impl with token=%p\", (void *)&token);\n        return_code = OS_TaskDelete_Impl(&token);\n        probe_log(\"OS_TaskDelete_Impl returned %ld for token=%p\", (long)return_code, (void *)&token);\n\n        /* Complete the operation via the common routine */\n        probe_log(\"Calling OS_ObjectIdFinalizeDelete(return_code=%ld, token=%p)\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        probe_log(\"OS_ObjectIdFinalizeDelete returned %ld for token=%p\", (long)return_code, (void *)&token);\n    }\n    else\n    {\n        probe_log(\"OS_TaskDelete: OS_ObjectIdGetById failed with %ld; skipping delete flow\", (long)return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        probe_log(\"About to call delete_hook=%p for task_id=%llu\", (void *)(uintptr_t)delete_hook, (unsigned long long)task_id);\n\n        /* Call the user-supplied delete hook. This is intentionally performed\n         * after the object-finalize so that the lock state matches original behavior.\n         */\n        delete_hook();\n\n        probe_log(\"Returned from delete_hook=%p for task_id=%llu\", (void *)(uintptr_t)delete_hook, (unsigned long long)task_id);\n    }\n\n    probe_log(\"Exit OS_TaskDelete: return_code=%ld for task_id=%llu\", (long)return_code, (unsigned long long)task_id);\n\n    return return_code;\n}\n",
  "explanation": "I added the standard headers (<stdio.h>, <stdarg.h>, <time.h>, <unistd.h>, <stdint.h>) so struct tm, va_list, getpid, and related symbols are properly defined. To fix the va_list type mismatch reported by the compiler in this build environment, I cast the variadic argument when calling vfprintf: vfprintf(f, fmt, (va_list)ap); \u2014 this preserves the original logic while avoiding an ABI/type mismatch between possibly wrapped va_list types used by the test harness. No logic of OS_TaskDelete was changed."
}