{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskDelete_Impl the local variable 'impl' is declared as a non-const pointer (OS_impl_task_internal_record_t *impl) but is only used for read-only access (impl->id used with pthread_cancel/pthread_join). Therefore the pointer could and should be declared to point to a const-qualified type (const OS_impl_task_internal_record_t *impl). As written this fails to qualify the pointer as const when possible, violating MISRA C 2023 Rule 8.13. A minimal fix is to change the declaration to 'const OS_impl_task_internal_record_t *impl;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function: append a line to /tmp/logs/2543.txt */\nstatic void OS_TaskDelete_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2543.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fputs(\"\\n\", f);\n        fclose(f);\n    }\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    OS_TaskDelete_Log(\"OS_TaskDelete ENTRY: task_id=%ld\", (long)task_id);\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_TaskDelete_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log task pointer and whether delete hook is present (do not convert function pointer to data pointer) */\n        OS_TaskDelete_Log(\"token addr=%p, task ptr=%p, delete_hook_present=%s\", (void *)&token, (void *)task,\n                          (task->delete_hook_pointer != NULL) ? \"yes\" : \"no\");\n\n        OS_TaskDelete_Log(\"Calling OS_TaskDelete_Impl with token addr=%p\", (void *)&token);\n        return_code = OS_TaskDelete_Impl(&token);\n        OS_TaskDelete_Log(\"OS_TaskDelete_Impl returned %ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_TaskDelete_Log(\"OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        OS_TaskDelete_Log(\"About to invoke delete_hook\");\n        delete_hook();\n        OS_TaskDelete_Log(\"delete_hook returned\");\n    }\n\n    OS_TaskDelete_Log(\"OS_TaskDelete EXIT return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}