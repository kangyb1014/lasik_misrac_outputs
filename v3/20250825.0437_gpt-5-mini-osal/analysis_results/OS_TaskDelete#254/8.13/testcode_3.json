{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskDelete_Impl the local pointer is declared as a non-const pointer: \"OS_impl_task_internal_record_t *impl;\". The code only reads fields from the pointed object (impl->id) and does not modify the object via this pointer, so the pointer could and should be declared to point to a const-qualified type (const OS_impl_task_internal_record_t *impl). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Probe/logging helpers. These preserve original logic and only append\n * observational logs to /tmp/logs/2543.txt so other agents can reproduce\n * and gather evidence for the reported pointer-const scenario.\n *\n * The helpers use const qualifiers for pointer parameters where possible\n * to avoid introducing pointer-related violations.\n */\nstatic const char *OS_TASKDELETE_LOG_PATH = \"/tmp/logs/2543.txt\";\n\nstatic void OS_TaskDelete_EnsureLogDir(void)\n{\n    /* Create directory if it doesn't exist. Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", (mode_t)0777);\n}\n\nstatic void OS_TaskDelete_LogPrintf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp;\n\n    OS_TaskDelete_EnsureLogDir();\n    fp = fopen(OS_TASKDELETE_LOG_PATH, \"a\");\n    if (fp == NULL)\n    {\n        /* Best-effort logging only; do not alter program control flow on failure */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Initial log: entry and task id */\n    OS_TaskDelete_LogPrintf(\"OS_TaskDelete: ENTRY task_id=%"
}