{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a local token object to OS_CondVarUnlock_Impl(&token). If the implementation of OS_CondVarUnlock_Impl takes a parameter of type OS_object_token_t * (non-const) but does not modify the token, then the pointer parameter should be const-qualified (e.g. const OS_object_token_t *). In that case Rule 8.13 is violated. If, however, OS_CondVarUnlock_Impl legitimately modifies the token, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarUnlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarUnlock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarUnlock:\n```c\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarUnlock_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarUnlock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <time.h>\n\n/*\n * Probes and logging for OS_CondVarUnlock to capture control flow and\n * state for the potential MISRA Rule 8.13 violation scenario.\n * Logs are appended to /tmp/logs/1403.txt\n */\nstatic void os_condvar_log_timestamped(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    /* Fallback if localtime_r unavailable */\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n        else\n        {\n            memset(&tm_buf, 0, sizeof(tm_buf));\n        }\n    }\n#endif\n\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s: %s\\n\", timestr, msg);\n    fclose(f);\n}\n\nstatic void os_condvar_log_hex(const void *data, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)data;\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    for (size_t i = 0; i < len; ++i)\n    {\n        if ((i % 16) == 0)\n        {\n            fprintf(f, \"\\n  %04zx: \", i);\n        }\n        fprintf(f, \"%02x \", p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * The target function with inserted probes. The original logic is preserved.\n */\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry log */\n    {\n        char buf[256];\n        /* Use unsigned long long cast in case osal_id_t is not an integer type of known printf length */\n        (void)snprintf(buf, sizeof(buf), \"ENTER OS_CondVarUnlock(var_id=%llu)\", (unsigned long long) var_id);\n        os_condvar_log_timestamped(buf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and token state if successful */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"OS_ObjectIdGetById returned %d\", (int)return_code);\n        os_condvar_log_timestamped(buf);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Dump token bytes as retrieved */\n            os_condvar_log_timestamped(\"Token state after OS_ObjectIdGetById:\");\n            os_condvar_log_hex(&token, sizeof(token));\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Keep a copy to detect any modification by the implementation */\n        unsigned char before_state[sizeof(token)];\n        unsigned char after_state[sizeof(token)];\n\n        memcpy(before_state, &token, sizeof(token));\n\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"Calling OS_CondVarUnlock_Impl(&token=%p)\", (void *)&token);\n            os_condvar_log_timestamped(buf);\n            os_condvar_log_timestamped(\"Token state BEFORE OS_CondVarUnlock_Impl:\");\n            os_condvar_log_hex(before_state, sizeof(before_state));\n        }\n\n        /* Call the implementation (preserve original behavior) */\n        return_code = OS_CondVarUnlock_Impl(&token);\n\n        /* Log return from implementation and compare token state */\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"OS_CondVarUnlock_Impl returned %d\", (int)return_code);\n            os_condvar_log_timestamped(buf);\n\n            memcpy(after_state, &token, sizeof(token));\n\n            /* Determine if token was modified */\n            int modified = (memcmp(before_state, after_state, sizeof(token)) != 0);\n            (void)snprintf(buf, sizeof(buf), \"Token modified by OS_CondVarUnlock_Impl: %s\", modified ? \"YES\" : \"NO\");\n            os_condvar_log_timestamped(buf);\n\n            if (modified)\n            {\n                os_condvar_log_timestamped(\"Token state AFTER OS_CondVarUnlock_Impl:\");\n                os_condvar_log_hex(after_state, sizeof(after_state));\n\n                /* Optionally, log the byte-level differences */\n                FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n                if (f != NULL)\n                {\n                    fprintf(f, \"Byte-level differences (index: before -> after):\\n\");\n                    for (size_t i = 0; i < sizeof(token); ++i)\n                    {\n                        if (before_state[i] != after_state[i])\n                        {\n                            fprintf(f, \"  %04zx: %02x -> %02x\\n\", i, before_state[i], after_state[i]);\n                        }\n                    }\n                    fclose(f);\n                }\n            }\n        }\n    }\n\n    /* Exit log */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"EXIT OS_CondVarUnlock returning %d\", (int)return_code);\n        os_condvar_log_timestamped(buf);\n    }\n\n    return return_code;\n}\n"
}