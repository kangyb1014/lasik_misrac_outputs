{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can dereference pointers that are neither validated nor guaranteed to point to NUL-terminated strings. For example, if UT_Stub_RegisterReturnType was previously called with TypeName == NULL (or with a pointer to a non-NUL-terminated buffer), then StubPtr->Data.Buff.ContentTypeStr may be NULL or not NUL-terminated. Later UT_Stub_GetReturnValuePtr calls strcmp without checking either pointer, causing strcmp to read beyond the bounds of the referenced object (or dereference a NULL), violating the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarUnlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1409.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarUnlock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarUnlock:\n```c\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarUnlock_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarUnlock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n\n/* Minimal type aliases to allow this file to compile standalone while\n   preserving the original function logic as much as possible. These are\n   intentionally simple placeholders and should match the real definitions\n   in the full code base when integrated. */\n\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\n\n/* Minimal opaque token type - do not dereference in probes to avoid\n   introducing new safety issues. */\ntypedef struct\n{\n    void *reserved;\n} OS_object_token_t;\n\n/* Constants as const variables (no macros per constraints) */\nconst int32 OS_SUCCESS = 0;\nconst int32 OS_LOCK_MODE_NONE = 0;\nconst int32 OS_OBJECT_TYPE_OS_CONDVAR = 0;\n\n/* External functions from the system under test. The real definitions\n   exist elsewhere. */\nextern int32 OS_ObjectIdGetById(int lock_mode, int object_type, osal_id_t id, OS_object_token_t *token);\nextern int32 OS_CondVarUnlock_Impl(const OS_object_token_t *token);\n\n/* Logging helper that appends to the required log file. Opens and closes\n   the file on each call to keep the probe simple and robust. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1409.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log file cannot be opened, fail silently to avoid\n           changing program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* The original function with lightweight probes inserted. The logic and\n   flow are preserved; only non-intrusive logging calls have been added. */\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Probe: entry and input parameter */\n    probe_log(\"OS_CondVarUnlock: enter, var_id=0x%08\" PRIx32, (uint32_t)var_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Probe: result of ObjectIdGetById and token address (do not dereference token) */\n    probe_log(\"OS_CondVarUnlock: OS_ObjectIdGetById returned %d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Probe: about to call Impl */\n        probe_log(\"OS_CondVarUnlock: calling OS_CondVarUnlock_Impl with token_addr=%p\", (void *)&token);\n\n        return_code = OS_CondVarUnlock_Impl(&token);\n\n        /* Probe: result of Impl */\n        probe_log(\"OS_CondVarUnlock: OS_CondVarUnlock_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"OS_CondVarUnlock: skipping Impl due to previous error %d\", (int)return_code);\n    }\n\n    /* Probe: exit and return value */\n    probe_log(\"OS_CondVarUnlock: exit, return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}