{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nconst int32 OS_SUCCESS = 0;\nconst int32 OS_LOCK_MODE_NONE = 0;\nconst int32 OS_OBJECT_TYPE_OS_CONDVAR = 0;\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1409.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log file cannot be opened, fail silently to avoid\n           changing program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Probe: entry and input parameter */\n    probe_log(\"OS_CondVarUnlock: enter, var_id=0x%08\" PRIx32, (uint32_t)var_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Probe: result of ObjectIdGetById and token address (do not dereference token) */\n    probe_log(\"OS_CondVarUnlock: OS_ObjectIdGetById returned %d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Probe: about to call Impl */\n        probe_log(\"OS_CondVarUnlock: calling OS_CondVarUnlock_Impl with token_addr=%p\", (void *)&token);\n\n        return_code = OS_CondVarUnlock_Impl(&token);\n\n        /* Probe: result of Impl */\n        probe_log(\"OS_CondVarUnlock: OS_CondVarUnlock_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"OS_CondVarUnlock: skipping Impl due to previous error %d\", (int)return_code);\n    }\n\n    /* Probe: exit and return value */\n    probe_log(\"OS_CondVarUnlock: exit, return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmp3rmdzm5e/src/src/os/shared/inc/os-shared-globaldefs.h:36,\n                 from /tmp/tmp3rmdzm5e/src/src/os/shared/inc/os-shared-idmap.h:30,\n                 from /tmp/tmp3rmdzm5e/src/src/os/shared/src/osapi-condvar.c:48:\n/tmp/tmp3rmdzm5e/src/src/os/inc/osapi-error.h:96:41: error: expected identifier or '(' before numeric constant\n   96 | #define OS_SUCCESS                     (0)   /**< @brief Successful execution */\n      |                                         ^\n/tmp/tmp3rmdzm5e/src/src/os/shared/src/osapi-condvar.c:167:13: note: in expansion of macro 'OS_SUCCESS'\n  167 | const int32 OS_SUCCESS = 0;\n      |             ^~~~~~~~~~\n/tmp/tmp3rmdzm5e/src/src/os/shared/src/osapi-condvar.c:168:13: error: 'OS_LOCK_MODE_NONE' redeclared as different kind of symbol\n  168 | const int32 OS_LOCK_MODE_NONE = 0;\n      |             ^~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmp3rmdzm5e/src/src/os/shared/src/osapi-condvar.c:48:\n/tmp/tmp3rmdzm5e/src/src/os/shared/inc/os-shared-idmap.h:68:5: note: previous definition of 'OS_LOCK_MODE_NONE' with type 'enum <anonymous>'\n   68 |     OS_LOCK_MODE_NONE,      /**< Quick ID validity check, does not lock global table at all (use with caution) */\n      |     ^~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmp3rmdzm5e/src/src/os/shared/inc/os-shared-idmap.h:29,\n                 from /tmp/tmp3rmdzm5e/src/src/os/shared/src/osapi-condvar.c:48:\n/tmp/tmp3rmdzm5e/src/src/os/inc/osapi-idmap.h:51:36: error: expected identifier or '(' before numeric constant\n   51 | #define OS_OBJECT_TYPE_OS_CONDVAR  0x0D /**< @brief Object condition variable type */\n      |                                    ^~~~\n/tmp/tmp3rmdzm5e/src/src/os/shared/src/osapi-condvar.c:169:13: note: in expansion of macro 'OS_OBJECT_TYPE_OS_CONDVAR'\n  169 | const int32 OS_OBJECT_TYPE_OS_CONDVAR = 0;\n      |             ^~~~~~~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:118: CMakeFiles/osal.dir/src/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarUnlock as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Minimal type definitions to allow this file to compile standalone\n   (the real project defines these in its headers). */\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef uint32_t osal_id_t;\n\n/* Minimal token type */\ntypedef struct\n{\n    int dummy;\n} OS_object_token_t;\n\n/* External functions provided by the rest of the system (not defined here). */\nint32 OS_ObjectIdGetById(int lock_mode, int object_type, osal_id_t id, OS_object_token_t *token);\nint32 OS_CondVarUnlock_Impl(OS_object_token_t *token);\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1409.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log file cannot be opened, fail silently to avoid\n           changing program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Probe: entry and input parameter */\n    probe_log(\"OS_CondVarUnlock: enter, var_id=0x%08\" PRIx32, (uint32_t)var_id);\n\n    /* Check Parameters - use explicit literal values rather than redefining project macros */\n    /* OS_LOCK_MODE_NONE == 0, OS_OBJECT_TYPE_OS_CONDVAR == 0x0D in the real headers */\n    return_code = OS_ObjectIdGetById(0 /* lock mode none */, 0x0D /* condvar type */, var_id, &token);\n\n    /* Probe: result of ObjectIdGetById and token address (do not dereference token) */\n    probe_log(\"OS_CondVarUnlock: OS_ObjectIdGetById returned %d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == 0)\n    {\n        /* Probe: about to call Impl */\n        probe_log(\"OS_CondVarUnlock: calling OS_CondVarUnlock_Impl with token_addr=%p\", (void *)&token);\n\n        return_code = OS_CondVarUnlock_Impl(&token);\n\n        /* Probe: result of Impl */\n        probe_log(\"OS_CondVarUnlock: OS_CondVarUnlock_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"OS_CondVarUnlock: skipping Impl due to previous error %d\", (int)return_code);\n    }\n\n    /* Probe: exit and return value */\n    probe_log(\"OS_CondVarUnlock: exit, return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "The compile errors were caused by redefinitions of symbols (OS_SUCCESS, OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR) that are defined in the project's headers. I removed those conflicting const definitions and instead used the literal values where needed (0 for lock mode none and 0x0D for the condvar object type per the project's header). I also added minimal type typedefs and function prototypes so this file compiles standalone (without defining any mock functions or macros) while preserving the original OS_CondVarUnlock logic and probe logging."
}