{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'module' is declared as OS_module_internal_record_t *module but is only used for read access (module->file_name). According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible (e.g. const OS_module_internal_record_t *module), or the file_name member could be const char[]. As written, the code takes a non-const source array (module->file_name) and decays it to a const char* parameter of strncpy, but the underlying pointer to the module record is not const-qualified even though it could be. Change the declaration to: const OS_module_internal_record_t *module; to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append log entries describing control flow and state to a file. */\nstatic void OS_ModuleInfo_LogState(const char *stage,\n                                  unsigned long module_id_val,\n                                  void *record_ptr,\n                                  void *module_ptr,\n                                  int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Safe snapshots of possibly non-null-terminated strings. */\n    char name_buf[256];\n    char file_buf[256];\n\n    name_buf[0] = '\\0';\n    file_buf[0] = '\\0';\n\n    if (record_ptr != NULL)\n    {\n        /* Assume record has member name_entry at same layout used below. */\n        const char *name_entry = *((const char * *)((char *)record_ptr + 0));\n        if (name_entry != NULL)\n        {\n            strncpy(name_buf, name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n        }\n    }\n\n    if (module_ptr != NULL)\n    {\n        /* Assume module has member file_name at same layout used below. */\n        const char *file_name = *((const char * *)((char *)module_ptr + sizeof(void *)));\n        if (file_name != NULL)\n        {\n            strncpy(file_buf, file_name, sizeof(file_buf) - 1);\n            file_buf[sizeof(file_buf) - 1] = '\\0';\n        }\n    }\n\n    fprintf(f, \"OS_ModuleInfo log - Stage: %s\\n\", stage);\n    fprintf(f, \"  module_id: %lu\\n\", module_id_val);\n    fprintf(f, \"  return_code (snapshot): %ld\\n\", (long)return_code);\n    fprintf(f, \"  record_ptr: %p  record->name_entry (snapshot): '%s'\\n\", record_ptr, name_buf);\n    fprintf(f, \"  module_ptr: %p  module->file_name (snapshot): '%s'\\n\", module_ptr, file_buf);\n    fprintf(f, \"------------------------------------------------------------\\n\");\n\n    fclose(f);\n}\n\n/* Modified OS_ModuleInfo with probes inserted. Original logic preserved. */\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module; /* Intentionally non-const to reproduce reported scenario */\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    /* Log entry with initial inputs */\n    OS_ModuleInfo_LogState(\"entry\", (unsigned long)module_id, NULL, NULL, 0);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_ModuleInfo_LogState(\"after_ObjectIdGetById\", (unsigned long)module_id, NULL, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log pointers and their string contents before copying into module_prop */\n        OS_ModuleInfo_LogState(\"before_strncpy\", (unsigned long)module_id, record, module, return_code);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log contents copied into module_prop for verification */\n        OS_ModuleInfo_LogState(\"after_strncpy\", (unsigned long)module_id, record, module, return_code);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log after calling implementation-specific getter */\n        OS_ModuleInfo_LogState(\"after_Impl\", (unsigned long)module_id, record, module, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release */\n        OS_ModuleInfo_LogState(\"after_Release\", (unsigned long)module_id, record, module, return_code);\n    }\n\n    return return_code;\n}\n"
}