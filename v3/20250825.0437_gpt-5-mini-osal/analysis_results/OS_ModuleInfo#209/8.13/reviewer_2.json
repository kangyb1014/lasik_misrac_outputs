{
  "user_message": "An agent A claimed that the following OS_ModuleInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleInfo.\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe declaration is a const pointer to a non-const object: 'extern OS_common_record_t *const OS_global_module_table'. Rule 8.13 requires pointers to point to const-qualified types whenever possible, so the pointed-to type should be const if the table is intended to be read-only. Example fix: 'extern const OS_common_record_t *const OS_global_module_table;'. If the records are intentionally mutable (code must modify the pointed-to records), then making them const would be incorrect and no violation occurs; otherwise this declaration violates the rule.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleInfo:\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char             module_name[OS_MAX_API_NAME];\n    char             file_name[OS_MAX_PATH_LEN];\n    OS_module_type_t module_type;\n    uint32           flags;\n    cpuaddr          entry_point;\n} OS_module_internal_record_t\n...\ntypedef struct\n{\n    cpuaddr             entry_point;\n    cpuaddr             host_module_id;\n    char                filename[OS_MAX_PATH_LEN];\n    char                name[OS_MAX_API_NAME];\n    OS_module_address_t addr;\n} OS_module_prop_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_module_table\n...\nOS_module_internal_record_t OS_module_table[OS_MAX_MODULES]\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is correct in principle. The symbol is declared as a const pointer to a non-const type (extern OS_common_record_t *const OS_global_module_table). MISRA C 2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever possible, i.e. if the pointed-to objects are not modified by the program they should be declared const. In the shown function OS_ModuleInfo the records obtained from OS_global_module_table are only read (record->name_entry is read and copied); if this is representative of the whole program and the records are not modified anywhere else, then the declaration should be changed to point to a const-qualified type (for example: extern const OS_common_record_t *const OS_global_module_table) and any local pointer variables (e.g. record) changed to const OS_common_record_t * to satisfy Rule 8.13.\n\nHowever, whether this is an actual MISRA violation depends on the wider code base: if the records are intentionally mutable and are legitimately written to elsewhere, making them const would be incorrect and there is no violation. Therefore the agent's report is correct as a likely violation that must be confirmed by auditing all places that write to the table; if no writes exist, it is a Rule 8.13 violation and should be fixed as above."
}