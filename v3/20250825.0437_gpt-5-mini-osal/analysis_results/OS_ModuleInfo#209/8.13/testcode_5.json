{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses record (declared as OS_common_record_t *record) to access record->name_entry, which is a non-const character array/pointer in the global module table. The field is only read (copied with strncpy) and neither the record nor its name_entry are modified here, so the pointer should be to a const-qualified type (e.g. const OS_common_record_t *record or make name_entry const). Thus Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Helper logging function that appends to the investigation log file. */\nstatic void os_moduleinfo_log_printf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    os_moduleinfo_log_printf(\"OS_ModuleInfo ENTRY: module_id=%ld, module_prop=%p\", (long)module_id, (void *)module_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    os_moduleinfo_log_printf(\"OS_ObjectIdGetById returned: %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        os_moduleinfo_log_printf(\"Token info: token=%p\", (void *)&token);\n        os_moduleinfo_log_printf(\"Record pointer: %p, Module pointer: %p\", (void *)record, (void *)module);\n\n        if (record != NULL)\n        {\n            /* Safely capture what will be copied from record->name_entry for logging. */\n            char src_name[sizeof(module_prop->name)];\n            src_name[0] = '\\0';\n            /* Use strncpy to mirror the original code behavior while keeping a terminator. */\n            strncpy(src_name, record->name_entry, sizeof(src_name) - 1);\n            src_name[sizeof(src_name) - 1] = '\\0';\n\n            os_moduleinfo_log_printf(\"record->name_entry (first %zu bytes as string)='%s'\", sizeof(src_name) - 1, src_name);\n        }\n        else\n        {\n            os_moduleinfo_log_printf(\"record is NULL\");\n        }\n\n        if (module != NULL)\n        {\n            char src_file[sizeof(module_prop->filename)];\n            src_file[0] = '\\0';\n            strncpy(src_file, module->file_name, sizeof(src_file) - 1);\n            src_file[sizeof(src_file) - 1] = '\\0';\n\n            os_moduleinfo_log_printf(\"module->file_name (first %zu bytes as string)='%s'\", sizeof(src_file) - 1, src_file);\n        }\n        else\n        {\n            os_moduleinfo_log_printf(\"module is NULL\");\n        }\n\n        os_moduleinfo_log_printf(\"About to copy name: dest_size=%zu\", sizeof(module_prop->name) - 1);\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        /* Ensure null-termination (original code zeroed module_prop earlier, but be explicit for logs) */\n        module_prop->name[sizeof(module_prop->name) - 1] = '\\0';\n        os_moduleinfo_log_printf(\"Copied module_prop->name='%s'\", module_prop->name);\n\n        os_moduleinfo_log_printf(\"About to copy filename: dest_size=%zu\", sizeof(module_prop->filename) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n        module_prop->filename[sizeof(module_prop->filename) - 1] = '\\0';\n        os_moduleinfo_log_printf(\"Copied module_prop->filename='%s'\", module_prop->filename);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n        os_moduleinfo_log_printf(\"OS_ModuleGetInfo_Impl returned: %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        os_moduleinfo_log_printf(\"Token released, returning %ld\", (long)return_code);\n    }\n    else\n    {\n        os_moduleinfo_log_printf(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    return return_code;\n}\n"
}