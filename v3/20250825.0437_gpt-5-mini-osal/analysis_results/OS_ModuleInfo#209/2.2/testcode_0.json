{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_ModuleGetInfo_Impl(&token, module_prop) is dead. The implementation always returns OS_SUCCESS and performs no modifications to module_prop or the token (it is a stub: it simply returns OS_SUCCESS). Removing the call and instead setting return_code = OS_SUCCESS would not change program behavior (OS_ObjectIdRelease(&token) and the prior strncpy() calls are the only effects). Therefore the operation is executed but its removal would not affect program behaviour, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2092.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Small helper to avoid printing NULL pointers directly */\nstatic const char *probe_safe_str(const char *s)\n{\n    return (s != NULL) ? s : \"<null>\";\n}\n\n/* Append a formatted log line to the probe log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2092.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not change program behavior */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry with parameters */\n    probe_log(\"OS_ModuleInfo ENTRY: module_id=%ld, module_prop=%p\", (long)module_id, (void *)module_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n    probe_log(\"OS_ModuleInfo: module_prop zeroed (first bytes: %02x %02x %02x)\",\n              ((unsigned char *)module_prop)[0], ((unsigned char *)module_prop)[1], ((unsigned char *)module_prop)[2]);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    probe_log(\"OS_ObjectIdGetById returned %d; token address=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        probe_log(\"OS_ModuleInfo: record->name_entry='%s', module->file_name='%s'\",\n                  probe_safe_str(record ? record->name_entry : NULL), probe_safe_str(module ? module->file_name : NULL));\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        probe_log(\"OS_ModuleInfo: after strncpy: module_prop->name='%s', module_prop->filename='%s'\",\n                  probe_safe_str(module_prop->name), probe_safe_str(module_prop->filename));\n\n        probe_log(\"OS_ModuleInfo: calling OS_ModuleGetInfo_Impl with token address=%p\", (void *)&token);\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n        probe_log(\"OS_ModuleGetInfo_Impl returned %d\", (int)return_code);\n\n        probe_log(\"OS_ModuleInfo: after OS_ModuleGetInfo_Impl: module_prop->name='%s', module_prop->filename='%s'\",\n                  probe_safe_str(module_prop->name), probe_safe_str(module_prop->filename));\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"OS_ModuleInfo: OS_ObjectIdRelease called for token address=%p\", (void *)&token);\n    }\n    else\n    {\n        probe_log(\"OS_ModuleInfo: OS_ObjectIdGetById failed with code %d, skipping module lookup\", (int)return_code);\n    }\n\n    probe_log(\"OS_ModuleInfo EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}