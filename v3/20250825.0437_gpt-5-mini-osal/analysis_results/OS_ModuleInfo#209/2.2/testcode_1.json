{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ModuleGetInfo_Impl is a no-op stub: it does not use its parameters, has no side effects, and simply returns the constant OS_SUCCESS. The call OS_ModuleGetInfo_Impl(&token, module_prop) in OS_ModuleInfo therefore executes but does nothing that affects program behaviour (removing the call or replacing it with return_code = OS_SUCCESS would not change behaviour). This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2092.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\nstatic void OS_ModuleInfo_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2092.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n                tm.tm_hour, tm.tm_min, tm.tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    OS_ModuleInfo_Log(\"Enter OS_ModuleInfo: module_id=%lu, module_prop=%p\",\n                      (unsigned long)module_id, (void *)module_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    OS_ModuleInfo_Log(\"After memset: module_prop=%p, first_bytes=%.16s\",\n                      (void *)module_prop,\n                      (char *)module_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleInfo_Log(\"OS_ObjectIdGetById returned %ld, token=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        OS_ModuleInfo_Log(\"Record pointer=%p, Module pointer=%p\", (void *)record, (void *)module);\n\n        if (record != NULL)\n        {\n            /* record->name_entry is used below in original code; log it if available */\n            OS_ModuleInfo_Log(\"record->name_entry=%.256s\", (char *)record->name_entry);\n        }\n        else\n        {\n            OS_ModuleInfo_Log(\"record is NULL\");\n        }\n\n        if (module != NULL)\n        {\n            /* module->file_name is used below in original code; log it if available */\n            OS_ModuleInfo_Log(\"module->file_name=%.256s\", (char *)module->file_name);\n        }\n        else\n        {\n            OS_ModuleInfo_Log(\"module is NULL\");\n        }\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        OS_ModuleInfo_Log(\"Copied to module_prop: name=%.256s, filename=%.256s\",\n                          module_prop->name, module_prop->filename);\n\n        OS_ModuleInfo_Log(\"About to call OS_ModuleGetInfo_Impl with token=%p, module_prop=%p\",\n                          (void *)&token, (void *)module_prop);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ModuleInfo_Log(\"OS_ModuleGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_ModuleInfo_Log(\"OS_ObjectIdRelease called for token=%p\", (void *)&token);\n    }\n\n    OS_ModuleInfo_Log(\"Exit OS_ModuleInfo: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}