{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe if (status < 0) branch is unreachable. pthread_mutex_lock() returns 0 on success or a positive errno value on failure (POSIX returns non\u2011negative values), so status < 0 can never be true. The BSP_DEBUG() path will never execute, violating MISRA C 2023 Rule 2.1. (The correct check should be status != 0 to detect errors; as written the else branch will also run on failure.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3241.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddCommon code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper: append succinct state and control-flow info to a log file. */\nstatic void UtTest_ProbeLog(const char *stage, const char *TestName, const void *TestPtr,\n                            const void *SetupPtr, const void *TeardownPtr, unsigned EntryType)\n{\n    FILE *fp = fopen(\"/tmp/logs/3241.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"Stage=%s TestName=%s Test=%p Setup=%p Teardown=%p EntryType=%u\\n\",\n                stage, (TestName != NULL) ? TestName : \"(null)\", TestPtr, SetupPtr, TeardownPtr, EntryType);\n        fclose(fp);\n    }\n}\n\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    /* Log initial entry with incoming pointers and name */\n    UtTest_ProbeLog(\"entry\", TestName, (const void *)Test, (const void *)Setup, (const void *)Teardown, (unsigned)EntryType);\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    /* Record that we are about to attempt the BSP lock */\n    UtTest_ProbeLog(\"before_lock\", TestName, (const void *)Test, (const void *)Setup, (const void *)Teardown, (unsigned)EntryType);\n    UT_BSP_Lock();\n    /* Record that lock was (apparently) acquired and we will add to the list */\n    UtTest_ProbeLog(\"after_lock\", TestName, (const void *)Test, (const void *)Setup, (const void *)Teardown, (unsigned)EntryType);\n\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n\n    /* Record that the add operation was performed */\n    UtTest_ProbeLog(\"after_add\", TestName, (const void *)Test, (const void *)Setup, (const void *)Teardown, (unsigned)EntryType);\n\n    UT_BSP_Unlock();\n    /* Final state after unlock */\n    UtTest_ProbeLog(\"after_unlock\", TestName, (const void *)Test, (const void *)Setup, (const void *)Teardown, (unsigned)EntryType);\n}\n"
}