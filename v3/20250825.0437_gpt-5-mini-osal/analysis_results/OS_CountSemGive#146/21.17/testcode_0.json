{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_ObjectIdTransactionInit calls memset(token, 0, sizeof(*token)) without validating that token is non-NULL or that it points to a buffer at least sizeof(OS_object_token_t) bytes long. If a caller passes token == NULL (or a pointer to a smaller object), memset will attempt to write sizeof(*token) bytes through a NULL/invalid pointer, causing out-of-bounds access and undefined behavior. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGive code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1469.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGive as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGive:\n```c\nint32 OS_CountSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGive code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Minimal local type definitions to allow this test file to compile standalone.\n   These mirror the external types sufficiently for logging probes.\n   In the real project these are provided elsewhere; we do not change the\n   semantics of OS_CountSemGive aside from adding logging calls. */\n\ntypedef int32_t int32;\ntypedef int32_t osal_id_t;\n\n/* A conservative token size for logging purposes. Real type is project-defined. */\ntypedef struct\n{\n    uint8_t data[64];\n} OS_object_token_t;\n\n/* Minimal constant definitions for compilation. Real project defines these. */\nenum { OS_SUCCESS = 0, OS_LOCK_MODE_NONE = 0, LOCAL_OBJID_TYPE = 0 };\n\n/* External functions provided by the OS. Declared here so this file compiles. */\nint32 OS_ObjectIdGetById(int lock_mode, int local_type, osal_id_t id, OS_object_token_t *token);\nint32 OS_CountSemGive_Impl(OS_object_token_t *token);\n\n/* Helper: append formatted log entries to the designated log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Ensure the directory exists (best-effort). Ignore errors if it already exists. */\n    /* This uses mkdir syscall via POSIX - if not available it's a harmless attempt. */\n#if defined(__unix__) || defined(__APPLE__)\n    (void)mkdir(\"/tmp/logs\", 0777);\n#endif\n\n    f = fopen(\"/tmp/logs/1469.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If we cannot open the file, fail silently to avoid changing behavior. */\n        return;\n    }\n\n    /* Timestamp each entry to help reconstruct the control flow. */\n    time_t t = time(NULL);\n    struct tm tmbuf;\n#if defined(_MSC_VER)\n    localtime_s(&tmbuf, &t);\n#else\n    localtime_r(&t, &tmbuf);\n#endif\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmbuf);\n\n    fprintf(f, \"[%s] \", timestr);\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper: dump up to `max_bytes` of the token contents in hex to the log file. */\nstatic void probe_dump_token(const char *label, const OS_object_token_t *token, size_t max_bytes)\n{\n    if (token == NULL)\n    {\n        probe_log(\"%s: token == NULL\", label);\n        return;\n    }\n\n    size_t dump_n = (max_bytes < sizeof(*token)) ? max_bytes : sizeof(*token);\n    probe_log(\"%s: token @ %p size=%zu (dumping %zu bytes)\", label, (const void *)token, sizeof(*token), dump_n);\n\n    FILE *f = NULL;\n#if defined(__unix__) || defined(__APPLE__)\n    (void)mkdir(\"/tmp/logs\", 0777);\n#endif\n    f = fopen(\"/tmp/logs/1469.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"    bytes: \");\n    const unsigned char *p = (const unsigned char *)token;\n    for (size_t i = 0; i < dump_n; ++i)\n    {\n        fprintf(f, \"%02x \", p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* The original function with probes inserted. The logic is preserved exactly;\n   only logging is added to capture the control flow and the token/return code state. */\nint32 OS_CountSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with parameter */\n    probe_log(\"OS_CountSemGive ENTRY: sem_id=%d, &token=%p, sizeof(token)=%zu\", (int)sem_id, (void *)&token, sizeof(token));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    probe_log(\"OS_ObjectIdGetById returned %d for sem_id=%d\", (int)return_code, (int)sem_id);\n\n    /* Dump a small portion of the token to help detect invalid or surprising contents. */\n    probe_dump_token(\"After OS_ObjectIdGetById\", &token, 32);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Calling OS_CountSemGive_Impl with token @ %p\", (void *)&token);\n        return_code = OS_CountSemGive_Impl(&token);\n        probe_log(\"OS_CountSemGive_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"Skipping OS_CountSemGive_Impl due to prior error: %d\", (int)return_code);\n    }\n\n    probe_log(\"OS_CountSemGive EXIT: sem_id=%d, return_code=%d\", (int)sem_id, (int)return_code);\n\n    return return_code;\n}\n"
}