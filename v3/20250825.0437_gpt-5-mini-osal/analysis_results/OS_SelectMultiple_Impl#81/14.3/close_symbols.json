{
  "user_message": "Target function code is:\n```c\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    return return_code;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_SelectMultiple_Impl': {'callees': ['OS_FdSet_ConvertIn_Impl', 'OS_DoSelect', 'OS_FdSet_ConvertOut_Impl'], 'callers': ['OS_SelectMultiple']}, 'OS_FdSet_ConvertIn_Impl': {'callees': [], 'callers': ['OS_SelectMultiple_Impl']}, 'OS_DoSelect': {'callees': [], 'callers': ['OS_SelectSingle_Impl', 'OS_SelectMultiple_Impl']}, 'OS_FdSet_ConvertOut_Impl': {'callees': [], 'callers': ['OS_SelectMultiple_Impl']}, 'OS_SelectMultiple': {'callees': ['OS_SelectMultiple_Impl', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nControlling expressions shall not be invariant. Here are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "OS_FdSet_ConvertIn_Impl",
    "OS_DoSelect",
    "OS_FdSet_ConvertOut_Impl",
    "OS_SUCCESS",
    "OS_ERR_INVALID_ID",
    "OS_FdSet (type/definition)"
  ],
  "explanation": "1) OS_FdSet_ConvertIn_Impl \u2014 Need its prototype and implementation/contract to know whether it modifies the passed maxfd and what return codes it can produce. The function sets maxfd and sets return_code; if it always returns a constant or never changes maxfd the controlling expressions (if (return_code != OS_SUCCESS), if (maxfd >= 0)) could be invariant.  \n\n2) OS_DoSelect \u2014 Need its prototype/implementation and possible return values. It is the function that produces the return_code when maxfd >= 0; to decide if the controlling expression if (return_code == OS_SUCCESS) can be invariant we must know whether OS_DoSelect can return different values at runtime.  \n\n3) OS_FdSet_ConvertOut_Impl \u2014 Need its prototype/behavior to know whether it has side effects relevant to later controlling expressions (and to confirm it does not influence the earlier control tests). Even though it is called only after return_code==OS_SUCCESS, its behavior can affect whether subsequent uses of the fd sets or pointers would create any invariant conditions in surrounding code when analyzing correctness.  \n\n4) OS_SUCCESS \u2014 Need the definition/value to determine what the comparisons (return_code == OS_SUCCESS / != OS_SUCCESS) mean and to check if this macro is a compile-time constant or something unusual that could make the controlling expression invariant.  \n\n5) OS_ERR_INVALID_ID \u2014 Need the definition/value because it is assigned as a return value when maxfd < 0; to determine whether that assignment and the condition that leads to it could be considered an invariant outcome.  \n\n6) OS_FdSet (type/definition) \u2014 Need the definition of the OS_FdSet type and any qualifiers (e.g. volatile) used for ReadSet and WriteSet to determine whether the pointer tests (ReadSet != NULL, WriteSet != NULL) are genuinely variable at runtime or could be treated as invariant (for example if they are macros or constant global objects).  \n\nThese symbols provide the necessary information about side effects and value ranges of the functions and constants that appear in the controlling expressions of the target function; without them you cannot determine whether those expressions are compile-time or otherwise invariant (MISRA C rule under inspection)."
}