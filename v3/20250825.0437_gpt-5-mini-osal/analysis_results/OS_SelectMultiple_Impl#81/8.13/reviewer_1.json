{
  "user_message": "An agent A claimed that the following OS_SelectMultiple_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_SelectMultiple_Impl.\n```c\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe argument ReadSet is declared as OS_FdSet * in OS_SelectMultiple_Impl but is passed to OS_FdSet_ConvertIn_Impl as input only. If OS_FdSet_ConvertIn_Impl does not modify the pointed-to OS_FdSet, then ReadSet should be const-qualified (const OS_FdSet *ReadSet) and the called function should accept a const pointer. In that case the current code violates MISRA C 2023 Rule 8.13. (Same reasoning applies to WriteSet.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_SelectMultiple_Impl: entry ReadSet=(nil) WriteSet=0x7ffff6ed9381 msecs=1\nfd_set initialized: rd_set=0x7ffff6ed9290 wr_set=0x7ffff6ed9210\nReadSet is NULL, skipping OS_FdSet_ConvertIn_Impl for read side\nAbout to call OS_FdSet_ConvertIn_Impl for WriteSet=0x7ffff6ed9381 (maxfd=-1)\nWriteSet pre-ConvertIn: 0x7ffff6ed9381 bytes[00 00 00 00 00 00 00 00 DF 3B C0 7D 99 19 28 A0 93 ED F6 FF 7F 00 00 00 00 00 00 ]\nOS_FdSet_ConvertIn_Impl returned 0 (maxfd=-1) for WriteSet=0x7ffff6ed9381\nwr_set post-ConvertIn (partial): 0x7ffff6ed9210 bytes[00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ]\nNo valid file descriptors found (maxfd=-1), setting return_code=OS_ERR_INVALID_ID\nNo ConvertOut calls because return_code != OS_SUCCESS (-16)\nOS_SelectMultiple_Impl: exit with return_code=-16\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is incorrect. MISRA R8.13 advises that a pointer parameter should be const-qualified only when the pointed-to object is never modified. In OS_SelectMultiple_Impl the ReadSet and WriteSet pointers are passed to OS_FdSet_ConvertOut_Impl (when return_code == OS_SUCCESS), which writes the results back into the caller-supplied OS_FdSet objects. That makes these parameters output buffers as well as inputs, so they must be non-const. The execution log showing no ConvertOut calls in that run is irrelevant to the static rule: the code contains paths that modify the pointed-to objects, so the pointers cannot be declared const. Therefore the reported violation is not correct."
}