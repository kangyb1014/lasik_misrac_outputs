{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&ts_end, 0, sizeof(ts_end)) in the else branch of the initial msecs > 0 test is executed only when msecs <= 0. In those cases ts_end is never used later (the code uses tv/tvptr for msecs == 0 and tvptr = NULL for msecs < 0), so removing the memset would not change program behaviour. Therefore this executed assignment is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/812.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple_Impl:\n```c\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe helper: append log messages to /tmp/logs/812.txt */\nstatic void OS_SelectMultiple_Probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/812.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Don't disturb original logic if logging cannot be performed */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    /* Log entry and initial parameters */\n    OS_SelectMultiple_Probe(\"OS_SelectMultiple_Impl ENTRY: ReadSet=%p WriteSet=%p msecs=%ld\", (void *)ReadSet, (void *)WriteSet, (long)msecs);\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    OS_SelectMultiple_Probe(\"FD_ZERO performed: rd_set=%p wr_set=%p\", (void *)&rd_set, (void *)&wr_set);\n\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        OS_SelectMultiple_Probe(\"Calling OS_FdSet_ConvertIn_Impl for ReadSet=%p with incoming maxfd=%d\", (void *)ReadSet, maxfd);\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        OS_SelectMultiple_Probe(\"Returned from OS_FdSet_ConvertIn_Impl: return_code=%ld new_maxfd=%d\", (long)return_code, maxfd);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_SelectMultiple_Probe(\"Early return due to OS_FdSet_ConvertIn_Impl failure: return_code=%ld\", (long)return_code);\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        OS_SelectMultiple_Probe(\"Calling OS_FdSet_ConvertIn_Impl for WriteSet=%p with incoming maxfd=%d\", (void *)WriteSet, maxfd);\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        OS_SelectMultiple_Probe(\"Returned from OS_FdSet_ConvertIn_Impl (write): return_code=%ld new_maxfd=%d\", (long)return_code, maxfd);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_SelectMultiple_Probe(\"Early return due to OS_FdSet_ConvertIn_Impl (write) failure: return_code=%ld\", (long)return_code);\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        OS_SelectMultiple_Probe(\"Calling OS_DoSelect with maxfd=%d msecs=%ld\", maxfd, (long)msecs);\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n        OS_SelectMultiple_Probe(\"Returned from OS_DoSelect: return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        OS_SelectMultiple_Probe(\"No valid fds (maxfd=%d). Setting return_code=OS_ERR_INVALID_ID\", maxfd);\n        return_code = OS_ERR_INVALID_ID;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            OS_SelectMultiple_Probe(\"Converting out ReadSet=%p from rd_set=%p\", (void *)ReadSet, (void *)&rd_set);\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            OS_SelectMultiple_Probe(\"Converting out WriteSet=%p from wr_set=%p\", (void *)WriteSet, (void *)&wr_set);\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    OS_SelectMultiple_Probe(\"OS_SelectMultiple_Impl EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}"
}