{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic volatile int probe_reentrancy_counter = 0;\nstatic void probe_logf(const char *probe_tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2256.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[%s] \", probe_tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and reentrancy state */\n    probe_reentrancy_counter++;\n    probe_logf(\"OS_ConsoleAPI_Init\", \"ENTER: reentrancy_counter=%d\", probe_reentrancy_counter);\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"memset(OS_console_table) done\");\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ObjectIdAllocateNew with name=\\\"%s\\\"\", OS_PRINTF_CONSOLE_NAME);\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdAllocateNew returned=%\" PRId32 \", token_addr=%p, token_size=%zu\",\n               return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_OBJECT_TABLE_GET -> console_ptr=%p\", (void *)console);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_OBJECT_INIT done for name=\\\"%s\\\"\", OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Console ring buffer set: BufBase=%p BufSize=%zu IsAsync=%d\",\n                   (void *)console->BufBase, (size_t)console->BufSize, (int)console->IsAsync);\n\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ConsoleCreate_Impl with token_addr=%p\", (void *)&token);\n        return_code = OS_ConsoleCreate_Impl(&token);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ConsoleCreate_Impl returned=%\" PRId32, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ObjectIdFinalizeNew with return_code=%\" PRId32, return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdFinalizeNew returned=%\" PRId32, return_code);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        probe_logf(\"OS_ConsoleAPI_Init\", \"PrintfEnabled set to true\");\n    }\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"EXIT: returning=%\" PRId32 \", reentrancy_counter(before_dec)=%d\",\n               return_code, probe_reentrancy_counter);\n    /* decrement reentrancy counter on exit */\n    if (probe_reentrancy_counter > 0)\n    {\n        probe_reentrancy_counter--;\n    }\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"EXIT: reentrancy_counter(after_dec)=%d\", probe_reentrancy_counter);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c: In function 'probe_logf':\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:106:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  106 |     vfprintf(f, fmt, ap);\n      |                      ^~\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c: In function 'OS_ConsoleAPI_Init':\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:132:73: error: expected ')' before 'PRId32'\n  132 |     probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdAllocateNew returned=%\" PRId32 \", token_addr=%p, token_size=%zu\",\n      |               ~                                                         ^~~~~~~\n      |                                                                         )\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:66:1: note: 'PRId32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   65 | #include \"os-shared-printf.h\"\n  +++ |+#include <inttypes.h>\n   66 | \n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:155:76: error: expected ')' before 'PRId32'\n  155 |         probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ConsoleCreate_Impl returned=%\" PRId32, return_code);\n      |                   ~                                                        ^~~~~~~\n      |                                                                            )\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:155:77: note: 'PRId32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  155 |         probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ConsoleCreate_Impl returned=%\" PRId32, return_code);\n      |                                                                             ^~~~~~\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:158:93: error: expected ')' before 'PRId32'\n  158 |         probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ObjectIdFinalizeNew with return_code=%\" PRId32, return_code);\n      |                   ~                                                                         ^~~~~~~\n      |                                                                                             )\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:158:94: note: 'PRId32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  158 |         probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ObjectIdFinalizeNew with return_code=%\" PRId32, return_code);\n      |                                                                                              ^~~~~~\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:160:77: error: expected ')' before 'PRId32'\n  160 |         probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdFinalizeNew returned=%\" PRId32, return_code);\n      |                   ~                                                         ^~~~~~~\n      |                                                                             )\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:160:78: note: 'PRId32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  160 |         probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdFinalizeNew returned=%\" PRId32, return_code);\n      |                                                                              ^~~~~~\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:169:57: error: expected ')' before 'PRId32'\n  169 |     probe_logf(\"OS_ConsoleAPI_Init\", \"EXIT: returning=%\" PRId32 \", reentrancy_counter(before_dec)=%d\",\n      |               ~                                         ^~~~~~~\n      |                                                         )\n/tmp/tmpw3eh77zv/src/src/os/shared/src/osapi-printf.c:169:58: note: 'PRId32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  169 |     probe_logf(\"OS_ConsoleAPI_Init\", \"EXIT: returning=%\" PRId32 \", reentrancy_counter(before_dec)=%d\",\n      |                                                          ^~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/__/__/os/shared/src/osapi-printf.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4035: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include \"os-shared-printf.h\"\n#include <inttypes.h>\n\nstatic volatile int probe_reentrancy_counter = 0;\nstatic void probe_logf(const char *probe_tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2256.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[%s] \", probe_tag);\n    /* Cast to va_list to satisfy the platform vfprintf prototype when a\n     * different va_list alias (e.g. OCS_va_list) is present in the build\n     * environment. This preserves the original behavior. */\n    vfprintf(f, fmt, (va_list)ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and reentrancy state */\n    probe_reentrancy_counter++;\n    probe_logf(\"OS_ConsoleAPI_Init\", \"ENTER: reentrancy_counter=%d\", probe_reentrancy_counter);\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"memset(OS_console_table) done\");\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ObjectIdAllocateNew with name=\\\"%s\\\"\", OS_PRINTF_CONSOLE_NAME);\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdAllocateNew returned=%\" PRId32 \", token_addr=%p, token_size=%zu\",\n               return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_OBJECT_TABLE_GET -> console_ptr=%p\", (void *)console);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_OBJECT_INIT done for name=\\\"%s\\\"\", OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Console ring buffer set: BufBase=%p BufSize=%zu IsAsync=%d\",\n                   (void *)console->BufBase, (size_t)console->BufSize, (int)console->IsAsync);\n\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ConsoleCreate_Impl with token_addr=%p\", (void *)&token);\n        return_code = OS_ConsoleCreate_Impl(&token);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ConsoleCreate_Impl returned=%\" PRId32, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        probe_logf(\"OS_ConsoleAPI_Init\", \"Calling OS_ObjectIdFinalizeNew with return_code=%\" PRId32, return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        probe_logf(\"OS_ConsoleAPI_Init\", \"OS_ObjectIdFinalizeNew returned=%\" PRId32, return_code);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        probe_logf(\"OS_ConsoleAPI_Init\", \"PrintfEnabled set to true\");\n    }\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"EXIT: returning=%\" PRId32 \", reentrancy_counter(before_dec)=%d\",\n               return_code, probe_reentrancy_counter);\n    /* decrement reentrancy counter on exit */\n    if (probe_reentrancy_counter > 0)\n    {\n        probe_reentrancy_counter--;\n    }\n\n    probe_logf(\"OS_ConsoleAPI_Init\", \"EXIT: reentrancy_counter(after_dec)=%d\", probe_reentrancy_counter);\n\n    return return_code;\n}\n",
  "explanation": "1) Added #include <inttypes.h> so the PRId32 macro is defined, fixing the format-string errors.\n2) In probe_logf, cast the varargs list to (va_list) when calling vfprintf: vfprintf(f, fmt, (va_list)ap). This addresses the build environment where an alternate va_list alias (e.g. OCS_va_list) was used, preventing a type-mismatch error while preserving the original logging behavior."
}