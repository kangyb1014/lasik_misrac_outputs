{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_INIT expands to an assignment of OS_PRINTF_CONSOLE_NAME (a string literal) to the record field device_name. If the field is declared as a non-const pointer/array (e.g. char *device_name or char device_name[] used via pointer assignment) then this makes a non-const-qualified pointer point at a string literal (which should be const). That violates MISRA C 2023 Rule 8.13. A fix is to declare the field as const char * (or otherwise copy the literal into a mutable buffer), so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleAPI_Init code.\n",
  "test_code": "/* Probe logging helpers inserted to capture control flow and internal state for the Rule 8.13 scenario. */\nstatic void OS_ConsoleAPI_LogState(const char *stage, OS_console_internal_record_t *console, OS_object_token_t token, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2253.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic stage and control information */\n    fprintf(f, \"Stage: %s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  return_code = %ld\\n\", (long)return_code);\n    fprintf(f, \"  token       = %lu\\n\", (unsigned long)token);\n\n    if (console == NULL)\n    {\n        fprintf(f, \"  console     = NULL\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Attempt to print device_name pointer and contents. Cast to const char* to avoid accidental writes. */\n    const char *devname_ptr = NULL;\n\n    /* Accessing console->device_name generically (works for char * or char[]). */\n    devname_ptr = (const char *)console->device_name;\n\n    fprintf(f, \"  device_name ptr = %p\\n\", (const void *)devname_ptr);\n    if (devname_ptr != NULL)\n    {\n        /* Print as string but guard against non-terminated content by printing up to some length. */\n        fprintf(f, \"  device_name text = \\\"\");\n        for (size_t i = 0; i < 256; ++i)\n        {\n            char c = devname_ptr[i];\n            if (c == '\\0')\n            {\n                break;\n            }\n            /* Print characters safely. */\n            fputc((int)c, f);\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  device_name text = (null)\\n\");\n    }\n\n    /* Buffer state */\n    fprintf(f, \"  BufBase = %p\\n\", (const void *)console->BufBase);\n    fprintf(f, \"  BufSize = %zu\\n\", (size_t)console->BufSize);\n    fprintf(f, \"  IsAsync = %d\\n\\n\", (int)console->IsAsync);\n\n    fclose(f);\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /* Log initial table-zeroed state. */\n    OS_ConsoleAPI_LogState(\"after_memset\", NULL, 0, 0);\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    OS_ConsoleAPI_LogState(\"after_object_allocate\", NULL, token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Log state before OS_OBJECT_INIT which may assign the string literal. */\n        OS_ConsoleAPI_LogState(\"before_OS_OBJECT_INIT\", console, token, return_code);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /* Log state immediately after the macro that may assign a string literal to device_name. */\n        OS_ConsoleAPI_LogState(\"after_OS_OBJECT_INIT\", console, token, return_code);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        /* Log buffer configuration state. */\n        OS_ConsoleAPI_LogState(\"after_buffer_config\", console, token, return_code);\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n        OS_ConsoleAPI_LogState(\"after_create_impl\", console, token, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        OS_ConsoleAPI_LogState(\"after_finalize_new\", console, token, return_code);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        OS_ConsoleAPI_LogState(\"after_enable_printf\", console, token, return_code);\n    }\n\n    OS_ConsoleAPI_LogState(\"function_exit\", NULL, 0, return_code);\n    return return_code;\n}\n"
}