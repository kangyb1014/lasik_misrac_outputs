{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTimedWait_Impl:\n```c\nint32 OS_CountSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec                     ts;\n    int                                 result;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    if (sem_timedwait(&impl->id, &ts) == 0)\n    {\n        result = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        result = OS_SEM_TIMEOUT;\n    }\n    else\n    {\n        /* unspecified failure */\n        result = OS_SEM_FAILURE;\n    }\n\n    return result;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemTimedWait_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments in the function appear to violate MISRA C 2023 Rule 8.13. Rationale:\n\n- The function parameter 'const OS_object_token_t *token' is already a pointer to a const-qualified type, so it complies with the rule.\n- The local variable 'struct timespec ts' is a non-pointer object and is passed by address to OS_Posix_CompAbsDelayTime (which must write into ts) and to sem_timedwait (whose second parameter is const struct timespec *). Making ts or its address const would be incorrect because ts is intentionally modified by OS_Posix_CompAbsDelayTime.\n- The local pointer 'OS_impl_countsem_internal_record_t *impl' points into the global OS_impl_count_sem_table array, which is a mutable table of semaphores. The semaphore object (impl->id) is passed to sem_timedwait, which requires a sem_t * (non-const) because the semaphore state is modified by the call. Therefore the pointed-to type cannot be const.\n- The OS_OBJECT_TABLE_GET macro yields an address into the (mutable) table. The macro usage does not discard a const qualifier here: token is const, and &( *token ) yields a pointer to const if the callee expects const; in this function the resulting table pointer must be mutable to allow semaphore operations.\n\nGiven these points, there are no pointers in this function that could (and should) be changed to point to const-qualified types without preventing required modifications, so no fragments need investigation for Rule 8.13."
}