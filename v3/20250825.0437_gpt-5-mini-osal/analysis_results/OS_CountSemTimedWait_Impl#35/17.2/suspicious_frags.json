{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTimedWait_Impl:\n```c\nint32 OS_CountSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec                     ts;\n    int                                 result;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    if (sem_timedwait(&impl->id, &ts) == 0)\n    {\n        result = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        result = OS_SEM_TIMEOUT;\n    }\n    else\n    {\n        /* unspecified failure */\n        result = OS_SEM_FAILURE;\n    }\n\n    return result;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemTimedWait_Impl:\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nvoid OS_Posix_CompAbsDelayTime(uint32 msecs, struct timespec *tm)\n{\n    clock_gettime(CLOCK_REALTIME, tm);\n\n    /* add the delay to the current time */\n    tm->tv_sec += (time_t)(msecs / 1000);\n    /* convert residue ( msecs )  to nanoseconds */\n    tm->tv_nsec += (msecs % 1000) * 1000000L;\n\n    if (tm->tv_nsec >= 1000000000L)\n    {\n        tm->tv_nsec -= 1000000000L;\n        tm->tv_sec++;\n    }\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious fragments found in the provided code that indicate direct or indirect recursion. Analysis of the functions and calls present:\n\n- OS_CountSemTimedWait_Impl: does not call itself. Its calls are limited to: sem_timedwait(&impl->id, &ts), OS_Posix_CompAbsDelayTime(msecs, &ts), and the OS_OBJECT_TABLE_GET(...) macro to obtain impl. None of these are the same function nor do they imply a call back to OS_CountSemTimedWait_Impl.\n\n- OS_Posix_CompAbsDelayTime: calls clock_gettime and performs arithmetic on the timespec; it does not call any other project functions or OS_CountSemTimedWait_Impl.\n\n- OS_ObjectIndexFromToken: a static inline that simply returns a struct field (token->obj_idx); it performs no calls.\n\n- sem_timedwait is a POSIX library call; it does not call user-space functions back and therefore cannot create indirect recursion to OS_CountSemTimedWait_Impl.\n\n- The OS_OBJECT_TABLE_GET macro (as used) is a table lookup; the provided inline helper shows there is no call chain that would lead back to OS_CountSemTimedWait_Impl.\n\n- There are no function pointers, callbacks, or other constructs in the provided fragments that could cause indirect recursion.\n\nCaveat: the snippet contains an ellipsis (\"...\") indicating omitted code. Based solely on the supplied code fragments, there is no evidence of direct or indirect recursion. If additional code (omitted parts) contains function-pointer indirections or other functions that call OS_CountSemTimedWait_Impl, those should be reviewed."
}