{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OSAL is not initialized. If the OS_DEBUG implementation (macro or function) ends up calling OS_printf (directly or via another routine that calls OS_printf), this creates an indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2516.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo:\n```c\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: append messages to /tmp/logs/2516.txt without using OS_printf or OS_DEBUG. */\nstatic void os2516_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2516.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and parameter state */\n    os2516_log(\"ENTER OS_SocketSendTo: sock_id=%llu, buffer=%p, buflen=%zu, RemoteAddr=%p\",\n               (unsigned long long)sock_id, buffer, buflen, (const void*)RemoteAddr);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    os2516_log(\"OS_ObjectIdGetById returned %d for sock_id=%llu (token_addr=%p)\",\n               return_code, (unsigned long long)sock_id, (void*)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n        os2516_log(\"OS_OBJECT_TABLE_GET returned stream=%p\", (void *)stream);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            os2516_log(\"socket_type mismatch: expected DATAGRAM, got %d\", (int)stream->socket_type);\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            os2516_log(\"Calling OS_SocketSendTo_Impl: token_addr=%p, buffer=%p, buflen=%zu, RemoteAddr=%p\",\n                       (void*)&token, buffer, buflen, (const void*)RemoteAddr);\n\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n\n            os2516_log(\"OS_SocketSendTo_Impl returned %d for sock_id=%llu\", return_code, (unsigned long long)sock_id);\n        }\n\n        os2516_log(\"Releasing token at %p for sock_id=%llu\", (void*)&token, (unsigned long long)sock_id);\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        os2516_log(\"OS_ObjectIdGetById failed with %d for sock_id=%llu\", return_code, (unsigned long long)sock_id);\n    }\n\n    os2516_log(\"EXIT OS_SocketSendTo: sock_id=%llu, return_code=%d\", (unsigned long long)sock_id, return_code);\n\n    return return_code;\n}\n"
}