{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(s, 0, maxlen) in OS_strnlen can read up to maxlen bytes starting at s. OS_strnlen is invoked (e.g. OS_strnlen(VirtualPath, OS_MAX_PATH_LEN)) where only a non-NULL pointer is guaranteed by OS_CHECK_POINTER, not the size of the object. If the object referenced by s is smaller than maxlen (for example a caller-provided string buffer shorter than OS_MAX_PATH_LEN or a pointer into a smaller allocation) and there is no NUL within the first maxlen bytes, memchr will access bytes beyond the object bounds. This constitutes a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2169.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/2169.txt */\nstatic void OS_2169_log_event(const char *stage,\n                              const char *filename_ptr_str,\n                              const void *filename_ptr,\n                              size_t SizeLimit,\n                              int32 return_code,\n                              const char *translated_path_ptr,\n                              const void *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2169.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not change original control flow. */\n        return;\n    }\n\n    /* Write a compact record of the event. Do not dereference user pointers. */\n    fprintf(f, \"[OS_2169] stage=%s filename_ptr_label=%s filename_addr=%p SizeLimit=%zu return_code=%d translated_path_addr=%p token_addr=%p\\n\",\n            stage,\n            (filename_ptr_str != NULL) ? filename_ptr_str : \"(unknown)\",\n            filename_ptr,\n            SizeLimit,\n            (int)return_code,\n            (void *)translated_path_ptr,\n            token_ptr);\n\n    /* If translated_path_ptr is available, include its contents (safe if provided by OS_TranslatePath success). */\n    if (translated_path_ptr != NULL && return_code == OS_SUCCESS)\n    {\n        /* Print a single-line preview of translated_path (null-terminated expected on success). */\n        fprintf(f, \"[OS_2169] translated_path=\");\n        /* Use a loop to avoid potential long strings breaking log formatting. */\n        for (size_t i = 0; i < 256 && translated_path_ptr[i] != '\\0'; ++i)\n        {\n            int c = (unsigned char)translated_path_ptr[i];\n            /* Escape non-printables conservatively */\n            if (c >= 32 && c < 127)\n                fputc(c, f);\n            else\n                fprintf(f, \"\\\\x%02X\", c);\n        }\n        fputc('\\n', f);\n    }\n\n    fclose(f);\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Log entry: record pointer value and SizeLimit. Do not dereference filename. */\n    OS_2169_log_event(\"entry\", \"filename (no-deref)\", filename, SizeLimit, -1, NULL, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /* Log after pointer check (pointer was non-NULL) */\n    OS_2169_log_event(\"after_check_pointer\", \"filename (non-NULL)\", filename, SizeLimit, -1, NULL, NULL);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n\n    /* Log result of path translation. If success, include translated_path preview. */\n    OS_2169_log_event(\"after_translate\", \"filename (non-deref)\", filename, SizeLimit, return_code, (return_code == OS_SUCCESS) ? translated_path : NULL, NULL);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n\n    /* Log result of transaction init, include token address (do not inspect token contents). */\n    OS_2169_log_event(\"after_transaction_init\", \"filename (non-deref)\", filename, SizeLimit, return_code, translated_path, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /* Log just before calling the implementation */\n    OS_2169_log_event(\"before_impl\", \"filename (non-deref)\", filename, SizeLimit, -1, translated_path, &token);\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    /* Log result from the implementation call */\n    OS_2169_log_event(\"after_impl\", \"filename (non-deref)\", filename, SizeLimit, return_code, translated_path, &token);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    /* Log final exit */\n    OS_2169_log_event(\"exit\", \"filename (non-deref)\", filename, SizeLimit, return_code, translated_path, &token);\n\n    return return_code;\n}\n"
}