{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)(-1))\n    {\n        struct tm tm_buff;\n        if (localtime_r(&t, &tm_buff) != NULL)\n        {\n            char timebuf[32];\n            if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buff) > 0)\n            {\n                fprintf(f, \"%s - \", timebuf);\n            }\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_log_str(const char *label, const char *s, size_t maxlen)\n{\n    size_t len = 0;\n    if (s != NULL)\n    {\n        /* Use strnlen to avoid reading beyond the buffer provided */\n        len = strnlen(s, maxlen);\n    }\n    probe_log(\"%s (len=%zu): %.*s\", label, len, (int)len, (s != NULL) ? s : \"(null)\");\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Log entry and parameters */\n    probe_log(\"ENTER: OS_SymbolTableDump called. filename=%p, SizeLimit=%zu\", (const void *)filename, SizeLimit);\n    if (filename != NULL)\n    {\n        /* Log the user-provided filename up to a reasonable length to avoid over-read */\n        probe_log_str(\"filename\", filename, 1024);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n    probe_log(\"After OS_CHECK_POINTER\");\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    probe_log(\"OS_TranslatePath returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"EXIT: OS_SymbolTableDump due to TranslatePath failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    /* Log the translated path safely */\n    probe_log_str(\"translated_path\", translated_path, sizeof(translated_path));\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    probe_log(\"Attempting OS_ObjectIdTransactionInit (global lock)\");\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    probe_log(\"OS_ObjectIdTransactionInit returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"EXIT: OS_SymbolTableDump due to ObjectIdTransactionInit failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    /* Log token properties without assuming internal layout; print size and address */\n    probe_log(\"Token address=%p, token_size=%zu\", (void *)&token, sizeof(token));\n\n    probe_log(\"Calling OS_SymbolTableDump_Impl with SizeLimit=%zu\", SizeLimit);\n    probe_log_str(\"OS_SymbolTableDump_Impl translated_path\", translated_path, sizeof(translated_path));\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n    probe_log(\"OS_SymbolTableDump_Impl returned %d\", (int)return_code);\n\n    OS_ObjectIdTransactionCancel(&token);\n    probe_log(\"OS_ObjectIdTransactionCancel called\");\n\n    probe_log(\"EXIT: OS_SymbolTableDump returning %d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpldb9v1lp/src/src/os/shared/src/osapi-module.c: In function 'probe_log':\n/tmp/tmpldb9v1lp/src/src/os/shared/src/osapi-module.c:444:19: error: storage size of 'tm_buff' isn't known\n  444 |         struct tm tm_buff;\n      |                   ^~~~~~~\n/tmp/tmpldb9v1lp/src/src/os/shared/src/osapi-module.c:457:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  457 |     vfprintf(f, fmt, args);\n      |                      ^~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/__/__/os/shared/src/osapi-module.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3849: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal type/constant declarations so this translation unit compiles\n * without pulling in the rest of the project headers. These are\n * chosen to avoid changing the original function logic. */\nenum { OS_MAX_LOCAL_PATH_LEN = 4096, OS_LOCK_MODE_GLOBAL = 1, LOCAL_OBJID_TYPE = 1 };\ntypedef int32_t int32;\nenum { OS_SUCCESS = 0, OS_INVALID_POINTER = -1 };\n\ntypedef struct {\n    /* opaque token for this translation unit */\n    int dummy;\n} OS_object_token_t;\n\n/* Prototypes for functions expected to be provided elsewhere in the project. */\nint32 OS_TranslatePath(const char *path, char *translated_path);\nint32 OS_ObjectIdTransactionInit(int lock_mode, int objtype, OS_object_token_t *token);\nvoid OS_ObjectIdTransactionCancel(OS_object_token_t *token);\nint32 OS_SymbolTableDump_Impl(const char *translated_path, size_t SizeLimit);\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2169.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)(-1))\n    {\n        struct tm tm_buff;\n        if (localtime_r(&t, &tm_buff) != NULL)\n        {\n            char timebuf[32];\n            if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buff) > 0)\n            {\n                fprintf(f, \"%s - \", timebuf);\n            }\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_str(const char *label, const char *s, size_t maxlen)\n{\n    size_t len = 0;\n    if (s != NULL)\n    {\n        /* Use strnlen to avoid reading beyond the buffer provided */\n        len = strnlen(s, maxlen);\n    }\n    probe_log(\"%s (len=%zu): %.*s\", label, len, (int)len, (s != NULL) ? s : \"(null)\");\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Log entry and parameters */\n    probe_log(\"ENTER: OS_SymbolTableDump called. filename=%p, SizeLimit=%zu\", (const void *)filename, SizeLimit);\n    if (filename != NULL)\n    {\n        /* Log the user-provided filename up to a reasonable length to avoid over-read */\n        probe_log_str(\"filename\", filename, 1024);\n    }\n\n    /* Check parameters (explicit check rather than using external macro) */\n    if (filename == NULL)\n    {\n        probe_log(\"EXIT: OS_SymbolTableDump due to NULL filename\");\n        return OS_INVALID_POINTER;\n    }\n    probe_log(\"After OS_CHECK_POINTER\");\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    probe_log(\"OS_TranslatePath returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"EXIT: OS_SymbolTableDump due to TranslatePath failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    /* Log the translated path safely */\n    probe_log_str(\"translated_path\", translated_path, sizeof(translated_path));\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    probe_log(\"Attempting OS_ObjectIdTransactionInit (global lock)\");\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    probe_log(\"OS_ObjectIdTransactionInit returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"EXIT: OS_SymbolTableDump due to ObjectIdTransactionInit failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    /* Log token properties without assuming internal layout; print size and address */\n    probe_log(\"Token address=%p, token_size=%zu\", (void *)&token, sizeof(token));\n\n    probe_log(\"Calling OS_SymbolTableDump_Impl with SizeLimit=%zu\", SizeLimit);\n    probe_log_str(\"OS_SymbolTableDump_Impl translated_path\", translated_path, sizeof(translated_path));\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n    probe_log(\"OS_SymbolTableDump_Impl returned %d\", (int)return_code);\n\n    OS_ObjectIdTransactionCancel(&token);\n    probe_log(\"OS_ObjectIdTransactionCancel called\");\n\n    probe_log(\"EXIT: OS_SymbolTableDump returning %d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Two compilation problems were fixed:\n\n1) struct tm (and time functions) were not known because the appropriate headers were missing. I added standard headers: <time.h>, <stdarg.h>, <stdio.h>, <string.h>, <stdint.h>, and <stddef.h> so struct tm, localtime_r, time_t, va_list, vfprintf, and strnlen are visible.\n\n2) The build also depended on several project-specific types/macros (OS_MAX_LOCAL_PATH_LEN, OS_object_token_t, OS_CHECK_POINTER, etc.). To make this translation unit compile without changing the function logic, I provided minimal, local declarations:\n   - An enum value for OS_MAX_LOCAL_PATH_LEN and other small constants.\n   - A typedef for int32 and a simple opaque OS_object_token_t struct so sizeof(token) is valid.\n   - Function prototypes for OS_TranslatePath, OS_ObjectIdTransactionInit, OS_ObjectIdTransactionCancel, and OS_SymbolTableDump_Impl so calls compile.\n   - Replaced the external macro OS_CHECK_POINTER with an explicit NULL check that preserves the original intent (reject NULL filename) while keeping the surrounding logging.\n\nNo macros, main function, or mock functions were added; the original logic of OS_SymbolTableDump is preserved as closely as possible while making the code self-contained for compilation."
}