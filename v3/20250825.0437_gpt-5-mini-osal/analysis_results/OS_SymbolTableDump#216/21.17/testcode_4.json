{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(s, 0, maxlen) with maxlen == OS_MAX_PATH_LEN but OS_TranslatePath only checks that VirtualPath != NULL (OS_CHECK_POINTER). There is no guarantee that the object referenced by VirtualPath has at least OS_MAX_PATH_LEN bytes or contains a '\\0' within that many bytes. If a caller passes a smaller buffer (e.g. char buf[8] that is not NUL-terminated within its bounds or a pointer into a smaller object), memchr may read beyond the buffer while searching up to OS_MAX_PATH_LEN bytes, causing out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2169.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <ctype.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helpers - append-only logging to /tmp/logs/2169.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2169.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\n/* Safely dump the local translated_path buffer contents (prints until NUL or buffer length) */\nstatic void probe_dump_translated(const char *buf, size_t buflen)\n{\n    FILE *f = fopen(\"/tmp/logs/2169.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"translated_path (up to %zu bytes): '\", buflen);\n    for (size_t i = 0; i < buflen; ++i)\n    {\n        unsigned char c = (unsigned char)buf[i];\n        if (c == '\\0')\n        {\n            fprintf(f, \"\\\\0' (terminated at index %zu)\\n\", i);\n            fclose(f);\n            return;\n        }\n        if (isprint(c))\n        {\n            fputc(c, f);\n        }\n        else\n        {\n            fprintf(f, \"\\\\x%02x\", c);\n        }\n    }\n    fprintf(f, \"' (no NUL found within buffer)\\n\");\n    fclose(f);\n}\n\n/* Modified function: inserts probes but preserves original logic */\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Log entry & inputs. Do NOT dereference filename (could be shorter than expected) */\n    probe_log(\"OS_SymbolTableDump ENTRY: filename=%p SizeLimit=%zu OS_MAX_PATH_LEN=%zu\\n\",\n              (void *)filename, SizeLimit, (size_t)OS_MAX_PATH_LEN);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n    probe_log(\"OS_CHECK_POINTER passed for filename=%p\\n\", (void *)filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    probe_log(\"Calling OS_TranslatePath(filename=%p, translated_path=%p)\\n\", (void *)filename, (void *)translated_path);\n    return_code = OS_TranslatePath(filename, translated_path);\n    probe_log(\"OS_TranslatePath returned %d\\n\", return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"OS_TranslatePath failed - returning %d\\n\", return_code);\n        return return_code;\n    }\n\n    /* Dump the translated path (safe: translated_path is a local array) */\n    probe_dump_translated(translated_path, sizeof(translated_path));\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    probe_log(\"Calling OS_ObjectIdTransactionInit(token at %p)\\n\", (void *)&token);\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    probe_log(\"OS_ObjectIdTransactionInit returned %d\\n\", return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"OS_ObjectIdTransactionInit failed - returning %d\\n\", return_code);\n        return return_code;\n    }\n\n    probe_log(\"Calling OS_SymbolTableDump_Impl(translated_path=%p, SizeLimit=%zu)\\n\", (void *)translated_path, SizeLimit);\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n    probe_log(\"OS_SymbolTableDump_Impl returned %d\\n\", return_code);\n\n    probe_log(\"Calling OS_ObjectIdTransactionCancel(token at %p)\\n\", (void *)&token);\n    OS_ObjectIdTransactionCancel(&token);\n    probe_log(\"OS_ObjectIdTransactionCancel done\\n\");\n\n    probe_log(\"OS_SymbolTableDump EXIT returning %d\\n\", return_code);\n\n    return return_code;\n}\n"
}