{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * (VirtualPath) to (void *) when calling OS_ObjectIdGetBySearch, discarding the const qualifier. This violates MISRA C 2023 Rule 8.13 which requires pointers to point to const-qualified types when possible. The correct remedy is to change the callee prototype to accept a const void * (or otherwise avoid discarding const), or ensure the argument is non-const if the function legitimately needs to modify it.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper. Appends human-readable logs to /tmp/logs/2163.txt.\n * This function is intentionally lightweight so it can be used inside the\n * OS_SymbolTableDump control flow to record parameters, return codes and\n * other state without altering the logic of the function.\n */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2163.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /* Log entry and input state after the pointer check */\n    log_probe(\"ENTRY: OS_SymbolTableDump called; filename='%s', SizeLimit=%zu\", filename, SizeLimit);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    log_probe(\"OS_TranslatePath returned %d; translated_path='%s'\", (int)return_code, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        log_probe(\"EXIT: OS_SymbolTableDump early return due to OS_TranslatePath failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    log_probe(\"OS_ObjectIdTransactionInit returned %d; token_address=%p; token_size=%zu\",\n              (int)return_code, (void *)&token, (size_t)sizeof(token));\n    if (return_code != OS_SUCCESS)\n    {\n        log_probe(\"EXIT: OS_SymbolTableDump early return due to OS_ObjectIdTransactionInit failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    log_probe(\"Calling OS_SymbolTableDump_Impl with translated_path='%s', SizeLimit=%zu\", translated_path, SizeLimit);\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n    log_probe(\"OS_SymbolTableDump_Impl returned %d\", (int)return_code);\n\n    OS_ObjectIdTransactionCancel(&token);\n    log_probe(\"OS_ObjectIdTransactionCancel called; token_address=%p\", (void *)&token);\n\n    log_probe(\"EXIT: OS_SymbolTableDump returning %d\", (int)return_code);\n    return return_code;\n}\n"
}