{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_BSP_EndTest:\n```c\nvoid UT_BSP_EndTest(const UtAssert_TestCounter_t *TestCounters)\n{\n    char Message[128];\n\n    /*\n     * Only output a \"summary\" if there is more than one test Segment.\n     * Otherwise it is a duplicate of the report already given.\n     */\n    if (TestCounters->TestSegmentCount > 1)\n    {\n        UtAssert_DoTestSegmentReport(\"SUMMARY\", TestCounters);\n    }\n\n    snprintf(Message, sizeof(Message), \"COMPLETE: %u tests Segment(s) executed\\n\\n\",\n             (unsigned int)TestCounters->TestSegmentCount);\n\n    UT_BSP_Lock();\n    OS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n    UT_BSP_Unlock();\n\n    if ((TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE] > 0) ||\n        (TestCounters->CaseCount[UTASSERT_CASETYPE_TSF] > 0) || (TestCounters->CaseCount[UTASSERT_CASETYPE_TTF] > 0))\n    {\n        OS_BSP_SetExitCode(OS_ERROR);\n    }\n    else\n    {\n        OS_BSP_SetExitCode(OS_SUCCESS);\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UT_BSP_EndTest:\ntypedef struct\n{\n    uint32 TestSegmentCount;\n    uint32 TotalTestCases;\n    uint32 CaseCount[UTASSERT_CASETYPE_MAX];\n} UtAssert_TestCounter_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "If the function OS_BSP_ConsoleOutput_Impl is declared to accept a non-const pointer (e.g. void OS_BSP_ConsoleOutput_Impl(char *buf, size_t len)), then this call passes Message (a buffer provided for read-only output) to a non-const pointer parameter. Since the buffer is not modified by the caller and the function likely only reads it, the parameter should be const-qualified (const char *buf). In that case the code violates MISRA C 2023 Rule 8.13. If, however, OS_BSP_ConsoleOutput_Impl is already declared to take a const-qualified pointer (e.g. void OS_BSP_ConsoleOutput_Impl(const char *buf, size_t len)), then there is no violation."
}