{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'stream' is declared as OS_stream_internal_record_t *stream but is only used for read-only access (reading stream->socket_type and stream->socket_domain). It should be declared as const OS_stream_internal_record_t *stream to indicate and enforce non-modification. Assigning the result of OS_OBJECT_TABLE_GET (a pointer to a non-const table element) to a pointer-to-const is permitted, so the current declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen_Impl:\n```c\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    os_proto = 0;\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            break;\n\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            break;\n#endif\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (impl->fd < 0)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n\n/*\n * Probe logging helper: writes information about control flow and key state\n * to /tmp/logs/1113.txt. This preserves original logic and adds non-intrusive\n * diagnostics to aid reproduction of the reported MISRA Rule 8.13 scenario.\n *\n * Note: The concrete types OS_object_token_t, OS_impl_file_internal_record_t,\n * and OS_stream_internal_record_t are assumed to be defined elsewhere in the\n * build; this helper only references them as in the original function.\n */\nstatic void OS_SocketOpen_LogProbe(const char *stage,\n                                   const OS_object_token_t *token,\n                                   OS_impl_file_internal_record_t *impl,\n                                   OS_stream_internal_record_t *stream,\n                                   int os_domain,\n                                   int os_type,\n                                   int os_proto,\n                                   int fd)\n{\n    FILE *f = fopen(\"/tmp/logs/1113.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be done, do not change behavior of original code. */\n        return;\n    }\n\n    /* Write a compact record containing pointers, relevant fields and errno/fd. */\n    fprintf(f, \"STAGE=%s token_ptr=%p impl_ptr=%p stream_ptr=%p\\n\",\n            stage, (const void *)token, (void *)impl, (void *)stream);\n\n    if (stream != NULL)\n    {\n        /* Log the stream fields used by the function (read-only in original code). */\n        fprintf(f, \"  stream->socket_type=%d stream->socket_domain=%d\\n\",\n                (int)stream->socket_type, (int)stream->socket_domain);\n    }\n\n    fprintf(f, \"  os_domain=%d os_type=%d os_proto=%d fd=%d errno=%d\\n\",\n            os_domain, os_type, os_proto, fd, errno);\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    /* Log state after object table lookups */\n    OS_SocketOpen_LogProbe(\"after_lookup\", token, impl, stream, -1, -1, -1, -1);\n\n    os_proto = 0;\n\n    /* Log before deciding socket type */\n    OS_SocketOpen_LogProbe(\"before_type_switch\", token, impl, stream, -1, -1, -1, -1);\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            /* Log the selected type/proto */\n            OS_SocketOpen_LogProbe(\"selected_datagram\", token, impl, stream, -1, os_type, os_proto, -1);\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            /* Log the selected type/proto */\n            OS_SocketOpen_LogProbe(\"selected_stream\", token, impl, stream, -1, os_type, os_proto, -1);\n            break;\n\n        default:\n            OS_SocketOpen_LogProbe(\"unsupported_socket_type\", token, impl, stream, -1, -1, -1, -1);\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Log before deciding socket domain */\n    OS_SocketOpen_LogProbe(\"before_domain_switch\", token, impl, stream, -1, os_type, os_proto, -1);\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            /* Log the selected domain */\n            OS_SocketOpen_LogProbe(\"selected_inet\", token, impl, stream, os_domain, os_type, os_proto, -1);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            OS_SocketOpen_LogProbe(\"selected_inet6\", token, impl, stream, os_domain, os_type, os_proto, -1);\n            break;\n#endif\n        default:\n            OS_SocketOpen_LogProbe(\"unsupported_socket_domain\", token, impl, stream, -1, os_type, os_proto, -1);\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Log the parameters about to be used to create the socket */\n    OS_SocketOpen_LogProbe(\"before_socket_call\", token, impl, stream, os_domain, os_type, os_proto, -1);\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    OS_SocketOpen_LogProbe(\"after_socket_call\", token, impl, stream, os_domain, os_type, os_proto, impl->fd);\n\n    if (impl->fd < 0)\n    {\n        OS_SocketOpen_LogProbe(\"socket_failed\", token, impl, stream, os_domain, os_type, os_proto, impl->fd);\n        return OS_ERROR;\n    }\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    {\n        int rc_setsockopt = setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n        OS_SocketOpen_LogProbe(\"after_setsockopt\", token, impl, stream, os_domain, os_type, os_proto, impl->fd);\n        (void)rc_setsockopt; /* keep existing behavior: ignore failure */\n    }\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    OS_SocketOpen_LogProbe(\"before_return_success\", token, impl, stream, os_domain, os_type, os_proto, impl->fd);\n\n    return OS_SUCCESS;\n}\n"
}