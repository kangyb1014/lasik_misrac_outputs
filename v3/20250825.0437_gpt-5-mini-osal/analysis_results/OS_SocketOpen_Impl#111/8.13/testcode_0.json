{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'os_flags' is assigned a value and its address (&os_flags) is passed to setsockopt, but 'os_flags' is not const-qualified even though it is not modified after initialization. According to MISRA C 2023 Rule 8.13 it should be declared const (e.g. 'const int os_flags = 1;') so that the pointer effectively points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen_Impl:\n```c\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    os_proto = 0;\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            break;\n\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            break;\n#endif\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (impl->fd < 0)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\n/* Probe/logging helper: append human-readable trace information to the log file.\n * This function is intentionally lightweight and does not change program control flow.\n */\nstatic void OS_SocketOpen_Log(const char *event,\n                              const void *token_ptr,\n                              const void *stream_ptr,\n                              int socket_type_val,\n                              int socket_domain_val,\n                              int os_domain,\n                              int os_type,\n                              int os_proto,\n                              int os_flags_val,\n                              const void *os_flags_addr,\n                              int fd_val,\n                              int setsockopt_res)\n{\n    FILE *f = fopen(\"/tmp/logs/1113.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"EVENT: %s\\n\", event);\n    fprintf(f, \" token_ptr=%p stream_ptr=%p\\n\", token_ptr, stream_ptr);\n    fprintf(f, \" stream->socket_type=%d stream->socket_domain=%d\\n\", socket_type_val, socket_domain_val);\n    fprintf(f, \" resolved: os_domain=%d os_type=%d os_proto=%d\\n\", os_domain, os_type, os_proto);\n    fprintf(f, \" os_flags=%d os_flags_addr=%p\\n\", os_flags_val, os_flags_addr);\n    fprintf(f, \" socket fd=%d setsockopt_res=%d errno=%d\\n\", fd_val, setsockopt_res, errno);\n    fprintf(f, \"------------------------------------------------------------\\n\");\n\n    fclose(f);\n}\n\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    /* Log entry with initial object pointers and stream fields */\n    OS_SocketOpen_Log(\"entry\",\n                      (const void *)token,\n                      (const void *)stream,\n                      stream ? stream->socket_type : -1,\n                      stream ? stream->socket_domain : -1,\n                      -1, -1, -1,\n                      -1, NULL,\n                      -1, 0);\n\n    os_proto = 0;\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            break;\n\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Log after resolving socket type/proto */\n    OS_SocketOpen_Log(\"after_socket_type_resolve\",\n                      (const void *)token,\n                      (const void *)stream,\n                      stream->socket_type,\n                      stream->socket_domain,\n                      -1, os_type, os_proto,\n                      -1, NULL,\n                      -1, 0);\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            break;\n#endif\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Log after resolving domain */\n    OS_SocketOpen_Log(\"after_socket_domain_resolve\",\n                      (const void *)token,\n                      (const void *)stream,\n                      stream->socket_type,\n                      stream->socket_domain,\n                      os_domain, os_type, os_proto,\n                      -1, NULL,\n                      -1, 0);\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (impl->fd < 0)\n    {\n        /* Log socket creation failure */\n        OS_SocketOpen_Log(\"socket_creation_failed\",\n                          (const void *)token,\n                          (const void *)stream,\n                          stream->socket_type,\n                          stream->socket_domain,\n                          os_domain, os_type, os_proto,\n                          -1, NULL,\n                          impl->fd, errno);\n\n        return OS_ERROR;\n    }\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n\n    /* Log immediately before calling setsockopt so we capture the non-const local variable and its address */\n    OS_SocketOpen_Log(\"before_setsockopt\",\n                      (const void *)token,\n                      (const void *)stream,\n                      stream->socket_type,\n                      stream->socket_domain,\n                      os_domain, os_type, os_proto,\n                      os_flags, (const void *)&os_flags,\n                      impl->fd, 0);\n\n    /* Capture setsockopt result for logging, but do not alter existing behavior (failure is ignored). */\n    int setsockopt_res = setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    /* Log after setsockopt to record the return value and errno (if any) */\n    OS_SocketOpen_Log(\"after_setsockopt\",\n                      (const void *)token,\n                      (const void *)stream,\n                      stream->socket_type,\n                      stream->socket_domain,\n                      os_domain, os_type, os_proto,\n                      os_flags, (const void *)&os_flags,\n                      impl->fd, setsockopt_res);\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    /* Final log before returning success */\n    OS_SocketOpen_Log(\"return_success\",\n                      (const void *)token,\n                      (const void *)stream,\n                      stream->socket_type,\n                      stream->socket_domain,\n                      os_domain, os_type, os_proto,\n                      os_flags, (const void *)&os_flags,\n                      impl->fd, 0);\n\n    return OS_SUCCESS;\n}\n"
}