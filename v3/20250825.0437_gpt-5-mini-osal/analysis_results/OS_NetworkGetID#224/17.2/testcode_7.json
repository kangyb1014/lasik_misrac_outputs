{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: if UT_ExecuteBasicHandler is passed as the DefaultHandler (and no final handler is already registered for FuncKey), the function will call UT_SetHandlerFunction to register itself as the final handler and then call UT_DefaultStubImpl, which will invoke the registered final handler. This yields the call chain UT_ExecuteBasicHandler -> UT_DefaultStubImpl -> (invoke final handler) -> UT_ExecuteBasicHandler, i.e. indirect self-call/recursion, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetID code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2246.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NetworkGetID as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetID:\n```c\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n\n    /* always delegate to low-level API */\n    if (OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS)\n    {\n        /* return a hardcoded value on failure */\n        return -1;\n    }\n\n    return IdBuf;\n}\n```\n</target_code>\nPlease provide the modified OS_NetworkGetID code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helpers. These are inserted to capture control flow and\n * state information to /tmp/logs/2246.txt. They are written as static\n * functions so as not to change external linkage or the original logic.\n */\nstatic void UT_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2246.txt\", \"a\");\n\n    if (fp == NULL)\n    {\n        /* If logging is not available, fail silently to preserve original behavior */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n\n    /* Log entry and initial state */\n    UT_Log(\"ENTER: OS_NetworkGetID\");\n\n    /* always delegate to low-level API */\n    if (OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS)\n    {\n        /* Log failure and returned hardcoded value */\n        UT_Log(\"OS_NetworkGetID_Impl failed: returning -1\");\n        /* return a hardcoded value on failure */\n        return -1;\n    }\n\n    /* Log the successful result value before returning */\n    UT_Log(\"OS_NetworkGetID_Impl succeeded: IdBuf=%ld\", (long)IdBuf);\n    UT_Log(\"EXIT: OS_NetworkGetID returning %ld\", (long)IdBuf);\n\n    return IdBuf;\n}\n"
}