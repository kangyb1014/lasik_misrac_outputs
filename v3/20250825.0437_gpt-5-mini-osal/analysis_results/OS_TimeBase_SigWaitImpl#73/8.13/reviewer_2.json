{
  "user_message": "An agent A claimed that the following OS_TimeBase_SigWaitImpl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_TimeBase_SigWaitImpl.\n```c\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n        }\n    }\n\n    return interval_time;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'timebase' is declared as OS_timebase_internal_record_t * but is only used for read access (reading nominal_start_time/nominal_interval_time). It could/should be declared as pointer to const (const OS_timebase_internal_record_t *timebase = OS_OBJECT_TABLE_GET(...)) so the pointer points to a const-qualified type. Therefore the use of timebase->nominal_start_time in the fragment violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TimeBase_SigWaitImpl:\ntypedef struct\n{\n    pthread_t       handler_thread;\n    pthread_mutex_t handler_mutex;\n    timer_t         host_timerid;\n    int             assigned_signal;\n    sigset_t        sigset;\n    sig_atomic_t    reset_flag;\n    struct timespec softsleep;\n} OS_impl_timebase_internal_record_t\n...\ntypedef struct\n{\n    char           timebase_name[OS_MAX_API_NAME];\n    OS_TimerSync_t external_sync;\n    uint32         accuracy_usec;\n    osal_id_t      first_cb;\n    uint32         freerun_time;\n    uint32         nominal_start_time;\n    uint32         nominal_interval_time;\n} OS_timebase_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_timebase_internal_record_t OS_impl_timebase_table[OS_MAX_TIMEBASES]\n...\nextern OS_timebase_internal_record_t OS_timebase_table[OS_MAX_TIMEBASES]\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In the function the local pointer timebase is only used to read fields (nominal_interval_time and nominal_start_time) and is never used to modify the underlying object. Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so declaring it as const OS_timebase_internal_record_t *timebase would be appropriate. Assigning &OS_timebase_table[...] (a pointer to a non-const object) to a pointer to const is allowed in C, and there is no other usage in this function that requires a non-const pointer. Therefore the agent A report is correct \u2014 this is a violation (the pointer should be const-qualified)."
}