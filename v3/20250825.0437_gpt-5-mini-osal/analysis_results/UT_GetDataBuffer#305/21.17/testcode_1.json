{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.Position is greater than StubPtr->Data.Buff.TotalSize (e.g. due to prior corruption or a logic bug), the expression TotalSize - Position will underflow producing a very large ActualCopy. Even though ActualCopy is later limited by MaxSize, the initial underflow can make memcpy() copy more bytes than the destination buffer can hold, causing an out-of-bounds access. There is no explicit check that Position <= TotalSize before the subtraction, so an out-of-bounds write is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3059.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe helper: log the stub data buffer state to /tmp/logs/3059.txt.\n * This function preserves program behavior and only emits diagnostics.\n */\nstatic void UT_LogDataBufferState(const void *stub_ptr,\n                                  void *resultDataBuffer,\n                                  size_t resultMaxSize,\n                                  size_t resultPosition)\n{\n    /* Ensure log directory exists; ignore errors if it does not. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/3059.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging is unavailable, do not change behavior. */\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"--- UT_GetDataBuffer probe @ %ld ---\\n\", (long)t);\n    fprintf(f, \"StubPtr: %p\\n\", stub_ptr);\n    fprintf(f, \"ResultDataBuffer: %p\\n\", resultDataBuffer);\n    fprintf(f, \"ResultMaxSize: %zu\\n\", resultMaxSize);\n    fprintf(f, \"ResultPosition: %zu\\n\", resultPosition);\n\n    /* Show both signed difference and the unsigned result (which would underflow). */\n    long long diff_signed = (long long)resultMaxSize - (long long)resultPosition;\n    unsigned long long diff_unsigned = (unsigned long long)(resultMaxSize - resultPosition);\n\n    fprintf(f, \"Computed (signed) MaxSize - Position = %lld\\n\", diff_signed);\n    fprintf(f, \"Computed (unsigned) MaxSize - Position = %llu\\n\", diff_unsigned);\n\n    if ((size_t)resultPosition > resultMaxSize)\n    {\n        fprintf(f, \"WARNING: Position > TotalSize (possible corruption or logic bug)\\n\");\n        fprintf(f, \"This can cause an unsigned underflow if used directly in size computations.\\n\");\n    }\n\n    fprintf(f, \"Will write to output pointers (DataBuffer/MaxSize/Position) if non-NULL.\\n\");\n    fprintf(f, \"--- end probe ---\\n\\n\");\n    fclose(f);\n}\n\n/* Original function with added logging probe. Logic and assignments are unchanged. */\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Emit diagnostic information for downstream analysis; does not change behavior. */\n    UT_LogDataBufferState((const void *)StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition);\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n"
}