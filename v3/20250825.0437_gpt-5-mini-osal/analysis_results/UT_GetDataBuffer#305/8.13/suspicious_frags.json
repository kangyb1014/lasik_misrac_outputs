{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "UT_StubTableEntry_t *StubPtr;",
    "StubPtr->Data.Buff.BasePtr",
    "ResultDataBuffer = StubPtr->Data.Buff.BasePtr;",
    "if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }",
    "void *               ResultDataBuffer;",
    "void UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)"
  ],
  "explanation": "Fragments not listed are not relevant to Rule 8.13 (pointer should point to a const-qualified type whenever possible):\n- The parameters MaxSize and Position (size_t *MaxSize, size_t *Position) are output parameters that the function writes to; these must be non-const pointers to allow modification, so they should not be changed to point-to-const types.\n- Local scalar variables (ResultMaxSize, ResultPosition) and their assignments do not involve pointer-to-object const qualification and thus are not relevant.\n- NULL checks, control flow (if/else), and simple assignments of size_t values are not related to making pointer targets const-qualified.\n- The FuncKey parameter is a value (not a pointer) and not subject to pointer const-qualification.\n- Calls such as UT_GetStubEntry(...) are fine to inspect only insofar as their returned pointer is used; the returned-pointer usage is covered by the included StubPtr-related fragments.\nGiven Rule 8.13, the investigation should focus on the places where non-const pointers to data are declared or assigned (the fragments listed)."
}