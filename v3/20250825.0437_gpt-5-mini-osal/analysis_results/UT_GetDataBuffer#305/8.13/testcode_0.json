{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_GetDataBuffer the local pointer StubPtr is only used to read members (StubPtr->Data.Buff.BasePtr, TotalSize, Position). Therefore it could and should be declared as pointing to a const-qualified type (const UT_StubTableEntry_t *StubPtr). Declaring it as a non-const pointer when only read access is required violates MISRA C 2023 Rule 8.13. Note: UT_GetStubEntry may return a non-const pointer, but assigning that to a pointer-to-const is allowed and preferred here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3053.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe/logging helper: write an append-only log to /tmp/logs/3053.txt\n * This function is static so it does not add external linkage. It attempts\n * to create the /tmp/logs directory if necessary. It does not alter any\n * program state; it only observes and logs the values provided by the\n * caller. */\nstatic void UT_Log_GetDataBuffer(void *FuncKey_as_ptr,\n                                 const void *StubPtr_as_ptr,\n                                 const void *ResultDataBuffer,\n                                 size_t ResultMaxSize,\n                                 size_t ResultPosition,\n                                 const void *DataBuffer_as_ptr,\n                                 const void *MaxSize_as_ptr,\n                                 const void *Position_as_ptr)\n{\n    FILE *fp = NULL;\n    int mkerr;\n\n    /* Ensure directory exists; ignore errors if it already exists. */\n    mkerr = mkdir(\"/tmp/logs\", 0777);\n    (void)mkerr; /* suppress unused-value warnings if compiled with strict flags */\n\n    fp = fopen(\"/tmp/logs/3053.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only; do not change program behavior */\n    }\n\n    /* Timestamp for easier correlation */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(fp, \"[%s] \", timestr);\n            }\n        }\n    }\n\n    /* Log the observed control flow and state. Cast FuncKey to pointer-sized value\n     * for printing since the actual typedef of UT_EntryKey_t is not known here. */\n    fprintf(fp,\n            \"UT_GetDataBuffer called: FuncKey=%p, StubPtr=%p, ResultDataBuffer=%p, ResultMaxSize=%zu, ResultPosition=%zu, DataBuffer_ptr=%p, MaxSize_ptr=%p, Position_ptr=%p\\n\",\n            FuncKey_as_ptr,\n            StubPtr_as_ptr,\n            ResultDataBuffer,\n            ResultMaxSize,\n            ResultPosition,\n            DataBuffer_as_ptr,\n            MaxSize_as_ptr,\n            Position_as_ptr);\n\n    fflush(fp);\n    fclose(fp);\n}\n\n/* Original function with probes inserted. Note: types UT_EntryKey_t and\n * UT_StubTableEntry_t are assumed to be declared elsewhere in the project.\n * This function preserves the original control flow and assignments. */\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Log the control path and the observed state so other agents can reproduce\n     * and gather evidence for the reported Rule 8.13 scenario. Cast FuncKey to\n     * void* for generic printing. We pass StubPtr as const void* to indicate it\n     * is observed only; the original pointer itself is left unchanged. */\n    UT_Log_GetDataBuffer((void *)((uintptr_t)FuncKey), /* FuncKey as pointer-sized value */\n                         (const void *)StubPtr,\n                         ResultDataBuffer,\n                         ResultMaxSize,\n                         ResultPosition,\n                         (const void *)DataBuffer,\n                         (const void *)MaxSize,\n                         (const void *)Position);\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n"
}