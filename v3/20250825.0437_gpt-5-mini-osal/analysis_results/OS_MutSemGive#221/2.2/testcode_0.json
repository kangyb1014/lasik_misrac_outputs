{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call/assignment self_task = OS_TaskGetId() is only used in the subsequent if condition that only controls an OS_DEBUG() logging statement. OS_DEBUG is defined as an empty macro and OS_ObjectIdEqual/OS_ObjectIdToInteger have no side effects, so the value fetched into self_task is never used in any observable behaviour. Therefore the assignment (and the call) can be removed without changing program behaviour \u2014 this is dead code. (Note: if OS_TaskGetId_Impl had observable side effects, then the call would not be dead; based on the provided definitions it does not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGive code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2212.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGive as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGive:\n```c\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGive code.\n",
  "test_code": "int32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Probe: log entry and initial outcome of OS_ObjectIdGetById */\n    {\n        FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_MutSemGive: entered with sem_id=%lu, initial_return_code=%ld\\n\", (unsigned long)sem_id, (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Capture the calling task id as in original code */\n        self_task = OS_TaskGetId();\n\n        /* Evaluate ownership comparison once and reuse for both behavior and logging */\n        int owner_equal = OS_ObjectIdEqual(mutex->last_owner, self_task);\n\n        /* Probe: log mutex state and ownership comparison before any modification */\n        {\n            FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_MutSemGive: token=%lu, mutex_ptr=%p, last_owner=%lu, self_task=%lu, owner_equal=%d\\n\",\n                        (unsigned long)token, (void *)mutex,\n                        (unsigned long)OS_ObjectIdToInteger(mutex->last_owner),\n                        (unsigned long)OS_ObjectIdToInteger(self_task), owner_equal);\n                fclose(log);\n            }\n        }\n\n        if (!owner_equal)\n        {\n            /* Preserve original debug behavior (may be empty macro) */\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n\n            /* Probe: log the warning situation to the file for evidence */\n            {\n                FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_MutSemGive: WARNING logged -> task=%lu giving mutex=%lu while owned_by=%lu\\n\",\n                            (unsigned long)OS_ObjectIdToInteger(self_task), (unsigned long)OS_ObjectIdToInteger(sem_id),\n                            (unsigned long)OS_ObjectIdToInteger(mutex->last_owner));\n                    fclose(log);\n                }\n            }\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n\n        /* Probe: log result of implementation call */\n        {\n            FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_MutSemGive: after Impl call, return_code=%ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Probe: log failure to get object by id */\n        FILE *log = fopen(\"/tmp/logs/2212.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_MutSemGive: OS_ObjectIdGetById failed for sem_id=%lu, return_code=%ld\\n\", (unsigned long)sem_id, (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}