{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen OS_DEBUG is defined as an empty macro (as shown: #define OS_DEBUG(__VA_ARGS__) ), the if-body is compiled out and the only executed operation is the conditional test (!OS_ObjectIdEqual(...)). OS_ObjectIdEqual and OS_ObjectIdToInteger are pure reads with no side-effects, so the conditional and its evaluation have no effect on program state. Removing the if and its evaluation would not change program behaviour (aside from timing), therefore this constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGive code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2212.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGive as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGive:\n```c\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGive code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append formatted logs to /tmp/logs/2212.txt */\nstatic void OS_MutSemGive_Logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2212.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Log entry */\n    OS_MutSemGive_Logf(\"OS_MutSemGive: entry sem_id=%lu\\n\", (unsigned long)OS_ObjectIdToInteger(sem_id));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ID lookup */\n    OS_MutSemGive_Logf(\"OS_MutSemGive: OS_ObjectIdGetById returned %ld for sem_id=%lu\\n\",\n                       (long)return_code, (unsigned long)OS_ObjectIdToInteger(sem_id));\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        /* Log current owner state before the check */\n        OS_MutSemGive_Logf(\"OS_MutSemGive: mutex=%p last_owner=%lu self_task=%lu\\n\",\n                           (void *)mutex,\n                           (unsigned long)OS_ObjectIdToInteger(mutex->last_owner),\n                           (unsigned long)OS_ObjectIdToInteger(self_task));\n\n        /* Evaluate condition and log its result (probe for potential dead-code scenario) */\n        {\n            int owner_mismatch = !OS_ObjectIdEqual(mutex->last_owner, self_task);\n            OS_MutSemGive_Logf(\"OS_MutSemGive: condition (!OS_ObjectIdEqual(last_owner, self_task)) evaluated to %d\\n\",\n                               owner_mismatch);\n        }\n\n        /* Original debug warning (may be compiled out if OS_DEBUG is defined empty) */\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n\n        /* Log implementation result */\n        OS_MutSemGive_Logf(\"OS_MutSemGive: OS_MutSemGive_Impl returned %ld for sem_id=%lu\\n\",\n                           (long)return_code, (unsigned long)OS_ObjectIdToInteger(sem_id));\n    }\n\n    /* Log exit */\n    OS_MutSemGive_Logf(\"OS_MutSemGive: exit sem_id=%lu return_code=%ld\\n\",\n                       (unsigned long)OS_ObjectIdToInteger(sem_id), (long)return_code);\n\n    return return_code;\n}\n"
}