{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nUtTest_Run invokes a function pointer (UtTestDataBaseEntry->Setup()). If that pointer were set to point to UtTest_Run itself (or to a function chain that eventually calls UtTest_Run), UtTest_Run would indirectly call itself, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Merge code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2946.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Merge as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Merge:\n```c\nvoid UtList_Merge(UtListNode_t *TagHead1, UtListNode_t *TagHead2)\n{\n    UtListNode_t *Tail1 = TagHead1->Prev;\n    UtListNode_t *Tail2 = TagHead2->Prev;\n\n    Tail1->Next    = TagHead2;\n    Tail2->Next    = TagHead1;\n    TagHead1->Prev = Tail2;\n    TagHead2->Prev = Tail1;\n}\n```\n</target_code>\nPlease provide the modified UtList_Merge code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n\n/*\n * Minimal list node definition to allow standalone compilation of this test probe.\n * In integration into the original codebase this definition should match the\n * project's definition of UtListNode_t. The logic of UtList_Merge is preserved\n * exactly; added logging probes write state transitions to /tmp/logs/2946.txt.\n */\ntypedef struct UtListNode\n{\n    struct UtListNode *Next;\n    struct UtListNode *Prev;\n} UtListNode_t;\n\nstatic FILE *OpenLog(void)\n{\n    FILE *fp = fopen(\"/tmp/logs/2946.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* Try to create parent directory and retry */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        fp = fopen(\"/tmp/logs/2946.txt\", \"a\");\n    }\n    return fp;\n}\n\nstatic void LogNodeDescriptor(FILE *fp, const char *label, const UtListNode_t *node)\n{\n    if (fp == NULL || node == NULL)\n    {\n        return;\n    }\n    fprintf(fp, \"%s: node=%p, Next=%p, Prev=%p\\n\", label, (void *)node, (void *)node->Next, (void *)node->Prev);\n}\n\nstatic void LogAction(FILE *fp, const char *action)\n{\n    if (fp == NULL)\n    {\n        return;\n    }\n    fprintf(fp, \"Action: %s\\n\", action);\n}\n\nvoid UtList_Merge(UtListNode_t *TagHead1, UtListNode_t *TagHead2)\n{\n    FILE *log = OpenLog();\n    fprintf(log, \"--- UtList_Merge ENTRY ---\\n\");\n    LogNodeDescriptor(log, \"TagHead1 (entry)\", TagHead1);\n    LogNodeDescriptor(log, \"TagHead2 (entry)\", TagHead2);\n\n    UtListNode_t *Tail1 = TagHead1->Prev;\n    UtListNode_t *Tail2 = TagHead2->Prev;\n\n    LogNodeDescriptor(log, \"Tail1 (computed)\", Tail1);\n    LogNodeDescriptor(log, \"Tail2 (computed)\", Tail2);\n\n    /* Perform merge operations exactly as original; log before/after each step. */\n    LogAction(log, \"Setting Tail1->Next = TagHead2\");\n    Tail1->Next = TagHead2;\n    LogNodeDescriptor(log, \"Tail1 (after Tail1->Next=TagHead2)\", Tail1);\n    LogNodeDescriptor(log, \"TagHead2 (after Tail1->Next=TagHead2)\", TagHead2);\n\n    LogAction(log, \"Setting Tail2->Next = TagHead1\");\n    Tail2->Next = TagHead1;\n    LogNodeDescriptor(log, \"Tail2 (after Tail2->Next=TagHead1)\", Tail2);\n    LogNodeDescriptor(log, \"TagHead1 (after Tail2->Next=TagHead1)\", TagHead1);\n\n    LogAction(log, \"Setting TagHead1->Prev = Tail2\");\n    TagHead1->Prev = Tail2;\n    LogNodeDescriptor(log, \"TagHead1 (after TagHead1->Prev=Tail2)\", TagHead1);\n\n    LogAction(log, \"Setting TagHead2->Prev = Tail1\");\n    TagHead2->Prev = Tail1;\n    LogNodeDescriptor(log, \"TagHead2 (after TagHead2->Prev=Tail1)\", TagHead2);\n\n    fprintf(log, \"--- UtList_Merge EXIT ---\\n\\n\");\n    if (log != NULL)\n    {\n        fclose(log);\n    }\n}\n"
}