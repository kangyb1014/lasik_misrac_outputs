{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_NetworkAPI_Init is invoked from OS_API_Init but its body only returns the constant OS_SUCCESS and produces no side-effects. The executed operation (the call/return) can be removed or replaced by directly assigning OS_SUCCESS at the call site without changing program behaviour, so this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3372.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Forward declarations of external test functions. These are provided\n * elsewhere in the test harness. We only declare them here so that the\n * instrumentation can call them and preserve original behaviour.\n */\nextern void UtTest_EarlyInit(void);\nextern void UT_BSP_Setup(void);\nextern void UtAssert_BeginTest(const char *TestName);\nextern void UtTest_Setup(void);\nextern void UtAssert_EndTest(void);\n\n/* Simple file-backed logger that appends human-readable trace lines to\n * /tmp/logs/3372.txt. The logger records entry/exit of each major call\n * and timestamps so other agents can reproduce the control flow and\n * state transitions relevant to the reported violation scenario.\n */\nstatic FILE *g_log_file = NULL;\n\nstatic void log_open(void)\n{\n    if (g_log_file != NULL)\n    {\n        return; /* already opened */\n    }\n\n    g_log_file = fopen(\"/tmp/logs/3372.txt\", \"a\");\n    if (g_log_file != NULL)\n    {\n        time_t t = time(NULL);\n        char buf[64];\n        struct tm *tm = localtime(&t);\n        if (tm != NULL)\n        {\n            strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm);\n            fprintf(g_log_file, \"\\n---- Log start: %s ----\\n\", buf);\n        }\n        else\n        {\n            fprintf(g_log_file, \"\\n---- Log start: (time unavailable) ----\\n\");\n        }\n        fflush(g_log_file);\n    }\n}\n\nstatic void log_close(void)\n{\n    if (g_log_file != NULL)\n    {\n        fprintf(g_log_file, \"---- Log end ----\\n\\n\");\n        fclose(g_log_file);\n        g_log_file = NULL;\n    }\n}\n\nstatic void log_printf(const char *fmt, ...)\n{\n    if (g_log_file == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(g_log_file, fmt, ap);\n    va_end(ap);\n    fprintf(g_log_file, \"\\n\");\n    fflush(g_log_file);\n}\n\n/* probe_call: call a void(void) function while logging entry/exit\n * information. This preserves original semantics while providing a clear\n * trace of the control flow through OS_Application_Startup and its\n * subcalls. Using a function pointer avoids changing the called\n * function's identity (no renaming); the call order and side-effects\n * remain unchanged.\n */\nstatic void probe_call(const char *name, void (*fn)(void))\n{\n    if (g_log_file != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(g_log_file, \"[%ld] ENTER: %s\", (long)t, name);\n        fflush(g_log_file);\n    }\n\n    if (fn != NULL)\n    {\n        fn(); /* preserve original behaviour */\n    }\n\n    if (g_log_file != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(g_log_file, \"[%ld] EXIT : %s\", (long)t, name);\n        fflush(g_log_file);\n    }\n}\n\n/* Instrumented OS_Application_Startup. The original logic is preserved;\n * calls are wrapped with probe_call and additional log lines are added\n * around the UtAssert_BeginTest/U tTest_Setup/U tAssert_EndTest block so\n * that other agents can observe the exact sequence and timing.\n */\nvoid OS_Application_Startup(void)\n{\n    /* Open log file first so we capture early initialization. */\n    log_open();\n    log_printf(\"OS_Application_Startup: ENTRY\");\n\n    /* Early initialization (wrapped for logging) */\n    probe_call(\"UtTest_EarlyInit\", (void (*)(void))UtTest_EarlyInit);\n\n    /* BSP setup (wrapped for logging) */\n    probe_call(\"UT_BSP_Setup\", (void (*)(void))UT_BSP_Setup);\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    log_printf(\"About to call UtAssert_BeginTest(\\\"SETUP\\\")\");\n    UtAssert_BeginTest(\"SETUP\");\n    log_printf(\"Called UtAssert_BeginTest(\\\"SETUP\\\")\");\n\n    /* Setup (wrapped for logging) */\n    probe_call(\"UtTest_Setup\", (void (*)(void))UtTest_Setup);\n\n    UtAssert_EndTest();\n    log_printf(\"Called UtAssert_EndTest()\");\n\n    log_printf(\"OS_Application_Startup: EXIT\");\n    log_close();\n}\n"
}