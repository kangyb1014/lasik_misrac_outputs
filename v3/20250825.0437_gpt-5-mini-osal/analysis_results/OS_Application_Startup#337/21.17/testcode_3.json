{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIn UtList_Create ActualSize bytes are requested via malloc into NewList, but the code calls memset(NewList, 0, ActualSize) without checking the result of malloc. If malloc() fails and returns NULL, calling memset(NULL, ActualSize) will access memory beyond the bounds of the (nonexistent) object and cause undefined behavior. This situation violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Forward declarations for external functions used by the original code. */\nextern void UtTest_EarlyInit(void);\nextern void UT_BSP_Setup(void);\nextern void UtAssert_BeginTest(const char *);\nextern void UtTest_Setup(void);\nextern void UtAssert_EndTest(void);\n\n/* Helper to ensure the log directory exists. */\nstatic void ensure_log_dir(void)\n{\n    /* Attempt to create /tmp/logs if it does not exist. Ignore errors if already exists. */\n    (void) mkdir(\"/tmp/logs\", (mode_t)0700);\n}\n\n/* Helper to write a single log line (always flushes). */\nstatic void write_log_line(FILE *log, const char *msg)\n{\n    if (log != NULL)\n    {\n        (void) fprintf(log, \"%s\\n\", msg);\n        (void) fflush(log);\n    }\n}\n\nvoid OS_Application_Startup(void)\n{\n    FILE *log = NULL;\n\n    /* Try to open the log file for append. If the directory does not exist, try to create it. */\n    log = fopen(\"/tmp/logs/3379.txt\", \"a\");\n    if (log == NULL)\n    {\n        ensure_log_dir();\n        log = fopen(\"/tmp/logs/3379.txt\", \"a\");\n    }\n\n    write_log_line(log, \"OS_Application_Startup: ENTER\");\n\n    write_log_line(log, \"About to call UtTest_EarlyInit()\");\n    UtTest_EarlyInit();\n    write_log_line(log, \"Returned from UtTest_EarlyInit()\");\n\n    write_log_line(log, \"About to call UT_BSP_Setup()\");\n    UT_BSP_Setup();\n    write_log_line(log, \"Returned from UT_BSP_Setup()\");\n\n    write_log_line(log, \"About to call UtAssert_BeginTest(\\\"SETUP\\\")\");\n    UtAssert_BeginTest(\"SETUP\");\n    write_log_line(log, \"Returned from UtAssert_BeginTest(\\\"SETUP\\\")\");\n\n    /* Log immediately before the potentially-failing setup so a crash inside\n     * UtTest_Setup (for example, due to a failed malloc in UtList_Create)\n     * will be evident by the last log entry. */\n    write_log_line(log, \"About to call UtTest_Setup()\");\n    UtTest_Setup();\n    write_log_line(log, \"Returned from UtTest_Setup()\");\n\n    write_log_line(log, \"About to call UtAssert_EndTest()\");\n    UtAssert_EndTest();\n    write_log_line(log, \"Returned from UtAssert_EndTest()\");\n\n    write_log_line(log, \"OS_Application_Startup: EXIT\");\n\n    if (log != NULL)\n    {\n        (void) fclose(log);\n    }\n}\n"
}