{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_timecb_table is not a complete object/array with size at least sizeof(OS_timecb_table) (for example it is an uninitialized or NULL pointer, or a pointer to a smaller allocated buffer: e.g. declared as OS_timecb_t *OS_timecb_table and not pointing to a sufficiently large allocation), then calling memset(OS_timecb_table, 0, sizeof(OS_timecb_table)) can write outside the bounds of the referenced object and thus violate MISRA C 2023 Rule 21.17. (If, however, OS_timecb_table is a properly sized array or struct object, the call is safe.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <time.h>\n\n/* External symbols used by the application. These are declared here so\n * the probe logging can observe their runtime values. The real\n * definitions are expected to exist in other translation units. */\nextern void UtTest_EarlyInit(void);\nextern void UT_BSP_Setup(void);\nextern void UtAssert_BeginTest(const char *name);\nextern void UtTest_Setup(void);\nextern void UtAssert_EndTest(void);\n\n/* Declare the symbol referenced in the violation scenario. The actual\n * definition of OS_timecb_table may be an array or a pointer defined\n * elsewhere. Declaring it as a generic pointer here lets the probe log\n * the runtime address and a NULL check. */\nextern void *OS_timecb_table;\n\n/* Helper: append a probe entry to the log file. This function is safe\n * and performs only non-intrusive observations (address, NULL check,\n * sizes) \u2014 it does not dereference the pointer or modify program\n * state. */\nstatic void probe_log_state(const char *event)\n{\n    FILE *f = fopen(\"/tmp/logs/3379.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log file can't be opened we silently return to avoid\n         * changing program behavior. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    (void)fprintf(f, \"[%ld] EVENT: %s\\n\", (long)t, event);\n\n    /* Record the raw pointer value and a NULL check. Do NOT dereference. */\n    (void)fprintf(f, \"  OS_timecb_table pointer = %p\\n\", OS_timecb_table);\n    (void)fprintf(f, \"  OS_timecb_table is %s\\n\", (OS_timecb_table == NULL) ? \"NULL\" : \"non-NULL\");\n\n    /* Log the compile-time sizeof of the declaration visible here. If\n     * the real definition is an array in another TU, sizeof here will\n     * reflect the type used in this TU (pointer size). This difference\n     * is precisely the kind of mismatch that can lead to the\n     * MISRA Rule 21.17 scenario, so we record it for diagnosis. */\n    (void)fprintf(f, \"  sizeof(OS_timecb_table) in this TU = %zu\\n\", sizeof(OS_timecb_table));\n\n    /* Additional contextual information to help trace control flow. */\n    (void)fprintf(f, \"  probe completed for event '%s'\\n\\n\", event);\n    fclose(f);\n}\n\nvoid OS_Application_Startup(void)\n{\n    /* Log entry to startup. Keep original logic and call order intact, but\n     * capture state before and after the critical setup phase so a\n     * reproducer can inspect OS_timecb_table and the sequence that\n     * triggers any problematic library calls. */\n    probe_log_state(\"OS_Application_Startup entry\");\n\n    UtTest_EarlyInit();\n    probe_log_state(\"after UtTest_EarlyInit\");\n\n    UT_BSP_Setup();\n    probe_log_state(\"after UT_BSP_Setup\");\n\n    /* Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup */\n    UtAssert_BeginTest(\"SETUP\");\n\n    /* Log right before calling the setup helper that may perform\n     * string/memory operations. This is where a call such as\n     * memset(OS_timecb_table, 0, sizeof(OS_timecb_table)) would be\n     * observed by the log if it occurs later; the log contains the\n     * pointer value and the sizeof() value visible in this TU. */\n    probe_log_state(\"before UtTest_Setup\");\n\n    UtTest_Setup();\n\n    probe_log_state(\"after UtTest_Setup\");\n    UtAssert_EndTest();\n\n    probe_log_state(\"OS_Application_Startup exit\");\n}\n"
}