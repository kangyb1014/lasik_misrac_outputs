{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete_Impl:\n```c\nint32 OS_CondVarDelete_Impl(const OS_object_token_t *token)\n{\n    int32                              final_status;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    final_status = OS_SUCCESS;\n    impl         = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_cond_destroy(&impl->cv);\n    if (status != 0)\n    {\n        final_status = OS_ERROR;\n    }\n\n    status = pthread_mutex_destroy(&impl->mut);\n    if (status != 0)\n    {\n        final_status = OS_ERROR;\n    }\n\n    return final_status;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarDelete_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\ntypedef int32_t   int32\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions were identified in the provided code fragments. Explanation by element:\n\n- OS_CondVarDelete_Impl body: uses standard C constructs (local variables, function calls, address-of, array indexing, if statements, return). The calls to pthread_cond_destroy and pthread_mutex_destroy are POSIX library calls (not language extensions).\n\n- Macro OS_OBJECT_TABLE_GET: a preprocessor macro using array indexing and address-of is standard C preprocessor usage, not a compiler language extension.\n\n- Use of types and typedefs (int32 from int32_t, pthread types, struct declarations) are standard C or standard library/POSIX types, not compiler extensions.\n\n- The inline helper: static inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token) uses the C inline keyword. inline (and static inline) is part of standard C99 and later; absent additional compiler-specific keywords (for example __inline__ or other vendor-specific modifiers), this is not a compiler extension in the code shown.\n\n- No occurrences of typical compiler-specific extensions were found (examples of such extensions that would be flagged: __attribute__ ((...)), __asm__, typeof, __extension__, gcc-specific builtins, Microsoft-specific keywords like __declspec, VLA usage flagged only if the compiler documents them as extensions, etc.).\n\nBecause none of those or any other documented compiler-specific language extensions appear in the supplied code, there are no fragments that need to be investigated for MISRA C 2023 Rule 1.2 based on the provided sources."
}