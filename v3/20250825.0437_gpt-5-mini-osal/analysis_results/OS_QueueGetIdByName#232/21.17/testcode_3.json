{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_QueueGetIdByName only checks that queue_name is non-NULL (via OS_CHECK_POINTER) and then forwards it to OS_ObjectIdFindByName. Inside OS_ObjectIdFindByName the macros ARGCHECK / LENGTHCHECK are used to validate the name; LENGTHCHECK typically relies on string length operations (e.g. strlen) to enforce a maximum length. If queue_name is a non-NULL pointer that is not a properly NUL-terminated C string (or otherwise not contained within a sufficiently large object), any call to strlen/related <string.h> functions inside OS_ObjectIdFindByName may read past the bounds of the underlying object and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2329.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetIdByName:\n```c\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Minimal type definitions to allow this file to compile standalone. */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\n\n/* Minimal return code definitions to emulate typical OSAL behavior. */\nenum\n{\n    OS_SUCCESS = 0,\n    OS_INVALID_POINTER = -1\n};\n\n/* These symbols are part of the surrounding system and are referenced here\n * to preserve the original call structure. They are declared extern so this\n * test file can be compiled/linked in the larger project. */\nextern int32 OS_ObjectIdFindByName(int32 local_obj_type, const char *name, osal_id_t *id);\nextern const int32 LOCAL_OBJID_TYPE;\n\n/* Simple logging helper that appends messages to /tmp/logs/2329.txt. */\nstatic void os_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2329.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, fail silently to avoid changing behavior. */\n        return;\n    }\n\n    /* Timestamp the entry. */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) == NULL)\n    {\n        fprintf(f, \"[unknown-time] \");\n    }\n    else\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"%s \", timestr);\n        }\n        else\n        {\n            fprintf(f, \"[time-format-failed] \");\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified OS_QueueGetIdByName with probes that log control flow and state\n * information to /tmp/logs/2329.txt. The original logic is preserved as\n * much as possible: pointers are checked and the call to\n * OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, ...) is left intact.\n *\n * Note: This file intentionally does not define OS_CHECK_POINTER macros or\n * other project-specific macros; instead it performs equivalent pointer\n * checks so it can compile as a standalone testable unit.\n */\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Log entry and the raw pointer values we received. */\n    os_log(\"Entered OS_QueueGetIdByName: queue_id=%p, queue_name=%p\", (void *)queue_id, (const void *)queue_name);\n\n    /* Check Parameters (mirror semantics of original OS_CHECK_POINTER as closely as reasonable here). */\n    if (queue_id == NULL)\n    {\n        os_log(\"Parameter check failed: queue_id is NULL\");\n        return OS_INVALID_POINTER;\n    }\n\n    if (queue_name == NULL)\n    {\n        os_log(\"Parameter check failed: queue_name is NULL\");\n        return OS_INVALID_POINTER;\n    }\n\n    /* At this point we have a non-NULL queue_name pointer. We intentionally\n     * do not dereference or attempt to measure the length of the string here\n     * (e.g. via strlen) because that may itself read beyond the bounds of the\n     * underlying object if the caller supplied a non-NUL-terminated pointer.\n     * Instead we log that we are forwarding the pointer to\n     * OS_ObjectIdFindByName so that a downstream read/strlen inside that\n     * function (which would be the violating behavior described) can be\n     * observed and correlated with these logs. */\n    os_log(\"Forwarding queue_name pointer to OS_ObjectIdFindByName: queue_name=%p\", (const void *)queue_name);\n\n    /* Preserve original call: forward the name to the object-id lookup routine. */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    /* Log the result of the lookup. If successful, also log the found id. */\n    if (return_code == OS_SUCCESS)\n    {\n        os_log(\"OS_ObjectIdFindByName returned OS_SUCCESS, queue_id now points to id=%\" PRIu32, (unsigned int)(*queue_id));\n    }\n    else\n    {\n        os_log(\"OS_ObjectIdFindByName returned error code=%d\", (int)return_code);\n    }\n\n    os_log(\"Exiting OS_QueueGetIdByName with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}