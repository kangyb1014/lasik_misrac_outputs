{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe LENGTHCHECK(name, OS_MAX_API_NAME, ...) macro likely computes the length of the C string (e.g. via strlen) and compares it to OS_MAX_API_NAME. In OS_QueueGetIdByName only a non-NULL pointer is guaranteed (OS_CHECK_POINTER). If the caller supplies a non-NULL pointer that does not point to a null-terminated string (or points near the end of its containing object), a strlen-based LENGTHCHECK will read past the bounds of the referenced object and thus violate Rule 21.17. For example, if LENGTHCHECK expands to something like\n    if (strlen(name) >= OS_MAX_API_NAME) return OS_ERR_NAME_TOO_LONG;\nand 'name' is not null-terminated within its object, strlen will access memory beyond the object boundary.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2329.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetIdByName:\n```c\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Probe logging functions. These write minimal, safe information to the\n * log file. They intentionally avoid dereferencing pointers passed in by\n * callers to prevent introducing additional out-of-bounds accesses.\n *\n * Logs are appended to: /tmp/logs/2329.txt\n */\nstatic void os_log_printf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2329.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Preserve original function signature and logic as much as possible. */\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    /* Log entry and pointer state. Do NOT dereference queue_name here to\n       avoid creating a new out-of-bounds access. This captures the control\n       flow and the essential state for reproducing the reported scenario. */\n    os_log_printf(\"OS_QueueGetIdByName ENTRY: queue_id=%p, queue_name=%p\", (void *)queue_id, (const void *)queue_name);\n    os_log_printf(\"NOTE: queue_name pointer is non-NULL; caller must ensure it points to a NUL-terminated string. No dereference performed here to avoid UB.\");\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    os_log_printf(\"OS_QueueGetIdByName EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}