{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'base' is declared as a mutable pointer (OS_common_record_t *base) but is only used for read-only access in this function (it is assigned from the global OS_common_table and only indexed/read via OS_OBJECT_TABLE_GET). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (e.g. const OS_common_record_t *base). Thus the assignment 'base = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];' violates the rule (the pointer could and should be declared const). Note: similarly, 'record' could be declared const OS_common_record_t *record and passed unchanged to MatchFunc which accepts a const pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append logs to file. Keep simple: open/append/close on each call. */\nstatic void OS_ObjectIdFindNextMatch_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1973.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    /* Log function entry and initial token state */\n    OS_ObjectIdFindNextMatch_log(\"ENTER: OS_ObjectIdFindNextMatch token->obj_type=%u token->obj_idx=%d token->obj_id=%u\",\n                                 (unsigned)token->obj_type, (int)token->obj_idx, (unsigned)token->obj_id);\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log table base and object count to document the read-only access pattern */\n    OS_ObjectIdFindNextMatch_log(\"base=%p obj_count=%u base_index=%u\",\n                                 (void *)base, (unsigned)obj_count, (unsigned)OS_GetBaseForObjectType(token->obj_type));\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        OS_ObjectIdFindNextMatch_log(\"loop: token->obj_idx=%d (after increment)\", (int)token->obj_idx);\n\n        if (token->obj_idx >= obj_count)\n        {\n            OS_ObjectIdFindNextMatch_log(\"loop-exit: token->obj_idx >= obj_count (%d >= %u)\", (int)token->obj_idx, (unsigned)obj_count);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        /* Log the retrieved record pointer and its active_id for evidence of read-only use */\n        OS_ObjectIdFindNextMatch_log(\"record=%p record->active_id=%u\", (void *)record, (unsigned)record->active_id);\n\n        /* Preserve original logic: only call MatchFunc when active_id is defined. Split the condition to log each part. */\n        int defined = OS_ObjectIdDefined(record->active_id);\n        OS_ObjectIdFindNextMatch_log(\"OS_ObjectIdDefined(record->active_id)=%d\", defined);\n\n        if (defined)\n        {\n            int match = MatchFunc(arg, token, record);\n            OS_ObjectIdFindNextMatch_log(\"MatchFunc returned %d for token->obj_idx=%d\", match, (int)token->obj_idx);\n\n            if (match)\n            {\n                return_code   = OS_SUCCESS;\n                token->obj_id = record->active_id;\n                OS_ObjectIdFindNextMatch_log(\"MATCH FOUND: token->obj_idx=%d token->obj_id=%u return_code=%d\",\n                                             (int)token->obj_idx, (unsigned)token->obj_id, (int)return_code);\n                break;\n            }\n        }\n        else\n        {\n            OS_ObjectIdFindNextMatch_log(\"record not defined at index %d (active_id=%u)\", (int)token->obj_idx, (unsigned)record->active_id);\n        }\n    }\n\n    OS_ObjectIdFindNextMatch_log(\"EXIT: return_code=%d token->obj_idx=%d token->obj_id=%u\",\n                                 (int)return_code, (int)token->obj_idx, (unsigned)token->obj_id);\n\n    return return_code;\n}\n"
}