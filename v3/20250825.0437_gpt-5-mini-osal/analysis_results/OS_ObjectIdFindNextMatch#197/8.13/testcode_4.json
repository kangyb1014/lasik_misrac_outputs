{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'base' is initialized from the global OS_common_table and only used to read records (used to compute 'record' and read record->active_id). It is never used to modify the pointed objects, so it could and should be declared as pointing to a const-qualified type (const OS_common_record_t *base). Declaring it without const therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helpers: write logs to /tmp/logs/1973.txt */\nstatic FILE *probe_open_log(void)\n{\n    FILE *f = fopen(\"/tmp/logs/1973.txt\", \"a\");\n    return f;\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = probe_open_log();\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log entry state */\n    probe_log(\"ENTER OS_ObjectIdFindNextMatch: obj_type=%u, initial_obj_idx=%u, obj_count=%u, base=%p\\n\",\n              (unsigned)token->obj_type, (unsigned)token->obj_idx, (unsigned)obj_count, (void *)base);\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        probe_log(\"ITER: obj_idx=%u\\n\", (unsigned)token->obj_idx);\n\n        if (token->obj_idx >= obj_count)\n        {\n            probe_log(\"ITER: obj_idx (%u) >= obj_count (%u) -> breaking\\n\", (unsigned)token->obj_idx, (unsigned)obj_count);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        probe_log(\"ITER: record=%p\\n\", (void *)record);\n\n        /* Evaluate whether the record is defined and whether it matches. We must\n         * ensure MatchFunc is called at most once per candidate (as in original\n         * logic), so first test active id definition, then call MatchFunc if defined. */\n        int active_defined = OS_ObjectIdDefined(record->active_id) ? 1 : 0;\n        int match_result = 0;\n\n        probe_log(\"ITER: record->active_id=%u, active_defined=%d\\n\", (unsigned)record->active_id, active_defined);\n\n        if (active_defined)\n        {\n            /* Call MatchFunc only if active id is defined (same behavior as original). */\n            match_result = MatchFunc(arg, token, record) ? 1 : 0;\n            probe_log(\"ITER: MatchFunc returned=%d for obj_idx=%u\\n\", match_result, (unsigned)token->obj_idx);\n        }\n\n        if (active_defined && match_result)\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            probe_log(\"FOUND: obj_idx=%u, obj_id=%u, returning OS_SUCCESS\\n\", (unsigned)token->obj_idx, (unsigned)token->obj_id);\n            break;\n        }\n        else\n        {\n            probe_log(\"ITER: Not a match (active_defined=%d, match_result=%d) for obj_idx=%u\\n\", active_defined, match_result, (unsigned)token->obj_idx);\n        }\n    }\n\n    probe_log(\"EXIT OS_ObjectIdFindNextMatch: return_code=%ld, final_obj_idx=%u, obj_id=%u\\n\",\n              (long)return_code, (unsigned)token->obj_idx, (unsigned)token->obj_id);\n\n    return return_code;\n}\n"
}