{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_SocketGetInfo_Impl(const OS_object_token_t *token, OS_socket_prop_t *sock_prop) is defined to immediately return OS_SUCCESS and performs no operations or side-effects. It is called from OS_SocketGetInfo(), but since the function does not modify sock_prop, the token, or any global state, removing the call and the function would not change the program's behaviour. Therefore the executed operation (the call/return) constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2472.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper - appends human-readable traces to /tmp/logs/2472.txt */\nstatic void OS_SocketGetInfo_LogProbe(const char *stage,\n                                      const OS_object_token_t *token,\n                                      const OS_socket_prop_t *sock_prop,\n                                      int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2472.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] OS_SocketGetInfo - %s: return_code=%ld\\n\", (long)t, stage, (long)return_code);\n\n    if (token != NULL)\n    {\n        /* Token is an opaque object. Print its address for correlation. */\n        fprintf(f, \"  token_ptr=%p\\n\", (const void *)token);\n    }\n\n    if (sock_prop != NULL)\n    {\n        /* Print the fields that OS_SocketGetInfo touches. */\n        /* Use defensive printing in case name is not NUL-terminated. */\n        char namebuf[sizeof(sock_prop->name) + 1];\n        memset(namebuf, 0, sizeof(namebuf));\n        memcpy(namebuf, sock_prop->name, sizeof(namebuf) - 1);\n        fprintf(f, \"  sock_prop->name=\\\"%s\\\", sock_prop->creator=%ld\\n\", namebuf, (long)sock_prop->creator);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Log state after initialization */\n    OS_SocketGetInfo_LogProbe(\"after_memset\", NULL, sock_prop, 0);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of object id lookup. Token will be valid only on success. */\n    OS_SocketGetInfo_LogProbe(\"after_ObjectIdGetById\", &token, sock_prop, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Preserve original behavior: copy metadata into sock_prop */\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        /* Log state just before calling the Impl function to capture inputs */\n        OS_SocketGetInfo_LogProbe(\"before_Impl\", &token, sock_prop, return_code);\n\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Log state immediately after calling the Impl function to capture any changes */\n        OS_SocketGetInfo_LogProbe(\"after_Impl\", &token, sock_prop, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log that the token was released */\n        OS_SocketGetInfo_LogProbe(\"after_ObjectIdRelease\", NULL, sock_prop, return_code);\n    }\n\n    return return_code;\n}\n"
}