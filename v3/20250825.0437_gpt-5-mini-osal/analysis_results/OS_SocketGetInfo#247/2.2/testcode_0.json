{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_SocketGetInfo_Impl(&token, sock_prop) is executed but OS_SocketGetInfo_Impl() is defined to simply return OS_SUCCESS and has no side-effects. Since its return value is the same constant already held in return_code and it does not modify state (sock_prop/token), removing the call would not change program behaviour. Therefore this operation constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2472.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe functions to log control flow and state to /tmp/logs/2472.txt */\nstatic void log_probe_entry(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/2472.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"ENTRY: OS_SocketGetInfo called with sock_id=%llu, sock_prop=%p\\n\",\n                (unsigned long long)(uintptr_t)sock_id, (void *)sock_prop);\n        fclose(f);\n    }\n}\n\nstatic void log_probe_after_getbyid(int32 return_code, OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/2472.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"After OS_ObjectIdGetById: return_code=%ld, token_address=%p\\n\",\n                (long)return_code, (void *)token);\n        fclose(f);\n    }\n}\n\nstatic void log_probe_before_impl(OS_object_token_t *token, OS_socket_prop_t *sock_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/2472.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"Before OS_SocketGetInfo_Impl: token=%p, sock_prop=%p, name=\\\"%s\\\", creator=%llu\\n\",\n                (void *)token,\n                (void *)sock_prop,\n                (sock_prop != NULL ? sock_prop->name : \"(null)\"),\n                (unsigned long long)(uintptr_t)(sock_prop != NULL ? (unsigned long long)sock_prop->creator : 0ULL));\n        fclose(f);\n    }\n}\n\nstatic void log_probe_after_impl(int32 rc_before, int32 rc_after, OS_object_token_t *token, OS_socket_prop_t *sock_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/2472.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"After OS_SocketGetInfo_Impl: rc_before=%ld, rc_after=%ld, token=%p, sock_prop=%p, name=\\\"%s\\\", creator=%llu\\n\",\n                (long)rc_before,\n                (long)rc_after,\n                (void *)token,\n                (void *)sock_prop,\n                (sock_prop != NULL ? sock_prop->name : \"(null)\"),\n                (unsigned long long)(uintptr_t)(sock_prop != NULL ? (unsigned long long)sock_prop->creator : 0ULL));\n        fclose(f);\n    }\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry */\n    log_probe_entry(sock_id, sock_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    log_probe_after_getbyid(return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        /* Log state before calling the implementation-specific function */\n        log_probe_before_impl(&token, sock_prop);\n\n        /* Call implementation hook (preserve original behaviour) */\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Log state after calling the implementation-specific function */\n        log_probe_after_impl(OS_SUCCESS, return_code, &token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final return value logged */\n    {\n        FILE *f = fopen(\"/tmp/logs/2472.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"EXIT: OS_SocketGetInfo returning %ld for sock_id=%llu\\n\",\n                    (long)return_code,\n                    (unsigned long long)(uintptr_t)sock_id);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}