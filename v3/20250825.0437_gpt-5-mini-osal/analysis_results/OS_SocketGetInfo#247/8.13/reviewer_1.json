{
  "user_message": "An agent A claimed that the following OS_SocketGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketGetInfo.\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'record' is only used for read-only access (record->name_entry and record->creator) and is assigned from the global table via OS_OBJECT_TABLE_GET. It should be declared with a pointer-to-const, e.g. 'const OS_common_record_t *record;', to prevent modification of the pointed-to record. The current declaration 'OS_common_record_t *record;' therefore violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketGetInfo:\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME]; /**< @brief Name of the socket */\n    osal_id_t creator;               /**< @brief OSAL TaskID which opened the socket */\n} OS_socket_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef uint32 osal_id_t\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_stream_table\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_SocketGetInfo the local pointer 'record' is only used for read-only access (record->name_entry and record->creator) and there is no code in this function that modifies the object pointed to. Therefore it can and should be declared as a pointer-to-const: const OS_common_record_t *record; This complies with MISRA C 2023 Rule 8.13 (prefer const-qualified pointee types when possible). The OS_OBJECT_TABLE_GET macro yields an OS_common_record_t * (from the extern OS_common_record_t *const OS_global_stream_table), and assigning that to a const OS_common_record_t * is allowed, so there is no technical obstacle to making the pointer-to-const change. (If the pointer were used later to modify the record, changing it would be inappropriate, but that is not the case in this function.)"
}