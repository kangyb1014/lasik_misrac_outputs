{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is only used for read-only access (record->name_entry and record->creator) and is assigned from the global table via OS_OBJECT_TABLE_GET. It should be declared with a pointer-to-const, e.g. 'const OS_common_record_t *record;', to prevent modification of the pointed-to record. The current declaration 'OS_common_record_t *record;' therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper: append state and control-flow information to a log file. */\nstatic void OS_SocketGetInfo_Log_State(const char *stage,\n                                       osal_id_t sock_id,\n                                       const void *record_ptr,\n                                       const OS_socket_prop_t *sock_prop,\n                                       int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2473.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging; do not change control flow on failure */\n    }\n\n    /* Print basic stage and identifiers */\n    fprintf(f, \"Stage: %s\\n\", (stage != NULL) ? stage : \"(null)\");\n    fprintf(f, \"  sock_id: %ld\\n\", (long)sock_id);\n    fprintf(f, \"  return_code (observed at this stage): %ld\\n\", (long)return_code);\n\n    /* If a record pointer is available, attempt to log the read-only fields used by the function.\n     * Cast to a const pointer so the logger itself does not attempt modification. */\n    if (record_ptr != NULL)\n    {\n        const OS_common_record_t *crec = (const OS_common_record_t *)record_ptr;\n\n        /* name_entry and creator are the specific fields of interest for the violation scenario */\n        fprintf(f, \"  record ptr: %p\\n\", record_ptr);\n        if (crec->name_entry != NULL)\n        {\n            fprintf(f, \"  record->name_entry: '%s'\\n\", crec->name_entry);\n        }\n        else\n        {\n            fprintf(f, \"  record->name_entry: (NULL)\\n\");\n        }\n\n        fprintf(f, \"  record->creator: %lu\\n\", (unsigned long)crec->creator);\n    }\n    else\n    {\n        fprintf(f, \"  record ptr: (NULL)\\n\");\n    }\n\n    /* If socket properties are present, log the name and creator copied into the output struct */\n    if (sock_prop != NULL)\n    {\n        fprintf(f, \"  sock_prop->name: '%s'\\n\", sock_prop->name);\n        fprintf(f, \"  sock_prop->creator: %lu\\n\", (unsigned long)sock_prop->creator);\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    /* Log entry with input parameter */\n    OS_SocketGetInfo_Log_State(\"entry\", sock_id, NULL, NULL, 0);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of object id lookup */\n    OS_SocketGetInfo_Log_State(\"after_ObjectIdGetById\", sock_id, NULL, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log the record retrieved (read-only fields only) */\n        OS_SocketGetInfo_Log_State(\"after_record_fetch\", sock_id, (const void *)record, NULL, return_code);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->name[sizeof(sock_prop->name) - 1] = '\\0';\n        sock_prop->creator = record->creator;\n\n        /* Log state just before calling the implementation function */\n        OS_SocketGetInfo_Log_State(\"before_Impl_call\", sock_id, (const void *)record, sock_prop, return_code);\n\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Log result after implementation call and the final sock_prop contents */\n        OS_SocketGetInfo_Log_State(\"after_Impl_call\", sock_id, (const void *)record, sock_prop, return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log the failure path where ObjectIdGetById did not succeed */\n        OS_SocketGetInfo_Log_State(\"objectid_lookup_failed\", sock_id, NULL, NULL, return_code);\n    }\n\n    /* Final exit log */\n    OS_SocketGetInfo_Log_State(\"exit\", sock_id, NULL, sock_prop, return_code);\n\n    return return_code;\n}\n"
}