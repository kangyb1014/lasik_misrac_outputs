{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * but it is only used for read access (record->name_entry, record->creator). According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible. Change the declaration to: const OS_common_record_t *record; (Assigning the non-const result of OS_OBJECT_TABLE_GET to a pointer-to-const is allowed implicitly.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging function: append control-flow and state information to /tmp/logs/2473.txt */\nstatic void OS_SocketGetInfo_log(const char *stage,\n                                 const OS_common_record_t *record,\n                                 const OS_object_token_t *token,\n                                 int32 return_code,\n                                 const OS_socket_prop_t *sock_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/2473.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not change program flow. */\n        return;\n    }\n\n    fprintf(f, \"OS_SocketGetInfo: stage=%s, return_code=%d, token_addr=%p, record_ptr=%p\\n\",\n            stage, (int)return_code, (const void *)token, (const void *)record);\n\n    if (sock_prop != NULL)\n    {\n        /* Log the sock_prop contents that reflect the values copied from the record. */\n        fprintf(f, \"  sock_prop->name=\\\"\");\n        /* Print up to the buffer size safely (ensure output is bounded). */\n        if (sock_prop->name != NULL)\n        {\n            /* Use fwrite to avoid issues if name is not NUL-terminated. */\n            size_t n = strnlen(sock_prop->name, sizeof(sock_prop->name));\n            fwrite(sock_prop->name, 1, n, f);\n        }\n        fprintf(f, \"\\\", creator=%u\\n\", (unsigned)sock_prop->creator);\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Log initial state after clearing output buffer */\n    OS_SocketGetInfo_log(\"after_clear\", NULL, NULL, 0, sock_prop);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_SocketGetInfo_log(\"after_ObjectIdGetById\", NULL, &token, return_code, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log pointer returned from object table lookup (do not dereference here) */\n        OS_SocketGetInfo_log(\"after_table_get\", record, &token, return_code, NULL);\n\n        /* Preserve original behavior: copy from record into caller-supplied structure */\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        /* Log values after copying from record into sock_prop (evidence of read-only usage of record) */\n        OS_SocketGetInfo_log(\"after_copy\", record, &token, return_code, sock_prop);\n\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Log after calling implementation function */\n        OS_SocketGetInfo_log(\"after_impl\", record, &token, return_code, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_SocketGetInfo_log(\"after_release\", record, &token, return_code, sock_prop);\n    }\n\n    return return_code;\n}\n"
}