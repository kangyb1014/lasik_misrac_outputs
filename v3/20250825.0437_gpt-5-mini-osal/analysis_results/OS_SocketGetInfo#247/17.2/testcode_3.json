{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion: OS_printf calls OS_DEBUG when OS is not initialized. If OS_DEBUG (or OS_ConsoleWrite) is implemented in terms of OS_printf (e.g. OS_DEBUG -> OS_printf or OS_ConsoleWrite -> OS_printf), this yields OS_printf -> OS_DEBUG -> OS_printf (or via OS_ConsoleWrite), causing an indirect self-call and thus violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2476.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - append-only to avoid interfering with normal behavior */\nstatic void os_sock_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2476.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and input state */\n    os_sock_log(\"ENTRY: OS_SocketGetInfo called: sock_id=%d, sock_prop=%p\", (int)sock_id, (void *)sock_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n    os_sock_log(\"After memset: sock_prop cleared at %p (size=%zu)\", (void *)sock_prop, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    os_sock_log(\"OS_ObjectIdGetById returned %d for sock_id=%d; token addr=%p\", return_code, (int)sock_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        os_sock_log(\"OS_OBJECT_TABLE_GET returned record=%p\", (void *)record);\n\n        if (record != NULL)\n        {\n            /* Log record fields that will be copied */\n            os_sock_log(\"Record name_entry='%s', creator=%u\", record->name_entry ? record->name_entry : \"(null)\", (unsigned)record->creator);\n\n            strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n            sock_prop->creator = record->creator;\n            os_sock_log(\"After copy: sock_prop->name='%s', sock_prop->creator=%u\", sock_prop->name, (unsigned)sock_prop->creator);\n\n            return_code = OS_SocketGetInfo_Impl(&token, sock_prop);\n            os_sock_log(\"OS_SocketGetInfo_Impl returned %d\", return_code);\n        }\n        else\n        {\n            os_sock_log(\"Record lookup returned NULL for token at %p\", (void *)&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_sock_log(\"Token released: token addr=%p\", (void *)&token);\n    }\n    else\n    {\n        os_sock_log(\"OS_ObjectIdGetById failed with %d; aborting\", return_code);\n    }\n\n    os_sock_log(\"EXIT: OS_SocketGetInfo returning %d\", return_code);\n\n    return return_code;\n}\n"
}