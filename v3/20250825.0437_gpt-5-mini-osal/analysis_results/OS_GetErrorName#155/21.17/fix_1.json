{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1559.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters - expanded inline instead of macro for test harness. */\n    if (err_name == NULL)\n    {\n        log_probe(\"OS_GetErrorName: err_name == NULL -> returning OS_INVALID_POINTER\");\n        return OS_INVALID_POINTER;\n    }\n\n    log_probe(\"OS_GetErrorName: called with error_num=%d, err_name_ptr=%p\", (int)error_num, (void *)err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    log_probe(\"Searching OS_GLOBAL_ERROR_NAME_TABLE starting at %p\", (const void *)Error);\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        log_probe(\"  checking global entry '%s' (num=%d) at %p\", Error->Name, Error->Number, (const void *)Error);\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        log_probe(\"Not found in global table; searching OS_IMPL_ERROR_NAME_TABLE starting at %p\", (const void *)Error);\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            log_probe(\"  checking impl entry '%s' (num=%d) at %p\", Error->Name, Error->Number, (const void *)Error);\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        /* Log sizes and pointer arithmetic info before the copy/termination operations. */\n        size_t elem_size = sizeof(*err_name);\n        size_t index = elem_size - 1;\n        uintptr_t base_addr = (uintptr_t)err_name; /* integer representation to avoid additional pointer arithmetic UB */\n        uintptr_t computed_target_addr = base_addr + (index * elem_size);\n\n        log_probe(\"Found error: Name='%s', Number=%d, err_name_ptr=%p\", Error->Name, Error->Number, (void *)err_name);\n        log_probe(\"sizeof(*err_name)=%zu, index=%zu (sizeof(*err_name)-1), OS_ERROR_NAME_LENGTH=%d\", elem_size, index, OS_ERROR_NAME_LENGTH);\n        log_probe(\"Computed byte-address for *(err_name[index]) would be: 0x%0\" PRIxPTR \", computed as base + index*elem_size\", (uintptr_t)computed_target_addr);\n\n        /* Preserve original logic: use strncpy into *err_name (the char array pointed to). */\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n\n        /* This line contains the operator-precedence bug in the original code. Keep it as-is to reproduce the scenario.\n         * It is parsed as *(err_name[index]) rather than (*err_name)[index]. We log the intent and the textual form. */\n        log_probe(\"About to execute buggy write: *err_name[sizeof(*err_name) - 1] = 0; (parsed as *(err_name[%zu]))\", index);\n\n        /* Perform the buggy write (kept verbatim). This may write out-of-bounds if the caller provided only a single os_err_name_t.\n         * We keep this to allow reproduction of the reported violation. */\n        *err_name[sizeof(*err_name) - 1] = 0;\n\n        log_probe(\"After buggy write: attempted to set *(err_name[%zu]) to 0\", index);\n\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        log_probe(\"Error number %d not found in tables; using fallback string\", (int)error_num);\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    /* Ensure last byte is NUL as original logic did. */\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n    log_probe(\"Final buffer (as string): '%s', returning %d\", (char *)(*err_name), (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpfcq_2or9/src/src/os/shared/src/osapi-errors.c: In function 'OS_GetErrorName':\n/tmp/tmpfcq_2or9/src/src/os/shared/src/osapi-errors.c:190:80: error: expected ')' before 'PRIxPTR'\n  190 |         log_probe(\"Computed byte-address for *(err_name[index]) would be: 0x%0\" PRIxPTR \", computed as base + index*elem_size\", (uintptr_t)computed_target_addr);\n      |                  ~                                                             ^~~~~~~~\n      |                                                                                )\n/tmp/tmpfcq_2or9/src/src/os/shared/src/osapi-errors.c:49:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   48 | #include \"os-shared-errors.h\"\n  +++ |+#include <inttypes.h>\n   49 | \ngmake[2]: *** [CMakeFiles/osal.dir/build.make:160: CMakeFiles/osal.dir/src/os/shared/src/osapi-errors.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_GetErrorName as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\ntypedef int32_t int32;\n\nenum {\n    OS_ERROR_NAME_LENGTH = 64,\n    OS_SUCCESS = 0,\n    OS_ERROR = -1,\n    OS_INVALID_POINTER = -2\n};\n\ntypedef char os_err_name_t[OS_ERROR_NAME_LENGTH];\n\ntypedef struct\n{\n    const char *Name;\n    int32       Number;\n} OS_ErrorTable_Entry_t;\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1559.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* Minimal example tables with sentinel entries (Name == NULL). */\nconst OS_ErrorTable_Entry_t OS_GLOBAL_ERROR_NAME_TABLE[] = {\n    {\"OS_SUCCESS\", OS_SUCCESS},\n    {\"OS_INVALID_POINTER\", OS_INVALID_POINTER},\n    {NULL, 0}\n};\n\nconst OS_ErrorTable_Entry_t OS_IMPL_ERROR_NAME_TABLE[] = {\n    {\"OS_IMPL_ERROR\", -100},\n    {NULL, 0}\n};\n\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters - expanded inline instead of macro for test harness. */\n    if (err_name == NULL)\n    {\n        log_probe(\"OS_GetErrorName: err_name == NULL -> returning OS_INVALID_POINTER\");\n        return OS_INVALID_POINTER;\n    }\n\n    log_probe(\"OS_GetErrorName: called with error_num=%d, err_name_ptr=%p\", (int)error_num, (void *)err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    log_probe(\"Searching OS_GLOBAL_ERROR_NAME_TABLE starting at %p\", (const void *)Error);\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        log_probe(\"  checking global entry '%s' (num=%d) at %p\", Error->Name, Error->Number, (const void *)Error);\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        log_probe(\"Not found in global table; searching OS_IMPL_ERROR_NAME_TABLE starting at %p\", (const void *)Error);\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            log_probe(\"  checking impl entry '%s' (num=%d) at %p\", Error->Name, Error->Number, (const void *)Error);\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        /* Log sizes and pointer arithmetic info before the copy/termination operations. */\n        size_t elem_size = sizeof(*err_name);\n        size_t index = elem_size - 1;\n        uintptr_t base_addr = (uintptr_t)err_name; /* integer representation to avoid additional pointer arithmetic UB */\n        uintptr_t computed_target_addr = base_addr + (index * elem_size);\n\n        log_probe(\"Found error: Name='%s', Number=%d, err_name_ptr=%p\", Error->Name, Error->Number, (void *)err_name);\n        log_probe(\"sizeof(*err_name)=%zu, index=%zu (sizeof(*err_name)-1), OS_ERROR_NAME_LENGTH=%d\", elem_size, index, OS_ERROR_NAME_LENGTH);\n        log_probe(\"Computed byte-address for *(err_name[index]) would be: 0x%0\" PRIxPTR \", computed as base + index*elem_size\", (uintptr_t)computed_target_addr);\n\n        /* Preserve original logic: use strncpy into *err_name (the char array pointed to). */\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n\n        /* This line contains the operator-precedence bug in the original code. Keep it as-is to reproduce the scenario.\n         * It is parsed as *(err_name[index]) rather than (*err_name)[index]. We log the intent and the textual form. */\n        log_probe(\"About to execute buggy write: *err_name[sizeof(*err_name) - 1] = 0; (parsed as *(err_name[%zu]))\", index);\n\n        /* Perform the buggy write (kept verbatim). This may write out-of-bounds if the caller provided only a single os_err_name_t.\n         * We keep this to allow reproduction of the reported violation. */\n        *err_name[sizeof(*err_name) - 1] = 0;\n\n        log_probe(\"After buggy write: attempted to set *(err_name[%zu]) to 0\", index);\n\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        log_probe(\"Error number %d not found in tables; using fallback string\", (int)error_num);\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    /* Ensure last byte is NUL as original logic did. */\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n    log_probe(\"Final buffer (as string): '%s', returning %d\", (char *)(*err_name), (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "I included <inttypes.h> (and other standard headers) so the PRIxPTR macro and related integer types are available, resolving the compilation error. I also added minimal type and constant definitions (int32, os_err_name_t, OS_ErrorTable_Entry_t, small example error tables, and constants) so the function and its uses compile as a self-contained unit. The original logic \u2014 including the preserved buggy expression \u2014 was left intact."
}