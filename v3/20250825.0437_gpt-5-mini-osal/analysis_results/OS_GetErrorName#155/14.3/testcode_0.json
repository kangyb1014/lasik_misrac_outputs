{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the while loop controlling expression is invariant (always false). Error is set to OS_IMPL_ERROR_NAME_TABLE which is defined as {{0, NULL}}, so Error->Name is NULL and the condition (Error->Name != NULL && Error->Number != error_num) is always false; this is an invariant controlling expression and not one of the permitted exceptions to MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetErrorName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1555.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetErrorName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetErrorName:\n```c\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n        *err_name[sizeof(*err_name) - 1] = 0;\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetErrorName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdarg.h>\n\nenum { OS_ERROR_NAME_LENGTH = 64 };\ntypedef int32_t int32;\ntypedef char os_err_name_t[OS_ERROR_NAME_LENGTH];\n\ntypedef struct\n{\n    int32 Number;\n    const char *Name;\n} OS_ErrorTable_Entry_t;\n\n/*\n * Minimal global tables to allow compilation and to reproduce the reported scenario.\n * The implementation table is the sentinel-only entry as described in the scenario.\n */\nstatic const OS_ErrorTable_Entry_t OS_GLOBAL_ERROR_NAME_TABLE[] =\n{\n    {1, \"OS_ERR_ONE\"},\n    {2, \"OS_ERR_TWO\"},\n    {0, NULL}\n};\n\nstatic const OS_ErrorTable_Entry_t OS_IMPL_ERROR_NAME_TABLE[] =\n{\n    {0, NULL}\n};\n\n/* Minimal definitions to allow the function to compile in this test harness. */\nstatic inline void OS_CHECK_POINTER(const void *p)\n{\n    /* Intentionally a no-op in this test harness to preserve control flow for logging. */\n    (void)p;\n}\n\nstatic void log_to_file(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1555.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    log_to_file(\"ENTER OS_GetErrorName: error_num=%d, err_name_ptr=%p\", (int)error_num, (void *)err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    log_to_file(\"Searching GLOBAL table at %p, first entry: Number=%d, Name=%p\",\n                (void *)Error,\n                (int)Error[0].Number,\n                (void *)Error[0].Name);\n\n    /* Log evaluation of the controlling expression before entering the loop */\n    log_to_file(\"Evaluate GLOBAL while condition: (Error->Name != NULL)=%s, (Error->Number != error_num)=%s\",\n                (Error->Name != NULL) ? \"true\" : \"false\",\n                (Error->Number != error_num) ? \"true\" : \"false\");\n\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        log_to_file(\"GLOBAL loop iterate: current entry addr=%p, Number=%d, Name=%s\",\n                    (void *)Error, (int)Error->Number, (Error->Name != NULL) ? Error->Name : \"(NULL)\");\n        ++Error;\n        log_to_file(\"GLOBAL loop advanced to addr=%p, Number=%d, Name=%p\",\n                    (void *)Error, (int)Error->Number, (void *)Error->Name);\n    }\n\n    log_to_file(\"After GLOBAL search: entry addr=%p, Number=%d, Name=%p\",\n                (void *)Error, (int)Error->Number, (void *)Error->Name);\n\n    if (Error->Number != error_num)\n    {\n        log_to_file(\"Not found in GLOBAL table (expected %d). Switching to IMPL table.\", (int)error_num);\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        log_to_file(\"Searching IMPL table at %p, first entry: Number=%d, Name=%p\",\n                    (void *)Error,\n                    (int)Error[0].Number,\n                    (void *)Error[0].Name);\n\n        /* Log evaluation of the controlling expression before entering the loop */\n        log_to_file(\"Evaluate IMPL while condition: (Error->Name != NULL)=%s, (Error->Number != error_num)=%s\",\n                    (Error->Name != NULL) ? \"true\" : \"false\",\n                    (Error->Number != error_num) ? \"true\" : \"false\");\n\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            log_to_file(\"IMPL loop iterate: current entry addr=%p, Number=%d, Name=%s\",\n                        (void *)Error, (int)Error->Number, (Error->Name != NULL) ? Error->Name : \"(NULL)\");\n            ++Error;\n            log_to_file(\"IMPL loop advanced to addr=%p, Number=%d, Name=%p\",\n                        (void *)Error, (int)Error->Number, (void *)Error->Name);\n        }\n\n        log_to_file(\"After IMPL search: entry addr=%p, Number=%d, Name=%p\",\n                    (void *)Error, (int)Error->Number, (void *)Error->Name);\n    }\n    else\n    {\n        log_to_file(\"Found in GLOBAL table: Number=%d, Name=%s\",\n                    (int)Error->Number,\n                    (Error->Name != NULL) ? Error->Name : \"(NULL)\");\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        log_to_file(\"Match found: copying name '%s' into provided buffer\", Error->Name);\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n        *err_name[sizeof(*err_name) - 1] = 0;\n        return_code                      = 0; /* OS_SUCCESS */\n    }\n    else\n    {\n        log_to_file(\"No match found. Writing unknown string for error %d\", (int)error_num);\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = -1; /* OS_ERROR */\n    }\n\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    log_to_file(\"EXIT OS_GetErrorName: return_code=%d, resulting_name='%s'\", (int)return_code, (*err_name));\n\n    return return_code;\n}\n"
}