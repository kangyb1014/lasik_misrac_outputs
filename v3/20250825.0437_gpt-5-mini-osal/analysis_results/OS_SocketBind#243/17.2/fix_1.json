{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nint32 TEST_OS_SocketBindAddress_Result = OS_SUCCESS;\nint32 TEST_OS_SocketListen_Result = OS_SUCCESS;\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2436.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* prepend timestamp */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    probe_log(\"OS_SocketBindAddress called: sock_id=%d, Addr=%p\", (int)sock_id, (void*)Addr);\n    probe_log(\"OS_SocketBindAddress returning %d\", TEST_OS_SocketBindAddress_Result);\n    return TEST_OS_SocketBindAddress_Result;\n}\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    probe_log(\"OS_SocketListen called: sock_id=%d\", (int)sock_id);\n    probe_log(\"OS_SocketListen returning %d\", TEST_OS_SocketListen_Result);\n    return TEST_OS_SocketListen_Result;\n}\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    probe_log(\"OS_SocketBind ENTRY: sock_id=%d, Addr=%p\", (int)sock_id, (void*)Addr);\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    probe_log(\"OS_SocketBind after OS_SocketBindAddress: return_code=%d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"OS_SocketBind: calling OS_SocketListen for sock_id=%d\", (int)sock_id);\n        return_code = OS_SocketListen(sock_id);\n        probe_log(\"OS_SocketBind after OS_SocketListen: return_code=%d\", return_code);\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            probe_log(\"OS_SocketBind: OS_SocketListen returned OS_ERR_INCORRECT_OBJ_TYPE; mapping to OS_SUCCESS\");\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    probe_log(\"OS_SocketBind EXIT: returning %d\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp90qb_j2f/src/src/os/shared/src/osapi-sockets.c: In function 'probe_log':\n/tmp/tmp90qb_j2f/src/src/os/shared/src/osapi-sockets.c:179:15: error: storage size of 'tm' isn't known\n  179 |     struct tm tm;\n      |               ^~\n/tmp/tmp90qb_j2f/src/src/os/shared/src/osapi-sockets.c:191:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  191 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/__/__/os/shared/src/osapi-sockets.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4221: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketBind as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Minimal type definitions so this file compiles standalone */\ntypedef int32_t int32;\ntypedef int osal_id_t;\ntypedef struct {\n    /* placeholder for socket address structure */\n    int _placeholder;\n} OS_SockAddr_t;\n\n/* Constants (use enum to avoid macros) */\nenum {\n    OS_SUCCESS = 0,\n    OS_ERR_INCORRECT_OBJ_TYPE = -1\n};\n\nint32 TEST_OS_SocketBindAddress_Result = OS_SUCCESS;\nint32 TEST_OS_SocketListen_Result = OS_SUCCESS;\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2436.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* prepend timestamp */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    probe_log(\"OS_SocketBindAddress called: sock_id=%d, Addr=%p\", (int)sock_id, (void*)Addr);\n    probe_log(\"OS_SocketBindAddress returning %d\", TEST_OS_SocketBindAddress_Result);\n    return TEST_OS_SocketBindAddress_Result;\n}\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    probe_log(\"OS_SocketListen called: sock_id=%d\", (int)sock_id);\n    probe_log(\"OS_SocketListen returning %d\", TEST_OS_SocketListen_Result);\n    return TEST_OS_SocketListen_Result;\n}\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    probe_log(\"OS_SocketBind ENTRY: sock_id=%d, Addr=%p\", (int)sock_id, (void*)Addr);\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    probe_log(\"OS_SocketBind after OS_SocketBindAddress: return_code=%d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"OS_SocketBind: calling OS_SocketListen for sock_id=%d\", (int)sock_id);\n        return_code = OS_SocketListen(sock_id);\n        probe_log(\"OS_SocketBind after OS_SocketListen: return_code=%d\", return_code);\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            probe_log(\"OS_SocketBind: OS_SocketListen returned OS_ERR_INCORRECT_OBJ_TYPE; mapping to OS_SUCCESS\");\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    probe_log(\"OS_SocketBind EXIT: returning %d\", return_code);\n    return return_code;\n}\n",
  "explanation": "I added the necessary standard headers (<stdio.h>, <stdarg.h>, <time.h>, <stdint.h>) so struct tm and va_list are defined and compatible with localtime_r/strftime/vfprintf. I also provided minimal typedefs for int32, osal_id_t, and a placeholder OS_SockAddr_t plus constants (as an enum) so the file compiles standalone. The original logic of OS_SocketBind and the probe_log behavior is preserved."
}