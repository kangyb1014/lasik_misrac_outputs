{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can dereference and read beyond the bounds of the objects if either pointer is NULL, invalid, or not NUL-terminated. For example, if a caller invokes UT_Stub_GetReturnValuePtr(..., TypeName) with TypeName == NULL (or if StubPtr->Data.Buff.ContentTypeStr was never initialized or points to a non-terminated buffer), strcmp will read through memory beyond the intended object causing an out-of-bounds access (violating MISRA C 2023 Rule 21.17).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2439.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBind:\n```c\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBind code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n\n/*\n * Probe/log helper functions. These functions are deliberately small and\n * designed only to record control flow and state into the file\n * \"/tmp/logs/2439.txt\". They avoid dereferencing user pointers and thus\n * do not introduce new out-of-bounds accesses.\n */\nstatic void probe_ensure_logdir(void)\n{\n    /* mkdir may fail if the directory already exists; ignore that error. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void probe_log(const char *stage, long sock_id, const void *addr_ptr, int32_t code)\n{\n    FILE *f;\n    time_t now = time(NULL);\n    char timestr[32] = \"(unknown)\";\n\n    if (now != (time_t)-1)\n    {\n        struct tm tmv;\n        if (localtime_r(&now, &tmv) != NULL)\n        {\n            (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n        }\n    }\n\n    probe_ensure_logdir();\n    f = fopen(\"/tmp/logs/2439.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program behavior; just return. */\n        return;\n    }\n\n    /* Print a concise, safe record. Do not dereference addr_ptr. */\n    (void)fprintf(f, \"%s | %s | sock_id=%ld | Addr=%p | code=%d\\n\",\n                  timestr, stage, sock_id, addr_ptr, code);\n    (void)fclose(f);\n}\n\n/* Forward declarations for external functions/types used by original logic. */\nextern int32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr);\nextern int32 OS_SocketListen(osal_id_t sock_id);\n\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    /* Log entry with initial parameters. Avoid dereferencing Addr. */\n    probe_log(\"entry\", (long)sock_id, (const void *)Addr, 0);\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n\n    /* Log result of bind address attempt. */\n    probe_log(\"after_bind_address\", (long)sock_id, (const void *)Addr, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n\n        /* Log result of listen attempt. */\n        probe_log(\"after_listen\", (long)sock_id, (const void *)Addr, return_code);\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            probe_log(\"incorrect_obj_type_treated_as_success\", (long)sock_id, (const void *)Addr, return_code);\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    /* Final state before return. */\n    probe_log(\"exit\", (long)sock_id, (const void *)Addr, return_code);\n\n    return return_code;\n}\n"
}