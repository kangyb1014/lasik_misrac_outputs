{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_ensure_logdir(void)\n{\n    /* mkdir may fail if the directory already exists; ignore that error. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\nstatic void probe_log(const char *stage, long sock_id, const void *addr_ptr, int32_t code)\n{\n    FILE *f;\n    time_t now = time(NULL);\n    char timestr[32] = \"(unknown)\";\n\n    if (now != (time_t)-1)\n    {\n        struct tm tmv;\n        if (localtime_r(&now, &tmv) != NULL)\n        {\n            (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n        }\n    }\n\n    probe_ensure_logdir();\n    f = fopen(\"/tmp/logs/2439.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program behavior; just return. */\n        return;\n    }\n\n    /* Print a concise, safe record. Do not dereference addr_ptr. */\n    (void)fprintf(f, \"%s | %s | sock_id=%ld | Addr=%p | code=%d\\n\",\n                  timestr, stage, sock_id, addr_ptr, code);\n    (void)fclose(f);\n}\n\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    /* Log entry with initial parameters. Avoid dereferencing Addr. */\n    probe_log(\"entry\", (long)sock_id, (const void *)Addr, 0);\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n\n    /* Log result of bind address attempt. */\n    probe_log(\"after_bind_address\", (long)sock_id, (const void *)Addr, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n\n        /* Log result of listen attempt. */\n        probe_log(\"after_listen\", (long)sock_id, (const void *)Addr, return_code);\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            probe_log(\"incorrect_obj_type_treated_as_success\", (long)sock_id, (const void *)Addr, return_code);\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    /* Final state before return. */\n    probe_log(\"exit\", (long)sock_id, (const void *)Addr, return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp0hrtvlqn/src/src/os/shared/src/osapi-sockets.c: In function 'probe_log':\n/tmp/tmp0hrtvlqn/src/src/os/shared/src/osapi-sockets.c:181:19: error: storage size of 'tmv' isn't known\n  181 |         struct tm tmv;\n      |                   ^~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/__/__/os/shared/src/osapi-sockets.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4221: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-sockets.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketBind as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal type/constant declarations so this translation unit compiles.\n * These are declarations only; implementations are expected to be provided\n * elsewhere in the larger project. No mock functions are defined here.\n */\ntypedef int32_t osal_id_t;\ntypedef struct OS_SockAddr_t\n{\n    int dummy;\n} OS_SockAddr_t;\n\nenum {\n    OS_SUCCESS = 0,\n    OS_ERR_INCORRECT_OBJ_TYPE = -1\n};\n\n/* External functions implemented elsewhere (declared only). */\nextern int OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr);\nextern int OS_SocketListen(osal_id_t sock_id);\n\nstatic void probe_ensure_logdir(void)\n{\n    /* mkdir may fail if the directory already exists; ignore that error. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void probe_log(const char *stage, long sock_id, const void *addr_ptr, int32_t code)\n{\n    FILE *f;\n    time_t now = time(NULL);\n    char timestr[32] = \"(unknown)\";\n\n    if (now != (time_t)-1)\n    {\n        /* Use localtime (copy its result) to avoid depending on localtime_r\n         * feature-test macros in this standalone file. Copying the struct tm\n         * preserves the original intent of producing a thread-local snapshot.\n         */\n        struct tm tmv;\n        struct tm *tmp = localtime(&now);\n        if (tmp != NULL)\n        {\n            tmv = *tmp;\n            (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n        }\n    }\n\n    probe_ensure_logdir();\n    f = fopen(\"/tmp/logs/2439.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program behavior; just return. */\n        return;\n    }\n\n    /* Print a concise, safe record. Do not dereference addr_ptr. */\n    (void)fprintf(f, \"%s | %s | sock_id=%ld | Addr=%p | code=%d\\n\",\n                  timestr, stage, sock_id, addr_ptr, code);\n    (void)fclose(f);\n}\n\nint32_t OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32_t return_code;\n\n    /* Log entry with initial parameters. Avoid dereferencing Addr. */\n    probe_log(\"entry\", (long)sock_id, (const void *)Addr, 0);\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n\n    /* Log result of bind address attempt. */\n    probe_log(\"after_bind_address\", (long)sock_id, (const void *)Addr, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n\n        /* Log result of listen attempt. */\n        probe_log(\"after_listen\", (long)sock_id, (const void *)Addr, return_code);\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            probe_log(\"incorrect_obj_type_treated_as_success\", (long)sock_id, (const void *)Addr, return_code);\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    /* Final state before return. */\n    probe_log(\"exit\", (long)sock_id, (const void *)Addr, return_code);\n\n    return return_code;\n}\n",
  "explanation": "I included the appropriate headers (<time.h>, <stdio.h>, <sys/stat.h>, etc.) so struct tm and functions like time(), strftime(), fopen(), and mkdir are known to the compiler. localtime_r was replaced with localtime and a copied struct tm to avoid requiring POSIX feature-test macros; this preserves the original behavior. I also added minimal typedefs and extern declarations for osal_id_t, OS_SockAddr_t and the OS_* functions plus enum constants for OS_SUCCESS and OS_ERR_INCORRECT_OBJ_TYPE so the file compiles standalone without providing mock function implementations."
}