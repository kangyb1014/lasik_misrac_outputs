{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_GetStubEntry the local pointer variable 'StubPtr' is initialized with NULL at declaration (UT_StubTableEntry_t *StubPtr = NULL;), but every control path in the function assigns StubPtr (either to &UT_StubTable[Idx] inside the loop or to NULL in the early-exit branch) before it is used or returned. The initial assignment at declaration is therefore redundant \u2014 removing it would not affect program behaviour \u2014 which meets the definition of dead code in MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearDefaultReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2962.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ClearDefaultReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ClearDefaultReturnValue:\n```c\nvoid UT_ClearDefaultReturnValue(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);\n    if (StubPtr != NULL)\n    {\n        UT_ClearStubEntry(StubPtr);\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_ClearDefaultReturnValue code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging to help reproduce the control flow/state for the reported violation.\n * Logs append to /tmp/logs/2962.txt. The original logic is preserved.\n */\nstatic void UT_LogEvent(const char *label, unsigned long long funcKey, void *stubPtr)\n{\n    FILE *fp = fopen(\"/tmp/logs/2962.txt\", \"a\");\n    if (fp != NULL)\n    {\n        if (stubPtr != NULL)\n        {\n            fprintf(fp, \"%s: FuncKey=%llu StubPtr=%p\\n\", label, funcKey, stubPtr);\n        }\n        else\n        {\n            fprintf(fp, \"%s: FuncKey=%llu StubPtr=NULL\\n\", label, funcKey);\n        }\n        fclose(fp);\n    }\n}\n\nvoid UT_ClearDefaultReturnValue(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry into the function with the key */\n    UT_LogEvent(\"UT_ClearDefaultReturnValue: Enter\", (unsigned long long)FuncKey, NULL);\n\n    /* Original lookup call retained */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);\n\n    /* Log the result of the lookup */\n    UT_LogEvent(\"UT_ClearDefaultReturnValue: UT_GetStubEntry returned\", (unsigned long long)FuncKey, (void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Log just before clearing the stub entry */\n        UT_LogEvent(\"UT_ClearDefaultReturnValue: Clearing stub entry at\", (unsigned long long)FuncKey, (void *)StubPtr);\n\n        UT_ClearStubEntry(StubPtr);\n\n        /* Log after clearing */\n        UT_LogEvent(\"UT_ClearDefaultReturnValue: Cleared stub entry at\", (unsigned long long)FuncKey, (void *)StubPtr);\n    }\n    else\n    {\n        /* Explicitly log that there was no stub to clear */\n        UT_LogEvent(\"UT_ClearDefaultReturnValue: No stub entry to clear for\", (unsigned long long)FuncKey, NULL);\n    }\n}\n"
}