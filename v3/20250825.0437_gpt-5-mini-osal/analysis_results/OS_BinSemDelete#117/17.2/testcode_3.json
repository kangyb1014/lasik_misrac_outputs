{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen operation_status == OS_SUCCESS, OS_ObjectIdFinalizeDelete calls OS_NotifyEvent which invokes the user-supplied EventHandler (OS_SharedGlobalVars.EventHandler). If that handler (directly or indirectly) calls an OS delete routine such as OS_CleanUpObject -> OS_BinSemDelete -> OS_ObjectIdGetById -> ... -> OS_ObjectIdFinalizeDelete, the original OS_ObjectIdFinalizeDelete is re-entered via this chain. This is an indirect recursive call back to OS_ObjectIdFinalizeDelete.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1176.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete:\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging function: append human-readable trace lines to /tmp/logs/1176.txt.\n   Keep this function simple and local (static) so it doesn't call into OS services\n   that might re-enter the code under test. */\nstatic void os_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1176.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Simple timestamp prefix to help correlate nested/re-entrant calls */\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    os_logf(\"ENTRY: OS_BinSemDelete sem_id=%lu\", (unsigned long)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    os_logf(\"After OS_ObjectIdGetById sem_id=%lu return_code=%d token_addr=%p\", (unsigned long)sem_id, (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_logf(\"Calling OS_BinSemDelete_Impl sem_id=%lu token_addr=%p\", (unsigned long)sem_id, (void *)&token);\n        return_code = OS_BinSemDelete_Impl(&token);\n        os_logf(\"After OS_BinSemDelete_Impl sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n        os_logf(\"Calling OS_ObjectIdFinalizeDelete sem_id=%lu pre_return=%d token_addr=%p\", (unsigned long)sem_id, (int)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_logf(\"After OS_ObjectIdFinalizeDelete sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n    }\n\n    os_logf(\"EXIT: OS_BinSemDelete sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n    return return_code;\n}"
}