{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BinSemFlush_Impl:\n```c\nint32 OS_BinSemFlush_Impl(const OS_object_token_t *token)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* Lock the mutex ( not the table! ) */\n    if (OS_Posix_BinSemAcquireMutex(&sem->id) != OS_SUCCESS)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* increment the flush counter.  Any other threads that are\n     * currently pending in SemTake() will see the counter change and\n     * return _without_ modifying the semaphore count.\n     */\n    ++sem->flush_request;\n\n    /* unblock all threads that are be waiting on this sem */\n    pthread_cond_broadcast(&(sem->cv));\n\n    pthread_mutex_unlock(&(sem->id));\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BinSemFlush_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_mutex_t       id;\n    pthread_cond_t        cv;\n    volatile sig_atomic_t flush_request;\n    volatile sig_atomic_t current_value;\n} OS_impl_binsem_internal_record_t\n...\nOS_impl_binsem_internal_record_t OS_impl_bin_sem_table[OS_MAX_BIN_SEMAPHORES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nint32 OS_Posix_BinSemAcquireMutex(pthread_mutex_t *mut)\n{\n    struct timespec timeout;\n\n    if (clock_gettime(CLOCK_REALTIME, &timeout) != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    timeout.tv_sec += OS_POSIX_BINSEM_MAX_WAIT_SECONDS;\n\n    if (pthread_mutex_timedlock(mut, &timeout) != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_SEM_FAILURE (-6)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "typedef struct\n{\n    pthread_mutex_t       id;\n    pthread_cond_t        cv;\n    volatile sig_atomic_t flush_request;\n    volatile sig_atomic_t current_value;\n} OS_impl_binsem_internal_record_t",
    "OS_impl_binsem_internal_record_t *sem;",
    "int32 OS_Posix_BinSemAcquireMutex(pthread_mutex_t *mut)",
    "++sem->flush_request;",
    "static inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)",
    "OS_impl_binsem_internal_record_t OS_impl_bin_sem_table[OS_MAX_BIN_SEMAPHORES]",
    "sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);",
    "pthread_cond_broadcast(&(sem->cv));",
    "pthread_mutex_unlock(&(sem->id));"
  ],
  "explanation": "Fragments not listed were judged unlikely to violate Rule 8.13 because they already use const where appropriate or require a mutable pointer by design. In particular: the function parameter declaration in OS_BinSemFlush_Impl uses a const pointer (const OS_object_token_t *token) and therefore complies with the rule; the OS_ObjectIndexFromToken prototype accepts a pointer to const, which is correct; calls to pthread_cond_broadcast and pthread_mutex_unlock (and the pthread mutex/cond types) inherently require non-const pointers because those APIs modify the referred objects; OS_Posix_BinSemAcquireMutex must take a non-const pthread_mutex_t * since it locks/mutates the mutex; and the code increments sem->flush_request and manipulates semaphore internals, so the sem pointer is used for mutation and cannot simply be const-qualified without changing semantics. The listed fragments are provided for investigation because they involve pointers or pointer-producing macros/definitions where const-qualification might be overlooked or where the macro parameter handling could affect constness and should be reviewed for compliance with Rule 8.13."
}