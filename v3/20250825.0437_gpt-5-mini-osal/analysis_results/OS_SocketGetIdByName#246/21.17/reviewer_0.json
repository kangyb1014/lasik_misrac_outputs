{
  "user_message": "An agent A claimed that the following OS_SocketGetIdByName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketGetIdByName.\n```c\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nOS_SocketGetIdByName only checks that sock_name is non-NULL and forwards it to OS_ObjectIdFindByName. That function performs LENGTHCHECK(name, OS_MAX_API_NAME, ...), which typically uses a <string.h> routine such as strlen. If sock_name points to a character array that is not null-terminated (or whose terminator lies beyond the valid object bounds), the strlen (or other string.h function) will read past the object bounds, causing an out-of-bounds access. Because only a NULL-pointer check is done before calling the string handling logic, the use can result in accesses beyond the bounds of the object referenced by sock_name.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketGetIdByName:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_ObjectIdGetByName(OS_lock_mode_t lock_mode, osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    return OS_ObjectIdGetBySearch(lock_mode, idtype, OS_ObjectNameMatch, (void *)name, token);\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\ntypedef uint32 osal_id_t\n...\ntypedef int32_t   int32\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report from agent A is not correct as stated. MISRA C:2023 Rule 21.17 concerns the use of string.h functions that may access beyond the bounds of the object referenced by their pointer parameters. The target function OS_SocketGetIdByName itself does not call any string.h routine; it only performs a null-pointer check (OS_CHECK_POINTER) and forwards the pointer to OS_ObjectIdFindByName. The potential out-of-bounds read that agent A describes would occur in OS_ObjectIdFindByName (or in the LENGTHCHECK macro it invokes) if that macro uses strlen (or similar) on a non-null-terminated buffer. If such a string.h call is present and it can be invoked with a pointer to a non-terminated array, then the violation (if any) is in the code that performs the strlen-like operation (or in the macro implementation), not in OS_SocketGetIdByName.\n\nTwo further points: (1) It is normal for API functions that accept const char *name to require that the caller provide a valid null-terminated C string; if that is a documented precondition then calling strlen on name is acceptable under that contract. (2) If the codebase intends to accept arbitrary char buffers that may not be null-terminated, then the LENGTHCHECK/ARGCHECK implementation must avoid unbounded string.h calls (e.g. use a bounded routine such as strnlen with an object-size precondition or otherwise ensure the object bounds are known).\n\nSo the claim that OS_SocketGetIdByName itself violates MISRA Rule 21.17 is incorrect. If there is a violation, it would need to be shown in the implementation of LENGTHCHECK (or other code that directly calls strlen), or the API must be documented/validated to ensure callers cannot pass unterminated buffers."
}