{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_SocketGetIdByName only checks that sock_name is non-NULL and forwards it to OS_ObjectIdFindByName. That function performs LENGTHCHECK(name, OS_MAX_API_NAME, ...), which typically uses a <string.h> routine such as strlen. If sock_name points to a character array that is not null-terminated (or whose terminator lies beyond the valid object bounds), the strlen (or other string.h function) will read past the object bounds, causing an out-of-bounds access. Because only a NULL-pointer check is done before calling the string handling logic, the use can result in accesses beyond the bounds of the object referenced by sock_name.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2469.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetIdByName:\n```c\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetIdByName code.\n",
  "test_code": "/* Probe logging helper - writes control flow and pointer state to /tmp/logs/2469.txt */\nstatic void OS_SocketGetIdByName_Log(const char *stage, const osal_id_t *sock_id, const char *sock_name, int32 rc_known, int32 rc)\n{\n    FILE *f = fopen(\"/tmp/logs/2469.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not change control flow if logging fails */\n    }\n\n    /* Log the stage and pointer values. Do NOT dereference sock_name to avoid\n       introducing additional out-of-bounds accesses. This intentionally records\n       that only a NULL check is performed and that the string is not inspected here. */\n    fprintf(f, \"[OS_SocketGetIdByName] stage=%s, sock_id=%p, sock_name=%p\", stage, (const void *)sock_id, (const void *)sock_name);\n\n    if (sock_name == NULL)\n    {\n        fprintf(f, \" (sock_name is NULL)\");\n    }\n    else\n    {\n        fprintf(f, \" (sock_name is non-NULL, NOT dereferenced)\");\n    }\n\n    if (rc_known)\n    {\n        fprintf(f, \", return_code=%ld\", (long)rc);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Log entry state before performing the existing parameter checks */\n    OS_SocketGetIdByName_Log(\"entry_before_checks\", sock_id, sock_name, 0, 0);\n\n    /* Check Parameters (preserve original logic) */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Log after checking sock_id */\n    OS_SocketGetIdByName_Log(\"after_check_sock_id\", sock_id, sock_name, 0, 0);\n\n    OS_CHECK_POINTER(sock_name);\n\n    /* Log after checking sock_name (still not dereferencing the pointer) */\n    OS_SocketGetIdByName_Log(\"after_check_sock_name\", sock_id, sock_name, 0, 0);\n\n    /* Perform the original lookup and capture the return code */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    /* Log result after calling OS_ObjectIdFindByName so callers can correlate behavior */\n    OS_SocketGetIdByName_Log(\"after_ObjectIdFindByName\", sock_id, sock_name, 1, return_code);\n\n    return return_code;\n}\n"
}