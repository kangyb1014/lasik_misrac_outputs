{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe ARGCHECK(name, OS_ERR_NAME_NOT_FOUND); invocation can be dead code if the ARGCHECK macro either expands to a no-op (e.g. debug-only check compiled out) or if an identical parameter check is performed later (e.g. by LENGTHCHECK or OS_ObjectIdGetByName) so that removing the ARGCHECK call does not change program behaviour. For example, if ARGCHECK is defined as ((void)0) in production builds, or if LENGTHCHECK/OS_ObjectIdGetByName already handle NULL/invalid-name errors, the ARGCHECK statement executes but has no effect and could be removed without changing behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2462.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetIdByName:\n```c\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append a structured log line to /tmp/logs/2462.txt\n * This helper is intentionally minimal so it can be safely inserted into\n * the existing OS_SocketGetIdByName implementation without changing logic. */\nstatic void os_socket_log_probe(const char *stage, const void *sock_id_ptr, const char *sock_name, long rc)\n{\n    FILE *f = NULL;\n    struct stat st;\n\n    /* Ensure directory exists (best-effort). Ignore errors to avoid changing behavior. */\n    if (stat(\"/tmp/logs\", &st) != 0)\n    {\n        /* Try to create directory; if it fails, continue without crashing. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n    }\n\n    f = fopen(\"/tmp/logs/2462.txt\", \"a\");\n    if (!f)\n    {\n        /* If logging fails, do not affect program flow. */\n        return;\n    }\n\n    /* Timestamp */\n    {\n        time_t t = time(NULL);\n        char timestr[32];\n        if (t != (time_t)-1)\n        {\n            struct tm tm_buf;\n            if (localtime_r(&t, &tm_buf) != NULL)\n            {\n                strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n            }\n            else\n            {\n                strncpy(timestr, \"(time)\", sizeof(timestr));\n                timestr[sizeof(timestr)-1] = '\\0';\n            }\n        }\n        else\n        {\n            strncpy(timestr, \"(time)\", sizeof(timestr));\n            timestr[sizeof(timestr)-1] = '\\0';\n        }\n\n        /* Limit how much of the name we print to avoid buffer issues */\n        char name_preview[129] = {0};\n        if (sock_name != NULL)\n        {\n            /* Copy up to 128 chars, ensure NUL-termination */\n            strncpy(name_preview, sock_name, sizeof(name_preview)-1);\n            name_preview[sizeof(name_preview)-1] = '\\0';\n        }\n        else\n        {\n            strncpy(name_preview, \"(NULL)\", sizeof(name_preview)-1);\n        }\n\n        /* Write a single line with stage, pointers, name preview and rc */\n        fprintf(f, \"%s | stage=%s | sock_id=%p | sock_name_ptr=%p | sock_name=\\\"%s\\\" | rc=%ld\\n\",\n                timestr, stage, sock_id_ptr, (const void *)sock_name, name_preview, rc);\n    }\n\n    fclose(f);\n}\n\n/* Modified OS_SocketGetIdByName with probe logging inserted. The original logic is preserved. */\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Log entry and parameter values before checks */\n    os_socket_log_probe(\"enter\", (const void *)sock_id, sock_name, (long)0);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    os_socket_log_probe(\"after_check_sock_id\", (const void *)sock_id, sock_name, (long)0);\n\n    OS_CHECK_POINTER(sock_name);\n    os_socket_log_probe(\"after_check_sock_name\", (const void *)sock_id, sock_name, (long)0);\n\n    /* Call the underlying lookup and log the result */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n    os_socket_log_probe(\"after_find_by_name\", (const void *)sock_id, sock_name, (long)return_code);\n\n    return return_code;\n}\n"
}