{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(s, 0, maxlen) with maxlen == OS_MAX_PATH_LEN. If VirtualPath (the caller-supplied path) does not point to an object that is at least OS_MAX_PATH_LEN bytes long and there is no '\\0' within the actual object bounds, memchr may read past the end of the object while searching for the terminator. Example: caller passes a small buffer such as char buf[8] = {'A','B','C','D','E','F','G','H'} (no '\\0' in the buffer); calling OS_TranslatePath(buf, ...) leads to memchr(buf, 0, OS_MAX_PATH_LEN) reading beyond buf and causing undefined behavior/ out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helpers: write concise logs to /tmp/logs/1539.txt. */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1539.txt\", \"a\");\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_hex(const char *label, const void *buf, size_t len)\n{\n    FILE *f = fopen(\"/tmp/logs/1539.txt\", \"a\");\n    if (!f) return;\n    const unsigned char *b = (const unsigned char *)buf;\n    fprintf(f, \"%s (len=%zu):\", label, len);\n    for (size_t i = 0; i < len; ++i)\n    {\n        fprintf(f, \" %02X\", b[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and key state info without dereferencing caller pointer 'path' to avoid introducing new UB. */\n    probe_logf(\"OS_mkdir ENTER: path=%p access=%u OS_MAX_PATH_LEN=%d OS_MAX_LOCAL_PATH_LEN=%d\",\n               (void *)path, (unsigned)access, (int)OS_MAX_PATH_LEN, (int)OS_MAX_LOCAL_PATH_LEN);\n\n    /* Call the translation routine (this is where the reported violation may manifest).\n       We log before and after to provide evidence if the program crashes inside OS_TranslatePath. */\n    probe_logf(\"Calling OS_TranslatePath(path=%p, local_path=%p)\", (void *)path, (void *)local_path);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    probe_logf(\"OS_TranslatePath returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* local_path is our local buffer: it's safe to inspect within its bounds. */\n        void *nul = memchr(local_path, 0, OS_MAX_LOCAL_PATH_LEN);\n        if (nul != NULL)\n        {\n            /* NUL found within bounds: log as string and also hex for full context. */\n            probe_logf(\"local_path NUL at offset %td\", (ptrdiff_t)((unsigned char *)nul - (unsigned char *)local_path));\n            probe_logf(\"local_path (string): %s\", local_path);\n            probe_log_hex(\"local_path (hex prefix)\", local_path, (size_t)strnlen(local_path, OS_MAX_LOCAL_PATH_LEN));\n        }\n        else\n        {\n            /* Not NUL-terminated within bounds: log this condition and dump the full buffer in hex. */\n            probe_logf(\"local_path NOT NUL-terminated within %d bytes; dumping raw bytes\", (int)OS_MAX_LOCAL_PATH_LEN);\n            probe_log_hex(\"local_path (raw hex)\", local_path, (size_t)OS_MAX_LOCAL_PATH_LEN);\n        }\n\n        return_code = OS_DirCreate_Impl(local_path, access);\n        probe_logf(\"OS_DirCreate_Impl returned %d\", return_code);\n    }\n\n    probe_logf(\"OS_mkdir EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}