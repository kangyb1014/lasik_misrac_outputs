{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'VirtPathBegin = VirtPathLen;' is dead code. In all execution paths where VirtPathBegin is later read it has been overwritten by VirtPathBegin = OS_strnlen(filesys->virtual_mountpt, ... ) (the path where OS_ObjectIdGetBySearch returns OS_SUCCESS and the filesystem is mounted). In the other paths OS_ObjectIdGetBySearch fails or the filesystem is not mounted and return_code != OS_SUCCESS, so the later code that would use VirtPathBegin is skipped. Removing the initial assignment would not change program behaviour, thus it violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1532.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n/*\n * Probe helper: append formatted log lines to /tmp/logs/1532.txt.\n * If the directory does not exist, attempt to create it once.\n */\nstatic void write_log_line(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1532.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory and retry once. */\n        (void)system(\"mkdir -p /tmp/logs 2>/dev/null\");\n        f = fopen(\"/tmp/logs/1532.txt\", \"a\");\n        if (f == NULL)\n        {\n            return; /* Give up if still not available. */\n        }\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fclose(f);\n}\n\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Ensure local_path has a defined initial state for logging. */\n    local_path[0] = '\\0';\n\n    write_log_line(\"[OS_mkdir] called: path=\\\"%s\\\", access=%u\\n\",\n                   (path != NULL) ? path : \"(null)\", (unsigned)access);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    write_log_line(\"[OS_mkdir] after OS_TranslatePath: return_code=%d, local_path=\\\"%s\\\"\\n\",\n                   (int)return_code, local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        write_log_line(\"[OS_mkdir] calling OS_DirCreate_Impl with local_path=\\\"%s\\\", access=%u\\n\",\n                       local_path, (unsigned)access);\n\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        write_log_line(\"[OS_mkdir] after OS_DirCreate_Impl: return_code=%d\\n\",\n                       (int)return_code);\n    }\n    else\n    {\n        write_log_line(\"[OS_mkdir] skipping OS_DirCreate_Impl due to translate failure: return_code=%d\\n\",\n                       (int)return_code);\n    }\n\n    write_log_line(\"[OS_mkdir] returning: %d\\n\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}