{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TranslatePath the statement 'SysMountPointLen = 0;' is redundant: whenever SysMountPointLen is subsequently read it has already been assigned from OS_strnlen(filesys->system_mountpt, ...) in the successful mount-case, and in the non-mounted or error cases the function returns (or skips the block that uses SysMountPointLen). Therefore removing this initialization would not change program behaviour, so the assignment is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1532.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append log lines to /tmp/logs/1532.txt */\nstatic void OS_mkdir_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1532.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is not available, fail silently to preserve original behavior */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Entry log: capture inputs */\n    OS_mkdir_probe(\"OS_mkdir ENTRY: path='%s' access=%u\", (path != NULL) ? path : \"(null)\", (unsigned)access);\n\n    /* Trace the call to OS_TranslatePath and capture its result and the produced local_path */\n    return_code = OS_TranslatePath(path, local_path);\n    OS_mkdir_probe(\"OS_TranslatePath returned: %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Safely measure and log the resulting local_path (bounded) */\n        size_t len = strnlen(local_path, sizeof(local_path));\n        OS_mkdir_probe(\"OS_TranslatePath SUCCESS: local_path='%.*s' length=%zu\", (int)len, local_path, len);\n\n        OS_mkdir_probe(\"Calling OS_DirCreate_Impl with local_path='%.*s' access=%u\", (int)len, local_path, (unsigned)access);\n\n        /* Preserve original behavior: call implementation to create directory */\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        OS_mkdir_probe(\"OS_DirCreate_Impl returned: %ld\", (long)return_code);\n    }\n    else\n    {\n        OS_mkdir_probe(\"OS_TranslatePath FAILURE: skipping OS_DirCreate_Impl, returning %ld\", (long)return_code);\n    }\n\n    OS_mkdir_probe(\"OS_mkdir EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}