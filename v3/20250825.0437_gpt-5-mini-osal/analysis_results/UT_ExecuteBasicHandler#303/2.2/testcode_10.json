{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial assignment 'Counter = 0;' is dead. In all execution paths that continue past the NULL-check, Counter is overwritten with 'StubPtr->Data.Rc.Count' in the else branch. The only path where the initial value would remain is when both UT_GetStubEntry calls return NULL, but that path calls UtAssert_Abort() (does not return). Therefore the assignment has no effect on program behaviour and can be removed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteBasicHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3032.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteBasicHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteBasicHandler:\n```c\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteBasicHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Probe logging helper: append a single line to /tmp/logs/3032.txt\n */\nstatic void UT_ExecLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3032.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified UT_ExecuteBasicHandler with probes added to record control flow and\n * state relevant to the suspected dead-assignment scenario. The original\n * logic is preserved; probes only log decisions and values.\n */\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    UT_ExecLog(\"ENTER: UT_ExecuteBasicHandler FuncKey=%\" PRIuPTR \" FunctionName=%s DefaultHandler=%p\",\n               (uintptr_t)FuncKey,\n               (FunctionName != NULL) ? FunctionName : \"(null)\",\n               (void *)DefaultHandler);\n\n    /* Capture the stub entry result once (avoid double-calling any function with side effects) */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    UT_ExecLog(\"UT_GetStubEntry returned %p\", stubEntry);\n\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        UT_ExecLog(\"Branch taken: stubEntry == NULL && DefaultHandler != NULL -> calling UT_SetHandlerFunction\");\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n        UT_ExecLog(\"UT_SetHandlerFunction returned (control returned to caller)\");\n    }\n    else\n    {\n        if (stubEntry != NULL)\n        {\n            UT_ExecLog(\"Branch not taken: stubEntry != NULL (existing handler present)\");\n        }\n        else /* stubEntry == NULL && DefaultHandler == NULL */\n        {\n            UT_ExecLog(\"Branch not taken: DefaultHandler == NULL (no default to install)\");\n        }\n    }\n\n    UT_ExecLog(\"Calling UT_DefaultStubImpl(FunctionName=%s, FuncKey=%\" PRIuPTR \")\",\n               (FunctionName != NULL) ? FunctionName : \"(null)\",\n               (uintptr_t)FuncKey);\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n\n    UT_ExecLog(\"EXIT: UT_ExecuteBasicHandler\");\n}\n"
}