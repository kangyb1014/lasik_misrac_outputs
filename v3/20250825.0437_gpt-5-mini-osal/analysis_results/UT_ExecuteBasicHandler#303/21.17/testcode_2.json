{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the memset may write beyond the object bounds if the return-buffer entry is misconfigured. For example, if StubPtr is non-NULL but StubPtr->Data.Buff.BasePtr is NULL (or points to a buffer smaller than StubPtr->Data.Buff.TotalSize) and Data.Buff.TotalSize > 0, the call memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize) will access memory out of bounds. There is no check in this code that BasePtr is non-NULL or that TotalSize does not exceed the actual allocated buffer, so this can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteBasicHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3039.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteBasicHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteBasicHandler:\n```c\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteBasicHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted log entries to /tmp/logs/3039.txt */\nstatic void UT_ExecuteBasicHandler_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3039.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Log entry and parameters we received */\n    UT_ExecuteBasicHandler_Log(\"ENTER UT_ExecuteBasicHandler: FunctionName=%s, DefaultHandler=%p\",\n                               FunctionName ? FunctionName : \"(null)\", (void *)DefaultHandler);\n\n    /* Retrieve stub entry once so we can both inspect/log and preserve original logic */\n    void *stub_entry = (void *)UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    UT_ExecuteBasicHandler_Log(\"UT_GetStubEntry returned stub_entry=%p\", stub_entry);\n\n    /* Check if the test case registered a hook, and use the default if not */\n    if (stub_entry == NULL && DefaultHandler != NULL)\n    {\n        UT_ExecuteBasicHandler_Log(\"No stub entry found (stub_entry==NULL). Calling UT_SetHandlerFunction to install DefaultHandler=%p\", (void *)DefaultHandler);\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n    else\n    {\n        if (stub_entry != NULL)\n        {\n            UT_ExecuteBasicHandler_Log(\"Stub entry present (stub_entry!=NULL). Not installing DefaultHandler.\");\n        }\n        else\n        {\n            UT_ExecuteBasicHandler_Log(\"No DefaultHandler provided (DefaultHandler==NULL) and no stub entry. Nothing to install.\");\n        }\n    }\n\n    UT_ExecuteBasicHandler_Log(\"Calling UT_DefaultStubImpl with FunctionName=%s, FuncKey=%p, arg_count=0, args=NULL\",\n                               FunctionName ? FunctionName : \"(null)\", (void *)0);\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n\n    UT_ExecuteBasicHandler_Log(\"EXIT UT_ExecuteBasicHandler: completed call to UT_DefaultStubImpl\");\n}\n"
}