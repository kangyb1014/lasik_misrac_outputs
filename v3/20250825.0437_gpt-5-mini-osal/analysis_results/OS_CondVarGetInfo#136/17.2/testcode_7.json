{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS not initialized. If OS_DEBUG is implemented in terms of OS_printf (e.g. macro or wrapper that calls OS_printf), this leads to indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1366.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1366.txt */\nstatic void os_condvar_probe_log(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure directory exists; ignore error if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    fp = fopen(\"/tmp/logs/1366.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If we cannot open the file, silently return (avoid using OS logging) */\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', fp);\n    (void)fclose(fp);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters */\n    os_condvar_probe_log(\"OS_CondVarGetInfo ENTRY: var_id=%llu condvar_prop=%p\", (unsigned long long)var_id, (void *)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    /* Log after pointer check */\n    os_condvar_probe_log(\"OS_CondVarGetInfo after OS_CHECK_POINTER: condvar_prop=%p\", (void *)condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    /* Log after clearing output structure */\n    os_condvar_probe_log(\"OS_CondVarGetInfo memset done: condvar_prop=%p size=%zu\", (void *)condvar_prop, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    os_condvar_probe_log(\"OS_CondVarGetInfo OS_ObjectIdGetById returned %ld; token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Log record info (guard against NULL) */\n        if (record != NULL)\n        {\n            const char *rname = record->name_entry ? record->name_entry : \"(null)\";\n            os_condvar_probe_log(\"OS_CondVarGetInfo record found: name_entry=\\\"%s\\\" creator=%llu\", rname, (unsigned long long)record->creator);\n        }\n        else\n        {\n            os_condvar_probe_log(\"OS_CondVarGetInfo record is NULL for token=%p\", (void *)&token);\n        }\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Log populated fields before calling implementation-specific function */\n        os_condvar_probe_log(\"OS_CondVarGetInfo populated condvar_prop->name=\\\"%s\\\" creator=%llu\", condvar_prop->name, (unsigned long long)condvar_prop->creator);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        /* Log return from Impl */\n        os_condvar_probe_log(\"OS_CondVarGetInfo OS_CondVarGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release */\n        os_condvar_probe_log(\"OS_CondVarGetInfo token released: token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        os_condvar_probe_log(\"OS_CondVarGetInfo did not find object: var_id=%llu return_code=%ld\", (unsigned long long)var_id, (long)return_code);\n    }\n\n    /* Final return log */\n    os_condvar_probe_log(\"OS_CondVarGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}