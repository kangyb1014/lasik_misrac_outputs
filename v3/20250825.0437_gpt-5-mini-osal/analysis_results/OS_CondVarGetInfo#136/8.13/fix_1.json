{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_CondVar_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void OS_CondVar_log_bytes(const char *label, const char *s, size_t max_bytes)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: \", label);\n    if (s == NULL)\n    {\n        fprintf(f, \"(null)\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Print as a safe printable string up to max_bytes, also show hex for non-printables */\n    size_t i;\n    for (i = 0; i < max_bytes && s[i] != '\\0'; ++i)\n    {\n        unsigned char c = (unsigned char)s[i];\n        if (c >= 0x20 && c <= 0x7e)\n        {\n            fputc((int)c, f);\n        }\n        else\n        {\n            fprintf(f, \"\\\\x%02x\", c);\n        }\n    }\n    if (i == 0)\n    {\n        fprintf(f, \"(empty)\\n\");\n    }\n    else\n    {\n        if (i < max_bytes && s[i] == '\\0')\n        {\n            fprintf(f, \" [len=%zu]\\n\", i);\n        }\n        else\n        {\n            fprintf(f, \" [truncated to %zu bytes]\\n\", max_bytes);\n        }\n    }\n\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters (pointer values only to avoid dereferencing invalid pointers) */\n    OS_CondVar_log(\"OS_CondVarGetInfo entry: var_id=%\" PRIuPTR \", condvar_prop_ptr=%\" PRIuPTR,\n                   (uintptr_t)var_id, (uintptr_t)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    OS_CondVar_log(\"condvar_prop zeroed (size=%zu)\", (size_t)sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVar_log(\"OS_ObjectIdGetById returned %d, token_ptr=%\" PRIuPTR, return_code, (uintptr_t)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n        OS_CondVar_log(\"record obtained: record_ptr=%\" PRIuPTR, (uintptr_t)record);\n\n        /* Probe the name source before copying. Use a local const pointer to avoid modifying the source. */\n        if (record != NULL)\n        {\n            const char *name_src = (const char *)record->name_entry;\n            OS_CondVar_log(\"record->name_entry pointer=%\" PRIuPTR, (uintptr_t)name_src);\n\n            /* Log up to the destination buffer size - 1 (same as the strncpy call below) */\n            OS_CondVar_log_bytes(\"record->name_entry (preview)\", name_src, sizeof(condvar_prop->name) - 1);\n\n            /* Also log the creator value in the record (as an integer representation) */\n            OS_CondVar_log(\"record->creator (raw)=%\" PRIuPTR, (uintptr_t)record->creator);\n        }\n        else\n        {\n            OS_CondVar_log(\"record is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        /* Preserve original copy semantics */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n\n        /* Log the destination buffer after copy */\n        OS_CondVar_log_bytes(\"condvar_prop->name (after strncpy)\", condvar_prop->name, sizeof(condvar_prop->name) - 1);\n\n        condvar_prop->creator = record->creator;\n        OS_CondVar_log(\"condvar_prop->creator set to %\" PRIuPTR, (uintptr_t)condvar_prop->creator);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        OS_CondVar_log(\"OS_CondVarGetInfo_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_CondVar_log(\"token released\");\n    }\n    else\n    {\n        OS_CondVar_log(\"OS_ObjectIdGetById failed with %d; skipping record access\", return_code);\n    }\n\n    OS_CondVar_log(\"OS_CondVarGetInfo exit: return_code=%d\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c: In function 'OS_CondVar_log':\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:305:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  305 |     vfprintf(f, fmt, ap);\n      |                      ^~\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c: In function 'OS_CondVarGetInfo':\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:367:55: error: expected ')' before 'PRIuPTR'\n  367 |     OS_CondVar_log(\"OS_CondVarGetInfo entry: var_id=%\" PRIuPTR \", condvar_prop_ptr=%\" PRIuPTR,\n      |                   ~                                   ^~~~~~~~\n      |                                                       )\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:56:1: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   55 | #include \"osapi-task.h\"\n  +++ |+#include <inttypes.h>\n   56 | \n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:377:65: error: expected ')' before 'PRIuPTR'\n  377 |     OS_CondVar_log(\"OS_ObjectIdGetById returned %d, token_ptr=%\" PRIuPTR, return_code, (uintptr_t)&token);\n      |                   ~                                             ^~~~~~~~\n      |                                                                 )\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:377:66: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  377 |     OS_CondVar_log(\"OS_ObjectIdGetById returned %d, token_ptr=%\" PRIuPTR, return_code, (uintptr_t)&token);\n      |                                                                  ^~~~~~~\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:382:55: error: expected ')' before 'PRIuPTR'\n  382 |         OS_CondVar_log(\"record obtained: record_ptr=%\" PRIuPTR, (uintptr_t)record);\n      |                       ~                               ^~~~~~~~\n      |                                                       )\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:382:56: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  382 |         OS_CondVar_log(\"record obtained: record_ptr=%\" PRIuPTR, (uintptr_t)record);\n      |                                                        ^~~~~~~\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:388:58: error: expected ')' before 'PRIuPTR'\n  388 |             OS_CondVar_log(\"record->name_entry pointer=%\" PRIuPTR, (uintptr_t)name_src);\n      |                           ~                              ^~~~~~~~\n      |                                                          )\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:388:59: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  388 |             OS_CondVar_log(\"record->name_entry pointer=%\" PRIuPTR, (uintptr_t)name_src);\n      |                                                           ^~~~~~~\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:394:53: error: expected ')' before 'PRIuPTR'\n  394 |             OS_CondVar_log(\"record->creator (raw)=%\" PRIuPTR, (uintptr_t)record->creator);\n      |                           ~                         ^~~~~~~~\n      |                                                     )\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:394:54: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  394 |             OS_CondVar_log(\"record->creator (raw)=%\" PRIuPTR, (uintptr_t)record->creator);\n      |                                                      ^~~~~~~\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:408:56: error: expected ')' before 'PRIuPTR'\n  408 |         OS_CondVar_log(\"condvar_prop->creator set to %\" PRIuPTR, (uintptr_t)condvar_prop->creator);\n      |                       ~                                ^~~~~~~~\n      |                                                        )\n/tmp/tmptpvhdmn3/src/src/os/shared/src/osapi-condvar.c:408:57: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  408 |         OS_CondVar_log(\"condvar_prop->creator set to %\" PRIuPTR, (uintptr_t)condvar_prop->creator);\n      |                                                         ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/__/__/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3353: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\nstatic void OS_CondVar_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the system's va_list to avoid mismatched typedef issues in wrapped environments */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void OS_CondVar_log_bytes(const char *label, const char *s, size_t max_bytes)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: \", label);\n    if (s == NULL)\n    {\n        fprintf(f, \"(null)\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Print as a safe printable string up to max_bytes, also show hex for non-printables */\n    size_t i;\n    for (i = 0; i < max_bytes && s[i] != '\\0'; ++i)\n    {\n        unsigned char c = (unsigned char)s[i];\n        if (c >= 0x20 && c <= 0x7e)\n        {\n            fputc((int)c, f);\n        }\n        else\n        {\n            fprintf(f, \"\\\\x%02x\", c);\n        }\n    }\n    if (i == 0)\n    {\n        fprintf(f, \"(empty)\\n\");\n    }\n    else\n    {\n        if (i < max_bytes && s[i] == '\\0')\n        {\n            fprintf(f, \" [len=%zu]\\n\", i);\n        }\n        else\n        {\n            fprintf(f, \" [truncated to %zu bytes]\\n\", max_bytes);\n        }\n    }\n\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters (pointer values only to avoid dereferencing invalid pointers) */\n    OS_CondVar_log(\"OS_CondVarGetInfo entry: var_id=%\" PRIuPTR \", condvar_prop_ptr=%\" PRIuPTR,\n                   (uintptr_t)var_id, (uintptr_t)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    OS_CondVar_log(\"condvar_prop zeroed (size=%zu)\", (size_t)sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVar_log(\"OS_ObjectIdGetById returned %d, token_ptr=%\" PRIuPTR, return_code, (uintptr_t)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n        OS_CondVar_log(\"record obtained: record_ptr=%\" PRIuPTR, (uintptr_t)record);\n\n        /* Probe the name source before copying. Use a local const pointer to avoid modifying the source. */\n        if (record != NULL)\n        {\n            const char *name_src = (const char *)record->name_entry;\n            OS_CondVar_log(\"record->name_entry pointer=%\" PRIuPTR, (uintptr_t)name_src);\n\n            /* Log up to the destination buffer size - 1 (same as the strncpy call below) */\n            OS_CondVar_log_bytes(\"record->name_entry (preview)\", name_src, sizeof(condvar_prop->name) - 1);\n\n            /* Also log the creator value in the record (as an integer representation) */\n            OS_CondVar_log(\"record->creator (raw)=%\" PRIuPTR, (uintptr_t)record->creator);\n        }\n        else\n        {\n            OS_CondVar_log(\"record is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        /* Preserve original copy semantics */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n\n        /* Log the destination buffer after copy */\n        OS_CondVar_log_bytes(\"condvar_prop->name (after strncpy)\", condvar_prop->name, sizeof(condvar_prop->name) - 1);\n\n        condvar_prop->creator = record->creator;\n        OS_CondVar_log(\"condvar_prop->creator set to %\" PRIuPTR, (uintptr_t)condvar_prop->creator);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        OS_CondVar_log(\"OS_CondVarGetInfo_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_CondVar_log(\"token released\");\n    }\n    else\n    {\n        OS_CondVar_log(\"OS_ObjectIdGetById failed with %d; skipping record access\", return_code);\n    }\n\n    OS_CondVar_log(\"OS_CondVarGetInfo exit: return_code=%d\", return_code);\n    return return_code;\n}\n",
  "explanation": "Two issues prevented compilation:\n\n1) The PRIuPTR macro (used in format strings) is defined in <inttypes.h>. I added #include <inttypes.h> so those format macros are available.\n\n2) In some build environments the project's va_list is wrapped/typedef'd (e.g. OCS_va_list) which can cause a type mismatch when passing the va_list to vfprintf. I cast the va_list to the system va_list type in the vfprintf call: vfprintf(f, fmt, (va_list)ap); This preserves the original variadic logging logic while avoiding the typedef mismatch.\n\nNo other logic was changed; only includes and a safe cast were added to fix the compilation errors."
}