{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_CondVarGetInfo_Impl(const OS_object_token_t *token, OS_condvar_prop_t *condvar_prop) is defined to do nothing and simply return OS_SUCCESS. It is invoked from OS_CondVarGetInfo and its return value overwrites a variable that was already OS_SUCCESS. Because the implementation has no side effects (it does not modify *condvar_prop or *token) and always returns a constant, executing the call has no effect on program behaviour; removing the call (or the no-op implementation) would not change program behaviour. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1362.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends human readable traces to /tmp/logs/1362.txt */\nstatic void OS_CondVarGetInfo_Log(const char *stage,\n                                  osal_id_t var_id,\n                                  int32 return_code,\n                                  const OS_object_token_t *token,\n                                  const OS_condvar_prop_t *prop)\n{\n    FILE *f = fopen(\"/tmp/logs/1362.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not interfere with program behavior if logging fails */\n    }\n\n    fprintf(f, \"[OS_CondVarGetInfo] stage=%s var_id=%llu return_code=%d\\n\",\n            stage,\n            (unsigned long long) (uintptr_t) var_id,\n            (int) return_code);\n\n    if (prop != NULL)\n    {\n        /* Print a safe snapshot of the important fields */\n        /* Ensure strings are NUL-terminated for logging */\n        char name_buf[sizeof(prop->name) + 1];\n        memset(name_buf, 0, sizeof(name_buf));\n        memcpy(name_buf, prop->name, sizeof(prop->name));\n        fprintf(f, \"  prop->name=\\\"%s\\\" prop->creator=%llu\\n\",\n                name_buf,\n                (unsigned long long) prop->creator);\n    }\n\n    if (token != NULL)\n    {\n        /* Dump token as bytes to track token contents without assuming structure */\n        const unsigned char *p = (const unsigned char *) token;\n        size_t i;\n        fprintf(f, \"  token_bytes=\");\n        for (i = 0; i < sizeof(*token); ++i)\n        {\n            fprintf(f, \"%02X\", (unsigned) p[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    /* Log entry with input var_id and pointer state */\n    OS_CondVarGetInfo_Log(\"entry\", var_id, -1, NULL, condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    /* Log after clearing the output structure */\n    OS_CondVarGetInfo_Log(\"after_memset\", var_id, -1, NULL, condvar_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of ObjectIdGetById and token bytes */\n    OS_CondVarGetInfo_Log(\"after_ObjectIdGetById\", var_id, return_code, &token, condvar_prop);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Copy basic info into the output structure as in original implementation */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->name[sizeof(condvar_prop->name) - 1] = '\\0';\n        condvar_prop->creator = record->creator;\n\n        /* Log state just before calling the implementation hook */\n        OS_CondVarGetInfo_Log(\"before_Impl\", var_id, return_code, &token, condvar_prop);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        /* Log state after calling the implementation hook */\n        OS_CondVarGetInfo_Log(\"after_Impl\", var_id, return_code, &token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_CondVarGetInfo_Log(\"after_Release\", var_id, return_code, NULL, condvar_prop);\n    }\n    else\n    {\n        /* Log error path where GetById failed */\n        OS_CondVarGetInfo_Log(\"GetById_failed\", var_id, return_code, NULL, condvar_prop);\n    }\n\n    /* Final return logging */\n    OS_CondVarGetInfo_Log(\"return\", var_id, return_code, NULL, condvar_prop);\n\n    return return_code;\n}\n"
}