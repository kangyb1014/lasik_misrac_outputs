{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_CondVarGetInfo_Impl(&token, condvar_prop) is dead code in this project because the provided implementation simply returns OS_SUCCESS and performs no observable action or modification of condvar_prop or token. Removing the call would not change the function's returned value or the contents of condvar_prop (the earlier return_code from OS_ObjectIdGetById is already OS_SUCCESS), so the operation is executed but has no effect on program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1362.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "int32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    /* Open probe log for this function invocation. Appending so multiple calls accumulate evidence. */\n    {\n        FILE *probe_f = fopen(\"/tmp/logs/1362.txt\", \"a\");\n        if (probe_f != NULL)\n        {\n            fprintf(probe_f, \"ENTER: OS_CondVarGetInfo var_id=%llu condvar_prop=%p\\n\",\n                    (unsigned long long)var_id, (void *)condvar_prop);\n            fflush(probe_f);\n            fclose(probe_f);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of ObjectIdGetById and token state */\n    {\n        FILE *probe_f = fopen(\"/tmp/logs/1362.txt\", \"a\");\n        if (probe_f != NULL)\n        {\n            fprintf(probe_f, \"After OS_ObjectIdGetById: return_code=%d\\n\", (int)return_code);\n            /* Dump token bytes to capture its state irrespective of its type */\n            unsigned char *tok_bytes = (unsigned char *)&token;\n            size_t tok_sz = sizeof(token);\n            fprintf(probe_f, \"token_bytes=\");\n            for (size_t i = 0; i < tok_sz; ++i)\n            {\n                fprintf(probe_f, \"%02x\", (unsigned int)tok_bytes[i]);\n            }\n            fprintf(probe_f, \"\\n\");\n            fflush(probe_f);\n            fclose(probe_f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Log state before calling the platform-specific implementation */\n        {\n            FILE *probe_f = fopen(\"/tmp/logs/1362.txt\", \"a\");\n            if (probe_f != NULL)\n            {\n                fprintf(probe_f, \"Before Impl call: record->name_entry=\\\"%s\\\" record->creator=%llu\\n\",\n                        record->name_entry, (unsigned long long)record->creator);\n                fprintf(probe_f, \"condvar_prop before Impl: name=\\\"%s\\\" creator=%llu\\n\",\n                        condvar_prop->name, (unsigned long long)condvar_prop->creator);\n                fflush(probe_f);\n                fclose(probe_f);\n            }\n        }\n\n        /* Call the implementation and capture its return for logging */\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        /* Log result of the implementation and the condvar_prop state after the call */\n        {\n            FILE *probe_f = fopen(\"/tmp/logs/1362.txt\", \"a\");\n            if (probe_f != NULL)\n            {\n                fprintf(probe_f, \"After Impl call: impl_return=%d\\n\", (int)return_code);\n                fprintf(probe_f, \"condvar_prop after Impl: name=\\\"%s\\\" creator=%llu\\n\",\n                        condvar_prop->name, (unsigned long long)condvar_prop->creator);\n                fflush(probe_f);\n                fclose(probe_f);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log release and final return code */\n        {\n            FILE *probe_f = fopen(\"/tmp/logs/1362.txt\", \"a\");\n            if (probe_f != NULL)\n            {\n                fprintf(probe_f, \"Released token and returning return_code=%d\\n\", (int)return_code);\n                fflush(probe_f);\n                fclose(probe_f);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}