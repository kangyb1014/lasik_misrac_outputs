{
  "user_message": "An agent A claimed that the following OS_ForEachFilterCreator code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ForEachFilterCreator.\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn OS_ForEachFilterCreator the parameter ref is a void * and is assigned to a non-const pointer: OS_creator_filter_t *filter = ref;. The function only reads filter->creator_id (no modification), so per MISRA C:2023 Rule 8.13 the pointer should be to a const-qualified type (e.g. const OS_creator_filter_t *filter or the parameter should be const void *ref). The current non-const declaration therefore violates the rule.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ForEachFilterCreator:\ntypedef struct\n{\n    osal_id_t        creator_id;\n    OS_ArgCallback_t user_callback;\n    void *           user_arg;\n} OS_creator_filter_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\nstatic inline bool OS_ObjectIdEqual(osal_id_t object_id1, osal_id_t object_id2)\n{\n    return (OS_ObjectIdToInteger(object_id1) == OS_ObjectIdToInteger(object_id2));\n}\n...\nstatic inline bool OS_ObjectIdIsValid(osal_id_t object_id)\n{\n    osal_objtype_t objtype = OS_ObjectIdToType_Impl(object_id);\n    return (objtype > OS_OBJECT_TYPE_UNDEFINED && objtype < OS_OBJECT_TYPE_USER);\n}\n...\n#define OS_OBJECT_CREATOR_ANY OS_OBJECT_ID_UNDEFINED\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_ForEachFilterCreator the parameter ref is declared as void * but is only used for read-only access (filter->creator_id). According to MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the local pointer (or the parameter) should be const-qualified. Concretely either change the local declaration to\n  const OS_creator_filter_t *filter = ref;\nor better change the function signature to\n  bool OS_ForEachFilterCreator(const void *ref, ...)\nso that the intent of read-only access is expressed and the code conforms to the rule. If there is a compelling reason that callers must obtain a non-const pointer through this parameter elsewhere, that should be documented, but as written the function violates Rule 8.13."
}