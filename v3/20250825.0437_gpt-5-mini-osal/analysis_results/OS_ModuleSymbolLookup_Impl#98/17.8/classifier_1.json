{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup_Impl:\n```c\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    return status;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleSymbolLookup_Impl:\nextern OS_impl_module_internal_record_t OS_impl_module_table[OS_MAX_MODULES]\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatus = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment passes the parameter SymbolAddress and SymbolName to another function without reassigning them. Rule 17.8 forbids modifying the parameter variables themselves (e.g. reassigning SymbolAddress = NULL or SymbolName = \"...\"), but does allow modifying the object pointed to by a pointer parameter. In this fragment the pointer variables are not modified; only the object they point to may be modified by OS_GenericSymbolLookup_Impl (which is permitted)."
}