{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG call is a runtime statement that expands to an empty macro (#define OS_DEBUG(__VA_ARGS__) ). In the compiled configuration shown the invocation OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\"); becomes an empty statement (a no-op) that is executed but has no effect; removing it would not change program behaviour. Therefore this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1242.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Init:\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper - appends diagnostic information to /tmp/logs/1242.txt */\nstatic void OS_API_Probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1242.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier tracing */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm *lt = localtime(&t);\n        if (lt != NULL)\n        {\n            fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n                    lt->tm_year + 1900, lt->tm_mon + 1, lt->tm_mday,\n                    lt->tm_hour, lt->tm_min, lt->tm_sec);\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    OS_API_Probe(\"Enter OS_API_Init: GlobalState=%ld\", (long)OS_SharedGlobalVars.GlobalState);\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        /* Log the control path and state so this occurrence can be reproduced */\n        OS_API_Probe(\"Ignored redundant OS_API_Init() call detected - returning OS_SUCCESS (GlobalState=0x%lx)\",\n                     (unsigned long)OS_SharedGlobalVars.GlobalState);\n\n        /* Original behavior preserved: early return */\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n    OS_API_Probe(\"Cleared OS_SharedGlobalVars via memset\");\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n    OS_API_Probe(\"DebugLevel set to default (1)\");\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n    OS_API_Probe(\"Set GlobalState=OS_INIT_MAGIC_NUMBER (0x%lx)\", (unsigned long)OS_SharedGlobalVars.GlobalState);\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    OS_API_Probe(\"OS_ObjectIdInit returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_API_Probe(\"Aborting OS_API_Init due to OS_ObjectIdInit failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        OS_API_Probe(\"Calling OS_API_Impl_Init for idtype=0x%lx\", (unsigned long)idtype);\n        return_code = OS_API_Impl_Init(idtype);\n        OS_API_Probe(\"OS_API_Impl_Init(0x%lx) returned %d\", (unsigned long)idtype, (int)return_code);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_API_Probe(\"OS_API_Impl_Init(0x%lx) failed to initialize: %d\", (unsigned long)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                OS_API_Probe(\"OS_TaskAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                OS_API_Probe(\"OS_QueueAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                OS_API_Probe(\"OS_BinSemAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                OS_API_Probe(\"OS_CountSemAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                OS_API_Probe(\"OS_MutexAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                OS_API_Probe(\"OS_ModuleAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                OS_API_Probe(\"OS_TimeBaseAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                OS_API_Probe(\"OS_TimerCbAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                OS_API_Probe(\"OS_FileAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                OS_API_Probe(\"OS_DirAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                OS_API_Probe(\"OS_FileSysAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                OS_API_Probe(\"OS_ConsoleAPI_Init returned %d\", (int)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                OS_API_Probe(\"OS_CondVarAPI_Init returned %d\", (int)return_code);\n                break;\n            default:\n                OS_API_Probe(\"Unhandled idtype in switch: 0x%lx\", (unsigned long)idtype);\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_API_Probe(\"ID type 0x%lx shared layer failed to initialize: %d\", (unsigned long)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_API_Probe(\"Calling OS_NetworkAPI_Init\");\n        return_code = OS_NetworkAPI_Init();\n        OS_API_Probe(\"OS_NetworkAPI_Init returned %d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_API_Probe(\"Calling OS_SocketAPI_Init\");\n        return_code = OS_SocketAPI_Init();\n        OS_API_Probe(\"OS_SocketAPI_Init returned %d\", (int)return_code);\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_API_Probe(\"Implementation failed to initialize tick time globals (MicroSecPerTick=%ld, TicksPerSecond=%ld)\",\n                     (long)OS_SharedGlobalVars.MicroSecPerTick, (long)OS_SharedGlobalVars.TicksPerSecond);\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n    OS_API_Probe(\"Computed microSecPerSec=%lu (MicroSecPerTick=%ld, TicksPerSecond=%ld)\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_API_Probe(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\",\n                     (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                     (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n        OS_API_Probe(\"Initialization failed - setting GlobalState=OS_SHUTDOWN_MAGIC_NUMBER (0x%lx)\",\n                     (unsigned long)OS_SharedGlobalVars.GlobalState);\n    }\n\n    OS_API_Probe(\"Exit OS_API_Init returning %d\", (int)return_code);\n    return return_code;\n}\n"
}