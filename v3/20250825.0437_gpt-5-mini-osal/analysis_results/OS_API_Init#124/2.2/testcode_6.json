{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG macro is defined with an empty replacement list (#define OS_DEBUG(__VA_ARGS__)), so every invocation like OS_DEBUG(\"...\"); in OS_API_Init expands to an empty statement (a no-op). Those no-op statements are executed at runtime but their removal would not affect program behaviour, which matches the definition of dead code in MISRA C 2023 Rule 2.2. Example: the initial OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\"); becomes a redundant empty statement and thus constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1242.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Init:\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/*\n * Probe/log helper - append formatted messages to /tmp/logs/1242.txt\n * Kept static to limit linkage scope and avoid affecting other translation units.\n */\nstatic void OS_API_Init_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1242.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /* Log entry and initial state */\n    OS_API_Init_probe(\"ENTER OS_API_Init: GlobalState=0x%08lx\",\n                       (unsigned long)OS_SharedGlobalVars.GlobalState);\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        /* Keep original debug call (may be no-op) but also emit our probe so evidence exists */\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        OS_API_Init_probe(\"REDUNDANT INIT: detected previously-initialized state (GlobalState=0x%08lx). Returning OS_SUCCESS\",\n                           (unsigned long)OS_SharedGlobalVars.GlobalState);\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n    OS_API_Init_probe(\"After memset: GlobalState=0x%08lx, DebugLevel=%ld, MicroSecPerTick=%ld, TicksPerSecond=%ld\",\n                       (unsigned long)OS_SharedGlobalVars.GlobalState,\n                       (long)OS_SharedGlobalVars.DebugLevel,\n                       (long)OS_SharedGlobalVars.MicroSecPerTick,\n                       (long)OS_SharedGlobalVars.TicksPerSecond);\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n    OS_API_Init_probe(\"Debug level set to default: %ld\", (long)OS_SharedGlobalVars.DebugLevel);\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n    OS_API_Init_probe(\"GlobalState set to OS_INIT_MAGIC_NUMBER (0x%08lx)\", (unsigned long)OS_SharedGlobalVars.GlobalState);\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    OS_API_Init_probe(\"OS_ObjectIdInit() returned: %ld\", (long)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_API_Init_probe(\"Aborting: OS_ObjectIdInit failed with %ld\", (long)return_code);\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        OS_API_Init_probe(\"Loop idtype start: 0x%02lx\", (unsigned long)idtype);\n\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        OS_API_Init_probe(\"OS_API_Impl_Init(0x%02lx) returned %ld\", (unsigned long)idtype, (long)return_code);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            OS_API_Init_probe(\"Impl init failure for idtype 0x%02lx: %ld\", (unsigned long)idtype, (long)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                OS_API_Init_probe(\"OS_TaskAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                OS_API_Init_probe(\"OS_QueueAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                OS_API_Init_probe(\"OS_BinSemAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                OS_API_Init_probe(\"OS_CountSemAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                OS_API_Init_probe(\"OS_MutexAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                OS_API_Init_probe(\"OS_ModuleAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                OS_API_Init_probe(\"OS_TimeBaseAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                OS_API_Init_probe(\"OS_TimerCbAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                OS_API_Init_probe(\"OS_FileAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                OS_API_Init_probe(\"OS_DirAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                OS_API_Init_probe(\"OS_FileSysAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                OS_API_Init_probe(\"OS_ConsoleAPI_Init() -> %ld\", (long)return_code);\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                OS_API_Init_probe(\"OS_CondVarAPI_Init() -> %ld\", (long)return_code);\n                break;\n            default:\n                OS_API_Init_probe(\"Unknown idtype 0x%02lx: no-op in switch\", (unsigned long)idtype);\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            OS_API_Init_probe(\"Shared layer failure for idtype 0x%02lx: %ld\", (unsigned long)idtype, (long)return_code);\n            break;\n        }\n\n        OS_API_Init_probe(\"Loop idtype end: 0x%02lx, current return_code=%ld\", (unsigned long)idtype, (long)return_code);\n    }\n\n    OS_API_Init_probe(\"After per-id init loop: return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n        OS_API_Init_probe(\"OS_NetworkAPI_Init() -> %ld\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n        OS_API_Init_probe(\"OS_SocketAPI_Init() -> %ld\", (long)return_code);\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        OS_API_Init_probe(\"Tick time globals invalid: MicroSecPerTick=%ld, TicksPerSecond=%ld\",\n                           (long)OS_SharedGlobalVars.MicroSecPerTick,\n                           (long)OS_SharedGlobalVars.TicksPerSecond);\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n    OS_API_Init_probe(\"Computed microSecPerSec=%lu (MicroSecPerTick=%ld, TicksPerSecond=%ld)\",\n                       (unsigned long)microSecPerSec,\n                       (long)OS_SharedGlobalVars.MicroSecPerTick,\n                       (long)OS_SharedGlobalVars.TicksPerSecond);\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n        OS_API_Init_probe(\"WARNING: microSecPerSec != 1000000: %lu\", (unsigned long)microSecPerSec);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n        OS_API_Init_probe(\"Initialization failed: return_code=%ld. GlobalState set to OS_SHUTDOWN_MAGIC_NUMBER (0x%08lx)\",\n                           (long)return_code, (unsigned long)OS_SharedGlobalVars.GlobalState);\n    }\n\n    OS_API_Init_probe(\"EXIT OS_API_Init: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}