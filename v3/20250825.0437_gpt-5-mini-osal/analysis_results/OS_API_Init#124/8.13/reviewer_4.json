{
  "user_message": "An agent A claimed that the following OS_API_Init code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_API_Init.\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThis call passes a string literal to OS_DEBUG. If OS_DEBUG is declared to accept a non-const pointer (e.g. void OS_DEBUG(char *fmt, ...)) then the pointer parameter is not const-qualified and Rule 8.13 is violated. The fix is to declare the format parameter as const char * (e.g. void OS_DEBUG(const char *fmt, ...)).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[OS_API_Init] impl-init-failed: fmt_ptr=0x5576db5bab48\n[OS_API_Init] impl-init-failed: fmt_sample=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\"\n[OS_API_Init] impl-init-failed-context: idtype=0x1 return_code=-1\n[OS_API_Init] microsec-warning: fmt_ptr=0x5576db5bac78\n[OS_API_Init] microsec-warning: fmt_sample=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\"\n[OS_API_Init] microsec-warning-values: microSecPerSec=0 MicroSecPerTick=0 TicksPerSecond=0\n[OS_API_Init] impl-init-failed: fmt_ptr=0x5585f780ea08\n[OS_API_Init] impl-init-failed: fmt_sample=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\"\n[OS_API_Init] impl-init-failed-context: idtype=0x1 return_code=-1\n[OS_API_Init] microsec-warning: fmt_ptr=0x5585f780eb38\n[OS_API_Init] microsec-warning: fmt_sample=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\"\n[OS_API_Init] microsec-warning-values: microSecPerSec=0 MicroSecPerTick=0 TicksPerSecond=0\n[OS_API_Init] impl-init-failed: fmt_ptr=0x55e7a5e05a58\n[OS_API_Init] impl-init-failed: fmt_sample=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\"\n[OS_API_Init] impl-init-failed-context: idtype=0x1 return_code=-1\n[OS_API_Init] microsec-warning: fmt_ptr=0x55e7a5e05b88\n[OS_API_Init] microsec-warning: fmt_sample=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\"\n[OS_API_Init] microsec-warning-values: microSecPerSec=0 MicroSecPerTick=0 TicksPerSecond=0\n[OS_API_Init] impl-init-failed: fmt_ptr=0x55a4c9964e58\n[OS_API_Init] impl-init-failed: fmt_sample=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\"\n[OS_API_Init] impl-init-failed-context: idtype=0x1 return_code=-1\n[OS_API_Init] microsec-warning: fmt_ptr=0x55a4c9964f88\n[OS_API_Init] microsec-warning: fmt_sample=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\"\n[OS_API_Init] microsec-warning-values: microSecPerSec=0 MicroSecPerTick=0 TicksPerSecond=0\n[OS_API_Init] impl-init-failed: fmt_ptr=0x55dd0f2f09e8\n[OS_API_Init] impl-init-failed: fmt_sample=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\"\n[OS_API_Init] impl-init-failed-context: idtype=0x1 return_code=-1\n[OS_API_Init] microsec-warning: fmt_ptr=0x55dd0f2f0b18\n[OS_API_Init] microsec-warning: fmt_sample=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\"\n[OS_API_Init] microsec-warning-values: microSecPerSec=0 MicroSecPerTick=0 TicksPerSecond=0\n[OS_API_Init] impl-init-failed: fmt_ptr=0x56024c68eb48\n[OS_API_Init] impl-init-failed: fmt_sample=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\"\n[OS_API_Init] impl-init-failed-context: idtype=0x1 return_code=-1\n[OS_API_Init] microsec-warning: fmt_ptr=0x56024c68ec78\n[OS_API_Init] microsec-warning: fmt_sample=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\"\n[OS_API_Init] microsec-warning-values: microSecPerSec=0 MicroSecPerTick=0 TicksPerSecond=0\n[OS_API_Init] impl-init-failed: fmt_ptr=0x5608ffd9f068\n[OS_API_Init] impl-init-failed: fmt_sample=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\"\n[OS_API_Init] impl-init-failed-context: idtype=0x1 return_code=-1\n[OS_API_Init] microsec-warning: fmt_ptr=0x5608ffd9f198\n[OS_API_Init] microsec-warning: fmt_sample=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\"\n[OS_API_Init] microsec-warning-values: microSecPerSec=0 MicroSecPerTick=0 TicksPerSecond=0\n[OS_API_Init] impl-init-failed: fmt_ptr=0x55b7ab908898\n[OS_API_Init] impl-init-failed: fmt_sample=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\"\n[OS_API_Init] impl-init-failed-context: idtype=0x1 return_code=-1\n[OS_API_Init] microsec-warning: fmt_ptr=0x55b7ab9089c8\n[OS_API_Init] microsec-warning: fmt_sample=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\"\n[OS_API_Init] microsec-warning-values: microSecPerS\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is plausible but not proven from the snippet. The shown code passes string literals to OS_DEBUG, and MISRA C 2023 Rule 8.13 requires pointer parameters to be const-qualified where possible. If OS_DEBUG is declared like void OS_DEBUG(char *fmt, ...) (i.e. non-const), then that declaration would violate Rule 8.13 and Agent A is correct. However, the OS_API_Init source does not show the OS_DEBUG prototype, so you cannot conclude a violation from this call alone. If OS_DEBUG is declared as void OS_DEBUG(const char *fmt, ...) (or otherwise uses a const-qualified pointer parameter) there is no violation. Recommendation: inspect the OS_DEBUG declaration visible at the call site; if it currently accepts a non-const char * for format strings, change it to const char *fmt (e.g. void OS_DEBUG(const char *fmt, ...))."
}