{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'impl' is declared as OS_impl_file_internal_record_t *impl but is only used for reading (impl->selectable and impl->fd) and never used to modify the object. Per MISRA C 2023 Rule 8.13 it should be a pointer to a const-qualified type (e.g. const OS_impl_file_internal_record_t *impl). Note: the buffer parameter (void *buffer) is intentionally non-const because read() writes into it, and the SelectFlags pointer in OS_SelectSingle_Impl is non-const because it is modified \u2014 both of those are acceptable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/843.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericRead_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericRead_Impl:\n```c\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericRead_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/843.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/843.txt\", \"a\");\n    if (!f)\n    {\n        /* Try to create the directory and reopen */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/843.txt\", \"a\");\n        if (!f)\n        {\n            /* If still failing, nothing more we can do without altering behavior */\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    probe_log(\"ENTER OS_GenericRead_Impl: token=%p buffer=%p nbytes=%zu timeout=%d\", (const void *)token, buffer, nbytes, (int)timeout);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log the impl pointer and key fields used below */\n    probe_log(\"impl assigned: impl=%p selectable=%d fd=%d\", (const void *)impl,\n              (int)(impl ? impl->selectable : 0), (int)(impl ? impl->fd : -1));\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        probe_log(\"nbytes>0 path taken: operation initial=0x%08x\", (unsigned)operation);\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            probe_log(\"impl->selectable is true; calling OS_SelectSingle_Impl token=%p operation=%u timeout=%d\", (const void *)token, (unsigned)operation, (int)timeout);\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n            probe_log(\"OS_SelectSingle_Impl returned %d; operation now=0x%08x\", (int)return_code, (unsigned)operation);\n        }\n        else\n        {\n            probe_log(\"impl->selectable is false; skipping select\");\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            probe_log(\"About to read: fd=%d nbytes=%zu\", (int)impl->fd, nbytes);\n            os_result = read(impl->fd, buffer, nbytes);\n            probe_log(\"read() returned %zd\", (ssize_t)os_result);\n            if (os_result < 0)\n            {\n                probe_log(\"read error: errno=%d (%s)\", errno, strerror(errno));\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n                probe_log(\"read success: bytes_read=%d return_code=%d\", (int)return_code, (int)return_code);\n            }\n        }\n        else\n        {\n            probe_log(\"Skipping read: return_code=%d operation=0x%08x\", (int)return_code, (unsigned)operation);\n        }\n    }\n    else\n    {\n        probe_log(\"nbytes<=0 path taken: nbytes=%zu\", nbytes);\n    }\n\n    probe_log(\"EXIT OS_GenericRead_Impl: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}