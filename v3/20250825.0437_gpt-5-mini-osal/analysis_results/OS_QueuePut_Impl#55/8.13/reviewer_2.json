{
  "user_message": "An agent A claimed that the following OS_QueuePut_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueuePut_Impl.\n```c\nint32 OS_QueuePut_Impl(const OS_object_token_t *token, const void *data, size_t size, uint32 flags)\n{\n    int32                            return_code;\n    int                              result;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /*\n     * NOTE - using a zero timeout here for the same reason that QueueGet does ---\n     * checking the attributes and doing the actual send is non-atomic, and if\n     * two threads call QueuePut() at the same time on a nearly-full queue,\n     * one could block.\n     */\n    memset(&ts, 0, sizeof(ts));\n\n    /* send message */\n    do\n    {\n        result = mq_timedsend(impl->id, data, size, 1, &ts);\n    } while (result == -1 && errno == EINTR);\n\n    if (result == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        return_code = OS_QUEUE_FULL;\n    }\n    else\n    {\n        /* Something else went wrong */\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'impl' is declared as mutable (OS_impl_queue_internal_record_t *impl) but in this function it is only read (used to access impl->id for mq_timedsend) and never modified. According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible. Therefore this is a violation: the declaration should be const OS_impl_queue_internal_record_t *impl (unless other code not shown modifies the record via this pointer).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function the local pointer impl is only used for read access (impl->id passed to mq_timedsend) and is never used to modify the object it points to. MISRA C 2023 Rule 8.13 advises that a pointer should point to a const-qualified type whenever possible, so the declaration should be changed to const OS_impl_queue_internal_record_t *impl. Assigning the (non-const) result of OS_OBJECT_TABLE_GET to a pointer-to-const is allowed \u2014 there is no need for a cast. The only caveats would be if code not shown relies on modifying the queue record through this pointer (or if impl is later passed to an API that requires a pointer-to-non-const); based on the provided snippet those situations do not apply."
}