{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_TaskGetInfo_Impl(&token, task_prop) is dead code in the provided project: the implementation of OS_TaskGetInfo_Impl() simply returns OS_SUCCESS and has no side-effects, so removing the call would not change the behavior (the task_prop fields are already populated and the returned value remains OS_SUCCESS). Therefore the operation is executed but unnecessary and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2592.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "int32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    /* Open log file for append. Best-effort logging; do not change control flow if logging fails. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2592.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskGetInfo ENTRY: task_id=%ld, task_prop=%p\\n\", (long)task_id, (void *)task_prop);\n            fclose(logf);\n        }\n    }\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    /* Log after memset */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2592.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskGetInfo: task_prop after memset: name=\\\"%s\\\" creator=%ld stack_size=%ld priority=%ld\\n\",\n                    task_prop->name ? task_prop->name : \"\",\n                    (long)task_prop->creator,\n                    (long)task_prop->stack_size,\n                    (long)task_prop->priority);\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log the result of ObjectIdGetById */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2592.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskGetInfo: OS_ObjectIdGetById returned %ld, token_ptr=%p\\n\", (long)return_code, (void *)&token);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log pointers to internal structures */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2592.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskGetInfo: record=%p, task=%p\\n\", (void *)record, (void *)task);\n                if (record != NULL)\n                {\n                    fprintf(logf, \"OS_TaskGetInfo: record->name_entry=%p\\n\", (void *)record->name_entry);\n                    if (record->name_entry != NULL)\n                    {\n                        /* Print at most the first 256 chars to avoid huge logs */\n                        char buf_name[257];\n                        strncpy(buf_name, record->name_entry, 256);\n                        buf_name[256] = '\\0';\n                        fprintf(logf, \"OS_TaskGetInfo: record->name_entry=\\\"%s\\\"\\n\", buf_name);\n                    }\n                    fprintf(logf, \"OS_TaskGetInfo: record->creator=%ld\\n\", (long)record->creator);\n                }\n                if (task != NULL)\n                {\n                    fprintf(logf, \"OS_TaskGetInfo: task->stack_size=%ld, task->priority=%ld\\n\",\n                            (long)task->stack_size, (long)task->priority);\n                }\n                fclose(logf);\n            }\n        }\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log task_prop before calling the Impl function */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2592.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskGetInfo: task_prop before Impl call: name=\\\"%s\\\" creator=%ld stack_size=%ld priority=%ld\\n\",\n                        task_prop->name, (long)task_prop->creator, (long)task_prop->stack_size, (long)task_prop->priority);\n                fprintf(logf, \"OS_TaskGetInfo: calling OS_TaskGetInfo_Impl with token_ptr=%p\\n\", (void *)&token);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log result from Impl */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2592.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskGetInfo: OS_TaskGetInfo_Impl returned %ld\\n\", (long)return_code);\n                fprintf(logf, \"OS_TaskGetInfo: task_prop after Impl call: name=\\\"%s\\\" creator=%ld stack_size=%ld priority=%ld\\n\",\n                        task_prop->name, (long)task_prop->creator, (long)task_prop->stack_size, (long)task_prop->priority);\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2592.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskGetInfo: token released (token_ptr=%p)\\n\", (void *)&token);\n                fclose(logf);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}