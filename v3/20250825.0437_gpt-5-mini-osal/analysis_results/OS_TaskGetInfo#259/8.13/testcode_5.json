{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskGetInfo the local pointer 'task' is declared as a non-const pointer (OS_task_internal_record_t *task) but is only used to read members (task->stack_size and task->priority). Per MISRA C 2023 Rule 8.13, it should be a pointer to a const-qualified type when possible. Changing the declaration to 'const OS_task_internal_record_t *task;' would express that the function does not modify the underlying record and would comply with the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "int32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    /* Open log for appending control-flow and state info */\n    {\n        FILE *log = fopen(\"/tmp/logs/2593.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskGetInfo ENTRY: task_id=%lu\\n\", (unsigned long)task_id);\n            fclose(log);\n        }\n    }\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log the result of the id lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/2593.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskGetInfo: OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log pointers obtained from the object table */\n        {\n            FILE *log = fopen(\"/tmp/logs/2593.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_TaskGetInfo: record=%p, task=%p\\n\", (void *)record, (void *)task);\n                if (record != NULL && record->name_entry != NULL)\n                {\n                    /* Log the name (if any) */\n                    fprintf(log, \"OS_TaskGetInfo: name_entry='%s'\\n\", record->name_entry);\n                }\n                fclose(log);\n            }\n        }\n\n        task_prop->creator = record->creator;\n\n        /* Read-only access to task fields (evidence for the reported violation) */\n        {\n            /* Capture the values read from the task structure into temporaries for logging */\n            size_t read_stack_size = 0u;\n            int32  read_priority   = 0;\n\n            if (task != NULL)\n            {\n                read_stack_size = task->stack_size;\n                read_priority   = task->priority;\n            }\n\n            /* Log the fact that only reads were performed on 'task' and the values read */\n            FILE *log = fopen(\"/tmp/logs/2593.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_TaskGetInfo: read-only access to task=%p -> stack_size=%zu, priority=%ld\\n\",\n                        (void *)task, read_stack_size, (long)read_priority);\n                fclose(log);\n            }\n\n            /* Preserve original logic: assign to output structure */\n            task_prop->stack_size = read_stack_size;\n            task_prop->priority   = read_priority;\n        }\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log the return code from the implementation-specific function */\n        {\n            FILE *log = fopen(\"/tmp/logs/2593.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_TaskGetInfo: OS_TaskGetInfo_Impl returned %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final log before returning */\n    {\n        FILE *log = fopen(\"/tmp/logs/2593.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskGetInfo EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}"
}