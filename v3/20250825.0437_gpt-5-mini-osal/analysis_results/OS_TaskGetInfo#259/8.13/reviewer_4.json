{
  "user_message": "An agent A claimed that the following OS_TaskGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskGetInfo.\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'OS_common_record_t *record;' is only used for read-only access (record->name_entry, record->creator) and is assigned from the object table. It should be declared as 'const OS_common_record_t *record;' to prevent modification of the pointed-to data. Therefore the code violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_TaskGetInfo ENTRY: task_id=3735928559, task_prop=0x7ffd245f2200\nOS_TaskGetInfo: cleared task_prop at 0x7ffd245f2200\nOS_TaskGetInfo: OS_ObjectIdGetById returned -35\nOS_TaskGetInfo EXIT: return_code=-35\nOS_TaskGetInfo ENTRY: task_id=0, task_prop=0x7ffd245f2200\nOS_TaskGetInfo: cleared task_prop at 0x7ffd245f2200\nOS_TaskGetInfo: OS_ObjectIdGetById returned -35\nOS_TaskGetInfo EXIT: return_code=-35\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskGetInfo:\ntypedef struct\n{\n    char            name[OS_MAX_API_NAME];\n    osal_id_t       creator;\n    size_t          stack_size;\n    osal_priority_t priority;\n} OS_task_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char            task_name[OS_MAX_API_NAME];\n    size_t          stack_size;\n    osal_priority_t priority;\n    osal_task_entry entry_function_pointer;\n    osal_task_entry delete_hook_pointer;\n    void *          entry_arg;\n    osal_stackptr_t stack_pointer;\n} OS_task_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_TaskGetInfo_Impl(const OS_object_token_t *token, OS_task_prop_t *task_prop)\n{\n    return OS_SUCCESS;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\nextern OS_common_record_t *const OS_global_task_table\n...\nOS_task_internal_record_t OS_task_table[LOCAL_NUM_OBJECTS]\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_TaskGetInfo the local variable 'record' is only used to read fields (record->name_entry, record->creator) and is not used to modify the underlying object or passed to any API that requires a non-const pointer. The macro OS_OBJECT_TABLE_GET(&tbl[idx]) yields an OS_common_record_t * so assigning that to a const OS_common_record_t * is permitted (adding top-level const). Therefore the pointer can and should be declared as const OS_common_record_t *record to satisfy MISRA C 2023 Rule 8.13. (Note: the same rationale also applies to 'task' which is only read and could be declared as const OS_task_internal_record_t *task; if either pointer is later needed for mutation or passed to a non-const-taking API then const would not be possible.)"
}