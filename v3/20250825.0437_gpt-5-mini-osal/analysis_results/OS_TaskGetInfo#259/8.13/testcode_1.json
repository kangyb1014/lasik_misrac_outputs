{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET(tbl, tok) expands to &tbl[OS_ObjectIndexFromToken(&(tok))]. This produces a pointer to a non-const table element (e.g. OS_common_record_t *) and takes the address of 'tok' as a non-const OS_object_token_t *. In the shown use (record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);) the record is only read and the token is not modified by the index call, so both should be const-qualified (const OS_common_record_t * and const OS_object_token_t *). By returning/using non-const pointers where const would be appropriate the macro causes pointers that should be const-qualified not to be, which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    FILE *log = fopen(\"/tmp/logs/2593.txt\", \"a\");\n\n    /* Log entry */\n    if (log != NULL)\n    {\n        fprintf(log, \"--- OS_TaskGetInfo ENTRY ---\\n\");\n        fprintf(log, \"task_prop=%p\\n\", (void *)task_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n    if (log != NULL)\n    {\n        fprintf(log, \"memset task_prop done\\n\");\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d, token_addr=%p\\n\", return_code, (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Acquire pointers from object tables (possible non-const pointers) */\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"record_ptr=%p, task_ptr=%p\\n\", (void *)record, (void *)task);\n            if (record != NULL)\n            {\n                fprintf(log, \"record->name_entry_ptr=%p\\n\", (void *)record->name_entry);\n                if (record->name_entry != NULL)\n                {\n                    /* Print name safely (may be longer in real system, but this mirrors the code's usage) */\n                    fprintf(log, \"record->name_entry=\\\"%s\\\"\\n\", record->name_entry);\n                }\n                fprintf(log, \"record->creator=%u\\n\", (unsigned)record->creator);\n            }\n            else\n            {\n                fprintf(log, \"record is NULL\\n\");\n            }\n\n            if (task != NULL)\n            {\n                fprintf(log, \"task->stack_size=%u, task->priority=%u\\n\",\n                        (unsigned)task->stack_size, (unsigned)task->priority);\n            }\n            else\n            {\n                fprintf(log, \"task is NULL\\n\");\n            }\n\n            /* Log the fact that the token address is passed into table/index macros */\n            fprintf(log, \"Token address passed to OS_OBJECT_TABLE_GET: %p (taken via &token)\\n\", (void *)&token);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Prepared task_prop (before Impl): name=\\\"%s\\\", creator=%u, stack_size=%u, priority=%u\\n\",\n                    task_prop->name, (unsigned)task_prop->creator,\n                    (unsigned)task_prop->stack_size, (unsigned)task_prop->priority);\n\n            fprintf(log, \"Calling OS_TaskGetInfo_Impl with token_addr=%p\\n\", (void *)&token);\n        }\n\n        /* Call platform-specific implementation */\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskGetInfo_Impl returned %d\\n\", return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdRelease called for token_addr=%p\\n\", (void *)&token);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"--- OS_TaskGetInfo EXIT return_code=%d ---\\n\\n\", return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}