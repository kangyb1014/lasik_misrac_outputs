{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the struct member UT_StubTableEntry_t::Data.Rvc.TypeName is declared as a non-const char * (i.e. char *), then assigning the parameter const char *TypeName to it discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. The correct approach is to declare the member as const char *TypeName so the pointer points to a const-qualified type. (If the struct member is already declared as const char *, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ConfigureGenericStubReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2993.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ConfigureGenericStubReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ConfigureGenericStubReturnValue:\n```c\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_ConfigureGenericStubReturnValue code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Helper logging function that appends messages to /tmp/logs/2993.txt */\nstatic void UT_LogPrintf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2993.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* Log function entry and parameters */\n    UT_LogPrintf(\"ENTER: UT_ConfigureGenericStubReturnValue: FuncKey=%llu, ValuePtr=%p, ValueSize=%zu, ValueGenre=%d, Counter=%d, TypeName=%p (%s)\",\n                 (unsigned long long)(uintptr_t)FuncKey,\n                 ValuePtr,\n                 ValueSize,\n                 (int)ValueGenre,\n                 Counter,\n                 (const void *)TypeName,\n                 (TypeName != NULL) ? TypeName : \"(null)\");\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n        UT_LogPrintf(\"Control: Counter>0 -> ReqEntryType=RETVAL_CONFIG_DEFERRED, StubPtr set to NULL\");\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n        UT_LogPrintf(\"Control: Counter<=0 -> ReqEntryType=RETVAL_CONFIG_CONSTANT, StubPtr from GetStubEntry=%p\", (void *)StubPtr);\n    }\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        UT_LogPrintf(\"Control: StubPtr was NULL, re-obtained with UT_ENTRYTYPE_UNUSED -> StubPtr=%p\", (void *)StubPtr);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UT_LogPrintf(\"ERROR: Cannot configure return value - UT_MAX_FUNC_STUBS too low? Aborting configuration for FuncKey=%llu\",\n                     (unsigned long long)(uintptr_t)FuncKey);\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        /* Capture previous TypeName pointer value (if any) for logging */\n        const char *PrevTypeName = StubPtr->Data.Rvc.TypeName;\n\n        UT_LogPrintf(\"BEFORE ASSIGN: StubPtr=%p, Prev FuncKey=%llu, Prev EntryType=%d, Prev TypeNamePtr=%p (%s)\",\n                     (void *)StubPtr,\n                     (unsigned long long)(uintptr_t)StubPtr->FuncKey,\n                     (int)StubPtr->EntryType,\n                     (const void *)PrevTypeName,\n                     (PrevTypeName != NULL) ? PrevTypeName : \"(null)\");\n\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n\n        /* Log the assignment about to happen for TypeName */\n        UT_LogPrintf(\"ASSIGNMENT: Assigning TypeName ptr %p (%s) to StubPtr->Data.Rvc.TypeName\", (const void *)TypeName, (TypeName != NULL) ? TypeName : \"(null)\");\n\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        /* Log after assignment to capture resulting pointer value */\n        UT_LogPrintf(\"AFTER ASSIGN: StubPtr->Data.Rvc.TypeName=%p (%s)\",\n                     (const void *)StubPtr->Data.Rvc.TypeName,\n                     (StubPtr->Data.Rvc.TypeName != NULL) ? StubPtr->Data.Rvc.TypeName : \"(null)\");\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n            UT_LogPrintf(\"VALUE GENRE: OPAQUE -> Stored IndirectPtr=%p into StubPtr->Data.Rvc.Buf\", ValuePtr);\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_LogPrintf(\"VALUE GENRE: NON-OPAQUE -> Calling UT_StoreRetval with Buf=%p, ValuePtr=%p, ValueSize=%zu, ValueGenre=%d\",\n                         (void *)&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, (int)ValueGenre);\n\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n\n            UT_LogPrintf(\"UT_StoreRetval returned for FuncKey=%llu, Buf=%p\", (unsigned long long)(uintptr_t)FuncKey, (void *)&StubPtr->Data.Rvc.Buf);\n        }\n\n        UT_LogPrintf(\"EXIT: UT_ConfigureGenericStubReturnValue completed for FuncKey=%llu, StubPtr=%p\", (unsigned long long)(uintptr_t)FuncKey, (void *)StubPtr);\n    }\n}\n"
}