{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'StubPtr = NULL;' in the Counter > 0 branch is dead code. At function entry StubPtr is already set by UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED). For the deferred case (Counter > 0) the code sets StubPtr to NULL only so that the subsequent 'if (StubPtr == NULL)' forces a re-call to UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED). Since the table is not modified in between, the second call will return an equivalent unused entry as the first call, so removing the assignment would not change program behaviour. Therefore this operation is executed but redundant and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ConfigureGenericStubReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2992.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ConfigureGenericStubReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ConfigureGenericStubReturnValue:\n```c\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_ConfigureGenericStubReturnValue code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    FILE *log = fopen(\"/tmp/logs/2992.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log function entry and key parameters. Cast FuncKey to uintptr_t for printing portability. */\n        fprintf(log, \"ENTER: UT_ConfigureGenericStubReturnValue FuncKey=%\" PRIuPTR \" Counter=%d ValueSize=%zu ValueGenre=%d TypeName=%s\\n\",\n                (uintptr_t)FuncKey, Counter, ValueSize, (int)ValueGenre, (TypeName != NULL) ? TypeName : \"(null)\");\n    }\n\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* First probe: record the initial unused entry returned */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    UT_StubTableEntry_t *InitialStubPtr = StubPtr;\n    if (log != NULL)\n    {\n        fprintf(log, \"Initial UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) returned %p\\n\", (void *)InitialStubPtr);\n    }\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n\n        /* Probe: record that the deferred branch sets StubPtr to NULL */\n        StubPtr      = NULL;\n        if (log != NULL)\n        {\n            fprintf(log, \"Counter > 0 branch: set ReqEntryType=UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED; StubPtr set to NULL (InitialStubPtr=%p)\\n\",\n                    (void *)InitialStubPtr);\n        }\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n\n        /* Probe: record the result of requesting a CONSTANT entry */\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n        if (log != NULL)\n        {\n            fprintf(log, \"Constant branch: UT_GetStubEntry(UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT) returned %p\\n\", (void *)StubPtr);\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"StubPtr is NULL before second unused lookup; calling UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) again\\n\");\n        }\n\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Second UT_GetStubEntry(UT_ENTRYTYPE_UNUSED) returned %p\\n\", (void *)StubPtr);\n\n            if (InitialStubPtr == StubPtr)\n            {\n                fprintf(log, \"Observation: InitialStubPtr (%p) == StubPtr after re-call (%p) -- suggests the assignment 'StubPtr = NULL;' did not change final selection.\\n\",\n                        (void *)InitialStubPtr, (void *)StubPtr);\n            }\n            else\n            {\n                fprintf(log, \"Observation: InitialStubPtr (%p) != StubPtr after re-call (%p) -- the second lookup returned a different entry.\\n\",\n                        (void *)InitialStubPtr, (void *)StubPtr);\n            }\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"ERROR: Cannot configure return value - UT_GetStubEntry returned NULL even after retry.\\n\");\n            fclose(log);\n        }\n\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Configuring stub at %p: FuncKey=%\" PRIuPTR \" ReqEntryType=%d Counter=%d ValueSize=%zu\\n\",\n                    (void *)StubPtr, (uintptr_t)FuncKey, (int)ReqEntryType, (int)Counter, ValueSize);\n        }\n\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n            if (log != NULL)\n            {\n                fprintf(log, \"Stored opaque pointer %p into stub buffer (IndirectPtr).\\n\", ValuePtr);\n            }\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n            if (log != NULL)\n            {\n                fprintf(log, \"Stored retval buffer via UT_StoreRetval.\\n\");\n            }\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Configuration complete for stub %p.\\n\", (void *)StubPtr);\n            fclose(log);\n        }\n    }\n}\n"
}