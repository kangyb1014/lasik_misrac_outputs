{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe default branch in the switch (default: break;) is reachable when OS_IdentifyObject(object_id) yields a value not covered by any case (e.g. an object type constant not listed). The only operation executed in that branch is a no-op break; whose removal would not change program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CleanUpObject code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n    uint32 obj_type;\n    FILE *logf;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n\n    /* Capture the identified object type once to avoid changing behavior */\n    obj_type = OS_IdentifyObject(object_id);\n\n    /* Log entry with basic state information */\n    logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CleanUpObject ENTRY: object_id=%\" PRIuPTR \", obj_type=%u, ObjectCount=%u\\n\",\n                (uintptr_t)object_id, (unsigned)obj_type, (unsigned)(*ObjectCount));\n        fclose(logf);\n    }\n\n    switch (obj_type)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_TASK for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_QUEUE for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_BINSEM for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_COUNTSEM for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_MUTEX for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_MODULE for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_TIMEBASE for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_TIMECB for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_STREAM for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_DIR for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: taking case OS_OBJECT_TYPE_OS_CONDVAR for object_id=%\" PRIuPTR \"\\n\",\n                        (uintptr_t)object_id);\n                fclose(logf);\n            }\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            /* Log that the default branch was taken along with the state to reproduce the scenario */\n            logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CleanUpObject: default branch taken for object_id=%\" PRIuPTR \", obj_type=%u, ObjectCount=%u - no-op\\n\",\n                        (uintptr_t)object_id, (unsigned)obj_type, (unsigned)(*ObjectCount));\n                fclose(logf);\n            }\n            break;\n    }\n\n    /* Optional exit log */\n    logf = fopen(\"/tmp/logs/1282.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CleanUpObject EXIT: object_id=%\" PRIuPTR \", obj_type=%u, ObjectCount=%u\\n\",\n                (uintptr_t)object_id, (unsigned)obj_type, (unsigned)(*ObjectCount));\n        fclose(logf);\n    }\n}\n"
}