{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdFinalizeDelete calls OS_NotifyEvent. An application event handler invoked by OS_NotifyEvent could call an OS delete API (e.g. OS_TaskDelete or any other delete), and those delete APIs call OS_ObjectIdFinalizeDelete to complete deletion. This yields an indirect call chain: OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> application handler -> OS_TaskDelete (or other OS_*Delete) -> OS_ObjectIdFinalizeDelete, which is indirect recursion and thus violates Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1286.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CleanUpObject code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Probe helper: append a log line to /tmp/logs/1286.txt. */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    va_list args;\n    FILE *f = fopen(\"/tmp/logs/1286.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n    fclose(f);\n}\n\n/* Convert object type code to a human-readable string for logs. */\nstatic const char *os_object_type_to_string(int type)\n{\n    switch (type)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:      return \"OS_TASK\";\n        case OS_OBJECT_TYPE_OS_QUEUE:     return \"OS_QUEUE\";\n        case OS_OBJECT_TYPE_OS_BINSEM:    return \"OS_BINSEM\";\n        case OS_OBJECT_TYPE_OS_COUNTSEM:  return \"OS_COUNTSEM\";\n        case OS_OBJECT_TYPE_OS_MUTEX:     return \"OS_MUTEX\";\n        case OS_OBJECT_TYPE_OS_MODULE:    return \"OS_MODULE\";\n        case OS_OBJECT_TYPE_OS_TIMEBASE:  return \"OS_TIMEBASE\";\n        case OS_OBJECT_TYPE_OS_TIMECB:    return \"OS_TIMECB\";\n        case OS_OBJECT_TYPE_OS_STREAM:    return \"OS_STREAM\";\n        case OS_OBJECT_TYPE_OS_DIR:       return \"OS_DIR\";\n        case OS_OBJECT_TYPE_OS_CONDVAR:   return \"OS_CONDVAR\";\n        default:                          return \"UNKNOWN\";\n    }\n}\n\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    /* Log entry into cleanup with object id and pointer to count */\n    os_log_probe(\"OS_CleanUpObject: ENTRY object_id=%llu arg=%p\", (unsigned long long)(uintptr_t)object_id, arg);\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n\n    /* Log updated count value */\n    os_log_probe(\"OS_CleanUpObject: incremented ObjectCount -> %lu\", (unsigned long)(uintptr_t)(*ObjectCount));\n\n    /* Identify object once so we can log and then dispatch */\n    int obj_type = OS_IdentifyObject(object_id);\n    os_log_probe(\"OS_CleanUpObject: identified object type=%d (%s)\", obj_type, os_object_type_to_string(obj_type));\n\n    switch (obj_type)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_TaskDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_TaskDelete(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_TaskDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_QueueDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_QueueDelete(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_QueueDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_BinSemDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_BinSemDelete(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_BinSemDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_CountSemDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_CountSemDelete(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_CountSemDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_MutSemDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_MutSemDelete(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_MutSemDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_ModuleUnload for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_ModuleUnload(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_ModuleUnload for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_TimeBaseDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_TimeBaseDelete(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_TimeBaseDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_TimerDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_TimerDelete(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_TimerDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_close for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_close(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_close for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_DirectoryClose for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_DirectoryClose(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_DirectoryClose for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            os_log_probe(\"OS_CleanUpObject: about to call OS_CondVarDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            OS_CondVarDelete(object_id);\n            os_log_probe(\"OS_CleanUpObject: returned from OS_CondVarDelete for object_id=%llu\", (unsigned long long)(uintptr_t)object_id);\n            break;\n        default:\n            os_log_probe(\"OS_CleanUpObject: no cleanup action for object_id=%llu (type=%d)\", (unsigned long long)(uintptr_t)object_id, obj_type);\n            break;\n    }\n\n    /* Final log indicating exit from cleanup */\n    os_log_probe(\"OS_CleanUpObject: EXIT object_id=%llu final ObjectCount=%lu\", (unsigned long long)(uintptr_t)object_id, (unsigned long)(uintptr_t)(*ObjectCount));\n}\n"
}