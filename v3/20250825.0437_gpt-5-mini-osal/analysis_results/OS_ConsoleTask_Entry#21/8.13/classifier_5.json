{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleTask_Entry:\n```c\nstatic void *OS_ConsoleTask_Entry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t           local_arg;\n    OS_impl_console_internal_record_t *local;\n    OS_object_token_t                  token;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_CONSOLE, local_arg.id, &token) == OS_SUCCESS)\n    {\n        local = OS_OBJECT_TABLE_GET(OS_impl_console_table, token);\n\n        /* Loop forever (unless shutdown is set) */\n        while (OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n        {\n            OS_ConsoleOutput_Impl(&token);\n            sem_wait(&local->data_sem);\n        }\n        OS_ObjectIdRelease(&token);\n    }\n    return NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ConsoleTask_Entry:\ntypedef union\n{\n    void *           opaque_arg;\n    OS_ArgCallback_t arg_callback_func;\n    osal_id_t        id;\n    osal_index_t     idx;\n} OS_VoidPtrValueWrapper_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    sem_t data_sem;\n} OS_impl_console_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_console_internal_record_t OS_impl_console_table[OS_MAX_CONSOLES]\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_ConsoleOutput_Impl(&token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Insufficient information to decide from the call site alone. The fragment OS_ConsoleOutput_Impl(&token); does not itself violate Rule 8.13. A violation would occur if the function is declared as taking a non-const pointer (e.g. void OS_ConsoleOutput_Impl(OS_object_token_t *token)) but does not modify *token \u2014 in that case the parameter should be declared as const OS_object_token_t * to satisfy MISRA C 2023 Rule 8.13. Conversely, if OS_ConsoleOutput_Impl legitimately modifies the token, a non-const parameter is required and no violation occurs. Provide the prototype of OS_ConsoleOutput_Impl to determine definitively."
}