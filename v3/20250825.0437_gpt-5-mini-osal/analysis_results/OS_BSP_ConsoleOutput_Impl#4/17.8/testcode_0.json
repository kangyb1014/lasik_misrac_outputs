{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BSP_ConsoleOutput_Impl the parameter 'DataLen' (size_t) is modified by the statement 'DataLen -= WriteLen;'. This directly violates MISRA C 2023 Rule 17.8, which prohibits modifying function parameters. (Note: the code also contains 'Str += WriteLen;', which modifies the pointer parameter and likewise violates Rule 17.8.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <stddef.h>\n\n/* Helper probe function: appends control-flow and state info to /tmp/logs/47.txt */\nstatic void OS_BSP_ConsoleOutput_Log(const char *stage, const char *Str, size_t DataLen, ssize_t WriteLen)\n{\n    FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the stage, pointer value, remaining length and last write result */\n        fprintf(f, \"%s: Str=%p, DataLen=%zu, WriteLen=%zd\\n\", stage, (const void *)Str, DataLen, WriteLen);\n        fclose(f);\n    }\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry state */\n    OS_BSP_ConsoleOutput_Log(\"ENTRY\", Str, DataLen, -1);\n\n    while (DataLen > 0)\n    {\n        /* Log state before attempting write */\n        OS_BSP_ConsoleOutput_Log(\"BEFORE_WRITE\", Str, DataLen, -1);\n\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log result of write */\n        OS_BSP_ConsoleOutput_Log(\"AFTER_WRITE\", Str, DataLen, WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* Log failure and stop. */\n            OS_BSP_ConsoleOutput_Log(\"WRITE_FAILED_OR_ZERO\", Str, DataLen, WriteLen);\n            break;\n        }\n\n        /* Log state just before modifying the function parameters */\n        OS_BSP_ConsoleOutput_Log(\"BEFORE_MODIFY_PARAMS\", Str, DataLen, WriteLen);\n\n        /* The following two statements modify the function parameters themselves\n         * (pointer and size), which reproduces the reported MISRA Rule 17.8 violation.\n         * They are intentionally preserved to capture the original behaviour. */\n        Str += WriteLen;\n        DataLen -= WriteLen;\n\n        /* Log state immediately after modifying the parameters */\n        OS_BSP_ConsoleOutput_Log(\"AFTER_MODIFY_PARAMS\", Str, DataLen, WriteLen);\n    }\n\n    /* Log exit state */\n    OS_BSP_ConsoleOutput_Log(\"EXIT\", Str, DataLen, -1);\n}\n"
}