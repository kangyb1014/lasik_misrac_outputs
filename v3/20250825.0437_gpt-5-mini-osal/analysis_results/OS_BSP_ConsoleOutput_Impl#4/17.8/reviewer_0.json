{
  "user_message": "An agent A claimed that the following OS_BSP_ConsoleOutput_Impl code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BSP_ConsoleOutput_Impl.\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn OS_BSP_ConsoleOutput_Impl the parameter 'DataLen' (size_t) is modified by the statement 'DataLen -= WriteLen;'. This directly violates MISRA C 2023 Rule 17.8, which prohibits modifying function parameters. (Note: the code also contains 'Str += WriteLen;', which modifies the pointer parameter and likewise violates Rule 17.8.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTRY: Str=0x563846637efb, DataLen=1, WriteLen=-1\nBEFORE_WRITE: Str=0x563846637efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x563846637efb, DataLen=1, WriteLen=1\nBEFORE_MODIFY_PARAMS: Str=0x563846637efb, DataLen=1, WriteLen=1\nAFTER_MODIFY_PARAMS: Str=0x563846637efc, DataLen=0, WriteLen=1\nEXIT: Str=0x563846637efc, DataLen=0, WriteLen=-1\nENTRY: Str=0x7fff0e7aa520, DataLen=7, WriteLen=-1\nBEFORE_WRITE: Str=0x7fff0e7aa520, DataLen=7, WriteLen=-1\nAFTER_WRITE: Str=0x7fff0e7aa520, DataLen=7, WriteLen=7\nBEFORE_MODIFY_PARAMS: Str=0x7fff0e7aa520, DataLen=7, WriteLen=7\nAFTER_MODIFY_PARAMS: Str=0x7fff0e7aa527, DataLen=0, WriteLen=7\nEXIT: Str=0x7fff0e7aa527, DataLen=0, WriteLen=-1\nENTRY: Str=0x563846637f03, DataLen=1, WriteLen=-1\nBEFORE_WRITE: Str=0x563846637f03, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x563846637f03, DataLen=1, WriteLen=1\nBEFORE_MODIFY_PARAMS: Str=0x563846637f03, DataLen=1, WriteLen=1\nAFTER_MODIFY_PARAMS: Str=0x563846637f04, DataLen=0, WriteLen=1\nEXIT: Str=0x563846637f04, DataLen=0, WriteLen=-1\nENTRY: Str=0x563846637ee9, DataLen=9, WriteLen=-1\nBEFORE_WRITE: Str=0x563846637ee9, DataLen=9, WriteLen=-1\nAFTER_WRITE: Str=0x563846637ee9, DataLen=9, WriteLen=9\nBEFORE_MODIFY_PARAMS: Str=0x563846637ee9, DataLen=9, WriteLen=9\nAFTER_MODIFY_PARAMS: Str=0x563846637ef2, DataLen=0, WriteLen=9\nEXIT: Str=0x563846637ef2, DataLen=0, WriteLen=-1\nENTRY: Str=0x563846637efb, DataLen=1, WriteLen=-1\nBEFORE_WRITE: Str=0x563846637efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x563846637efb, DataLen=1, WriteLen=1\nBEFORE_MODIFY_PARAMS: Str=0x563846637efb, DataLen=1, WriteLen=1\nAFTER_MODIFY_PARAMS: Str=0x563846637efc, DataLen=0, WriteLen=1\nEXIT: Str=0x563846637efc, DataLen=0, WriteLen=-1\nENTRY: Str=0x563846637efb, DataLen=1, WriteLen=-1\nBEFORE_WRITE: Str=0x563846637efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x563846637efb, DataLen=1, WriteLen=1\nBEFORE_MODIFY_PARAMS: Str=0x563846637efb, DataLen=1, WriteLen=1\nAFTER_MODIFY_PARAMS: Str=0x563846637efc, DataLen=0, WriteLen=1\nEXIT: Str=0x563846637efc, DataLen=0, WriteLen=-1\nENTRY: Str=0x7fff0e7aa460, DataLen=7, WriteLen=-1\nBEFORE_WRITE: Str=0x7fff0e7aa460, DataLen=7, WriteLen=-1\nAFTER_WRITE: Str=0x7fff0e7aa460, DataLen=7, WriteLen=7\nBEFORE_MODIFY_PARAMS: Str=0x7fff0e7aa460, DataLen=7, WriteLen=7\nAFTER_MODIFY_PARAMS: Str=0x7fff0e7aa467, DataLen=0, WriteLen=7\nEXIT: Str=0x7fff0e7aa467, DataLen=0, WriteLen=-1\nENTRY: Str=0x563846637f03, DataLen=1, WriteLen=-1\nBEFORE_WRITE: Str=0x563846637f03, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x563846637f03, DataLen=1, WriteLen=1\nBEFORE_MODIFY_PARAMS: Str=0x563846637f03, DataLen=1, WriteLen=1\nAFTER_MODIFY_PARAMS: Str=0x563846637f04, DataLen=0, WriteLen=1\nEXIT: Str=0x563846637f04, DataLen=0, WriteLen=-1\nENTRY: Str=0x7fff0e7aa4a0, DataLen=8, WriteLen=-1\nBEFORE_WRITE: Str=0x7fff0e7aa4a0, DataLen=8, WriteLen=-1\nAFTER_WRITE: Str=0x7fff0e7aa4a0, DataLen=8, WriteLen=8\nBEFORE_MODIFY_PARAMS: Str=0x7fff0e7aa4a0, DataLen=8, WriteLen=8\nAFTER_MODIFY_PARAMS: Str=0x7fff0e7aa4a8, DataLen=0, WriteLen=8\nEXIT: Str=0x7fff0e7aa4a8, DataLen=0, WriteLen=-1\nENTRY: Str=0x563846637efb, DataLen=1, WriteLen=-1\nBEFORE_WRITE: Str=0x563846637efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x563846637efb, DataLen=1, WriteLen=1\nBEFORE_MODIFY_PARAMS: Str=0x563846637efb, DataLen=1, WriteLen=1\nAFTER_MODIFY_PARAMS: Str=0x563846637efc, DataLen=0, WriteLen=1\nEXIT: Str=0x563846637efc, DataLen=0, WriteLen=-1\nENTRY: Str=0x7fff0e7aa490, DataLen=7, WriteLen=-1\nBEFORE_WRITE: Str=0x7fff0e7aa490, DataLen=7, WriteLen=-1\nAFTER_WRITE: Str=0x7fff0e7aa490, DataLen=7, WriteLen=7\nBEFORE_MODIFY_PARAMS: Str=0x7fff0e7aa490, DataLen=7, WriteLen=7\nAFTER_MODIFY_PARAMS: Str=0x7fff0e7aa497, DataLen=0, WriteLen=7\nEXIT: Str=0x7fff0e7aa497, DataLen=0, WriteLen=-1\nENTRY: Str=0x563846637f03, DataLen=1, WriteLen=-1\nBEFORE_WRITE: Str=0x563846637f03, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x563846637f03, DataLen=1, WriteLen=1\nBEFORE_MODIFY_PARAMS: Str=0x563846637f03, DataLen=1, WriteLen=1\nAFTER_MODIFY_PARAMS: Str=0x563846637f04, DataLen=0, WriteLen=1\nEXIT: Str=0x563846637f04, DataLen=0, WriteLen=-1\nENTRY: Str=0x563846637878, DataLen=14, W\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that function parameters shall not be modified; while the object pointed to by a pointer parameter may be modified, the pointer itself must not be changed. In this function both parameters are modified: DataLen is decremented (DataLen -= WriteLen;) and the pointer parameter Str is advanced (Str += WriteLen;). Both actions violate Rule 17.8. Remediation: make local copies (e.g. const char *p = Str; size_t len = DataLen;) and modify those instead."
}