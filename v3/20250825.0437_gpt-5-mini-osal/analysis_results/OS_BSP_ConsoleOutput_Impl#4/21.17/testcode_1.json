{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(OutputMessage) without first ensuring that OutputMessage is non-NULL and points to a null-terminated array. If OutputMessage is NULL or refers to a buffer that is not null-terminated (or shorter than expected), strlen will scan past the object's bounds (or dereference NULL), reading beyond the buffer until a 0 byte is found and thus violating MISRA C 2023 Rule 21.17. This also leads to subsequent uses of MsgLen and OutputMessage[MsgLen-1] potentially accessing out-of-bounds memory.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/49.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* Probe logging helper: append to /tmp/logs/49.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/49.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not change program behavior. */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Compute length of string but never read past 'max' bytes.\n   Returns index of terminating '\\0' if found within max, otherwise returns max.\n   If s is NULL, returns (size_t)-1. */\nstatic size_t bounded_strlen(const char *s, size_t max)\n{\n    size_t i;\n    if (s == NULL)\n    {\n        return (size_t)-1;\n    }\n    for (i = 0u; i < max; ++i)\n    {\n        if (s[i] == '\\0')\n        {\n            return i;\n        }\n    }\n    return max;\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry and key pieces of state so external analysis can reproduce\n       scenarios where callers might have used strlen on buffers that are not\n       null-terminated or where Str is NULL. This logging does not change the\n       control flow or the semantics of the original function. */\n    probe_log(\"OS_BSP_ConsoleOutput_Impl enter: Str=%p, DataLen=%zu\", (const void *)Str, DataLen);\n\n    if (Str == NULL)\n    {\n        probe_log(\"Warning: Str is NULL at entry. Subsequent write() will likely fail with EFAULT.\");\n    }\n    else\n    {\n        size_t blen = bounded_strlen(Str, DataLen);\n        if (blen == (size_t)-1)\n        {\n            probe_log(\"bounded_strlen: detected NULL pointer (unexpected path)\");\n        }\n        else if (blen < DataLen)\n        {\n            probe_log(\"bounded_strlen: found terminator at offset %zu within DataLen=%zu\", blen, DataLen);\n        }\n        else /* blen == DataLen */\n        {\n            probe_log(\"bounded_strlen: no terminator found within DataLen=%zu. A call to strlen(Str) would read past the intended buffer.\", DataLen);\n        }\n    }\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log the attempt and outcome so callers can see whether write() succeeded\n           and how many bytes were written before any potential failure. */\n        probe_log(\"write() called: Str=%p, requested=%zu, written=%zd\", (const void *)Str, DataLen, WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            probe_log(\"write() failed or returned 0; stopping. errno may indicate the cause.\");\n            break;\n        }\n        Str += (size_t)WriteLen;\n        DataLen -= (size_t)WriteLen;\n    }\n\n    probe_log(\"OS_BSP_ConsoleOutput_Impl exit\");\n}\n"
}