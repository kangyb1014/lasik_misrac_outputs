{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf LENGTHCHECK(name, OS_MAX_API_NAME, ...) is implemented using an unbounded string.h routine such as strlen (or strcpy/strncpy/strcat/etc.) it can read past the end of the object referenced by name when name is not a NUL-terminated string or the buffer is shorter than expected. For example, if the caller passes a pointer to a char buffer that is not NUL-terminated (or points near the end of accessible memory), strlen(name) inside LENGTHCHECK will scan beyond the buffer bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1959.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindByName:\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindByName code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/*\n * Probe helpers: append diagnostic information to /tmp/logs/1959.txt\n * These helpers avoid dereferencing 'name' to prevent introducing any\n * additional out-of-bounds reads. They log pointer values and control-flow\n * events so other agents can reproduce and observe when LENGTHCHECK is\n * invoked and what pointer/address was passed in.\n */\nstatic void OS_ObjectIdFindByName_log_probe(const char *stage, int idtype, const char *name, const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/1959.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"%ld: OS_ObjectIdFindByName - %s\\n\", (long)now, stage);\n    fprintf(f, \"    idtype=%d\\n\", idtype);\n    fprintf(f, \"    name_ptr=%p\\n\", (const void *)name);\n    if (note != NULL)\n    {\n        fprintf(f, \"    note=%s\\n\", note);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void OS_ObjectIdFindByName_log_result(const char *stage, int32_t return_code, unsigned long obj_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1959.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"%ld: OS_ObjectIdFindByName - %s\\n\", (long)now, stage);\n    fprintf(f, \"    return_code=%d\\n\", (int)return_code);\n    fprintf(f, \"    obj_id=%lu\\n\", obj_id);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry with pointer and idtype. Do NOT dereference 'name' here. */\n    OS_ObjectIdFindByName_log_probe(\"ENTRY\", (int)idtype, name, \"about to perform ARGCHECK and LENGTHCHECK\");\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n\n    /* Log after ARGCHECK; LENGTHCHECK may return early (via a macro) so this\n     * log helps to know whether the code progressed past the argument check.\n     */\n    OS_ObjectIdFindByName_log_probe(\"AFTER_ARGCHECK\", (int)idtype, name, NULL);\n\n    /*\n     * Log immediately before invoking LENGTHCHECK. If LENGTHCHECK internally\n     * uses an unbounded string function (e.g. strlen) this log lets observers\n     * know which pointer was supplied when the potentially-unsafe check ran.\n     */\n    OS_ObjectIdFindByName_log_probe(\"BEFORE_LENGTHCHECK\", (int)idtype, name, \"invoking LENGTHCHECK with OS_MAX_API_NAME\");\n\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    /* If execution reaches here, LENGTHCHECK did not cause an early return. */\n    OS_ObjectIdFindByName_log_probe(\"AFTER_LENGTHCHECK\", (int)idtype, name, NULL);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    /* Log the result of the lookup (whether success or failure). Only log the\n     * token.obj_id when a valid token was returned by the lookup.\n     */\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log success and the object id we obtained. */\n        OS_ObjectIdFindByName_log_result(\"LOOKUP_SUCCESS\", return_code, (unsigned long)token.obj_id);\n\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log that the token was released. */\n        OS_ObjectIdFindByName_log_probe(\"TOKEN_RELEASED\", (int)idtype, name, \"token released after success\");\n    }\n    else\n    {\n        /* Log failure return code so callers can see why lookup failed. */\n        OS_ObjectIdFindByName_log_result(\"LOOKUP_FAILURE\", return_code, 0ul);\n    }\n\n    /* Final return log. */\n    OS_ObjectIdFindByName_log_probe(\"EXIT\", (int)idtype, name, \"exiting OS_ObjectIdFindByName\");\n\n    return return_code;\n}\n"
}