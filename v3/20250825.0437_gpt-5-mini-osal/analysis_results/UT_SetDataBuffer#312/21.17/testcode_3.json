{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller provides a DataBuffer that is smaller than BufferSize (for example: char src[10]; UT_SetDataBuffer(key, src, 20, true);), the function allocates a destination of BufferSize but copies BufferSize bytes from DataBuffer without verifying that DataBuffer actually references at least BufferSize bytes. This can cause an out-of-bounds read of the source buffer (and thus an access beyond the bounds of the object referenced by the source pointer), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3129.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDataBuffer:\n```c\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDataBuffer code.\n",
  "test_code": "void UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *logf = fopen(\"/tmp/logs/3129.txt\", \"a\");\n\n    if (logf)\n    {\n        fprintf(logf, \"UT_SetDataBuffer ENTRY: FuncKey=%lu DataBuffer=%p BufferSize=%zu AllocateCopy=%d\\n\",\n                (unsigned long)FuncKey, DataBuffer, BufferSize, AllocateCopy ? 1 : 0);\n        fflush(logf);\n    }\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        if (logf) fprintf(logf, \"-> DataBuffer non-NULL and BufferSize>0, looking up stub entry...\\n\");\n\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (logf) fprintf(logf, \"   UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n\n        if (StubPtr == NULL)\n        {\n            if (logf)\n            {\n                fprintf(logf, \"   ERROR: StubPtr is NULL - aborting with message: Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\\n\");\n                fflush(logf);\n                fclose(logf);\n            }\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            /* Preserve original behavior while adding probes */\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n\n            if (logf)\n            {\n                fprintf(logf, \"   Set StubPtr->FuncKey and EntryType to DATA_BUFFER\\n\");\n                fflush(logf);\n            }\n\n            if (AllocateCopy)\n            {\n                if (logf) fprintf(logf, \"   AllocateCopy requested: malloc(%zu)\\n\", BufferSize);\n\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n\n                if (logf) fprintf(logf, \"   malloc returned %p\\n\", StubPtr->Data.Buff.BasePtr);\n\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    if (logf)\n                    {\n                        fprintf(logf, \"   ERROR: malloc failed - aborting with message: Cannot allocate data buffer - malloc() failed!\\n\");\n                        fflush(logf);\n                        fclose(logf);\n                    }\n\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    /* Log memcpy parameters before performing the copy to capture the scenario */\n                    if (logf)\n                    {\n                        fprintf(logf, \"   About to memcpy dest=%p src=%p n=%zu\\n\",\n                                StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                        fflush(logf);\n                    }\n\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n\n                    if (logf)\n                    {\n                        fprintf(logf, \"   memcpy completed\\n\");\n                        /* Record that allocation flag will be set */\n                        fprintf(logf, \"   Setting ModeFlags |= UT_MODEFLAG_ALLOC_BUF\\n\");\n                        fflush(logf);\n                    }\n\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n                if (logf)\n                {\n                    fprintf(logf, \"   Using provided buffer directly: BasePtr=%p\\n\", DataBuffer);\n                    fflush(logf);\n                }\n            }\n\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n\n            if (logf)\n            {\n                fprintf(logf, \"   Final stub state: BasePtr=%p TotalSize=%zu Position=%zu ModeFlags=0x%08x\\n\",\n                        StubPtr->Data.Buff.BasePtr,\n                        StubPtr->Data.Buff.TotalSize,\n                        (size_t)StubPtr->Data.Buff.Position,\n                        (unsigned)StubPtr->ModeFlags);\n                fflush(logf);\n            }\n        }\n    }\n    else\n    {\n        if (logf)\n        {\n            fprintf(logf, \"-> Early exit: DataBuffer is NULL or BufferSize == 0 (DataBuffer=%p BufferSize=%zu)\\n\",\n                    DataBuffer, BufferSize);\n            fflush(logf);\n        }\n    }\n\n    if (logf) fclose(logf);\n}\n"
}