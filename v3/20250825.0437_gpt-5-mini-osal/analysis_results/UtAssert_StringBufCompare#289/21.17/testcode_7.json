{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. For example, if String1 is non-NULL and String1Max is larger than the destination buffer (ScrubbedString1 is 256 bytes) and no NUL is found within String1Max bytes (so FormatLen1 == String1Max, e.g. 300), memcpy(ScrubbedString1, String1, FormatLen1) will write past the 256-byte destination (out-of-bounds). Another violation: if String1 == NULL and String1Max > 0, the code enters the copy path and memcpy will be passed a NULL source pointer (or memchr is passed NULL), causing an out-of-bounds/invalid access. These scenarios violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "bool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Logging probe: open log file and record entry state */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2899.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"--- UtAssert_StringBufCompare ENTRY ---\\n\");\n            fprintf(fp, \"String1=%p String1Max=%zu String2=%p String2Max=%zu CompareType=%d File=%s Line=%u\\n\",\n                    (const void *)String1, String1Max, (const void *)String2, String2Max, (int)CompareType, File ? File : \"(null)\", (unsigned)Line);\n            fclose(fp);\n        }\n    }\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    /* Log results for String1 end detection */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2899.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"After EndPtr1 detection: EndPtr1=%p FormatLen1=%zu\\n\", (const void *)EndPtr1, FormatLen1);\n            if (String1 == NULL && FormatLen1 > 0)\n            {\n                fprintf(fp, \"WARNING: String1 is NULL but FormatLen1=%zu > 0 -> subsequent memchr/memcpy will use NULL source\\n\", FormatLen1);\n            }\n            if (FormatLen1 > (sizeof(ScrubbedString1) - 1))\n            {\n                fprintf(fp, \"POTENTIAL_OVERFLOW: FormatLen1=%zu exceeds ScrubbedString1 capacity %zu\\n\", FormatLen1, (size_t)(sizeof(ScrubbedString1) - 1));\n            }\n            fclose(fp);\n        }\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    /* Log results for String2 end detection */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2899.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"After EndPtr2 detection: EndPtr2=%p FormatLen2=%zu\\n\", (const void *)EndPtr2, FormatLen2);\n            if (String2 == NULL && FormatLen2 > 0)\n            {\n                fprintf(fp, \"WARNING: String2 is NULL but FormatLen2=%zu > 0 -> subsequent memchr/memcpy will use NULL source\\n\", FormatLen2);\n            }\n            if (FormatLen2 > (sizeof(ScrubbedString2) - 1))\n            {\n                fprintf(fp, \"POTENTIAL_OVERFLOW: FormatLen2=%zu exceeds ScrubbedString2 capacity %zu\\n\", FormatLen2, (size_t)(sizeof(ScrubbedString2) - 1));\n            }\n            fclose(fp);\n        }\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    /* Log compare result */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2899.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"Compare computed=%d FormatLen1=%zu FormatLen2=%zu\\n\", Compare, FormatLen1, FormatLen2);\n            fclose(fp);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        /* Log before newline search and copy for String1 */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2899.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"About to search for newline in String1: ptr=%p FormatLen1=%zu\\n\", (const void *)String1, FormatLen1);\n                if (String1 == NULL)\n                {\n                    fprintf(fp, \"NOTE: String1 is NULL here; memchr/memcpy will be invoked with NULL -> invalid access expected.\\n\");\n                }\n                fprintf(fp, \"Will memcpy up to %zu bytes into ScrubbedString1 (capacity %zu)\\n\", FormatLen1, (size_t)sizeof(ScrubbedString1));\n                fclose(fp);\n            }\n        }\n\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        /* Log before newline search and copy for String2 */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2899.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"About to search for newline in String2: ptr=%p FormatLen2=%zu\\n\", (const void *)String2, FormatLen2);\n                if (String2 == NULL)\n                {\n                    fprintf(fp, \"NOTE: String2 is NULL here; memchr/memcpy will be invoked with NULL -> invalid access expected.\\n\");\n                }\n                fprintf(fp, \"Will memcpy up to %zu bytes into ScrubbedString2 (capacity %zu)\\n\", FormatLen2, (size_t)sizeof(ScrubbedString2));\n                fclose(fp);\n            }\n        }\n\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    /* Final log of scrubbed results and return value */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2899.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"Final ScrubbedString1 (len=%zu) and ScrubbedString2 (len=%zu) prepared. Result=%d\\n\", FormatLen1, FormatLen2, Result);\n            fprintf(fp, \"--- UtAssert_StringBufCompare EXIT ---\\n\\n\");\n            fclose(fp);\n        }\n    }\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '\\%s' == '\\%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}