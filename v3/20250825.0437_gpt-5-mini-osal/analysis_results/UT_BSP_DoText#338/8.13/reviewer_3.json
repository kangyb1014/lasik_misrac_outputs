{
  "user_message": "An agent A claimed that the following UT_BSP_DoText code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UT_BSP_DoText.\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if UtAssert_GetCaseTypeAbbrev is declared to return a non-const pointer (e.g. 'char *UtAssert_GetCaseTypeAbbrev(uint8)') while returning pointers to immutable/static text (for example 'return \"FAIL\";'). In that case the pointer should be const-qualified ('const char *UtAssert_GetCaseTypeAbbrev(uint8)') to comply with MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER: MessageType=8 MsgEnabled=15 TermModeBits=0x00000000 OutputMessage_ptr=0x55eb65d44ee9\nOutputMessage_preview=\"UNIT TEST\" (len=9)\nSWITCH: Case=BEGIN -> output newline\nAbbrev_ptr=0x55eb65d448aa Abbrev_preview=\"BEGIN\"\nBeforeOutput: MsgLen=9 OutputMessage_ptr=0x55eb65d44ee9 LastIsNewline=0\nAppended trailing newline to OutputMessage\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=8 MsgEnabled=15 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b643c30\nOutputMessage_preview=\"01 SETUP\" (len=8)\nSWITCH: Case=BEGIN -> output newline\nAbbrev_ptr=0x55eb65d448aa Abbrev_preview=\"BEGIN\"\nBeforeOutput: MsgLen=8 OutputMessage_ptr=0x7ffe5b643c30 LastIsNewline=0\nAppended trailing newline to OutputMessage\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=9 MsgEnabled=7 TermModeBits=0x00000000 OutputMessage_ptr=0x55eb65d44878\nOutputMessage_preview=\"No test cases\n\" (len=14)\nSWITCH: Case=DEFAULT -> no change\nAbbrev_ptr=0x55eb65d448b0 Abbrev_preview=\"END\"\nBeforeOutput: MsgLen=14 OutputMessage_ptr=0x55eb65d44878 LastIsNewline=1\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=8 MsgEnabled=15 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b643c00\nOutputMessage_preview=\"01 OS_VxWorks_BinSemAPI_Impl_Init\" (len=33)\nSWITCH: Case=BEGIN -> output newline\nAbbrev_ptr=0x55eb65d448aa Abbrev_preview=\"BEGIN\"\nBeforeOutput: MsgLen=33 OutputMessage_ptr=0x7ffe5b643c00 LastIsNewline=0\nAppended trailing newline to OutputMessage\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=13 MsgEnabled=0 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b6437a0\nOutputMessage_preview=\"utstubs.c:1096:OCS_memset called (DEFAULT,0)\" (len=44)\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=11 MsgEnabled=1 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b643900\nOutputMessage_preview=\"01.001 coveragetest-binsem.c:42 - UT_Call_OS_VxWorks_BinSemAPI_Impl_Init() (0) == OS_SUCCESS (0)\" (len=96)\nSWITCH: Case=PASS -> set HIGHLIGHT|GREEN\nMsgEnabled <= 1 -> force NORMAL mode\nAbbrev_ptr=0x55eb65d448b4 Abbrev_preview=\"PASS\"\nBeforeOutput: MsgLen=96 OutputMessage_ptr=0x7ffe5b643900 LastIsNewline=0\nAppended trailing newline to OutputMessage\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=10 MsgEnabled=3 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b643b70\nOutputMessage_preview=\"                       ABORT::0     WARN::0     FLOW::0     DEBUG::0     N/A::0   \" (len=82)\nSWITCH: Case=DEFAULT -> no change\nAbbrev_ptr=0x55eb65d448b9 Abbrev_preview=\"INFO\"\nBeforeOutput: MsgLen=82 OutputMessage_ptr=0x7ffe5b643b70 LastIsNewline=0\nAppended trailing newline to OutputMessage\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=9 MsgEnabled=7 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b643b70\nOutputMessage_preview=\"01 OS_VxWorks_BinSemAPI_Impl_Init TOTAL::1     PASS::1     FAIL::0     MIR::0     TSF::0     TTF::0   \" (len=102)\nSWITCH: Case=DEFAULT -> no change\nAbbrev_ptr=0x55eb65d448b0 Abbrev_preview=\"END\"\nBeforeOutput: MsgLen=102 OutputMessage_ptr=0x7ffe5b643b70 LastIsNewline=0\nAppended trailing newline to OutputMessage\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=8 MsgEnabled=15 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b643c00\nOutputMessage_preview=\"02 OS_BinSemCreate_Impl\" (len=23)\nSWITCH: Case=BEGIN -> output newline\nAbbrev_ptr=0x55eb65d448aa Abbrev_preview=\"BEGIN\"\nBeforeOutput: MsgLen=23 OutputMessage_ptr=0x7ffe5b643c00 LastIsNewline=0\nAppended trailing newline to OutputMessage\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=13 MsgEnabled=0 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b643780\nOutputMessage_preview=\"utstubs.c:1096:OCS_semBInitialize called (DEFAULT,0)\" (len=52)\nEXIT: UT_BSP_DoText completed\nENTER: MessageType=11 MsgEnabled=1 TermModeBits=0x00000000 OutputMessage_ptr=0x7ffe5b6438e0\nOutputMessage_preview=\"02.001 coveragetest-binsem.c:53 - OS_BinSemCreate_Impl(&token, 0, 0) (0) == OS_SUCCESS (0)\" (len=90)\nSWITCH: Case=PASS -> set HIGHLIGHT|GREEN\nMsgEnabled <= 1 -> force NORMAL mode\nAbbrev_ptr=0x55eb65d448b4 Abbrev_preview=\"PASS\"\nBeforeOutput: MsgLen=90 OutputMessage_ptr=0x7ffe5b6438e0 LastIsNewline=0\nAppended trailing newline to OutputMessage\nEXIT: UT_BSP_DoText \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible (i.e. functions that return pointers to immutable/static text should return const-qualified pointers). In UT_BSP_DoText the return value of UtAssert_GetCaseTypeAbbrev(MessageType) is used only for read-only output (snprintf(\"[%5s]\", ...), and the execution log shows the abbreviations come from static/immutable storage (string-like values such as \"BEGIN\", \"PASS\", etc.). If UtAssert_GetCaseTypeAbbrev is declared to return a non-const pointer (e.g. char *UtAssert_GetCaseTypeAbbrev(uint8)) while actually returning pointers to static string literals, that declaration violates Rule 8.13. Thus Agent A\u2019s report is correct in that scenario. Note: if UtAssert_GetCaseTypeAbbrev is already declared to return const char * then there is no violation; the fix (when needed) is to change the function\u2019s return type to const char * and update callers accordingly."
}