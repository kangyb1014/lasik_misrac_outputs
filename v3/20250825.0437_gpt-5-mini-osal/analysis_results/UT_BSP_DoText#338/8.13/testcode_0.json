{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment violates MISRA C 2023 Rule 8.13 if OS_BSP_ConsoleOutput_Impl's first parameter is declared as a non-const pointer (e.g. 'char *'). Passing the string literal \"\\n\" to a non-const 'char *' parameter implies the pointer should instead be const-qualified. The fix is to declare the function parameter as 'const char *' (e.g. OS_BSP_ConsoleOutput_Impl(const char *buf, size_t len)). If the function already takes 'const char *' there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_DoText code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append a log line describing the call site and state. */\nstatic void UT_BSP_LogProbe(const char *note,\n                            unsigned MessageType,\n                            const char *ptr,\n                            size_t len,\n                            unsigned TermModeBits,\n                            unsigned MsgEnabled,\n                            const char *tag)\n{\n    FILE *f = fopen(\"/tmp/logs/3383.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print a compact record of the control flow and state useful to reproduce the violation scenario. */\n        fprintf(f, \"%s: MessageType=%u, MsgEnabled=%u, TermModeBits=0x%08x, ptr=%p, len=%zu, tag=%s\\n\",\n                note, MessageType, MsgEnabled, TermModeBits, (void *)ptr, len, tag ? tag : \"(null)\");\n        /* For OutputMessage also print a short preview of the content to help identify literal vs buffer usage. */\n        if (ptr != NULL && tag != NULL && strcmp(tag, \"OutputMessage\") == 0)\n        {\n            /* print up to 80 chars of the message (safe, truncated) */\n            size_t preview_len = len < 80 ? len : 80;\n            fprintf(f, \"  Preview: '\");\n            for (size_t i = 0; i < preview_len; ++i)\n            {\n                char c = ptr[i];\n                /* print printable characters; show control chars as hex */\n                if (c >= 32 && c <= 126)\n                {\n                    fputc(c, f);\n                }\n                else if (c == '\\n')\n                {\n                    fputs(\"\\\\n\", f);\n                }\n                else if (c == '\\r')\n                {\n                    fputs(\"\\\\r\", f);\n                }\n                else\n                {\n                    fprintf(f, \"\\\\x%02x\", (unsigned char)c);\n                }\n            }\n            if (len > preview_len)\n            {\n                fputs(\"...\", f);\n            }\n            fputs(\"'\\n\", f);\n        }\n        fclose(f);\n    }\n}\n\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    /* Log entry and preliminary state */\n    UT_BSP_LogProbe(\"Enter UT_BSP_DoText\", (unsigned)MessageType, OutputMessage, 0u, (unsigned)TermModeBits, (unsigned)MsgEnabled, \"Entry\");\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                /* add a bit of extra whitespace between tests */\n                /* Log that we are about to pass a string literal \"\\n\" to the BSP console output implementation. */\n                UT_BSP_LogProbe(\"Before ConsoleOutput (BEGIN) - literal newline\", (unsigned)MessageType, \"\\n\", 1u, (unsigned)TermModeBits, (unsigned)MsgEnabled, \"\\\"\\\\n\\\" literal\");\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            UT_BSP_LogProbe(\"Before ConsoleSetMode (enter highlight)\", (unsigned)MessageType, NULL, 0u, (unsigned)TermModeBits, (unsigned)MsgEnabled, \"ConsoleSetMode\");\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        /* Log and emit the Buffer prefix */\n        UT_BSP_LogProbe(\"Before ConsoleOutput (Buffer)\", (unsigned)MessageType, Buffer, strlen(Buffer), (unsigned)TermModeBits, (unsigned)MsgEnabled, \"Buffer\");\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            UT_BSP_LogProbe(\"Before ConsoleSetMode (restore normal)\", (unsigned)MessageType, NULL, 0u, (unsigned)OS_BSP_CONSOLEMODE_NORMAL, (unsigned)MsgEnabled, \"ConsoleSetModeRestore\");\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        /* Log and emit a single space (literal) */\n        UT_BSP_LogProbe(\"Before ConsoleOutput (space literal)\", (unsigned)MessageType, \" \", 1u, (unsigned)TermModeBits, (unsigned)MsgEnabled, \"\\\" \\\" literal\");\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n\n        MsgLen = strlen(OutputMessage);\n        /* Log and emit the provided OutputMessage */\n        UT_BSP_LogProbe(\"Before ConsoleOutput (OutputMessage)\", (unsigned)MessageType, OutputMessage, MsgLen, (unsigned)TermModeBits, (unsigned)MsgEnabled, \"OutputMessage\");\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            /* Log and emit trailing newline literal if needed */\n            UT_BSP_LogProbe(\"Before ConsoleOutput (trailing newline)\", (unsigned)MessageType, \"\\n\", 1u, (unsigned)TermModeBits, (unsigned)MsgEnabled, \"\\\"\\\\n\\\" literal (trailing)\");\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        UT_BSP_LogProbe(\"Abort: calling OS_BSP_Shutdown_Impl\", (unsigned)MessageType, NULL, 0u, (unsigned)TermModeBits, (unsigned)MsgEnabled, \"Shutdown\");\n        OS_BSP_Shutdown_Impl();\n    }\n\n    /* Log exit for completeness */\n    UT_BSP_LogProbe(\"Exit UT_BSP_DoText\", (unsigned)MessageType, OutputMessage, 0u, (unsigned)TermModeBits, (unsigned)MsgEnabled, \"Exit\");\n}\n"
}