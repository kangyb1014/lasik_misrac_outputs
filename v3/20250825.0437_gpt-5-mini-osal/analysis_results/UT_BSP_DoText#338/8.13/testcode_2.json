{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call OS_BSP_ConsoleOutput_Impl(\" \", 1) passes a string literal (non-modifiable) to a function that is presumably declared to take a plain char * parameter. If OS_BSP_ConsoleOutput_Impl has a prototype like void OS_BSP_ConsoleOutput_Impl(char *Buf, size_t Len); then the pointer parameter is not const-qualified and Rule 8.13 is violated. The correct scenario is to declare the function as void OS_BSP_ConsoleOutput_Impl(const char *Buf, size_t Len) (and likewise for other calls passing literals or const data).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_DoText code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe function to log control flow and buffer state to /tmp/logs/3383.txt */\nstatic void UT_BSP_LogProbe(const char *event, const char *buf, size_t len, unsigned int MessageType, unsigned int TermModeBits, unsigned int MsgEnabled)\n{\n    FILE *f = fopen(\"/tmp/logs/3383.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best effort logging, do not disrupt normal flow */\n    }\n\n    fprintf(f, \"EVENT: %s\\n\", event ? event : \"(null)\");\n    fprintf(f, \"  MessageType=%u, TermModeBits=0x%08X, MsgEnabled=0x%08X\\n\",\n            MessageType, TermModeBits, MsgEnabled);\n    fprintf(f, \"  buf_ptr=%p, len=%zu\\n\", (const void *)buf, len);\n    if (buf != NULL && len > 0)\n    {\n        /* Print a safe preview of the buffer: up to 64 characters, not assuming NUL-termination */\n        size_t preview_len = (len < 64) ? len : 64;\n        /* Copy to a local buffer to ensure NUL termination for fprintf %s */\n        char preview[65];\n        size_t i;\n        for (i = 0; i < preview_len; ++i)\n        {\n            preview[i] = buf[i];\n        }\n        preview[preview_len] = '\\0';\n        fprintf(f, \"  preview=%s%s\\n\", preview, (len > preview_len) ? \"...\" : \"\");\n    }\n    else\n    {\n        fprintf(f, \"  preview=(none)\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    /* Log entry and computed MsgEnabled */\n    UT_BSP_LogProbe(\"enter UT_BSP_DoText\", OutputMessage, (OutputMessage != NULL) ? strlen(OutputMessage) : 0, MessageType, TermModeBits, MsgEnabled);\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        UT_BSP_LogProbe(\"after lock\", OutputMessage, (OutputMessage != NULL) ? strlen(OutputMessage) : 0, MessageType, TermModeBits, MsgEnabled);\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                /* Log the literal newline output before calling the implementation */\n                UT_BSP_LogProbe(\"ConsoleOutput_Impl - literal \\\"\\\\n\\\" (begin)\", \"\\n\", 1, MessageType, TermModeBits, MsgEnabled);\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            UT_BSP_LogProbe(\"SetMode - before setting highlight mode\", \"\", 0, MessageType, TermModeBits, MsgEnabled);\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        /* Log the Buffer contents before output */\n        UT_BSP_LogProbe(\"ConsoleOutput_Impl - Buffer label\", Buffer, strlen(Buffer), MessageType, TermModeBits, MsgEnabled);\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            UT_BSP_LogProbe(\"SetMode - restoring to NORMAL\", \"NORMAL\", 0, MessageType, OS_BSP_CONSOLEMODE_NORMAL, MsgEnabled);\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        /* Log the space separator output */\n        UT_BSP_LogProbe(\"ConsoleOutput_Impl - space separator\", \" \", 1, MessageType, TermModeBits, MsgEnabled);\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n\n        MsgLen = strlen(OutputMessage);\n        /* Log the user-provided message pointer and length */\n        UT_BSP_LogProbe(\"ConsoleOutput_Impl - OutputMessage (before)\", OutputMessage, MsgLen, MessageType, TermModeBits, MsgEnabled);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            UT_BSP_LogProbe(\"ConsoleOutput_Impl - trailing newline (added)\", \"\\n\", 1, MessageType, TermModeBits, MsgEnabled);\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_LogProbe(\"before unlock\", OutputMessage, MsgLen, MessageType, TermModeBits, MsgEnabled);\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        UT_BSP_LogProbe(\"OS_BSP_Shutdown_Impl - abort path\", OutputMessage, (OutputMessage != NULL) ? strlen(OutputMessage) : 0, MessageType, TermModeBits, MsgEnabled);\n        OS_BSP_Shutdown_Impl();\n    }\n\n    UT_BSP_LogProbe(\"exit UT_BSP_DoText\", OutputMessage, (OutputMessage != NULL) ? strlen(OutputMessage) : 0, MessageType, TermModeBits, MsgEnabled);\n}\n"
}