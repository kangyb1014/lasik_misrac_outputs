{
  "user_message": "An agent A claimed that the following OS_MutSemGetInfo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemGetInfo.\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to OS_MutSemGetInfo_Impl(&token, mut_prop) is executed but the provided implementation is a no-op (returns OS_SUCCESS with no side effects). Removing this call would not change program behavior (mut_prop is already populated and token is only released later), so this operation is dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_MutSemGetInfo START: sem_id=-559038737, mut_prop=0x7fffee8a8b70\nOS_MutSemGetInfo: cleared mut_prop (24 bytes)\nOS_MutSemGetInfo: OS_ObjectIdGetById returned -35\nOS_MutSemGetInfo: OS_ObjectIdGetById failed, exiting with code -35\nOS_MutSemGetInfo START: sem_id=0, mut_prop=0x7fffee8a8b70\nOS_MutSemGetInfo: cleared mut_prop (24 bytes)\nOS_MutSemGetInfo: OS_ObjectIdGetById returned -35\nOS_MutSemGetInfo: OS_ObjectIdGetById failed, exiting with code -35\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemGetInfo:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_SUCCESS (0)\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nextern OS_common_record_t *const OS_global_mutex_table\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n} OS_mut_sem_prop_t\n...\nint32 OS_MutSemGetInfo_Impl(const OS_object_token_t *token, OS_mut_sem_prop_t *mut_prop)\n{\n    return OS_SUCCESS;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Based on the supplied sources the call to OS_MutSemGetInfo_Impl is an extension point (a separate implementation function) rather than an obviously redundant local sequence of statements. The fact that the default implementation in the snippet currently returns OS_SUCCESS with no side effects means the default implementation is a no-op in this particular build, but that alone is not sufficient evidence of a MISRA 2.2 violation for the whole project. MISRA 2.2 forbids dead code present in the project as shipped \u2014 i.e. operations that can be executed and whose removal would not affect program behaviour in the project configuration. In many embedded projects such hook functions are intentionally provided as platform-specific overrides (or future expansion points); removing the call could change behaviour for other build configurations where OS_MutSemGetInfo_Impl is implemented with real behaviour. Moreover the call might be necessary to preserve API/ABI/locking semantics across different ports.\n\nIf, however, the project truly contains only the single no-op implementation and there is no possibility of replacement/override in any build of the project, then the call (and/or the no-op implementation) is dead code and would violate MISRA 2.2 \u2014 in that case the fix would be to remove or justify the unused call/implementation. Given the provided information (no indication that the implementation cannot be overridden or is intentionally a hook), the agent\u2019s claim that the code violates MISRA 2.2 is not conclusively correct; therefore the report is judged incorrect unless you can show that the impl is never overridden and the call provides no intended extensibility or documented justification."
}