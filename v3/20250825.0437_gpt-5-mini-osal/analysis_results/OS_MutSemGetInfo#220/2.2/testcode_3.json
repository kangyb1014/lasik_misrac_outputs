{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_MutSemGetInfo_Impl(&token, mut_prop) is executed but the provided implementation is a no-op (returns OS_SUCCESS with no side effects). Removing this call would not change program behavior (mut_prop is already populated and token is only released later), so this operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2202.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Logging probe */\n    FILE *log = fopen(\"/tmp/logs/2202.txt\", \"a\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    if (log)\n    {\n        fprintf(log, \"OS_MutSemGetInfo START: sem_id=%d, mut_prop=%p\\n\", (int)sem_id, (void *)mut_prop);\n        fflush(log);\n    }\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    if (log)\n    {\n        fprintf(log, \"OS_MutSemGetInfo: cleared mut_prop (%zu bytes)\\n\", (size_t)sizeof(OS_mut_sem_prop_t));\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_MutSemGetInfo: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        /* Snapshot mut_prop before calling the implementation hook */\n        unsigned char before_buf[sizeof(OS_mut_sem_prop_t)];\n        unsigned char after_buf[sizeof(OS_mut_sem_prop_t)];\n        size_t nbytes = sizeof(OS_mut_sem_prop_t);\n        memcpy(before_buf, mut_prop, nbytes);\n\n        if (log)\n        {\n            fprintf(log, \"OS_MutSemGetInfo: populated from record: name=\\\"%s\\\", creator=%u, record_ptr=%p\\n\",\n                    record->name_entry, (unsigned)record->creator, (void *)record);\n            fprintf(log, \"OS_MutSemGetInfo: token address=%p\\n\", (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        /* Capture after-call state and compare to detect no-op behavior */\n        memcpy(after_buf, mut_prop, nbytes);\n\n        if (log)\n        {\n            size_t i;\n            size_t diff_count = 0;\n            size_t first_diff = (size_t)-1;\n\n            for (i = 0; i < nbytes; ++i)\n            {\n                if (before_buf[i] != after_buf[i])\n                {\n                    if (first_diff == (size_t)-1)\n                    {\n                        first_diff = i;\n                    }\n                    ++diff_count;\n                }\n            }\n\n            fprintf(log, \"OS_MutSemGetInfo: OS_MutSemGetInfo_Impl returned %d\\n\", (int)return_code);\n            if (diff_count == 0)\n            {\n                fprintf(log, \"OS_MutSemGetInfo: NO CHANGE detected in mut_prop after Impl call (possible no-op)\\n\");\n            }\n            else\n            {\n                fprintf(log, \"OS_MutSemGetInfo: mut_prop changed: diff_count=%zu, first_diff_index=%zu\\n\",\n                        diff_count, first_diff);\n            }\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"OS_MutSemGetInfo: released token and exiting with code %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_MutSemGetInfo: OS_ObjectIdGetById failed, exiting with code %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}