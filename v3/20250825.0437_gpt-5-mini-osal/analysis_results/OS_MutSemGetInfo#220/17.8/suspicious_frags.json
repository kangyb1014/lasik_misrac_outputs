{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemGetInfo:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n} OS_mut_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\nint32 OS_MutSemGetInfo_Impl(const OS_object_token_t *token, OS_mut_sem_prop_t *mut_prop)\n{\n    return OS_SUCCESS;\n}\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no fragments that appear to violate MISRA C 2023 Rule 17.8 (a function parameter pointer itself must not be modified). Specific reasons:\n\n- sem_id (osal_id_t) is a value parameter and is not assigned to anywhere in the function.\n- mut_prop is a pointer parameter but the code only modifies the object it points to (memset(mut_prop,...), strncpy(mut_prop->name,...), mut_prop->creator = ...). Modifying the pointee is explicitly allowed by the rule; the pointer variable mut_prop itself is never reassigned.\n- The call OS_MutSemGetInfo_Impl(&token, mut_prop) passes mut_prop to another function. The provided implementation of OS_MutSemGetInfo_Impl simply returns OS_SUCCESS and does not modify the pointer parameter variable. Its prototype uses a non-const mut_prop parameter so modifying the pointee would be permitted; there is no evidence of reassignment to the pointer itself.\n- Local variable token is a local OS_object_token_t and address-of (&token) is passed to functions; this does not involve modifying a function parameter pointer.\n- Functions shown (OS_ObjectIdGetById, OS_ObjectIdRelease) dereference the token pointer and write fields (token->obj_idx, token->obj_id) but do not assign to the pointer parameter itself. The code paths shown return or call other helpers but do not reassign the token pointer variable.\n- Macro usages (OS_CHECK_POINTER(mut_prop), OS_OBJECT_TABLE_GET(..., token)) do not show any pointer reassignment in the provided definitions; OS_CHECK_POINTER expands to a BUGCHECK test and OS_OBJECT_TABLE_GET returns an address into a table. Based on the provided definitions they do not reassign the pointer parameter variable.\n\nGiven the provided code and definitions, there are no instances where a function parameter that is a pointer is assigned a new value (i.e., the pointer variable is modified). Therefore no suspicious fragments need investigation for Rule 17.8. If additional implementations (e.g., BUGCHECK, OS_ObjectIdTransactionInit/Finish/Convert/Cancel, or other omitted helpers) exist elsewhere, those implementations should be reviewed to ensure they do not reassign pointer parameters passed into them."
}