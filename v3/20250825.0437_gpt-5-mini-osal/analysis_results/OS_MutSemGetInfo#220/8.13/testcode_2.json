{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code reads from record->name_entry via a non-const pointer: record is declared as OS_common_record_t *record but is only used for read-only access (copying the name). According to Rule 8.13 the pointer should point to a const-qualified type whenever possible, e.g. declare record as const OS_common_record_t *record (or make name_entry a const char[] / const char *). As written the source buffer is not const-qualified, violating the intent of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe/helper functions to record control flow and state information. */\nstatic void log_mutsem_getinfo_entry(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f != NULL)\n    {\n        (void)fprintf(f, \"OS_MutSemGetInfo ENTRY: sem_id=%llu, mut_prop=%p\\n\",\n                      (unsigned long long)sem_id, (void *)mut_prop);\n        (void)fclose(f);\n    }\n}\n\nstatic void log_record_info(const OS_common_record_t *record)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    (void)fprintf(f, \"record ptr=%p\\n\", (const void *)record);\n    if (record != NULL)\n    {\n        char name_buf[128];\n\n        /* Copy safely and ensure NUL termination for logging only. */\n        name_buf[0] = '\\0';\n        if (record->name_entry != NULL)\n        {\n            (void)strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n        }\n\n        (void)fprintf(f, \"record->name_entry=\\\"%s\\\"\\n\", name_buf);\n        (void)fprintf(f, \"record->creator=%lu\\n\", (unsigned long)record->creator);\n    }\n\n    (void)fclose(f);\n}\n\nstatic void log_after_copy(const OS_mut_sem_prop_t *mut_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    char name_buf[128];\n    name_buf[0] = '\\0';\n    if (mut_prop->name != NULL)\n    {\n        (void)strncpy(name_buf, mut_prop->name, sizeof(name_buf) - 1);\n        name_buf[sizeof(name_buf) - 1] = '\\0';\n    }\n\n    (void)fprintf(f, \"After copy: mut_prop->name=\\\"%s\\\"\\n\", name_buf);\n    (void)fprintf(f, \"After copy: mut_prop->creator=%lu\\n\", (unsigned long)mut_prop->creator);\n    (void)fclose(f);\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry with key parameters */\n    log_mutsem_getinfo_entry(sem_id, mut_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        /* Log the record read prior to copying */\n        log_record_info(record);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        /* Log the state after performing the copy from the record into mut_prop */\n        log_after_copy(mut_prop);\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Log final return code */\n    {\n        FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n        if (f != NULL)\n        {\n            (void)fprintf(f, \"OS_MutSemGetInfo EXIT: return_code=%ld\\n\", (long)return_code);\n            (void)fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}