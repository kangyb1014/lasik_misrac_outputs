{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_global_mutex_table is declared as a const pointer to a non-const OS_common_record_t: 'extern OS_common_record_t *const OS_global_mutex_table'. In OS_MutSemGetInfo the code only reads fields from the records (via OS_OBJECT_TABLE_GET and record->name_entry / record->creator), so the pointee could be const-qualified. Therefore the pointer does not point to a const-qualified type when it could, violating MISRA C 2023 Rule 8.13. A fix would be to declare it as 'extern const OS_common_record_t *const OS_global_mutex_table' (or equivalent) if modifications through that pointer are not required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: append a formatted message to the log file. */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters after pointer check to avoid logging invalid pointer */\n    os_probe_log(\"OS_MutSemGetInfo: called sem_id=%llu mut_prop=%p\", (unsigned long long)sem_id, (void *)mut_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n    os_probe_log(\"OS_MutSemGetInfo: mut_prop cleared (size=%zu)\", sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    os_probe_log(\"OS_MutSemGetInfo: OS_ObjectIdGetById returned %d token_addr=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n        os_probe_log(\"OS_MutSemGetInfo: OS_OBJECT_TABLE_GET returned record=%p\", (void *)record);\n\n        if (record != NULL)\n        {\n            /* Log record fields that will be read */\n            os_probe_log(\"OS_MutSemGetInfo: record->name_entry=%s\", (record->name_entry != NULL) ? record->name_entry : \"(null)\");\n            os_probe_log(\"OS_MutSemGetInfo: record->creator=%llu\", (unsigned long long)record->creator);\n\n            strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n            mut_prop->creator = record->creator;\n\n            os_probe_log(\"OS_MutSemGetInfo: mut_prop->name set to '%s' mut_prop->creator=%llu\",\n                         mut_prop->name, (unsigned long long)mut_prop->creator);\n        }\n        else\n        {\n            os_probe_log(\"OS_MutSemGetInfo: warning - record is NULL for sem_id=%llu\", (unsigned long long)sem_id);\n        }\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n        os_probe_log(\"OS_MutSemGetInfo: OS_MutSemGetInfo_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        os_probe_log(\"OS_MutSemGetInfo: token released\");\n    }\n    else\n    {\n        os_probe_log(\"OS_MutSemGetInfo: OS_ObjectIdGetById failed with %d for sem_id=%llu\", return_code, (unsigned long long)sem_id);\n    }\n\n    os_probe_log(\"OS_MutSemGetInfo: returning %d\", return_code);\n    return return_code;\n}\n"
}