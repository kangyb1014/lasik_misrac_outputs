{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * and is assigned from OS_OBJECT_TABLE_GET(OS_global_mutex_table, token). The code only reads fields from *record (name_entry, creator) and does not modify the pointee, so the pointer could and should be to a const-qualified type (e.g. const OS_common_record_t *record). Note also that OS_global_mutex_table is declared as 'OS_common_record_t *const' (a const pointer to mutable elements) so the pointee is not const-qualified; therefore the current code does not use a const-qualified pointee even though it could. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/2203.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters */\n    probe_log(\"ENTER OS_MutSemGetInfo: sem_id=%llu, mut_prop=%p\", (unsigned long long)sem_id, (void *)mut_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log(\"OS_ObjectIdGetById returned %d (sem_id=%llu)\", return_code, (unsigned long long)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        probe_log(\"record retrieved: record_ptr=%p\", (void *)record);\n\n        if (record != NULL)\n        {\n            /* Log the fields that are read by the function to capture the violation scenario evidence */\n            /* Note: these are the same fields accessed below in the original logic. */\n            probe_log(\"record->name_entry='%s'\", record->name_entry ? record->name_entry : \"(null)\");\n            probe_log(\"record->creator=%u\", (unsigned)record->creator);\n        }\n        else\n        {\n            probe_log(\"record is NULL for token (addr=%p)\", (void *)&token);\n        }\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        probe_log(\"Calling OS_MutSemGetInfo_Impl for token=%p\", (void *)&token);\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n        probe_log(\"OS_MutSemGetInfo_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Released token (addr=%p)\", (void *)&token);\n    }\n\n    probe_log(\"EXIT OS_MutSemGetInfo: return_code=%d\", return_code);\n    return return_code;\n}\n"
}