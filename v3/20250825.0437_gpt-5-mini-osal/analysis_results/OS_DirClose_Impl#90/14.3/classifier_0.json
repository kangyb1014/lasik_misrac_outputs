{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_DirClose_Impl:\n```c\nint32 OS_DirClose_Impl(const OS_object_token_t *token)\n{\n    OS_impl_dir_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    closedir(impl->dp);\n    impl->dp = NULL;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_DirClose_Impl:\nDIR *                          dp = opendir(local_path)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nimpl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment is an assignment (macro expansion retrieving a table entry), not a controlling expression (if/while/for/do-while/switch). MISRA C 2023 Rule 14.3 applies to invariant controlling expressions; there is no controlling expression here. If the macro were to expand into a control construct, it should be re-evaluated, but as written this line does not violate Rule 14.3."
}