{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TimeBase_CallbackThread:\n```c\nvoid OS_TimeBase_CallbackThread(osal_id_t timebase_id)\n{\n    OS_TimerSync_t                 syncfunc;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_common_record_t *           record;\n    OS_object_token_t              token;\n    OS_object_token_t              cb_token;\n    uint32                         tick_time;\n    uint32                         spin_cycles;\n    int32                          saved_wait_time;\n\n    /*\n     * Register this task as a time base handler.\n     * Application code MUST NOT attempt to configure timers from the context of a\n     * timer callback, otherwise deadlock is possible.  Additional checks prevent this.\n     *\n     */\n    OS_TaskRegister_Impl(timebase_id);\n\n    /* Grab the relevant info from the global structure */\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_id, &token) != 0)\n    {\n        /* Something went wrong - abort this thread */\n        return;\n    }\n\n    record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n    timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n    syncfunc    = timebase->external_sync;\n    spin_cycles = 0;\n\n    OS_ObjectIdRelease(&token);\n\n    while (1)\n    {\n        /*\n         * Call the sync function - this will pend for some period of time\n         * and return the amount of elapsed time in units of \"timebase ticks\"\n         */\n        tick_time = (*syncfunc)(timebase_id);\n\n        /*\n         * The returned tick_time should be nonzero.  If the sync function\n         * returns zero, then it means something went wrong and it is not\n         * known how many ticks have elapsed.\n         *\n         * This can validly occur, for instance, if the underlying wait\n         * operation was interrupted for some reason, e.g. EINTR or EAGAIN\n         * on a POSIX-like OS.\n         *\n         * In some instances it is appropriate to simply call the\n         * function again.  However, since this task typically runs as a\n         * high-priority thread, it is prudent to limit such spinning.\n         */\n        if (tick_time != 0)\n        {\n            /* nominal case - reset counter */\n            spin_cycles = 0;\n        }\n        else if (spin_cycles < OS_TIMEBASE_SPIN_LIMIT)\n        {\n            /* off-nominal but OK for now */\n            ++spin_cycles;\n        }\n        else\n        {\n            /*\n             * Spin-loop detected.\n             * Just call OS_TaskDelay_Impl() to yield the CPU.\n             * generate a debug warning only on the first time\n             * so the operator knows this is happening.\n             */\n            OS_TaskDelay_Impl(10);\n\n            if (spin_cycles == OS_TIMEBASE_SPIN_LIMIT)\n            {\n                ++spin_cycles;\n                OS_DEBUG(\"WARNING: Timebase Sync Spin Loop detected\\n\");\n            }\n        }\n\n        OS_TimeBaseLock_Impl(&token);\n\n        /*\n         * After waiting, check that our ID still matches\n         * If not then it means this time base got deleted....\n         */\n        if (!OS_ObjectIdEqual(timebase_id, record->active_id))\n        {\n            OS_TimeBaseUnlock_Impl(&token);\n            break;\n        }\n\n        timebase->freerun_time += tick_time;\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &cb_token) == 0)\n        {\n            do\n            {\n                timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, cb_token);\n                saved_wait_time = timecb->wait_time;\n                timecb->wait_time -= tick_time;\n                while (timecb->wait_time <= 0)\n                {\n                    timecb->wait_time += timecb->interval_time;\n\n                    /*\n                     * Only allow the \"wait_time\" underflow to go as far negative as one interval time\n                     * This prevents a cb \"interval_time\" of less than the timebase interval_time from\n                     * accumulating infinitely\n                     */\n                    if (timecb->wait_time < -timecb->interval_time)\n                    {\n                        ++timecb->backlog_resets;\n                        timecb->wait_time = -timecb->interval_time;\n                    }\n\n                    /*\n                     * Only give the callback if the wait_time actually transitioned from positive to negative.\n                     * This allows one-shot operation where the API sets the \"wait_time\" positive but keeps\n                     * the \"interval_time\" at zero.  With the interval_time at zero the wait time will never\n                     * go positive again unless the API sets it again.\n                     */\n                    if (saved_wait_time > 0 && timecb->callback_ptr != NULL)\n                    {\n                        (*timecb->callback_ptr)(OS_ObjectIdFromToken(&cb_token), timecb->callback_arg);\n                    }\n\n                    /*\n                     * Do not repeat the loop unless interval_time is configured.\n                     */\n                    if (timecb->interval_time <= 0)\n                    {\n                        break;\n                    }\n                }\n\n            } while (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &cb_token) ==\n                         OS_SUCCESS &&\n                     !OS_ObjectIdEqual(OS_ObjectIdFromToken(&cb_token), timebase->first_cb));\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TimeBase_CallbackThread:\n#define OS_TIMEBASE_SPIN_LIMIT 4\n...\n#define OS_SUCCESS (0)\n...\ntypedef uint32 (*OS_TimerSync_t)(osal_id_t timer_id)\n...\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n        }\n    }\n\n    return interval_time;\n}\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n...\nstatic inline bool OS_ObjectIdEqual(osal_id_t object_id1, osal_id_t object_id2)\n{\n    return (OS_ObjectIdToInteger(object_id1) == OS_ObjectIdToInteger(object_id2));\n}\n...\ntypedef struct\n{\n    char           timebase_name[OS_MAX_API_NAME];\n    OS_TimerSync_t external_sync;\n    uint32         accuracy_usec;\n    osal_id_t      first_cb;\n    uint32         freerun_time;\n    uint32         nominal_start_time;\n    uint32         nominal_interval_time;\n} OS_timebase_internal_record_t\n...\ntypedef struct\n{\n    char              timer_name[OS_MAX_API_NAME];\n    uint32            flags;\n    OS_object_token_t timebase_token;\n    osal_id_t         prev_cb;\n    osal_id_t         next_cb;\n    uint32            backlog_resets;\n    int32             wait_time;\n    int32             interval_time;\n    OS_ArgCallback_t  callback_ptr;\n    void *            callback_arg;\n} OS_timecb_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_timebase_internal_record_t OS_timebase_table[OS_MAX_TIMEBASES]\n...\nextern OS_common_record_t *const OS_global_timebase_table\n...\n#define OS_OBJECT_TYPE_OS_TIMECB 0x09\n...\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nvoid OS_TimeBaseLock_Impl(const OS_object_token_t *token)\n{\n    OS_impl_timebase_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n\n    pthread_mutex_lock(&impl->handler_mutex);\n}\n...\nvoid OS_TimeBaseUnlock_Impl(const OS_object_token_t *token)\n{\n    OS_impl_timebase_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n\n    pthread_mutex_unlock(&impl->handler_mutex);\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_id, &token) != 0)\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The controlling expression calls the function OS_ObjectIdGetById(...) with runtime arguments (timebase_id and &token) so its result is not a compile-time or invariant value. Therefore the if condition is not an invariant controlling expression and does not violate MISRA C 2023 Rule 14.3."
}