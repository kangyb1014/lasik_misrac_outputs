{
  "user_message": "Target function code is:\n```c\nint32 UT_DefaultStubImplWithArgs(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, va_list ArgList)\n{\n    const char *         RetcodeString;\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *ContextTblPtr;\n    UT_StubTableEntry_t *RvcPtr;\n    UT_StubContext_t     LocalContext;\n    uint32               Counter;\n    va_list              ArgListCopy;\n    bool                 GotInt32StatusFromHook;\n\n    /*\n     * In this implementation a context is _always_ needed.\n     *\n     * First see if the stub has an already-registered context.  Any non-trivial stub\n     * should already have registered some arguments and/or a return code buffer.\n     *\n     * To handle an old-style/incomplete stub function or simple void/void stubs that\n     * do not have any arguments, a blank entry can be created on the fly.\n     */\n    ContextTblPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (ContextTblPtr != NULL)\n    {\n        LocalContext = ContextTblPtr->Data.Context;\n\n        /* Always clear the context entry -- the next call will have a different one */\n        UT_ClearStubEntry(ContextTblPtr);\n    }\n    else\n    {\n        memset(&LocalContext, 0, sizeof(LocalContext));\n    }\n\n    RvcPtr = UT_Stub_FindRetvalConfig(FuncKey);\n\n    /* For legacy compatibility, determine the int32 status code (this may or may not be relevent) */\n    if (RvcPtr != NULL && UT_Stub_IsValueCompatible(&RvcPtr->Data.Rvc, \"int32\", UT_ValueGenre_INTEGER))\n    {\n        LocalContext.Int32StatusIsSet =\n            UT_LoadRetval(&LocalContext.Int32StatusCode, sizeof(LocalContext.Int32StatusCode), &RvcPtr->Data.Rvc.Buf,\n                          UT_ValueGenre_INTEGER);\n    }\n\n    if (!LocalContext.Int32StatusIsSet)\n    {\n        LocalContext.Int32StatusCode = DefaultRc;\n    }\n\n    if (FunctionName != NULL)\n    {\n        if (!LocalContext.Int32StatusIsSet)\n        {\n            RetcodeString = \"DEFAULT\";\n        }\n        else\n        {\n            /* Indicate that this invocation got a non-default return code */\n            RetcodeString = \"*SPECIAL*\";\n        }\n\n        UtDebug(\"%s called (%s,%ld)\", FunctionName, RetcodeString, (long)LocalContext.Int32StatusCode);\n    }\n\n    Counter = 0;\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr == NULL)\n    {\n        /* Creating counter entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set counter - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->EntryType = UT_ENTRYTYPE_COUNTER;\n        StubPtr->FuncKey   = FuncKey;\n        Counter            = StubPtr->Data.Rc.Count;\n        ++StubPtr->Data.Rc.Count;\n        StubPtr->Data.Rc.Value = LocalContext.Int32StatusCode;\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_HOOK);\n    if (StubPtr != NULL)\n    {\n        if (StubPtr->Data.Cb.IsVarg)\n        {\n            va_copy(ArgListCopy, ArgList);\n            LocalContext.Int32StatusCode = StubPtr->Data.Cb.Ptr.VaHook(\n                StubPtr->Data.Cb.CallbackArg, LocalContext.Int32StatusCode, Counter, &LocalContext, ArgListCopy);\n            va_end(ArgListCopy);\n        }\n        else\n        {\n            LocalContext.Int32StatusCode = StubPtr->Data.Cb.Ptr.SimpleHook(\n                StubPtr->Data.Cb.CallbackArg, LocalContext.Int32StatusCode, Counter, &LocalContext);\n        }\n\n        GotInt32StatusFromHook        = true;\n        LocalContext.Int32StatusIsSet = true;\n    }\n    else\n    {\n        GotInt32StatusFromHook = false;\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    if (StubPtr != NULL)\n    {\n        if (StubPtr->Data.Cb.IsVarg)\n        {\n            StubPtr->Data.Cb.Ptr.VaHandler(StubPtr->Data.Cb.CallbackArg, FuncKey, &LocalContext, ArgList);\n        }\n        else\n        {\n            StubPtr->Data.Cb.Ptr.SimpleHandler(StubPtr->Data.Cb.CallbackArg, FuncKey, &LocalContext);\n        }\n    }\n\n    /*\n     * Handle propagation of return code.\n     *\n     *   \"old style\" stubs will translate the int32 return value from this function.\n     *     - Return Buffer will always be unset with these stubs\n     *     - This should continue to work with no special handling.\n     *\n     *   \"new style\" stubs will provide a return value buffer via UT_ENTRYTYPE_RETURN_BUFFER in the context.\n     *     - In this pattern the int32 return value of this function is _IGNORED_ by the calling stub.\n     *     - The only way to return a value to the caller is via the buffer.\n     *     - If the handler did _not_ populate the return value, then attempt to translate the local\n     *       Retcode here to the return value buffer.  This eases the transition, as the vast majority\n     *       of functions do return an int32, this can be the automatic case.\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL && StubPtr->Data.Buff.Position == 0)\n    {\n        /* If a hook function was used, it is expected that this will override any configured retval */\n        if (GotInt32StatusFromHook && StubPtr->Data.Buff.TotalSize == sizeof(LocalContext.Int32StatusCode))\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, &LocalContext.Int32StatusCode, StubPtr->Data.Buff.TotalSize);\n            StubPtr->Data.Buff.Position = StubPtr->Data.Buff.TotalSize;\n        }\n        else if (RvcPtr != NULL)\n        {\n            /*\n             * Opaque values allow for arbitrarily large return values, but size must match exactly\n             * to what is expected, it cannot be truncated or expanded if there is a mismatch\n             * between the test and the stub.  Conversely, numeric values can be size-adjusted\n             * if the test supplied one size but the stub needs a different size, such as 32-bit\n             * to 16-bit or 64-bit ints.  Note that historically UT assert only supported 32-bit\n             * integer return values to be directly configured, so older test cases are likely to\n             * set a 32-bit value even if the return value is a different size.\n             */\n            if (RvcPtr->Data.Rvc.Genre == UT_ValueGenre_OPAQUE)\n            {\n                if (StubPtr->Data.Rvc.ActualSz != StubPtr->Data.Buff.TotalSize)\n                {\n                    UtAssert_Failed(\"Stub %s opaque return size mismatch, expected %lu, got %lu, type=%s\", FunctionName,\n                                    (unsigned long)StubPtr->Data.Buff.TotalSize,\n                                    (unsigned long)StubPtr->Data.Rvc.ActualSz, StubPtr->Data.Buff.ContentTypeStr);\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, StubPtr->Data.Rvc.Buf.IndirectPtr, StubPtr->Data.Buff.TotalSize);\n                    StubPtr->Data.Buff.Position = StubPtr->Data.Buff.TotalSize;\n                }\n            }\n            else if (UT_LoadRetval(StubPtr->Data.Buff.BasePtr, StubPtr->Data.Buff.TotalSize, &RvcPtr->Data.Rvc.Buf,\n                                   RvcPtr->Data.Rvc.Genre))\n            {\n                StubPtr->Data.Buff.Position = StubPtr->Data.Buff.TotalSize;\n            }\n        }\n\n        if (StubPtr->Data.Buff.Position == 0)\n        {\n            /*\n             * This means that no suitable return value was configured for this call.\n             * The final fallback in this case is to zero-fill it.\n             *\n             * For logical values this should become \"false\", for pointers it is \"NULL\", and for any numeric\n             * value - signed, unsigned, or float - it should become 0.\n             */\n            memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize);\n            StubPtr->Data.Buff.Position = StubPtr->Data.Buff.TotalSize;\n        }\n    }\n\n    /*\n     * Deferred retval configs should be expunged after they are used, so the next call will\n     * get the next config (if applicable).  Constant return values are NOT cleared, they may\n     * be re-used if the same stub is invoked again.\n     */\n    if (RvcPtr != NULL && RvcPtr->EntryType == UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED)\n    {\n        UT_ClearStubEntry(RvcPtr);\n    }\n\n    return LocalContext.Int32StatusCode;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'UT_DefaultStubImplWithArgs': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry', 'UT_Stub_FindRetvalConfig', 'UtAssert_Message', 'UtAssert_Abort', 'UtAssert_GetContext'], 'callers': ['UT_DefaultStubImpl', 'UT_ExecuteVaHandler']}, 'UT_GetStubEntry': {'callees': [], 'callers': ['UT_ConfigureGenericStubReturnValue', 'UT_ClearDeferredRetcode', 'UT_ClearDefaultReturnValue', 'UT_GetStubRetcodeAndCount', 'UT_GetStubCount', 'UT_Stub_RegisterReturnType', 'UT_Stub_GetReturnValuePtr', 'UT_SetDataBuffer', 'UT_GetDataBuffer', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyFromLocal', 'UT_DoSetHookFunction', 'UT_Stub_RegisterContextWithMetaData', 'UT_Stub_CopyToReturnValue', 'UT_Stub_FindRetvalConfig', 'UT_DefaultStubImplWithArgs', 'UT_ExecuteBasicHandler', 'UT_ExecuteVaHandler']}, 'UT_ClearStubEntry': {'callees': [], 'callers': ['UT_ResetState', 'UT_ClearDeferredRetcode', 'UT_ClearDefaultReturnValue', 'UT_Stub_RegisterReturnType', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyFromLocal', 'UT_DoSetHookFunction', 'UT_DefaultStubImplWithArgs']}, 'UT_Stub_FindRetvalConfig': {'callees': ['UT_GetStubEntry'], 'callers': ['UT_DefaultStubImplWithArgs']}, 'UtAssert_Message': {'callees': ['UT_BSP_DoText'], 'callers': ['UT_DefaultStubImplWithArgs', 'UT_DefaultHandler_OS_printf']}, 'UtAssert_Abort': {'callees': ['UT_BSP_DoText'], 'callers': ['UT_Stub_CallOnce', 'UT_ConfigureGenericStubReturnValue', 'UT_Stub_RegisterReturnType', 'UT_Stub_GetReturnValuePtr', 'UT_SetDataBuffer', 'UT_DoSetHookFunction', 'UT_Hook_GetArgPtr', 'UT_Stub_RegisterContextWithMetaData', 'UT_Stub_CopyToReturnValue', 'UT_DefaultStubImplWithArgs', 'UT_AllocStubObjId']}, 'UtAssert_GetContext': {'callees': [], 'callers': ['UtAssert', 'UT_StoreRetval', 'UT_LoadRetval', 'UT_SetDeferredRetcode', 'UT_Stub_GetReturnValuePtr', 'UT_Hook_GetArgPtr', 'UT_DefaultStubImplWithArgs', 'UtMem2BinFile', 'UtBinFile2Mem', 'UtMem2HexFile', 'UtMem2BinFileCmp', 'UT_AllocStubObjId', 'UT_DeleteStubObjId']}, 'UT_DefaultStubImpl': {'callees': ['UT_DefaultStubImplWithArgs'], 'callers': ['UT_ExecuteBasicHandler', 'dummy_function']}, 'UT_ExecuteVaHandler': {'callees': ['UT_GetStubEntry', 'UT_SetVaHandlerFunction', 'UT_DefaultStubImplWithArgs'], 'callers': ['OS_printf']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nUse of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters. This rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "UT_StubTableEntry_t (complete struct definition including nested Data union/structs: Buff, Rvc, Cb and all fields referenced \u2014 Buff.BasePtr, Buff.TotalSize, Buff.Position, Buff.ContentTypeStr; Rvc.Genre, Rvc.Buf, Rvc.ActualSz, Rvc.Buf.IndirectPtr; Cb.IsVarg and Cb.Ptr union members)",
    "UT_StubContext_t (complete struct definition including fields Int32StatusCode, Int32StatusIsSet and any padding/alignment affecting sizeof(Int32StatusCode))",
    "UT_LoadRetval (prototype and full semantics/documentation: how many bytes it writes to the destination, how it interprets Rvc.Buf for different genres, and its return-value meaning)",
    "UT_Stub_IsValueCompatible (prototype and semantics: how it determines compatibility for a Rvc entry and what guarantees it provides about Rvc contents)",
    "UT_GetStubEntry (prototype and semantics/lifetime guarantees: whether returned UT_StubTableEntry_t pointer and its internal pointers (BasePtr, Rvc.Buf.IndirectPtr, etc.) are valid, owned, or may be NULL; whether fields like TotalSize are initialized)",
    "UT_ClearStubEntry (prototype and semantics: exactly what fields are cleared/zeroed/freed when called and whether it can invalidate pointers in other entries)",
    "UT_ValueGenre enum/definitions (definitions/meanings for UT_ValueGenre_INTEGER, UT_ValueGenre_OPAQUE and any behavior differences relevant to buffer sizing and copying)",
    "Typedefs and fundamental sizes used by the function (int32, uint32, size_t, UT_EntryKey_t)",
    "Relevant UT_ENTRYTYPE_* constants used (UT_ENTRYTYPE_RETURN_BUFFER, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED, UT_ENTRYTYPE_CALLBACK_CONTEXT, UT_ENTRYTYPE_COUNTER, UT_ENTRYTYPE_UNUSED)"
  ],
  "explanation": "For each use of memcpy/memset in the target function we must be able to prove the source and destination object bounds and that the requested copy/zero size does not exceed the referenced object. The listed symbols are needed for that reasoning:\n\n- UT_StubTableEntry_t (and its nested Buff/Rvc/Cb definitions): the function directly reads and writes Buff.BasePtr, Buff.TotalSize, Buff.Position and Rvc.* fields and copies to/from those buffers. To check memcpy/memset safety we must know the exact types, sizes and where BasePtr and Rvc.Buf.IndirectPtr point, and whether TotalSize and ActualSz reflect the allocated object sizes.\n\n- UT_StubContext_t: memcpy uses sizeof(LocalContext.Int32StatusCode) and memset(&LocalContext,...). Knowing the exact type and size/alignment of Int32StatusCode and layout of LocalContext is necessary to ensure the memcpy size is correct and the memset of the whole LocalContext (via sizeof(LocalContext)) is bounded.\n\n- UT_LoadRetval: this function is used to load data from Rvc into LocalContext.Int32StatusCode and later into Buff.BasePtr. Its behavior determines how many bytes it writes, whether it can write more than the provided destination size, and under what conditions it returns success. MISRA bounds checks require knowing that UT_LoadRetval cannot write beyond the destination buffer.\n\n- UT_Stub_IsValueCompatible: called to decide whether Rvc contains an INTEGER compatible value. Its semantics affect whether UT_LoadRetval will be invoked and what assumptions about Rvc.Buf layout/size are valid.\n\n- UT_GetStubEntry: the function repeatedly obtains StubPtr and RvcPtr via UT_GetStubEntry and then uses their Data fields. We must know the lifetime/validity guarantees of the returned pointer and whether its Data fields (BasePtr, TotalSize, Rvc.Buf.*) are initialized and point to valid storage \u2014 otherwise any memcpy/memset could be operating on invalid or undersized destinations.\n\n- UT_ClearStubEntry: this routine is called to clear ContextTblPtr and later may be used to clear deferred entries. Its exact clearing semantics (which fields are zeroed or freed) affect whether pointers and sizes read later are valid. For instance, if ClearStubEntry frees an IndirectPtr, subsequent access could be out-of-bounds.\n\n- UT_ValueGenre enum/definitions: behavior differs for UT_ValueGenre_OPAQUE vs INTEGER (opaque copies use indirect pointers and require exact size match). The code branches on Genre; to prove safety we must know what each genre guarantees about Rvc.Buf and Rvc.ActualSz.\n\n- Fundamental typedefs (int32, uint32, size_t, UT_EntryKey_t): to compute byte counts (sizeof) and to reason about implicit casts (e.g., (long)LocalContext.Int32StatusCode) and to verify sizes used in memcpy/memset are consistent with the real object sizes.\n\n- UT_ENTRYTYPE_* constants: these determine which UT_GetStubEntry slot is returned and whether the entry semantics (e.g., RETURN_BUFFER vs RETVAL_CONFIG_DEFERRED) imply particular invariants about Buff.TotalSize, Rvc.ActualSz and pointer validity.\n\nWithout the above structural definitions and function semantics you cannot determine whether the three uses of string.h functions in the target function (memset(&LocalContext,...), memcpy(StubPtr->Data.Buff.BasePtr, &LocalContext.Int32StatusCode, StubPtr->Data.Buff.TotalSize), memcpy(StubPtr->Data.Buff.BasePtr, StubPtr->Data.Rvc.Buf.IndirectPtr, StubPtr->Data.Buff.TotalSize), and the final memset(StubPtr->Data.Buff.BasePtr,...)) could access beyond the bounds of their destination or source objects."
}