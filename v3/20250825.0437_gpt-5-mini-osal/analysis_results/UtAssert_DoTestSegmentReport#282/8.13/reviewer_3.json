{
  "user_message": "An agent A claimed that the following UtAssert_DoTestSegmentReport code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UtAssert_DoTestSegmentReport.\n```c\nvoid UtAssert_DoTestSegmentReport(const char *SegmentName, const UtAssert_TestCounter_t *TestCounters)\n{\n    char ReportBuffer[144];\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%-22s ABORT::%-4u  WARN::%-4u  FLOW::%-4u  DEBUG::%-4u  N/A::%-4u\",\n             \"\",\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_ABORT],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_WARN],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FLOW],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_DEBUG],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_NA]);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_INFO, ReportBuffer);\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%02u %-20s TOTAL::%-4u  PASS::%-4u  FAIL::%-4u  MIR::%-4u  TSF::%-4u  TTF::%-4u\",\n             (unsigned int)TestCounters->TestSegmentCount, SegmentName, (unsigned int)TestCounters->TotalTestCases,\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_PASS],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_MIR],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_END, ReportBuffer);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf UT_BSP_DoText is declared to take a non-const pointer (e.g. void UT_BSP_DoText(int type, char *text)) but the function does not modify the string contents, then passing ReportBuffer (which decays to char *) violates MISRA C 2023 Rule 8.13. The parameter should be declared as const char * to indicate the function does not modify the pointed-to data. If, however, UT_BSP_DoText is already declared to take const char * (or the function legitimately modifies the buffer), there is no violation.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n==== Entry (before first snprintf) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_VxWorks_BinSemAPI_Impl_Init\"\n TestSegmentCount=1\n TotalTestCases=1\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer: (null)\n\n==== After first snprintf (before UT_BSP_DoText call #1) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_VxWorks_BinSemAPI_Impl_Init\"\n TestSegmentCount=1\n TotalTestCases=1\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer ptr=0x7ffc7606bb80\n ReportBuffer value=\"                       ABORT::0     WARN::0     FLOW::0     DEBUG::0     N/A::0   \"\n\n==== After UT_BSP_DoText call #1 ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_VxWorks_BinSemAPI_Impl_Init\"\n TestSegmentCount=1\n TotalTestCases=1\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer ptr=0x7ffc7606bb80\n ReportBuffer value=\"                       ABORT::0     WARN::0     FLOW::0     DEBUG::0     N/A::0   \"\n\n==== After second snprintf (before UT_BSP_DoText call #2) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_VxWorks_BinSemAPI_Impl_Init\"\n TestSegmentCount=1\n TotalTestCases=1\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer ptr=0x7ffc7606bb80\n ReportBuffer value=\"01 OS_VxWorks_BinSemAPI_Impl_Init TOTAL::1     PASS::1     FAIL::0     MIR::0     TSF::0     TTF::0   \"\n\n==== After UT_BSP_DoText call #2 (exit) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_VxWorks_BinSemAPI_Impl_Init\"\n TestSegmentCount=1\n TotalTestCases=1\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer ptr=0x7ffc7606bb80\n ReportBuffer value=\"01 OS_VxWorks_BinSemAPI_Impl_Init TOTAL::1     PASS::1     FAIL::0     MIR::0     TSF::0     TTF::0   \"\n\n==== Entry (before first snprintf) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_BinSemCreate_Impl\"\n TestSegmentCount=2\n TotalTestCases=2\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer: (null)\n\n==== After first snprintf (before UT_BSP_DoText call #1) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_BinSemCreate_Impl\"\n TestSegmentCount=2\n TotalTestCases=2\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer ptr=0x7ffc7606bb80\n ReportBuffer value=\"                       ABORT::0     WARN::0     FLOW::0     DEBUG::0     N/A::0   \"\n\n==== After UT_BSP_DoText call #1 ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_BinSemCreate_Impl\"\n TestSegmentCount=2\n TotalTestCases=2\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer ptr=0x7ffc7606bb80\n ReportBuffer value=\"                       ABORT::0     WARN::0     FLOW::0     DEBUG::0     N/A::0   \"\n\n==== After second snprintf (before UT_BSP_DoText call #2) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_BinSemCreate_Impl\"\n TestSegmentCount=2\n TotalTestCases=2\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer ptr=0x7ffc7606bb80\n ReportBuffer value=\"02 OS_BinSemCreate_Impl TOTAL::2     PASS::2     FAIL::0     MIR::0     TSF::0     TTF::0   \"\n\n==== After UT_BSP_DoText call #2 (exit) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_BinSemCreate_Impl\"\n TestSegmentCount=2\n TotalTestCases=2\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer ptr=0x7ffc7606bb80\n ReportBuffer value=\"02 OS_BinSemCreate_Impl TOTAL::2     PASS::2     FAIL::0     MIR::0     TSF::0     TTF::0   \"\n\n==== Entry (before first snprintf) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_BinSemDelete_Impl\"\n TestSegmentCount=3\n TotalTestCases=1\n CaseCount[0]=0\n CaseCount[1]=0\n CaseCount[2]=0\n CaseCount[3]=0\n CaseCount[4]=0\n ReportBuffer: (null)\n\n==== After first snprintf (before UT_BSP_DoText call #1) ===\n SegmentName ptr=0x7ffc7606bc80\n SegmentName value=\"OS_BinSemDelete_Impl\"\n TestSegmentCount=3\n TotalTestCas\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for UtAssert_DoTestSegmentReport itself. Rule 8.13 concerns the types of pointer declarations/definitions (i.e. a pointer parameter or object should be const-qualified when it can be). In this function ReportBuffer is a modifiable local array that is written by snprintf, so it cannot be const-qualified. Passing ReportBuffer (char *) to UT_BSP_DoText is therefore not a violation in this caller. If UT_BSP_DoText is declared as taking a non-const pointer but in fact does not modify the pointed data, then the violation would be in the declaration/definition of UT_BSP_DoText (its parameter should be declared const char *). That is a separate issue and not a fault of the UtAssert_DoTestSegmentReport code shown. The execution log even suggests UT_BSP_DoText does not modify the buffer, which supports that the appropriate fix (if desired) is to change UT_BSP_DoText's prototype to accept const char *, not to change the caller."
}