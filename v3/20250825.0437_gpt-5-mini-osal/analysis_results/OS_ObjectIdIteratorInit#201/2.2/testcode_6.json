{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initializer \"= 0\" on local_id is dead: local_id is always assigned inside the loop when max_id > 0 (the only case where it can be used), and when max_id == 0 the loop never runs and local_id is never used. Therefore the executed initialization at declaration could be removed without affecting program behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2012.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    /* Preserve original assignments */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n\n    /* Compute values once so we can both assign and log them without changing logic */\n    int32 max_for_type = OS_GetMaxForObjectType(objtype);\n    iter->limit = max_for_type;\n    int base_index = OS_GetBaseForObjectType(objtype);\n    iter->base  = &OS_common_table[base_index];\n\n    /* Ensure log directory exists; ignore error if it already does */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    /* Probe logging: append control-flow and state information to the requested file */\n    FILE *logf = fopen(\"/tmp/logs/2012.txt\", \"a\");\n    if (logf != NULL)\n    {\n        /* Log key inputs and computed state. Avoid printing function pointer directly; instead log NULL check. */\n        fprintf(logf, \"OS_ObjectIdIteratorInit called: objtype=%d, iter_ptr=%p\\n\", (int)objtype, (void *)iter);\n        fprintf(logf, \"  matchfunc_is_null=%d, matcharg=%p\\n\", (matchfunc == NULL) ? 1 : 0, matcharg);\n        fprintf(logf, \"  computed max_for_type=%d, base_index=%d\\n\", (int)max_for_type, (int)base_index);\n        fprintf(logf, \"  iter->limit=%d, iter->base=%p\\n\", (int)iter->limit, (void *)iter->base);\n\n        /* Helpful diagnostic to reproduce the violation scenario: indicate whether limit==0 (loop wouldn't run) */\n        if (iter->limit == 0)\n        {\n            fprintf(logf, \"  NOTE: iter->limit == 0 -> any per-iteration assignment would not execute (loop won't run)\\n\");\n        }\n        else\n        {\n            fprintf(logf, \"  NOTE: iter->limit > 0 -> per-iteration assignments would execute when iterating\\n\");\n        }\n\n        fflush(logf);\n        fclose(logf);\n    }\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n"
}