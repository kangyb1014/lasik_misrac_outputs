{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization at declaration \"OS_common_record_t *obj = NULL;\" is dead (has no effect). In OS_ObjectIdFindNextFree the variable 'obj' is always assigned inside the for loop before any use when a candidate is needed, and in the path where no assignment occurs the function returns earlier (max_id == 0). Therefore removing the '= NULL' initialization would not change program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2012.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logger: append human-readable entries to the specified log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2012.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_C_SOURCE) || defined(_XOPEN_SOURCE)\n    localtime_r(&t, &tm_buf);\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n#else\n    char *timestr = ctime(&t);\n#endif\n\n    fprintf(f, \"[%s] \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    /* Capture the values that determine iteration bounds and base index so that\n       other agents can reproduce scenarios where certain variables (for example\n       local pointers initialized to NULL elsewhere) are or are not used. */\n\n    unsigned base_index = (unsigned)OS_GetBaseForObjectType(objtype);\n    uint32_t max_for_type = (uint32_t)OS_GetMaxForObjectType(objtype);\n\n    /* Preserve original assignments */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = max_for_type;\n    iter->base  = &OS_common_table[base_index];\n\n    /* Log entry state */\n    probe_log(\"OS_ObjectIdIteratorInit enter: matchfunc=%p matcharg=%p objtype=%d iter=%p base_index=%u limit=%u base=%p\",\n              (void *)matchfunc, matcharg, (int)objtype, (void *)iter, base_index, (unsigned)max_for_type, (void *)iter->base);\n\n    /* Call the original transactional init and capture its return value to log it before returning. */\n    int32 ret = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    probe_log(\"OS_ObjectIdIteratorInit exit: ret=%ld token=%lu\",\n              (long)ret, (unsigned long)iter->token);\n\n    return ret;\n}"
}