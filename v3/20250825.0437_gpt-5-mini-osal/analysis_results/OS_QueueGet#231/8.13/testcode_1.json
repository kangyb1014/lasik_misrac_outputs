{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'queue' is declared as OS_queue_internal_record_t * but is only used for read-only access (e.g. reading queue->max_size). According to MISRA C 2023 Rule 8.13 it should be const-qualified (const OS_queue_internal_record_t *queue). The macro OS_OBJECT_TABLE_GET yields a non-const pointer to an element of OS_queue_table, but assigning that to a pointer-to-const is permitted and would satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGet code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/2313.txt */\nstatic void OS_QueueGet_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2313.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    OS_QueueGet_Log(\"ENTER OS_QueueGet: queue_id=%lu size=%zu timeout=%ld\",\n                    (unsigned long)queue_id, size, (long)timeout);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_QueueGet_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        OS_QueueGet_Log(\"OS_OBJECT_TABLE_GET -> queue ptr=%p\", (void *)queue);\n\n        /* Log queue->max_size when available to capture the reported violation scenario */\n        /* Protect logging in case queue is unexpectedly NULL */\n        if (queue != NULL)\n        {\n            OS_QueueGet_Log(\"queue->max_size=%zu, caller size=%zu\", queue->max_size, size);\n        }\n        else\n        {\n            OS_QueueGet_Log(\"Warning: queue pointer is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n            OS_QueueGet_Log(\"Buffer too small: caller size=%zu < queue->max_size=%zu -> return %ld\",\n                            size, queue->max_size, (long)return_code);\n        }\n        else\n        {\n            OS_QueueGet_Log(\"Calling OS_QueueGet_Impl with token ptr=%p data=%p size=%zu\",\n                            (void *)&token, data, size);\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n            OS_QueueGet_Log(\"OS_QueueGet_Impl returned %ld, size_copied=%zu\",\n                            (long)return_code, (size_t)(*size_copied));\n        }\n    }\n\n    OS_QueueGet_Log(\"EXIT OS_QueueGet: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}