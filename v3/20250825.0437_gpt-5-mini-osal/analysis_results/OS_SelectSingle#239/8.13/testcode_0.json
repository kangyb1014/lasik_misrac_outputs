{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as OS_impl_file_internal_record_t *impl but is only used for read-only access (impl->selectable, impl->fd) and never modifies the pointee. It should be declared as const OS_impl_file_internal_record_t *impl to express that the pointed-to object is not modified. Therefore this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectSingle as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle:\n```c\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectSingle code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append logs to /tmp/logs/2393.txt. This preserves original logic\n * and only records inputs, outputs and the token raw bytes to help reproduce\n * the scenario reported by other agents. */\nstatic void OS_SelectSingle_Log(const char *stage, osal_id_t objid, uint32 *StateFlags, int32 msecs, int32 return_code, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/2393.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Stage and basic parameters */\n    fprintf(f, \"Stage: %s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  objid: %lld\\n\", (long long) objid);\n    fprintf(f, \"  msecs: %d\\n\", (int) msecs);\n    fprintf(f, \"  StateFlags ptr: %p\\n\", (void *) StateFlags);\n    if (StateFlags != NULL)\n    {\n        fprintf(f, \"  *StateFlags: 0x%08x\\n\", (unsigned) *StateFlags);\n    }\n    fprintf(f, \"  return_code (so far): %d\\n\", (int) return_code);\n\n    /* Dump the raw bytes of the token so callers can inspect internal fields\n     * without assuming any structure layout. */\n    if (token != NULL)\n    {\n        const unsigned char *p = (const unsigned char *) token;\n        size_t sz = sizeof(*token);\n        fprintf(f, \"  token @%p size=%zu bytes:\\n    \", (const void *) token, sz);\n        for (size_t i = 0; i < sz; ++i)\n        {\n            fprintf(f, \"%02x \", (unsigned) p[i]);\n            if ((i & 0x1f) == 0x1f && i + 1 < sz)\n            {\n                fprintf(f, \"\\n    \");\n            }\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"---\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    /* Log initial state */\n    OS_SelectSingle_Log(\"entry\", objid, StateFlags, msecs, -1, &token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n\n    /* Log result of ObjectIdGetById and token state after acquisition */\n    OS_SelectSingle_Log(\"after_ObjectIdGetById\", objid, StateFlags, msecs, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling the platform-specific implementation */\n        OS_SelectSingle_Log(\"before_Impl\", objid, StateFlags, msecs, return_code, &token);\n\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        /* Log after implementation returns (this is where the reported read-only\n         * use of an internal 'impl' pointer would have occurred). */\n        OS_SelectSingle_Log(\"after_Impl\", objid, StateFlags, msecs, return_code, &token);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_SelectSingle_Log(\"after_Release\", objid, StateFlags, msecs, return_code, &token);\n    }\n\n    return return_code;\n}\n"
}