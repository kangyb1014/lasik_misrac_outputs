{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable impl is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only used for read-only access (reading impl->selectable and impl->fd); therefore it should be a pointer to const-qualified type. The fragment impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token); assigns a non-const pointer where a const-qualified pointer could be used in this function, violating MISRA C 2023 Rule 8.13. (Change to const OS_impl_file_internal_record_t *impl to comply.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectSingle as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle:\n```c\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectSingle code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probe logging helper for OS_SelectSingle. This writes a compact record\n * to /tmp/logs/2393.txt so other agents can reproduce/control-flow and\n * state information for the reported Rule 8.13 scenario.\n *\n * Note: types like osal_id_t, uint32, int32 and OS_object_token_t are\n * defined in the surrounding code base; this helper just uses them.\n */\nstatic void OS_SelectSingle_Log(const char *stage,\n                                osal_id_t objid,\n                                uint32 *StateFlags,\n                                int32 msecs,\n                                OS_object_token_t *token,\n                                int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2393.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging; do not affect control flow */\n    }\n\n    /* Print stage, id, pointer values and visible state. Guard deref of StateFlags. */\n    fprintf(f, \"OS_SelectSingle: stage=%s objid=%lu StateFlags_ptr=%p\",\n            stage, (unsigned long) objid, (void *) StateFlags);\n\n    if (StateFlags != NULL)\n    {\n        /* Print the current flags value (read-only) for visibility */\n        fprintf(f, \" StateFlags_val=%u\", (unsigned int) *StateFlags);\n    }\n\n    fprintf(f, \" msecs=%ld return_code=%d token_ptr=%p\\n\",\n            (long) msecs, (int) return_code, (void *) token);\n\n    fclose(f);\n}\n\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    /* Log entry with initial visible state */\n    OS_SelectSingle_Log(\"entry\", objid, StateFlags, msecs, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n\n    /* Log outcome of ObjectIdGetById */\n    OS_SelectSingle_Log(\"after_GetById\", objid, StateFlags, msecs, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before invoking the implementation so probes can inspect read-only use */\n        OS_SelectSingle_Log(\"before_Impl\", objid, StateFlags, msecs, &token, return_code);\n\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        /* Log result from the implementation */\n        OS_SelectSingle_Log(\"after_Impl\", objid, StateFlags, msecs, &token, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release to capture final control path */\n        OS_SelectSingle_Log(\"after_Release\", objid, StateFlags, msecs, &token, return_code);\n    }\n\n    return return_code;\n}\n"
}