{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_DEBUG is defined to expand to nothing, so calls like OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno)); in OS_GetLocalTime_Impl become an empty statement that is executed but has no effect. Removing those calls (or the empty statement) would not change program behaviour, so these logging calls constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetLocalTime_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/752.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetLocalTime_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetLocalTime_Impl:\n```c\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    if (Status == 0)\n    {\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n        ReturnCode   = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n        ReturnCode = OS_ERROR;\n    }\n\n    return ReturnCode;\n}\n```\n</target_code>\nPlease provide the modified OS_GetLocalTime_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n\n/*\n * Probe helper: append runtime information to /tmp/logs/752.txt so other\n * agents can observe which control path was taken and the relevant state.\n * This preserves the original logic of OS_GetLocalTime_Impl and does not\n * replace the existing (possibly-empty) OS_DEBUG calls.\n */\nstatic void os_probe_log(const char *event, int status, const struct timespec *ts)\n{\n    FILE *f = fopen(\"/tmp/logs/752.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"[%ld] %s: status=%d, errno=%d\\n\", (long)now, event, status, errno);\n\n    if (ts != NULL)\n    {\n        fprintf(f, \"  timespec: tv_sec=%ld, tv_nsec=%ld\\n\", (long)ts->tv_sec, (long)ts->tv_nsec);\n    }\n\n    /* Also capture the human-readable errno string to make logs self-contained */\n    fprintf(f, \"  strerror: %s\\n\", strerror(errno));\n\n    fclose(f);\n}\n\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    if (Status == 0)\n    {\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n        ReturnCode   = OS_SUCCESS;\n\n        /* Active probe logging for the successful path */\n        os_probe_log(\"OS_GetLocalTime_Impl: success\", Status, &TimeSp);\n    }\n    else\n    {\n        /* Original debug call retained (may expand to nothing) */\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n\n        /* Explicit probe so the error path and errno are captured regardless */\n        os_probe_log(\"OS_GetLocalTime_Impl: clock_gettime failed\", Status, NULL);\n\n        ReturnCode = OS_ERROR;\n    }\n\n    return ReturnCode;\n}\n"
}