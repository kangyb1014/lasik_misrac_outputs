{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG in the uninitialized branch. If OS_DEBUG is implemented as (or calls) OS_printf (e.g. OS_DEBUG is a macro that maps to OS_printf or a debug helper that calls OS_printf), this produces indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating the prohibition on functions calling themselves (Rule 17.2). The same risk exists if OS_ConsoleWrite (used later) or any other called function ultimately calls OS_printf.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetLocalTime_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/756.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetLocalTime_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetLocalTime_Impl:\n```c\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    if (Status == 0)\n    {\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n        ReturnCode   = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n        ReturnCode = OS_ERROR;\n    }\n\n    return ReturnCode;\n}\n```\n</target_code>\nPlease provide the modified OS_GetLocalTime_Impl code.\n",
  "test_code": "#include <time.h>\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/756.txt.\n   Uses low-level syscalls (mkdir/open/write/close) to avoid calling\n   any project logging helpers that might themselves call OS_DEBUG/OS_printf.\n*/\nstatic void probe_log(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    int n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    /* Ensure directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    int fd = open(\"/tmp/logs/756.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0)\n    {\n        ssize_t to_write = (n > (int)sizeof(buf)) ? (ssize_t)sizeof(buf) : (ssize_t)n;\n        /* Write the buffer; ignore write errors for the probe. */\n        (void)write(fd, buf, to_write);\n        (void)close(fd);\n    }\n}\n\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    /* Log entry and pointer state */\n    probe_log(\"ENTER: OS_GetLocalTime_Impl time_struct=%p\\n\", (void *)time_struct);\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    probe_log(\"clock_gettime returned Status=%d (errno=%d)\\n\", Status, errno);\n\n    if (Status == 0)\n    {\n        /* Log the raw timespec values observed */\n        probe_log(\"clock_gettime SUCCESS: tv_sec=%lld tv_nsec=%ld\\n\", (long long)TimeSp.tv_sec, (long)TimeSp.tv_nsec);\n\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n\n        /* Log that the assemble and assignment completed */\n        probe_log(\"Assigned time_struct=%p after OS_TimeAssembleFromNanoseconds\\n\", (void *)time_struct);\n\n        ReturnCode   = OS_SUCCESS;\n\n        probe_log(\"EXIT: OS_GetLocalTime_Impl returning OS_SUCCESS (%d)\\n\", (int)ReturnCode);\n    }\n    else\n    {\n        /* Log failure details before calling OS_DEBUG so that an investigator\n           can see that the code path reached OS_DEBUG. This is important for\n           reproducing the indirect-recursion scenario where OS_DEBUG or the\n           functions it calls might call back into OS_printf/OS_DEBUG. */\n        probe_log(\"clock_gettime FAILED: errno=%d (%s). About to call OS_DEBUG.\\n\", errno, strerror(errno));\n\n        /* Preserve original behavior: keep the OS_DEBUG call here. */\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n\n        ReturnCode = OS_ERROR;\n\n        probe_log(\"EXIT: OS_GetLocalTime_Impl returning OS_ERROR (%d)\\n\", (int)ReturnCode);\n    }\n\n    return ReturnCode;\n}\n"
}