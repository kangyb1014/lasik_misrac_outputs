{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_STRING expands to OS_CHECK_POINTER(str); LENGTHCHECK(str,maxlen,errcode). If LENGTHCHECK is implemented using an unbounded string function such as strlen(fsvolname) (or any other <string.h> call that scans until a NUL) then calling OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), ...) will invoke strlen on the caller-supplied fsvolname. If fsvolname is not NUL-terminated within the bounds of its originating object, strlen will read past that object\u2019s bounds and thus violate MISRA C 2023 Rule 21.17. Note: sizeof(filesys->volume_name) is a compile-time constant (the array size) and is not itself a problem, but the safety depends entirely on the implementation of LENGTHCHECK (it must use a bounded operation such as strnlen or a loop limited by maxlen to be compliant).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1769.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe logging helper - writes an entry to /tmp/logs/1769.txt */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1769.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fputc('\\n', f);\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and pointer/size parameters (do not attempt any unbounded reads) */\n    os_log_probe(\"ENTRY: OS_FileSys_Initialize address=%p fsdevname=%p fsvolname=%p blocksize=%zu numblocks=%llu should_format=%d\",\n                 (void *)address, (void *)fsdevname, (void *)fsvolname, blocksize, (unsigned long long)numblocks,\n                 (int)should_format);\n\n    /* Log the compile-time sizes used by the checks (sizeof expressions are safe) */\n    os_log_probe(\"SIZE_INFO: sizeof(filesys->device_name)=%zu sizeof(filesys->volume_name)=%zu\",\n                 sizeof(filesys->device_name), sizeof(filesys->volume_name));\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    os_log_probe(\"BEFORE_OS_CHECK_STRING: fsdevname ptr=%p maxlen=%zu\", (void *)fsdevname,\n                 sizeof(filesys->device_name));\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    os_log_probe(\"AFTER_OS_CHECK_STRING: fsdevname ptr=%p\", (void *)fsdevname);\n\n    os_log_probe(\"BEFORE_OS_CHECK_STRING: fsvolname ptr=%p maxlen=%zu\", (void *)fsvolname,\n                 sizeof(filesys->volume_name));\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n    os_log_probe(\"AFTER_OS_CHECK_STRING: fsvolname ptr=%p\", (void *)fsvolname);\n\n    /* check names are not empty strings */\n    /* Only inspect the first character (safe) to determine emptiness. */\n    os_log_probe(\"CHECK_EMPTY: fsdevname[0]=%d fsvolname[0]=%d\", (int)(unsigned char)fsdevname[0],\n                 (int)(unsigned char)fsvolname[0]);\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        os_log_probe(\"RETURN: OS_FS_ERR_PATH_INVALID (empty name)\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    os_log_probe(\"AFTER_OS_ObjectIdAllocateNew: return_code=%d\", return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        os_log_probe(\"FILESYS_RECORD: filesys_ptr=%p token=%p\", (void *)filesys, (void *)&token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n        os_log_probe(\"AFTER_OS_OBJECT_INIT: device_name saved\");\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n        /* Ensure NUL termination per original logic */\n        filesys->volume_name[sizeof(filesys->volume_name) - 1] = '\\0';\n\n        os_log_probe(\"AFTER_strncpy: filesys->volume_name_ptr=%p first_char=%d\",\n                     (void *)filesys->volume_name, (int)(unsigned char)filesys->volume_name[0]);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n            os_log_probe(\"FILESYS_TYPE_CHANGED: fstype set to VOLATILE_DISK\");\n        }\n        else\n        {\n            os_log_probe(\"FILESYS_TYPE_UNCHANGED: fstype=%d address=%p\",\n                         (int)filesys->fstype, (void *)filesys->address);\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        os_log_probe(\"AFTER_OS_FileSysStartVolume_Impl: return_code=%d\", return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                os_log_probe(\"BEFORE_OS_FileSysFormatVolume_Impl: should_format=1\");\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n                os_log_probe(\"AFTER_OS_FileSysFormatVolume_Impl: return_code=%d\", return_code);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n                os_log_probe(\"FILESYS_READY: flags=0x%08x\", (unsigned int)filesys->flags);\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                os_log_probe(\"FORMAT_FAILED: stopping volume\");\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n        os_log_probe(\"AFTER_OS_ObjectIdFinalizeNew: return_code=%d\", return_code);\n    }\n\n    os_log_probe(\"EXIT: OS_FileSys_Initialize return_code=%d\", return_code);\n    return return_code;\n}\n"
}