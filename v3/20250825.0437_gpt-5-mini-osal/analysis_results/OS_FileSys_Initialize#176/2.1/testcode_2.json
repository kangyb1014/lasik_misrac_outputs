{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nGiven the project-scope implementation shown, OS_FileSysFormatVolume_Impl always returns OS_SUCCESS. That makes the inner else branch (the call to OS_FileSysStopVolume_Impl(&token)) unreachable: the only way to reach that branch is for OS_FileSysFormatVolume_Impl to return a non-success code, which cannot occur with the provided implementation. Therefore Rule 2.1 is violated (unreachable code present).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1761.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Logging: entry and input state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_FileSys_Initialize(address=%p, fsdevname=\\\"%s\\\", fsvolname=\\\"%s\\\", blocksize=%zu, numblocks=%lu, should_format=%d)\\n\",\n                    (void *)address,\n                    fsdevname != NULL ? fsdevname : \"(null)\",\n                    fsvolname != NULL ? fsvolname : \"(null)\",\n                    blocksize,\n                    (unsigned long)numblocks,\n                    (int)should_format);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EARLY_RETURN: empty device or volume name -> return %ld\\n\", (long)OS_FS_ERR_PATH_INVALID);\n            fclose(log);\n        }\n\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n\n    /* Log allocation result */\n    {\n        FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER_AllocateNew: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /* Log filesys state after initializing the record */\n        {\n            FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"RECORD_INIT: filesys=%p device_name=\\\"%s\\\" volume_name=\\\"%s\\\" blocksize=%zu numblocks=%lu address=%p fstype=%d flags=0x%08lx\\n\",\n                        (void *)filesys,\n                        filesys->device_name,\n                        filesys->volume_name,\n                        filesys->blocksize,\n                        (unsigned long)filesys->numblocks,\n                        (void *)filesys->address,\n                        (int)filesys->fstype,\n                        (unsigned long)filesys->flags);\n                fclose(log);\n            }\n        }\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n\n            FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"FSTYPE_DETECTED: set fstype to VOLATILE_DISK for filesys=%p\\n\", (void *)filesys);\n                fclose(log);\n            }\n        }\n\n        /* Start the volume and log */\n        {\n            FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"CALL: OS_FileSysStartVolume_Impl(token=%lu)\\n\", (unsigned long)token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        /* Log start result */\n        {\n            FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"AFTER_StartVolume: return_code=%ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"CALL: OS_FileSysFormatVolume_Impl(token=%lu)\\n\", (unsigned long)token);\n                    fclose(log);\n                }\n\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n\n                FILE *log2 = fopen(\"/tmp/logs/1761.txt\", \"a\");\n                if (log2 != NULL)\n                {\n                    fprintf(log2, \"AFTER_FormatVolume: return_code=%ld\\n\", (long)return_code);\n                    fclose(log2);\n                }\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n\n                FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"SUCCESS: volume ready for filesys=%p flags=0x%08lx\\n\", (void *)filesys, (unsigned long)filesys->flags);\n                    fclose(log);\n                }\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"FORMAT_FAILED: calling OS_FileSysStopVolume_Impl(token=%lu) to rollback\\n\", (unsigned long)token);\n                    fclose(log);\n                }\n\n                (void)OS_FileSysStopVolume_Impl(&token);\n\n                FILE *log2 = fopen(\"/tmp/logs/1761.txt\", \"a\");\n                if (log2 != NULL)\n                {\n                    fprintf(log2, \"AFTER_StopVolume (called due to format failure) for token=%lu\\n\", (unsigned long)token);\n                    fclose(log2);\n                }\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"BEFORE_FinalizeNew: return_code=%ld token=%lu\\n\", (long)return_code, (unsigned long)token);\n            fclose(log);\n        }\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    /* Final log before returning */\n    {\n        FILE *log = fopen(\"/tmp/logs/1761.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_FileSys_Initialize return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}