{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via event callback: OS_ObjectIdFinalizeNew calls OS_NotifyEvent, which invokes the application-provided EventHandler callback (OS_SharedGlobalVars.EventHandler). If that callback calls back into OSAL object-creation or finalization APIs (for example OS_ObjectIdAllocateNew which may eventually call OS_ObjectIdFinalizeNew), this produces an indirect recursive call chain: OS_ObjectIdFinalizeNew -> OS_NotifyEvent -> EventHandler -> ... -> OS_ObjectIdFinalizeNew. Thus the code can lead to an indirect self-call and violates Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1766.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append a structured log line to /tmp/logs/1766.txt\n * Avoid changing program logic; only write supplementary diagnostic info. */\nstatic void osal_log_event(const char *event, const char *fsdevname, const char *fsvolname,\n                           size_t blocksize, osal_blockcount_t numblocks, const void *address,\n                           const void *tokenptr, size_t tokensize, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1766.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        pid_t pid = getpid();\n\n        fprintf(f, \"%ld pid=%d event=%s rc=%d addr=%p fsdev=%s fsvol=%s block=%zu numblocks=%llu token=\",\n                (long)t, (int)pid, event, (int)return_code, address,\n                fsdevname ? fsdevname : \"(null)\", fsvolname ? fsvolname : \"(null)\",\n                blocksize, (unsigned long long)numblocks);\n\n        if (tokenptr != NULL && tokensize > 0)\n        {\n            const unsigned char *b = (const unsigned char *)tokenptr;\n            size_t i;\n            for (i = 0; i < tokensize; ++i)\n            {\n                fprintf(f, \"%02x\", (unsigned int)b[i]);\n            }\n        }\n        else\n        {\n            fprintf(f, \"(null)\");\n        }\n\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry with initial parameters */\n    osal_log_event(\"enter\", fsdevname, fsvolname, blocksize, numblocks, address, &token, sizeof(token), 0);\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        osal_log_event(\"invalid_name\", fsdevname, fsvolname, blocksize, numblocks, address, &token, sizeof(token), OS_FS_ERR_PATH_INVALID);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n\n    /* Log result of allocate new */\n    osal_log_event(\"after_allocate\", fsdevname, fsvolname, blocksize, numblocks, address, &token, sizeof(token), return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /* Log state after initialization of record */\n        osal_log_event(\"post_init_record\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n            /* Log change of filesystem type */\n            osal_log_event(\"set_fstype_volatile\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        /* Log result of StartVolume_Impl */\n        osal_log_event(\"after_start_volume_impl\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                /* Log that formatting is about to occur */\n                osal_log_event(\"before_format\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n\n                /* Log result of format */\n                osal_log_event(\"after_format\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n                osal_log_event(\"set_ready_flag\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n                osal_log_event(\"stop_volume_on_format_fail\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        /* Log just before calling finalize - important to capture potential event callbacks triggered by finalization. */\n        osal_log_event(\"before_finalize\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n\n        /* Log after finalize completes (or if it returned an error) */\n        osal_log_event(\"after_finalize\", fsdevname, fsvolname, filesys->blocksize, filesys->numblocks, filesys->address, &token, sizeof(token), return_code);\n    }\n\n    /* Log function exit with final return code */\n    osal_log_event(\"exit\", fsdevname, fsvolname, blocksize, numblocks, address, &token, sizeof(token), return_code);\n\n    return return_code;\n}\n"
}