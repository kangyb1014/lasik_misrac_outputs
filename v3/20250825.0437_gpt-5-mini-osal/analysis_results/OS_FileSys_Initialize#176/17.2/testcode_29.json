{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OSAL is not initialized. If the OS_DEBUG facility is implemented by calling OS_printf (directly or via a chain that eventually calls OS_printf), this creates an indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1766.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/*\n * Probe logging helper - appends structured logs to /tmp/logs/1766.txt\n * This intentionally uses only C standard file I/O to avoid depending on\n * OSAL facilities (so it cannot participate in the OS_printf -> OS_DEBUG -> OS_printf\n * recursion scenario being diagnosed).\n */\nstatic void OSFS_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1766.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and input parameters */\n    OSFS_Log(\"OS_FileSys_Initialize ENTRY: address=%p, fsdevname=%s, fsvolname=%s, blocksize=%zu, numblocks=%llu, should_format=%d\",\n             (void *)address,\n             (fsdevname != NULL) ? fsdevname : \"(null)\",\n             (fsvolname != NULL) ? fsvolname : \"(null)\",\n             blocksize,\n             (unsigned long long)numblocks,\n             (int)should_format);\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        OSFS_Log(\"OS_FileSys_Initialize EXIT (invalid name): fsdevname[0]==0 || fsvolname[0]==0 -> return %ld\", (long)OS_FS_ERR_PATH_INVALID);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    OSFS_Log(\"After OS_ObjectIdAllocateNew: return_code=%ld, token=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        OSFS_Log(\"OS_OBJECT_TABLE_GET: filesys=%p\", (void *)filesys);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n        OSFS_Log(\"After OS_OBJECT_INIT: device_name=%s\", filesys->device_name);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n        filesys->volume_name[sizeof(filesys->volume_name) - 1] = '\\0';\n\n        OSFS_Log(\"Populated record: blocksize=%zu, numblocks=%llu, address=%p, volume_name=%s\",\n                 filesys->blocksize,\n                 (unsigned long long)filesys->numblocks,\n                 (void *)filesys->address,\n                 filesys->volume_name);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n            OSFS_Log(\"Inferred fstype=OS_FILESYS_TYPE_VOLATILE_DISK\");\n        }\n        else\n        {\n            OSFS_Log(\"fstype left as=%d\", (int)filesys->fstype);\n        }\n\n        OSFS_Log(\"Calling OS_FileSysStartVolume_Impl with token=%p\", (void *)&token);\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        OSFS_Log(\"Returned from OS_FileSysStartVolume_Impl: return_code=%ld\", (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                OSFS_Log(\"should_format is true, calling OS_FileSysFormatVolume_Impl with token=%p\", (void *)&token);\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n                OSFS_Log(\"Returned from OS_FileSysFormatVolume_Impl: return_code=%ld\", (long)return_code);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n                OSFS_Log(\"Volume marked ready: flags=0x%08x\", (unsigned int)filesys->flags);\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                OSFS_Log(\"Formatting failed, calling OS_FileSysStopVolume_Impl to clean up (token=%p)\", (void *)&token);\n                (void)OS_FileSysStopVolume_Impl(&token);\n                OSFS_Log(\"Returned from OS_FileSysStopVolume_Impl after formatting failure\");\n            }\n        }\n        else\n        {\n            OSFS_Log(\"OS_FileSysStartVolume_Impl failed with return_code=%ld\", (long)return_code);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        OSFS_Log(\"Calling OS_ObjectIdFinalizeNew with return_code=%ld, token=%p\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n        OSFS_Log(\"Returned from OS_ObjectIdFinalizeNew: return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OSFS_Log(\"OS_ObjectIdAllocateNew failed: return_code=%ld\", (long)return_code);\n    }\n\n    OSFS_Log(\"OS_FileSys_Initialize EXIT: final return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}