{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER, OS_printf calls OS_DEBUG. If OS_DEBUG is implemented using OS_printf (a common pattern), this creates an indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, which violates MISRA C 2023 Rule 17.2 (functions shall not call themselves, directly or indirectly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2296.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueCreate:\n```c\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Probe helper: append a log entry with timestamp and context to /tmp/logs/2296.txt */\nstatic void OS_QueueCreate_LogProbe(const char *stage,\n                                    const char *queue_name,\n                                    osal_blockcount_t queue_depth,\n                                    size_t data_size,\n                                    uint32 flags,\n                                    int32 result_code,\n                                    const void *token_ptr)\n{\n    FILE *f = NULL;\n    /* Try to ensure the directory exists; ignore errors if it does not. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2296.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    {\n        time_t t = time(NULL);\n        char buf[64];\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n        }\n        else\n        {\n            buf[0] = '\\0';\n        }\n\n        fprintf(f, \"%s - OS_QueueCreate - %s\\n\", buf, stage);\n    }\n\n    /* Log parameters and state captured */\n    fprintf(f, \"  queue_name=%s\\n\", (queue_name != NULL) ? queue_name : \"(null)\");\n    fprintf(f, \"  queue_depth=%u\\n\", (unsigned)queue_depth);\n    fprintf(f, \"  data_size=%zu\\n\", data_size);\n    fprintf(f, \"  flags=0x%08x\\n\", (unsigned)flags);\n    fprintf(f, \"  result_code=%d\\n\", (int)result_code);\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and input parameters */\n    OS_QueueCreate_LogProbe(\"entry\", queue_name, queue_depth, data_size, flags, 0, NULL);\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n\n    /* Log after allocation attempt */\n    OS_QueueCreate_LogProbe(\"after ObjectIdAllocateNew\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Log immediately before calling the OS-specific implementation. This is a key point in the control flow. */\n        OS_QueueCreate_LogProbe(\"before OS_QueueCreate_Impl\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Log immediately after OS-specific implementation returns. */\n        OS_QueueCreate_LogProbe(\"after OS_QueueCreate_Impl\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n\n        /* Final log after finalize (this may be where higher-level printf/debugging occurs). */\n        OS_QueueCreate_LogProbe(\"after ObjectIdFinalizeNew\", queue_name, queue_depth, data_size, flags, return_code, &token);\n    }\n    else\n    {\n        /* Log the failure early so callers can see allocation failure path */\n        OS_QueueCreate_LogProbe(\"allocation failed\", queue_name, queue_depth, data_size, flags, return_code, &token);\n    }\n\n    /* Log exit and return value */\n    OS_QueueCreate_LogProbe(\"exit\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n    return return_code;\n}\n"
}