{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_QueueCreate_LogProbe(const char *stage,\n                                    const char *queue_name,\n                                    osal_blockcount_t queue_depth,\n                                    size_t data_size,\n                                    uint32 flags,\n                                    int32 result_code,\n                                    const void *token_ptr)\n{\n    FILE *f = NULL;\n    /* Try to ensure the directory exists; ignore errors if it does not. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2296.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    {\n        time_t t = time(NULL);\n        char buf[64];\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n        }\n        else\n        {\n            buf[0] = '\\0';\n        }\n\n        fprintf(f, \"%s - OS_QueueCreate - %s\\n\", buf, stage);\n    }\n\n    /* Log parameters and state captured */\n    fprintf(f, \"  queue_name=%s\\n\", (queue_name != NULL) ? queue_name : \"(null)\");\n    fprintf(f, \"  queue_depth=%u\\n\", (unsigned)queue_depth);\n    fprintf(f, \"  data_size=%zu\\n\", data_size);\n    fprintf(f, \"  flags=0x%08x\\n\", (unsigned)flags);\n    fprintf(f, \"  result_code=%d\\n\", (int)result_code);\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and input parameters */\n    OS_QueueCreate_LogProbe(\"entry\", queue_name, queue_depth, data_size, flags, 0, NULL);\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n\n    /* Log after allocation attempt */\n    OS_QueueCreate_LogProbe(\"after ObjectIdAllocateNew\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Log immediately before calling the OS-specific implementation. This is a key point in the control flow. */\n        OS_QueueCreate_LogProbe(\"before OS_QueueCreate_Impl\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Log immediately after OS-specific implementation returns. */\n        OS_QueueCreate_LogProbe(\"after OS_QueueCreate_Impl\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n\n        /* Final log after finalize (this may be where higher-level printf/debugging occurs). */\n        OS_QueueCreate_LogProbe(\"after ObjectIdFinalizeNew\", queue_name, queue_depth, data_size, flags, return_code, &token);\n    }\n    else\n    {\n        /* Log the failure early so callers can see allocation failure path */\n        OS_QueueCreate_LogProbe(\"allocation failed\", queue_name, queue_depth, data_size, flags, return_code, &token);\n    }\n\n    /* Log exit and return value */\n    OS_QueueCreate_LogProbe(\"exit\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpnz8haaac/src/src/os/shared/src/osapi-queue.c: In function 'OS_QueueCreate_LogProbe':\n/tmp/tmpnz8haaac/src/src/os/shared/src/osapi-queue.c:116:19: error: storage size of 'tm_buf' isn't known\n  116 |         struct tm tm_buf;\n      |                   ^~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/__/__/os/shared/src/osapi-queue.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4097: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_QueueCreate as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <time.h>\n\nstatic void OS_QueueCreate_LogProbe(const char *stage,\n                                    const char *queue_name,\n                                    osal_blockcount_t queue_depth,\n                                    size_t data_size,\n                                    uint32 flags,\n                                    int32 result_code,\n                                    const void *token_ptr)\n{\n    FILE *f = NULL;\n    /* Try to ensure the directory exists; ignore errors if it does not. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2296.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    {\n        time_t t = time(NULL);\n        char buf[64];\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n        }\n        else\n        {\n            buf[0] = '\\0';\n        }\n\n        fprintf(f, \"%s - OS_QueueCreate - %s\\n\", buf, stage);\n    }\n\n    /* Log parameters and state captured */\n    fprintf(f, \"  queue_name=%s\\n\", (queue_name != NULL) ? queue_name : \"(null)\");\n    fprintf(f, \"  queue_depth=%u\\n\", (unsigned)queue_depth);\n    fprintf(f, \"  data_size=%zu\\n\", data_size);\n    fprintf(f, \"  flags=0x%08x\\n\", (unsigned)flags);\n    fprintf(f, \"  result_code=%d\\n\", (int)result_code);\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and input parameters */\n    OS_QueueCreate_LogProbe(\"entry\", queue_name, queue_depth, data_size, flags, 0, NULL);\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n\n    /* Log after allocation attempt */\n    OS_QueueCreate_LogProbe(\"after ObjectIdAllocateNew\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Log immediately before calling the OS-specific implementation. This is a key point in the control flow. */\n        OS_QueueCreate_LogProbe(\"before OS_QueueCreate_Impl\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Log immediately after OS-specific implementation returns. */\n        OS_QueueCreate_LogProbe(\"after OS_QueueCreate_Impl\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n\n        /* Final log after finalize (this may be where higher-level printf/debugging occurs). */\n        OS_QueueCreate_LogProbe(\"after ObjectIdFinalizeNew\", queue_name, queue_depth, data_size, flags, return_code, &token);\n    }\n    else\n    {\n        /* Log the failure early so callers can see allocation failure path */\n        OS_QueueCreate_LogProbe(\"allocation failed\", queue_name, queue_depth, data_size, flags, return_code, &token);\n    }\n\n    /* Log exit and return value */\n    OS_QueueCreate_LogProbe(\"exit\", queue_name, queue_depth, data_size, flags, return_code, &token);\n\n    return return_code;\n}\n",
  "explanation": "The compilation error was due to struct tm not being defined. I added the necessary standard headers: <time.h> for struct tm, localtime_r, strftime and time(), <sys/stat.h> for mkdir, and <stdio.h> for FILE/fopen/fprintf. No logic was changed; only the required includes were added so the timestamp code compiles correctly."
}