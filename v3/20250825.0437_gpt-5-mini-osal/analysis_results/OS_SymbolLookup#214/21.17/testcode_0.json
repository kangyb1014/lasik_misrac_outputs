{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without checking either pointer for NULL or ensuring they reference NUL-terminated buffers. In UT_Stub_RegisterReturnType the ContentTypeStr field is set directly from the TypeName parameter (which may be NULL or point to invalid/freed memory), and UT_Stub_GetReturnValuePtr evaluates strcmp when StubPtr->Data.Buff.Position == ReturnSize. If Position equals ReturnSize and either TypeName or ContentTypeStr is NULL (or points to non-NUL-terminated memory), strcmp will dereference/read beyond the bounds of the object (NULL or invalid memory), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2149.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup:\n```c\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging for OS_SymbolLookup.\n * Writes control flow and state information (pointer values and return codes)\n * to /tmp/logs/2149.txt. Avoids dereferencing SymbolName to prevent any\n * out-of-bounds reads of non-NUL-terminated strings.\n */\nstatic void OS_SymbolLookup_Log(const cpuaddr *SymbolAddress, const char *SymbolName, int stage, int32 code)\n{\n    FILE *f = fopen(\"/tmp/logs/2149.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stages of execution, pointer values and integer codes only. Do not\n         * attempt to print the contents of SymbolName to avoid reading beyond\n         * the bounds of the referenced object.\n         */\n        fprintf(f, \"OS_SymbolLookup: stage=%d, SymbolAddress=%p, SymbolName_ptr=%p, code=%d\\n\",\n                stage,\n                (const void *)SymbolAddress,\n                (const void *)SymbolName,\n                (int)code);\n        fclose(f);\n    }\n}\n\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    /* Log entry (stage 0) with raw pointer values before checks. */\n    OS_SymbolLookup_Log(SymbolAddress, SymbolName, 0, 0);\n\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /* Log after parameter checks (stage 1). */\n    OS_SymbolLookup_Log(SymbolAddress, SymbolName, 1, 0);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /* Log result of low-level lookup (stage 2). */\n    OS_SymbolLookup_Log(SymbolAddress, SymbolName, 2, return_code);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log entering static lookup branch (stage 3). */\n        OS_SymbolLookup_Log(SymbolAddress, SymbolName, 3, return_code);\n\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /* Log result of static lookup (stage 4). */\n        OS_SymbolLookup_Log(SymbolAddress, SymbolName, 4, staticsym_status);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n            /* Log that return_code was overwritten (stage 5). */\n            OS_SymbolLookup_Log(SymbolAddress, SymbolName, 5, return_code);\n        }\n    }\n\n    /* Final log before return (stage 6). */\n    OS_SymbolLookup_Log(SymbolAddress, SymbolName, 6, return_code);\n\n    return return_code;\n}\n"
}