{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(StaticSym->Name, SymbolName) and strcmp(StaticSym->Module, ModuleName) can be invoked with NULL pointers because OS_SymbolLookup_Static does not validate SymbolName or StaticSym->Module. Although OS_SymbolLookup (the shown caller) checks SymbolName and calls OS_SymbolLookup_Static with ModuleName == NULL (which short\u2011circuits the second strcmp), OS_SymbolLookup_Static itself can be called from elsewhere. If SymbolName == NULL or if ModuleName != NULL while StaticSym->Module == NULL, strcmp would be passed a NULL pointer and perform an out\u2011of\u2011bounds access. Thus the fragment can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2149.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup:\n```c\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/*\n * Probe / logging helpers for OS_SymbolLookup\n * Logs are appended to /tmp/logs/2149.txt\n * These helpers are intended to be non-intrusive and preserve the\n * original behavior of OS_SymbolLookup. They avoid passing potentially\n * NULL pointers to string-handling functions.\n */\n\nstatic void ensure_log_dir(void)\n{\n    /* Try to create the directory if it doesn't exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void safe_write_string(FILE *f, const char *s, size_t maxlen)\n{\n    size_t i;\n\n    if (f == NULL)\n    {\n        return;\n    }\n\n    if (s == NULL)\n    {\n        fputs(\"<NULL>\", f);\n        return;\n    }\n\n    for (i = 0; i < maxlen && s[i] != '\\0'; ++i)\n    {\n        fputc((unsigned char)s[i], f);\n    }\n\n    if (i == maxlen && s[i] != '\\0')\n    {\n        fputs(\"...\", f);\n    }\n}\n\nstatic void log_printf(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/2149.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void log_symbol_entry(const char *fn_name, const char *SymbolName)\n{\n    FILE *f;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/2149.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[ENTRY] %s called\\n\", fn_name);\n    fprintf(f, \"         SymbolName ptr=%p\\n\", (const void *)SymbolName);\n    fputs(\"         SymbolName value=\\\"\", f);\n    safe_write_string(f, SymbolName, 128);\n    fputs(\"\\\"\\n\", f);\n\n    fclose(f);\n}\n\nstatic void log_symbol_after_impl(int32_t impl_ret)\n{\n    log_printf(\"[INFO] OS_SymbolLookup_Impl returned %d\", (int)impl_ret);\n}\n\nstatic void log_static_lookup_call(const char *moduleName)\n{\n    FILE *f;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/2149.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[CALL] OS_SymbolLookup_Static invoked with ModuleName ptr=%p\\n\", (const void *)moduleName);\n    fputs(\"       ModuleName value=\\\"\", f);\n    safe_write_string(f, moduleName, 128);\n    fputs(\"\\\"\\n\", f);\n\n    fclose(f);\n}\n\nstatic void log_static_lookup_result(int32_t status)\n{\n    log_printf(\"[INFO] OS_SymbolLookup_Static returned %d\", (int)status);\n}\n\nstatic void log_return(int32_t ret)\n{\n    log_printf(\"[RETURN] OS_SymbolLookup returning %d\", (int)ret);\n}\n\n/*\n * Modified OS_SymbolLookup with logging probes inserted.\n * Original logic is preserved; only non-intrusive logging is added.\n */\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /* Log entry and parameter state (safe, does not dereference NULL) */\n    log_symbol_entry(\"OS_SymbolLookup\", SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /* Log result of low-level implementation */\n    log_symbol_after_impl(return_code);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        /* We always pass ModuleName == NULL from here; log that fact. */\n        log_static_lookup_call(NULL);\n\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /* Log static lookup result */\n        log_static_lookup_result(staticsym_status);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n        }\n    }\n\n    /* Final return log */\n    log_return(return_code);\n\n    return return_code;\n}\n"
}