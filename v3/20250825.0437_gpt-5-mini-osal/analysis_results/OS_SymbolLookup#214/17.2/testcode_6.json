{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS is not initialized. If the OS_DEBUG implementation (or any callees of OS_ConsoleWrite/OS_ConsoleOutput_Impl) ultimately call OS_printf, this creates an indirect recursive call chain (OS_printf -> OS_DEBUG -> OS_printf), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup:\n```c\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper: append formatted messages to /tmp/logs/2146.txt\n * This function is intentionally simple to avoid changing program flow.\n */\nstatic void OS_SymbolLookup_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2146.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /* Log entry and input state after parameter checks */\n    OS_SymbolLookup_ProbeLog(\"ENTER: OS_SymbolLookup - SymbolAddress ptr=%p, SymbolName=\\\"%s\\\"\", (void *)SymbolAddress, (SymbolName != NULL) ? SymbolName : \"(null)\");\n\n    /* attempt to find the symbol in the symbol table */\n    OS_SymbolLookup_ProbeLog(\"Calling OS_SymbolLookup_Impl\");\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n    OS_SymbolLookup_ProbeLog(\"Returned from OS_SymbolLookup_Impl: return_code=%ld\", (long)return_code);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_SymbolLookup_ProbeLog(\"OS_SymbolLookup_Impl did not succeed (code=%ld), calling OS_SymbolLookup_Static\", (long)return_code);\n\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n        OS_SymbolLookup_ProbeLog(\"Returned from OS_SymbolLookup_Static: staticsym_status=%ld\", (long)staticsym_status);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            OS_SymbolLookup_ProbeLog(\"Static lookup succeeded; overwriting return_code (was %ld) with %ld\", (long)return_code, (long)staticsym_status);\n            return_code = staticsym_status;\n        }\n        else\n        {\n            OS_SymbolLookup_ProbeLog(\"Static lookup did not succeed; keeping return_code=%ld\", (long)return_code);\n        }\n    }\n    else\n    {\n        OS_SymbolLookup_ProbeLog(\"OS_SymbolLookup_Impl succeeded; return_code=%ld\", (long)return_code);\n    }\n\n    /* Log final state including the resolved address (if available) */\n    if (SymbolAddress != NULL)\n    {\n        /* Print the address value stored at SymbolAddress; cast to unsigned long long for portability */\n        OS_SymbolLookup_ProbeLog(\"EXIT: OS_SymbolLookup - return_code=%ld, SymbolAddress ptr=%p, SymbolValue=0x%llx\", (long)return_code, (void *)SymbolAddress, (unsigned long long)(*SymbolAddress));\n    }\n    else\n    {\n        OS_SymbolLookup_ProbeLog(\"EXIT: OS_SymbolLookup - return_code=%ld, SymbolAddress ptr=(null)\", (long)return_code);\n    }\n\n    return return_code;\n}\n"
}