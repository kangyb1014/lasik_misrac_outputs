{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away the const qualifier: VirtualPath is declared as const char * but is passed as (void *)VirtualPath to OS_ObjectIdGetBySearch, discarding const qualification. This violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible). If the search routine does not modify the data, its parameter should be const void * (or the cast removed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe function: append human-readable logs to /tmp/logs/1503.txt */\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1503.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Log entry and input state */\n    OS_LogProbe(\"OS_DirectoryOpen ENTRY: dir_id=%p path=%p\\n  path_str='%s'\",\n                (void *)dir_id,\n                (const void *)path,\n                (path != NULL) ? path : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    OS_LogProbe(\"OS_TranslatePath returned %ld; local_path='%s'\",\n                (long)return_code,\n                (local_path[0] != '\\0') ? local_path : \"\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        OS_LogProbe(\"OS_ObjectIdAllocateNew returned %ld; token=%p\",\n                    (long)return_code,\n                    (void *)&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n            OS_LogProbe(\"OS_OBJECT_TABLE_GET returned dir=%p (token=%p)\", (void *)dir, (void *)&token);\n\n            /* Reset the table entry and save the name */\n            OS_LogProbe(\"OS_OBJECT_INIT about to store dir_name from path=%p '%s'\",\n                        (const void *)path,\n                        (path != NULL) ? path : \"(null)\");\n\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            OS_LogProbe(\"Calling OS_DirOpen_Impl with token=%p local_path='%s'\",\n                        (void *)&token,\n                        (local_path[0] != '\\0') ? local_path : \"\");\n\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            OS_LogProbe(\"OS_DirOpen_Impl returned %ld (token=%p)\", (long)return_code, (void *)&token);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n            OS_LogProbe(\"OS_ObjectIdFinalizeNew returned %ld; dir_id=%p\", (long)return_code, (void *)dir_id);\n        }\n        else\n        {\n            OS_LogProbe(\"OS_ObjectIdAllocateNew failed with %ld\", (long)return_code);\n        }\n    }\n    else\n    {\n        OS_LogProbe(\"OS_TranslatePath failed with %ld\", (long)return_code);\n    }\n\n    OS_LogProbe(\"OS_DirectoryOpen EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}