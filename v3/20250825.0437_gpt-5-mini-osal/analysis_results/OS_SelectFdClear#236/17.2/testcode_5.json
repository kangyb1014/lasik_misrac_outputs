{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes UT_ExecuteBasicHandler itself (or another function that eventually calls back to UT_ExecuteBasicHandler) as the DefaultHandler, the function will register that handler and then invoke UT_DefaultStubImpl which (in the stub implementation path) will invoke the registered handler. Execution path: UT_ExecuteBasicHandler -> UT_SetHandlerFunction (registers DefaultHandler) -> UT_DefaultStubImpl/UT_DefaultStubImplWithArgs -> invoke registered handler -> UT_ExecuteBasicHandler, producing indirect recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectFdClear code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2366.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectFdClear as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdClear:\n```c\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectFdClear code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append log lines to /tmp/logs/2366.txt */\nstatic void UT_Log_SelectFdClear(const char *stage, void *set_ptr, unsigned long long objid, unsigned long long local_id, int return_code, unsigned int byte_index, unsigned int before_val, unsigned int mask, unsigned int after_val)\n{\n    FILE *f = fopen(\"/tmp/logs/2366.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect original behavior */\n        return;\n    }\n\n    fprintf(f, \"%s: Set=%p objid=%llu return_code=%d local_id=%llu byte_index=%u before=0x%02X mask=0x%02X after=0x%02X\\n\",\n            stage, set_ptr, objid, return_code, local_id, byte_index, before_val & 0xFFU, mask & 0xFFU, after_val & 0xFFU);\n    fclose(f);\n}\n\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    /* Log entry with pointer and objid after pointer check to avoid deref of a NULL pointer */\n    UT_Log_SelectFdClear(\"ENTER\", (void *)Set, (unsigned long long)objid, (unsigned long long)0, 0, 0, 0, 0, 0);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n\n    /* Log result of id->index resolution */\n    UT_Log_SelectFdClear(\"AFTER_IdToIndex\", (void *)Set, (unsigned long long)objid, (unsigned long long)local_id, return_code, 0, 0, 0, 0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        unsigned int byte_index = (unsigned int)(local_id >> 3);\n        unsigned int bit_shift = (unsigned int)(local_id & 0x7);\n        unsigned int mask = (unsigned int)(1U << bit_shift);\n\n        /* Read byte before modification for logging */\n        unsigned int before = 0U;\n\n        /* Protect against potential out-of-bounds in logging: assume Set->object_ids exists as in original code */\n        before = (unsigned int)Set->object_ids[byte_index];\n\n        /* Perform the original clear operation */\n        Set->object_ids[byte_index] &= (uint8_t)(~mask);\n\n        /* Read after value for logging */\n        unsigned int after = (unsigned int)Set->object_ids[byte_index];\n\n        /* Log the modification details */\n        UT_Log_SelectFdClear(\"CLEARED_BIT\", (void *)Set, (unsigned long long)objid, (unsigned long long)local_id, return_code, byte_index, before, mask, after);\n    }\n\n    /* Final exit log */\n    UT_Log_SelectFdClear(\"EXIT\", (void *)Set, (unsigned long long)objid, (unsigned long long)local_id, return_code, 0, 0, 0, 0);\n\n    return return_code;\n}\n"
}