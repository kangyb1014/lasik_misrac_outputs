{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdClear:\n```c\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SelectFdClear:\ntypedef struct\n{\n    uint8 object_ids[(OS_MAX_NUM_OPEN_FILES + 7) / 8];\n} OS_FdSet\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n        }\n    }\n\n    return return_code;\n}\n...\ntypedef uint32 osal_id_t\n...\ntypedef uint32 osal_index_t\n...\n#define OS_OBJECT_TYPE_OS_STREAM 0x06\n...\n#define OS_SUCCESS (0)\n...\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_CHECK_POINTER(Set);",
    "OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);",
    "int32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)",
    "Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));",
    "int32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)"
  ],
  "explanation": "I reviewed all pointer uses in the provided code. The following pointers/uses do not need investigation for Rule 8.13 because they legitimately must be non-const or are already const:\n\n- The parameter Set in OS_SelectFdClear is written to (Set->object_ids[...] &= ...), so it must be a pointer to a non-const OS_FdSet and cannot be const-qualified.\n\n- The ArrayIndex parameter of OS_ObjectIdToArrayIndex is an output parameter that is assigned to (*ArrayIndex = ...); it must be a non-const pointer and therefore should not be const-qualified.\n\n- The String parameter of OS_printf is already declared as const char *String, so it satisfies the rule.\n\n- The local buffer msg_buffer is modified by vsnprintf and then passed to OS_ConsoleWrite; since the buffer is intentionally mutable, it should remain a non-const object.\n\n- The OS_CHECK_POINTER macro invocations (e.g. OS_CHECK_POINTER(Set) and OS_CHECK_POINTER(ArrayIndex)) merely validate non-NULL and do not affect whether the pointed-to type should be const-qualified.\n\n- Other scalar parameters (osal_id_t, osal_index_t, osal_objtype_t) are non-pointer types and not relevant to this rule.\n\nThe remaining fragment that should be investigated is the call to OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer); the prototype of OS_ConsoleWrite is not provided here \u2014 if that function does not modify the passed string, its parameter should be const char *; if it does modify it, the current non-const usage is appropriate. No other pointer-related fragments in the provided code appear to be candidates for adding const qualification."
}