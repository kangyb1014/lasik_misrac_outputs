{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer \"sock_record\" is only used for read-only access (it is assigned from OS_OBJECT_TABLE_GET(...) and later only read to obtain sock_record->name_entry for OS_CreateSocketName). It is never used to modify the referenced OS_common_record_t in this function, so it should be declared as pointing to a const-qualified type (e.g. const OS_common_record_t *sock_record).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept:\n```c\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <time.h>\n#include <string.h>\n\n/* Minimal logging helper used to capture control flow and state. */\nstatic void OS_SocketAccept_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm;\n#ifdef _WIN32\n    gmtime_s(&tm, &t);\n#else\n    gmtime_r(&t, &tm);\n#endif\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n            tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n            tm.tm_hour, tm.tm_min, tm.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Log entry and parameters */\n    OS_SocketAccept_Log(\"ENTRY: OS_SocketAccept(sock_id=%llu, connsock_id=%p, Addr=%p, timeout=%d)\",\n                        (unsigned long long)(uintptr_t)sock_id, (void *)connsock_id, (void *)Addr, (int)timeout);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    OS_SocketAccept_Log(\"After parameter checks\");\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    OS_SocketAccept_Log(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        OS_SocketAccept_Log(\"Obtained sock_record=%p, sock=%p\", (void *)sock_record, (void *)sock);\n\n        if (sock != NULL)\n        {\n            OS_SocketAccept_Log(\"sock->socket_type=%d, sock->stream_state=0x%08x, sock->socket_domain=%d\",\n                                (int)sock->socket_type, (unsigned int)sock->stream_state, (int)sock->socket_domain);\n        }\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            OS_SocketAccept_Log(\"Socket type incorrect: expected %d, got %d\", (int)OS_SocketType_STREAM, (int)sock->socket_type);\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            OS_SocketAccept_Log(\"Socket state incorrect: stream_state=0x%08x\", (unsigned int)sock->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            OS_SocketAccept_Log(\"Proceeding to allocate new connection object id\");\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            OS_SocketAccept_Log(\"OS_ObjectIdAllocateNew returned %d, conn_token at %p\", (int)return_code, (void *)&conn_token);\n\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                OS_SocketAccept_Log(\"Allocated conn_record=%p, conn=%p\", (void *)conn_record, (void *)conn);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                OS_SocketAccept_Log(\"Calling OS_SocketAccept_Impl with sock_token=%p, conn_token=%p, Addr=%p, timeout=%d\",\n                                    (void *)&sock_token, (void *)&conn_token, (void *)Addr, (int)timeout);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl returned %d\", (int)return_code);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    /* Log the sock_record contents used for name generation */\n                    if (sock_record != NULL)\n                    {\n                        /* Attempt to log name_entry if present */\n                        const char *name_entry_str = \"(null)\";\n                        if (sock_record->name_entry != NULL)\n                        {\n                            name_entry_str = sock_record->name_entry;\n                        }\n                        OS_SocketAccept_Log(\"Before OS_CreateSocketName: sock_record=%p, sock_record->name_entry='%s'\",\n                                            (void *)sock_record, name_entry_str);\n                    }\n                    else\n                    {\n                        OS_SocketAccept_Log(\"Before OS_CreateSocketName: sock_record is NULL\");\n                    }\n\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n\n                    OS_SocketAccept_Log(\"After OS_CreateSocketName: conn_record=%p, conn->stream_name='%s' (if available)\",\n                                        (void *)conn_record, (conn != NULL && conn->stream_name ? conn->stream_name : \"(null)\"));\n\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n\n                    OS_SocketAccept_Log(\"Connection finalized: conn_record->name_entry set, conn->stream_state=0x%08x\",\n                                        (unsigned int)conn->stream_state);\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n                OS_SocketAccept_Log(\"OS_ObjectIdFinalizeNew returned %d, connsock_id now at %p (value may be set)\", (int)return_code, (void *)connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n        OS_SocketAccept_Log(\"Released sock_token and about to return with code %d\", (int)return_code);\n    }\n    else\n    {\n        OS_SocketAccept_Log(\"OS_ObjectIdGetById failed; returning %d\", (int)return_code);\n    }\n\n    return return_code;\n}\n"
}