{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'sock' is only used for read-only accesses (sock->socket_type, sock->stream_state, sock->socket_domain) and is assigned from OS_OBJECT_TABLE_GET which yields the address of a global table element. It can therefore be declared as a pointer to const (const OS_stream_internal_record_t *sock). Not qualifying it const here violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept:\n```c\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper for OS_SocketAccept. Logs to /tmp/logs/2423.txt. */\nstatic void OS_SocketAccept_Log(const char *stage,\n                                osal_id_t sock_id,\n                                OS_common_record_t *sock_record,\n                                OS_stream_internal_record_t *sock,\n                                OS_common_record_t *conn_record,\n                                OS_stream_internal_record_t *conn,\n                                const OS_SockAddr_t *Addr,\n                                const osal_id_t *connsock_id,\n                                int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_SocketAccept] stage=%s sock_id=%llu return_code=%d\\n\",\n            stage, (unsigned long long)(uintptr_t)sock_id, (int)return_code);\n\n    fprintf(f, \"  sock_record=%p sock=%p conn_record=%p conn=%p Addr=%p connsock_id=%p\\n\",\n            (void *)sock_record, (void *)sock, (void *)conn_record, (void *)conn, (const void *)Addr, (const void *)connsock_id);\n\n    if (sock != NULL)\n    {\n        fprintf(f, \"  sock->socket_type=%d sock->socket_domain=%d sock->stream_state=0x%08x\\n\",\n                (int)sock->socket_type,\n                (int)sock->socket_domain,\n                (unsigned int)sock->stream_state);\n    }\n    if (conn != NULL)\n    {\n        fprintf(f, \"  conn->socket_type=%d conn->socket_domain=%d conn->stream_state=0x%08x\\n\",\n                (int)conn->socket_type,\n                (int)conn->socket_domain,\n                (unsigned int)conn->stream_state);\n    }\n\n    if (connsock_id != NULL)\n    {\n        fprintf(f, \"  *connsock_id=%llu\\n\", (unsigned long long)(uintptr_t)(*connsock_id));\n    }\n\n    /* Best-effort flush and close */\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /* Initial probe */\n    OS_SocketAccept_Log(\"entry\", sock_id, NULL, NULL, NULL, NULL, Addr, connsock_id, 0);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n\n    OS_SocketAccept_Log(\"after_ObjectIdGetById\", sock_id, NULL, NULL, NULL, NULL, Addr, connsock_id, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        /* Log after obtaining table entries */\n        OS_SocketAccept_Log(\"after_table_get\", sock_id, sock_record, sock, NULL, NULL, Addr, connsock_id, return_code);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n\n            OS_SocketAccept_Log(\"incorrect_obj_type\", sock_id, sock_record, sock, NULL, NULL, Addr, connsock_id, return_code);\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            OS_SocketAccept_Log(\"incorrect_obj_state\", sock_id, sock_record, sock, NULL, NULL, Addr, connsock_id, return_code);\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            OS_SocketAccept_Log(\"before_alloc\", sock_id, sock_record, sock, NULL, NULL, Addr, connsock_id, return_code);\n\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            OS_SocketAccept_Log(\"after_alloc\", sock_id, sock_record, sock, NULL, NULL, Addr, connsock_id, return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                /* Log right before calling the implementation accept */\n                OS_SocketAccept_Log(\"before_impl\", sock_id, sock_record, sock, conn_record, conn, Addr, connsock_id, return_code);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                /* Log result from implementation */\n                OS_SocketAccept_Log(\"after_impl\", sock_id, sock_record, sock, conn_record, conn, Addr, connsock_id, return_code);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n\n                    OS_SocketAccept_Log(\"impl_success_connected\", sock_id, sock_record, sock, conn_record, conn, Addr, connsock_id, return_code);\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n\n                /* Log after finalizing the new object id */\n                OS_SocketAccept_Log(\"after_finalize\", sock_id, sock_record, sock, conn_record, conn, Addr, connsock_id, return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n\n        OS_SocketAccept_Log(\"after_release\", sock_id, sock_record, sock, conn_record, conn, Addr, connsock_id, return_code);\n    }\n\n    /* Final return logging */\n    OS_SocketAccept_Log(\"exit\", sock_id, sock_record, sock, conn_record, conn, Addr, connsock_id, return_code);\n\n    return return_code;\n}\n"
}