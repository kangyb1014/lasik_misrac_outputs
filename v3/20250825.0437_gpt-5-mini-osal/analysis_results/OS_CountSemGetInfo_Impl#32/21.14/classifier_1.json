{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo_Impl:\n```c\nint32 OS_CountSemGetInfo_Impl(const OS_object_token_t *token, OS_count_sem_prop_t *count_prop)\n{\n    int                                 sval;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_getvalue(&impl->id, &sval) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* put the info into the structure */\n    count_prop->value = sval;\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemGetInfo_Impl:\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_count_sem_prop_t\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_count_sem_prop_t\n```\nFocus on the above code fragment and judge whether it violates the rule 21.14 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in this fragment: it only defines a char array member 'name' and does not call memcmp. A specific violation would occur if elsewhere the code used memcmp to compare these null\u2011terminated names (for example memcmp(a.name, b.name, strlen(a.name)+1) or memcmp(a.name, b.name, OS_MAX_API_NAME) while treating them as C-strings) \u2014 such use would breach MISRA C 2023 Rule 21.14 (use strcmp/strncmp for C-strings)."
}