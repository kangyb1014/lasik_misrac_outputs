{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to UtTestDataBaseEntry->Teardown() is inside the for-loop body and may invoke code that modifies objects used in the loop clauses. In particular, the loop's third clause computes UtListNode = UtList_GetNext(UtListNode) which reads the current node's Next member; if the Teardown function modifies the list (for example removing the current node, changing the Next pointer, or destroying the list/head), then the third clause would be using an object that was modified in the loop body, violating clause 3 of Rule 14.2. Similarly, if Teardown (or any called function) modifies UtListNode or UtListMain (the objects used in the first/second clauses), that would violate clause 4/2. Because the Teardown function pointer has external behaviour that is not constrained here, the code can violate MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3264.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *log = NULL;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /* Open log for probes (append so multiple runs accumulate evidence) */\n    log = fopen(\"/tmp/logs/3264.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"---- UtTest_Run start: UtListMain=%p, DataBasePtr=%p\\n\",\n                (void *)UtListMain, (void *)UtAssert_Global.DataBasePtr);\n        fflush(log);\n    }\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        /* Probe: capture the node and the next pointer BEFORE executing the body */\n        void *next_before = (void *)UtList_GetNext(UtListNode);\n        void *node_ptr = (void *)UtListNode;\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"ITER_BEGIN: node=%p next_before=%p main=%p\\n\",\n                    node_ptr, next_before, (void *)UtListMain);\n            fflush(log);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log the entry and pointers to the function callbacks */\n            if (log != NULL)\n            {\n                fprintf(log, \"ENTRY: entry_ptr=%p TestName=%s Setup=%p Test=%p Teardown=%p\\n\",\n                        (void *)UtTestDataBaseEntry,\n                        (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                        (void *)UtTestDataBaseEntry->Setup,\n                        (void *)UtTestDataBaseEntry->Test,\n                        (void *)UtTestDataBaseEntry->Teardown);\n                fflush(log);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"CALL: Setup() for node=%p\\n\", node_ptr);\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"CALL: Test() for node=%p\\n\", node_ptr);\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"CALL: Teardown() for node=%p -- NOTE: Teardown may modify the list or node->Next\\n\",\n                            node_ptr);\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Teardown();\n\n                /*\n                 * We intentionally DO NOT call UtList_GetNext(UtListNode) here to probe the\n                 * post-teardown next pointer because that could dereference a node that\n                 * Teardown might have removed/freed. The original for-loop increment\n                 * performs that call; we instead log the expected behavior (the\n                 * pre-body next pointer) and note that Teardown may have modified it.\n                 */\n            }\n\n            if (log != NULL)\n            {\n                fprintf(log, \"ITER_END: node=%p (next_before=%p) -- loop will compute UtList_GetNext(node) in increment\\n\",\n                        node_ptr, next_before);\n                fflush(log);\n            }\n\n            UtAssert_EndTest();\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"ENTRY_NULL: node=%p -- UtList_GetObject returned NULL\\n\", node_ptr);\n                fflush(log);\n            }\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"---- UtTest_Run end\\n\\n\");\n        fclose(log);\n        log = NULL;\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}