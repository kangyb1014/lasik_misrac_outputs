{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer UtTestDataBaseEntry is declared as a non-const UtTestDataBaseEntry_t * and is assigned from UtList_GetObject(UtListNode). In the shown code the object is only read (TestName read, function-pointer members invoked) and never modified via this pointer, so the pointer could (and per MISRA 8.13 should) be const-qualified. If UtList_GetObject currently returns a non-const pointer, either the assignment or the declaration is a violation: UtTestDataBaseEntry should be declared as const UtTestDataBaseEntry_t * (or UtList_GetObject should provide a const-qualified return) to comply with Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *logf = NULL;\n    unsigned int iteration_count = 0u;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /* Open probe log file for evidence gathering. If this fails, proceed silently. */\n    logf = fopen(\"/tmp/logs/3263.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UtTest_Run: entered. UtListMain=%p\\n\", (void *)UtListMain);\n        fflush(logf);\n    }\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        iteration_count++;\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Iteration %u: UtListNode=%p\\n\", iteration_count, (void *)UtListNode);\n        }\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  UtTestDataBaseEntry (from UtList_GetObject) = %p\\n\", (void *)UtTestDataBaseEntry);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Probe: record read-only state of the entry to demonstrate it is only read */\n            if (logf != NULL)\n            {\n                const char *tname = UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\";\n                fprintf(logf, \"  TestName ptr=%p name=\\\"%s\\\"\\n\", (const void *)UtTestDataBaseEntry->TestName, tname);\n                fprintf(logf, \"  Setup present=%s Test present=%s Teardown present=%s\\n\",\n                        (UtTestDataBaseEntry->Setup ? \"YES\" : \"NO\"),\n                        (UtTestDataBaseEntry->Test ? \"YES\" : \"NO\"),\n                        (UtTestDataBaseEntry->Teardown ? \"YES\" : \"NO\"));\n                fflush(logf);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Calling Setup for test '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\"));\n                    fflush(logf);\n                }\n                UtTestDataBaseEntry->Setup();\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Returned from Setup\\n\");\n                    fflush(logf);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Calling Test for test '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\"));\n                    fflush(logf);\n                }\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Returned from Test; ExecutedCount=%lu\\n\", (unsigned long)UtAssert_Global.ExecutedCount);\n                    fflush(logf);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Calling Teardown for test '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\"));\n                    fflush(logf);\n                }\n                UtTestDataBaseEntry->Teardown();\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Returned from Teardown\\n\");\n                    fflush(logf);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  EndTest for '%s'\\n\",\n                        (UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\"));\n                fflush(logf);\n            }\n        }\n        else\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  UtTestDataBaseEntry is NULL; skipping node\\n\");\n                fflush(logf);\n            }\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Loop finished; total iterations=%u\\n\", iteration_count);\n        fflush(logf);\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UtTest_Run: exiting\\n\");\n        fclose(logf);\n    }\n}\n"
}