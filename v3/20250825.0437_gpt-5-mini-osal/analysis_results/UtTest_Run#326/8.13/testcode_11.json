{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer UtTestDataBaseEntry is used only for read-only access (reading TestName, checking/calling Setup/Test/Teardown function pointers) and is never used to modify the pointed object. Therefore it could and should be declared as a pointer to a const-qualified type (e.g. const UtTestDataBaseEntry_t *UtTestDataBaseEntry), so Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    /* Log file to capture control flow and state for Rule 8.13 evidence */\n    {\n        FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"UtTest_Run: start\\n\");\n            fclose(log);\n        }\n    }\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    /* Log merged list head pointer */\n    {\n        FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"UtTest_Run: UtListMain=%p\\n\", (void *)UtListMain);\n            fclose(log);\n        }\n    }\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        /* Log the node and the object pointer */\n        {\n            FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Loop: UtListNode=%p, UtTestDataBaseEntry=%p\\n\", (void *)UtListNode, (void *)UtTestDataBaseEntry);\n                fclose(log);\n            }\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            const char *pre_TestName = UtTestDataBaseEntry->TestName;\n            void (*pre_Setup)(void) = UtTestDataBaseEntry->Setup;\n            void (*pre_Test)(void) = UtTestDataBaseEntry->Test;\n            void (*pre_Teardown)(void) = UtTestDataBaseEntry->Teardown;\n\n            /* Record beginning of a test entry */\n            {\n                FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"BeginTest: entry=%p, TestName=%p\\n\", (void *)UtTestDataBaseEntry, (void *)pre_TestName);\n                    fprintf(log, \"  Setup=%p, Test=%p, Teardown=%p\\n\", (void *)pre_Setup, (void *)pre_Test, (void *)pre_Teardown);\n                    if (pre_TestName)\n                    {\n                        fprintf(log, \"  TestName (string)='%s'\\n\", pre_TestName);\n                    }\n                    fclose(log);\n                }\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                /* Log that we're about to call Setup */\n                FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Calling Setup for entry=%p\\n\", (void *)UtTestDataBaseEntry);\n                    fclose(log);\n                }\n\n                UtTestDataBaseEntry->Setup();\n\n                log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Returned from Setup for entry=%p\\n\", (void *)UtTestDataBaseEntry);\n                    fclose(log);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Calling Test for entry=%p\\n\", (void *)UtTestDataBaseEntry);\n                    fprintf(log, \"  ExecutedCount before=%u\\n\", (unsigned)UtAssert_Global.ExecutedCount);\n                    fclose(log);\n                }\n\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n\n                log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Returned from Test for entry=%p\\n\", (void *)UtTestDataBaseEntry);\n                    fprintf(log, \"  ExecutedCount after=%u\\n\", (unsigned)UtAssert_Global.ExecutedCount);\n                    fclose(log);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Calling Teardown for entry=%p\\n\", (void *)UtTestDataBaseEntry);\n                    fclose(log);\n                }\n\n                UtTestDataBaseEntry->Teardown();\n\n                log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Returned from Teardown for entry=%p\\n\", (void *)UtTestDataBaseEntry);\n                    fclose(log);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            /* Capture post-state and compare to pre-state to show no modifications to pointed object fields */\n            {\n                const char *post_TestName = UtTestDataBaseEntry->TestName;\n                void (*post_Setup)(void) = UtTestDataBaseEntry->Setup;\n                void (*post_Test)(void) = UtTestDataBaseEntry->Test;\n                void (*post_Teardown)(void) = UtTestDataBaseEntry->Teardown;\n\n                FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"PostState: entry=%p\\n\", (void *)UtTestDataBaseEntry);\n                    fprintf(log, \"  TestName pre=%p post=%p %s\\n\", (void *)pre_TestName, (void *)post_TestName,\n                            (pre_TestName == post_TestName) ? \"(unchanged)\" : \"(changed)\");\n                    fprintf(log, \"  Setup pre=%p post=%p %s\\n\", (void *)pre_Setup, (void *)post_Setup,\n                            (pre_Setup == post_Setup) ? \"(unchanged)\" : \"(changed)\");\n                    fprintf(log, \"  Test pre=%p post=%p %s\\n\", (void *)pre_Test, (void *)post_Test,\n                            (pre_Test == post_Test) ? \"(unchanged)\" : \"(changed)\");\n                    fprintf(log, \"  Teardown pre=%p post=%p %s\\n\", (void *)pre_Teardown, (void *)post_Teardown,\n                            (pre_Teardown == post_Teardown) ? \"(unchanged)\" : \"(changed)\");\n                    fclose(log);\n                }\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    /* Log end of run and counters */\n    {\n        FILE *log = fopen(\"/tmp/logs/3263.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"UtTest_Run: end. Counters: failures=%u, passed=%u, executed=%u\\n\",\n                    (unsigned)UtAssert_GetCounters().Failed, (unsigned)UtAssert_GetCounters().Passed,\n                    (unsigned)UtAssert_Global.ExecutedCount);\n            fclose(log);\n        }\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}