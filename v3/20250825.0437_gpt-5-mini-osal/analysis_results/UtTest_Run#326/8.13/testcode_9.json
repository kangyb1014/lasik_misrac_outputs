{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator UtListNode is declared as a mutable pointer (UtListNode_t *UtListNode) but is only used to read/traverse the list (passed to UtList_GetNext, UtList_IsEnd and UtList_GetObject) and not used to modify the pointed-to node. Per MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible. Thus UtListNode should be declared as const UtListNode_t * (and related APIs adjusted to accept const pointers) \u2014 the current code violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *logf = NULL;\n\n    /* Open log file for this run. Overwrite previous to keep evidence specific to this execution. */\n    logf = fopen(\"/tmp/logs/3263.txt\", \"w\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UtTest_Run start\\n\");\n    }\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Got UtListMain head: %p\\n\", (void *)UtListMain);\n    }\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Merged SETUP into UtListMain\\n\");\n    }\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Merged TEST into UtListMain\\n\");\n    }\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Merged TEARDOWN into UtListMain\\n\");\n    }\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Iterating node pointer (mutable type): UtListNode=%p\\n\", (void *)UtListNode);\n        }\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"UtList_GetObject returned %p\\n\", (void *)UtTestDataBaseEntry);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log test name and which callbacks are present to capture read-only usage of the list node */\n            if (logf != NULL)\n            {\n                const char *name = UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\";\n                fprintf(logf, \"Begin test: %s\\n\", name);\n                fprintf(logf, \"  Setup ptr: %p, Test ptr: %p, Teardown ptr: %p\\n\",\n                        (void *)UtTestDataBaseEntry->Setup,\n                        (void *)UtTestDataBaseEntry->Test,\n                        (void *)UtTestDataBaseEntry->Teardown);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Calling Setup() for %p\\n\", (void *)UtTestDataBaseEntry);\n                }\n                UtTestDataBaseEntry->Setup();\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Returned from Setup() for %p\\n\", (void *)UtTestDataBaseEntry);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Calling Test() for %p\\n\", (void *)UtTestDataBaseEntry);\n                }\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Returned from Test() for %p, ExecutedCount=%u\\n\",\n                            (void *)UtTestDataBaseEntry, (unsigned)UtAssert_Global.ExecutedCount);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Calling Teardown() for %p\\n\", (void *)UtTestDataBaseEntry);\n                }\n                UtTestDataBaseEntry->Teardown();\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Returned from Teardown() for %p\\n\", (void *)UtTestDataBaseEntry);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"End test for entry %p\\n\", (void *)UtTestDataBaseEntry);\n            }\n        }\n        else\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Skipped NULL UtTestDataBaseEntry for node %p\\n\", (void *)UtListNode);\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Destroying database pointer %p\\n\", (void *)UtAssert_Global.DataBasePtr);\n    }\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Ending test run, counters: %u executed\\n\", (unsigned)UtAssert_GetCounters());\n        fclose(logf);\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}