{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: if the caller passes UT_ExecuteVaHandler itself (or a handler that calls it) as the DefaultHandler, then UT_ExecuteVaHandler will register that handler via UT_SetVaHandlerFunction and immediately call UT_DefaultStubImplWithArgs. If UT_DefaultStubImplWithArgs invokes the registered VA handler, this causes UT_ExecuteVaHandler to be called again (indirect recursion).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdToArrayIndex code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2036.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdToArrayIndex as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdToArrayIndex:\n```c\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdToArrayIndex code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/2036.txt */\nstatic void OS_ObjectIdToArrayIndex_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2036.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Log entry and parameters (do this before the pointer check so callers can see what was passed) */\n    OS_ObjectIdToArrayIndex_Log(\"ENTER: OS_ObjectIdToArrayIndex idtype=%llu object_id=0x%llx ArrayIndex_ptr=%p\",\n                               (unsigned long long)idtype,\n                               (unsigned long long)object_id,\n                               (void *)ArrayIndex);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    OS_ObjectIdToArrayIndex_Log(\"Computed: obj_index=%u actual_type=%llu\",\n                               (unsigned)obj_index,\n                               (unsigned long long)actual_type);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n        OS_ObjectIdToArrayIndex_Log(\"Path: type-mismatch -> return_code=%d (expected=%llu actual=%llu)\",\n                                   (int)return_code,\n                                   (unsigned long long)idtype,\n                                   (unsigned long long)actual_type);\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        OS_ObjectIdToArrayIndex_Log(\"Lookup: max_id=%u for actual_type=%llu\",\n                                   (unsigned)max_id,\n                                   (unsigned long long)actual_type);\n\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n            OS_ObjectIdToArrayIndex_Log(\"Path: max_id==0 -> return_code=%d\",\n                                       (int)return_code);\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n            OS_ObjectIdToArrayIndex_Log(\"Success: return_code=%d ArrayIndex=%llu (raw_obj_index=%u max_id=%u)\",\n                                       (int)return_code,\n                                       (unsigned long long)*ArrayIndex,\n                                       (unsigned)obj_index,\n                                       (unsigned)max_id);\n        }\n    }\n\n    OS_ObjectIdToArrayIndex_Log(\"EXIT: OS_ObjectIdToArrayIndex return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}