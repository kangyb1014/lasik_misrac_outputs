{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdToArrayIndex:\n```c\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ObjectIdToArrayIndex:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nstatic inline uint32 OS_ObjectIdToSerialNumber_Impl(osal_id_t id)\n{\n    return (OS_ObjectIdToInteger(id) & OS_OBJECT_INDEX_MASK);\n}\n...\nstatic inline osal_objtype_t OS_ObjectIdToType_Impl(osal_id_t id)\n{\n    return (OS_ObjectIdToInteger(id) >> OS_OBJECT_TYPE_SHIFT);\n}\n...\nuint32 OS_GetMaxForObjectType(osal_objtype_t idtype)\n{\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return OS_MAX_TASKS;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return OS_MAX_QUEUES;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return OS_MAX_BIN_SEMAPHORES;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return OS_MAX_COUNT_SEMAPHORES;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return OS_MAX_MUTEXES;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return OS_MAX_NUM_OPEN_FILES;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return OS_MAX_NUM_OPEN_DIRS;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return OS_MAX_TIMEBASES;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            return OS_MAX_TIMERS;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return OS_MAX_MODULES;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return OS_MAX_FILE_SYSTEMS;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            return OS_MAX_CONSOLES;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return OS_MAX_CONDVARS;\n        default:\n            return 0;\n    }\n}\n...\n#define OSAL_INDEX_C(X) ((osal_index_t)(X))\n...\n#define OS_OBJECT_TYPE_UNDEFINED 0x00\n...\n#define OS_ERR_INVALID_ID (-16)\n...\n#define OS_SUCCESS (0)\n...\ntypedef uint32 osal_objtype_t\n...\ntypedef uint32 osal_id_t\n...\ntypedef uint32 osal_index_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic inline uint32 OS_ObjectIdToSerialNumber_Impl(osal_id_t id)\n{\n    return (OS_ObjectIdToInteger(id) & OS_OBJECT_INDEX_MASK);\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the static inline function contains a single return expression and no conditional or dead branches. There are no statements after the return and nothing that is provably unexecutable, so this fragment does not introduce unreachable code. (An unused inline function is not the same as unreachable code \u2014 it is still potentially callable.)"
}