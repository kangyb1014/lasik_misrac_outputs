{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * to void *: OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token). The parameter \u2018name\u2019 is declared const char * (OS_ObjectIdAllocateNew prototype), but OS_ObjectIdFindNextMatch expects a plain void * (non-const). Casting away the const qualifier discards const-qualification and therefore violates MISRA C 2023 Rule 8.13. This can allow (or appear to allow) the callee to modify data that was intended to be immutable. Recommended fix: change the OS_ObjectIdFindNextMatch prototype to accept a const void * (or otherwise preserve const-qualification) so the call can pass name without casting away const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2643.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper logging function to capture control flow and state. */\nstatic void OS_TimeBaseCreate_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2643.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    OS_TimeBaseCreate_Log(\"ENTER: OS_TimeBaseCreate(timer_id=%p, timebase_name=%p, name_str=\\\"%s\\\", external_sync=%p)\",\n                          (const void *)timer_id,\n                          (const void *)timebase_name,\n                          (timebase_name != NULL) ? timebase_name : \"(null)\",\n                          (const void *)external_sync);\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n    ** Check Parameters\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBaseCreate_Log(\"RETURN: Invalid context detected (called from timebase). Returning OS_ERR_INCORRECT_OBJ_STATE\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_TimeBaseCreate_Log(\"Calling OS_ObjectIdAllocateNew with name ptr=%p, name=\\\"%s\\\"\",\n                          (const void *)timebase_name,\n                          (timebase_name != NULL) ? timebase_name : \"(null)\");\n\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n\n    OS_TimeBaseCreate_Log(\"OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the token and the timebase pointer for debugging */\n        OS_TimeBaseCreate_Log(\"Allocate success: token at %p, timebase ptr=%p\", (void *)&token, (void *)timebase);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        OS_TimeBaseCreate_Log(\"Set external_sync=%p\", (const void *)external_sync);\n\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n            OS_TimeBaseCreate_Log(\"external_sync is NULL; accuracy_usec set to %u\", (unsigned)timebase->accuracy_usec);\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n            OS_TimeBaseCreate_Log(\"external_sync provided; accuracy_usec set to 0\");\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        OS_TimeBaseCreate_Log(\"Calling OS_TimeBaseCreate_Impl with token at %p\", (void *)&token);\n        return_code = OS_TimeBaseCreate_Impl(&token);\n        OS_TimeBaseCreate_Log(\"OS_TimeBaseCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n        OS_TimeBaseCreate_Log(\"OS_ObjectIdFinalizeNew returned %ld, timer_id ptr=%p, assigned id=%p\",\n                              (long)return_code,\n                              (const void *)timer_id,\n                              (const void *)(timer_id != NULL ? (const void *)(uintptr_t)(*timer_id) : NULL));\n    }\n\n    OS_TimeBaseCreate_Log(\"EXIT: OS_TimeBaseCreate returning %ld\", (long)return_code);\n    return return_code;\n}\n"
}