{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_SharedGlobalVars.EventHandler is set to a callback that calls OS_NotifyEvent (for example, a user-supplied EventHandler that forwards or re-emits events by calling OS_NotifyEvent), then the sequence OS_NotifyEvent -> EventHandler -> OS_NotifyEvent produces indirect recursion. The code calls the function-pointer synchronously with no guard against re-entry, so indirect self-call is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2646.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper logging function for OS_TimeBaseCreate probes. Appends logs to /tmp/logs/2646.txt */\nstatic void OS_TimeBaseCreate_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2646.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not affect original logic */\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    OS_TimeBaseCreate_Log(\"ENTER: OS_TimeBaseCreate(timer_id=%p, timebase_name=%s, external_sync=%p)\", (void *)timer_id, timebase_name ? timebase_name : \"(null)\", (void *)external_sync);\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n    ** Check Parameters\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimeBaseCreate_Log(\"After context check: objtype=%u\", (unsigned)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBaseCreate_Log(\"ERROR: called from a timebase callback context, returning OS_ERR_INCORRECT_OBJ_STATE\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    OS_TimeBaseCreate_Log(\"OS_ObjectIdAllocateNew returned %d, token=%p\", (int)return_code, (void *)(uintptr_t)token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n        OS_TimeBaseCreate_Log(\"Allocated timebase record at %p for token=%p\", (void *)timebase, (void *)(uintptr_t)token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n        OS_TimeBaseCreate_Log(\"After OS_OBJECT_INIT: timebase name set to %s\", timebase_name ? timebase_name : \"(null)\");\n\n        timebase->external_sync = external_sync;\n        OS_TimeBaseCreate_Log(\"Set timebase->external_sync = %p\", (void *)timebase->external_sync);\n\n        if (external_sync == NULL)\n        {\n            OS_TimeBaseCreate_Log(\"external_sync is NULL; using OS_SharedGlobalVars.MicroSecPerTick = %ld\", (long)OS_SharedGlobalVars.MicroSecPerTick);\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            OS_TimeBaseCreate_Log(\"external_sync provided; setting accuracy_usec = 0\");\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Log possibly relevant global callback that can cause indirect recursion */\n        OS_TimeBaseCreate_Log(\"Probe: OS_SharedGlobalVars.EventHandler = %p\", (void *)OS_SharedGlobalVars.EventHandler);\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        OS_TimeBaseCreate_Log(\"Calling OS_TimeBaseCreate_Impl with token=%p\", (void *)(uintptr_t)token);\n        return_code = OS_TimeBaseCreate_Impl(&token);\n        OS_TimeBaseCreate_Log(\"OS_TimeBaseCreate_Impl returned %d\", (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        OS_TimeBaseCreate_Log(\"Calling OS_ObjectIdFinalizeNew(return_code=%d, token=%p, timer_id=%p)\", (int)return_code, (void *)(uintptr_t)token, (void *)timer_id);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n        OS_TimeBaseCreate_Log(\"OS_ObjectIdFinalizeNew returned %d, final timer_id=%p (if success)\", (int)return_code, (void *)timer_id);\n    }\n    else\n    {\n        OS_TimeBaseCreate_Log(\"Allocation failed with return_code=%d\", (int)return_code);\n    }\n\n    OS_TimeBaseCreate_Log(\"EXIT: OS_TimeBaseCreate returning %d\", (int)return_code);\n    return return_code;\n}\n"
}