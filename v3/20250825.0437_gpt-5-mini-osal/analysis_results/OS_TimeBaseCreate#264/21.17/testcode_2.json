{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: OS_CHECK_APINAME(timebase_name) expands to OS_CHECK_STRING(timebase_name, OS_MAX_API_NAME, ...). If OS_CHECK_STRING is implemented using unbounded string.h functions such as strlen or strcpy (rather than bounded variants like strnlen with an explicit maximum length), then a non\u2011null\u2011terminated or undersized input can cause an out\u2011of\u2011bounds read. For example, if timebase_name points to an 8\u2011byte buffer that is not NUL\u2011terminated within the first OS_MAX_API_NAME bytes, a strlen(timebase_name) used inside OS_CHECK_STRING will read past the buffer bounds and violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2649.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Helper probe functions to record control flow and state for debugging. */\nstatic size_t safe_strnlen(const char *s, size_t max)\n{\n    size_t i = 0;\n    if (s == NULL)\n    {\n        return 0;\n    }\n    while (i < max && s[i] != '\\0')\n    {\n        ++i;\n    }\n    return i;\n}\n\nstatic void probe_log_bytes(FILE *f, const char *label, const char *buf, size_t max_print)\n{\n    if (buf == NULL)\n    {\n        fprintf(f, \"%s: (NULL)\\n\", label);\n        return;\n    }\n\n    size_t len = safe_strnlen(buf, max_print);\n    fprintf(f, \"%s: length (bounded) = %zu\\n\", label, len);\n    fprintf(f, \"%s: bytes (hex up to %zu):\", label, len);\n    for (size_t i = 0; i < len; ++i)\n    {\n        fprintf(f, \" %02x\", (unsigned char)buf[i]);\n    }\n    /* If buffer had no NUL within max_print, indicate that we truncated the inspection. */\n    if (len == max_print && buf[len] != '\\0')\n    {\n        fprintf(f, \" ... (truncated, no NUL within %zu bytes)\", max_print);\n    }\n    fprintf(f, \"\\n\");\n}\n\nstatic void probe_log(const char *stage, const char *timebase_name, const void *timer_id, const void *external_sync, int32_t return_code, uintptr_t token)\n{\n    FILE *f = fopen(\"/tmp/logs/2649.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not interfere with normal flow if logging fails. */\n    }\n\n    fprintf(f, \"---- OS_TimeBaseCreate probe: %s ----\\n\", stage);\n    fprintf(f, \"timer_id ptr = %p\\n\", timer_id);\n    fprintf(f, \"external_sync ptr = %p\\n\", external_sync);\n    fprintf(f, \"return_code (observed) = %d\\n\", (int)return_code);\n    fprintf(f, \"token (observed/address) = 0x%016\" PRIxPTR \"\\n\", token);\n\n    /* Safely examine the provided name up to a bounded amount to avoid unbounded reads. */\n    probe_log_bytes(f, \"timebase_name\", timebase_name, 256);\n\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\n/* Original function preserved; probes inserted at key points. */\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token = (OS_object_token_t)0;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Probe: entry state before any checks */\n    probe_log(\"entry\", timebase_name, (const void *)timer_id, (const void *)external_sync, -1, (uintptr_t)token);\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n\n    /* Probe: just before API name check (this is the critical point where unsafe APIs could be used) */\n    probe_log(\"before_OS_CHECK_APINAME\", timebase_name, (const void *)timer_id, (const void *)external_sync, -1, (uintptr_t)token);\n\n    OS_CHECK_APINAME(timebase_name);\n\n    /* Probe: after API name check */\n    probe_log(\"after_OS_CHECK_APINAME\", timebase_name, (const void *)timer_id, (const void *)external_sync, -1, (uintptr_t)token);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log(\"incorrect_obj_state_detected\", timebase_name, (const void *)timer_id, (const void *)external_sync, OS_ERR_INCORRECT_OBJ_STATE, (uintptr_t)token);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n\n    /* Probe: after allocation attempt */\n    probe_log(\"after_ObjectIdAllocateNew\", timebase_name, (const void *)timer_id, (const void *)external_sync, return_code, (uintptr_t)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Probe: before calling OS-specific implementation */\n        probe_log(\"before_Impl\", timebase_name, (const void *)timer_id, (const void *)external_sync, return_code, (uintptr_t)token);\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Probe: after OS_TimeBaseCreate_Impl */\n        probe_log(\"after_Impl\", timebase_name, (const void *)timer_id, (const void *)external_sync, return_code, (uintptr_t)token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n\n        /* Probe: after finalization */\n        probe_log(\"after_finalize\", timebase_name, (const void *)timer_id, (const void *)external_sync, return_code, (uintptr_t)token);\n    }\n    else\n    {\n        /* Probe: allocation failed */\n        probe_log(\"alloc_failed\", timebase_name, (const void *)timer_id, (const void *)external_sync, return_code, (uintptr_t)token);\n    }\n\n    return return_code;\n}\n"
}