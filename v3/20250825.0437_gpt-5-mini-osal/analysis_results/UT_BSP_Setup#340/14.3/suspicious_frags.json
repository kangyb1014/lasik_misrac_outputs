{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UT_BSP_Setup:\nuint32 OS_BSP_GetArgC(void)\n{\n    return OS_BSP_Global.ArgC;\n}\n...\nchar *const *OS_BSP_GetArgV(void)\n{\n    return OS_BSP_Global.ArgV;\n}\n...\ntypedef uint8_t   uint8\n...\ntypedef uint32_t  uint32\n...\nBSP_UT_GlobalData_t BSP_UT_Global\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expressions in this function are invariant. Details:\n- if (ArgC > 0): ArgC is obtained from OS_BSP_GetArgC() and is not a compile-time constant; it is subsequently decremented inside the loop, so the condition is variant.\n- while (ArgC > 0): ArgC is decremented (--ArgC) on every iteration and may be decremented again for the \"-v\" case; ArgV is advanced (++ArgV). The loop controlling expression therefore changes and is not invariant.\n- if (strcmp(ArgV[0], \"-d\") == 0), if (strcmp(ArgV[0], \"-q\") == 0), and if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0): these conditions depend on runtime argument contents and/or ArgC and are not constant.\n- if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX): UserShift is assigned earlier based on parsed arguments, so this is not an invariant condition.\n\nThere are no for- or do-while loops with constant controlling expressions, and no occurrences of constant true/false conditions (e.g., while(1) or if(1)) that would trigger a Rule 14.3 concern (the permitted do-while exception does not apply because no do-while is present). Therefore no code fragments need to be investigated for Rule 14.3 in this function."
}