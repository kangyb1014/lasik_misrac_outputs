{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as char *const *ArgV (pointer to a const pointer to non-const char). In the fragment ArgV[1] is passed to strtoul(const char *), and the pointed-to characters are not modified by the code. Therefore the pointed-to type could and should be const-qualified (e.g. const char * const *ArgV). This means the pointer does not point to a const-qualified type when possible \u2014 violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\nstatic void UT_BSP_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3403.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n\n    ArgC = OS_BSP_GetArgC();\n    UT_BSP_Log(\"UT_BSP_Setup: Entry. ArgC=%u\", (unsigned)ArgC);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        UT_BSP_Log(\"UT_BSP_Setup: Got ArgV pointer=%p\", (const void *)ArgV);\n        UT_BSP_Log(\"UT_BSP_Setup: ArgV[0]=%s\", (ArgV[0] != NULL) ? ArgV[0] : \"(null)\");\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n            UT_BSP_Log(\"Loop start: remaining ArgC=%u, ArgV=%p, ArgV[0]=%s\",\n                        (unsigned)ArgC, (const void *)ArgV, (ArgV[0] != NULL) ? ArgV[0] : \"(null)\");\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UT_BSP_Log(\"Matched flag: -d (set debug)\");\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UT_BSP_Log(\"Matched flag: -q (set failure)\");\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UT_BSP_Log(\"Matched flag: -v; ArgV pointer=%p, ArgV[0]=%s, ArgV[1]=%s\",\n                            (const void *)ArgV,\n                            (ArgV[0] != NULL) ? ArgV[0] : \"(null)\",\n                            (ArgV[1] != NULL) ? ArgV[1] : \"(null)\");\n\n                /* Probe before calling strtoul: capture the pointer and string passed */\n                UT_BSP_Log(\"Calling strtoul with ArgV[1]=%s (pointer=%p)\",\n                            (ArgV[1] != NULL) ? ArgV[1] : \"(null)\", (const void *)ArgV[1]);\n\n                UserShift = strtoul(ArgV[1], NULL, 0);\n\n                UT_BSP_Log(\"After strtoul: parsed UserShift=%u\", (unsigned)UserShift);\n\n                ++ArgV; /* advance past the numeric argument */\n            }\n\n            ++ArgV; /* advance to next argument */\n            UT_BSP_Log(\"Advance ArgV to %p\", (const void *)ArgV);\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UT_BSP_Log(\"UserShift out of range or none; defaulting to PASS. Current UserShift=%u\", (unsigned)UserShift);\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n    UT_BSP_Log(\"Final UserShift=%u, CurrVerbosity=%u\", (unsigned)UserShift, (unsigned)BSP_UT_Global.CurrVerbosity);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n    UT_BSP_Log(\"UT_BSP_Setup: Exit (UT_BSP_DoText called)\");\n}\n"
}