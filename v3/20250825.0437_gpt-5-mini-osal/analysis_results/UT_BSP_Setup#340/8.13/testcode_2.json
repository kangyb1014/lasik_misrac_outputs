{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as char *const *ArgV (pointer to a non-const char), but the code only reads the pointed-to strings (passes ArgV[0] / ArgV[1] to strcmp/strtoul) and never modifies the characters. Therefore the pointer should point to a const-qualified character type (for example: const char * const *ArgV). The increment (++ArgV) modifies the iterator pointer itself, not the pointee, so it does not prevent making the pointee const. This is a violation of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Probe/logging helper: append logs to /tmp/logs/3403.txt */\nstatic void UT_BSP_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper to safely print an argument string (handles NULL) */\nstatic const char *UT_BSP_SafeStr(const char *s)\n{\n    return (s == NULL) ? \"(null)\" : s;\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    /* Log entry and zeroing step */\n    UT_BSP_ProbeLog(\"UT_BSP_Setup: entry\");\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n    UT_BSP_ProbeLog(\"memset done: BSP_UT_Global at %p\", (void *)&BSP_UT_Global);\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    UT_BSP_ProbeLog(\"Initial ArgC = %u\", (unsigned)ArgC);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        UT_BSP_ProbeLog(\"Initial ArgV pointer = %p\", (void *)ArgV);\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n            UT_BSP_ProbeLog(\"Loop start: remaining ArgC = %u, ArgV = %p, ArgV[0] = %s, ArgV[1] = %s\",\n                            (unsigned)ArgC,\n                            (void *)ArgV,\n                            UT_BSP_SafeStr(ArgV[0]),\n                            UT_BSP_SafeStr(ArgV[1]));\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n                UT_BSP_ProbeLog(\"Matched '-d': set UserShift = %u\", (unsigned)UserShift);\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n                UT_BSP_ProbeLog(\"Matched '-q': set UserShift = %u\", (unsigned)UserShift);\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UT_BSP_ProbeLog(\"Matched '-v': decrement ArgC => %u, will parse ArgV[1] = %s\",\n                                (unsigned)ArgC,\n                                UT_BSP_SafeStr(ArgV[1]));\n\n                /* strtoul reads the string but does not modify it */\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                UT_BSP_ProbeLog(\"Parsed UserShift from ArgV[1] = %s => %u\",\n                                UT_BSP_SafeStr(ArgV[1]),\n                                (unsigned)UserShift);\n\n                ++ArgV; /* advance pointer to skip the value we consumed */\n                UT_BSP_ProbeLog(\"ArgV advanced after '-v' handling => ArgV = %p, ArgV[0] = %s\",\n                                (void *)ArgV,\n                                UT_BSP_SafeStr(ArgV[0]));\n            }\n\n            ++ArgV; /* advance to next argument */\n            UT_BSP_ProbeLog(\"ArgV incremented at end of loop => ArgV = %p, next ArgV[0] = %s\",\n                            (void *)ArgV,\n                            UT_BSP_SafeStr(ArgV[0]));\n        }\n    }\n\n    UT_BSP_ProbeLog(\"After parsing loop: UserShift = %u\", (unsigned)UserShift);\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n        UT_BSP_ProbeLog(\"UserShift adjusted to default UTASSERT_CASETYPE_PASS => %u\", (unsigned)UserShift);\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n    UT_BSP_ProbeLog(\"Set BSP_UT_Global.CurrVerbosity = %u (UserShift = %u)\",\n                    (unsigned)BSP_UT_Global.CurrVerbosity,\n                    (unsigned)UserShift);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n    UT_BSP_ProbeLog(\"UT_BSP_Setup: exit\");\n}\n"
}