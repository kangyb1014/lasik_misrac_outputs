{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as char *const * which means the pointers to char are const but the characters pointed-to are not const. In the function ArgV is only used for read-only operations (strcmp, strtoul) and the code never modifies the pointed-to characters; therefore the pointee type should be const-qualified. e.g. declare as const char * const *ArgV (or char const * const *ArgV).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append verbose control-flow and state info to /tmp/logs/3403.txt */\nstatic void UT_BSP_LogState(const char *tag, unsigned ArgC_val, char *const *ArgV_val, unsigned UserShift_val)\n{\n    FILE *fp = fopen(\"/tmp/logs/3403.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"[%s] ArgC=%u, UserShift=%u, ArgV_ptr=%p\\n\", tag, ArgC_val, UserShift_val, (void *)ArgV_val);\n    if (ArgV_val != NULL && ArgC_val > 0)\n    {\n        /* Log the current pointed-to string (may be NULL) */\n        fprintf(fp, \"[%s] ArgV[0]=%s\\n\", tag, (ArgV_val[0] != NULL) ? ArgV_val[0] : \"(null)\");\n    }\n    fflush(fp);\n    fclose(fp);\n}\n\n/* Additional helper to log -v argument handling (ArgV[1] and parsed value) */\nstatic void UT_BSP_LogVerboseArg(char *const *ArgV_val, const char *label, unsigned parsed)\n{\n    FILE *fp = fopen(\"/tmp/logs/3403.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n    fprintf(fp, \"[%s] ArgV[0]=%s, ArgV[1]=%s, parsed=%u\\n\",\n            label,\n            (ArgV_val[0] != NULL) ? ArgV_val[0] : \"(null)\",\n            (ArgV_val[1] != NULL) ? ArgV_val[1] : \"(null)\",\n            parsed);\n    fflush(fp);\n    fclose(fp);\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n\n    /* Log initial ArgC */\n    UT_BSP_LogState(\"INITIAL\", (unsigned)ArgC, NULL, (unsigned)UserShift);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n\n        /* Log ArgV pointer and first element before entering loop */\n        UT_BSP_LogState(\"BEFORE_LOOP\", (unsigned)ArgC, ArgV, (unsigned)UserShift);\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            /* Log state at start of iteration (after decrement to match original flow) */\n            UT_BSP_LogState(\"ITER_START\", (unsigned)ArgC, ArgV, (unsigned)UserShift);\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UT_BSP_LogState(\"MATCH_-d\", (unsigned)ArgC, ArgV, (unsigned)UserShift);\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n                UT_BSP_LogState(\"SET_DEBUG\", (unsigned)ArgC, ArgV, (unsigned)UserShift);\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UT_BSP_LogState(\"MATCH_-q\", (unsigned)ArgC, ArgV, (unsigned)UserShift);\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n                UT_BSP_LogState(\"SET_FAILURE\", (unsigned)ArgC, ArgV, (unsigned)UserShift);\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n\n                /* Log the verbose argument and the string to be parsed */\n                unsigned parsed_val = (unsigned)strtoul(ArgV[1], NULL, 0);\n                UT_BSP_LogVerboseArg(ArgV, \"MATCH_-v_BEFORE_PARSE\", parsed_val);\n\n                UserShift = strtoul(ArgV[1], NULL, 0);\n\n                /* Log after parsing and setting UserShift */\n                UT_BSP_LogVerboseArg(ArgV, \"MATCH_-v_AFTER_PARSE\", (unsigned)UserShift);\n\n                ++ArgV;\n            }\n\n            ++ArgV;\n\n            /* Log end of iteration state */\n            UT_BSP_LogState(\"ITER_END\", (unsigned)ArgC, ArgV, (unsigned)UserShift);\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UT_BSP_LogState(\"ADJUST_USERSHIFT_TO_PASS\", 0U, NULL, (unsigned)UserShift);\n        UserShift = UTASSERT_CASETYPE_PASS;\n        UT_BSP_LogState(\"USERSHIFT_IS_PASS\", 0U, NULL, (unsigned)UserShift);\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    /* Log final computed verbosity and UserShift */\n    UT_BSP_LogState(\"FINAL\", 0U, NULL, (unsigned)UserShift);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n"
}