{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as 'char *const *ArgV', so the pointed-to characters are non-const. In the fragment 'strcmp(ArgV[0], \"-v\") == 0' ArgV[0] is only read and passed to a function accepting 'const char *'. Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible. Here ArgV (and its element type) could be declared as 'const char * const *ArgV' (or 'const char * const ArgV[]') to reflect that the strings are not modified. Therefore the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append structured logs to /tmp/logs/3403.txt */\nstatic void UT_BSP_Probe_LogState(const char *tag, uint32 ArgC, char *const *ArgV, uint8 UserShift)\n{\n    /* Ensure directory exists (best-effort). Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/3403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[UT_BSP][%s] ArgC=%u UserShift=%u\\n\", tag, (unsigned)ArgC, (unsigned)UserShift);\n\n    if (ArgV != NULL)\n    {\n        fprintf(f, \"[UT_BSP][%s] ArgV ptr=%p\\n\", tag, (void *)ArgV);\n\n        if (ArgC > 0 && ArgV[0] != NULL)\n        {\n            /* print pointer and contents of ArgV[0] */\n            fprintf(f, \"[UT_BSP][%s] ArgV[0]=%p \\\"%s\\\"\\n\", tag, (void *)ArgV[0], ArgV[0]);\n        }\n        else\n        {\n            fprintf(f, \"[UT_BSP][%s] ArgV[0]=%p\\n\", tag, (void *)(ArgV ? ArgV[0] : NULL));\n        }\n\n        if (ArgC > 1 && ArgV[1] != NULL)\n        {\n            fprintf(f, \"[UT_BSP][%s] ArgV[1]=%p \\\"%s\\\"\\n\", tag, (void *)ArgV[1], ArgV[1]);\n        }\n        else\n        {\n            fprintf(f, \"[UT_BSP][%s] ArgV[1]=%p\\n\", tag, (void *)(ArgV ? ArgV[1] : NULL));\n        }\n    }\n    else\n    {\n        fprintf(f, \"[UT_BSP][%s] ArgV is NULL\\n\", tag);\n    }\n\n    fclose(f);\n}\n\nstatic void UT_BSP_Probe_LogCompare(const char *tag, const char *left, const char *right, int cmp)\n{\n    FILE *f = fopen(\"/tmp/logs/3403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[UT_BSP][%s] compare: left=%p \\\"%s\\\" right=\\\"%s\\\" result=%d\\n\",\n            tag, (void *)left, (left ? left : \"(null)\"), right, cmp);\n\n    fclose(f);\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n\n    UT_BSP_Probe_LogState(\"entry\", ArgC, NULL, UserShift);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        UT_BSP_Probe_LogState(\"after_getargv\", ArgC, ArgV, UserShift);\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            /* Log loop entry state */\n            UT_BSP_Probe_LogState(\"loop_start\", ArgC + 1u, ArgV, UserShift);\n\n            {\n                int cmp_d = strcmp(ArgV[0], \"-d\");\n                UT_BSP_Probe_LogCompare(\"cmp_d\", ArgV[0], \"-d\", cmp_d);\n                if (cmp_d == 0)\n                {\n                    UserShift = UTASSERT_CASETYPE_DEBUG;\n                    UT_BSP_Probe_LogState(\"set_debug\", ArgC, ArgV, UserShift);\n                }\n            }\n\n            {\n                int cmp_q = strcmp(ArgV[0], \"-q\");\n                UT_BSP_Probe_LogCompare(\"cmp_q\", ArgV[0], \"-q\", cmp_q);\n                if (cmp_q == 0)\n                {\n                    UserShift = UTASSERT_CASETYPE_FAILURE;\n                    UT_BSP_Probe_LogState(\"set_failure\", ArgC, ArgV, UserShift);\n                }\n            }\n\n            {\n                int cmp_v = strcmp(ArgV[0], \"-v\");\n                UT_BSP_Probe_LogCompare(\"cmp_v\", ArgV[0], \"-v\", cmp_v);\n                if (cmp_v == 0 && ArgC > 0)\n                {\n                    --ArgC;\n                    UT_BSP_Probe_LogState(\"found_v_before_parse\", ArgC, ArgV, UserShift);\n\n                    /* record ArgV[1] and parsing */\n                    UT_BSP_Probe_LogState(\"v_arg_before_strtoul\", ArgC, ArgV, UserShift);\n                    {\n                        unsigned long parsed = strtoul(ArgV[1], NULL, 0);\n                        UserShift = (uint8)parsed;\n                        FILE *f = fopen(\"/tmp/logs/3403.txt\", \"a\");\n                        if (f != NULL)\n                        {\n                            fprintf(f, \"[UT_BSP][parse_v] ArgV[1]=%p \\\"%s\\\" parsed=%lu new_UserShift=%u\\n\",\n                                    (void *)ArgV[1], ArgV[1], parsed, (unsigned)UserShift);\n                            fclose(f);\n                        }\n                    }\n\n                    ++ArgV;\n                    UT_BSP_Probe_LogState(\"v_arg_after_consume\", ArgC, ArgV, UserShift);\n                }\n            }\n\n            ++ArgV;\n            UT_BSP_Probe_LogState(\"loop_end\", ArgC, ArgV, UserShift);\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n        UT_BSP_Probe_LogState(\"normalize_usershift\", ArgC, ArgV, UserShift);\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n    UT_BSP_Probe_LogState(\"final\", ArgC, ArgV, UserShift);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n"
}