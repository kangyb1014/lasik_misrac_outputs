{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen:\n```c\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketOpen:\ntypedef uint32 osal_id_t\n...\ntypedef enum\n{\n    OS_SocketDomain_INVALID, /**< @brief Invalid */\n    OS_SocketDomain_INET,    /**< @brief IPv4 address family, most commonly used) */\n    OS_SocketDomain_INET6,   /**< @brief IPv6 address family, depends on OS/network stack support */\n    OS_SocketDomain_MAX      /**< @brief Maximum */\n} OS_SocketDomain_t\n...\ntypedef enum\n{\n    OS_SocketType_INVALID,  /**< @brief Invalid */\n    OS_SocketType_DATAGRAM, /**< @brief A connectionless, message-oriented socket */\n    OS_SocketType_STREAM,   /**< @brief A stream-oriented socket with the concept of a connection */\n    OS_SocketType_MAX       /**< @brief Maximum */\n} OS_SocketType_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "memset(stream, 0, sizeof(OS_stream_internal_record_t));",
    "return_code = OS_SocketOpen_Impl(&token);",
    "int32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)",
    "return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);",
    "OS_stream_internal_record_t *stream;",
    "return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);",
    "OS_CHECK_POINTER(sock_id);",
    "stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);"
  ],
  "explanation": "All other code fragments were not included because they are either not pointer usages, or they clearly require a non-const target (i.e. the pointer is used to modify or initialize the pointed-to object). Examples: Domain and Type are passed by value (not pointers); the stream pointer is written to (memset and field assignments), so it must not be const-qualified; sock_id is used as an output parameter (checked then passed to finalization), and token is produced/updated by allocation APIs. The listed fragments are the places where pointer-to-object relationships are created or pointer addresses are passed into other routines/macros and therefore should be investigated to determine whether the pointed-to type could/should be const-qualified per Rule 8.13."
}