{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment os_proto = 0; is executed unconditionally but is always overwritten on every path that reaches the later use (the socket_type switch assigns os_proto to IPPROTO_UDP or IPPROTO_TCP; if no case matches the function returns before os_proto is used). Therefore removing this assignment would not affect program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2492.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen:\n```c\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe/logging helper to capture control flow and state. */\nstatic void OS_SocketOpen_LogState(const char *stage,\n                                  void *stream_ptr,\n                                  void *token_ptr,\n                                  size_t token_size,\n                                  int32_t return_code,\n                                  long Domain,\n                                  long Type)\n{\n    FILE *f = fopen(\"/tmp/logs/2492.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"Stage: %s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \" return_code=%ld Domain=%ld Type=%ld\\n\", (long)return_code, Domain, Type);\n    fprintf(f, \" stream_ptr=%p token_addr=%p token_size=%zu\\n\", stream_ptr, token_ptr, token_size);\n\n    /* Dump up to 128 bytes of the stream memory (if available) to observe initialized values like socket_type/socket_domain\n       and to provide evidence of any zero-initialized fields that are later overwritten. */\n    if (stream_ptr != NULL)\n    {\n        unsigned char *b = (unsigned char *)stream_ptr;\n        size_t len = 128;\n        fprintf(f, \" stream_bytes:\");\n        for (size_t i = 0; i < len; ++i)\n        {\n            /* Protect against reading beyond a reasonable region in case sizeof unknown at probe time; still read 128 bytes\n               which should be safe for a stack-allocated/heap record in usual builds. */\n            fprintf(f, \" %02x\", (unsigned int)b[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    /* Dump raw bytes of the token (to observe its value regardless of exact type). */\n    if (token_ptr != NULL && token_size > 0)\n    {\n        unsigned char *tb = (unsigned char *)token_ptr;\n        size_t tlen = token_size < 64 ? token_size : 64;\n        fprintf(f, \" token_bytes:\");\n        for (size_t i = 0; i < tlen; ++i)\n        {\n            fprintf(f, \" %02x\", (unsigned int)tb[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\n/* The original function, with probing calls inserted. Preserve original logic. */\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Log entry with the Domain and Type provided. */\n    OS_SocketOpen_LogState(\"entry\", NULL, NULL, 0, 0, (long)Domain, (long)Type);\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n    /* Log result of allocation; dump token bytes (size of token on stack) */\n    OS_SocketOpen_LogState(\"after_allocate\", NULL, &token, sizeof(token), (int32_t)return_code, (long)Domain, (long)Type);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n\n        /* Log state after zero initialization to capture default/zeroed bytes (this can show the initial os_proto == 0 if present). */\n        OS_SocketOpen_LogState(\"after_memset_zero\", stream, &token, sizeof(token), (int32_t)return_code, (long)Domain, (long)Type);\n\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Log state after assigning socket_domain and socket_type (to show these fields are set and any other fields remain zero). */\n        OS_SocketOpen_LogState(\"after_set_domain_type\", stream, &token, sizeof(token), (int32_t)return_code, (long)Domain, (long)Type);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        /* Log just before calling the implementation so later logs can show what Impl did (e.g., overwriting any proto field). */\n        OS_SocketOpen_LogState(\"before_impl_call\", stream, &token, sizeof(token), (int32_t)return_code, (long)Domain, (long)Type);\n\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Log immediately after impl to capture any changes the Impl made to the stream (for example, overwriting an initially zero proto). */\n        OS_SocketOpen_LogState(\"after_impl_call\", stream, &token, sizeof(token), (int32_t)return_code, (long)Domain, (long)Type);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n\n        /* Final log showing the finalized return code and final state. */\n        OS_SocketOpen_LogState(\"after_finalize\", stream, &token, sizeof(token), (int32_t)return_code, (long)Domain, (long)Type);\n    }\n\n    return return_code;\n}\n"
}