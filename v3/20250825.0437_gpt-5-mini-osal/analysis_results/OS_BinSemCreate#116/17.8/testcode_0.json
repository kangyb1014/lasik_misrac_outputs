{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_BinSemCreate_Impl directly assigns to the non-pointer parameter 'initial_value' (initial_value = 1 when initial_value > 1). This is a direct modification of a function parameter and violates MISRA C 2023 Rule 17.8. Suggested fix: copy the parameter into a local variable (e.g. uint32 local_initial = initial_value;) and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1167.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends logs to /tmp/logs/1167.txt */\nstatic void OS_1167_Log(const char *fmt, ...)\n{\n    va_list args;\n    FILE *f = fopen(\"/tmp/logs/1167.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Log entry and parameters. Do not modify sem_initial_value here - copy for logging only. */\n    {\n        uint32 local_initial = sem_initial_value; /* local copy for probes only */\n        OS_1167_Log(\"OS_BinSemCreate ENTER: sem_id=%p, sem_name=\\\"%s\\\", sem_initial_value=%u, options=0x%08x\",\n                    (void *)sem_id, (sem_name != NULL) ? sem_name : \"(null)\", (unsigned int)local_initial, (unsigned int)options);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    OS_1167_Log(\"OS_BinSemCreate: after OS_ObjectIdAllocateNew: return_code=%d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Log state before calling OS-specific implementation (token addr and parameter values) */\n        OS_1167_Log(\"OS_BinSemCreate: before OS_BinSemCreate_Impl: token_addr=%p, sem_initial_value=%u, options=0x%08x\",\n                    (void *)&token, (unsigned int)sem_initial_value, (unsigned int)options);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Log result from OS-specific implementation to capture evidence of modifications inside Impl */\n        OS_1167_Log(\"OS_BinSemCreate: after OS_BinSemCreate_Impl: return_code=%d (sem_initial_value passed was %u).\",\n                    (int)return_code, (unsigned int)sem_initial_value);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        OS_1167_Log(\"OS_BinSemCreate: after OS_ObjectIdFinalizeNew: final_return_code=%d, sem_id=%p\",\n                    (int)return_code, (void *)sem_id);\n    }\n    else\n    {\n        /* Log failure path */\n        OS_1167_Log(\"OS_BinSemCreate: allocation failed, returning %d\", (int)return_code);\n    }\n\n    OS_1167_Log(\"OS_BinSemCreate EXIT: returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}