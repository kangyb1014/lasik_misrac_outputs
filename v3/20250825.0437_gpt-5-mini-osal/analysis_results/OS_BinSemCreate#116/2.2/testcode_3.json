{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextFree when max_id == 0 the code assigns serial = 0. In that case the for-loop (for (i = 0; i < max_id; ++i)) is never entered and the code paths that later use serial are only executed when return_code == OS_SUCCESS (which will not be the case here). Therefore the assignment to serial is executed but has no effect \u2014 removing it would not change program behaviour. This constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1162.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends human-readable traces to /tmp/logs/1162.txt */\nstatic void os_1162_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1162.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Log entry and parameters (do not dereference sem_name without a null-check) */\n    os_1162_log(\"OS_BinSemCreate ENTRY: sem_id=%p, sem_name=\\\"%s\\\", sem_initial_value=%u, options=%u\",\n                (void *)sem_id,\n                (sem_name != NULL) ? sem_name : \"(null)\",\n                (unsigned)sem_initial_value,\n                (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    os_1162_log(\"Calling OS_ObjectIdAllocateNew for name=\\\"%s\\\"\", (sem_name != NULL) ? sem_name : \"(null)\");\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    os_1162_log(\"OS_ObjectIdAllocateNew returned %d, token=%lu\", (int)return_code, (unsigned long)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n        os_1162_log(\"Allocation succeeded: token=%lu, binsem_ptr=%p\", (unsigned long)token, (void *)binsem);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n        os_1162_log(\"OS_OBJECT_INIT done for token=%lu name=\\\"%s\\\"\", (unsigned long)token,\n                    (sem_name != NULL) ? sem_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        os_1162_log(\"Calling OS_BinSemCreate_Impl: token=%lu, sem_initial_value=%u, options=%u\",\n                    (unsigned long)token, (unsigned)sem_initial_value, (unsigned)options);\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n        os_1162_log(\"OS_BinSemCreate_Impl returned %d for token=%lu\", (int)return_code, (unsigned long)token);\n\n        /* Check result, finalize record, and unlock global table. */\n        os_1162_log(\"Calling OS_ObjectIdFinalizeNew with return_code=%d, token=%lu\", (int)return_code, (unsigned long)token);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        os_1162_log(\"OS_ObjectIdFinalizeNew returned %d for token=%lu\", (int)return_code, (unsigned long)token);\n\n        if ((return_code == OS_SUCCESS) && (sem_id != NULL))\n        {\n            os_1162_log(\"OS_BinSemCreate SUCCESS: sem_id_out=%lu\", (unsigned long)*sem_id);\n        }\n        else\n        {\n            os_1162_log(\"OS_BinSemCreate FAILED: return_code=%d\", (int)return_code);\n        }\n    }\n    else\n    {\n        os_1162_log(\"OS_BinSemCreate: OS_ObjectIdAllocateNew failed with return_code=%d\", (int)return_code);\n    }\n\n    os_1162_log(\"OS_BinSemCreate EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}