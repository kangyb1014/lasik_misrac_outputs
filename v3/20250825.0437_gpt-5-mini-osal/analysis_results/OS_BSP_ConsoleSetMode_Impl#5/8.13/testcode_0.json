{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment violates MISRA C 2023 Rule 8.13 if the first parameter of OS_BSP_ExecTput is a non-const pointer (e.g. declared as void OS_BSP_ExecTput(char *capname, char *param)). Passing the string literal \"smso\" to a non-const char * parameter means the pointer does not point to a const-qualified type even though the data is not intended to be modified. The correct approach is to declare the function parameter as const char * (e.g. void OS_BSP_ExecTput(const char *capname, const char *param)) so the pointer points to a const-qualified type. If the function is already declared with a const-qualified parameter, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleSetMode_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleSetMode_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleSetMode_Impl:\n```c\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleSetMode_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging function: records control flow and state to /tmp/logs/53.txt */\nstatic void OS_BSP_LogProbe(const char *location, const char *capname, const char *param, uint32 ModeBits)\n{\n    FILE *f = fopen(\"/tmp/logs/53.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Basic record of location, ModeBits, capability and parameter */\n        fprintf(f, \"Location=%s ModeBits=0x%08X capname=%s param=%s\\n\",\n                (location != NULL) ? location : \"(null)\",\n                (unsigned)ModeBits,\n                (capname != NULL) ? capname : \"(null)\",\n                (param != NULL) ? param : \"(null)\");\n\n        /* Indicate if the capname is one of the literal capability names used in this function */\n        if (capname != NULL)\n        {\n            if (strcmp(capname, \"sgr0\") == 0)\n            {\n                fprintf(f, \"  Note: capname is literal \\\"sgr0\\\"\\n\");\n            }\n            else if (strcmp(capname, \"rmso\") == 0)\n            {\n                fprintf(f, \"  Note: capname is literal \\\"rmso\\\"\\n\");\n            }\n            else if (strcmp(capname, \"smso\") == 0)\n            {\n                /* This is the scenario of interest: a string literal \"smso\" is passed. */\n                fprintf(f, \"  Note: capname is literal \\\"smso\\\" (potential non-const pointer violation if function parameter is non-const)\\n\");\n            }\n            else if (strcmp(capname, \"setaf\") == 0)\n            {\n                fprintf(f, \"  Note: capname is literal \\\"setaf\\\"\\n\");\n            }\n        }\n\n        fclose(f);\n    }\n}\n\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        /* Entering terminal-control enabled path */\n        OS_BSP_LogProbe(\"enter_enable\", NULL, NULL, ModeBits);\n\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_LogProbe(\"normal_before_exec\", \"sgr0\", NULL, ModeBits);\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n            OS_BSP_LogProbe(\"normal_after_exec\", \"sgr0\", NULL, ModeBits);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_LogProbe(\"no_highlight_before_exec\", \"rmso\", NULL, ModeBits);\n                OS_BSP_ExecTput(\"rmso\", NULL);\n                OS_BSP_LogProbe(\"no_highlight_after_exec\", \"rmso\", NULL, ModeBits);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_LogProbe(\"highlight_before_exec\", \"smso\", NULL, ModeBits);\n                OS_BSP_ExecTput(\"smso\", NULL);\n                OS_BSP_LogProbe(\"highlight_after_exec\", \"smso\", NULL, ModeBits);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_LogProbe(\"setaf_before_exec\", \"setaf\", param, ModeBits);\n            OS_BSP_ExecTput(\"setaf\", param);\n            OS_BSP_LogProbe(\"setaf_after_exec\", \"setaf\", param, ModeBits);\n        }\n    }\n    else\n    {\n        /* Terminal control disabled: log and exit */\n        OS_BSP_LogProbe(\"enter_disabled\", NULL, NULL, ModeBits);\n    }\n}\n"
}