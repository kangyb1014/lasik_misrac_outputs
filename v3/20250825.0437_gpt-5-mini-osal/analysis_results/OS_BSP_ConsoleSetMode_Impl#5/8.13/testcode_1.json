{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function OS_BSP_ExecTput is declared to accept non-const pointers (for example: void OS_BSP_ExecTput(char *cap, char *arg);) then this call violates MISRA C 2023 Rule 8.13. Neither the string literal \"setaf\" nor the local buffer param are modified by the call, so the parameters should be declared as const-qualified pointers (e.g. const char *cap, const char *arg). Passing read-only data to non-const pointer parameters therefore breaches the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleSetMode_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleSetMode_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleSetMode_Impl:\n```c\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleSetMode_Impl code.\n",
  "test_code": "void OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n    FILE *log = fopen(\"/tmp/logs/53.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and basic state */\n        fprintf(log, \"OS_BSP_ConsoleSetMode_Impl ENTER: ModeBits=%u, EnableTermControl=%d, param_addr=%p\\n\",\n                (unsigned)ModeBits,\n                (int)OS_BSP_GenericLinuxGlobal.EnableTermControl,\n                (void *)param);\n        fflush(log);\n    }\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            if (log != NULL)\n            {\n                /* Log before calling with a string literal and NULL arg */\n                fprintf(log, \"Branch: NORMAL -> calling OS_BSP_ExecTput(cap=\\\"%s\\\", cap_addr=%p, arg=NULL)\\n\",\n                        \"sgr0\",\n                        (const void *)\"sgr0\");\n                fflush(log);\n            }\n\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"Branch: NO_HIGHLIGHT -> calling OS_BSP_ExecTput(cap=\\\"%s\\\", cap_addr=%p, arg=NULL)\\n\",\n                            \"rmso\",\n                            (const void *)\"rmso\");\n                    fflush(log);\n                }\n\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"Branch: HIGHLIGHT -> calling OS_BSP_ExecTput(cap=\\\"%s\\\", cap_addr=%p, arg=NULL)\\n\",\n                            \"smso\",\n                            (const void *)\"smso\");\n                    fflush(log);\n                }\n\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            /* Build the color parameter into the local buffer as before */\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n\n            if (log != NULL)\n            {\n                /* Log the computed parameter content and addresses to show what is passed */\n                fprintf(log, \"After snprintf: param=\\\"%s\\\", param_addr=%p\\n\", param, (void *)param);\n                fprintf(log, \"About to call OS_BSP_ExecTput(cap=\\\"%s\\\", cap_addr=%p, arg=param (addr=%p))\\n\",\n                        \"setaf\",\n                        (const void *)\"setaf\",\n                        (void *)param);\n\n                /* Heuristic evidence: compare addresses of the literal and the local buffer to show they differ */\n                fprintf(log, \"Literal 'setaf' addr=%p, param addr=%p, are_same_addr=%d\\n\",\n                        (const void *)\"setaf\",\n                        (void *)param,\n                        ((const void *)\"setaf\" == (const void *)param) ? 1 : 0);\n\n                fflush(log);\n            }\n\n            /* Original call preserved */\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_BSP_ConsoleSetMode_Impl EXIT: ModeBits=%u\\n\", (unsigned)ModeBits);\n        fclose(log);\n    }\n}\n"
}