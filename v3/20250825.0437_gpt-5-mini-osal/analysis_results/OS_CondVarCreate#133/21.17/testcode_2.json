{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_CHECK_APINAME(var_name) expands to OS_CHECK_STRING(var_name,OS_MAX_API_NAME,...). If OS_CHECK_STRING is implemented using unbounded string functions (e.g. strlen(var_name) or strncpy without a prior bounded-length check) then a caller-supplied var_name that is not null-terminated or points to a shorter object can cause the string routine to read beyond the bounds of the object referenced by var_name. For example, if OS_CHECK_STRING uses strlen(var_name) and the caller passes a non-null-terminated buffer, strlen will scan past the buffer end -> out-of-bounds access (MISRA C 2023 Rule 21.17 violation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1339.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe logging helper -- appends diagnostic records to /tmp/logs/1339.txt. */\nstatic void OS_CondVarCreate_LogProbe(const char *stage,\n                                      const osal_id_t *var_id,\n                                      const char *var_name,\n                                      uint32 options,\n                                      const void *token_addr,\n                                      int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    /* Log timestamp, stage, pointers (as integer), option and return code. Do not dereference var_name. */\n    fprintf(f, \"[%ld] stage=%s var_id_ptr=%p var_name_ptr=%p options=%u token_addr=%p return_code=%ld\\n\",\n            (long)now,\n            stage != NULL ? stage : \"(null)\",\n            (void *)var_id,\n            (void *)var_name,\n            (unsigned)options,\n            token_addr,\n            (long)return_code);\n\n    /* If var_name is non-NULL, also log whether it appears to be an ASCII printable pointer (pointer only). */\n    if (var_name == NULL)\n    {\n        fprintf(f, \"  note: var_name == NULL\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  note: var_name not NULL (content not dereferenced to avoid introducing reads)\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Probe: entry */\n    OS_CondVarCreate_LogProbe(\"entry\", var_id, var_name, options, NULL, -1);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n\n    /* Probe: before API name check */\n    OS_CondVarCreate_LogProbe(\"before_API_name_check\", var_id, var_name, options, NULL, -1);\n\n    OS_CHECK_APINAME(var_name);\n\n    /* Probe: after API name check */\n    OS_CondVarCreate_LogProbe(\"after_API_name_check\", var_id, var_name, options, NULL, -1);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_CondVarCreate_LogProbe(\"alloc_start\", var_id, var_name, options, NULL, -1);\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    OS_CondVarCreate_LogProbe(\"alloc_result\", var_id, var_name, options, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_CondVarCreate_LogProbe(\"init_start\", var_id, var_name, options, &token, return_code);\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n        OS_CondVarCreate_LogProbe(\"init_done\", var_id, var_name, options, &token, return_code);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_CondVarCreate_LogProbe(\"impl_start\", var_id, var_name, options, &token, return_code);\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        OS_CondVarCreate_LogProbe(\"impl_result\", var_id, var_name, options, &token, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        OS_CondVarCreate_LogProbe(\"finalize_start\", var_id, var_name, options, &token, return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        OS_CondVarCreate_LogProbe(\"finalize_result\", var_id, var_name, options, &token, return_code);\n    }\n\n    OS_CondVarCreate_LogProbe(\"exit\", var_id, var_name, options, NULL, return_code);\n\n    return return_code;\n}\n"
}