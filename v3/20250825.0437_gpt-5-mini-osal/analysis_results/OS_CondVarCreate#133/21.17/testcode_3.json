{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_APINAME expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...). If OS_CHECK_STRING is implemented using a string.h function such as strlen(str) to check length, this can read past the end of the caller's object when the provided var_name is not NUL-terminated within its allocated bounds. For example, if a caller passes a char name[OS_MAX_API_NAME] that is entirely filled with non-NUL bytes (no terminating '\\0'), a strlen(name) in OS_CHECK_STRING will scan past the array and thus access memory beyond the bounds of the object referenced by the pointer parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1339.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state without reading the contents of var_name. */\nstatic void __os_condvar_create_probe(const char *stage, osal_id_t *var_id, const char *var_name, uint32 options, int32 return_code, const void *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* Log stage, pointer values and simple scalar state. Do NOT attempt to treat var_name as a NUL-terminated C string here. */\n    fprintf(f, \"[OS_CondVarCreate] stage=%s var_id=%p var_name=%p options=%u return_code=%d token=%p\\n\",\n            stage, (void *)var_id, (void *)var_name, (unsigned)options, (int)return_code, token_ptr);\n    fclose(f);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* entry probe */\n    __os_condvar_create_probe(\"entry\", var_id, var_name, options, -1, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n\n    /* Probe just before the potentially problematic API-name check. This records that the check was reached and the pointer value\n       for var_name, without dereferencing var_name as a C string (which could itself read past the caller's object). */\n    __os_condvar_create_probe(\"before_OS_CHECK_APINAME\", var_id, var_name, options, -1, NULL);\n\n    OS_CHECK_APINAME(var_name);\n\n    /* Probe immediately after the API-name check. If the process crashes inside OS_CHECK_APINAME (e.g. due to a strlen reading past\n       the end of the caller's buffer) this \"after\" probe will not be seen in the log, which provides evidence the crash occurred\n       inside the check. */\n    __os_condvar_create_probe(\"after_OS_CHECK_APINAME\", var_id, var_name, options, -1, NULL);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n\n    __os_condvar_create_probe(\"after_ObjectIdAllocateNew\", var_id, var_name, options, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        __os_condvar_create_probe(\"after_OBJECT_INIT\", var_id, var_name, options, -1, &token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        __os_condvar_create_probe(\"after_Impl\", var_id, var_name, options, return_code, &token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n\n        __os_condvar_create_probe(\"after_ObjectIdFinalizeNew\", var_id, var_name, options, return_code, var_id);\n    }\n\n    __os_condvar_create_probe(\"exit\", var_id, var_name, options, return_code, NULL);\n\n    return return_code;\n}\n"
}