{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts away const by converting 'const char *name' to 'void *' in the call: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This discards the const qualifier on the string pointer and therefore violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible). If OS_ObjectIdFindNextMatch/OS_ObjectNameMatch do not need to modify the string, the parameter should be declared as 'const void *' (or the match callback accept 'const char *') to preserve constness.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Helper probe function to append logs to /tmp/logs/1333.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1333.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n        fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n                tm->tm_year + 1900,\n                tm->tm_mon + 1,\n                tm->tm_mday,\n                tm->tm_hour,\n                tm->tm_min,\n                tm->tm_sec);\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and parameters */\n    log_probe(\"Entering OS_CondVarCreate: var_id=%p, var_name=%p, var_name_str='%s', options=0x%08x\",\n              (void *)var_id, (const void *)var_name, (var_name != NULL) ? var_name : \"(null)\", (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    log_probe(\"Parameters passed checks: var_id=%p, var_name=%p\", (void *)var_id, (const void *)var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    log_probe(\"After OS_ObjectIdAllocateNew: return_code=%d, token_address=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n        log_probe(\"Allocated token maps to condvar pointer=%p\", (void *)condvar);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n        log_probe(\"OS_OBJECT_INIT called for token; name saved='%s'\", (var_name != NULL) ? var_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        log_probe(\"After OS_CondVarCreate_Impl: return_code=%d\", return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        log_probe(\"After OS_ObjectIdFinalizeNew: final_return_code=%d, var_id=%p (%p)\", return_code, (void *)var_id, (void *)(var_id ? (void *)*var_id : NULL));\n    }\n    else\n    {\n        log_probe(\"OS_ObjectIdAllocateNew failed: return_code=%d\", return_code);\n    }\n\n    log_probe(\"Exiting OS_CondVarCreate with return_code=%d\", return_code);\n    return return_code;\n}\n"
}