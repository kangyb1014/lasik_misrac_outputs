{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_NotifyEvent calls the function pointer OS_SharedGlobalVars.EventHandler(event, object_id, data). If that pointer is set to OS_NotifyEvent itself (or to any handler that calls OS_NotifyEvent), this yields indirect recursion: OS_NotifyEvent -> EventHandler -> OS_NotifyEvent -> ... (or mutual recursion), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1336.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helpers. These are non-intrusive and preserve function behavior. */\nstatic void os_probe_write(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1336.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging; do not change program flow */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* Note: keep the original signature exactly as provided. */\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Entry probe: log input parameters */\n    os_probe_write(\"OS_CondVarCreate ENTRY: var_id=%p, var_name=%s, options=0x%08\" PRIx32,\n                   (void *)var_id, (var_name != NULL) ? var_name : \"(null)\", (uint32)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n\n    /* Probe after allocation attempt */\n    os_probe_write(\"OS_ObjectIdAllocateNew returned %ld, token=(uintptr_t)=%\" PRIuPTR,\n                   (long)return_code, (uintptr_t)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Probe: table entry and pointer */\n        os_probe_write(\"Allocated condvar record at %p for token=%\" PRIuPTR,\n                       (void *)condvar, (uintptr_t)token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Probe: after init */\n        os_probe_write(\"OS_OBJECT_INIT completed for token=%\" PRIuPTR \" name=%s\",\n                       (uintptr_t)token, (var_name != NULL) ? var_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        os_probe_write(\"Calling OS_CondVarCreate_Impl with token=%\" PRIuPTR \" options=0x%08\" PRIx32,\n                       (uintptr_t)token, (uint32)options);\n\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Probe: result of platform-specific create */\n        os_probe_write(\"OS_CondVarCreate_Impl returned %ld for token=%\" PRIuPTR,\n                       (long)return_code, (uintptr_t)token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n\n        /* Probe: finalization result and assigned id (if any) */\n        if (var_id != NULL)\n        {\n            os_probe_write(\"OS_ObjectIdFinalizeNew returned %ld, final var_id=%p, *var_id=%\" PRIuPTR,\n                           (long)return_code, (void *)var_id, (uintptr_t)(*var_id));\n        }\n        else\n        {\n            os_probe_write(\"OS_ObjectIdFinalizeNew returned %ld, var_id pointer was NULL\",\n                           (long)return_code);\n        }\n    }\n    else\n    {\n        /* Probe: allocation failed */\n        os_probe_write(\"OS_ObjectIdAllocateNew failed with %ld; skipping creation\", (long)return_code);\n    }\n\n    os_probe_write(\"OS_CondVarCreate EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}