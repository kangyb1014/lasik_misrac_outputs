{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible via the event callback. Sequence: OS_CondVarCreate -> OS_ObjectIdAllocateNew -> (on failure path) OS_ObjectIdFinalizeNew -> OS_NotifyEvent -> EventHandler (application-supplied) -> calls OS_CondVarCreate (or another OS_ObjectIdAllocateNew) -> OS_ObjectIdFinalizeNew. This yields an indirect call cycle (OS_ObjectIdFinalizeNew -> OS_NotifyEvent -> EventHandler -> OS_CondVarCreate -> ... -> OS_ObjectIdFinalizeNew).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1336.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe logging helper - appends human-readable events to /tmp/logs/1336.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1336.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Simple timestamp (best-effort) */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm = localtime_r(&t, &tm_buf);\n    if (tm != NULL)\n    {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n    else\n    {\n        fprintf(f, \"---- notime ---- \");\n    }\n\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and parameters */\n    os_probe_log(\"ENTER OS_CondVarCreate: var_id=%p var_name=\\\"%s\\\" options=%u\",\n                 (void *)var_id, (var_name != NULL ? var_name : \"(null)\"), (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n\n    os_probe_log(\"OS_ObjectIdAllocateNew returned: %d, token=%\" PRIxPTR,\n                 (int)return_code, (uintptr_t)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Log the retrieved table entry pointer */\n        os_probe_log(\"OS_OBJECT_TABLE_GET -> condvar ptr=%p (token=%\" PRIxPTR \")\",\n                     (void *)condvar, (uintptr_t)token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        os_probe_log(\"OS_OBJECT_INIT done for token=%\" PRIxPTR \" name=\\\"%s\\\"\",\n                     (uintptr_t)token, (var_name != NULL ? var_name : \"(null)\"));\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        os_probe_log(\"Calling OS_CondVarCreate_Impl for token=%\" PRIxPTR \", options=%u\",\n                     (uintptr_t)token, (unsigned)options);\n\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        os_probe_log(\"OS_CondVarCreate_Impl returned: %d for token=%\" PRIxPTR,\n                     (int)return_code, (uintptr_t)token);\n\n        /* Check result, finalize record, and unlock global table. */\n        os_probe_log(\"Calling OS_ObjectIdFinalizeNew(return_code=%d, token=%\" PRIxPTR \")\",\n                     (int)return_code, (uintptr_t)token);\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n\n        os_probe_log(\"OS_ObjectIdFinalizeNew returned: %d (final var_id=%p)\",\n                     (int)return_code, (void *)var_id);\n    }\n    else\n    {\n        /* Log the failure path where allocation failed */\n        os_probe_log(\"OS_ObjectIdAllocateNew failed with code %d, skipping creation\", (int)return_code);\n    }\n\n    os_probe_log(\"EXIT OS_CondVarCreate: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}