{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion if OS_DEBUG invokes any routine that eventually calls OS_printf. Specifically: OS_printf -> OS_DEBUG (as shown) -> (implementation of OS_DEBUG uses OS_printf or a call path that leads back to OS_printf) -> OS_printf. This creates an indirect self-call and therefore violates Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1826.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mount:\n```c\nint32 OS_mount(const char *devname, const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(devname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * FIXED flag _should_ always be unset (these don't support mount/unmount)\n         * but to support abstraction this is not enforced.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) != OS_FILESYS_FLAG_IS_READY)\n        {\n            /* mount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if (filesys->system_mountpt[0] == 0)\n        {\n            /*\n             * The system mount point should be a non-empty string.\n             */\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            strncpy(filesys->virtual_mountpt, mountpoint, sizeof(filesys->virtual_mountpt) - 1);\n            filesys->virtual_mountpt[sizeof(filesys->virtual_mountpt) - 1] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - appends human-readable trace to /tmp/logs/1826.txt\n * This intentionally uses standard C library I/O (fopen/fprintf) rather than\n * any OS-specific logging primitives to avoid creating indirect call paths\n * that could themselves trigger the recursion scenario being investigated.\n */\nstatic void OS_mount_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1826.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_mount(const char *devname, const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Log entry and parameters */\n    OS_mount_probe_log(\"OS_mount ENTRY: devname='%s' mountpoint='%s'\", devname ? devname : \"(null)\", mountpoint ? mountpoint : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_STRING(devname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    OS_mount_probe_log(\"Before OS_ObjectIdGetByName: devname='%s'\", devname ? devname : \"(null)\");\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, devname, &token);\n    OS_mount_probe_log(\"After OS_ObjectIdGetByName: return_code=%d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        OS_mount_probe_log(\"Located filesys: filesys=%p\", (void *)filesys);\n\n        if (filesys != NULL)\n        {\n            /* Log current filesys state (flags and mount points) as best-effort */\n            OS_mount_probe_log(\"filesys state: flags=0x%08x system_mountpt='%s' virtual_mountpt='%s'\",\n                               (unsigned)filesys->flags,\n                               filesys->system_mountpt ? filesys->system_mountpt : \"\",\n                               filesys->virtual_mountpt ? filesys->virtual_mountpt : \"\");\n        }\n        else\n        {\n            OS_mount_probe_log(\"Warning: filesys pointer is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        /*\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * FIXED flag _should_ always be unset (these don't support mount/unmount)\n         * but to support abstraction this is not enforced.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) != OS_FILESYS_FLAG_IS_READY)\n        {\n            /* mount() cannot be used on this file system at this time */\n            OS_mount_probe_log(\"filesys state invalid for mount: flags=0x%08x\", (unsigned)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if (filesys->system_mountpt[0] == 0)\n        {\n            /*\n             * The system mount point should be a non-empty string.\n             */\n            OS_mount_probe_log(\"filesys has empty system_mountpt: cannot mount\");\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            OS_mount_probe_log(\"Calling OS_FileSysMountVolume_Impl for token at %p\", (void *)&token);\n            return_code = OS_FileSysMountVolume_Impl(&token);\n            OS_mount_probe_log(\"OS_FileSysMountVolume_Impl returned %d\", (int)return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            OS_mount_probe_log(\"Mount successful: marking filesys as mounted (pre-change flags=0x%08x)\", (unsigned)filesys->flags);\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            strncpy(filesys->virtual_mountpt, mountpoint, sizeof(filesys->virtual_mountpt) - 1);\n            filesys->virtual_mountpt[sizeof(filesys->virtual_mountpt) - 1] = 0;\n            OS_mount_probe_log(\"filesys updated: flags=0x%08x virtual_mountpt='%s'\",\n                               (unsigned)filesys->flags,\n                               filesys->virtual_mountpt);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_mount_probe_log(\"Released token and continuing\");\n    }\n\n    OS_mount_probe_log(\"Before final return check: interim return_code=%d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_mount_probe_log(\"Mapping non-success return to OS_ERR_NAME_NOT_FOUND (was %d)\", (int)return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    OS_mount_probe_log(\"OS_mount EXIT: return=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}