{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment `delete_hook = NULL;` is dead code. The only subsequent use of delete_hook is in the condition `if (return_code == OS_SUCCESS && delete_hook != NULL)` and when return_code == OS_SUCCESS the preceding if-block must have executed and assigned `delete_hook = task->delete_hook_pointer;`. If the preceding block did not execute, return_code != OS_SUCCESS and delete_hook is not used. Therefore removing the initial `delete_hook = NULL;` would not change program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskInstallDeleteHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2602.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskInstallDeleteHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskInstallDeleteHandler:\n```c\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    task_id     = OS_TaskGetId_Impl();\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskInstallDeleteHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n    FILE *log = NULL;\n\n    /* Try to create the logs directory if it does not exist (best-effort). */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    /* Open log file for append. If this fails, continue without logging. */\n    log = fopen(\"/tmp/logs/2602.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_TaskInstallDeleteHandler: entry\\n\");\n    }\n\n    task_id     = OS_TaskGetId_Impl();\n    if (log) fprintf(log, \"OS_TaskInstallDeleteHandler: task_id = %u\\n\", (unsigned)task_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (log) fprintf(log, \"OS_TaskInstallDeleteHandler: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (log)\n        {\n            /* Log information useful to reproduce the reported scenario. Do not dereference\n             * pointers beyond what the original code does; just record addresses/values. */\n            fprintf(log, \"OS_TaskInstallDeleteHandler: token address=%p, task ptr=%p, function_pointer=%p\\n\",\n                    (void *)&token, (void *)task, (void *)function_pointer);\n        }\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        if (log) fprintf(log, \"OS_TaskInstallDeleteHandler: assigned task->delete_hook_pointer = %p\\n\",\n                         (void *)task->delete_hook_pointer);\n\n        OS_ObjectIdRelease(&token);\n\n        if (log) fprintf(log, \"OS_TaskInstallDeleteHandler: released token\\n\");\n    }\n    else\n    {\n        if (log) fprintf(log, \"OS_TaskInstallDeleteHandler: not OS_SUCCESS, skipping install (return_code=%d)\\n\",\n                         (int)return_code);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_TaskInstallDeleteHandler: exit with return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}