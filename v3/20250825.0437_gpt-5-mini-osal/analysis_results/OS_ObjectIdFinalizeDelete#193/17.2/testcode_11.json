{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 potential indirect recursion via the event callback: OS_rmfs() -> OS_ObjectIdFinalizeDelete() -> OS_NotifyEvent() -> OS_SharedGlobalVars.EventHandler(...) -> (application callback calls) OS_rmfs(). This sequence would cause OS_rmfs to be invoked indirectly from itself, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1936.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <errno.h>\n\n/* Probe helper: write structured log entries to /tmp/logs/1936.txt.\n * This helper intentionally does not alter any program state.\n */\nstatic void OS_ObjectIdFinalizeDelete_LogProbe(const char *stage, int32 operation_status, const void *token_ptr, long long token_obj_id, long long final_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change behavior of the function. */\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"%ld: %s - operation_status=%d, token=%p, token->obj_id=%lld, final_id=%lld\\n\",\n            (long)now, stage, operation_status, token_ptr, token_obj_id, final_id);\n    fclose(f);\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Log entry with initial state. */\n    OS_ObjectIdFinalizeDelete_LogProbe(\"ENTRY\", operation_status, (const void *)token,\n                                       (token != NULL) ? (long long)token->obj_id : (long long)-1,\n                                       (long long)-1);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_ObjectIdFinalizeDelete_LogProbe(\"BRANCH_SUCCESS_SET_FINAL_UNDEFINED\", operation_status, (const void *)token,\n                                           (token != NULL) ? (long long)token->obj_id : (long long)-1,\n                                           (long long)final_id);\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        OS_ObjectIdFinalizeDelete_LogProbe(\"BRANCH_FAILURE_RESTORE_ID\", operation_status, (const void *)token,\n                                           (token != NULL) ? (long long)token->obj_id : (long long)-1,\n                                           (long long)final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdFinalizeDelete_LogProbe(\"BEFORE_TransactionFinish\", operation_status, (const void *)token,\n                                       (token != NULL) ? (long long)token->obj_id : (long long)-1,\n                                       (long long)final_id);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_ObjectIdFinalizeDelete_LogProbe(\"AFTER_TransactionFinish\", operation_status, (const void *)token,\n                                       (token != NULL) ? (long long)token->obj_id : (long long)-1,\n                                       (long long)final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_ObjectIdFinalizeDelete_LogProbe(\"BEFORE_NotifyEvent\", operation_status, (const void *)token,\n                                           (token != NULL) ? (long long)token->obj_id : (long long)-1,\n                                           (long long)final_id);\n\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n\n        OS_ObjectIdFinalizeDelete_LogProbe(\"AFTER_NotifyEvent\", operation_status, (const void *)token,\n                                           (token != NULL) ? (long long)token->obj_id : (long long)-1,\n                                           (long long)final_id);\n    }\n\n    OS_ObjectIdFinalizeDelete_LogProbe(\"EXIT\", operation_status, (const void *)token,\n                                       (token != NULL) ? (long long)token->obj_id : (long long)-1,\n                                       (long long)final_id);\n\n    return operation_status;\n}\n"
}