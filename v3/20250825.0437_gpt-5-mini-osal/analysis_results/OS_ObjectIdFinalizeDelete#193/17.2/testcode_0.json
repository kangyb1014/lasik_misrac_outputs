{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible via the event callback: OS_ModuleUnload -> OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> OS_SharedGlobalVars.EventHandler (application callback) -> OS_ModuleUnload (called by the callback). For example, if module->module_type == OS_MODULE_TYPE_DYNAMIC and OS_ModuleUnload_Impl returns OS_SUCCESS, OS_ObjectIdFinalizeDelete will invoke OS_NotifyEvent with OS_EVENT_RESOURCE_DELETED; if the application EventHandler calls OS_ModuleUnload for the same module_id, this re-enters OS_ModuleUnload causing indirect recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1936.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe logger: append human-readable trace to /tmp/logs/1936.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1936.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, fail silently to avoid changing behavior */\n        return;\n    }\n\n    time_t now = time(NULL);\n    pid_t pid = getpid();\n\n    fprintf(f, \"[%ld][pid:%d] \", (long)now, (int)pid);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    os_probe_log(\"ENTER OS_ObjectIdFinalizeDelete: operation_status=%d token->obj_id=%llu\",\n                 (int)operation_status, (unsigned long long)token->obj_id);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        os_probe_log(\"operation_status == OS_SUCCESS: setting final_id = OS_OBJECT_ID_UNDEFINED\");\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        os_probe_log(\"operation_status != OS_SUCCESS: restoring final_id = token->obj_id=%llu\",\n                     (unsigned long long)token->obj_id);\n    }\n\n    /* Either way we must unlock the object type */\n    os_probe_log(\"Before OS_ObjectIdTransactionFinish: final_id=%llu token->obj_id=%llu\",\n                 (unsigned long long)final_id, (unsigned long long)token->obj_id);\n\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    os_probe_log(\"After OS_ObjectIdTransactionFinish: final_id=%llu token->obj_id=%llu\",\n                 (unsigned long long)final_id, (unsigned long long)token->obj_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        os_probe_log(\"About to call OS_NotifyEvent: event=OS_EVENT_RESOURCE_DELETED obj_id=%llu\",\n                     (unsigned long long)token->obj_id);\n\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n\n        os_probe_log(\"Returned from OS_NotifyEvent: event=OS_EVENT_RESOURCE_DELETED obj_id=%llu\",\n                     (unsigned long long)token->obj_id);\n    }\n\n    os_probe_log(\"EXIT OS_ObjectIdFinalizeDelete: operation_status=%d final_id=%llu token->obj_id=%llu\",\n                 (int)operation_status, (unsigned long long)final_id, (unsigned long long)token->obj_id);\n\n    return operation_status;\n}\n"
}