{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a local osal_id_t (final_id) to OS_ObjectIdTransactionFinish. If the implementation of OS_ObjectIdTransactionFinish only reads the value pointed-to (i.e. it does not modify *id), then the parameter should be declared as const osal_id_t * and the current declaration (taking a non-const pointer) violates MISRA C 2023 Rule 8.13. Example violation: prototype is OS_ObjectIdTransactionFinish(OS_object_token_t *token, osal_id_t *id) but the function only reads *id. (If the function does intentionally modify *id, then a non-const pointer is required and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n    osal_id_t final_before;\n    osal_id_t final_after;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Capture the value before calling the transaction finish */\n    final_before = final_id;\n\n    /* Log entry showing control path and state before the call */\n    {\n        FILE *f = fopen(\"/tmp/logs/1933.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ObjectIdFinalizeDelete: enter op=%ld, token=%p, token->obj_id=%llu, final_before=%llu\\n\",\n                    (long)operation_status, (void *)token,\n                    (unsigned long long)token->obj_id, (unsigned long long)final_before);\n            fclose(f);\n        }\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Capture the value after the call to detect whether the callee modified *id */\n    final_after = final_id;\n\n    /* Log exit showing whether final_id was modified by OS_ObjectIdTransactionFinish */\n    {\n        FILE *f = fopen(\"/tmp/logs/1933.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ObjectIdFinalizeDelete: after OS_ObjectIdTransactionFinish final_after=%llu, modified=%s\\n\",\n                    (unsigned long long)final_after,\n                    (final_after != final_before) ? \"true\" : \"false\");\n            fclose(f);\n        }\n    }\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n"
}