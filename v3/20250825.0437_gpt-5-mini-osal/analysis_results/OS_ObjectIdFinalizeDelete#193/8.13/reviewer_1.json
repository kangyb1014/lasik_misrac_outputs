{
  "user_message": "An agent A claimed that the following OS_ObjectIdFinalizeDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFinalizeDelete.\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes the address of a local osal_id_t (final_id) to OS_ObjectIdTransactionFinish. If the implementation of OS_ObjectIdTransactionFinish only reads the value pointed-to (i.e. it does not modify *id), then the parameter should be declared as const osal_id_t * and the current declaration (taking a non-const pointer) violates MISRA C 2023 Rule 8.13. Example violation: prototype is OS_ObjectIdTransactionFinish(OS_object_token_t *token, osal_id_t *id) but the function only reads *id. (If the function does intentionally modify *id, then a non-const pointer is required and there is no violation.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 requires pointers to be const-qualified where possible (i.e. when the callee does not modify the pointed-to object). The code you showed calls OS_ObjectIdTransactionFinish(token, &final_id). Whether this is a Rule 8.13 violation cannot be determined from this caller alone \u2014 it depends on the declaration/definition of OS_ObjectIdTransactionFinish and whether that function modifies *id. If OS_ObjectIdTransactionFinish only reads the value pointed-to, its prototype should be changed to take a pointer-to-const (e.g. const osal_id_t *id) or better yet take osal_id_t by value; in that case the current non-const pointer parameter would violate Rule 8.13. If, however, OS_ObjectIdTransactionFinish intentionally modifies *id, then the non-const parameter is required and there is no violation. Recommendation: inspect the OS_ObjectIdTransactionFinish prototype/implementation. If it does not modify the pointed value, change its parameter to const osal_id_t * (or pass the id by value). Without that information, the agent A report is not conclusively correct."
}