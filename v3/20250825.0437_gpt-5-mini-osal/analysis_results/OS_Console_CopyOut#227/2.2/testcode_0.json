{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment return_code = OS_ERROR at the start of OS_Console_CopyOut is redundant. The function enters a while(true) loop and every path that breaks out of the loop assigns return_code to either OS_SUCCESS (when the string terminator is found) or OS_QUEUE_FULL (when the buffer is full). There is no execution path that returns the initial OS_ERROR value, so removing the assignment would not change program behaviour \u2014 it is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Console_CopyOut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2272.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Console_CopyOut as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Console_CopyOut:\n```c\nstatic int32 OS_Console_CopyOut(OS_console_internal_record_t *console, const char *Str, size_t *NextWritePos)\n{\n    const char *pmsg;\n    size_t      WriteOffset;\n    int32       return_code;\n\n    return_code = OS_ERROR;\n    pmsg        = Str;\n    WriteOffset = *NextWritePos;\n    while (true)\n    {\n        if (*pmsg == 0)\n        {\n            /* String is complete */\n            *NextWritePos = WriteOffset;\n            return_code   = OS_SUCCESS;\n            break;\n        }\n        console->BufBase[WriteOffset] = *pmsg;\n        WriteOffset                   = WriteOffset + 1;\n        if (WriteOffset >= console->BufSize)\n        {\n            WriteOffset = 0;\n        }\n\n        if (WriteOffset == console->ReadPos)\n        {\n            /* out of space */\n            return_code = OS_QUEUE_FULL;\n            break;\n        }\n\n        ++pmsg;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_Console_CopyOut code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging function: append control-flow and state information to /tmp/logs/2272.txt */\nstatic void OS_Console_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2272.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int32 OS_Console_CopyOut(OS_console_internal_record_t *console, const char *Str, size_t *NextWritePos)\n{\n    const char *pmsg;\n    size_t      WriteOffset;\n    int32       return_code;\n\n    /* Original initialization retained for fidelity to original logic */\n    return_code = OS_ERROR;\n\n    /* Log initial assignment and initial state to provide evidence that this value is overwritten */\n    OS_Console_Log(\"Init: Assigned return_code = OS_ERROR (%ld); Str=%p, first_char='%c', *NextWritePos=%zu, ReadPos=%zu, BufSize=%zu\",\n                   (long)OS_ERROR,\n                   (void *)Str,\n                   (Str != NULL && Str[0] != 0) ? Str[0] : '\\0',\n                   *NextWritePos,\n                   console->ReadPos,\n                   console->BufSize);\n\n    pmsg        = Str;\n    WriteOffset = *NextWritePos;\n    while (true)\n    {\n        /* Log entry to loop with current pointers and indices */\n        OS_Console_Log(\"Loop: pmsg=%p, char_at_pmsg='%c', WriteOffset=%zu, ReadPos=%zu\",\n                       (void *)pmsg,\n                       (pmsg != NULL && *pmsg != 0) ? *pmsg : '\\0',\n                       WriteOffset,\n                       console->ReadPos);\n\n        if (*pmsg == 0)\n        {\n            /* String is complete */\n            *NextWritePos = WriteOffset;\n            return_code   = OS_SUCCESS;\n            OS_Console_Log(\"Action: string terminator found. *NextWritePos set to %zu; return_code set to OS_SUCCESS (%ld)\", *NextWritePos, (long)OS_SUCCESS);\n            break;\n        }\n\n        console->BufBase[WriteOffset] = *pmsg;\n        OS_Console_Log(\"Action: wrote '%c' into BufBase[%zu]\", *pmsg, WriteOffset);\n\n        WriteOffset                   = WriteOffset + 1;\n        if (WriteOffset >= console->BufSize)\n        {\n            WriteOffset = 0;\n            OS_Console_Log(\"Action: WriteOffset wrapped to 0 (BufSize=%zu)\", console->BufSize);\n        }\n\n        if (WriteOffset == console->ReadPos)\n        {\n            /* out of space */\n            return_code = OS_QUEUE_FULL;\n            OS_Console_Log(\"Action: out of space detected. WriteOffset==ReadPos==%zu; return_code set to OS_QUEUE_FULL (%ld)\", WriteOffset, (long)OS_QUEUE_FULL);\n            break;\n        }\n\n        ++pmsg;\n    }\n\n    /* Log final state just before returning to capture that the initial OS_ERROR was not returned */\n    OS_Console_Log(\"Exit: returning return_code=%ld; NextWritePos=%zu\", (long)return_code, *NextWritePos);\n\n    return return_code;\n}\n"
}