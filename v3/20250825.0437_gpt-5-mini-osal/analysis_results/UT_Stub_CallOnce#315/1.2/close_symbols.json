{
  "user_message": "Target function code is:\n```c\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        Func();\n    }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'UT_Stub_CallOnce': {'callees': ['UtAssert_Abort'], 'callers': ['UT_AllocStubObjId', 'UT_DeleteStubObjId']}, 'UtAssert_Abort': {'callees': ['UT_BSP_DoText'], 'callers': ['UT_Stub_CallOnce', 'UT_ConfigureGenericStubReturnValue', 'UT_Stub_RegisterReturnType', 'UT_Stub_GetReturnValuePtr', 'UT_SetDataBuffer', 'UT_DoSetHookFunction', 'UT_Hook_GetArgPtr', 'UT_Stub_RegisterContextWithMetaData', 'UT_Stub_CopyToReturnValue', 'UT_DefaultStubImplWithArgs', 'UT_AllocStubObjId']}, 'UT_AllocStubObjId': {'callees': ['UT_Stub_CallOnce', 'UtAssert_Abort', 'UtAssert_GetContext', 'UT_ObjIdCompose'], 'callers': ['UT_DefaultHandler_OS_BinSemCreate', 'UT_DefaultHandler_OS_CountSemCreate', 'UT_DefaultHandler_OS_DirectoryOpen', 'UT_DefaultHandler_OS_OpenCreate', 'UT_DefaultHandler_OS_FileSysAddFixedMap', 'UT_DefaultHandler_OS_ModuleLoad', 'UT_DefaultHandler_OS_MutSemCreate', 'UT_DefaultHandler_OS_QueueCreate', 'UT_DefaultHandler_OS_SocketOpen', 'UT_DefaultHandler_OS_TaskCreate', 'UT_DefaultHandler_OS_TimerAdd', 'UT_DefaultHandler_OS_TimerCreate', 'UT_DefaultHandler_OS_TimeBaseCreate']}, 'UT_DeleteStubObjId': {'callees': ['UT_Stub_CallOnce', 'UT_ObjIdDecompose', 'UtAssert_GetContext'], 'callers': ['UT_DefaultHandler_OS_BinSemDelete', 'UT_DefaultHandler_OS_CountSemDelete', 'UT_DefaultHandler_OS_DirectoryClose', 'UT_DefaultHandler_OS_close', 'UT_DefaultHandler_OS_ModuleUnload', 'UT_DefaultHandler_OS_MutSemDelete', 'UT_DefaultHandler_OS_QueueDelete', 'UT_DefaultHandler_OS_TaskDelete', 'UT_DefaultHandler_OS_TimerDelete', 'UT_DefaultHandler_OS_TimeBaseDelete']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "UT_StubTableEntry_t",
    "UT_EntryKey_t",
    "UT_MAX_FUNC_STUBS",
    "UT_ENTRYTYPE_UNUSED",
    "UT_ENTRYTYPE_CALL_ONCE",
    "UT_StubTable",
    "int32",
    "UtAssert_Abort"
  ],
  "explanation": "- UT_StubTableEntry_t: needed to inspect the struct definition (members, types, any compiler-specific attributes, bitfields, packed/aligned pragmas) to detect use of language extensions in field declarations (EntryType, FuncKey) or non\u2011standard constructs.\n- UT_EntryKey_t: required to know the underlying type of this typedef (e.g., integer, void*, or function-pointer type). The code casts a function pointer to UT_EntryKey_t; whether that is a language extension depends on the exact typedef.\n- UT_MAX_FUNC_STUBS: needed to see how the stub table size is defined (macro, enum, computed expression) and whether its definition uses compiler-specific extensions.\n- UT_ENTRYTYPE_UNUSED: macro/enum value for EntryType; its definition may use non-standard constructs (e.g., GCC extension macros) that must be checked.\n- UT_ENTRYTYPE_CALL_ONCE: same rationale as UT_ENTRYTYPE_UNUSED \u2014 need the definition to ensure no language extensions are used.\n- UT_StubTable: the global array/object being iterated. Its declaration may include compiler extensions (section attributes, placement, alignment, extern declarations) that affect whether the target function or surrounding code uses extensions.\n- int32: the integer typedef used for loop index. Need its definition to confirm it is a standard typedef and not a compiler extension (e.g., defined via compiler-specific attributes or nonstandard type aliases).\n- UtAssert_Abort: include its prototype/definition to check whether its declaration uses compiler-specific extensions (attributes like __attribute__((noreturn)), pragmas, or nonstandard linkage) which could cause the target translation unit to contain language-extension usage.\n\nThese symbols provide the type definitions, macro values and declarations necessary to determine whether the cast and other constructs in UT_Stub_CallOnce rely on compiler-specific language extensions."
}