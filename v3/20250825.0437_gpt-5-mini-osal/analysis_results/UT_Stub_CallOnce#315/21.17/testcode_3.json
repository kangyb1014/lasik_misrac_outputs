{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(OutputMessage) has no precondition checks for OutputMessage being non-NULL and NUL-terminated. If UT_BSP_DoText is ever called with OutputMessage == NULL or with a pointer to a character array that is not terminated by '\\0' within its allocated bounds (for example a fixed-length buffer filled without a terminator), strlen will read past the object bounds (undefined behavior). Note: the specific call chain from UT_Stub_CallOnce -> UtAssert_Abort passes a string literal (\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\"), which is NUL-terminated and safe, but the UT_BSP_DoText implementation itself does not guarantee safety for all callers.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CallOnce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3159.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CallOnce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CallOnce:\n```c\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        Func();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CallOnce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helpers - write trace information to /tmp/logs/3159.txt\n */\nstatic void UT_Probe_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/3159.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\n/*\n * Modified UT_Stub_CallOnce: original logic preserved, with probes inserted\n * to record control flow and state relevant to the reported strlen/OutputMessage\n * issue. The probes log function pointer values, loop progress, chosen table\n * entry and the message passed to UtAssert_Abort (when that path is taken).\n */\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    UT_Probe_Log(\"UT_Stub_CallOnce ENTER: Func=%p\", (void *)Func);\n\n    if (Func == NULL)\n    {\n        UT_Probe_Log(\"UT_Stub_CallOnce: Func is NULL -> returning early\");\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n\n    UT_Probe_Log(\"UT_Stub_CallOnce: computed FuncKey=%p, scanning table at %p\", (void *)FuncKey, (void *)StubPtr);\n\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        /* Log the current stub pointer and its basic fields used by logic */\n        UT_Probe_Log(\"  iter %d: StubPtr=%p, EntryType=%d, FuncKey=%p\", i, (void *)StubPtr,\n                     (int)StubPtr->EntryType, (void *)StubPtr->FuncKey);\n\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n            UT_Probe_Log(\"    -> Recorded OnceEnt (first unused) = %p\", (void *)OnceEnt);\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            UT_Probe_Log(\"    -> Found matching CALL_ONCE entry at %p (FuncKey match)\", (void *)OnceEnt);\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        const char *msg = \"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\";\n        UT_Probe_Log(\"UT_Stub_CallOnce ERROR: OnceEnt == NULL -> about to call UtAssert_Abort with message ptr=%p content=\\\"%s\\\"\", (void *)msg, msg);\n        UtAssert_Abort(msg);\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        UT_Probe_Log(\"UT_Stub_CallOnce: Using OnceEnt=%p, setting EntryType=CALL_ONCE, FuncKey=%p\", (void *)OnceEnt, (void *)FuncKey);\n\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        UT_Probe_Log(\"UT_Stub_CallOnce: About to call Func=%p\", (void *)Func);\n        Func();\n        UT_Probe_Log(\"UT_Stub_CallOnce: Returned from Func=%p\", (void *)Func);\n    }\n    else\n    {\n        UT_Probe_Log(\"UT_Stub_CallOnce: OnceEnt=%p already set (EntryType=%d) - nothing to do\", (void *)OnceEnt, (int)OnceEnt->EntryType);\n    }\n\n    UT_Probe_Log(\"UT_Stub_CallOnce EXIT: Func=%p\", (void *)Func);\n}\n"
}