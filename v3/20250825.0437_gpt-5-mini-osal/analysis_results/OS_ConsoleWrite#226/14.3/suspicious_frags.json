{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleWrite:\n```c\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ConsoleWrite:\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_OBJECT_TYPE_OS_CONSOLE 0x0C\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_console_internal_record_t OS_console_table[OS_MAX_CONSOLES]\n...\ntypedef struct\n{\n    char device_name[OS_MAX_API_NAME];\n\n    char *          BufBase;        /**< Start of the buffer memory */\n    size_t          BufSize;        /**< Total size of the buffer */\n    volatile size_t ReadPos;        /**< Offset of next byte to read */\n    volatile size_t WritePos;       /**< Offset of next byte to write */\n    uint32          OverflowEvents; /**< Number of lines dropped due to overflow */\n    bool            IsAsync;        /**< Whether to write data via deferred utility task */\n} OS_console_internal_record_t\n...\nstatic int32 OS_Console_CopyOut(OS_console_internal_record_t *console, const char *Str, size_t *NextWritePos)\n{\n    const char *pmsg;\n    size_t      WriteOffset;\n    int32       return_code;\n\n    return_code = OS_ERROR;\n    pmsg        = Str;\n    WriteOffset = *NextWritePos;\n    while (true)\n    {\n        if (*pmsg == 0)\n        {\n            /* String is complete */\n            *NextWritePos = WriteOffset;\n            return_code   = OS_SUCCESS;\n            break;\n        }\n        console->BufBase[WriteOffset] = *pmsg;\n        WriteOffset                   = WriteOffset + 1;\n        if (WriteOffset >= console->BufSize)\n        {\n            WriteOffset = 0;\n        }\n\n        if (WriteOffset == console->ReadPos)\n        {\n            /* out of space */\n            return_code = OS_QUEUE_FULL;\n            break;\n        }\n\n        ++pmsg;\n    }\n\n    return return_code;\n}\n...\nint32 OS_ConsoleCreate_Impl(const OS_object_token_t *token)\n{\n    OS_impl_console_internal_record_t *local;\n    OS_console_internal_record_t *     console;\n    pthread_t                          consoletask;\n    int32                              return_code;\n    OS_VoidPtrValueWrapper_t           local_arg = {0};\n\n    console = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    local   = OS_OBJECT_TABLE_GET(OS_impl_console_table, *token);\n\n    if (token->obj_idx == 0)\n    {\n        return_code = OS_SUCCESS;\n\n        if (console->IsAsync)\n        {\n            if (sem_init(&local->data_sem, 0, 0) < 0)\n            {\n                return_code = OS_SEM_FAILURE;\n            }\n            else\n            {\n                /* cppcheck-suppress unreadVariable // intentional use of other union member */\n                local_arg.id = OS_ObjectIdFromToken(token);\n                return_code  = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, 0,\n                                                               OS_ConsoleTask_Entry, local_arg.opaque_arg);\n\n                if (return_code != OS_SUCCESS)\n                {\n                    sem_destroy(&local->data_sem);\n                }\n            }\n        }\n    }\n    else\n    {\n        /* only one physical console device is implemented */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return return_code;\n}\n...\nvoid OS_ConsoleWakeup_Impl(const OS_object_token_t *token)\n{\n    OS_impl_console_internal_record_t *local;\n\n    local = OS_OBJECT_TABLE_GET(OS_impl_console_table, *token);\n\n    /* post the sem for the utility task to run */\n    sem_post(&local->data_sem);\n}\n...\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    OS_BSP_Lock_Impl();\n\n    while (StartPos != EndPos)\n    {\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "while (true)\n    {\n        if (*pmsg == 0)\n        {\n            /* String is complete */\n            *NextWritePos = WriteOffset;\n            return_code   = OS_SUCCESS;\n            break;\n        }\n        console->BufBase[WriteOffset] = *pmsg;\n        WriteOffset                   = WriteOffset + 1;\n        if (WriteOffset >= console->BufSize)\n        {\n            WriteOffset = 0;\n        }\n\n        if (WriteOffset == console->ReadPos)\n        {\n            /* out of space */\n            return_code = OS_QUEUE_FULL;\n            break;\n        }\n\n        ++pmsg;\n    }"
  ],
  "explanation": "Only the while (true) loop in OS_Console_CopyOut has an invariant controlling expression and therefore should be investigated for compliance with Rule 14.3 (even though MISRA permits invariants used to create intentional infinite loops). Other loops and conditionals do not need investigation under this rule because their controlling expressions are not invariant at compile time: - while (StartPos != EndPos) in OS_ConsoleOutput_Impl depends on runtime-updated StartPos/EndPos. - if statements (e.g. if (console->device_name[0] != 0), if (return_code == OS_SUCCESS), if (console->IsAsync), etc.) are not loop controlling expressions and are value-dependent. - The local copies of ReadPos/WritePos and subsequent updates make the loops in OS_ConsoleOutput_Impl variant at runtime. No other constant/compile-time invariant loop controls are present in the provided code fragments."
}