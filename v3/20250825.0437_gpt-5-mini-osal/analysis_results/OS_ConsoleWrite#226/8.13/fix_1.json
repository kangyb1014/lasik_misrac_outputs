{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_ConsoleWrite_Probe(const char *stage,\n                                  uintptr_t console_id_val,\n                                  const char *Str,\n                                  const void *token_addr,\n                                  const void *console_ptr,\n                                  size_t PendingWritePos,\n                                  int32_t return_code,\n                                  const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Best-effort logging only; do not affect original behavior if logging fails */\n        return;\n    }\n\n    time_t now = time(NULL);\n    (void)fprintf(f, \"[%ld] STAGE=%s console_id=0x%08\" PRIxPTR \" Str=%p token_addr=%p console_ptr=%p PendingWritePos=%zu return_code=%d note=%s\\n\",\n                  (long)now,\n                  (stage != NULL) ? stage : \"(null)\",\n                  (uintptr_t)console_id_val,\n                  (const void *)Str,\n                  token_addr,\n                  console_ptr,\n                  PendingWritePos,\n                  (int)return_code,\n                  (note != NULL) ? note : \"\");\n\n    /* Flush immediately so other agents/processes can read logs in real time */\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    /* Log entry with initial parameters */\n    OS_ConsoleWrite_Probe(\"entry\",\n                          (uintptr_t)console_id,\n                          Str,\n                          (const void *)&token,\n                          NULL,\n                          0u,\n                          0,\n                          \"call entry\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    OS_ConsoleWrite_Probe(\"after_ObjectIdGetById\",\n                          (uintptr_t)console_id,\n                          Str,\n                          (const void *)&token,\n                          NULL,\n                          0u,\n                          return_code,\n                          \"obtained token (or not)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Log console pointer and initial write pos */\n        PendingWritePos = console->WritePos;\n        OS_ConsoleWrite_Probe(\"got_console\",\n                              (uintptr_t)console_id,\n                              Str,\n                              (const void *)&token,\n                              (const void *)console,\n                              PendingWritePos,\n                              return_code,\n                              \"console retrieved, logging initial state\");\n\n        if (console->device_name[0] != 0)\n        {\n            OS_ConsoleWrite_Probe(\"before_CopyOut_device\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  console->device_name);\n\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n\n            OS_ConsoleWrite_Probe(\"after_CopyOut_device\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"device name copied out\");\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            OS_ConsoleWrite_Probe(\"before_CopyOut_Str\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"about to copy out user string\");\n\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n\n            OS_ConsoleWrite_Probe(\"after_CopyOut_Str\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"user string copy done\");\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            OS_ConsoleWrite_Probe(\"before_commit\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"committing write position\");\n\n            console->WritePos = PendingWritePos;\n\n            OS_ConsoleWrite_Probe(\"after_commit\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"write position updated\");\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n\n            OS_ConsoleWrite_Probe(\"overflow\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"incremented overflow events\");\n        }\n\n        /* Notify the underlying console implementation of new data. */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWrite_Probe(\"wakeup_impl\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"calling OS_ConsoleWakeup_Impl\");\n\n            OS_ConsoleWakeup_Impl(&token);\n\n            OS_ConsoleWrite_Probe(\"after_wakeup_impl\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"wakeup impl returned\");\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleWrite_Probe(\"output_impl_before\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"calling OS_ConsoleOutput_Impl (potential rule 8.13 site)\");\n\n            OS_ConsoleOutput_Impl(&token);\n\n            OS_ConsoleWrite_Probe(\"output_impl_after\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"returned from OS_ConsoleOutput_Impl\");\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_ConsoleWrite_Probe(\"exit_success\",\n                              (uintptr_t)console_id,\n                              Str,\n                              (const void *)&token,\n                              (const void *)console,\n                              PendingWritePos,\n                              return_code,\n                              \"released token and exiting\");\n    }\n\n    /* Final return (unchanged) */\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpgbwgy_z6/src/src/os/shared/src/osapi-printf.c:1:\n/tmp/tmpgbwgy_z6/src/src/os/shared/src/osapi-printf.c: In function 'OS_ConsoleWrite_Probe':\n/tmp/tmpgbwgy_z6/src/src/os/shared/src/osapi-printf.c:221:56: error: expected ')' before 'PRIxPTR'\n  221 |     (void)fprintf(f, \"[%ld] STAGE=%s console_id=0x%08\" PRIxPTR \" Str=%p token_addr=%p console_ptr=%p PendingWritePos=%zu return_code=%d note=%s\\n\",\n      |                                                        ^~~~~~~\n/tmp/tmpgbwgy_z6/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpgbwgy_z6/src/src/os/shared/src/osapi-printf.c:66:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   65 | #include \"os-shared-printf.h\"\n  +++ |+#include <inttypes.h>\n   66 | \nIn file included from /tmp/tmpgbwgy_z6/src/src/os/shared/src/osapi-printf.c:1:\n/tmp/tmpgbwgy_z6/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpgbwgy_z6/src/src/os/shared/src/osapi-printf.c:221:11: note: in expansion of macro 'fprintf'\n  221 |     (void)fprintf(f, \"[%ld] STAGE=%s console_id=0x%08\" PRIxPTR \" Str=%p token_addr=%p console_ptr=%p PendingWritePos=%zu return_code=%d note=%s\\n\",\n      |           ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/__/__/os/shared/src/osapi-printf.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4035: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-printf.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ConsoleWrite as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include \"os-shared-printf.h\"\n#include <inttypes.h>\n\nstatic void OS_ConsoleWrite_Probe(const char *stage,\n                                  uintptr_t console_id_val,\n                                  const char *Str,\n                                  const void *token_addr,\n                                  const void *console_ptr,\n                                  size_t PendingWritePos,\n                                  int32_t return_code,\n                                  const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/2263.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Best-effort logging only; do not affect original behavior if logging fails */\n        return;\n    }\n\n    time_t now = time(NULL);\n    (void)fprintf(f, \"[%ld] STAGE=%s console_id=0x%08\" PRIxPTR \" Str=%p token_addr=%p console_ptr=%p PendingWritePos=%zu return_code=%d note=%s\\n\",\n                  (long)now,\n                  (stage != NULL) ? stage : \"(null)\",\n                  (uintptr_t)console_id_val,\n                  (const void *)Str,\n                  token_addr,\n                  console_ptr,\n                  PendingWritePos,\n                  (int)return_code,\n                  (note != NULL) ? note : \"\");\n\n    /* Flush immediately so other agents/processes can read logs in real time */\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    /* Log entry with initial parameters */\n    OS_ConsoleWrite_Probe(\"entry\",\n                          (uintptr_t)console_id,\n                          Str,\n                          (const void *)&token,\n                          NULL,\n                          0u,\n                          0,\n                          \"call entry\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    OS_ConsoleWrite_Probe(\"after_ObjectIdGetById\",\n                          (uintptr_t)console_id,\n                          Str,\n                          (const void *)&token,\n                          NULL,\n                          0u,\n                          return_code,\n                          \"obtained token (or not)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Log console pointer and initial write pos */\n        PendingWritePos = console->WritePos;\n        OS_ConsoleWrite_Probe(\"got_console\",\n                              (uintptr_t)console_id,\n                              Str,\n                              (const void *)&token,\n                              (const void *)console,\n                              PendingWritePos,\n                              return_code,\n                              \"console retrieved, logging initial state\");\n\n        if (console->device_name[0] != 0)\n        {\n            OS_ConsoleWrite_Probe(\"before_CopyOut_device\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  console->device_name);\n\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n\n            OS_ConsoleWrite_Probe(\"after_CopyOut_device\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"device name copied out\");\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            OS_ConsoleWrite_Probe(\"before_CopyOut_Str\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"about to copy out user string\");\n\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n\n            OS_ConsoleWrite_Probe(\"after_CopyOut_Str\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"user string copy done\");\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            OS_ConsoleWrite_Probe(\"before_commit\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"committing write position\");\n\n            console->WritePos = PendingWritePos;\n\n            OS_ConsoleWrite_Probe(\"after_commit\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"write position updated\");\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n\n            OS_ConsoleWrite_Probe(\"overflow\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"incremented overflow events\");\n        }\n\n        /* Notify the underlying console implementation of new data. */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWrite_Probe(\"wakeup_impl\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"calling OS_ConsoleWakeup_Impl\");\n\n            OS_ConsoleWakeup_Impl(&token);\n\n            OS_ConsoleWrite_Probe(\"after_wakeup_impl\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"wakeup impl returned\");\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleWrite_Probe(\"output_impl_before\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"calling OS_ConsoleOutput_Impl (potential rule 8.13 site)\");\n\n            OS_ConsoleOutput_Impl(&token);\n\n            OS_ConsoleWrite_Probe(\"output_impl_after\",\n                                  (uintptr_t)console_id,\n                                  Str,\n                                  (const void *)&token,\n                                  (const void *)console,\n                                  PendingWritePos,\n                                  return_code,\n                                  \"returned from OS_ConsoleOutput_Impl\");\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_ConsoleWrite_Probe(\"exit_success\",\n                              (uintptr_t)console_id,\n                              Str,\n                              (const void *)&token,\n                              (const void *)console,\n                              PendingWritePos,\n                              return_code,\n                              \"released token and exiting\");\n    }\n\n    /* Final return (unchanged) */\n    return return_code;\n}\n",
  "explanation": "The build error was caused by the use of the PRIxPTR macro inside the format string without including <inttypes.h>. I added #include <inttypes.h> to ensure PRIxPTR is defined before use. No other logic was changed."
}