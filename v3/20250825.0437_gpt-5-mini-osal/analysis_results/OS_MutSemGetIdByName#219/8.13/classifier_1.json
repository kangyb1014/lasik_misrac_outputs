{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetIdByName:\n```c\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_CHECK_POINTER(sem_id);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated: sem_id is an output parameter (the function/OS_ObjectIdFindByName writes into *sem_id), so it must be a non\u2011const pointer. The OS_CHECK_POINTER(sem_id) macro only checks the pointer for NULL and does not change qualification. Rule 8.13 would only be violated if a pointer that is never used to modify the pointee were declared without const (e.g. an input-only pointer), but that is not the case here."
}