{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the LENGTHCHECK macro uses an unbounded string function such as strlen(name) to validate the name length (for example: if (strlen(name) >= OS_MAX_API_NAME) ...), and the supplied name pointer does not point to a NUL-terminated array within its accessible bounds, the strlen call can read past the end of the object. That would constitute an out-of-bounds access and thus violate MISRA C 2023 Rule 21.17. A compliant implementation must use a bounded operation (e.g. strnlen with the provided limit) or otherwise ensure the string is NUL-terminated within the known maximum length before calling unbounded string functions.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2199.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetIdByName:\n```c\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/*\n * Probe logger: append human-readable traces to /tmp/logs/2199.txt\n * Keep this helper small and safe (no dereference of sem_name to avoid\n * accidental out-of-bounds reads). This preserves the original logic\n * while providing control-flow and state information useful to\n * reproduce/investigate a potential LENGTHCHECK/strlen violation.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2199.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Log entry and raw pointer state. Do NOT dereference sem_name here. */\n    probe_log(\"ENTRY: OS_MutSemGetIdByName called. sem_id=%p, sem_name=%p\", (void *)sem_id, (void *)sem_name);\n\n    /* Check parameters (preserve original checks) */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    probe_log(\"After parameter checks: sem_id=%p, sem_name=%p\", (void *)sem_id, (void *)sem_name);\n\n    /*\n     * Important: do not call unbounded string functions (e.g. strlen) here\n     * because sem_name may not be NUL-terminated within accessible bounds.\n     * This probe intentionally avoids dereferencing sem_name to prevent\n     * creating a new out-of-bounds access while still recording the\n     * conditions that can lead to the reported MISRA rule violation.\n     *\n     * We log an advisory so investigators know where a LENGTHCHECK that\n     * uses strlen would be problematic.\n     */\n    probe_log(\"ADVISORY: Not invoking strlen(sem_name) here. If a LENGTHCHECK macro\nuses an unbounded function (e.g. strlen) on sem_name, it may read past the\nend of the object if sem_name is not NUL-terminated within its bounds.\");\n\n    /* Call the original lookup logic and capture return code */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    probe_log(\"OS_ObjectIdFindByName returned %d for sem_name=%p\", (int)return_code, (void *)sem_name);\n    probe_log(\"EXIT: OS_MutSemGetIdByName returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}