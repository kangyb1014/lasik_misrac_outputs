{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'de' is declared as 'struct dirent *de' but is only used for read-only access (de->d_name is read). According to MISRA C 2023 Rule 8.13, it should be declared as a pointer to a const-qualified type (e.g. 'const struct dirent *de'). Assigning the non-const return of readdir() to a 'const struct dirent *' is allowed, so the current non-const declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirRead_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirRead_Impl:\n```c\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n    if (de == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirRead_Impl code.\n",
  "test_code": "static void OS_DirRead_Probe(const char *stage, const OS_object_token_t *token, OS_impl_dir_internal_record_t *impl, struct dirent *de, const os_dirent_t *udirent)\n{\n    FILE *f = fopen(\"/tmp/logs/933.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log basic pointers/state. Avoid dereferencing impl or udirent unless non-NULL. */\n    (void)fprintf(f, \"[OS_DirRead] stage=%s token=%p impl=%p\\n\", stage, (const void *)token, (const void *)impl);\n\n    if (impl != NULL)\n    {\n        (void)fprintf(f, \"[OS_DirRead] impl->dp=%p\\n\", (const void *)impl->dp);\n    }\n\n    (void)fprintf(f, \"[OS_DirRead] readdir_result_ptr=%p\\n\", (const void *)de);\n\n    if (de != NULL)\n    {\n        /* de->d_name is read-only in the scenario; log its contents */\n        (void)fprintf(f, \"[OS_DirRead] de->d_name=\\\"%s\\\"\\n\", de->d_name);\n    }\n\n    if (udirent != NULL)\n    {\n        /* Only print the user buffer after it has been written to by the function to avoid\n         * reading uninitialized memory. The caller must only pass udirent here when it is\n         * valid to read (i.e. after strncpy in the main function). */\n        (void)fprintf(f, \"[OS_DirRead] user dirent FileName=\\\"%s\\\"\\n\", udirent->FileName);\n    }\n\n    (void)fclose(f);\n}\n\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* Log just before calling readdir to capture control flow/state before the call */\n    OS_DirRead_Probe(\"before_readdir\", token, impl, NULL, NULL);\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n\n    /* Log immediately after readdir to capture the returned pointer and d_name */\n    OS_DirRead_Probe(\"after_readdir\", token, impl, de, NULL);\n\n    if (de == NULL)\n    {\n        OS_DirRead_Probe(\"readdir_null_return\", token, impl, NULL, NULL);\n        return OS_ERROR;\n    }\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    /* Log after copying the filename into the user-provided buffer so callers can\n     * observe the read-only use of 'de' and the final copied string. */\n    OS_DirRead_Probe(\"after_copy\", token, impl, de, dirent);\n\n    return OS_SUCCESS;\n}\n"
}