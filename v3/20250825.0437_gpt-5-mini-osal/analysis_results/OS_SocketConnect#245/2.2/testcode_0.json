{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'sockopt = 0;' is executed immediately before a call to getsockopt() which will write into sockopt on success, and on error the code path already detects failure via os_status < 0. Thus the initialization of sockopt has no effect on program behaviour and can be removed without changing results. The other two operations (setting slen and calling getsockopt) are required. Therefore the redundant initialization constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketConnect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2452.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketConnect as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketConnect:\n```c\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketConnect code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logging helper - appends simple messages to /tmp/logs/2452.txt */\nstatic void probe_log_msg(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2452.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_fmt(const char *fmt, long v1, long v2, long v3)\n{\n    char buf[256];\n    /* Keep formatting simple to avoid introducing other dependencies */\n    snprintf(buf, sizeof(buf), fmt, v1, v2, v3);\n    probe_log_msg(buf);\n}\n\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n    char                         buf[256];\n\n    /* Entry log */\n    probe_log_msg(\"OS_SocketConnect: entry\");\n    snprintf(buf, sizeof(buf), \"Parameters: sock_id=%ld, Addr=%p, Timeout=%ld\", (long)sock_id, (void *)Addr, (long)Timeout);\n    probe_log_msg(buf);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    probe_log_msg(\"OS_SocketConnect: Addr pointer checked\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    snprintf(buf, sizeof(buf), \"OS_ObjectIdGetById returned %ld\", (long)return_code);\n    probe_log_msg(buf);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n        snprintf(buf, sizeof(buf), \"Stream pointer: %p\", (void *)stream);\n        probe_log_msg(buf);\n\n        /* Log important stream fields to capture state for the violation scenario */\n        snprintf(buf, sizeof(buf), \"stream->socket_domain=%ld, stream->socket_type=%ld, stream->stream_state=0x%lx\",\n                 (long)stream->socket_domain, (long)stream->socket_type, (unsigned long)stream->stream_state);\n        probe_log_msg(buf);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            probe_log_msg(\"Branch: socket_domain == OS_SocketDomain_INVALID -> OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            probe_log_msg(\"Branch: stream is already connected -> OS_ERR_INCORRECT_OBJ_STATE\");\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            probe_log_msg(\"About to call OS_SocketConnect_Impl\");\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n            snprintf(buf, sizeof(buf), \"OS_SocketConnect_Impl returned %ld\", (long)return_code);\n            probe_log_msg(buf);\n\n            if (return_code == OS_SUCCESS)\n            {\n                probe_log_msg(\"OS_SocketConnect_Impl success -> updating stream->stream_state bits\");\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n                snprintf(buf, sizeof(buf), \"New stream->stream_state=0x%lx\", (unsigned long)stream->stream_state);\n                probe_log_msg(buf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log_msg(\"OS_ObjectIdRelease called\");\n    }\n\n    snprintf(buf, sizeof(buf), \"OS_SocketConnect: exit return_code=%ld\", (long)return_code);\n    probe_log_msg(buf);\n\n    return return_code;\n}\n"
}