{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtList_Create:\n```c\nUtListHead_t *UtList_Create(uint32 NumTags)\n{\n    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };\n    struct ListAllocator *NewList;\n    UtListNode_t *        TagHead;\n    size_t                ActualSize;\n    uint32                i;\n\n    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);\n    NewList    = (struct ListAllocator *)malloc(ActualSize);\n\n    memset(NewList, 0, ActualSize);\n\n    NewList->Head.Tags         = NewList->Tags;\n    NewList->Head.NumberOfTags = NumTags;\n\n    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n    }\n\n    return &NewList->Head;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UtList_Create:\ntypedef struct\n{\n    UtListNode_t *Tags;\n    uint32        NumberOfTags;\n} UtListHead_t\n...\ntypedef struct UtListNodeTag\n{\n    struct UtListNodeTag *Next;\n    struct UtListNodeTag *Prev;\n    void *                Data;\n    uint32                DataSize;\n    uint32                Tag;\n} UtListNode_t\n...\ntypedef uint32_t  uint32\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstruct UtListNodeTag *Prev;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: Prev is part of a mutable doubly\u2011linked list node and is used to set and later modify neighbouring nodes (e.g. TagHead->Prev = TagHead; and typical list code will assign Prev->Next). Declaring it as pointer-to-const would prevent required modifications. A violation would occur if the pointer were only used for read-only access (for example, a pointer parameter that only reads node fields) \u2014 in that case it should be declared as const struct UtListNodeTag * to comply with Rule 8.13."
}