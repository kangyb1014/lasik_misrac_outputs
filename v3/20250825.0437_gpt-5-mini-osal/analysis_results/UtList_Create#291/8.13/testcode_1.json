{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member 'Data' is declared as 'void *Data;' which permits modification of the pointed-to object. If the list stores pointers to data that are not intended to be modified through the list (for example pointers to read-only buffers, string literals, or externally-owned objects accessed read-only), then the pointer should be declared as 'const void *Data;'. In that common usage scenario the current declaration violates MISRA C 2023 Rule 8.13 because the pointer is not const-qualified when it could and should be.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Create:\n```c\nUtListHead_t *UtList_Create(uint32 NumTags)\n{\n    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };\n    struct ListAllocator *NewList;\n    UtListNode_t *        TagHead;\n    size_t                ActualSize;\n    uint32                i;\n\n    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);\n    NewList    = (struct ListAllocator *)malloc(ActualSize);\n\n    memset(NewList, 0, ActualSize);\n\n    NewList->Head.Tags         = NewList->Tags;\n    NewList->Head.NumberOfTags = NumTags;\n\n    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n    }\n\n    return &NewList->Head;\n}\n```\n</target_code>\nPlease provide the modified UtList_Create code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nUtListHead_t *UtList_Create(uint32 NumTags)\n{\n    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };\n    struct ListAllocator *NewList;\n    UtListNode_t *        TagHead;\n    size_t                ActualSize;\n    uint32                i;\n    FILE *logf = NULL;\n\n    /* Attempt to ensure the log directory exists; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    logf = fopen(\"/tmp/logs/2913.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtList_Create: enter NumTags=%u\\n\", (unsigned)NumTags);\n        fflush(logf);\n    }\n\n    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);\n    NewList    = (struct ListAllocator *)malloc(ActualSize);\n\n    if (logf)\n    {\n        fprintf(logf, \"UtList_Create: allocated NewList=%p ActualSize=%zu\\n\", (void *)NewList, ActualSize);\n        fflush(logf);\n    }\n\n    /* Preserve original behavior: initialize the allocated block to zero */\n    memset(NewList, 0, ActualSize);\n\n    if (logf)\n    {\n        fprintf(logf, \"UtList_Create: after memset NewList=%p\\n\", (void *)NewList);\n        fflush(logf);\n    }\n\n    /* Initialize the head */\n    NewList->Head.Tags         = NewList->Tags;\n    NewList->Head.NumberOfTags = NumTags;\n\n    if (logf)\n    {\n        fprintf(logf, \"UtList_Create: Head.Tags=%p Head.NumberOfTags=%u\\n\",\n                (void *)NewList->Head.Tags, (unsigned)NewList->Head.NumberOfTags);\n        fflush(logf);\n    }\n\n    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n\n        if (logf)\n        {\n            fprintf(logf, \"UtList_Create: initializing index=%u TagHead=%p\\n\", (unsigned)i, (void *)TagHead);\n            fflush(logf);\n        }\n\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n\n        if (logf)\n        {\n            fprintf(logf, \"UtList_Create: index=%u set Tag=%u Next=%p Prev=%p\\n\",\n                    (unsigned)i,\n                    (unsigned)TagHead->Tag,\n                    (void *)TagHead->Next,\n                    (void *)TagHead->Prev);\n            fflush(logf);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"UtList_Create: returning Head=%p\\n\\n\", (void *)&NewList->Head);\n        fclose(logf);\n    }\n\n    return &NewList->Head;\n}"
}