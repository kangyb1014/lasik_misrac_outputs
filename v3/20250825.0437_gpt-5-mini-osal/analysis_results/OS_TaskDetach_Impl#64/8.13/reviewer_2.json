{
  "user_message": "An agent A claimed that the following OS_TaskDetach_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskDetach_Impl.\n```c\nint32 OS_TaskDetach_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n    int                             ret;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    ret = pthread_detach(impl->id);\n\n    if (ret != 0)\n    {\n        OS_DEBUG(\"pthread_detach: Failed on Task ID = %lu, err = %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(ret));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer impl is declared as a mutable pointer (OS_impl_task_internal_record_t *impl) but is only used for read access (impl->id) and the pointed-at object is not modified in this function. According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (e.g. const OS_impl_task_internal_record_t *impl). Although the table itself is mutable, a pointer-to-const may still point to it. Therefore this declaration violates Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskDetach_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_t id;\n} OS_impl_task_internal_record_t\n...\nOS_impl_task_internal_record_t OS_impl_task_table[OS_MAX_TASKS]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n...\nstatic inline unsigned long OS_ObjectIdToInteger(osal_id_t object_id)\n{\n#ifdef OSAL_OMIT_DEPRECATED\n    return object_id.v;\n#else\n    return object_id;\n#endif\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_TaskDetach_Impl the local variable impl is only used for read access (impl->id) and the pointed-at object is not modified in this function. The OS_OBJECT_TABLE_GET macro yields the address of an element of the mutable global array OS_impl_task_table, but in C it is legal to assign the address of a non-const object to a pointer-to-const. Therefore the pointer can and should be declared to point to a const-qualified type (e.g. const OS_impl_task_internal_record_t *impl) to satisfy MISRA C 2023 Rule 8.13. No other construct in the shown code prevents making impl a pointer-to-const (unless there are other unshown uses that would require mutation), so the current declaration violates the rule."
}