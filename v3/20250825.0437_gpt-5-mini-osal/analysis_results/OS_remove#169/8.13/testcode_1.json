{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_FileRemove_Impl is declared to take a non-const pointer (e.g. int32 OS_FileRemove_Impl(char *path)) and the function does not modify the string, this call violates MISRA C 2023 Rule 8.13. The local_path buffer is only used as input here, so the parameter should be const-qualified (int32 OS_FileRemove_Impl(const char *path)) and the call would then be OS_FileRemove_Impl(local_path).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1693.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <time.h>\n\n/* Minimal types and constants to make this translation unit self-contained. */\ntypedef int32_t int32;\n\nenum { OS_MAX_LOCAL_PATH_LEN = 256 };\nenum { OS_SUCCESS = 0, OS_ERROR = -1 };\n\n/* Forward declarations for the OS functions. In a real build these would be\n * provided by the OS abstraction layer. For testing, simple stubs are\n * implemented below so this translation unit is compilable and executable\n * (no main provided as required). */\nint32 OS_TranslatePath(const char *path, char *local_path);\nint32 OS_FileRemove_Impl(char *path); /* Intentionally non-const to reflect the violation scenario */\n\n/* Logging helper that appends messages to the required log file. */\nstatic void log_event(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1693.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not interfere with functionality. */\n    }\n\n    /* Timestamp for easier correlation. */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)gmtime_r(&t, &tm_buf);\n    char ts[64];\n    (void)strftime(ts, sizeof(ts), \"%Y-%m-%dT%H:%M:%SZ\", &tm_buf);\n\n    fprintf(f, \"%s: \", ts);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    (void)fclose(f);\n}\n\n/* The OS_remove implementation with probes/logging inserted. The original\n * logic is preserved: translate path, then call platform remove implementation\n * only if translation succeeded. */\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    log_event(\"OS_remove: entry; input path='%s'\", (path != NULL) ? path : \"(null)\");\n\n    return_code = OS_TranslatePath(path, local_path);\n    log_event(\"OS_remove: OS_TranslatePath returned %d; local_path='%s'\",\n              (int)return_code,\n              (local_path[0] != '\\0') ? local_path : \"(empty)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the address and contents of the buffer passed to the underlying\n         * implementation. This helps demonstrate the scenario where a non-const\n         * API is called with an input buffer. */\n        log_event(\"OS_remove: calling OS_FileRemove_Impl; local_path_addr=%p; local_path='%s'\",\n                  (void *)local_path,\n                  local_path);\n\n        return_code = OS_FileRemove_Impl(local_path);\n\n        log_event(\"OS_remove: OS_FileRemove_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        log_event(\"OS_remove: skipping OS_FileRemove_Impl due to translate failure (%d)\", (int)return_code);\n    }\n\n    log_event(\"OS_remove: exit; return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n/* ------------------------------------------------------------------------- */\n/* Stub implementations to make this file linkable and to produce useful logs\n * that demonstrate the violation scenario. In a real system these would be\n * provided elsewhere. The stubbed OS_FileRemove_Impl intentionally accepts a\n * non-const char * to replicate the condition mentioned in the violation. */\n\nint32 OS_TranslatePath(const char *path, char *local_path)\n{\n    if (path == NULL)\n    {\n        log_event(\"OS_TranslatePath: received NULL path\");\n        return OS_ERROR;\n    }\n\n    /* Simple translation: copy input into local buffer with truncation. */\n    strncpy(local_path, path, (size_t)OS_MAX_LOCAL_PATH_LEN - 1);\n    local_path[OS_MAX_LOCAL_PATH_LEN - 1] = '\\0';\n\n    log_event(\"OS_TranslatePath: translated '%s' -> '%s'\", path, local_path);\n\n    return OS_SUCCESS;\n}\n\nint32 OS_FileRemove_Impl(char *path)\n{\n    /* Log that this implementation takes a non-const pointer (the source of\n     * the MISRA 8.13 concern). We don't modify the buffer here, but the\n     * signature allows modification and thus is flagged by the rule. */\n    log_event(\"OS_FileRemove_Impl: invoked with non-const parameter (address=%p); path='%s'\",\n              (void *)path,\n              (path != NULL) ? path : \"(null)\");\n\n    /* Simulate successful removal without modifying the string. */\n    (void)path; /* explicit no-op to indicate we don't change it */\n    return OS_SUCCESS;\n}\n"
}