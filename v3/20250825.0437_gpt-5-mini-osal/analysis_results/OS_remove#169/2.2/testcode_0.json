{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe two statements assign default values to SysMountPointLen and VirtPathBegin but those values are never used before being overwritten later when OS_ObjectIdGetBySearch succeeds. If the search fails the function returns (the subsequent use is guarded by if (return_code == OS_SUCCESS)), so the initial assignments have no effect on program behaviour. Therefore these assignments constitute dead code \u2014 they are executed but can be removed without changing behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1692.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper: append human-readable trace information to\n * \"/tmp/logs/1692.txt\". This function is intentionally minimal so as\n * not to affect program control flow or return values.\n */\nstatic void os_remove_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1692.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is not available, silently continue to preserve behavior */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input state */\n    os_remove_log(\"OS_remove: entry path=%s\", path != NULL ? path : \"(null)\");\n\n    /* Call the translation and log its result and the translated path if successful */\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        os_remove_log(\"OS_remove: OS_TranslatePath -> OS_SUCCESS, local_path=%s\", local_path);\n    }\n    else\n    {\n        os_remove_log(\"OS_remove: OS_TranslatePath -> %d\", return_code);\n    }\n\n    /* Preserve original control flow: only attempt removal on successful translate */\n    if (return_code == OS_SUCCESS)\n    {\n        os_remove_log(\"OS_remove: calling OS_FileRemove_Impl with local_path=%s\", local_path);\n        return_code = OS_FileRemove_Impl(local_path);\n        os_remove_log(\"OS_remove: OS_FileRemove_Impl returned %d\", return_code);\n    }\n    else\n    {\n        os_remove_log(\"OS_remove: skipping OS_FileRemove_Impl due to translate failure %d\", return_code);\n    }\n\n    os_remove_log(\"OS_remove: exit returning %d\", return_code);\n\n    return return_code;\n}\n"
}