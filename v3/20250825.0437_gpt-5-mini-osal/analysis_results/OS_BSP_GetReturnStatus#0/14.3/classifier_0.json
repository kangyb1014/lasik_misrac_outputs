{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetReturnStatus:\n```c\nint OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n            break;\n    }\n\n    return retcode;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nswitch (OS_BSP_Global.AppStatus)\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the controlling expression is the non-constant global variable 'OS_BSP_Global.AppStatus', so it is not invariant. (A violation would occur if the code used an invariant controlling expression, e.g. 'switch (0)' or 'switch (OS_SUCCESS)' where OS_SUCCESS is a compile-time constant.)"
}