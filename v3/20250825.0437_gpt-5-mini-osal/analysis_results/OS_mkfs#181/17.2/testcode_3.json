{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nPotential indirect recursion: OS_printf calls OS_DEBUG when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER. If OS_DEBUG is implemented using OS_printf (e.g. as a macro or wrapper that calls OS_printf), this creates an indirect recursive call chain OS_printf -> OS_DEBUG -> OS_printf, violating MISRA C 2023 Rule 17.2. (Similarly, if BUGCHECK_VOID or OS_ConsoleWrite ultimately invoke OS_printf, recursion can also occur.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1816.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkfs:\n```c\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging function: Append diagnostic lines to /tmp/logs/1816.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1816.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Preserve original OS_mkfs logic while inserting lightweight probes\n * that record entry, parameters, the return from the filesystem\n * initializer, any historic-error mapping, and the final return code.\n */\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    probe_logf(\"OS_mkfs ENTRY: address=%p devname=%s volname=%s blocksize=%zu numblocks=%llu\",\n               (void *)address,\n               (devname != NULL) ? devname : \"(null)\",\n               (volname != NULL) ? volname : \"(null)\",\n               blocksize,\n               (unsigned long long)numblocks);\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    probe_logf(\"OS_FileSys_Initialize returned: %ld\", (long)return_code);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        probe_logf(\"Historic filesystem-specific error detected (code=%ld). Mapping to OS_FS_ERR_DEVICE_NOT_FREE.\", (long)return_code);\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n    else\n    {\n        probe_logf(\"No historic mapping applied; returning original code %ld.\", (long)return_code);\n    }\n\n    probe_logf(\"OS_mkfs EXIT: final_return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}