{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'address' is declared as char * in OS_mkfs but is only passed to OS_FileSys_Initialize and (apparently) not modified here. According to MISRA C 2023 Rule 8.13, the pointer should be declared pointing to a const-qualified type when possible \u2014 i.e. OS_mkfs should take 'const char *address' if the buffer is not modified. (If the callee or this function truly modifies the buffer, then no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1813.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkfs:\n```c\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal type aliases to allow compilation in isolation. */\ntypedef int32_t int32;\ntypedef uint32_t osal_blockcount_t;\n\n/* Minimal error-code definitions (as const objects, not macros). */\nconst int OS_ERR_INCORRECT_OBJ_STATE = 1;\nconst int OS_ERR_NO_FREE_IDS = 2;\nconst int OS_FS_ERR_DEVICE_NOT_FREE = 3;\n\n/*\n * A helper logging function that records the control flow and the state of\n * the \"address\" pointer to a log file. The log contains the pointer value\n * and a hex dump of up to the first 64 bytes (or the NUL terminator), so an\n * external agent can see whether the buffer was modified by the callee.\n */\nstatic void OS_mkfs_log_state(const char *phase, const char *address)\n{\n    FILE *f = fopen(\"/tmp/logs/1813.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is not possible, do nothing (preserve behavior). */\n        return;\n    }\n\n    fprintf(f, \"[OS_mkfs] %s\\n\", phase);\n    fprintf(f, \"[OS_mkfs] address pointer = %p\\n\", (void *)address);\n\n    if (address == NULL)\n    {\n        fprintf(f, \"[OS_mkfs] address content: (null)\\n\");\n    }\n    else\n    {\n        /* Dump up to 64 bytes or up to the first NUL (whichever comes first). */\n        size_t max_dump = 64;\n        size_t len = strnlen(address, max_dump);\n        fprintf(f, \"[OS_mkfs] address content length (up to 64) = %zu\\n\", len);\n        fprintf(f, \"[OS_mkfs] address content (hex):\");\n        for (size_t i = 0; i < len; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned char)address[i]);\n        }\n        fprintf(f, \"\\n\");\n\n        /* Also log a human-readable prefix when printable. */\n        if (len > 0)\n        {\n            char buf[65];\n            size_t copy_len = (len < 64) ? len : 64;\n            memcpy(buf, address, copy_len);\n            buf[copy_len] = '\\0';\n            fprintf(f, \"[OS_mkfs] address content (ascii prefix) = '%s'\\n\", buf);\n        }\n    }\n\n    fclose(f);\n}\n\n/*\n * Prototype for the external function. In a full system this is provided\n * elsewhere. For a standalone test build we provide a simple stub below.\n */\nint32 OS_FileSys_Initialize(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks, bool flag);\n\n/*\n * A very small stub of OS_FileSys_Initialize to allow compiling and running\n * this file standalone for testing. This stub intentionally keeps the same\n * signature as the real function and will modify the buffer only in a\n * controlled way to allow reproducing cases where the callee does or does\n * not modify the address buffer:\n *  - If address != NULL and the first character is 'M', the stub will write\n *    the string \"MODIFIED\" into the buffer (demonstrating a callee that\n *    modifies the buffer).\n *  - Otherwise it will not modify the buffer.\n *\n * This stub returns 0 on success, or one of the error codes to exercise the\n * remapping logic in OS_mkfs.\n */\nint32 OS_FileSys_Initialize(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks, bool flag)\n{\n    (void)devname; (void)volname; (void)blocksize; (void)numblocks; (void)flag;\n\n    /* If the caller passed a buffer and it starts with 'M', mutate it for test. */\n    if (address != NULL && address[0] == 'M')\n    {\n        /* Write up to 8 characters plus NUL, assuming buffer is sufficiently large\n         * for this test harness. In a real system this would need to be safe. */\n        memcpy(address, \"MODIFIED\", 9);\n        return 0; /* success */\n    }\n\n    /* Otherwise, simulate an \"already initialized\" error to test mapping. */\n    return OS_ERR_INCORRECT_OBJ_STATE;\n}\n\n/*\n * Modified OS_mkfs with inserted logging probes. The original logic is\n * preserved: call OS_FileSys_Initialize, then remap two specific error\n * codes to OS_FS_ERR_DEVICE_NOT_FREE before returning the result.\n */\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    /* Log the state before calling the filesystem initializer. */\n    OS_mkfs_log_state(\"before OS_FileSys_Initialize\", address);\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    /* Log the state after the call so callers can detect whether the buffer\n     * was modified by the callee. Also log the raw return code. */\n    OS_mkfs_log_state(\"after OS_FileSys_Initialize\", address);\n\n    FILE *f = fopen(\"/tmp/logs/1813.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_mkfs] raw return_code = %d\\n\", (int)return_code);\n        fclose(f);\n    }\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n\n        /* Log the remapping event. */\n        FILE *f2 = fopen(\"/tmp/logs/1813.txt\", \"a\");\n        if (f2 != NULL)\n        {\n            fprintf(f2, \"[OS_mkfs] remapped return_code to OS_FS_ERR_DEVICE_NOT_FREE (%d)\\n\", (int)OS_FS_ERR_DEVICE_NOT_FREE);\n            fclose(f2);\n        }\n    }\n\n    return return_code;\n}\n"
}