{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_ClearDeferredRetcode:\n```c\nvoid UT_ClearDeferredRetcode(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    while (true)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);\n        if (StubPtr == NULL)\n        {\n            break;\n        }\n        UT_ClearStubEntry(StubPtr);\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UT_ClearDeferredRetcode:\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            StubPtr = NULL;\n            break;\n        }\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            break;\n        }\n        ++Idx;\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            Idx = 0;\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_MaxStubSearchLen = SearchLen;\n    }\n\n    return StubPtr;\n}\n...\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n...\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\ntypedef cpuaddr UT_EntryKey_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "while (1)\n{\n    if (SearchLen >= SearchLimit)\n    {\n        StubPtr = NULL;\n        break;\n    }\n    ++SearchLen;\n    StubPtr = &UT_StubTable[Idx];\n    if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n    {\n        break;\n    }\n    ++Idx;\n    if (Idx >= UT_MAX_FUNC_STUBS)\n    {\n        Idx = 0;\n    }\n}",
    "/* If searching for an unused entry, look through the entire table.\n * Otherwise bound the search */\nif (TestMode == UT_ENTRYTYPE_UNUSED)\n{\n    SearchLimit = UT_MAX_FUNC_STUBS;\n    SearchKey   = 0;\n}\nelse\n{\n    SearchLimit = UT_MaxStubSearchLen;\n    SearchKey   = FuncKey;\n}",
    "if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n    StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n{\n    free(StubPtr->Data.Buff.BasePtr);\n}\nmemset(StubPtr, 0, sizeof(*StubPtr));",
    "if (SearchLen > UT_MaxStubSearchLen)\n{\n    UT_MaxStubSearchLen = SearchLen;\n}",
    "uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */",
    "void UT_ClearDeferredRetcode(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    while (true)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);\n        if (StubPtr == NULL)\n        {\n            break;\n        }\n        UT_ClearStubEntry(StubPtr);\n    }\n}"
  ],
  "explanation": "I selected fragments that affect control flow and can lead to parts of the code becoming permanently non-executable (unreachable) or to infinite-search behaviour: the outer while(true) in UT_ClearDeferredRetcode, the inner search loop in UT_GetStubEntry, the initialization of the start index (Idx) with a modulo, the logic that sets the SearchLimit/SearchKey (which can make the loop immediately terminate or never find entries), the update of UT_MaxStubSearchLen, and the clearing/freeing of stub entries (memset after free can affect subsequent searches). These fragments should be investigated to ensure no execution paths become unreachable or that loops cannot permanently prevent progress.\n\nOther code in the provided snippets (typedefs, struct member declarations, simple assignments, comments, the function return, and other non-control-flow declarations) are not candidates for unreachable-code violations because they are declarative or are executed as written and do not introduce alternate control-flow paths that could render later code unreachable. Therefore they do not need investigation under MISRA C Rule 2.1 in this context."
}