{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe default: break; clause in OS_CleanUpObject is a no-op that will be executed when OS_IdentifyObject returns a value not matched by any case label. Removing that default would not change program behaviour, so it is an executed no\u2011op (dead code) and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DeleteAllObjects code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1292.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DeleteAllObjects as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DeleteAllObjects:\n```c\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            break;\n        }\n        OS_TaskDelay(5);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_DeleteAllObjects code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helpers: write concise logs to /tmp/logs/1292.txt. These helpers do not\n * change any program logic; they only append information useful to reproduce\n * the control flow/state relevant to the reported violation. */\nstatic void Probe_LogEnteringTry(unsigned int try_count)\n{\n    FILE *f = fopen(\"/tmp/logs/1292.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"ENTER TryCount=%u\\n\", try_count);\n        fclose(f);\n    }\n}\n\nstatic void Probe_LogBeforeForEach(const char *callsite, unsigned int obj_type, const void *objcount_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1292.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"BEFORE %s: obj_type=%u, ObjectCount_ptr=%p\\n\", callsite, obj_type, objcount_ptr);\n        fclose(f);\n    }\n}\n\nstatic void Probe_LogAfterForEach(const char *callsite, unsigned int obj_type, unsigned int object_count)\n{\n    FILE *f = fopen(\"/tmp/logs/1292.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"AFTER  %s: obj_type=%u, ObjectCount=%u\\n\", callsite, obj_type, object_count);\n        fclose(f);\n    }\n}\n\nstatic void Probe_LogLoopExit(unsigned int object_count, unsigned int try_count)\n{\n    FILE *f = fopen(\"/tmp/logs/1292.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"EXIT_CONDITION: ObjectCount=%u, TryCount=%u\\n\", object_count, try_count);\n        fclose(f);\n    }\n}\n\nstatic void Probe_LogTaskDelay(unsigned int delay)\n{\n    FILE *f = fopen(\"/tmp/logs/1292.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"TASK_DELAY called with %u\\n\", delay);\n        fclose(f);\n    }\n}\n\n/* Modified OS_DeleteAllObjects with probes inserted. Original logic preserved. */\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        /* Log entering this try iteration */\n        Probe_LogEnteringTry((unsigned)TryCount);\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        Probe_LogBeforeForEach(\"OS_ForEachObjectOfType_TIMECB\", (unsigned)OS_OBJECT_TYPE_OS_TIMECB, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        Probe_LogAfterForEach(\"OS_ForEachObjectOfType_TIMECB\", (unsigned)OS_OBJECT_TYPE_OS_TIMECB, (unsigned)ObjectCount);\n\n        Probe_LogBeforeForEach(\"OS_ForEachObjectOfType_TIMEBASE\", (unsigned)OS_OBJECT_TYPE_OS_TIMEBASE, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        Probe_LogAfterForEach(\"OS_ForEachObjectOfType_TIMEBASE\", (unsigned)OS_OBJECT_TYPE_OS_TIMEBASE, (unsigned)ObjectCount);\n\n        Probe_LogBeforeForEach(\"OS_ForEachObjectOfType_TASK\", (unsigned)OS_OBJECT_TYPE_OS_TASK, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        Probe_LogAfterForEach(\"OS_ForEachObjectOfType_TASK\", (unsigned)OS_OBJECT_TYPE_OS_TASK, (unsigned)ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        Probe_LogBeforeForEach(\"OS_ForEachObject_ALL\", (unsigned)0xFFFFFFFFu, &ObjectCount);\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        Probe_LogAfterForEach(\"OS_ForEachObject_ALL\", (unsigned)0xFFFFFFFFu, (unsigned)ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            /* Log why we exit the loop and preserve behavior */\n            Probe_LogLoopExit((unsigned)ObjectCount, (unsigned)TryCount);\n            break;\n        }\n        Probe_LogTaskDelay(5u);\n        OS_TaskDelay(5);\n    }\n}\n"
}