{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OSAL is not initialized. If OS_DEBUG is implemented to call OS_printf (for example if OS_DEBUG is a macro or wrapper around OS_printf), this creates an indirect recursive call chain: OS_printf -> OS_DEBUG -> OS_printf, violating Rule 17.2. A similar violation would occur if OS_ConsoleWrite (or any function called by OS_printf) is implemented to call OS_printf.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2506.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <string.h>\n#include <errno.h>\n\n/* Helper probes to log control flow/state to /tmp/logs/2506.txt */\nstatic void ensure_log_dir_exists(void)\n{\n    static int initialized = 0;\n\n    if (initialized)\n        return;\n\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0700);\n    initialized = 1;\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list args;\n    FILE *f;\n    char timestr[64] = \"(no-time)\";\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    ensure_log_dir_exists();\n\n    f = fopen(\"/tmp/logs/2506.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log file cannot be opened, there's not much we can do safely here. */\n        return;\n    }\n\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n        {\n            strncpy(timestr, \"(time-format-error)\", sizeof(timestr));\n            timestr[sizeof(timestr)-1] = '\\0';\n        }\n    }\n\n    fprintf(f, \"[%s] \", timestr);\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and parameters */\n    probe_log(\"ENTER OS_SocketRecvFrom: sock_id=%lu, buffer=%p, buflen=%zu, RemoteAddr=%p, timeout=%d\",\n              (unsigned long)sock_id, buffer, buflen, (void *)RemoteAddr, (int)timeout);\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    probe_log(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n        probe_log(\"Obtained stream pointer=%p\", (void *)stream);\n\n        /* Log relevant stream fields in a defensive manner (cast to integers) */\n        probe_log(\"stream->socket_type=%d, stream->stream_state=0x%08x\",\n                  (int)stream->socket_type,\n                  (unsigned int)stream->stream_state);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            probe_log(\"Branch: incorrect object type (expected DATAGRAM). Setting return_code=OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            probe_log(\"Branch: socket not bound (stream_state=0x%08x). Setting return_code=OS_ERR_INCORRECT_OBJ_STATE\",\n                      (unsigned int)stream->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            probe_log(\"Branch: calling OS_SocketRecvFrom_Impl with token=%p, buffer=%p, buflen=%zu, RemoteAddr=%p, timeout=%d\",\n                      (void *)&token, buffer, buflen, (void *)RemoteAddr, (int)timeout);\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            probe_log(\"OS_SocketRecvFrom_Impl returned %d\", (int)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"OS_ObjectIdRelease called for token=%p\", (void *)&token);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdGetById failed, skipping stream processing. return_code=%d\", (int)return_code);\n    }\n\n    probe_log(\"EXIT OS_SocketRecvFrom: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}