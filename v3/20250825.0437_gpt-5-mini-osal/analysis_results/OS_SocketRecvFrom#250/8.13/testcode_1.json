{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'stream' is declared as a non-const pointer (OS_stream_internal_record_t *stream;) but is only used to read fields (stream->socket_type and stream->stream_state) and never modifies the object. Per MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type, e.g. 'const OS_stream_internal_record_t *stream;'. Assigning the result of OS_OBJECT_TABLE_GET(...) to a pointer-to-const is allowed, so the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper. Keeps original logic intact but records control flow and state. */\nstatic void OS_SocketRecvFrom_Log(const char *stage,\n                                  osal_id_t sock_id,\n                                  OS_object_token_t *token,\n                                  OS_stream_internal_record_t *stream,\n                                  void *buffer,\n                                  size_t buflen,\n                                  OS_SockAddr_t *RemoteAddr,\n                                  int32 timeout,\n                                  int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2503.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging isn't available, do not affect program flow */\n    }\n\n    /* Print a compact record with relevant pointers and values. Casts to\n     * unsigned long are used to avoid compiler format warnings for\n     * implementation-defined integer types like osal_id_t. */\n    fprintf(f, \"%s: sock_id=%lu token=%p stream=%p buffer=%p buflen=%zu RemoteAddr=%p timeout=%ld return=%ld\\n\",\n            stage,\n            (unsigned long)sock_id,\n            (void *)token,\n            (void *)stream,\n            buffer,\n            buflen,\n            (void *)RemoteAddr,\n            (long)timeout,\n            (long)return_code);\n\n    if (stream != NULL)\n    {\n        /* Print the specific fields that are read in the function to show\n         * they are only inspected (not modified). Cast to unsigned long for\n         * safe printing regardless of the underlying enum/integer width. */\n        fprintf(f, \"%s:   socket_type=%lu stream_state=0x%lx\\n\",\n                stage,\n                (unsigned long)stream->socket_type,\n                (unsigned long)stream->stream_state);\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log after obtaining stream so the probe records the pointer and fields */\n        OS_SocketRecvFrom_Log(\"after_get\", sock_id, &token, stream, buffer, buflen, RemoteAddr, timeout, return_code);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            /* Log the incorrect type decision */\n            OS_SocketRecvFrom_Log(\"incorrect_type\", sock_id, &token, stream, buffer, buflen, RemoteAddr, timeout, OS_ERR_INCORRECT_OBJ_TYPE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            /* Log the incorrect state decision */\n            OS_SocketRecvFrom_Log(\"incorrect_state\", sock_id, &token, stream, buffer, buflen, RemoteAddr, timeout, OS_ERR_INCORRECT_OBJ_STATE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log that we're about to call the implementation */\n            OS_SocketRecvFrom_Log(\"call_impl\", sock_id, &token, stream, buffer, buflen, RemoteAddr, timeout, return_code);\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            /* Log the result from the implementation */\n            OS_SocketRecvFrom_Log(\"after_impl\", sock_id, &token, stream, buffer, buflen, RemoteAddr, timeout, return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token so callers can see final outcome */\n        OS_SocketRecvFrom_Log(\"after_release\", sock_id, &token, stream, buffer, buflen, RemoteAddr, timeout, return_code);\n    }\n\n    return return_code;\n}\n"
}