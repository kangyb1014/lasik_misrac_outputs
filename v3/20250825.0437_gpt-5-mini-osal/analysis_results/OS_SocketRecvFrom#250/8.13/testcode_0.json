{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only used for read-only access (reading impl->selectable and impl->fd). Per MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (const OS_impl_file_internal_record_t *impl) to reflect that the object is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends human-readable trace info to /tmp/logs/2503.txt */\nstatic void OS_SocketRecvFrom_Log(const char *stage,\n                                  const void *stream_ptr,\n                                  const void *buffer_ptr,\n                                  size_t buflen,\n                                  const void *remoteaddr_ptr,\n                                  int32_t timeout,\n                                  const void *token_ptr,\n                                  int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2503.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"STAGE: %s\\n\", stage);\n        fprintf(f, \"  stream=%p buffer=%p buflen=%zu RemoteAddr=%p timeout=%d\\n\",\n                stream_ptr, buffer_ptr, buflen, remoteaddr_ptr, (int)timeout);\n        fprintf(f, \"  token_addr=%p return_code=%d\\n\", token_ptr, (int)return_code);\n        fprintf(f, \"------------------------------------------------------------\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    /* Log parameters after basic checks */\n    OS_SocketRecvFrom_Log(\"params_checked\", NULL, buffer, buflen, RemoteAddr, timeout, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_SocketRecvFrom_Log(\"after_ObjectIdGetById\", NULL, buffer, buflen, RemoteAddr, timeout, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the stream pointer and relevant fields (read-only) */\n        OS_SocketRecvFrom_Log(\"got_stream\",\n                              (const void *)stream,\n                              buffer,\n                              buflen,\n                              RemoteAddr,\n                              timeout,\n                              &token,\n                              return_code);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            /* Log incorrect object type path */\n            OS_SocketRecvFrom_Log(\"incorrect_obj_type\", (const void *)stream, buffer, buflen, RemoteAddr, timeout, &token, OS_ERR_INCORRECT_OBJ_TYPE);\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            /* Log incorrect object state path */\n            OS_SocketRecvFrom_Log(\"incorrect_obj_state_not_bound\", (const void *)stream, buffer, buflen, RemoteAddr, timeout, &token, OS_ERR_INCORRECT_OBJ_STATE);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log before delegating to the implementation */\n            OS_SocketRecvFrom_Log(\"calling_impl\",\n                                  (const void *)stream,\n                                  buffer,\n                                  buflen,\n                                  RemoteAddr,\n                                  timeout,\n                                  &token,\n                                  0);\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            /* Log after returning from implementation */\n            OS_SocketRecvFrom_Log(\"after_impl\",\n                                  (const void *)stream,\n                                  buffer,\n                                  buflen,\n                                  RemoteAddr,\n                                  timeout,\n                                  &token,\n                                  return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_SocketRecvFrom_Log(\"after_release\", (const void *)stream, buffer, buflen, RemoteAddr, timeout, &token, return_code);\n    }\n    else\n    {\n        /* Log early failure */\n        OS_SocketRecvFrom_Log(\"objectid_get_failed\", NULL, buffer, buflen, RemoteAddr, timeout, &token, return_code);\n    }\n\n    return return_code;\n}\n"
}