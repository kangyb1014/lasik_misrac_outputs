{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketRecvFrom_Impl when RemoteAddr == NULL the code sets addrlen = 0; however sa is set to NULL and later recvfrom is called with sa == NULL (and &addrlen). POSIX semantics ignore addrlen when addr is NULL, and in the other branch addrlen is overwritten with OS_SOCKADDR_MAX_LEN. Therefore the assignment addrlen = 0 has no effect on program behaviour and could be removed without changing behaviour \u2014 it is executed but redundant (dead code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2502.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom code.\n",
  "test_code": "int32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and input parameters to help reproduce the reported scenario */\n    {\n        FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_SocketRecvFrom ENTRY: sock_id=%llu buffer=%p buflen=%zu RemoteAddr=%p timeout=%d\\n\",\n                    (unsigned long long)sock_id, (void *)buffer, buflen, (void *)RemoteAddr, (int)timeout);\n            fclose(f);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log the result of object lookup */\n    {\n        FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_ObjectIdGetById returned %d for sock_id=%llu (token=%p)\\n\",\n                    (int)return_code, (unsigned long long)sock_id, (void *)&token);\n            fclose(f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log stream pointer and some of its fields for reproducing control flow */\n        {\n            FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"stream=%p socket_type=%u stream_state=0x%08x\\n\",\n                        (void *)stream,\n                        (unsigned int)(stream ? stream->socket_type : 0U),\n                        (unsigned int)(stream ? stream->stream_state : 0U));\n                fclose(f);\n            }\n        }\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            /* Log incorrect object type branch */\n            {\n                FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"branch: NOT DATAGRAM (socket_type=%u) -> OS_ERR_INCORRECT_OBJ_TYPE\\n\",\n                            (unsigned int)stream->socket_type);\n                    fclose(f);\n                }\n            }\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            /* Log incorrect object state branch */\n            {\n                FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"branch: NOT BOUND (stream_state=0x%08x) -> OS_ERR_INCORRECT_OBJ_STATE\\n\",\n                            (unsigned int)stream->stream_state);\n                    fclose(f);\n                }\n            }\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log that we are about to call the implementation function and the RemoteAddr value */\n            {\n                FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"calling OS_SocketRecvFrom_Impl: token=%p RemoteAddr=%p\\n\",\n                            (void *)&token, (void *)RemoteAddr);\n                    fclose(f);\n                }\n            }\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            /* Log the return from the implementation */\n            {\n                FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"OS_SocketRecvFrom_Impl returned %d for sock_id=%llu RemoteAddr=%p\\n\",\n                            (int)return_code, (unsigned long long)sock_id, (void *)RemoteAddr);\n                    fclose(f);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log that the token was released and the current return code */\n        {\n            FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"OS_ObjectIdRelease called for sock_id=%llu, return_code=%d\\n\",\n                        (unsigned long long)sock_id, (int)return_code);\n                fclose(f);\n            }\n        }\n    }\n    else\n    {\n        /* Log early return due to object lookup failure */\n        {\n            FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"early return: OS_ObjectIdGetById failed with %d for sock_id=%llu\\n\",\n                        (int)return_code, (unsigned long long)sock_id);\n                fclose(f);\n            }\n        }\n    }\n\n    /* Final log before returning */\n    {\n        FILE *f = fopen(\"/tmp/logs/2502.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_SocketRecvFrom EXIT: sock_id=%llu return_code=%d\\n\",\n                    (unsigned long long)sock_id, (int)return_code);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}