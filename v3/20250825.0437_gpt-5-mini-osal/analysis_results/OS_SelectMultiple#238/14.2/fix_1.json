{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2384.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    /* Print a simple timestamp and the message */\n    fprintf(f, \"%lld: \", (long long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_dump_bytes(const void *ptr, size_t count)\n{\n    const unsigned char *p = (const unsigned char *)ptr;\n    size_t i;\n    FILE *f = fopen(\"/tmp/logs/2384.txt\", \"a\");\n    if (f == NULL || ptr == NULL)\n    {\n        if (f != NULL)\n        {\n            fprintf(f, \"(no dump)\\n\");\n            fclose(f);\n        }\n        return;\n    }\n\n    for (i = 0U; i < count; ++i)\n    {\n        fprintf(f, \"%02X\", (unsigned int)p[i]);\n        if ((i + 1U) % 16U == 0U)\n        {\n            fprintf(f, \"\\n\");\n        }\n        else if (i + 1U < count)\n        {\n            fprintf(f, \" \");\n        }\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32_t OS_SelectMultiple(void *ReadSet, void *WriteSet, int32_t msecs)\n{\n    int32_t return_code;\n\n    /* Log entry and parameter values (addresses and msecs) */\n    probe_log(\"ENTER OS_SelectMultiple: ReadSet=%p, WriteSet=%p, msecs=%d\",\n              (void *)ReadSet, (void *)WriteSet, (int)msecs);\n\n    /* If non-null, dump the first bytes of the sets to help reproduce\n     * scenarios where the for-loop condition/size relates to the internal\n     * layout. Keep the dump small to avoid reading too much memory. */\n    if (ReadSet != NULL)\n    {\n        probe_log(\"Dumping first 16 bytes of ReadSet (%p):\", (void *)ReadSet);\n        probe_dump_bytes(ReadSet, 16U);\n    }\n    else\n    {\n        probe_log(\"ReadSet is NULL\");\n    }\n\n    if (WriteSet != NULL)\n    {\n        probe_log(\"Dumping first 16 bytes of WriteSet (%p):\", (void *)WriteSet);\n        probe_dump_bytes(WriteSet, 16U);\n    }\n    else\n    {\n        probe_log(\"WriteSet is NULL\");\n    }\n\n    /*\n     * Preserve original logic: delegate to the implementation.\n     * The call is left unchanged so behavior remains the same.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Log exit and return code */\n    probe_log(\"EXIT OS_SelectMultiple: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp6uu0tg70/src/src/os/shared/src/osapi-select.c:142:9: error: conflicting types for 'OS_SelectMultiple'; have 'int32_t(void *, void *, int32_t)' {aka 'int(void *, void *, int)'}\n  142 | int32_t OS_SelectMultiple(void *ReadSet, void *WriteSet, int32_t msecs)\n      |         ^~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmp6uu0tg70/src/src/os/shared/inc/os-shared-select.h:29,\n                 from /tmp/tmp6uu0tg70/src/src/os/shared/src/osapi-select.c:52:\n/tmp/tmp6uu0tg70/src/src/os/inc/osapi-select.h:103:7: note: previous declaration of 'OS_SelectMultiple' with type 'int32(OS_FdSet *, OS_FdSet *, int32)' {aka 'int(OS_FdSet *, OS_FdSet *, int)'}\n  103 | int32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs);\n      |       ^~~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:300: CMakeFiles/osal.dir/src/os/shared/src/osapi-select.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2384.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    /* Print a simple timestamp and the message */\n    fprintf(f, \"%lld: \", (long long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_dump_bytes(const void *ptr, size_t count)\n{\n    const unsigned char *p = (const unsigned char *)ptr;\n    size_t i;\n    FILE *f = fopen(\"/tmp/logs/2384.txt\", \"a\");\n    if (f == NULL || ptr == NULL)\n    {\n        if (f != NULL)\n        {\n            fprintf(f, \"(no dump)\\n\");\n            fclose(f);\n        }\n        return;\n    }\n\n    for (i = 0U; i < count; ++i)\n    {\n        fprintf(f, \"%02X\", (unsigned int)p[i]);\n        if ((i + 1U) % 16U == 0U)\n        {\n            fprintf(f, \"\\n\");\n        }\n        else if (i + 1U < count)\n        {\n            fprintf(f, \" \");\n        }\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /* Log entry and parameter values (addresses and msecs) */\n    probe_log(\"ENTER OS_SelectMultiple: ReadSet=%p, WriteSet=%p, msecs=%d\",\n              (void *)ReadSet, (void *)WriteSet, (int)msecs);\n\n    /* If non-null, dump the first bytes of the sets to help reproduce\n     * scenarios where the for-loop condition/size relates to the internal\n     * layout. Keep the dump small to avoid reading too much memory. */\n    if (ReadSet != NULL)\n    {\n        probe_log(\"Dumping first 16 bytes of ReadSet (%p):\", (void *)ReadSet);\n        probe_dump_bytes(ReadSet, 16U);\n    }\n    else\n    {\n        probe_log(\"ReadSet is NULL\");\n    }\n\n    if (WriteSet != NULL)\n    {\n        probe_log(\"Dumping first 16 bytes of WriteSet (%p):\", (void *)WriteSet);\n        probe_dump_bytes(WriteSet, 16U);\n    }\n    else\n    {\n        probe_log(\"WriteSet is NULL\");\n    }\n\n    /*\n     * Preserve original logic: delegate to the implementation.\n     * The call is left unchanged so behavior remains the same.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Log exit and return code */\n    probe_log(\"EXIT OS_SelectMultiple: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "The original function signature conflicted with the prior declaration in the header. I changed the definition to match the header: use int32 as the return type and OS_FdSet * for the ReadSet/WriteSet parameters (and int32 for msecs). I also changed the local variable return_code to int32. No other logic was modified."
}