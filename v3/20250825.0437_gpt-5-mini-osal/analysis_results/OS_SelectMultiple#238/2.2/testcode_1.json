{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&ts_end, 0, sizeof(ts_end)) in the 'else' branch of OS_DoSelect is executed only when msecs <= 0, and ts_end is not subsequently read on those code paths (ts_end is only used when msecs > 0). Therefore the memset has no effect on program behaviour and could be removed without changing behavior, making it dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2382.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Forward declaration of the implementation function. The real definition\n * is provided elsewhere in the project. This preserves the original\n * control flow while allowing us to add logging probes around the call.\n */\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs);\n\n/* Probe helper: append a concise record of the control path and state to\n * /tmp/logs/2382.txt. Keeps the original behaviour intact; only performs\n * side-effect logging. */\nstatic void OS_SelectMultiple_Log(const char *stage, const OS_FdSet *ReadSet, const OS_FdSet *WriteSet, int32 msecs, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2382.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage (ENTRY/EXIT), pointer values for sets, msecs and return code.\n         * Casting pointers to (const void*) for portable %p printing. Cast integer\n         * values to (int) for printing to avoid depending on platform typedefs.\n         */\n        fprintf(f, \"%s: ReadSet=%p WriteSet=%p msecs=%d return=%d\\n\",\n                stage, (const void *)ReadSet, (const void *)WriteSet, (int)msecs, (int)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /* Probe: log entry state so callers can observe when msecs <= 0 vs > 0\n     * and reproduce the control paths that trigger the reported violation\n     * in OS_DoSelect (or related internals).\n     */\n    OS_SelectMultiple_Log(\"ENTRY\", ReadSet, WriteSet, msecs, 0);\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Probe: log exit state including the returned code so an analysis can\n     * correlate the input 'msecs' with the observed return and internal\n     * behaviour recorded elsewhere.\n     */\n    OS_SelectMultiple_Log(\"EXIT\", ReadSet, WriteSet, msecs, return_code);\n\n    return return_code;\n}\n"
}