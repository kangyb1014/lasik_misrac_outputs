{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe switch in OS_API_Init contains a default: break; branch. If reached (for an idtype value not matched by any case) the break statement is executed but it has no effect on program behavior; removing the default: break; would not change semantics. Therefore this executed no-op constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2382.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/*\n * Probe functions to log control-flow and state for debugging.\n * These are intentionally lightweight and do not alter the logic of\n * OS_SelectMultiple; they only append diagnostic information to\n * /tmp/logs/2382.txt to help reproduce and provide evidence for\n * the reported violation scenario.\n */\nstatic void OS_SelectMultiple_Log_Pre(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    FILE *f = fopen(\"/tmp/logs/2382.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] OS_SelectMultiple ENTRY: ReadSet=%p, WriteSet=%p, msecs=%ld\\n\",\n                (long)t, (void *)ReadSet, (void *)WriteSet, (long)msecs);\n        fclose(f);\n    }\n}\n\nstatic void OS_SelectMultiple_Log_Post(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2382.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] OS_SelectMultiple EXIT : ReadSet=%p, WriteSet=%p, msecs=%ld, return=%ld\\n\",\n                (long)t, (void *)ReadSet, (void *)WriteSet, (long)msecs, (long)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n\n    /* Log entry state */\n    OS_SelectMultiple_Log_Pre(ReadSet, WriteSet, msecs);\n\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Log exit state including return code */\n    OS_SelectMultiple_Log_Post(ReadSet, WriteSet, msecs, return_code);\n\n    return return_code;\n}\n"
}