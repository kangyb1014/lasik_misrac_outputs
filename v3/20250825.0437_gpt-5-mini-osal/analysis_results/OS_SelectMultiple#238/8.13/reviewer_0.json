{
  "user_message": "An agent A claimed that the following OS_SelectMultiple code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_SelectMultiple.\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nOS_SelectMultiple takes parameters as non-const (OS_FdSet *ReadSet, OS_FdSet *WriteSet) and forwards them unchanged to OS_SelectMultiple_Impl. If neither OS_SelectMultiple nor OS_SelectMultiple_Impl modify the fd sets (i.e. they only read them), then the pointers should be declared const (const OS_FdSet *). In that case the current code (passing non-const pointers and using non-const parameter types) violates MISRA C 2023 Rule 8.13. (If the implementations do modify the sets, then non-const is required and there is no violation.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nprobe_log_fdset_state: time=1756099206 stage=pre ReadSet=(nil) ReadChk=0x00000000 WriteSet=0x7ffedf3082d1 WriteChk=0xcea0f8ee0c2c7711 msecs=1\nprobe_log_fdset_state: time=1756099206 stage=post ReadSet=(nil) ReadChk=0x00000000 WriteSet=0x7ffedf3082d1 WriteChk=0xcea0f8ee0c2c7711 msecs=1\nOS_SelectMultiple: return_code=-16\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 states that a pointer should point to a const-qualified type whenever possible (i.e. if the pointed-to object is not modified). The snippet alone (outer wrapper) does not prove a violation. Whether there is a violation depends on the intended semantics and the implementation: POSIX-style select() semantics update the fd_set arguments to indicate ready descriptors, so for a select-like API the fd_set parameters are intentionally mutable and must not be const. The wrapper simply forwards the (non-const) pointers to OS_SelectMultiple_Impl; if the implementation (or API semantics) modifies the fd_sets then non-const is required and there is no MISRA violation. If, on the other hand, both OS_SelectMultiple and OS_SelectMultiple_Impl truly only read the fd_sets and never modify them, then they should be declared const and the report would be correct. Given the likely (and common) semantics of a select API that modify fd_set arguments, and absent definitive evidence that neither function ever modifies the fd_sets, the claim of a rule 8.13 violation is not justified by the provided code/log alone."
}