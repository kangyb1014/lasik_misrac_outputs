{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe conditional error-handling branch is dead because OS_DEBUG is defined as an empty macro. With OS_DEBUG() expanding to nothing, the if (ret != 0) { OS_DEBUG(...); } block has no effect at runtime \u2014 removing that branch would not change program behaviour. Therefore this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/452.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Unlock_Global_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global_Impl:\n```c\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Unlock_Global_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n#include <time.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal type definitions so this translation unit compiles standalone. */\ntypedef int osal_objtype_t;\n\ntypedef struct OS_impl_objtype_lock\n{\n    pthread_cond_t cond;\n    pthread_mutex_t mutex;\n} OS_impl_objtype_lock_t;\n\n/* The real project will provide this table; declare as extern so linking will use the real one. */\nextern OS_impl_objtype_lock_t *OS_impl_objtype_lock_table[];\n\n/* If OS_DEBUG is not provided by the build, provide a harmless stub so this file compiles. */\n#ifndef OS_DEBUG\nstatic void OS_DEBUG(const char *fmt, ...)\n{\n    (void)fmt;\n}\n#endif\n\n/* Probe helper: append structured logs to /tmp/logs/452.txt capturing control flow and state. */\nstatic void os_unlock_probe(const char *event, osal_objtype_t idtype, OS_impl_objtype_lock_t *impl, int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, avoid affecting program flow. */\n        return;\n    }\n\n    time_t now = time(NULL);\n    /* Use %p for pointer printing; cast to void* to be portable. */\n    if (ret == 0)\n    {\n        fprintf(f, \"%ld: event=%s idtype=%d impl=%p ret=0\\n\",\n                (long)now, event, (int)idtype, (void *)impl);\n    }\n    else\n    {\n        /* strerror may be meaningful for pthread return codes */\n        const char *errstr = strerror(ret);\n        fprintf(f, \"%ld: event=%s idtype=%d impl=%p ret=%d err='%s'\\n\",\n                (long)now, event, (int)idtype, (void *)impl, ret, (errstr != NULL) ? errstr : \"(null)\");\n    }\n\n    fclose(f);\n}\n\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    /* Log entry and the idtype we were called with. */\n    os_unlock_probe(\"entry\", idtype, NULL, 0);\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    /* Log the resolved impl pointer. */\n    os_unlock_probe(\"resolved_impl\", idtype, impl, 0);\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n\n        /* Log the result of pthread_cond_broadcast. */\n        os_unlock_probe(\"pthread_cond_broadcast_called\", idtype, impl, ret);\n\n        if (ret != 0)\n        {\n            /* Preserve the original debug call (may be an empty macro in some builds). */\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n\n            /* Also write a persistent probe to allow reproducing the scenario where OS_DEBUG is empty. */\n            os_unlock_probe(\"pthread_cond_broadcast_error_branch\", idtype, impl, ret);\n\n            /* unexpected but keep going (not critical) */\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n\n        /* Log the result of pthread_mutex_unlock. */\n        os_unlock_probe(\"pthread_mutex_unlock_called\", idtype, impl, ret);\n\n        if (ret != 0)\n        {\n            /* Preserve the original debug call (may be an empty macro in some builds). */\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n\n            /* Also write a persistent probe to allow reproducing the scenario where OS_DEBUG is empty. */\n            os_unlock_probe(\"pthread_mutex_unlock_error_branch\", idtype, impl, ret);\n        }\n    }\n    else\n    {\n        /* Log that no implementation struct was found for this idtype. */\n        os_unlock_probe(\"impl_null\", idtype, impl, 0);\n    }\n}\n"
}