{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe if (ret != 0) block only calls OS_DEBUG, and OS_DEBUG is defined as an empty macro. Thus when pthread_cond_broadcast() fails the only action inside the branch produces no effect (the strerror() argument is not evaluated either), so the entire conditional block is executed but has no impact on program behavior. Removing the if-block would not change runtime behavior \u2014 this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/452.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Unlock_Global_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global_Impl:\n```c\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Unlock_Global_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <pthread.h>\n\n/* Probe helper: append a formatted message to /tmp/logs/452.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    probe_log(\"OS_Unlock_Global_Impl: entered with idtype=%u\", (unsigned int)idtype);\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    probe_log(\"OS_Unlock_Global_Impl: impl pointer=%p\", (void *)impl);\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        probe_log(\"OS_Unlock_Global_Impl: calling pthread_cond_broadcast(&impl->cond)\");\n        ret = pthread_cond_broadcast(&impl->cond);\n        probe_log(\"OS_Unlock_Global_Impl: pthread_cond_broadcast returned %d\", ret);\n\n        if (ret != 0)\n        {\n            /* Preserve existing call so original logic is unchanged */\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n\n            /* Additional probe to capture the fact the branch executed and the strerror() value.\n               This will produce evidence even if OS_DEBUG is defined as an empty macro. */\n            probe_log(\"OS_Unlock_Global_Impl: pthread_cond_broadcast branch taken: ret=%d, strerror=%s\", ret, strerror(ret));\n\n            /* unexpected but keep going (not critical) */\n        }\n\n        probe_log(\"OS_Unlock_Global_Impl: calling pthread_mutex_unlock(&impl->mutex)\");\n        ret = pthread_mutex_unlock(&impl->mutex);\n        probe_log(\"OS_Unlock_Global_Impl: pthread_mutex_unlock returned %d\", ret);\n\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n            probe_log(\"OS_Unlock_Global_Impl: pthread_mutex_unlock branch taken: ret=%d, strerror=%s\", ret, strerror(ret));\n        }\n    }\n    else\n    {\n        probe_log(\"OS_Unlock_Global_Impl: impl is NULL, nothing to do\");\n    }\n}\n"
}