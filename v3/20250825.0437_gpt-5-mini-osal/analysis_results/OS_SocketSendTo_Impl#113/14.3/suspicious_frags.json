{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo_Impl:\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketSendTo_Impl:\ntypedef struct\n{\n    size_t            ActualLength; /**< @brief Length of the actual address data */\n    OS_SockAddrData_t AddrData;     /**< @brief Abstract Address data */\n} OS_SockAddr_t\n...\n#define OS_NETWORK_SUPPORTS_IPV6 \n...\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expressions in the provided code are invariant constants or compile-time fixed values, so none require investigation for Rule 14.3. Specifically:\n\n- switch (sa->sa_family): sa->sa_family is read from the runtime RemoteAddr data (sa points to RemoteAddr->AddrData), so the controlling expression is not invariant.\n- if (addrlen != RemoteAddr->ActualLength): both operands are computed at runtime (addrlen set based on sa_family and RemoteAddr->ActualLength is a parameter), so this condition is not invariant.\n- if (os_result < 0): os_result is the result of the runtime sendto() call, so this is not invariant.\n\nThere are no while, for, do-while, or if statements with literal or compile-time constant controlling expressions in the shown code. The presence of compile-time macros such as AF_INET/AF_INET6 only affect case labels; they are constants but do not make the switch controlling expression invariant. The OS_CHECK_POINTER/OS_CHECK_SIZE macros are used on function parameters and therefore depend on runtime inputs (not shown to be compile-time constants), so they do not present invariant controlling expressions here. Consequently, no code fragments need to be flagged for Rule 14.3."
}