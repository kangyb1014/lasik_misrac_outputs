{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG in the uninitialized-state branch. If OS_DEBUG is implemented by calling OS_printf (a common pattern for a debug logging macro) then the call chain is OS_printf -> OS_DEBUG -> OS_printf, producing indirect recursion and thus violating MISRA C 2023 Rule 17.2. Similarly, if the BUGCHECK_VOID macro expands to call OS_printf when its condition fails, a call with a failing check would cause OS_printf -> BUGCHECK_VOID -> OS_printf (indirect recursion).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1046.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrGetPort_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <arpa/inet.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Minimal type definitions to allow this test probe code to compile and run.\n   These are kept small and compatible with the original implementation logic. */\n\ntypedef int32_t int32;\ntypedef uint16_t uint16;\ntypedef uint16_t in_port_t;\n\n/* Typical values for families used in socket APIs. */\nenum { AF_INET = 2, AF_INET6 = 10 };\n\n/* Return codes used by the original function. */\nenum { OS_SUCCESS = 0, OS_ERR_BAD_ADDRESS = -1 };\n\n/* Accessor structure that mirrors how the implementation views the AddrData. */\ntypedef struct\n{\n    struct { uint16 sa_family; } sa;\n    struct { in_port_t sin_port; } sa_in;\n    struct { in_port_t sin6_port; } sa_in6;\n} OS_SockAddr_Accessor_t;\n\n/* Minimal OS_SockAddr_t that contains raw address bytes; the implementation\n   casts the address of this array to the accessor type. */\ntypedef struct\n{\n    unsigned char AddrData[64];\n} OS_SockAddr_t;\n\n/* Probe logger: append textual traces of control flow and key state to file\n   \"/tmp/logs/1046.txt\". Attempts to create the directory if needed. */\nstatic void probe_log(const char *stage,\n                      const void *addr_ptr,\n                      const void *accessor_ptr,\n                      int family,\n                      uint32_t raw_port,\n                      uint32_t port_after_ntohs,\n                      int32 ret_code)\n{\n    /* Ensure log directory exists (ignore error if it already exists). */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/1046.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not change program behavior. */\n        return;\n    }\n\n    time_t now = time(NULL);\n    char tbuf[32] = \"\";\n    if (now != (time_t)-1)\n    {\n        struct tm tm;\n        if (localtime_r(&now, &tm) != NULL)\n        {\n            (void)strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tm);\n        }\n    }\n\n    fprintf(f, \"[%s] stage=%s addr_ptr=%p accessor_ptr=%p family=%d raw_port=0x%04x port_ntohs=%u ret=%d\\n\",\n            tbuf[0] ? tbuf : \"(no-time)\",\n            stage,\n            addr_ptr,\n            accessor_ptr,\n            family,\n            (unsigned)(raw_port & 0xffffu),\n            (unsigned)port_after_ntohs,\n            (int)ret_code);\n\n    fclose(f);\n}\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Log entry (Addr pointer only). Do not dereference yet beyond original logic. */\n    probe_log(\"entry\", Addr, NULL, -1, 0, 0, 0);\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log after computing accessor and before switch so the accessor pointer and\n       family can be captured. */\n    probe_log(\"after_accessor\", Addr, Accessor, (int)Accessor->sa.sa_family, 0, 0, 0);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            /* Log that AF_INET path was taken and the raw port value. */\n            probe_log(\"case_af_inet\", Addr, Accessor, (int)Accessor->sa.sa_family,\n                      (uint32_t)sa_port, 0, 0);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            /* Log that AF_INET6 path was taken and the raw port value. */\n            probe_log(\"case_af_inet6\", Addr, Accessor, (int)Accessor->sa.sa_family,\n                      (uint32_t)sa_port, 0, 0);\n            break;\n#endif\n        default:\n            /* Log the bad-address path before returning. */\n            probe_log(\"case_default_bad_address\", Addr, Accessor, (int)Accessor->sa.sa_family, 0, 0, OS_ERR_BAD_ADDRESS);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* Convert port from network to host order and assign to output. */\n    *PortNum = ntohs(sa_port);\n\n    /* Log the computed host-order port and successful return. */\n    probe_log(\"exit_success\", Addr, Accessor, (int)Accessor->sa.sa_family,\n              (uint32_t)sa_port, (uint32_t)(*PortNum), OS_SUCCESS);\n\n    return OS_SUCCESS;\n}\n"
}