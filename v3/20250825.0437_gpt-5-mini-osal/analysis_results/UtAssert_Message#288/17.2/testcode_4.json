{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code performs an indirect call through a function pointer (StubPtr->Data.Cb.Ptr.VaHook). If that pointer is ever set to the same function (UT_DefaultStubImplWithArgs) or to a function that (possibly via other pointers) calls UT_DefaultStubImplWithArgs, this becomes an indirect self-call and thus violates MISRA C 2023 Rule 17.2. Example violation: registering UT_DefaultStubImplWithArgs as the VaHook so the runtime call path is UT_DefaultStubImplWithArgs -> VaHook (points to UT_DefaultStubImplWithArgs) -> UT_DefaultStubImplWithArgs (recursion).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2886.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Prototype for external function called by original implementation. */\nextern void UT_BSP_DoText(unsigned char MessageType, const char *Text);\n\n/*\n * Probe helper: append a single line of diagnostic information to the log file.\n * Kept minimal and reentrant-friendly (only a single static counter for depth).\n */\nstatic void UtAssert_LogProbe(const char *stage, unsigned char MessageType, const char *File, unsigned int Line, const char *Spec, const char *BaseName, const char *FinalMessage, void *ub_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/2886.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Write a compact, one-line record describing the current state. */\n    fprintf(f, \"%s | MessageType=%u | FilePtr=%p | File=\" , stage, (unsigned int)MessageType, (const void *)File);\n\n    if (File != NULL)\n    {\n        /* Guard against overly long file names in logs */\n        const char *fn = File;\n        size_t fnlen = strlen(fn);\n        if (fnlen > 128)\n        {\n            fnlen = 128;\n        }\n        fwrite(fn, 1, fnlen, f);\n    }\n    else\n    {\n        fputs(\"(null)\", f);\n    }\n\n    fprintf(f, \" | Line=%u | SpecPtr=%p | Spec=\", Line, (const void *)Spec);\n    if (Spec != NULL)\n    {\n        size_t sl = strlen(Spec);\n        if (sl > 128) sl = 128;\n        fwrite(Spec, 1, sl, f);\n    }\n    else\n    {\n        fputs(\"(null)\", f);\n    }\n\n    fprintf(f, \" | BaseName=%s | FinalMessagePtr=%p | FinalMessage=\", (BaseName != NULL) ? BaseName : \"(null)\", ub_addr);\n\n    if (FinalMessage != NULL)\n    {\n        size_t fl = strlen(FinalMessage);\n        if (fl > 200) fl = 200;\n        fwrite(FinalMessage, 1, fl, f);\n    }\n    else\n    {\n        fputs(\"(null)\", f);\n    }\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nvoid UtAssert_Message(unsigned char MessageType, const char *File, unsigned int Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n    static int  depth = 0; /* small reentrancy depth counter for debugging */\n\n    /* Enter probe: log entry with pointer values and current depth. */\n    depth++;\n    {\n        char depthBuf[32];\n        snprintf(depthBuf, sizeof(depthBuf), \"ENTER depth=%d\", depth);\n        UtAssert_LogProbe(depthBuf, MessageType, File, Line, Spec, NULL, NULL, (void *)UT_BSP_DoText);\n    }\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Log the resolved BaseName and the final message content before the external call. */\n    UtAssert_LogProbe(\"BEFORE_UT_BSP_DoText\", MessageType, File, Line, Spec, (File != NULL) ? BaseName : NULL, FinalMessage, (void *)UT_BSP_DoText);\n\n    /* Call original function (preserve original behavior). */\n    UT_BSP_DoText(MessageType, FinalMessage);\n\n    /* Log return from the external call; this helps detect indirect recursion when nested entries appear. */\n    UtAssert_LogProbe(\"AFTER_UT_BSP_DoText\", MessageType, File, Line, Spec, (File != NULL) ? BaseName : NULL, FinalMessage, (void *)UT_BSP_DoText);\n\n    depth--;\n    {\n        char depthBuf[32];\n        snprintf(depthBuf, sizeof(depthBuf), \"EXIT depth=%d\", depth);\n        UtAssert_LogProbe(depthBuf, MessageType, File, Line, Spec, (File != NULL) ? BaseName : NULL, FinalMessage, (void *)UT_BSP_DoText);\n    }\n}\n"
}