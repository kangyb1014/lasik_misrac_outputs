{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur if UtDebug itself calls the stubbed OS_printf (or another function whose UT stub invokes UT_DefaultHandler_OS_printf). Example call chain: UtDebug -> OS_printf (stub) -> UT_DefaultStubImplWithArgs -> UT_DefaultHandler_OS_printf -> UtDebug. Because UT_DefaultHandler_OS_printf calls UtDebug(\"OS_printf: %s\", str), this creates an indirect recursive cycle if UtDebug uses OS_printf (or another function routed to the same handler).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2886.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdarg.h>\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n/*\n * Probe/logging helpers. These use low-level POSIX open/write/close\n * to reduce the chance of routing through higher-level I/O that\n * could be redirected to OS_printf or similar stubs.\n */\nstatic void UtAssert_LogRaw(const char *buf, size_t len)\n{\n    int fd;\n\n    /* Open in append mode so multiple probes accumulate */\n    fd = open(\"/tmp/logs/2886.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0)\n    {\n        /* Ignore write return value intentionally; best-effort logging */\n        ssize_t res = write(fd, buf, len);\n        (void)res;\n        (void)close(fd);\n    }\n}\n\nstatic void UtAssert_Logf(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    int n;\n\n    va_start(ap, fmt);\n    n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    if (n < 0)\n    {\n        return;\n    }\n\n    /* Ensure we don't exceed buffer when appending newline */\n    if ((size_t)n >= sizeof(buf))\n    {\n        /* Truncate to available space */\n        buf[sizeof(buf) - 2] = '\\n';\n        UtAssert_LogRaw(buf, sizeof(buf) - 1);\n    }\n    else\n    {\n        buf[n] = '\\n';\n        UtAssert_LogRaw(buf, (size_t)(n + 1));\n    }\n}\n\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Entry probe: record input parameters */\n    UtAssert_Logf(\"ENTRY: UtAssert_Message: MessageType=%u, File=%p, Line=%u, Spec=%s\",\n                  (unsigned)MessageType,\n                  (void *)File,\n                  (unsigned)Line,\n                  (Spec != NULL) ? Spec : \"(null)\");\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n\n        /* Preserve original formatting logic */\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n\n        /* Probe: log derived base name and intermediate message length */\n        UtAssert_Logf(\"Derived BaseName=%s, MsgLen=%zu\", BaseName, MsgLen);\n    }\n    else\n    {\n        MsgLen = 0;\n        UtAssert_Logf(\"File is NULL, starting MsgLen=%zu\", MsgLen);\n    }\n\n    /* Build the final message with the variable arguments */\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Probe: log the final message content and its length after formatting */\n    UtAssert_Logf(\"FinalMessage=%s\", FinalMessage);\n    UtAssert_Logf(\"FinalMessage strlen=%zu, buffer_capacity=%zu\", strlen(FinalMessage), (size_t)sizeof(FinalMessage));\n\n    /* Probe: log that we're about to call the downstream text output */\n    UtAssert_Logf(\"About to call UT_BSP_DoText with MessageType=%u\", (unsigned)MessageType);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n\n    /* Probe: indicate return from UT_BSP_DoText; this helps detect re-entrancy if logs show\n       UT_BSP_DoText -> UT_DefaultHandler_OS_printf -> UtDebug -> (calls back here) */\n    UtAssert_Logf(\"Returned from UT_BSP_DoText\");\n}\n"
}