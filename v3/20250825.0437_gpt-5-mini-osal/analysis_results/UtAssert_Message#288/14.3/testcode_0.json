{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses while (1) \u2014 an invariant controlling expression \u2014 and relies on internal break statements (SearchLen >= SearchLimit or match found) to terminate. This is not an intentionally infinite loop, so it does not meet the exception for invariants used to create infinite loops; therefore the controlling expression is invariant and violates Rule 14.3. Recommended remedy: make the loop condition explicit (e.g. while (SearchLen < SearchLimit) or equivalent) so the controlling expression is not invariant.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2885.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n\n/* Minimal typedefs so this translation unit can compile as a standalone test file. */\ntypedef unsigned char uint8;\ntypedef unsigned int  uint32;\n\n/* Forward declaration of the external output function used by the system. */\nextern void UT_BSP_DoText(uint8 MessageType, const char *Text);\n\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName = NULL;\n    size_t      MsgLen;\n    FILE       *log = NULL;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        /* Ensure BaseName is defined for logging later */\n        BaseName = NULL;\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Probe logging: append control-flow and state information to /tmp/logs/2885.txt */\n    log = fopen(\"/tmp/logs/2885.txt\", \"a\");\n    if (log != NULL)\n    {\n        time_t now = time(NULL);\n        fprintf(log, \"---- UtAssert_Message probe ----\\n\");\n        fprintf(log, \"TIME: %ld\\n\", (long)now);\n        fprintf(log, \"MessageType: %u\\n\", (unsigned)MessageType);\n        fprintf(log, \"File: %s\\n\", (File != NULL) ? File : \"(null)\");\n        fprintf(log, \"BaseName: %s\\n\", (BaseName != NULL) ? BaseName : \"(null)\");\n        fprintf(log, \"Line: %u\\n\", (unsigned)Line);\n        fprintf(log, \"MsgLen(before vsnprintf): %zu\\n\", MsgLen);\n        fprintf(log, \"FinalMessage: %s\\n\", FinalMessage);\n        fprintf(log, \"---- End probe ----\\n\\n\");\n        fclose(log);\n    }\n\n    /* Preserve original behavior: forward the composed message to the BSP output */\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}