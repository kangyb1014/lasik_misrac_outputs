{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen StubPtr->Data.Buff.Position == 0 the code unconditionally does memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize). If Buff.BasePtr is NULL (e.g. no return buffer configured) or if BasePtr points to a buffer smaller than Buff.TotalSize, this call will write outside the referenced object (memset(NULL, ..., non-zero) or overrunning the actual allocation). Therefore this use of memset can access beyond the bounds of the object and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2889.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: write diagnostic logs to a fixed file. */\nstatic void UtAssert_WriteLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2889.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nvoid UtAssert_Message(uint8_t MessageType, const char *File, uint32_t Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Log entry state */\n    UtAssert_WriteLog(\"ENTER: UtAssert_Message: MessageType=%u, File=%p, Line=%u, Spec=%p, Spec_str='%s'\",\n                      (unsigned)MessageType, (void *)File, (unsigned)Line, (void *)Spec, (Spec != NULL) ? Spec : \"(null)\");\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n\n        /* Log after computing prefix */\n        UtAssert_WriteLog(\"PREFIX: BaseName=%p, BaseName_str='%s', MsgLen=%zu, FinalMessage_prefix='%.*s'\",\n                          (void *)BaseName, (BaseName != NULL) ? BaseName : \"(null)\", MsgLen, (int)MsgLen, FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n        UtAssert_WriteLog(\"PREFIX: File is NULL -> MsgLen=0\");\n    }\n\n    va_start(va, Spec);\n\n    /* Log before formatting the rest of the message */\n    UtAssert_WriteLog(\"BEFORE_VSNPRINTF: remaining_buffer=%zu, Spec_ptr=%p, Spec_str='%s'\",\n                      sizeof(FinalMessage) - MsgLen, (void *)Spec, (Spec != NULL) ? Spec : \"(null)\");\n\n    /* Perform formatting as original code; capture return for logging */\n    {\n        int vsnret = vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n        va_end(va);\n\n        /* Log result of vsnprintf and the complete FinalMessage (truncated to buffer size) */\n        UtAssert_WriteLog(\"AFTER_VSNPRINTF: vsnprintf_ret=%d, FinalMessage_len=%zu, FinalMessage='%s'\",\n                          vsnret, strlen(FinalMessage), FinalMessage);\n    }\n\n    /* Final user-visible behavior preserved */\n    UT_BSP_DoText(MessageType, FinalMessage);\n\n    /* Log exit */\n    UtAssert_WriteLog(\"EXIT: UtAssert_Message completed: MessageType=%u, FinalMessage_snapshot='%s'\",\n                      (unsigned)MessageType, FinalMessage);\n}\n"
}