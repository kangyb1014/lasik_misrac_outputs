{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code calls strlen(string) without first ensuring that 'string' is non-NULL and actually points to a NUL-terminated array. If UT_Hook_GetArgValueByName returns NULL, strlen will dereference a NULL pointer; if it returns a pointer to a buffer that is not NUL-terminated, strlen will read past the object bounds searching for a terminator. Either case results in out-of-bounds access and therefore violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2889.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "static void UtAssert_Log(const char *Fmt, ...)\n{\n    FILE *F = fopen(\"/tmp/logs/2889.txt\", \"a\");\n    if (F == NULL)\n    {\n        return;\n    }\n\n    va_list Ap;\n    va_start(Ap, Fmt);\n    vfprintf(F, Fmt, Ap);\n    va_end(Ap);\n    fputc('\\n', F);\n    fclose(F);\n}\n\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Log entry and pointers to help reproduce NULL/bad-pointer scenarios */\n    UtAssert_Log(\"Enter UtAssert_Message: MessageType=%u File=%p Line=%u Spec=%p\",\n                 (unsigned)MessageType, (const void *)File, (unsigned)Line, (const void *)Spec);\n\n    if (File != NULL)\n    {\n        UtAssert_Log(\"File is non-NULL. Calling strrchr(File, '/') on File=%p\", (const void *)File);\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n            UtAssert_Log(\"strrchr returned NULL. Using BaseName = File (%p)\", (const void *)BaseName);\n        }\n        else\n        {\n            ++BaseName;\n            UtAssert_Log(\"Found '/' in File. BaseName set to %p (offset into File)\", (const void *)BaseName);\n        }\n\n        /* Preserve original behavior: write prefix into FinalMessage */\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n\n        /* Capture length and log it to record whether NUL-termination occurred in the prefix */\n        MsgLen = strlen(FinalMessage);\n        UtAssert_Log(\"After prefix snprintf: MsgLen=%zu FinalMessage(prefix)='%s'\",\n                     MsgLen, FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n        UtAssert_Log(\"File is NULL. MsgLen set to 0\");\n    }\n\n    /* Log the intention to call vsnprintf including the remaining buffer size and Spec pointer */\n    UtAssert_Log(\"Calling vsnprintf with Spec=%p buffer_offset=%zu remaining=%zu\",\n                 (const void *)Spec, MsgLen, sizeof(FinalMessage) - MsgLen);\n\n    va_start(va, Spec);\n    int vsnret = vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UtAssert_Log(\"vsnprintf returned %d\", vsnret);\n\n    /* Log final message content and the final computed length */\n    {\n        size_t total_len = strlen(FinalMessage);\n        UtAssert_Log(\"FinalMessage full content='%s' total_len=%zu\", FinalMessage, total_len);\n    }\n\n    UtAssert_Log(\"Calling UT_BSP_DoText with MessageType=%u\", (unsigned)MessageType);\n    UT_BSP_DoText(MessageType, FinalMessage);\n    UtAssert_Log(\"UT_BSP_DoText returned for MessageType=%u\", (unsigned)MessageType);\n}\n"
}