{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtSprintf:\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UtSprintf:\n#define UT_SNPRINTF_MAX_BUFS 10\n...\ntypedef struct\n{\n    char Text[UT_SNPRINTF_BUF_SIZE];\n} UT_Snprintf_Buffer_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic uint32               TextIndex = 0;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the static variable TextIndex is used by UtSprintf (incremented and used to index the buffer), so it is not dead. The explicit \"= 0\" is an initialization (not an assignment) and per MISRA C 2023 Rule 2.2 Note 3 initialization is not considered dead code; also the initializer is not an executed operation. Removing the initializer would not change behaviour only because static objects are zero-initialized by the implementation, but that redundancy does not make it a Rule 2.2 violation."
}