{
  "user_message": "An agent A claimed that the following UtSprintf code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UtSprintf.\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nUtSprintf returns a pointer of type char * to the static buffer Buf[TextIndex].Text (a mutable char array). Under MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible. If callers are not intended to modify the returned contents (and given the buffer is shared and transient), the return type should be const char *; as written returning char * therefore violates Rule 8.13. (If the API deliberately allows callers to modify the buffer, then no violation -- but the safer MISRA-compliant change is to return const char *.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct that this code contravenes the intent of MISRA C:2023 Rule 8.13 unless there is a deliberate design reason to permit callers to modify the returned buffer. The rule requires that pointers should point to const-qualified types whenever possible \u2014 i.e. when the pointed-to object is not intended to be modified. UtSprintf returns a char * that points to a static mutable buffer; since the function itself does not need to allow modification and the buffer is shared/transient (so callers should normally not modify it), the return type could and should be const char *. Therefore, absent an explicit, documented requirement that callers may modify the buffer, the current API violates Rule 8.13. (If the API explicitly intends callers to modify the returned contents, then returning char * would be justified and no violation would occur.)"
}