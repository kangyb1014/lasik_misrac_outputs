{
  "user_message": "An agent A claimed that the following UtSprintf code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UtSprintf.\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function returns a non-const char * (mutable pointer) even though callers only need read access to the formatted text. According to MISRA C 2023 Rule 8.13 a pointer should be const-qualified whenever possible \u2014 here the return value can and should be const-qualified because the function does not require callers to modify the buffer. Example fix: change the prototype to 'const char *UtSprintf(const char *Spec, ...)' (unless callers legitimately need to modify the returned string, in which case the non-const return is acceptable). The parameter 'Spec' is already const-qualified and is fine.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 R8.13 requires that pointers should point to a const-qualified type whenever that is possible. A function return type is a pointer declaration and is therefore in scope of the rule. In the UtSprintf implementation the function returns char * (a pointer to non-const char) even though nothing in the function implementation requires callers to be able to modify the returned contents \u2014 the function itself writes into an internal static char buffer and then returns a pointer to that buffer. If the API does not intend callers to modify the returned text, the return type could and should be changed to const char * to satisfy R8.13. Therefore Agent A\u2019s report is correct that this code violates R8.13 as written.\n\nCaveat: if, by API design, callers are expected to modify the returned buffer (for example to further edit the text in-place), then the non-const return is justified and there is no R8.13 violation. Absent such a documented need for mutability, the safer, MISRA-compliant declaration is const char *UtSprintf(const char *Spec, ...)."
}