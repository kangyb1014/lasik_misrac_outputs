{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_STATIC_SYMTABLE_SOURCE (i.e. OS_STATIC_SYMBOL_TABLE) is defined as a non-NULL pointer to a statically allocated, sentinel-terminated array (entries end with Name == NULL), then StaticSym is never set to NULL by the loop increments. The loop therefore always relies on the internal sentinel (StaticSym->Name == NULL) to break out; the test while (StaticSym != NULL) is executed each iteration but always true and can be removed without changing program behaviour. In that build/configuration the comparison is an executed operation whose removal would not affect behaviour, which meets the definition of dead code in MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2112.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Helper probe function: append formatted logs to /tmp/logs/2112.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2112.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    probe_log(\"OS_ModuleLoad_Static START: ModuleName='%s', StaticSym=%p\",\n              (ModuleName != NULL) ? ModuleName : \"(null)\", (void *)StaticSym);\n\n    while (StaticSym != NULL)\n    {\n        probe_log(\"LOOP: StaticSym=%p\", (void *)StaticSym);\n\n        if (StaticSym->Name == NULL)\n        {\n            probe_log(\"SENTINEL: StaticSym->Name == NULL (end of list). Breaking out.\");\n            /* end of list  */\n            break;\n        }\n\n        /* Log the name safely (Name is not NULL here) */\n        probe_log(\"ENTRY: Name='%s', Module_ptr=%p\",\n                  StaticSym->Name, (void *)StaticSym->Module);\n\n        if (StaticSym->Module != NULL)\n        {\n            probe_log(\"Comparing StaticSym->Module='%s' to ModuleName='%s'\",\n                      StaticSym->Module,\n                      (ModuleName != NULL) ? ModuleName : \"(null)\");\n        }\n        else\n        {\n            probe_log(\"StaticSym->Module is NULL; skipping strcmp\");\n        }\n\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            probe_log(\"MATCH FOUND: StaticSym->Module matches ModuleName. Setting return_code=OS_SUCCESS and breaking.\");\n            break;\n        }\n\n        probe_log(\"NO MATCH: incrementing StaticSym from %p to %p\", (void *)StaticSym, (void *)(StaticSym + 1));\n        ++StaticSym;\n    }\n\n    probe_log(\"OS_ModuleLoad_Static END: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}