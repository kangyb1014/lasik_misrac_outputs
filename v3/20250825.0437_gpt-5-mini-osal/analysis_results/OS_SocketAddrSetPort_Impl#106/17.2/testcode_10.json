{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the OS_DEBUG macro/function used here ultimately calls OS_printf (for example, if OS_DEBUG is defined to call OS_printf or calls another routine that calls OS_printf), then OS_printf -> OS_DEBUG -> OS_printf forms an indirect recursion. This would violate MISRA C 2023 Rule 17.2 (functions shall not call themselves, directly or indirectly). The code as shown does not include the definition of OS_DEBUG, so the violation is possible but not proven without that definition.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrSetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1066.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrSetPort_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrSetPort_Impl:\n```c\nint32 OS_SocketAddrSetPort_Impl(OS_SockAddr_t *Addr, uint16 PortNum)\n{\n    in_port_t               sa_port;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    sa_port  = htons(PortNum);\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            Accessor->sa_in.sin_port = sa_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            Accessor->sa_in6.sin6_port = sa_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrSetPort_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\n/* Probe logger: append human-readable control-flow/state info to /tmp/logs/1066.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Try to open file; if directory doesn't exist, attempt to create it once. */\n    f = fopen(\"/tmp/logs/1066.txt\", \"a\");\n    if (!f)\n    {\n        /* attempt to create directory; ignore errors */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1066.txt\", \"a\");\n    }\n\n    if (f)\n    {\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        va_end(ap);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_SocketAddrSetPort_Impl(OS_SockAddr_t *Addr, uint16 PortNum)\n{\n    in_port_t               sa_port;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    sa_port  = htons(PortNum);\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    probe_log(\"ENTER: OS_SocketAddrSetPort_Impl Addr=%p PortNum=%u sa_port=0x%04x\",\n              (void *)Addr, (unsigned)PortNum, (unsigned)sa_port);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            probe_log(\"BRANCH: AF_INET - old sin_port=0x%04x\",\n                      (unsigned)Accessor->sa_in.sin_port);\n            Accessor->sa_in.sin_port = sa_port;\n            probe_log(\"ACTION: AF_INET - set sin_port=0x%04x\",\n                      (unsigned)Accessor->sa_in.sin_port);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            probe_log(\"BRANCH: AF_INET6 - old sin6_port=0x%04x\",\n                      (unsigned)Accessor->sa_in6.sin6_port);\n            Accessor->sa_in6.sin6_port = sa_port;\n            probe_log(\"ACTION: AF_INET6 - set sin6_port=0x%04x\",\n                      (unsigned)Accessor->sa_in6.sin6_port);\n            break;\n#endif\n        default:\n            probe_log(\"BRANCH: DEFAULT - invalid family=%d, returning OS_ERR_BAD_ADDRESS\",\n                      (int)Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    probe_log(\"EXIT: OS_SocketAddrSetPort_Impl returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n"
}