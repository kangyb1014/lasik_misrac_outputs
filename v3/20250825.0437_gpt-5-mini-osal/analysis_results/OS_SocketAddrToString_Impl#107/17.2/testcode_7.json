{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String) and later calls OS_ConsoleWrite(...). If either OS_DEBUG or OS_ConsoleWrite are implemented by calling OS_printf (a common pattern for debug/console helpers), this produces an indirect recursion: OS_printf -> OS_DEBUG (or OS_ConsoleWrite) -> OS_printf. Under that implementation the function would call itself indirectly, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1076.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrToString_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stddef.h>\n#include <arpa/inet.h>\n\n/*\n * Probe logging helper: append timestamped messages to /tmp/logs/1076.txt.\n * This helper is intentionally simple and uses only standard C library\n * functions to avoid any dependence on project logging helpers (which\n * may themselves call OS_printf and produce recursion).\n */\nstatic void Probe_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1076.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging, do not affect original behavior */\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Probe_Log(\"Enter OS_SocketAddrToString_Impl: buffer=%p, buflen=%zu, Addr=%p\", (void *)buffer, buflen, (const void *)Addr);\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    Probe_Log(\"Address family value: %d\", Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            Probe_Log(\"AF_INET selected, addrbuffer=%p\", addrbuffer);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            Probe_Log(\"AF_INET6 selected, addrbuffer=%p\", addrbuffer);\n            break;\n#endif\n        default:\n            Probe_Log(\"Unsupported address family: %d - returning OS_ERR_BAD_ADDRESS\", Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        /* Capture errno indirectly via string copy of buffer if any, and log the failure. */\n        Probe_Log(\"inet_ntop failed for family=%d, addrbuffer=%p, buffer=%p, buflen=%zu - returning OS_ERROR\",\n                  Accessor->sa.sa_family, addrbuffer, (void *)buffer, buflen);\n        return OS_ERROR;\n    }\n\n    /* Successful conversion - log the resulting string */\n    Probe_Log(\"inet_ntop succeeded: result='%s' (buffer=%p, buflen=%zu) - returning OS_SUCCESS\", buffer, (void *)buffer, buflen);\n\n    return OS_SUCCESS;\n}\n"
}