{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe four pointer initializations (conn_record = NULL; sock_record = NULL; sock = NULL; conn = NULL;) are redundant. All four variables are assigned (via OS_OBJECT_TABLE_GET and related code) before any use in every execution path where they are actually dereferenced; if OS_ObjectIdGetById fails the variables are never used. Therefore removing these initializations would not change program behaviour, so they constitute dead code (present only to appease static analysis).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1072.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrToString_Impl code.\n",
  "test_code": "int32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Probe: open log file to record control flow and state for debugging */\n    FILE *log = fopen(\"/tmp/logs/1072.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_SocketAddrToString_Impl ENTRY: buffer=%p buflen=%zu Addr=%p\\n\",\n                (void *)buffer, buflen, (const void *)Addr);\n    }\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    if (log)\n    {\n        fprintf(log, \"Detected sa_family=%d\\n\", (int)Accessor->sa.sa_family);\n    }\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            if (log)\n            {\n                fprintf(log, \"Branch: AF_INET, addrbuffer=%p\\n\", addrbuffer);\n            }\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            if (log)\n            {\n                fprintf(log, \"Branch: AF_INET6, addrbuffer=%p\\n\", addrbuffer);\n            }\n            break;\n#endif\n        default:\n            if (log)\n            {\n                fprintf(log, \"Branch: DEFAULT - bad address family %d, returning OS_ERR_BAD_ADDRESS\\n\",\n                        (int)Accessor->sa.sa_family);\n                fclose(log);\n            }\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"About to call inet_ntop(family=%d, addrbuffer=%p, buflen=%zu)\\n\",\n                (int)Accessor->sa.sa_family, addrbuffer, buflen);\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"inet_ntop returned NULL -> returning OS_ERROR\\n\");\n            fclose(log);\n        }\n\n        return OS_ERROR;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"inet_ntop succeeded, result=\\\"%s\\\" -> returning OS_SUCCESS\\n\", buffer);\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}