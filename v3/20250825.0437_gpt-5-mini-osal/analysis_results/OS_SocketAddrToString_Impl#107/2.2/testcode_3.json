{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe two memset calls that zero sock_token and conn_token are dead code. Both tokens are always initialized by the subsequent API calls (OS_ObjectIdGetById for sock_token and OS_ObjectIdAllocateNew for conn_token) before any use (OS_ObjectIdRelease/OS_ObjectIdFinalizeNew are only invoked on the success path where those APIs have initialized the tokens). Therefore executing the memsets has no effect on program behaviour and their removal would not change behaviour, which violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1072.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrToString_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper: append a log line describing control flow and state to /tmp/logs/1072.txt */\nstatic void os_socketaddr_log_probe(const char *stage,\n                                    int family,\n                                    const void *addrbuffer,\n                                    const char *buffer,\n                                    size_t buflen,\n                                    int inet_success)\n{\n    FILE *f = NULL;\n    struct stat st;\n\n    /* Try to ensure the directory exists; ignore errors if it cannot be created. */\n    if (stat(\"/tmp/logs\", &st) != 0)\n    {\n        (void)mkdir(\"/tmp/logs\", 0777);\n    }\n\n    f = fopen(\"/tmp/logs/1072.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    (void)fprintf(f, \"%ld: stage=%s family=%d addrbuffer=%p buffer=%p buflen=%zu inet_success=%d\\n\",\n                  (long)t, stage != NULL ? stage : \"(null)\", family, addrbuffer, (const void *)buffer, buflen, inet_success);\n\n    if (inet_success == 1 && buffer != NULL)\n    {\n        /* Print the converted address (if available). */\n        (void)fprintf(f, \"%ld: converted_address=\\\"%s\\\"\\n\", (long)t, buffer);\n    }\n    else if (inet_success == 0)\n    {\n        int err = errno;\n        (void)fprintf(f, \"%ld: inet_ntop_failed errno=%d (%s)\\n\", (long)t, err, strerror(err));\n    }\n\n    (void)fclose(f);\n}\n\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            /* Log the bad address family before returning. */\n            os_socketaddr_log_probe(\"bad_family\", Accessor->sa.sa_family, NULL, buffer, buflen, -1);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* Log the selected family and address buffer pointer prior to conversion. */\n    os_socketaddr_log_probe(\"before_inet_ntop\", Accessor->sa.sa_family, addrbuffer, buffer, buflen, -1);\n\n    /* Call inet_ntop and capture the result so we can log outcome without changing behavior. */\n    {\n        const char *inet_ret = inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen);\n\n        if (inet_ret == NULL)\n        {\n            /* Log failure (inet_ntop returned NULL). */\n            os_socketaddr_log_probe(\"inet_ntop_failed\", Accessor->sa.sa_family, addrbuffer, buffer, buflen, 0);\n            return OS_ERROR;\n        }\n\n        /* Log success and the textual address that was written into buffer. */\n        os_socketaddr_log_probe(\"inet_ntop_success\", Accessor->sa.sa_family, addrbuffer, buffer, buflen, 1);\n    }\n\n    return OS_SUCCESS;\n}\n"
}