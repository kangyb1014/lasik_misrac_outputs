{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen(VirtualPath, OS_MAX_PATH_LEN) can read up to OS_MAX_PATH_LEN bytes from the object pointed to by VirtualPath. The code only checks that VirtualPath is non-NULL (OS_CHECK_POINTER) and does not guarantee the underlying object is at least OS_MAX_PATH_LEN bytes long or contains a NUL within that many bytes. If a caller supplies a shorter buffer (or a non-terminated string) the strnlen wrapper can access memory beyond the object's bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable messages to /tmp/logs/1579.txt */\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1579.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Best-effort: if the log file can't be opened, give up silently to avoid\n         * interfering with the original behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_Probe_Log(\"OS_CloseAllFiles: start; iter address=%p\", (void *)&iter);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    OS_Probe_Log(\"OS_ObjectIdIterateActive called for type %d\", (int)LOCAL_OBJID_TYPE);\n\n    /* Iterate entries using the original logic but with additional probes */\n    while (1)\n    {\n        int got = OS_ObjectIdIteratorGetNext(&iter);\n        OS_Probe_Log(\"OS_ObjectIdIteratorGetNext(&iter) returned %d; iter=%p\", got, (void *)&iter);\n        if (!got)\n        {\n            break;\n        }\n\n        /* call OS_close() on the entry referred to by the iterator */\n        OS_Probe_Log(\"Processing iterator entry at iter=%p\", (void *)&iter);\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        OS_Probe_Log(\"OS_ObjectIdIteratorProcessEntry returned %d for iter=%p\", close_code, (void *)&iter);\n\n        if (close_code != OS_SUCCESS)\n        {\n            OS_Probe_Log(\"Close failed: close_code=%d; previous return_code=%d => updating return_code\", close_code, return_code);\n            return_code = close_code;\n        }\n        else\n        {\n            OS_Probe_Log(\"Close succeeded for iter=%p; return_code remains %d\", (void *)&iter, return_code);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n    OS_Probe_Log(\"OS_ObjectIdIteratorDestroy called for iter=%p; final return_code=%d\", (void *)&iter, return_code);\n\n    OS_Probe_Log(\"OS_CloseAllFiles: end; returning %d\", return_code);\n\n    return return_code;\n}\n"
}