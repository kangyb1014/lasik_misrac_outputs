{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as OS_impl_file_internal_record_t * but in this function it is only used for read access (listen(impl->fd, ...)) and the pointed object is not modified. It should be declared as a pointer to const (const OS_impl_file_internal_record_t *impl) to indicate immutability and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/stat.h>\n\n/*\n * Probe helpers: append human-readable logs to /tmp/logs/1103.txt\n * These helpers are non-intrusive and do not change the behavior\n * of the original function (except possibly being more robust in\n * the face of a NULL impl by using a local fd snapshot).\n */\nstatic void os_probe_ensure_logdir(void)\n{\n    /* attempt to create the directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void os_probe_logf(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    time_t t;\n    struct tm tm_buf;\n\n    os_probe_ensure_logdir();\n\n    f = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    t = time(NULL);\n    (void)localtime_r(&t, &tm_buf);\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * Probe information for reproducing the reported Rule 8.13 scenario.\n     * Record the token pointer, the impl pointer value, and the fd value\n     * (snapshot into a local variable to avoid repeated dereference).\n     */\n    os_probe_logf(\"enter: token=%p, impl_ptr=%p\", (const void *)token, (const void *)impl);\n\n    /* Create a const-qualified alias to show that we only read from the record here */\n    const OS_impl_file_internal_record_t *impl_const = impl;\n    (void)impl_const; /* silence unused-variable warnings where applicable */\n\n    /* Snapshot the file descriptor for logging and for the listen call */\n    int fd_snapshot = -1;\n    if (impl != NULL)\n    {\n        fd_snapshot = impl->fd;\n        os_probe_logf(\"impl->fd=%d\", fd_snapshot);\n    }\n    else\n    {\n        os_probe_logf(\"impl is NULL (fd snapshot=%d). Proceeding to listen with fd snapshot.\", fd_snapshot);\n    }\n\n    os_result = listen(fd_snapshot, 10);\n    if (os_result < 0)\n    {\n        os_probe_logf(\"listen failed: fd=%d, errno=%d (%s)\", fd_snapshot, errno, strerror(errno));\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    os_probe_logf(\"listen succeeded: fd=%d\", fd_snapshot);\n\n    return OS_SUCCESS;\n}\n"
}