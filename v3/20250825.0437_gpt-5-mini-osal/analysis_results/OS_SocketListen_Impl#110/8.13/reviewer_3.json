{
  "user_message": "An agent A claimed that the following OS_SocketListen_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketListen_Impl.\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe variable 'impl' is declared as a pointer to a non-const OS_impl_file_internal_record_t (OS_impl_file_internal_record_t *impl) but is only used for read access (impl->fd is read). Therefore the pointer can and should be a pointer-to-const (const OS_impl_file_internal_record_t *impl). The assignment impl = OS_OBJECT_TABLE_GET(...) produces a pointer to a table element that could be assigned to a const-qualified pointer. Because the pointer is not const-qualified even though it can be, this fragment violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketListen_Impl:\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function 'impl' is only used for read access (impl->fd) and nothing in the snippet requires writing through that pointer. The macro OS_OBJECT_TABLE_GET yields a pointer to an element of the (mutable) global array, and assigning that pointer to a pointer-to-const (const OS_impl_file_internal_record_t *impl) is allowed in C. Thus the pointer can and should be const-qualified to satisfy MISRA C 2023 Rule 8.13. (If there is code not shown that needs to modify the record via 'impl', that would justify keeping it non-const, but no such use appears in the provided fragment.)"
}