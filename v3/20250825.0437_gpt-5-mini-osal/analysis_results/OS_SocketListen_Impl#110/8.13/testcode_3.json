{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'impl' is declared as a pointer to a non-const OS_impl_file_internal_record_t (OS_impl_file_internal_record_t *impl) but is only used for read access (impl->fd is read). Therefore the pointer can and should be a pointer-to-const (const OS_impl_file_internal_record_t *impl). The assignment impl = OS_OBJECT_TABLE_GET(...) produces a pointer to a table element that could be assigned to a const-qualified pointer. Because the pointer is not const-qualified even though it can be, this fragment violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdint.h>\n#include <sys/socket.h>\n\n/*\n * Probe helper: append a concise log record to /tmp/logs/1103.txt.\n * This helper is read-only with respect to the OS_impl_file_internal_record_t\n * object and only reports state. It does not change program logic.\n */\nstatic void OS_SocketListen_LogProbe(const OS_object_token_t *token,\n                                    const OS_impl_file_internal_record_t *impl,\n                                    int stage, /* 0 = before listen, 1 = after listen */\n                                    int os_result)\n{\n    FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (log == NULL)\n    {\n        return; /* Best-effort logging only. Do not alter control flow. */\n    }\n\n    /* Write a single-line, human-readable record */\n    if (impl == NULL)\n    {\n        fprintf(log, \"OS_SocketListen_Impl: stage=%d token_ptr=%p impl=NULL os_result=%d errno=%d\\n\",\n                stage, (const void *)token, os_result, errno);\n    }\n    else\n    {\n        /* impl->fd is read-only here and is the relevant field for the violation scenario */\n        fprintf(log, \"OS_SocketListen_Impl: stage=%d token_ptr=%p impl_ptr=%p impl_fd=%d os_result=%d errno=%d\\n\",\n                stage, (const void *)token, (const void *)impl, impl->fd, os_result, errno);\n    }\n\n    fclose(log);\n}\n\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log state before calling listen().\n     * Use a const-qualified view of impl for the probe function to emphasize that\n     * the probe only reads the object. The original impl variable remains non-const\n     * to preserve original logic and signatures.\n     */\n    OS_SocketListen_LogProbe(token, (const OS_impl_file_internal_record_t *)impl, 0, 0);\n\n    os_result = listen(impl->fd, 10);\n\n    /* Log state after calling listen() including the result and errno. */\n    OS_SocketListen_LogProbe(token, (const OS_impl_file_internal_record_t *)impl, 1, os_result);\n\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n"
}