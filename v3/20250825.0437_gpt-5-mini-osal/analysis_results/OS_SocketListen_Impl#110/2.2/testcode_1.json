{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe logging macro OS_DEBUG is defined as an empty replacement (\"#define OS_DEBUG(__VA_ARGS__)\"), so calls like OS_DEBUG(\"listen: %s\\n\", strerror(errno)); in OS_SocketListen_Impl expand to an empty statement at compile time. This is an executed no-op whose removal would not affect program behaviour, and therefore constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1102.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n\n/* Helper logging function that appends probe information to /tmp/logs/1102.txt.\n   Kept minimal and side-effect tolerant: if the file cannot be opened, the function\n   simply returns so original behavior is preserved. */\nstatic void OS_SocketListen_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1102.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Optional timestamp for better traceability */\n    time_t t = time(NULL);\n    if (t != (time_t)(-1))\n    {\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Preserve original lookup logic */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe: log entry and important context (token pointer, impl pointer and fd if available). */\n    OS_SocketListen_Log(\"ENTRY: OS_SocketListen_Impl token=%p impl=%p fd=%d\",\n                        (const void *)token,\n                        (const void *)impl,\n                        (impl != NULL) ? impl->fd : -1);\n\n    os_result = listen(impl->fd, 10);\n\n    if (os_result < 0)\n    {\n        /* Capture errno immediately after the failing call to avoid it being overwritten. */\n        int saved_errno = errno;\n\n        /* Log the error path including errno and its string representation. */\n        OS_SocketListen_Log(\"ERROR: listen failed fd=%d errno=%d (%s)\",\n                            impl->fd,\n                            saved_errno,\n                            strerror(saved_errno));\n\n        return OS_ERROR;\n    }\n\n    /* Log successful listen() result to provide full control-flow trace. */\n    OS_SocketListen_Log(\"EXIT: listen succeeded fd=%d\", impl->fd);\n\n    return OS_SUCCESS;\n}\n"
}