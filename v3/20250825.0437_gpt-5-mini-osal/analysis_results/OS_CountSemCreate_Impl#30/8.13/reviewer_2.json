{
  "user_message": "An agent A claimed that the following OS_CountSemCreate_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemCreate_Impl.\n```c\nint32 OS_CountSemCreate_Impl(const OS_object_token_t *token, uint32 sem_initial_value, uint32 options)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_initial_value > SEM_VALUE_MAX)\n    {\n        return OS_INVALID_SEM_VALUE;\n    }\n\n    if (sem_init(&impl->id, 0, sem_initial_value) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro takes its second parameter by value and applies the address-of operator, so when a non-const OS_object_token_t variable (or expression of non-const type) is passed the expression &(tok) yields a pointer to a non-const OS_object_token_t. Example: OS_object_token_t mytok; impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, mytok); here &(mytok) has type OS_object_token_t * (non-const). According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the macro can produce a non-const pointer where a pointer-to-const would be preferable. This is a violation.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemCreate_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. OS_ObjectIndexFromToken already takes a const OS_object_token_t * parameter, so the expression &(tok) (which has type pointer-to-non-const) is immediately converted to a pointer-to-const when passed to that function; no non-const pointer declaration is being introduced where a const would be required. The pointer returned by the macro is &tbl[index] and has type OS_impl_countsem_internal_record_t *; that target must be modifiable (sem_init takes a sem_t * and will initialize impl->id), so a const-qualified pointer would be inappropriate. In short: the function parameter is correctly const-qualified, and the table pointer must be non-const for correct semantics \u2014 therefore there is no violation of MISRA C 2023 Rule 8.13 here."
}