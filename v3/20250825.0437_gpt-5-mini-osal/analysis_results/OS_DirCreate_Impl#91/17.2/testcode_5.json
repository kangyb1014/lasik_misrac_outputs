{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the DefaultHandler installed by UT_SetHandlerFunction is (or ends up invoking) UT_ExecuteBasicHandler, then calling UT_DefaultStubImpl immediately after can cause UT_ExecuteBasicHandler to be invoked again. For example: 1) UT_ExecuteBasicHandler(FuncKey, ..., UT_ExecuteBasicHandler) calls UT_SetHandlerFunction to register UT_ExecuteBasicHandler as the handler for FuncKey; 2) UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL) calls the registered handler; 3) the registered handler is UT_ExecuteBasicHandler, so UT_ExecuteBasicHandler is called indirectly, causing recursion. This indirect self-call would violate MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/916.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirCreate_Impl:\n```c\nint32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n\n    if (mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) < 0)\n    {\n        return_code = OS_ERROR;\n\n        if (errno == EEXIST)\n        {\n            /* Success if already exists and is a directory */\n            if (stat(local_path, &st) == 0 && S_ISDIR(st.st_mode))\n            {\n                return_code = OS_SUCCESS;\n            }\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <sys/types.h>\n\n/* Probe helpers: write formatted logs to /tmp/logs/916.txt */\nstatic void probe_write(const char *buf, size_t len)\n{\n    int fd = open(\"/tmp/logs/916.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0)\n    {\n        /* best-effort write; ignore errors */\n        (void)write(fd, buf, len);\n        (void)close(fd);\n    }\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    char buffer[512];\n    va_list ap;\n    va_start(ap, fmt);\n    /* format into local buffer, ensure null termination */\n    int n = vsnprintf(buffer, sizeof(buffer), fmt, ap);\n    va_end(ap);\n\n    if (n > 0)\n    {\n        size_t len = (size_t)((n < (int)sizeof(buffer)) ? n : (int)sizeof(buffer) - 1);\n        probe_write(buffer, len);\n        probe_write(\"\\n\", 1);\n    }\n}\n\nint32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n\n    probe_log(\"OS_DirCreate_Impl ENTRY: path=\\\"%s\\\", access=%u, pid=%d\", local_path ? local_path : \"(null)\", (unsigned)access, (int)getpid());\n\n    if (mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) < 0)\n    {\n        /* Capture errno immediately to avoid subsequent calls (e.g. logging) overwriting it */\n        int saved_errno = errno;\n\n        probe_log(\"mkdir FAILED: path=\\\"%s\\\", errno=%d (%s)\", local_path ? local_path : \"(null)\", saved_errno, strerror(saved_errno));\n\n        return_code = OS_ERROR;\n\n        if (saved_errno == EEXIST)\n        {\n            /* Success if already exists and is a directory */\n            int stat_ret = stat(local_path, &st);\n            probe_log(\"stat called for existing path=\\\"%s\\\": stat_ret=%d, stat_errno=%d\", local_path ? local_path : \"(null)\", stat_ret, stat_ret ? errno : 0);\n\n            if (stat_ret == 0)\n            {\n                probe_log(\"stat.st_mode=0%o, S_ISDIR=%d\", (unsigned)st.st_mode, S_ISDIR(st.st_mode) ? 1 : 0);\n\n                if (S_ISDIR(st.st_mode))\n                {\n                    return_code = OS_SUCCESS;\n                    probe_log(\"Existing path is a directory: returning OS_SUCCESS\");\n                }\n                else\n                {\n                    probe_log(\"Existing path is NOT a directory: returning OS_ERROR\");\n                }\n            }\n            else\n            {\n                probe_log(\"stat failed on existing path: errno=%d (%s)\", errno, strerror(errno));\n            }\n        }\n        else\n        {\n            probe_log(\"mkdir failed with non-EEXIST errno: %d (%s)\", saved_errno, strerror(saved_errno));\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        probe_log(\"mkdir SUCCEEDED: path=\\\"%s\\\", returning OS_SUCCESS\", local_path ? local_path : \"(null)\");\n    }\n\n    probe_log(\"OS_DirCreate_Impl EXIT: path=\\\"%s\\\", return_code=%d\", local_path ? local_path : \"(null)\", (int)return_code);\n\n    return return_code;\n}\n"
}