{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable impl is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but in this function it is only used for read-only accesses (impl->selectable, impl->fd). According to MISRA C 2023 Rule 8.13, the pointer should instead be declared to point to a const-qualified type (const OS_impl_file_internal_record_t *impl) whenever possible. Therefore the assignment impl = OS_OBJECT_TABLE_GET(...); and the non-const declaration constitute a violation unless the function later modifies the object through impl (which it does not in the shown code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericWrite_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericWrite_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericWrite_Impl:\n```c\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericWrite_Impl code.\n",
  "test_code": "int32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Probe file for logging control flow/state for violation investigation */\n    FILE *probe = fopen(\"/tmp/logs/863.txt\", \"a\");\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log initial state: token, impl pointer and key impl fields (read-only access) */\n    if (probe != NULL)\n    {\n        fprintf(probe, \"OS_GenericWrite_Impl: entered\\n\");\n        fprintf(probe, \"  token=%p\\n\", (const void *)token);\n        fprintf(probe, \"  impl_ptr=%p\\n\", (const void *)impl);\n        /* log selectable and fd values; these are the fields used read-only in this function */\n        fprintf(probe, \"  impl->selectable=%d, impl->fd=%d\\n\", (int)(impl->selectable ? 1 : 0), (int)impl->fd);\n        fflush(probe);\n    }\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            if (probe != NULL)\n            {\n                fprintf(probe, \"  calling OS_SelectSingle_Impl: operation=0x%08x, timeout=%ld\\n\", (unsigned)operation, (long)timeout);\n                fflush(probe);\n            }\n\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n            if (probe != NULL)\n            {\n                fprintf(probe, \"  OS_SelectSingle_Impl returned %d, operation=0x%08x\\n\", (int)return_code, (unsigned)operation);\n                fflush(probe);\n            }\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            if (probe != NULL)\n            {\n                fprintf(probe, \"  invoking write: fd=%d, buffer=%p, nbytes=%zu\\n\", (int)impl->fd, buffer, nbytes);\n                fflush(probe);\n            }\n\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                if (probe != NULL)\n                {\n                    fprintf(probe, \"  write returned error: os_result=%zd, errno=%d (%s)\\n\", os_result, errno, strerror(errno));\n                    fflush(probe);\n                }\n\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                if (probe != NULL)\n                {\n                    fprintf(probe, \"  write succeeded: bytes_written=%zd\\n\", os_result);\n                    fflush(probe);\n                }\n\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    if (probe != NULL)\n    {\n        fprintf(probe, \"OS_GenericWrite_Impl: exiting with return_code=%d\\n\", (int)return_code);\n        fclose(probe);\n    }\n\n    return return_code;\n}\n"
}