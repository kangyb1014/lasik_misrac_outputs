{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_DoSelect, when msecs <= 0 the code takes the else branch and executes memset(&ts_end, 0, sizeof(ts_end)); however ts_end is never subsequently read in that execution path (the do/while chooses other branches for msecs < 0 or msecs == 0). Removing the memset would not change program behaviour, so this assignment is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericWrite_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/862.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericWrite_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericWrite_Impl:\n```c\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericWrite_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <errno.h>\n#include <string.h>\n\n/* Helper probe function: append formatted log lines to /tmp/logs/862.txt */\nstatic void OS_GenericWrite_Probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/862.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Log entry and parameters */\n    OS_GenericWrite_Probe(\"OS_GenericWrite_Impl ENTRY: token=%p, nbytes=%zu, timeout=%d\", (void *)token, nbytes, timeout);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log impl-derived state if available */\n    if (impl != NULL)\n    {\n        /* Try to log commonly used fields without changing behavior */\n        OS_GenericWrite_Probe(\"impl=%p, impl->fd=%d, impl->selectable=%d\", (void *)impl, impl->fd, (int)impl->selectable);\n    }\n    else\n    {\n        OS_GenericWrite_Probe(\"impl is NULL\");\n    }\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            /* Log before calling select implementation */\n            OS_GenericWrite_Probe(\"Calling OS_SelectSingle_Impl: token=%p, operation=0x%08x, timeout=%d\", (void *)token, (unsigned)operation, timeout);\n\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n            /* Log after select returns: return_code and operation flags */\n            OS_GenericWrite_Probe(\"OS_SelectSingle_Impl returned: return_code=%d, operation=0x%08x\", return_code, (unsigned)operation);\n        }\n        else\n        {\n            OS_GenericWrite_Probe(\"Skipping select: impl->selectable == false\");\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            OS_GenericWrite_Probe(\"About to call write: fd=%d, buffer=%p, nbytes=%zu\", impl->fd, buffer, nbytes);\n\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_GenericWrite_Probe(\"write failed: fd=%d, errno=%d (%s)\", impl->fd, errno, strerror(errno));\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                OS_GenericWrite_Probe(\"write succeeded: fd=%d, written=%zd\", impl->fd, os_result);\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n        else\n        {\n            OS_GenericWrite_Probe(\"Not writable or select failed: return_code=%d, operation=0x%08x\", return_code, (unsigned)operation);\n        }\n    }\n    else\n    {\n        OS_GenericWrite_Probe(\"nbytes <= 0 branch: nbytes=%zu, returning OS_SUCCESS (%d)\", nbytes, (int)OS_SUCCESS);\n    }\n\n    /* Log exit and final return code */\n    OS_GenericWrite_Probe(\"OS_GenericWrite_Impl EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}