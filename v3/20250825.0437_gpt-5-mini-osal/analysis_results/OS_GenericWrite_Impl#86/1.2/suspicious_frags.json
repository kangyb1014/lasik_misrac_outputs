{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_GenericWrite_Impl:\n```c\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_GenericWrite_Impl:\n#define GENERIC_IO_CONST_DATA_CAST \n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\ntypedef int32_t   int32\n...\ntypedef uint32_t  uint32\n...\n#define OS_ERROR (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I did not find any uses of compiler-specific language extensions in the provided code. Specific checks made:\n\n- GENERIC_IO_CONST_DATA_CAST is defined as an empty macro; its usage (GENERIC_IO_CONST_DATA_CAST buffer) simply expands to buffer and is valid standard C preprocessor usage, not a compiler extension.\n- The variadic macro OS_DEBUG(__VA_ARGS__) is a standard C99 feature (variadic macros), not a compiler extension.\n- The macro OS_OBJECT_TABLE_GET uses standard macro expansion and the address-of operator; passing *token to the macro and then using &(tok) is legal C and not an extension (it relies on tok being an lvalue in this usage, which it is).\n- Use of ssize_t, write(), strerror(), and errno are POSIX library facilities, not compiler language extensions.\n- The inline function (static inline OS_ObjectIndexFromToken(...)) and casts (e.g., (int32)os_result) are standard C constructs.\n- There are no occurrences of known compiler extensions such as __attribute__, __asm__, typeof, statement expressions ({ ... }), nested functions, __extension__, or other vendor-specific keywords in the supplied code.\n\nGiven the above, there are no code fragments requiring investigation under MISRA C 2023 Rule 1.2 (language extensions should not be used). If you want, I can re-check for a specific compiler\u2019s documented extensions if you supply the compiler name and documentation to compare against."
}