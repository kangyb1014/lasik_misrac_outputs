{
  "user_message": "An agent A claimed that the following OS_TaskSetPriority code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskSetPriority.\n```c\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf OS_TaskSetPriority_Impl is declared to take a non-const pointer (e.g. int32 OS_TaskSetPriority_Impl(OS_object_token_t *token, osal_priority_t new_priority)) but does not modify the object pointed to, this call violates MISRA C 2023 Rule 8.13. The pointer parameter should be const-qualified (const OS_object_token_t *) whenever possible.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct in the scenario described. MISRA C 2023 Rule 8.13 advises that a pointer type should be const-qualified whenever the pointed-to object is not modified. If OS_TaskSetPriority_Impl is declared as int32 OS_TaskSetPriority_Impl(OS_object_token_t *token, ...) and the implementation does not modify *token, then that declaration is not const-correct and therefore violates Rule 8.13. Note that the violation lies in the callee\u2019s prototype/implementation (the parameter type), not in the caller code shown here. If the implementation does need to modify the token (or it is intended as an out/inout parameter), the non-const parameter is justified and there is no violation."
}