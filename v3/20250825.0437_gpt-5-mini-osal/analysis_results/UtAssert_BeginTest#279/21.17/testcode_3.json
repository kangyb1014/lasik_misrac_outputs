{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) can read up to 63 bytes from SegmentName. If SegmentName is NULL, or points to a shorter/non\u2011NUL\u2011terminated buffer smaller than 63 bytes (or otherwise not guaranteed to have at least 63 accessible bytes), strncpy may read beyond the bounds of the source object. Although the destination buffer (CurrentSegment[64]) is protected by copying at most 63 bytes and then explicitly NUL\u2011terminating, there is no guarantee in the code that the source buffer is large or NUL\u2011terminated, so out\u2011of\u2011bounds access of the source is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2799.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    /* Preserve original reset behavior */\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    /* Probe: log pre-copy state (pointer and copy sizes). Do not attempt to read from SegmentName. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2799.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"UtAssert_BeginTest: ENTER\\n\");\n            fprintf(log, \"  SegmentName_ptr=%p\\n\", (const void *)SegmentName);\n            fprintf(log, \"  Dest_ptr=%p\\n\", (const void *)CurrentSegment);\n            fprintf(log, \"  Dest_size=%zu\\n\", (size_t)sizeof(CurrentSegment));\n            fprintf(log, \"  Copy_limit=%zu\\n\", (size_t)(sizeof(CurrentSegment) - 1));\n            if (SegmentName == NULL)\n            {\n                fprintf(log, \"  NOTE: SegmentName is NULL - strncpy will be passed a NULL pointer\\n\");\n            }\n            else\n            {\n                fprintf(log, \"  NOTE: SegmentName is non-NULL - source length not probed to avoid unsafe reads\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    /* Original copy logic retained */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    /* Probe: log post-copy state. It is safe to read CurrentSegment because we just wrote it and NUL-terminated it. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2799.txt\", \"a\");\n        if (log)\n        {\n            unsigned int i;\n            unsigned int max_print = (unsigned int)(sizeof(CurrentSegment) - 1U);\n            unsigned int len = 0U;\n\n            /* compute length up to max_print without reading beyond CurrentSegment */\n            for (i = 0U; i < max_print; ++i)\n            {\n                if (CurrentSegment[i] == '\\0')\n                {\n                    len = i;\n                    break;\n                }\n            }\n            if (len == 0U && CurrentSegment[0] != '\\0')\n            {\n                /* If no NUL found in loop, string length is max_print */\n                len = max_print;\n            }\n\n            fprintf(log, \"Post-copy:\\n\");\n            fprintf(log, \"  CurrentSegment_ptr=%p\\n\", (void *)CurrentSegment);\n            fprintf(log, \"  CurrentSegment_len=%u\\n\", len);\n\n            /* Print content safely: only printable ASCII shown as chars, others as hex escapes. */\n            fprintf(log, \"  CurrentSegment_content='\");\n            for (i = 0U; i < len; ++i)\n            {\n                unsigned char c = (unsigned char)CurrentSegment[i];\n                if ((c >= ' ' && c <= '~'))\n                {\n                    fputc(c, log);\n                }\n                else\n                {\n                    fprintf(log, \"\\\\x%02x\", c);\n                }\n            }\n            fprintf(log, \"'\\n\");\n            fclose(log);\n        }\n    }\n\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}