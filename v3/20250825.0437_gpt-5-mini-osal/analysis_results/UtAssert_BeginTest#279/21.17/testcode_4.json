{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) can read up to (sizeof(CurrentSegment)-1) bytes from SegmentName. If SegmentName refers to an object that is shorter than that and not NUL-terminated within its own bounds (e.g. a non-terminated char array or an incorrectly sized buffer), strncpy will read past the bounds of the SegmentName object. This can result in out-of-bounds reads and therefore violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2799.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    /* Probe: log entry and key parameters (without dereferencing SegmentName)\n       to avoid reading past the source buffer. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2799.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UtAssert_BeginTest: called with SegmentName pointer = %p\\n\", (const void *)SegmentName);\n            fprintf(log, \"Sizeof(CurrentSegment) = %zu, requested copy size = %zu\\n\",\n                    (size_t)sizeof(CurrentSegment), (size_t)(sizeof(CurrentSegment) - 1));\n            fprintf(log, \"UT_TotalCounters.TestSegmentCount = %u\\n\",\n                    (unsigned)UT_TotalCounters.TestSegmentCount);\n            fclose(log);\n        }\n    }\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    /* Original copy operation (may read from SegmentName). Keep as-is to reproduce scenario. */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    /* Probe: log the contents of CurrentSegment after the strncpy to capture\n       the observable effect of the copy (this reads only our buffer). */\n    {\n        FILE *log = fopen(\"/tmp/logs/2799.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Print a printable representation and a hex dump to help diagnose\n               whether the copied data appears truncated, unterminated, or contains\n               bytes that suggest an out-of-bounds read of the source. */\n            fprintf(log, \"After strncpy: CurrentSegment (as string) = '%s'\\n\", CurrentSegment);\n\n            fprintf(log, \"After strncpy: CurrentSegment (hex, size=%zu) =\", (size_t)sizeof(CurrentSegment));\n            for (size_t i = 0; i < sizeof(CurrentSegment); ++i)\n            {\n                fprintf(log, \" %02X\", (unsigned int)((unsigned char)CurrentSegment[i]));\n            }\n            fprintf(log, \"\\n\");\n\n            /* Find first NUL within the buffer */\n            int nul_index = -1;\n            for (size_t i = 0; i < sizeof(CurrentSegment); ++i)\n            {\n                if (CurrentSegment[i] == 0)\n                {\n                    nul_index = (int)i;\n                    break;\n                }\n            }\n            fprintf(log, \"After strncpy: first NUL at index = %d\\n\", nul_index);\n\n            /* Record the TestSegmentCount chosen for StartTestSegment */\n            fprintf(log, \"Computed TestSegmentCount = %u\\n\", (unsigned)TestSegmentCount);\n\n            fclose(log);\n        }\n    }\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}