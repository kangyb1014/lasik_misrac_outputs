{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nUtAssert_BeginTest calls strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) without any guarantee that SegmentName points to an object containing a NUL within the first 63 bytes. If UtTestDataBaseEntry->TestName refers to a shorter char object that is not NUL-terminated within those 63 bytes (for example a pointer into a smaller buffer or a non-NUL-terminated array of length < 63), strncpy may read up to 63 bytes from SegmentName and therefore access memory beyond the bounds of the source object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2799.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helpers to capture control flow and state for the potential strncpy violation.\n * These helpers log information to /tmp/logs/2799.txt. They avoid reading the source\n * pointer SegmentName (which might be an out-of-bounds read) and only inspect the\n * destination buffer CurrentSegment (which is safe because strncpy writes into it).\n */\nstatic void UtAssert_Log_PreCopy(const char *SegmentName, size_t copy_len)\n{\n    FILE *f = fopen(\"/tmp/logs/2799.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[UtAssert_BeginTest] PRE_COPY: SegmentName=%p, requested_copy_len=%zu\\n\",\n                (const void *)SegmentName, copy_len);\n        fclose(f);\n    }\n}\n\nstatic void UtAssert_Log_PostCopy(const char *SegmentName, const char *DestBuf, size_t destSize, uint32_t TestSegmentCount)\n{\n    FILE *f = fopen(\"/tmp/logs/2799.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[UtAssert_BeginTest] POST_COPY: SegmentName=%p, TestSegmentCount=%\" PRIu32 \"\\n\",\n            (const void *)SegmentName, TestSegmentCount);\n\n    /* Log the destination buffer as a C-string (up to the buffer) and as hex bytes. */\n    /* Find first NUL in destination (safe: DestBuf is owned by this module). */\n    size_t nul_index = destSize; /* destSize means no NUL found inside the buffer */\n    for (size_t i = 0; i < destSize; ++i)\n    {\n        if (DestBuf[i] == '\\0')\n        {\n            nul_index = i;\n            break;\n        }\n    }\n\n    if (nul_index < destSize)\n    {\n        fprintf(f, \"  Destination NUL at index: %zu\\n\", nul_index);\n        fprintf(f, \"  Destination as string: \\\"\");\n        /* write up to nul_index safely */\n        fwrite(DestBuf, 1, nul_index, f);\n        fprintf(f, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  Destination contains no NUL within destSize=%zu\\n\", destSize);\n        fprintf(f, \"  Destination first %zu bytes (as bytes):\\n\", destSize);\n    }\n\n    /* Dump hex bytes of the entire destination buffer to make it clear what was copied. */\n    fprintf(f, \"  Destination hex: \");\n    for (size_t i = 0; i < destSize; ++i)\n    {\n        fprintf(f, \"%02x\", (unsigned char)DestBuf[i]);\n        if (i + 1 < destSize) fprintf(f, \" \");\n    }\n    fprintf(f, \"\\n---\\n\");\n\n    fclose(f);\n}\n\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    /* Log just before the strncpy call. We do NOT inspect the memory pointed to by\n     * SegmentName to avoid introducing further undefined behavior. We only log the\n     * pointer value and the requested copy length so callers can reproduce the scenario.\n     */\n    UtAssert_Log_PreCopy(SegmentName, sizeof(CurrentSegment) - 1);\n\n    /* Original logic (may violate MISRA Rule 21.17 if SegmentName is not NUL-terminated\n     * within the first sizeof(CurrentSegment)-1 bytes). We preserve the original behavior.\n     */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    /* Log after the copy: inspect the destination buffer and the computed TestSegmentCount. */\n    UtAssert_Log_PostCopy(SegmentName, CurrentSegment, sizeof(CurrentSegment), TestSegmentCount);\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}