{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BSP_Unlock_Impl the branch if (status < 0) is effectively unreachable: pthread_mutex_unlock() (per POSIX) returns 0 on success or a positive error number on failure, so status will never be negative and the BSP_DEBUG(...) path can never be taken. This constitutes unreachable code (violating MISRA C 2023 Rule 2.1).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2791.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n    FILE *log;\n\n    /* Log entry to help reproduce control-flow around UT_BSP_Unlock */\n    log = fopen(\"/tmp/logs/2791.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER UtAssert_BeginTest: SegmentName='%s'\\n\", SegmentName ? SegmentName : \"(null)\");\n        fflush(log);\n        fclose(log);\n    }\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    /* Probe: log state just before unlock so callers can see the exact state when UT_BSP_Unlock is invoked. */\n    log = fopen(\"/tmp/logs/2791.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"BEFORE UT_BSP_Unlock: TestSegmentCount=%u, CurrentSegment='%s', UT_TotalCounters.TestSegmentCount=%u\\n\",\n                (unsigned)TestSegmentCount,\n                CurrentSegment ? CurrentSegment : \"(null)\",\n                (unsigned)UT_TotalCounters.TestSegmentCount);\n        fflush(log);\n        fclose(log);\n    }\n\n    UT_BSP_Unlock();\n\n    /* Probe: log that control returned from UT_BSP_Unlock. This helps demonstrate whether any \"negative status\" branch in the BSP unlock implementation was taken (it should not be per POSIX pthread_mutex_unlock semantics).\n       The actual BSP implementation might log its internal status; here we only record that control returned to this caller. */\n    log = fopen(\"/tmp/logs/2791.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"AFTER UT_BSP_Unlock: returned to UtAssert_BeginTest. (If an internal negative status branch was taken this would NOT be observed here.)\\n\");\n        fflush(log);\n        fclose(log);\n    }\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n\n    /* Final probe: record that StartTestSegment was invoked with these parameters. */\n    log = fopen(\"/tmp/logs/2791.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_BSP_StartTestSegment called: TestSegmentCount=%u, SegmentName='%s'\\n\",\n                (unsigned)TestSegmentCount,\n                SegmentName ? SegmentName : \"(null)\");\n        fflush(log);\n        fclose(log);\n    }\n}\n"
}