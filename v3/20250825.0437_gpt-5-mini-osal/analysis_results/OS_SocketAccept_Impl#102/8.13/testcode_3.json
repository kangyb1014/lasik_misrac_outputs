{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SelectSingle_Impl the pointer 'impl' is declared as 'OS_impl_file_internal_record_t *impl;' but it is only used to read members (impl->selectable, impl->fd) and not used to modify the pointee. According to MISRA C 2023 Rule 8.13 the pointer should therefore be const-qualified (const OS_impl_file_internal_record_t *impl). Because the pointer is not const-qualified even though the pointee is not modified, this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1023.txt */\nstatic void OS_SocketAccept_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1023.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: entry. sock_token=%p, conn_token=%p, Addr=%p, timeout=%d\",\n                        (void *)sock_token, (void *)conn_token, (void *)Addr, (int)timeout);\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: resolved impls. sock_impl=%p, conn_impl=%p\",\n                        (void *)sock_impl, (void *)conn_impl);\n\n    if (sock_impl != NULL)\n    {\n        /* Log fields that will be used by the original logic. */\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: sock_impl->fd=%d, sock_impl->selectable=%d\",\n                            (int)sock_impl->fd, (int)sock_impl->selectable);\n    }\n    else\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: sock_impl is NULL\");\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl != NULL && sock_impl->selectable)\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: calling OS_SelectSingle_Impl with operation=0x%08\" PRIx32 \"\",\n                            operation);\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: returned from OS_SelectSingle_Impl: return_code=%d, operation=0x%08\" PRIx32 \"\",\n                            (int)return_code, operation);\n    }\n    else\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: socket not selectable or sock_impl NULL, skipping select\");\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            OS_SocketAccept_Log(\"OS_SocketAccept_Impl: operation indicates not readable -> timeout\");\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen = Addr->ActualLength;\n            OS_SocketAccept_Log(\"OS_SocketAccept_Impl: about to accept. sock_impl->fd=%d, addrlen=%u, Addr->ActualLength=%u\",\n                                (sock_impl != NULL) ? (int)sock_impl->fd : -1, (unsigned)addrlen, (unsigned)Addr->ActualLength);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            if (conn_impl->fd < 0)\n            {\n                int saved_errno = errno;\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: accept failed: conn_impl->fd=%d, errno=%d (%s)\",\n                                    (int)conn_impl->fd, saved_errno, strerror(saved_errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: accept succeeded: conn_impl->fd=%d, accepted_addrlen=%u\",\n                                    (int)conn_impl->fd, (unsigned)addrlen);\n\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: OS_IMPL_SET_SOCKET_FLAGS invoked for conn_token=%p\", (void *)conn_token);\n            }\n        }\n    }\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: exit with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}