{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_SocketAccept_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1023.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: entry. sock_token=%p, conn_token=%p, Addr=%p, timeout=%d\",\n                        (void *)sock_token, (void *)conn_token, (void *)Addr, (int)timeout);\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: resolved impls. sock_impl=%p, conn_impl=%p\",\n                        (void *)sock_impl, (void *)conn_impl);\n\n    if (sock_impl != NULL)\n    {\n        /* Log fields that will be used by the original logic. */\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: sock_impl->fd=%d, sock_impl->selectable=%d\",\n                            (int)sock_impl->fd, (int)sock_impl->selectable);\n    }\n    else\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: sock_impl is NULL\");\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl != NULL && sock_impl->selectable)\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: calling OS_SelectSingle_Impl with operation=0x%08\" PRIx32 \"\",\n                            operation);\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: returned from OS_SelectSingle_Impl: return_code=%d, operation=0x%08\" PRIx32 \"\",\n                            (int)return_code, operation);\n    }\n    else\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: socket not selectable or sock_impl NULL, skipping select\");\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            OS_SocketAccept_Log(\"OS_SocketAccept_Impl: operation indicates not readable -> timeout\");\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen = Addr->ActualLength;\n            OS_SocketAccept_Log(\"OS_SocketAccept_Impl: about to accept. sock_impl->fd=%d, addrlen=%u, Addr->ActualLength=%u\",\n                                (sock_impl != NULL) ? (int)sock_impl->fd : -1, (unsigned)addrlen, (unsigned)Addr->ActualLength);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            if (conn_impl->fd < 0)\n            {\n                int saved_errno = errno;\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: accept failed: conn_impl->fd=%d, errno=%d (%s)\",\n                                    (int)conn_impl->fd, saved_errno, strerror(saved_errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: accept succeeded: conn_impl->fd=%d, accepted_addrlen=%u\",\n                                    (int)conn_impl->fd, (unsigned)addrlen);\n\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: OS_IMPL_SET_SOCKET_FLAGS invoked for conn_token=%p\", (void *)conn_token);\n            }\n        }\n    }\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: exit with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpl1daxmx4/src/src/os/portable/os-impl-bsd-sockets.c: In function 'OS_SocketAccept_Log':\n/tmp/tmpl1daxmx4/src/src/os/portable/os-impl-bsd-sockets.c:445:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  445 |     vfprintf(f, fmt, args);\n      |                      ^~~~\n/tmp/tmpl1daxmx4/src/src/os/portable/os-impl-bsd-sockets.c: In function 'OS_SocketAccept_Impl':\n/tmp/tmpl1daxmx4/src/src/os/portable/os-impl-bsd-sockets.c:484:102: error: expected ')' before 'PRIx32'\n  484 |         OS_SocketAccept_Log(\"OS_SocketAccept_Impl: calling OS_SelectSingle_Impl with operation=0x%08\" PRIx32 \"\",\n      |                            ~                                                                         ^~~~~~~\n      |                                                                                                      )\n/tmp/tmpl1daxmx4/src/src/os/portable/os-impl-bsd-sockets.c:70:1: note: 'PRIx32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   69 | #include \"os-shared-idmap.h\"\n  +++ |+#include <inttypes.h>\n   70 | \n/tmp/tmpl1daxmx4/src/src/os/portable/os-impl-bsd-sockets.c:487:120: error: expected ')' before 'PRIx32'\n  487 |         OS_SocketAccept_Log(\"OS_SocketAccept_Impl: returned from OS_SelectSingle_Impl: return_code=%d, operation=0x%08\" PRIx32 \"\",\n      |                            ~                                                                                           ^~~~~~~\n      |                                                                                                                        )\n/tmp/tmpl1daxmx4/src/src/os/portable/os-impl-bsd-sockets.c:487:121: note: 'PRIx32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  487 |         OS_SocketAccept_Log(\"OS_SocketAccept_Impl: returned from OS_SelectSingle_Impl: return_code=%d, operation=0x%08\" PRIx32 \"\",\n      |                                                                                                                         ^~~~~~\ngmake[2]: *** [unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-bsd-sockets.dir/build.make:76: unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-bsd-sockets.dir/__/__/os/portable/os-impl-bsd-sockets.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:2645: unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-bsd-sockets.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <inttypes.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n\nstatic void OS_SocketAccept_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1023.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    /* Cast to the system va_list to avoid mismatched typedefs like OCS_va_list */\n    vfprintf(f, fmt, (va_list)args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: entry. sock_token=%p, conn_token=%p, Addr=%p, timeout=%d\",\n                        (void *)sock_token, (void *)conn_token, (void *)Addr, (int)timeout);\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: resolved impls. sock_impl=%p, conn_impl=%p\",\n                        (void *)sock_impl, (void *)conn_impl);\n\n    if (sock_impl != NULL)\n    {\n        /* Log fields that will be used by the original logic. */\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: sock_impl->fd=%d, sock_impl->selectable=%d\",\n                            (int)sock_impl->fd, (int)sock_impl->selectable);\n    }\n    else\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: sock_impl is NULL\");\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl != NULL && sock_impl->selectable)\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: calling OS_SelectSingle_Impl with operation=0x%08\" PRIx32 \"\",\n                            operation);\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: returned from OS_SelectSingle_Impl: return_code=%d, operation=0x%08\" PRIx32 \"\",\n                            (int)return_code, operation);\n    }\n    else\n    {\n        OS_SocketAccept_Log(\"OS_SocketAccept_Impl: socket not selectable or sock_impl NULL, skipping select\");\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            OS_SocketAccept_Log(\"OS_SocketAccept_Impl: operation indicates not readable -> timeout\");\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen = Addr->ActualLength;\n            OS_SocketAccept_Log(\"OS_SocketAccept_Impl: about to accept. sock_impl->fd=%d, addrlen=%u, Addr->ActualLength=%u\",\n                                (sock_impl != NULL) ? (int)sock_impl->fd : -1, (unsigned)addrlen, (unsigned)Addr->ActualLength);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            if (conn_impl->fd < 0)\n            {\n                int saved_errno = errno;\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: accept failed: conn_impl->fd=%d, errno=%d (%s)\",\n                                    (int)conn_impl->fd, saved_errno, strerror(saved_errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: accept succeeded: conn_impl->fd=%d, accepted_addrlen=%u\",\n                                    (int)conn_impl->fd, (unsigned)addrlen);\n\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                OS_SocketAccept_Log(\"OS_SocketAccept_Impl: OS_IMPL_SET_SOCKET_FLAGS invoked for conn_token=%p\", (void *)conn_token);\n            }\n        }\n    }\n\n    OS_SocketAccept_Log(\"OS_SocketAccept_Impl: exit with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Two compiler errors were fixed:\n\n1) vfprintf type mismatch: The va_list type used in this build can be a project-specific typedef (e.g. OCS_va_list) which may not match the system va_list expected by vfprintf. I added an explicit cast when calling vfprintf: vfprintf(f, fmt, (va_list)args); This avoids a type-mismatch error while preserving the original varargs logging behavior.\n\n2) Missing PRIx32 macro: The format token PRIx32 comes from <inttypes.h>. I added #include <inttypes.h> so PRIx32 is defined and the format strings using it compile correctly.\n\nNo other logic was changed; the rest of OS_SocketAccept_Impl is preserved exactly as provided."
}