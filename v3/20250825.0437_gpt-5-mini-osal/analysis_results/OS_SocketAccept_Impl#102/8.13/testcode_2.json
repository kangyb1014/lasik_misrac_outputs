{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'OS_impl_file_internal_record_t *sock_impl' is only used for read-only access in the function (checking sock_impl->selectable and reading sock_impl->fd for accept). It therefore should be declared as a pointer to const: 'const OS_impl_file_internal_record_t *sock_impl'. The current non-const declaration omits the const qualifier and thus violates MISRA C 2023 Rule 8.13. (Note: conn_impl must remain non-const because its fd field is assigned.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n\n/* Probe helper: write control-flow and state information to /tmp/logs/1023.txt. */\nstatic void OS_SocketAccept_Probe(const char *stage,\n                                  const void *sock_token_ptr,\n                                  const void *conn_token_ptr,\n                                  const void *addr_ptr,\n                                  const void *sock_impl_ptr,\n                                  const void *conn_impl_ptr,\n                                  int32_t return_code,\n                                  uint32_t operation,\n                                  socklen_t addrlen)\n{\n    FILE *f = fopen(\"/tmp/logs/1023.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Try to extract some likely-present fields for useful debugging output.\n       The function only reads fields; it does not modify any state. */\n    int selectable = -1;\n    int sock_fd = -1;\n    int conn_fd = -1;\n\n    if (sock_impl_ptr != NULL)\n    {\n        /* Access as opaque pointer cast to expected struct type. */\n        const struct { int selectable; int fd; } *si = (const void *)sock_impl_ptr;\n        selectable = si->selectable;\n        sock_fd = si->fd;\n    }\n\n    if (conn_impl_ptr != NULL)\n    {\n        const struct { int fd; } *ci = (const void *)conn_impl_ptr;\n        conn_fd = ci->fd;\n    }\n\n    fprintf(f,\n            \"[OS_SocketAccept] stage=%s return=%ld operation=%u addrlen=%u token_sock=%p token_conn=%p addr=%p sock_impl=%p conn_impl=%p selectable=%d sock_fd=%d conn_fd=%d errno=%d errstr='%s'\\n\",\n            stage,\n            (long)return_code,\n            (unsigned)operation,\n            (unsigned)addrlen,\n            sock_token_ptr,\n            conn_token_ptr,\n            addr_ptr,\n            sock_impl_ptr,\n            conn_impl_ptr,\n            selectable,\n            sock_fd,\n            conn_fd,\n            errno,\n            strerror(errno));\n\n    fclose(f);\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    /* Obtain internal records */\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    /* Log initial state after lookup. This demonstrates that sock_impl is only read from here on. */\n    OS_SocketAccept_Probe(\"after_lookup\",\n                          (const void *)sock_token,\n                          (const void *)conn_token,\n                          (const void *)Addr,\n                          (const void *)sock_impl,\n                          (const void *)conn_impl,\n                          0,\n                          0u,\n                          (socklen_t)0);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        OS_SocketAccept_Probe(\"before_select\",\n                              (const void *)sock_token,\n                              (const void *)conn_token,\n                              (const void *)Addr,\n                              (const void *)sock_impl,\n                              (const void *)conn_impl,\n                              0,\n                              operation,\n                              (socklen_t)0);\n\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n\n        OS_SocketAccept_Probe(\"after_select\",\n                              (const void *)sock_token,\n                              (const void *)conn_token,\n                              (const void *)Addr,\n                              (const void *)sock_impl,\n                              (const void *)conn_impl,\n                              return_code,\n                              operation,\n                              (socklen_t)0);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n\n        OS_SocketAccept_Probe(\"select_skipped\",\n                              (const void *)sock_token,\n                              (const void *)conn_token,\n                              (const void *)Addr,\n                              (const void *)sock_impl,\n                              (const void *)conn_impl,\n                              return_code,\n                              operation,\n                              (socklen_t)0);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n\n            OS_SocketAccept_Probe(\"timeout\",\n                                  (const void *)sock_token,\n                                  (const void *)conn_token,\n                                  (const void *)Addr,\n                                  (const void *)sock_impl,\n                                  (const void *)conn_impl,\n                                  return_code,\n                                  operation,\n                                  (socklen_t)0);\n        }\n        else\n        {\n            /* Preserve original logic: read the incoming address length, then accept using sock_impl->fd. */\n            addrlen = Addr->ActualLength;\n\n            OS_SocketAccept_Probe(\"before_accept\",\n                                  (const void *)sock_token,\n                                  (const void *)conn_token,\n                                  (const void *)Addr,\n                                  (const void *)sock_impl,\n                                  (const void *)conn_impl,\n                                  return_code,\n                                  operation,\n                                  addrlen);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            /* Log result of accept including errno to help reproduce accept failures. */\n            OS_SocketAccept_Probe(\"after_accept\",\n                                  (const void *)sock_token,\n                                  (const void *)conn_token,\n                                  (const void *)Addr,\n                                  (const void *)sock_impl,\n                                  (const void *)conn_impl,\n                                  return_code,\n                                  operation,\n                                  addrlen);\n\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n\n                OS_SocketAccept_Probe(\"accept_failed\",\n                                      (const void *)sock_token,\n                                      (const void *)conn_token,\n                                      (const void *)Addr,\n                                      (const void *)sock_impl,\n                                      (const void *)conn_impl,\n                                      return_code,\n                                      operation,\n                                      addrlen);\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                OS_SocketAccept_Probe(\"accept_succeeded\",\n                                      (const void *)sock_token,\n                                      (const void *)conn_token,\n                                      (const void *)Addr,\n                                      (const void *)sock_impl,\n                                      (const void *)conn_impl,\n                                      return_code,\n                                      operation,\n                                      addrlen);\n            }\n        }\n    }\n\n    OS_SocketAccept_Probe(\"returning\",\n                          (const void *)sock_token,\n                          (const void *)conn_token,\n                          (const void *)Addr,\n                          (const void *)sock_impl,\n                          (const void *)conn_impl,\n                          return_code,\n                          operation,\n                          (socklen_t)Addr->ActualLength);\n\n    return return_code;\n}\n"
}