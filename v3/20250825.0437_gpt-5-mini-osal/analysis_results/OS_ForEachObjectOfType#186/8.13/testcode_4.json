{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator argument is passed and used read\u2011only but is not const\u2011qualified. Specifically, OS_ForEachObjectOfType passes &filter (type OS_creator_filter_t *) to OS_ObjectIdIteratorInit which stores it in OS_object_iter_t.arg (void *). The match function OS_ForEachFilterCreator and the processing function OS_ForEachDoCallback both take a void *ref and only read from it. Similarly, the user callback type OS_ArgCallback_t uses void *arg. All of these pointers could be declared as pointers to const (const void * or const OS_creator_filter_t *) since they are not modified, so the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helpers to record control flow and state to /tmp/logs/1863.txt */\nstatic void os_probe_ensure_dir(void)\n{\n    /* Try to create the directory if it doesn't exist. Ignore errors otherwise. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void os_probe_log_init(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr, void *callback_arg, const void *filter_addr)\n{\n    os_probe_ensure_dir();\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_ForEachObjectOfType] Init: idtype=%lu, creator_id=%lu, user_callback=%p, user_arg=%p, filter_addr=%p\\n\",\n                (unsigned long)idtype, (unsigned long)creator_id, (void *)callback_ptr, callback_arg, filter_addr);\n        fclose(f);\n    }\n}\n\nstatic void os_probe_log_init_result(int init_result)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_ForEachObjectOfType] Init result: %d\\n\", init_result);\n        fclose(f);\n    }\n}\n\nstatic void os_probe_log_next(const OS_object_iter_t *iter, int has_next)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_ForEachObjectOfType] IteratorGetNext: iter=%p, has_next=%d\\n\", (const void *)iter, has_next);\n        fclose(f);\n    }\n}\n\nstatic void os_probe_log_process(const OS_object_iter_t *iter)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_ForEachObjectOfType] ProcessEntry: iter=%p, callback=OS_ForEachDoCallback\\n\", (const void *)iter);\n        fclose(f);\n    }\n}\n\nstatic void os_probe_log_destroy(const OS_object_iter_t *iter)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_ForEachObjectOfType] Destroy: iter=%p\\n\", (const void *)iter);\n        fclose(f);\n    }\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log initial state before calling iterator init */\n    os_probe_log_init(idtype, creator_id, callback_ptr, callback_arg, &filter);\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        os_probe_log_init_result(1);\n\n        /* Iterate over entries; log each GetNext result and each processing call */\n        int has_next;\n        while ((has_next = OS_ObjectIdIteratorGetNext(&iter)) != 0)\n        {\n            os_probe_log_next(&iter, has_next);\n\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            os_probe_log_process(&iter);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        os_probe_log_destroy(&iter);\n    }\n    else\n    {\n        os_probe_log_init_result(0);\n    }\n}\n"
}