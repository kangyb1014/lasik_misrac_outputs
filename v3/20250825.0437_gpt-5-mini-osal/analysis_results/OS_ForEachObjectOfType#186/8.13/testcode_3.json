{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator holds a void *arg and the match function type (OS_ObjectMatchFunc_t) takes a non-const void *ref. In the shown path the filter object is only read (OS_ForEachFilterCreator reads fields but does not modify them) yet the pointer types are not const-qualified. Specifically: iter->arg is declared as void * and OS_ForEachFilterCreator(void *ref, ...) takes a void * instead of const void *, so the pointer could and should be const-qualified. This fails the \u201cpointer should point to a const-qualified type whenever possible\u201d intent of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends human readable logs to /tmp/logs/1863.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    /* Populate filter as in original code */\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log entry and the prepared filter state. Print addresses and values useful to reproduce the scenario. */\n    probe_log(\"ENTER OS_ForEachObjectOfType: idtype=%u, creator_id=0x%08x, callback_ptr=%p, callback_arg=%p\",\n              (unsigned)idtype, (unsigned)creator_id, (void *)callback_ptr, callback_arg);\n\n    probe_log(\"Filter at %p: creator_id=0x%08x, user_callback=%p, user_arg=%p\",\n              (void *)&filter, (unsigned)filter.creator_id, (void *)filter.user_callback, filter.user_arg);\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        probe_log(\"Iterator init succeeded: iter=%p (stack address), iter_arg(ptr)=%p\", (void *)&iter, /* best-effort to capture iter->arg pointer if accessible via API not available here */ (void *)NULL);\n\n        int __probe_iter_count = 0;\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            probe_log(\"Iterator GetNext returned true (iteration %d) for iter=%p\", __probe_iter_count, (void *)&iter);\n\n            /* Log before processing each entry: show which callback will be invoked and the user_arg passed through filter. */\n            probe_log(\"About to process entry: invoking OS_ForEachDoCallback via OS_ObjectIdIteratorProcessEntry; iteration=%d, callback_ptr=%p, user_arg=%p\",\n                      __probe_iter_count, (void *)callback_ptr, callback_arg);\n\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            probe_log(\"Processed entry: iteration=%d complete\", __probe_iter_count);\n            __probe_iter_count++;\n        }\n\n        probe_log(\"Iterator loop complete, total iterations=%d\", __probe_iter_count);\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        probe_log(\"Iterator destroyed: iter=%p\", (void *)&iter);\n    }\n    else\n    {\n        probe_log(\"Iterator init failed for idtype=%u, creator_id=0x%08x\", (unsigned)idtype, (unsigned)creator_id);\n    }\n\n    probe_log(\"EXIT OS_ForEachObjectOfType: idtype=%u, creator_id=0x%08x\", (unsigned)idtype, (unsigned)creator_id);\n}\n"
}