{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ForEachDoCallback takes a void *ref and assigns it to a non-const OS_creator_filter_t *filter even though the function only reads from the pointed-to structure and does not modify it. The pointer could (and should) be const-qualified (e.g. const OS_creator_filter_t *filter = ref, or const void *ref if the callback prototype allowed it), so this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/*\n * Probe wrapper to log each call to the actual OS_ForEachDoCallback.\n * It records the pointer value and a hexdump of the pointed-to memory to\n * /tmp/logs/1863.txt and then forwards the call to the original callback\n * to preserve behavior.\n */\nextern void OS_ForEachDoCallback(void *ref);\n\nstatic void OS_ForEachDoCallback_logger(void *ref)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_ForEachDoCallback_logger: ref=%p\\n\", (void *)ref);\n\n        if (ref != NULL)\n        {\n            unsigned char *p = (unsigned char *)ref;\n            size_t i;\n\n            /* Dump first 64 bytes to give evidence of the pointed-to data */\n            fprintf(f, \"dump(64):\");\n            for (i = 0; i < 64; ++i)\n            {\n                fprintf(f, \" %02X\", (unsigned int)p[i]);\n            }\n            fprintf(f, \"\\n\");\n        }\n\n        fclose(f);\n    }\n\n    /* Preserve original behavior by forwarding to the real callback */\n    OS_ForEachDoCallback(ref);\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log the creation and key fields of the filter so the stack/addresses can be inspected */\n    {\n        FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ForEachObjectOfType: filter@%p creator_id=%llu user_callback=%p user_arg=%p\\n\",\n                    (void *)&filter,\n                    (unsigned long long)(uintptr_t)filter.creator_id,\n                    (void *)filter.user_callback,\n                    filter.user_arg);\n            fclose(f);\n        }\n    }\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Use the logger wrapper so each invocation logs the ref pointer and contents. */\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback_logger);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n"
}