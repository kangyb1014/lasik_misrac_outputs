{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur when the iterator invokes the user callback while unlocked. Execution chain: OS_ObjectIdIteratorProcessEntry -> func (OS_ForEachDoCallback) -> filter->user_callback (e.g. OS_CleanUpObject) -> OS_ForEachObjectOfType -> OS_ObjectIdIteratorInit / OS_ObjectIdIteratorProcessEntry. This causes OS_ObjectIdIteratorProcessEntry to be entered again via the user callback, i.e. an indirect recursive call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1866.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends timestamped messages to /tmp/logs/1866.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1866.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    /* Fallback for environments without localtime_r */\n    struct tm *tmptr = localtime(&t);\n    if (tmptr != NULL)\n    {\n        tm_buf = *tmptr;\n    }\n    else\n    {\n        tm_buf.tm_year = 0;\n        tm_buf.tm_mon = 0;\n        tm_buf.tm_mday = 0;\n        tm_buf.tm_hour = 0;\n        tm_buf.tm_min = 0;\n        tm_buf.tm_sec = 0;\n    }\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    /* Log entry into function and parameters */\n    probe_log(\"ENTER OS_ForEachObjectOfType: idtype=%lu, creator_id=%lu, callback_ptr=%p, callback_arg=%p\",\n              (unsigned long)(uintptr_t)idtype,\n              (unsigned long)(uintptr_t)creator_id,\n              (void *)(uintptr_t)callback_ptr,\n              callback_arg);\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    probe_log(\"Filter prepared: creator_id=%lu, user_callback=%p, user_arg=%p\",\n              (unsigned long)(uintptr_t)filter.creator_id,\n              (void *)(uintptr_t)filter.user_callback,\n              filter.user_arg);\n\n    int init_status = OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter);\n    probe_log(\"OS_ObjectIdIteratorInit returned %d for idtype=%lu (iter@%p)\",\n              init_status,\n              (unsigned long)(uintptr_t)idtype,\n              (void *)&iter);\n\n    if (init_status == OS_SUCCESS)\n    {\n        int iter_count = 0;\n        int has_next = OS_ObjectIdIteratorGetNext(&iter);\n        probe_log(\"First OS_ObjectIdIteratorGetNext returned %d (iter@%p)\", has_next, (void *)&iter);\n\n        while (has_next)\n        {\n            iter_count++;\n            probe_log(\"Iteration %d: about to call OS_ObjectIdIteratorProcessEntry (iter@%p). Filter.user_callback=%p, filter.user_arg=%p\",\n                      iter_count,\n                      (void *)&iter,\n                      (void *)(uintptr_t)filter.user_callback,\n                      filter.user_arg);\n\n            /* Call the original processing function */\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            probe_log(\"Iteration %d: returned from OS_ObjectIdIteratorProcessEntry (iter@%p)\", iter_count, (void *)&iter);\n\n            /* Get next and log the result to capture control flow */\n            has_next = OS_ObjectIdIteratorGetNext(&iter);\n            probe_log(\"OS_ObjectIdIteratorGetNext returned %d (iter@%p) after iteration %d\", has_next, (void *)&iter, iter_count);\n        }\n\n        probe_log(\"Loop complete: total iterations=%d. Now destroying iterator (iter@%p)\", iter_count, (void *)&iter);\n        OS_ObjectIdIteratorDestroy(&iter);\n        probe_log(\"Iterator destroyed (iter@%p)\", (void *)&iter);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdIteratorInit failed with status=%d - skipping iteration\", init_status);\n    }\n\n    probe_log(\"EXIT OS_ForEachObjectOfType: idtype=%lu, creator_id=%lu\",\n              (unsigned long)(uintptr_t)idtype,\n              (unsigned long)(uintptr_t)creator_id);\n}\n"
}