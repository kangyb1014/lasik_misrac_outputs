{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_GetStubRetcodeAndCount:\n```c\nbool UT_GetStubRetcodeAndCount(UT_EntryKey_t FuncKey, int32 *Retcode, int32 *Count)\n{\n    UT_StubTableEntry_t *StubPtr;\n    bool                 Result;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        *Count   = StubPtr->Data.Rc.Count;\n        *Retcode = StubPtr->Data.Rc.Value;\n        Result   = true;\n    }\n    else\n    {\n        Result = false;\n    }\n\n    return Result;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nStubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The local pointer StubPtr is declared as UT_StubTableEntry_t * but in this function it is only used for read access (reading Data.Rc.Count and Data.Rc.Value). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (e.g. const UT_StubTableEntry_t *StubPtr). Therefore the assignment StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER); and the non-const declaration constitute a violation. (Fix: declare StubPtr as const UT_StubTableEntry_t * and/or have UT_GetStubEntry return a pointer to const if appropriate.)"
}