{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a const char *name but calls OS_ObjectIdGetBySearch(..., (void *)name, ...), explicitly casting away the const qualifier. This discards const qualification of the pointer and allows the callee signature to accept a non-const void *, violating the requirement that pointers should point to const-qualified types when possible. A corrective action is to change OS_ObjectIdGetBySearch to accept a const void * (or otherwise avoid casting away const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmfs:\n```c\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Probe logging helper for OS_rmfs\n * Appends human-readable traces of control flow and state to /tmp/logs/1833.txt\n */\nstatic void OS_rmfs_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1833.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not affect program flow if logging fails */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry and input state */\n    OS_rmfs_log(\"ENTER: OS_rmfs(devname=%p, devname_str=\\\"%s\\\")\", (const void *)devname, (devname != NULL) ? devname : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    OS_rmfs_log(\"Calling: OS_ObjectIdGetByName(mode=%d, type=%d, name=%p, &token=%p)\", (int)OS_LOCK_MODE_EXCLUSIVE, (int)LOCAL_OBJID_TYPE, (const void *)devname, (void *)&token);\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    OS_rmfs_log(\"Returned: OS_ObjectIdGetByName -> return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_rmfs_log(\"Path: found name, proceeding to stop volume for token=%p\", (void *)&token);\n\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        OS_rmfs_log(\"Calling: OS_FileSysStopVolume_Impl(&token=%p)\", (void *)&token);\n        return_code = OS_FileSysStopVolume_Impl(&token);\n        OS_rmfs_log(\"Returned: OS_FileSysStopVolume_Impl -> return_code=%ld\", (long)return_code);\n\n        /* Free the entry in the master table  */\n        OS_rmfs_log(\"Calling: OS_ObjectIdFinalizeDelete(prev_return=%ld, &token=%p)\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_rmfs_log(\"Returned: OS_ObjectIdFinalizeDelete -> return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OS_rmfs_log(\"Path: name not found (%p). Mapping to OS_ERR_NAME_NOT_FOUND.\", (const void *)devname);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    OS_rmfs_log(\"EXIT: OS_rmfs -> return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}