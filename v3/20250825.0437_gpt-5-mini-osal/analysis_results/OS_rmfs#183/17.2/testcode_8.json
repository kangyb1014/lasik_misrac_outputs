{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS_SharedGlobalVars.GlobalState is not initialized. If OS_DEBUG is implemented (or macro-expanded) to call OS_printf (a common logging implementation), this yields indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, which violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1836.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmfs:\n```c\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmfs code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe function to log control flow and token state to /tmp/logs/1836.txt */\nstatic void OS_RMFS_ProbeLog(const char *stage, const char *devname, int return_code, const void *token, size_t token_size)\n{\n    FILE *f = fopen(\"/tmp/logs/1836.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    /* Print a concise entry describing the stage, device name, and return code. */\n    fprintf(f, \"[OS_rmfs] stage=%s devname=%s return_code=%d\\n\", stage, devname ? devname : \"(null)\", (int)return_code);\n\n    /* Log token pointer address and a small hex dump (up to 32 bytes) to help diagnose uninitialized state. */\n    if (token != NULL && token_size > 0)\n    {\n        size_t i, dump_len = token_size < 32 ? token_size : 32;\n        const unsigned char *p = (const unsigned char *)token;\n        fprintf(f, \"[OS_rmfs] token_addr=%p token_size=%zu bytes\",\n                token, token_size);\n        for (i = 0; i < dump_len; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned)p[i]);\n        }\n        if (dump_len < token_size)\n        {\n            fprintf(f, \" ...\");\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    /* Optionally log errno for I/O problems to help debugging the logging itself. */\n    if (ferror(f))\n    {\n        fprintf(f, \"[OS_rmfs] logging I/O error: errno=%d (%s)\\n\", errno, strerror(errno));\n    }\n\n    fclose(f);\n}\n\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry with initial state */\n    OS_RMFS_ProbeLog(\"ENTRY\", devname, 0, &token, sizeof(token));\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n\n    /* Log result of ObjectIdGetByName and token state */\n    OS_RMFS_ProbeLog(\"GETBYNAME_RESULT\", devname, return_code, &token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Log result after attempting to stop the volume */\n        OS_RMFS_ProbeLog(\"STOP_VOLUME_RESULT\", devname, return_code, &token, sizeof(token));\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log result after finalizing delete */\n        OS_RMFS_ProbeLog(\"FINALIZE_DELETE_RESULT\", devname, return_code, &token, sizeof(token));\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n\n        /* Log the name-not-found branch */\n        OS_RMFS_ProbeLog(\"NAME_NOT_FOUND\", devname, return_code, NULL, 0);\n    }\n\n    /* Log exit state */\n    OS_RMFS_ProbeLog(\"EXIT\", devname, return_code, NULL, 0);\n\n    return return_code;\n}\n"
}