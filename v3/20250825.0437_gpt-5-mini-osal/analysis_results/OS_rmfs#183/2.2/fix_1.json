{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_probe_ensure_dir(void)\n{\n    /* Attempt to create the directory; ignore errors other than necessary */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    time_t t;\n    char tbuf[64];\n\n    os_probe_ensure_dir();\n\n    f = fopen(\"/tmp/logs/1832.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, bail out quietly to avoid changing behaviour */\n        return;\n    }\n\n    t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tmv;\n        if (localtime_r(&t, &tmv) != NULL)\n        {\n            if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tmv) == 0)\n            {\n                tbuf[0] = '\\0';\n            }\n        }\n        else\n        {\n            tbuf[0] = '\\0';\n        }\n    }\n    else\n    {\n        tbuf[0] = '\\0';\n    }\n\n    fprintf(f, \"[%s] \", tbuf);\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void os_probe_log_token(const char *prefix, const void *token_ptr)\n{\n    os_probe_log(\"%s token_addr=%p\", prefix, token_ptr);\n}\n\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    os_probe_log(\"OS_rmfs ENTRY devname='%s'\", devname ? devname : \"(null)\");\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    os_probe_log(\"OS_ObjectIdGetByName returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token context (address only to avoid coupling to token internals) */\n        os_probe_log_token(\"After GetByName:\", &token);\n\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        os_probe_log(\"Calling OS_FileSysStopVolume_Impl with token_addr=%p\", (void *)&token);\n        return_code = OS_FileSysStopVolume_Impl(&token);\n        os_probe_log(\"OS_FileSysStopVolume_Impl returned %ld\", (long)return_code);\n\n        /* Free the entry in the master table  */\n        os_probe_log(\"Calling OS_ObjectIdFinalizeDelete with previous_return=%ld token_addr=%p\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_probe_log(\"OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        os_probe_log(\"Name not found, returning OS_ERR_NAME_NOT_FOUND (%ld)\", (long)return_code);\n    }\n\n    os_probe_log(\"OS_rmfs EXIT returning %ld\", (long)return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpxn3q0bfp/src/src/os/shared/src/osapi-filesys.c: In function 'os_probe_log':\n/tmp/tmpxn3q0bfp/src/src/os/shared/src/osapi-filesys.c:387:19: error: storage size of 'tmv' isn't known\n  387 |         struct tm tmv;\n      |                   ^~~\n/tmp/tmpxn3q0bfp/src/src/os/shared/src/osapi-filesys.c:407:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  407 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/__/__/os/shared/src/osapi-filesys.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3663: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_rmfs as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n\nstatic void os_probe_ensure_dir(void)\n{\n    /* Attempt to create the directory; ignore errors other than necessary */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    time_t t;\n    char tbuf[64];\n\n    os_probe_ensure_dir();\n\n    f = fopen(\"/tmp/logs/1832.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, bail out quietly to avoid changing behaviour */\n        return;\n    }\n\n    t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tmv;\n        if (localtime_r(&t, &tmv) != NULL)\n        {\n            if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tmv) == 0)\n            {\n                tbuf[0] = '\\0';\n            }\n        }\n        else\n        {\n            tbuf[0] = '\\0';\n        }\n    }\n    else\n    {\n        tbuf[0] = '\\0';\n    }\n\n    fprintf(f, \"[%s] \", tbuf);\n    va_start(ap, fmt);\n    /* Cast to the compiler's va_list type to avoid mismatched typedefs in some build environments */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void os_probe_log_token(const char *prefix, const void *token_ptr)\n{\n    os_probe_log(\"%s token_addr=%p\", prefix, token_ptr);\n}\n\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    os_probe_log(\"OS_rmfs ENTRY devname='%s'\", devname ? devname : \"(null)\");\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    os_probe_log(\"OS_ObjectIdGetByName returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token context (address only to avoid coupling to token internals) */\n        os_probe_log_token(\"After GetByName:\", &token);\n\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        os_probe_log(\"Calling OS_FileSysStopVolume_Impl with token_addr=%p\", (void *)&token);\n        return_code = OS_FileSysStopVolume_Impl(&token);\n        os_probe_log(\"OS_FileSysStopVolume_Impl returned %ld\", (long)return_code);\n\n        /* Free the entry in the master table  */\n        os_probe_log(\"Calling OS_ObjectIdFinalizeDelete with previous_return=%ld token_addr=%p\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_probe_log(\"OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        os_probe_log(\"Name not found, returning OS_ERR_NAME_NOT_FOUND (%ld)\", (long)return_code);\n    }\n\n    os_probe_log(\"OS_rmfs EXIT returning %ld\", (long)return_code);\n    return return_code;\n}\n",
  "explanation": "Fixed by including the appropriate standard headers (<stdio.h>, <stdarg.h>, <time.h>, <sys/stat.h>) so that struct tm and related time functions are defined and mkdir is declared. To address the va_list typedef mismatch observed in the build environment, the code now casts the local va_list variable when calling vfprintf: vfprintf(f, fmt, (va_list)ap);. No logic changes were made to OS_rmfs; only portability/compilation fixes were applied."
}