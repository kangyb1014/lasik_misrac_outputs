{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileSysStopVolume_Impl is a reachable, no-op function that always returns OS_SUCCESS and is called from OS_rmfs. Removing the call (or the function body) would not change the observable behaviour of OS_rmfs because return_code is already OS_SUCCESS and the subsequent call to OS_ObjectIdFinalizeDelete would see the same operation_status. Therefore this executed, effectless operation constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1832.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmfs:\n```c\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helpers - write append entries to /tmp/logs/1832.txt */\nstatic void os_probe_ensure_dir(void)\n{\n    /* Attempt to create the directory; ignore errors other than necessary */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    time_t t;\n    char tbuf[64];\n\n    os_probe_ensure_dir();\n\n    f = fopen(\"/tmp/logs/1832.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, bail out quietly to avoid changing behaviour */\n        return;\n    }\n\n    t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tmv;\n        if (localtime_r(&t, &tmv) != NULL)\n        {\n            if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", &tmv) == 0)\n            {\n                tbuf[0] = '\\0';\n            }\n        }\n        else\n        {\n            tbuf[0] = '\\0';\n        }\n    }\n    else\n    {\n        tbuf[0] = '\\0';\n    }\n\n    fprintf(f, \"[%s] \", tbuf);\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Log a token pointer/address for context. The concrete token structure is unknown here,\n   so only the address is recorded to avoid accessing implementation details. */\nstatic void os_probe_log_token(const char *prefix, const void *token_ptr)\n{\n    os_probe_log(\"%s token_addr=%p\", prefix, token_ptr);\n}\n\n/* The original function (modified to add probes). */\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    os_probe_log(\"OS_rmfs ENTRY devname='%s'\", devname ? devname : \"(null)\");\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    os_probe_log(\"OS_ObjectIdGetByName returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token context (address only to avoid coupling to token internals) */\n        os_probe_log_token(\"After GetByName:\", &token);\n\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        os_probe_log(\"Calling OS_FileSysStopVolume_Impl with token_addr=%p\", (void *)&token);\n        return_code = OS_FileSysStopVolume_Impl(&token);\n        os_probe_log(\"OS_FileSysStopVolume_Impl returned %ld\", (long)return_code);\n\n        /* Free the entry in the master table  */\n        os_probe_log(\"Calling OS_ObjectIdFinalizeDelete with previous_return=%ld token_addr=%p\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_probe_log(\"OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        os_probe_log(\"Name not found, returning OS_ERR_NAME_NOT_FOUND (%ld)\", (long)return_code);\n    }\n\n    os_probe_log(\"OS_rmfs EXIT returning %ld\", (long)return_code);\n    return return_code;\n}\n"
}