{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member 'void *opaque_arg' is used only as an opaque input (assigned from the callback_arg and later read/reinterpreted in OS_Timer_NoArgCallback) and is never used to modify the pointee. According to MISRA C 2023 Rule 8.13 this pointer should point to a const-qualified type (e.g. 'const void *opaque_arg'). Therefore the declaration 'void *opaque_arg' in OS_Timer_ArgWrapper_t violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends human-readable events to /tmp/logs/2723.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2723.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    localtime_r(&t, &tm_buf);\n#else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n        else\n        {\n            (void)memset(&tm_buf, 0, sizeof(tm_buf));\n        }\n    }\n#endif\n\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(fp, \"[%s] \", timestr);\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry and parameter state */\n    probe_logf(\"OS_TimerCreate() entry: timer_name='%s'\", timer_name != NULL ? timer_name : \"(null)\");\n    probe_logf(\"Parameters: timer_id_ptr=%p, accuracy_ptr=%p, callback_ptr_is_nonnull=%d\",\n               (const void *)timer_id, (const void *)accuracy, (int)(callback_ptr != NULL));\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    probe_logf(\"OS_TimeBaseCreate() returned %d; timebase_ref_addr=%p\",\n               (int)return_code, (const void *)&timebase_ref_id);\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_logf(\"OS_TimerCreate(): Time base creation failed; returning %d\", (int)return_code);\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    probe_logf(\"Prepared Conv: Conv.opaque_arg=%p, Conv.timer_callback_func_is_nonnull=%d, timer_name='%s'\",\n               (const void *)Conv.opaque_arg, (int)(Conv.timer_callback_func != NULL), timer_name != NULL ? timer_name : \"(null)\");\n\n    probe_logf(\"Calling OS_DoTimerAdd(timer_id_ptr=%p, timer_name='%s', timebase_ref_addr=%p, callback=OS_Timer_NoArgCallback, opaque_arg=%p, flags=TIMECB_FLAG_DEDICATED_TIMEBASE)\",\n               (const void *)timer_id, timer_name != NULL ? timer_name : \"(null)\", (const void *)&timebase_ref_id, (const void *)Conv.opaque_arg);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    probe_logf(\"OS_DoTimerAdd() returned %d\", (int)return_code);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        probe_logf(\"OS_DoTimerAdd() failed; deleting timebase at addr=%p\", (const void *)&timebase_ref_id);\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        /* record the accuracy written back to caller */\n        probe_logf(\"OS_DoTimerAdd() succeeded; setting *accuracy. accuracy_ptr=%p, MicroSecPerTick_addr=%p\",\n                   (const void *)accuracy, (const void *)&OS_SharedGlobalVars.MicroSecPerTick);\n\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n\n        probe_logf(\"*accuracy set to %u\", (unsigned int)*accuracy);\n    }\n\n    probe_logf(\"OS_TimerCreate() exit: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}