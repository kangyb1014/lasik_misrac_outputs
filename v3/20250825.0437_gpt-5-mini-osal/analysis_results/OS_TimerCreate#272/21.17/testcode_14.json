{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes the caller-supplied pointer \"name\" directly to OS_ObjectIdFindNextMatch (as a void *), but there is no explicit length parameter or guaranteed local re-check inside OS_ObjectIdAllocateNew. If OS_ObjectNameMatch (the callback used by OS_ObjectIdFindNextMatch) compares the supplied name to stored fixed-size name buffers using standard <string.h> functions that expect NUL-terminated strings (e.g. strcmp, strlen, strcpy, strcat) then a long or non-NUL-terminated input string can cause those functions to read past the end of the object referenced by the pointer parameter. For example, if a caller passes a char array that is not NUL-terminated or longer than OS_MAX_API_NAME and OS_ObjectNameMatch performs strcmp(name, entry->timebase_name) (or otherwise uses strlen/strcpy without bounding the length), the string functions will read beyond the bounds of the provided buffer and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2729.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe/log helper - keep minimal and safe (do not dereference caller buffers)\n * Writes control-flow and pointer/state information to /tmp/logs/2729.txt\n */\nstatic void OS_TimerCreate_Log(const char *stage, const char *timer_name, const osal_id_t *timer_id,\n                               const uint32 *accuracy, OS_TimerCallback_t callback_ptr, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2729.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log pointer values and return codes only. Do NOT read or fprintf the contents\n         * of timer_name to avoid reading beyond the caller-supplied buffer (no UB).\n         */\n        fprintf(f, \"%s: timer_name_ptr=%p, timer_id_ptr=%p, accuracy_ptr=%p, callback_ptr=%p, return_code=%ld\\n\",\n                stage,\n                (const void *)timer_name,\n                (const void *)timer_id,\n                (const void *)accuracy,\n                (const void *)callback_ptr,\n                (long)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry with pointer state. Do not dereference timer_name. */\n    OS_TimerCreate_Log(\"ENTRY\", timer_name, timer_id, accuracy, callback_ptr, 0);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n\n    /* Log outcome of time base creation and pointer passed through */\n    OS_TimerCreate_Log(\"AFTER_TimeBaseCreate\", timer_name, timer_id, accuracy, callback_ptr, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    /* Log just before calling OS_DoTimerAdd so we have a trace that the caller-supplied\n     * timer_name pointer was forwarded to the object-creation routine.\n     */\n    OS_TimerCreate_Log(\"BEFORE_DoTimerAdd\", timer_name, timer_id, accuracy, callback_ptr, 0);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /* Log outcome of DoTimerAdd */\n    OS_TimerCreate_Log(\"AFTER_DoTimerAdd\", timer_name, timer_id, accuracy, callback_ptr, return_code);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log that we are about to delete the timebase (so a post-mortem can correlate)\n         * Do not attempt to print the contents of timer_name here either.\n         */\n        OS_TimerCreate_Log(\"BEFORE_TimeBaseDelete\", timer_name, timer_id, accuracy, callback_ptr, return_code);\n        OS_TimeBaseDelete(timebase_ref_id);\n        OS_TimerCreate_Log(\"AFTER_TimeBaseDelete\", timer_name, timer_id, accuracy, callback_ptr, return_code);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        /* Log final success and accuracy value pointer/state */\n        OS_TimerCreate_Log(\"SUCCESS\", timer_name, timer_id, accuracy, callback_ptr, return_code);\n    }\n\n    return return_code;\n}\n"
}