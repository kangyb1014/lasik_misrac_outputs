{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdGlobalFromToken returns a non-const pointer (OS_common_record_t *) into the internal OS_common_table. Callers such as OS_GetResourceName only read fields (e.g. record->name_entry) and do not need to modify the record. By returning a mutable pointer when a const-qualified pointer (const OS_common_record_t *) would suffice, the function introduces unnecessary mutability and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append a line to the log file. */\nstatic void OS_AppendLog(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1893.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\n/* More structured probe that logs several pieces of state. */\nstatic void OS_LogResourceProbeBeforeLookup(osal_id_t object_id, size_t buffer_size)\n{\n    char buf[256];\n    (void)snprintf(buf, sizeof(buf), \"ENTER OS_GetResourceName: object_id=%llu, buffer_size=%zu\",\n                   (unsigned long long)object_id, buffer_size);\n    OS_AppendLog(buf);\n}\n\nstatic void OS_LogResourceProbeAfterGetById(int32 return_code, const OS_object_token_t *token)\n{\n    char buf[256];\n    (void)snprintf(buf, sizeof(buf), \"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\",\n                   return_code, (const void *)token);\n    OS_AppendLog(buf);\n}\n\nstatic void OS_LogResourceProbeRecord(const OS_common_record_t *record)\n{\n    char buf[512];\n    if (record == NULL)\n    {\n        OS_AppendLog(\"Record is NULL\");\n        return;\n    }\n\n    (void)snprintf(buf, sizeof(buf), \"Record addr=%p, name_entry=%p\",\n                   (const void *)record, (const void *)record->name_entry);\n    OS_AppendLog(buf);\n\n    if (record->name_entry != NULL)\n    {\n        /* Log up to a limited number of characters from the name to avoid excessive output */\n        char name_preview[129];\n        size_t i;\n        for (i = 0; i < sizeof(name_preview) - 1 && record->name_entry[i] != '\\0'; ++i)\n        {\n            name_preview[i] = record->name_entry[i];\n        }\n        name_preview[i] = '\\0';\n\n        (void)snprintf(buf, sizeof(buf), \"name_preview=(%s), preview_len=%zu\", name_preview, i);\n        OS_AppendLog(buf);\n    }\n}\n\nstatic void OS_LogResourceProbeNameDecision(size_t name_len, size_t buffer_size, int32 decision_code)\n{\n    char buf[256];\n    (void)snprintf(buf, sizeof(buf), \"Name handling: name_len=%zu, buffer_size=%zu, decision=%d\",\n                   name_len, buffer_size, decision_code);\n    OS_AppendLog(buf);\n}\n\nstatic void OS_LogResourceProbeBeforeRelease(const OS_object_token_t *token)\n{\n    char buf[256];\n    (void)snprintf(buf, sizeof(buf), \"Before OS_ObjectIdRelease: token_addr=%p\", (const void *)token);\n    OS_AppendLog(buf);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /* Log initial entry */\n    OS_LogResourceProbeBeforeLookup(object_id, buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    OS_LogResourceProbeAfterGetById(return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        /* Log the obtained record and its name pointer */\n        OS_LogResourceProbeRecord(record);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                /* decision code 1 -> name too long */\n                OS_LogResourceProbeNameDecision(name_len, buffer_size, 1);\n            }\n            else\n            {\n                /* decision code 0 -> name fits */\n                OS_LogResourceProbeNameDecision(name_len, buffer_size, 0);\n            }\n\n            /* Log intent to copy and the length */\n            {\n                char buf[256];\n                (void)snprintf(buf, sizeof(buf), \"Copying name, name_len=%zu\", name_len);\n                OS_AppendLog(buf);\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            /* Log the final buffer contents (preview) */\n            {\n                char buf[512];\n                size_t preview_len = (name_len < 128u) ? name_len : 128u;\n                char preview[129];\n                size_t i;\n                for (i = 0; i < preview_len; ++i)\n                {\n                    preview[i] = buffer[i];\n                }\n                preview[i] = '\\0';\n                (void)snprintf(buf, sizeof(buf), \"Final buffer preview=(%s), preview_len=%zu\", preview, preview_len);\n                OS_AppendLog(buf);\n            }\n        }\n\n        OS_LogResourceProbeBeforeRelease(&token);\n        OS_ObjectIdRelease(&token);\n        OS_AppendLog(\"Released token\");\n    }\n\n    /* Log exit with return code */\n    {\n        char buf[128];\n        (void)snprintf(buf, sizeof(buf), \"EXIT OS_GetResourceName: return_code=%d\", return_code);\n        OS_AppendLog(buf);\n    }\n\n    return return_code;\n}\n"
}