{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ObjectIdGlobalFromToken returns a non-const pointer to an element of the global OS_common_table (return &OS_common_table[base_idx + token->obj_idx];). In callers such as OS_GetResourceName the record is only read (record->name_entry) and never modified. Because the pointer could be const-qualified (const OS_common_record_t *) to express read-only access and prevent accidental modification, returning a non-const pointer here violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "int32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    /* Open a log file to record control flow and relevant state for debugging the\n     * potential non-const pointer usage scenario. This is only a probe and must\n     * not alter the function behavior. */\n    FILE *log = fopen(\"/tmp/logs/1893.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_GetResourceName ENTER: object_id=%llu buffer=%p buffer_size=%zu\\n\",\n                (unsigned long long)object_id, (void *)buffer, buffer_size);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld (OS_SUCCESS=%d) token_addr=%p token_size=%zu\\n\",\n                (long)return_code, (int)OS_SUCCESS, (void *)&token, sizeof(token));\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGlobalFromToken returned record=%p\\n\", (void *)record);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* compute the name length using the same logic as the original code */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"record->name_entry=%p name_len=%zu buffer_size=%zu\\n\",\n                        (void *)record->name_entry, name_len, buffer_size);\n\n                /* Log the name up to the discovered length to avoid over-reads */\n                fprintf(log, \"record name (truncated to %zu): '%.*s'\\n\",\n                        name_len, (int)name_len, record->name_entry);\n            }\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n\n                if (log != NULL)\n                {\n                    fprintf(log, \"Name too long for buffer: adjusted name_len=%zu return_code=%ld\\n\",\n                            name_len, (long)return_code);\n                }\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Copied name into buffer (len=%zu) buffer_addr=%p buffer='%.*s'\\n\",\n                        name_len, (void *)buffer, (int)name_len, buffer);\n            }\n        }\n\n        /* Release the token in all cases as in the original code */\n        OS_ObjectIdRelease(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Token released. Final return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n    else\n    {\n        /* If OS_ObjectIdGetById failed, still log the outcome and close file if opened */\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById failed with return_code=%ld, exiting\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}