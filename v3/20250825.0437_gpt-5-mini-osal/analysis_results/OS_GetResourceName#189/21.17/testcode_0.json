{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(s, 0, maxlen) will examine up to maxlen bytes starting at s. If the object pointed to by s has an allocated size smaller than maxlen (for example, name_entry is a 16-byte array but buffer_size passed is 64), memchr may read past the end of that object (or past the object if it is not NUL-terminated within its bounds). In OS_GetResourceName the function calls OS_strnlen(record->name_entry, buffer_size) but there is no guarantee in the shown code that record->name_entry has at least buffer_size bytes accessible, so memchr can lead to out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/1899.txt */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1899.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters */\n    os_log_probe(\"ENTER: OS_GetResourceName(object_id=%llu, buffer=%p, buffer_size=%zu)\",\n                 (unsigned long long)object_id, (void *)buffer, buffer_size);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n    os_log_probe(\"After init: buffer[0] set to '\\0'\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    os_log_probe(\"OS_ObjectIdGetById returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        os_log_probe(\"Resolved token -> record=%p\", (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            os_log_probe(\"record->name_entry != NULL -> name_entry=%p; calling OS_strnlen(name_entry, %zu)\",\n                         (void *)record->name_entry, buffer_size);\n\n            /* NOTE: OS_strnlen may internally call memchr/other funcs that can read up to buffer_size bytes */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            os_log_probe(\"OS_strnlen returned name_len=%zu\", name_len);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                os_log_probe(\"Name too long: adjusted return_code=%d, truncated name_len=%zu\", return_code, name_len);\n            }\n\n            os_log_probe(\"About to memcpy(buffer=%p, src=%p, len=%zu)\", (void *)buffer, (void *)record->name_entry, name_len);\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n            os_log_probe(\"After copy: buffer[%zu]='\\0' set; final return_code=%d\", name_len, return_code);\n\n            /* Log a short preview of the buffer contents up to 128 chars or name_len, whichever is smaller */\n            {\n                size_t preview_len = name_len;\n                if (preview_len > 128) preview_len = 128;\n\n                /* Ensure we have a NUL-terminated string in buffer (we set buffer[name_len]=0 above) */\n                if (preview_len > 0)\n                {\n                    /* Print as string safely */\n                    char preview[129];\n                    size_t i;\n                    for (i = 0; i < preview_len; ++i)\n                    {\n                        preview[i] = buffer[i];\n                    }\n                    preview[preview_len] = '\\0';\n                    os_log_probe(\"Buffer preview (len %zu): '%s'\", preview_len, preview);\n                }\n                else\n                {\n                    os_log_probe(\"Buffer preview: <empty>\");\n                }\n            }\n        }\n        else\n        {\n            os_log_probe(\"record->name_entry == NULL\");\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_log_probe(\"Token released\");\n    }\n    else\n    {\n        os_log_probe(\"OS_ObjectIdGetById failed with %d; returning\", return_code);\n    }\n\n    os_log_probe(\"EXIT: OS_GetResourceName -> return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}