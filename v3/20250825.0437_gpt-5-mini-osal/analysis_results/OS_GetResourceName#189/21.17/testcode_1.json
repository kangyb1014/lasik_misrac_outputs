{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen passes buffer_size (the caller-supplied size of the output buffer) as the maxlen argument to memchr when called with record->name_entry. If buffer_size is larger than the actual allocated size of record->name_entry (for example, name_entry is a fixed-size array of N bytes and the caller supplies buffer_size > N), memchr(s,0,buffer_size) may read past the end of record->name_entry, causing an out-of-bounds access. The checks (OS_CHECK_POINTER/OS_CHECK_SIZE) validate the caller buffer but do not ensure buffer_size is <= the size of record->name_entry, so this call can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/*\n * Probe/log helper - writes to /tmp/logs/1899.txt. This is intentionally\n * lightweight and only logs pointer values and sizes to avoid any extra\n * reads of caller buffers or other objects that could cause additional\n * out-of-bounds accesses.\n */\nstatic void OS_GetResourceName_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Log function entry and arguments */\n    OS_GetResourceName_log(\"ENTER: OS_GetResourceName object_id=%d buffer=%p buffer_size=%zu\", (int)object_id, (void *)buffer, buffer_size);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /* Log after checks */\n    OS_GetResourceName_log(\"After checks: buffer=%p buffer_size=%zu\", (void *)buffer, buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    OS_GetResourceName_log(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        OS_GetResourceName_log(\"Record token resolved: record=%p\", (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            /* Log pointer to the name_entry and the buffer_size about to be used */\n            OS_GetResourceName_log(\"About to call OS_strnlen on name_entry=%p with maxlen=%zu\", (void *)record->name_entry, buffer_size);\n\n            /*\n             * NOTE: This call is the site identified in the violation scenario.\n             * It may read up to buffer_size bytes from record->name_entry. The\n             * logging above captures the pointer and the maxlen used so that\n             * a postmortem can determine if buffer_size exceeds the actual\n             * allocated size of the name_entry object.\n             */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            OS_GetResourceName_log(\"OS_strnlen returned name_len=%zu\", name_len);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                OS_GetResourceName_log(\"Name too long: adjusted name_len=%zu return_code=%d\", name_len, (int)return_code);\n            }\n\n            /* Log the intention to copy name_len bytes */\n            OS_GetResourceName_log(\"About to memcpy dst=%p src=%p len=%zu\", (void *)buffer, (void *)record->name_entry, name_len);\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            OS_GetResourceName_log(\"Copied name (len=%zu) into buffer=%p; buffer[%zu]=0 set\", name_len, (void *)buffer, name_len);\n        }\n        else\n        {\n            OS_GetResourceName_log(\"record->name_entry is NULL\");\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_GetResourceName_log(\"Token released for object_id=%d\", (int)object_id);\n    }\n    else\n    {\n        OS_GetResourceName_log(\"OS_ObjectIdGetById failed with return_code=%d\", (int)return_code);\n    }\n\n    OS_GetResourceName_log(\"EXIT: OS_GetResourceName return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}