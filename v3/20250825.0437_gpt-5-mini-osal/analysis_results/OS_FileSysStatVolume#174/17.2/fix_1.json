{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void write_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1746.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier ordering */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm *tm = localtime(&t);\n        if (tm != NULL)\n        {\n            fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", tm->tm_year + 1900,\n                    tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\nstatic void probe_token(const OS_object_token_t *token)\n{\n    write_probe_log(\"probe_token: token_ptr=%p\", (const void *)token);\n}\n\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Entry probe */\n    write_probe_log(\"ENTER: OS_FileSysStatVolume name=%p statbuf=%p\", (const void *)name,\n                    (const void *)statbuf);\n\n    if (name != NULL)\n    {\n        /* log a short, bounded copy of the pathname (avoid excessive output) */\n        char name_copy[128];\n        strncpy(name_copy, name, sizeof(name_copy) - 1);\n        name_copy[sizeof(name_copy) - 1] = '\\0';\n        write_probe_log(\"PARAM: name=\\\"%s\\\"\", name_copy);\n    }\n    else\n    {\n        write_probe_log(\"PARAM: name=NULL\");\n    }\n\n    /* Check parameters (preserve original behavior) */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    write_probe_log(\"After parameter checks\");\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    write_probe_log(\"OS_ObjectIdGetBySearch returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token presence/address but do not inspect internals */\n        probe_token(&token);\n\n        write_probe_log(\"Calling OS_FileSysStatVolume_Impl\");\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n        write_probe_log(\"OS_FileSysStatVolume_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n        write_probe_log(\"Token released\");\n    }\n    else\n    {\n        write_probe_log(\"Lookup failed, skipping Impl call\");\n    }\n\n    write_probe_log(\"EXIT: OS_FileSysStatVolume returning %d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c:1:\n/tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c: In function 'write_probe_log':\n/tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c:564:60: error: invalid use of undefined type 'struct tm'\n  564 |             fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", tm->tm_year + 1900,\n      |                                                            ^~\n/tmp/tmpvlwsdnhk/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c:565:23: error: invalid use of undefined type 'struct tm'\n  565 |                     tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                       ^~\n/tmp/tmpvlwsdnhk/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c:565:39: error: invalid use of undefined type 'struct tm'\n  565 |                     tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                       ^~\n/tmp/tmpvlwsdnhk/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c:565:52: error: invalid use of undefined type 'struct tm'\n  565 |                     tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                                    ^~\n/tmp/tmpvlwsdnhk/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c:565:65: error: invalid use of undefined type 'struct tm'\n  565 |                     tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                                                 ^~\n/tmp/tmpvlwsdnhk/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c:565:77: error: invalid use of undefined type 'struct tm'\n  565 |                     tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                                                             ^~\n/tmp/tmpvlwsdnhk/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpvlwsdnhk/src/src/os/shared/src/osapi-filesys.c:571:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  571 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/__/__/os/shared/src/osapi-filesys.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3663: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-filesys.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\nstatic void write_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1746.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier ordering */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm *tm = localtime(&t);\n        if (tm != NULL)\n        {\n            /* Use strftime so we don't access struct tm fields directly (avoids incomplete type issues) */\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm) > 0)\n            {\n                fprintf(f, \"%s \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Pass the va_list to vfprintf. Cast to the va_list type expected by the prototype to avoid\n     * mismatches in environments that provide alternate typedefs for va_list (the cast is a no-op\n     * at runtime but silences compile-time type mismatches). */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void probe_token(const OS_object_token_t *token)\n{\n    write_probe_log(\"probe_token: token_ptr=%p\", (const void *)token);\n}\n\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Entry probe */\n    write_probe_log(\"ENTER: OS_FileSysStatVolume name=%p statbuf=%p\", (const void *)name,\n                    (const void *)statbuf);\n\n    if (name != NULL)\n    {\n        /* log a short, bounded copy of the pathname (avoid excessive output) */\n        char name_copy[128];\n        strncpy(name_copy, name, sizeof(name_copy) - 1);\n        name_copy[sizeof(name_copy) - 1] = '\\0';\n        write_probe_log(\"PARAM: name=\\\"%s\\\"\", name_copy);\n    }\n    else\n    {\n        write_probe_log(\"PARAM: name=NULL\");\n    }\n\n    /* Check parameters (preserve original behavior) */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    write_probe_log(\"After parameter checks\");\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    write_probe_log(\"OS_ObjectIdGetBySearch returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token presence/address but do not inspect internals */\n        probe_token(&token);\n\n        write_probe_log(\"Calling OS_FileSysStatVolume_Impl\");\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n        write_probe_log(\"OS_FileSysStatVolume_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n        write_probe_log(\"Token released\");\n    }\n    else\n    {\n        write_probe_log(\"Lookup failed, skipping Impl call\");\n    }\n\n    write_probe_log(\"EXIT: OS_FileSysStatVolume returning %d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Two issues prevented compilation: the code accessed struct tm fields directly while in some test environments struct tm may be an incomplete type, and there was a potential va_list/type mismatch when calling vfprintf. Fixes made:\n\n- Added explicit includes (<stdio.h>, <stdarg.h>, <time.h>, <string.h>) so the needed types and functions are declared.\n- Replaced direct accesses to tm->tm_year, tm->tm_mon, etc., with strftime into a buffer and fprintf of that string. This avoids referencing struct tm fields directly and compiles even when struct tm is not fully defined in the translation unit.\n- Added an explicit cast (va_list)ap when calling vfprintf to avoid compile-time mismatches between different va_list typedefs in environments that provide alternate typedefs (this is a harmless cast at runtime and preserves original behavior).\n\nAll original logic and logging behavior of OS_FileSysStatVolume is preserved."
}