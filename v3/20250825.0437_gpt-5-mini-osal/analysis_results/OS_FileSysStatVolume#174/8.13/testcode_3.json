{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts 'name' (const char *) to (void *): (void *)name. This discards the const qualifier when passing the pointer to OS_ObjectIdGetBySearch (which takes void *arg) even though the match function treats it as const. Casting away const in this way violates MISRA C 2023 Rule 8.13. The correct fix is to change the API to take a const void *arg (and related function types) or avoid removing the const qualifier.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume:\n```c\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger for OS_FileSysStatVolume. Appends human-readable logs to /tmp/logs/1743.txt. */\nstatic void OS_FileSysStatVolume_log(const char *stage, const char *name, int32 return_code, const void *token_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/1743.txt\", \"a\");\n    if (f != NULL)\n    {\n        if (name != NULL)\n        {\n            /* Print the stage, the name string, its address, the return code and token address */\n            fprintf(f, \"%s: name=\\\"%s\\\" name_addr=%p return_code=%d token_addr=%p\\n\",\n                    stage, name, (const void *)name, (int)return_code, token_addr);\n        }\n        else\n        {\n            fprintf(f, \"%s: name=(NULL) name_addr=%p return_code=%d token_addr=%p\\n\",\n                    stage, (const void *)name, (int)return_code, token_addr);\n        }\n        fclose(f);\n    }\n}\n\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    /* Log state after parameter checks */\n    OS_FileSysStatVolume_log(\"entry_after_checks\", name, 0, NULL);\n\n    /*\n     * NOTE: The original code casts away the const qualifier here. That cast is the\n     * subject of the reported violation (casting (const char *) to (void *)).\n     * We keep the original call to preserve behavior but log the event and addresses\n     * so other agents can reproduce and observe the scenario.\n     */\n    OS_FileSysStatVolume_log(\"before_search_cast\", name, 0, NULL);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    /* Log after the search call, including the returned code and the token address when appropriate */\n    OS_FileSysStatVolume_log(\"after_search\", name, return_code, (return_code == OS_SUCCESS) ? (const void *)&token : NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_FileSysStatVolume_log(\"before_impl\", name, return_code, &token);\n\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_FileSysStatVolume_log(\"after_impl\", name, return_code, &token);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_FileSysStatVolume_log(\"after_release\", name, return_code, &token);\n    }\n\n    OS_FileSysStatVolume_log(\"exit\", name, return_code, (return_code == OS_SUCCESS) ? (const void *)&token : NULL);\n\n    return return_code;\n}\n"
}