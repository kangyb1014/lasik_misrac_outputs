{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a fixed-size local buffer (local_path) to OS_TranslatePath without providing its size. If OS_TranslatePath internally uses string.h functions that do not check bounds (e.g. strcpy, strcat, memcpy/memmove with an incorrect length), a long input path can cause writes beyond local_path (>= OS_MAX_LOCAL_PATH_LEN) and thus violate MISRA C 2023 Rule 21.17. For example, if OS_TranslatePath uses strcpy(local_path, path) and path length >= OS_MAX_LOCAL_PATH_LEN, this will overflow the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_OpenCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1619.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_OpenCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <ctype.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1619.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1619.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log entry and parameters (do not dereference `path`) */\n    probe_log(\"ENTER OS_OpenCreate: filedes=%p path=%p flags=%ld access_mode=%ld local_path_size=%zu\",\n              (const void *)filedes,\n              (const void *)path,\n              (long)flags,\n              (long)access_mode,\n              sizeof(local_path));\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        probe_log(\"OS_OpenCreate: invalid access_mode=%ld -> returning OS_ERROR\", (long)access_mode);\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    probe_log(\"OS_OpenCreate: calling OS_TranslatePath(path=%p, local_path=%p)\", (const void *)path, (void *)local_path);\n    return_code = OS_TranslatePath(path, (char *)local_path);\n    probe_log(\"OS_OpenCreate: OS_TranslatePath returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Dump a bounded view of local_path buffer to help detect overflows; read only within bounds. */\n        probe_log(\"OS_OpenCreate: local_path content (up to %zu bytes):\", sizeof(local_path));\n\n        /* Print a short ASCII preview limited to the buffer size to avoid overruns. */\n        {\n            /* Print as a string with maximum width to avoid relying on null-termination. */\n            FILE *fp = fopen(\"/tmp/logs/1619.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"local_path[0..%zu]=\\\"%.*s\\\"\\n\", sizeof(local_path), (int)sizeof(local_path), local_path);\n                fclose(fp);\n            }\n        }\n\n        /* Provide a hex dump of the first N bytes within the allocated buffer to show exact bytes. */\n        {\n            const size_t hex_len = (sizeof(local_path) < 32U) ? sizeof(local_path) : 32U;\n            for (size_t i = 0; i < hex_len; ++i)\n            {\n                unsigned char c = (unsigned char)local_path[i];\n                probe_log(\"local_path[%02zu] = 0x%02x (%c)\", i, (unsigned)c, isprint(c) ? c : '.');\n            }\n        }\n\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        probe_log(\"OS_OpenCreate: OS_ObjectIdAllocateNew returned %ld token=%p\", (long)return_code, (void *)&token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            probe_log(\"OS_OpenCreate: calling OS_FileOpen_Impl(token=%p, local_path=%p, flags=%ld, access_mode=%ld)\",\n                      (void *)&token, (void *)local_path, (long)flags, (long)access_mode);\n\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n            probe_log(\"OS_OpenCreate: OS_FileOpen_Impl returned %ld\", (long)return_code);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n            probe_log(\"OS_OpenCreate: OS_ObjectIdFinalizeNew returned %ld filedes=%ld\", (long)return_code, (long)*filedes);\n        }\n    }\n    else\n    {\n        probe_log(\"OS_OpenCreate: OS_TranslatePath failed with %ld\", (long)return_code);\n    }\n\n    probe_log(\"EXIT OS_OpenCreate: returning %ld filedes=%ld\", (long)return_code, (long)*filedes);\n\n    return return_code;\n}\n"
}