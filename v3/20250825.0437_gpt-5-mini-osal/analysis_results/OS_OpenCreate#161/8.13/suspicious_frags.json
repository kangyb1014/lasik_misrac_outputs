{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_OpenCreate:\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);",
    "return_code = OS_TranslatePath(path, (char *)local_path);",
    "stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);",
    "return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);",
    "OS_OBJECT_INIT(token, stream, stream_name, path);",
    "return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);"
  ],
  "explanation": "Items not listed above were examined and are not considered suspicious under MISRA C:2023 Rule 8.13 (pointer should point to a const-qualified type whenever possible) for the following reasons:\n\n- The function parameter declaration \"const char *path\" is already const-qualified and thus compliant.\n- The output parameter \"osal_id_t *filedes\" is an output/in-out parameter (it is initialized and later set by this function via the pointer) so it must be non-const; therefore it is not a candidate for const-qualification.\n- The local buffer declaration \"char local_path[OS_MAX_LOCAL_PATH_LEN];\" is a mutable array used to receive translated data; it must be non-const and so is not suspicious.\n- The local token variable \"OS_object_token_t token;\" is passed by address to routines that allocate/fill it; since it is intended to be modified, it should not be const.\n- The pointer variable declaration \"OS_stream_internal_record_t *stream;\" itself is not suspicious by declaration because the code initializes and modifies the referenced record (so const would be inappropriate).\n- Simple scalar variables (return_code, flags, access_mode) are not pointer types and thus not relevant to Rule 8.13.\n\nThe fragments included in the suspicious list above are the places where pointers or pointer-to-object usage may be inconsistent with const-correctness (casts that remove const, passing const data to macros/functions that may expect non-const, or calls where APIs might better accept const-qualified pointer parameters). Those lines should be inspected along with the prototypes/macros they invoke to determine whether const qualification can be applied safely."
}