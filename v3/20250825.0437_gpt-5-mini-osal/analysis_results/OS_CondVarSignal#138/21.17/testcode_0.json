{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset(token, 0, sizeof(*token)) can write through an invalid pointer because there is no check that 'token' is non-NULL. If OS_ObjectIdTransactionInit is ever invoked with token == NULL (for example, a buggy caller or malformed API usage calling OS_ObjectIdTransactionInit(NULL)), the memset will dereference a NULL pointer and access beyond the bounds of the referenced object \u2014 violating Rule 21.17. Note: when called from OS_ObjectIdGetById with &token (a local variable) this particular call-site is safe, but the implementation itself allows a violating scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarSignal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1389.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarSignal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarSignal:\n```c\nint32 OS_CondVarSignal(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarSignal_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarSignal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probing/logging helpers for reproducing potential Rule 21.17 scenarios.\n * Logs are appended to /tmp/logs/1389.txt so that external agents can\n * gather the control flow and state information.\n *\n * These functions are intentionally conservative: they do not dereference\n * opaque token pointers and they avoid introducing side-effects.\n */\n\nstatic void os_1389_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1389.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log file cannot be opened, do not change program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\n/* Generic probe to record token-related state without dereferencing the token.\n * \"stage\" describes the point in the control flow, \"var_id\" is the id\n * passed into OS_CondVarSignal, \"token\" is the pointer value (may be NULL),\n * and \"rc\" is the most-recent return code observed.\n */\nstatic void OS_Probe_LogTokenState(const char *stage, osal_id_t var_id, const OS_object_token_t *token, int32 rc)\n{\n    /* Log: stage, var_id, return code, token pointer value. Avoid deref of token. */\n    os_1389_log(\"Stage=%s; var_id=%ld; return_code=%ld; token_ptr=%p\", stage, (long)var_id, (long)rc, (const void *)token);\n}\n\n/* Modified OS_CondVarSignal with probes inserted. Original logic preserved. */\nint32 OS_CondVarSignal(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and input parameter */\n    OS_Probe_LogTokenState(\"OS_CondVarSignal:entry\", var_id, NULL, -999);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of lookup and the token pointer (address of local token passed) */\n    OS_Probe_LogTokenState(\"OS_CondVarSignal:after_GetById\", var_id, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Record the imminent call into the implementation with the token */\n        OS_Probe_LogTokenState(\"OS_CondVarSignal:before_Impl\", var_id, &token, return_code);\n\n        return_code = OS_CondVarSignal_Impl(&token);\n\n        /* Log the result from the implementation */\n        OS_Probe_LogTokenState(\"OS_CondVarSignal:after_Impl\", var_id, &token, return_code);\n    }\n    else\n    {\n        os_1389_log(\"OS_CondVarSignal: parameter check failed for var_id=%ld; return_code=%ld\", (long)var_id, (long)return_code);\n    }\n\n    return return_code;\n}\n"
}