{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the void *arg passed into OS_Timer_NoArgCallback contains (or points to data that was originally) a function pointer to OS_Timer_NoArgCallback itself, then Conv.timer_callback_func will be OS_Timer_NoArgCallback and the statement (*Conv.timer_callback_func)(objid) will invoke OS_Timer_NoArgCallback recursively (indirect recursion). This is an indirect self-call and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Timer_NoArgCallback code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2776.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Timer_NoArgCallback as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Timer_NoArgCallback:\n```c\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n    (*Conv.timer_callback_func)(objid);\n}\n```\n</target_code>\nPlease provide the modified OS_Timer_NoArgCallback code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n    FILE *log = fopen(\"/tmp/logs/2776.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"================ OS_Timer_NoArgCallback ENTRY =================\\n\");\n        fprintf(log, \"objid (numeric) = %llu\\n\", (unsigned long long)objid);\n        fprintf(log, \"arg (void *)     = %p\\n\", arg);\n    }\n\n    /*\n     * Preserve original logic: copy opaque arg into union/struct field so that\n     * Conv.timer_callback_func will hold the bitwise representation of arg.\n     */\n    Conv.opaque_arg = arg;\n\n    if (log != NULL)\n    {\n        /*\n         * Probe: attempt to capture the bitwise value of the function pointer\n         * that will be invoked. We perform a memcpy of the function pointer\n         * into an integer-sized variable so we can print its raw value in hex.\n         * This provides evidence for the scenario where the callback value\n         * equals the address of OS_Timer_NoArgCallback itself.\n         */\n        /* Local copy of the function pointer held in the wrapper */\n        void (*fp)(osal_id_t) = Conv.timer_callback_func;\n\n        /* Copy raw bytes of the function pointer into an integer for printing */\n        uintptr_t fp_bits = 0u;\n        (void)memcpy(&fp_bits, &fp, (sizeof(fp_bits) < sizeof(fp) ? sizeof(fp_bits) : sizeof(fp)));\n\n        fprintf(log, \"Conv.opaque_arg   = %p\\n\", Conv.opaque_arg);\n        fprintf(log, \"Conv.timer_cb ptr = 0x%\" PRIxPTR \"\\n\", (uintptr_t)fp_bits);\n\n        /* Compare the function pointer value to this function's address. */\n        if (fp == (void (*)(osal_id_t))OS_Timer_NoArgCallback)\n        {\n            fprintf(log, \"WARNING: Conv.timer_callback_func compares equal to OS_Timer_NoArgCallback -> potential indirect recursion detected\\n\");\n        }\n        else\n        {\n            fprintf(log, \"Info: Conv.timer_callback_func does NOT compare equal to OS_Timer_NoArgCallback\\n\");\n        }\n\n        fprintf(log, \"About to invoke Conv.timer_callback_func(objid=%llu)\\n\", (unsigned long long)objid);\n        fflush(log);\n    }\n\n    /* Original call - preserve semantics */\n    (*Conv.timer_callback_func)(objid);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Returned from Conv.timer_callback_func\\n\");\n        fprintf(log, \"================ OS_Timer_NoArgCallback EXIT ==================\\n\\n\");\n        fclose(log);\n    }\n}\n"
}