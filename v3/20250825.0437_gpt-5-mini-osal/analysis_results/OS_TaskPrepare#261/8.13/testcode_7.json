{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is declared as a non-const pointer (OS_task_internal_record_t *task) but in OS_TaskPrepare it is only used for read-only access (e.g. reading task->entry_function_pointer) and is not used to modify the pointed object. Therefore it could and should be declared as a pointer to const (const OS_task_internal_record_t *task) to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskPrepare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper used only to collect evidence for the violation scenario. */\nstatic void OS_TaskPrepare_Logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2613.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory and reopen. Ignore errors if creation fails. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/2613.txt\", \"a\");\n    }\n\n    if (f != NULL)\n    {\n        char buf[512];\n        va_list ap;\n        va_start(ap, fmt);\n        (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n        va_end(ap);\n        (void)fprintf(f, \"%s\\n\", buf);\n        (void)fclose(f);\n    }\n    else\n    {\n        /* If logging fails, don't affect program flow. */\n    }\n}\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    OS_TaskPrepare_Logf(\"OS_TaskPrepare ENTRY: task_id=%lu\", (unsigned long)task_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    OS_TaskPrepare_Logf(\"OS_ObjectIdGetById -> return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        OS_TaskPrepare_Logf(\"OS_OBJECT_TABLE_GET -> task_ptr=%p\", (void *)task);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        OS_TaskPrepare_Logf(\"OS_TaskMatch_Impl -> return_code=%ld\", (long)return_code);\n\n        /* Log the entry point read from the task record (evidence: only read access) */\n        OS_TaskPrepare_Logf(\"Read task->entry_function_pointer=%p (task_ptr=%p)\", (void *)(task->entry_function_pointer), (void *)task);\n\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n        OS_TaskPrepare_Logf(\"OS_ObjectIdRelease called for token_addr=%p\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_TaskPrepare_Logf(\"About to call OS_TaskRegister_Impl for task_id=%lu\", (unsigned long)task_id);\n        return_code = OS_TaskRegister_Impl(task_id);\n        OS_TaskPrepare_Logf(\"OS_TaskRegister_Impl -> return_code=%ld\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        OS_TaskPrepare_Logf(\"About to call OS_NotifyEvent for TASK_STARTUP task_id=%lu\", (unsigned long)task_id);\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        OS_TaskPrepare_Logf(\"OS_NotifyEvent -> return_code=%ld\", (long)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TaskPrepare_Logf(\"Failure path: return_code=%ld -> setting *entrypt = NULL\", (long)return_code);\n        *entrypt = NULL;\n    }\n\n    OS_TaskPrepare_Logf(\"OS_TaskPrepare EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}