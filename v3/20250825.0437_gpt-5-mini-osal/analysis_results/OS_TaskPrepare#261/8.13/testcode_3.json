{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is declared as OS_task_internal_record_t *task and is assigned from OS_OBJECT_TABLE_GET(OS_task_table, token) (&OS_task_table[index]). In OS_TaskPrepare the code only reads from the pointed record (e.g. task->entry_function_pointer) and does not modify the table entry. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Therefore 'task' should be declared const OS_task_internal_record_t *task (or the macro adjusted to yield a pointer-to-const) to show that the object is not modified. This is a violation of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskPrepare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append a log line with contextual information for OS_TaskPrepare. */\nstatic void OS_TaskPrepare_Log(const char *stage,\n                               unsigned long task_id_val,\n                               const void *token_ptr,\n                               const void *task_ptr,\n                               int32_t return_code_val,\n                               int entry_function_present,\n                               const void *entrypt_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2613.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_TaskPrepare: stage=%s task_id=%lu return_code=%ld token=%p task=%p entry_function_present=%d entrypt=%p\\n\",\n                stage,\n                task_id_val,\n                (long)return_code_val,\n                token_ptr,\n                task_ptr,\n                entry_function_present,\n                entrypt_ptr);\n        fclose(f);\n    }\n}\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log start state */\n    OS_TaskPrepare_Log(\"start\", (unsigned long)task_id, (const void *)&token, NULL, 0, 0, (const void *)entrypt);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TaskPrepare_Log(\"after_ObjectIdGetById\", (unsigned long)task_id, (const void *)&token, NULL, (int32_t)return_code, 0, (const void *)entrypt);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the task pointer and whether the entry function pointer is present (non-NULL). Do not attempt to print the function pointer value. */\n        OS_TaskPrepare_Log(\"got_task_record\", (unsigned long)task_id, (const void *)&token, (const void *)task, (int32_t)return_code,\n                           (task != NULL && task->entry_function_pointer != NULL) ? 1 : 0,\n                           (const void *)entrypt);\n\n        return_code = OS_TaskMatch_Impl(&token);\n\n        /* Log after TaskMatch_Impl and before reading the entry function */\n        OS_TaskPrepare_Log(\"after_TaskMatch_Impl\", (unsigned long)task_id, (const void *)&token, (const void *)task, (int32_t)return_code,\n                           (task != NULL && task->entry_function_pointer != NULL) ? 1 : 0,\n                           (const void *)entrypt);\n\n        *entrypt    = task->entry_function_pointer;\n\n        /* Log that we performed the read of entrypt from the task record */\n        OS_TaskPrepare_Log(\"assigned_entrypt\", (unsigned long)task_id, (const void *)&token, (const void *)task, (int32_t)return_code,\n                           (task != NULL && task->entry_function_pointer != NULL) ? 1 : 0,\n                           (const void *)entrypt);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the object id */\n        OS_TaskPrepare_Log(\"after_ObjectIdRelease\", (unsigned long)task_id, (const void *)&token, (const void *)task, (int32_t)return_code,\n                           (task != NULL && task->entry_function_pointer != NULL) ? 1 : 0,\n                           (const void *)entrypt);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n\n        /* Log after TaskRegister_Impl */\n        OS_TaskPrepare_Log(\"after_TaskRegister_Impl\", (unsigned long)task_id, (const void *)&token, (const void *)task, (int32_t)return_code,\n                           (task != NULL && task->entry_function_pointer != NULL) ? 1 : 0,\n                           (const void *)entrypt);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n\n        /* Log after NotifyEvent */\n        OS_TaskPrepare_Log(\"after_NotifyEvent\", (unsigned long)task_id, (const void *)&token, (const void *)task, (int32_t)return_code,\n                           (task != NULL && task->entry_function_pointer != NULL) ? 1 : 0,\n                           (const void *)entrypt);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n\n        /* Log failure branch and the fact we cleared entrypt */\n        OS_TaskPrepare_Log(\"failure_cleared_entrypt\", (unsigned long)task_id, (const void *)&token, (const void *)task, (int32_t)return_code, 0, (const void *)entrypt);\n    }\n\n    /* Log final return */\n    OS_TaskPrepare_Log(\"return\", (unsigned long)task_id, (const void *)&token, (const void *)task, (int32_t)return_code,\n                       (task != NULL && task->entry_function_pointer != NULL) ? 1 : 0,\n                       (const void *)entrypt);\n\n    return return_code;\n}\n"
}