{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf File is non-NULL but does not point to a NUL-terminated character array (for example a pointer into a buffer that was filled with data via memcpy without a terminating '\\0', or an invalid/non-string pointer passed by a caller), then strrchr(File, '/') will read bytes past the object's bounds searching for the terminator. The code only checks File != NULL and does not guarantee the referred object is NUL-terminated, so this use of strrchr can access beyond the bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3009.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\nPlease provide the modified UT_DefaultStubImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Minimal local type definitions to allow this translation unit to compile.\n   These should match the real project definitions. */\ntypedef int32_t int32;\ntypedef uint32_t UT_EntryKey_t;\n\n/* Prototype of the existing helper (implemented elsewhere). */\nextern int32 UT_DefaultStubImplWithArgs(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, va_list va);\n\n/* Internal helper: append a log entry describing the call and its state.\n   The helper intentionally does not dereference FunctionName to avoid\n   reading potentially invalid memory (which could create new violations).\n   It records the pointer value, the provided keys/rc, and the return code. */\nstatic void UT_Probe_LogEntry(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc)\n{\n    FILE *fp = fopen(\"/tmp/logs/3009.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging cannot be performed, fail silently to preserve behavior. */\n        return;\n    }\n\n    /* Log the control flow entry and key state. Do not dereference FunctionName. */\n    (void)fprintf(fp, \"UT_DefaultStubImpl ENTRY: FunctionName_ptr=0x%016\" PRIxPTR \", FuncKey=%u, DefaultRc=%d\\n\",\n                  (uintptr_t)FunctionName, (unsigned)FuncKey, (int)DefaultRc);\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\nstatic void UT_Probe_LogResult(int32 Retcode)\n{\n    FILE *fp = fopen(\"/tmp/logs/3009.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    (void)fprintf(fp, \"UT_DefaultStubImpl EXIT: Retcode=%d\\n\", (int)Retcode);\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n\n    /* Probe: record entry state before delegating to the varargs implementation. */\n    UT_Probe_LogEntry(FunctionName, FuncKey, DefaultRc);\n\n    /* Preserve original behavior: forward the va_list to the real implementation. */\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n\n    /* Probe: record return value so callers can correlate inputs to outputs. */\n    UT_Probe_LogResult(Retcode);\n\n    va_end(va);\n\n    return Retcode;\n}\n"
}