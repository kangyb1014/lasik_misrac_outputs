{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization at declaration of StubPtr (\"UT_StubTableEntry_t *StubPtr = NULL;\") is dead code. In every control path of the function StubPtr is assigned before it is read: the while loop either sets StubPtr = NULL when SearchLen >= SearchLimit or sets StubPtr = &UT_StubTable[Idx] on each iteration. Thus the initial assignment to NULL at declaration is executed but could be removed without changing program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3002.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\nPlease provide the modified UT_DefaultStubImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable trace lines to /tmp/logs/3002.txt */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3002.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    /* Log entry and parameter state. The cast via uintptr_t makes it\n       possible to represent pointers or integer keys in a numeric form. */\n    UT_ProbeLog(\"ENTER: UT_DefaultStubImpl(FunctionName=%s, FuncKey=%llu, DefaultRc=%d)\",\n                (FunctionName != NULL) ? FunctionName : \"(null)\",\n                (unsigned long long)(uintptr_t)FuncKey,\n                DefaultRc);\n\n    va_start(va, DefaultRc);\n    UT_ProbeLog(\"CALL: UT_DefaultStubImplWithArgs about to be invoked\");\n\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n\n    /* Capture the return value and exit. This provides evidence for the control flow\n       taken by callers of UT_DefaultStubImpl and can be correlated with logs\n       emitted by the implementation (e.g. UT_DefaultStubImplWithArgs) to show\n       whether initializations like \"= NULL\" were ever relied upon. */\n    UT_ProbeLog(\"RETURNED: UT_DefaultStubImplWithArgs -> Retcode=%d\", Retcode);\n\n    va_end(va);\n\n    UT_ProbeLog(\"EXIT: UT_DefaultStubImpl -> Retcode=%d\", Retcode);\n\n    return Retcode;\n}\n"
}