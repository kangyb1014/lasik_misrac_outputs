{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code invokes a function pointer (VaHook) from UT_DefaultStubImplWithArgs. If a hook callback calls the default implementation (e.g. uses the UT_DEFAULT_IMPL macro, which calls UT_DefaultStubImpl/UT_DefaultStubImplWithArgs), an indirect recursion occurs: UT_DefaultStubImpl -> UT_DefaultStubImplWithArgs -> VaHook callback -> UT_DefaultStubImpl (or WithArgs) -> ... leading to indirect self-call. For example, a hook installed for a stub that itself invokes UT_DEFAULT_IMPL(same_or_other_stub) will create the call cycle and thus violate Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3006.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\nPlease provide the modified UT_DefaultStubImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <errno.h>\n\n/* Forward declaration of the WithArgs implementation that exists elsewhere. */\nint32 UT_DefaultStubImplWithArgs(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, va_list va);\n\n/*\n * Simple logging probes that append control-flow and state information to\n * /tmp/logs/3006.txt. The probes are non-intrusive and try to preserve the\n * original behavior of UT_DefaultStubImpl.\n */\nstatic void ut_ensure_log_dir(void)\n{\n    /* Try to create the directory; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void ut_append_log(const char *buf)\n{\n    ut_ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/3006.txt\", \"a\");\n    if (f != NULL)\n    {\n        fputs(buf, f);\n        fputc('\\n', f);\n        fclose(f);\n    }\n}\n\nstatic int ut_probe_depth = 0;\n\nstatic void ut_log_state(const char *stage, const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, int32 Retcode, const void *va_addr)\n{\n    char buf[512];\n    pid_t pid = getpid();\n\n    /* Print FuncKey as an integer-sized pointer value so the log is robust to\n       whether UT_EntryKey_t is an integer or a pointer typedef in the build. */\n    uintptr_t keyval = (uintptr_t)FuncKey;\n\n    /* Compose a compact, single-line record describing the current probe\n       point, including a depth counter to make recursion/indirect-call cycles\n       visible. */\n    int n = snprintf(buf, sizeof(buf),\n                     \"PID=%d DEPTH=%d STAGE=%s FUNC=\\\"%s\\\" FUNCKEY=0x%\" PRIxPTR \" DEFAULT_RC=%d RET=%d VA_ADDR=%p errno=%d\",\n                     (int)pid,\n                     ut_probe_depth,\n                     stage,\n                     (FunctionName != NULL) ? FunctionName : \"(null)\",\n                     keyval,\n                     DefaultRc,\n                     Retcode,\n                     va_addr,\n                     errno);\n\n    if (n > 0)\n    {\n        ut_append_log(buf);\n    }\n}\n\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    /* Mark entry to help detect indirect recursion cycles. */\n    ut_probe_depth++;\n    ut_log_state(\"ENTER\", FunctionName, FuncKey, DefaultRc, 0, NULL);\n\n    va_start(va, DefaultRc);\n\n    /* Log the address of the va_list after it has been started; this may help\n       correlate stack/va_list usage when a hook calls the default\n       implementation recursively. */\n    ut_log_state(\"BEFORE_WITHARGS_CALL\", FunctionName, FuncKey, DefaultRc, 0, (const void *)&va);\n\n    /* Original behavior retained: forward to WithArgs implementation. */\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n\n    /* Log return from the WithArgs call. This is the crucial point where an\n       installed hook may have invoked the default implementation again,\n       creating an indirect recursion; the sequence of ENTER/BEFORE/AFTER/EXIT\n       records will expose such cycles. */\n    ut_log_state(\"AFTER_WITHARGS_CALL\", FunctionName, FuncKey, DefaultRc, Retcode, (const void *)&va);\n\n    va_end(va);\n\n    ut_log_state(\"EXIT\", FunctionName, FuncKey, DefaultRc, Retcode, NULL);\n    ut_probe_depth--;\n\n    return Retcode;\n}\n"
}