{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextFree, when max_id == 0 the code sets 'serial = 0;'. In that case the subsequent for-loop (for (i=0; i<max_id; ++i)) is not entered and the function never takes the success path that uses 'serial' (OS_ObjectIdCompose_Impl is only called on success). Thus the assignment is executed but its value is never read \u2014 removing it would not change program behavior. This is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetMaxForObjectType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1882.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetMaxForObjectType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetMaxForObjectType:\n```c\nuint32 OS_GetMaxForObjectType(osal_objtype_t idtype)\n{\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return OS_MAX_TASKS;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return OS_MAX_QUEUES;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return OS_MAX_BIN_SEMAPHORES;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return OS_MAX_COUNT_SEMAPHORES;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return OS_MAX_MUTEXES;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return OS_MAX_NUM_OPEN_FILES;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return OS_MAX_NUM_OPEN_DIRS;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return OS_MAX_TIMEBASES;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            return OS_MAX_TIMERS;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return OS_MAX_MODULES;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return OS_MAX_FILE_SYSTEMS;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            return OS_MAX_CONSOLES;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return OS_MAX_CONDVARS;\n        default:\n            return 0;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_GetMaxForObjectType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probe function: append a log entry with the idtype and the resulting maximum\n * returned by OS_GetMaxForObjectType. The log is appended to /tmp/logs/1882.txt\n * so that other agents can reproduce and inspect the control flow/state.\n */\nstatic void OS_LogGetMax(void *idtype_ptr, uint32_t result)\n{\n    /* idtype is passed as a void* to avoid depending on the exact enum type here */\n    unsigned int idtype = (unsigned int)(uintptr_t)idtype_ptr;\n    FILE *f = fopen(\"/tmp/logs/1882.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Timestamp can help ordering, but keep it simple to avoid extra includes */\n        fprintf(f, \"OS_GetMaxForObjectType called: idtype=%u, result=%u\\n\", idtype, (unsigned int)result);\n        fclose(f);\n    }\n}\n\n/* Preserve the original function signature and behaviour. The implementation\n * captures the computed return value in a local variable so we can log it\n * immediately before returning, without changing original return values.\n */\nuint32 OS_GetMaxForObjectType(osal_objtype_t idtype)\n{\n    uint32 result;\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            result = OS_MAX_TASKS;\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            result = OS_MAX_QUEUES;\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            result = OS_MAX_BIN_SEMAPHORES;\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            result = OS_MAX_COUNT_SEMAPHORES;\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            result = OS_MAX_MUTEXES;\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            result = OS_MAX_NUM_OPEN_FILES;\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            result = OS_MAX_NUM_OPEN_DIRS;\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            result = OS_MAX_TIMEBASES;\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            result = OS_MAX_TIMERS;\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            result = OS_MAX_MODULES;\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            result = OS_MAX_FILE_SYSTEMS;\n            break;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            result = OS_MAX_CONSOLES;\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            result = OS_MAX_CONDVARS;\n            break;\n        default:\n            result = 0U;\n            break;\n    }\n\n    /* Log the control path and computed result. Pass idtype as a pointer-sized\n     * integer to avoid depending on the exact enum/integer type here. */\n    OS_LogGetMax((void *)(uintptr_t)idtype, (uint32_t)result);\n\n    return result;\n}\n"
}