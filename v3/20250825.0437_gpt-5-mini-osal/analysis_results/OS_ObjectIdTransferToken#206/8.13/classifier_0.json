{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdTransferToken:\n```c\nvoid OS_ObjectIdTransferToken(OS_object_token_t *token_from, OS_object_token_t *token_to)\n{\n    /* start with a simple copy */\n    *token_to = *token_from;\n\n    /*\n     * nullify the old token, such that if release/cancel\n     * is invoked it will have no effect (the real lock is\n     * now on token_to).\n     */\n    token_from->lock_mode = OS_LOCK_MODE_NONE;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ObjectIdTransferToken:\ntypedef struct OS_object_token OS_object_token_t\n...\nOS_lock_mode_t lock_mode\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntoken_from->lock_mode = OS_LOCK_MODE_NONE;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The function assigns to token_from->lock_mode after copying, so the callee intentionally modifies the object pointed to by token_from. Because token_from is modified, it cannot be declared as a pointer to const; therefore Rule 8.13 is not violated in this code fragment."
}