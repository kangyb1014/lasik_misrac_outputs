{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as a plain OS_common_record_t * but is only used for read-only access to the object table (e.g. strncpy(timebase_prop->name, record->name_entry, ...) and timebase_prop->creator = record->creator). According to the surrounding definitions, OS_OBJECT_TABLE_GET returns a pointer into the global object table, and this function does not modify the referenced record. Therefore the pointer should be to a const-qualified type (const OS_common_record_t *record) so the pointee cannot be modified through this pointer. The current declaration omits the const qualifier and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <errno.h>\n\n/* Probe helpers for OS_TimeBaseGetInfo logging. These preserve the original\n * function logic and only add observational logging to /tmp/logs/2683.txt.\n */\nstatic void OS_TimeBaseGetInfo_ensure_log_dir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors if it\n     * already exists. This is best-effort so logging will not prevent normal\n     * operation.\n     */\n    if (access(\"/tmp/logs\", F_OK) != 0)\n    {\n        (void)mkdir(\"/tmp/logs\", 0777);\n    }\n}\n\nstatic void OS_TimeBaseGetInfo_log(const char *fmt, ...)\n{\n    FILE *fp = NULL;\n    va_list ap;\n    char buf[512];\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    OS_TimeBaseGetInfo_ensure_log_dir();\n\n    fp = fopen(\"/tmp/logs/2683.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging cannot be opened, silently continue to avoid changing\n         * original behavior. Do not return as this is only diagnostic.\n         */\n        return;\n    }\n\n    (void)localtime_r(&t, &tm_buf);\n    (void)strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n    fprintf(fp, \"%s - \", buf);\n\n    va_start(ap, fmt);\n    (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"%s\\n\", buf);\n    (void)fclose(fp);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    OS_TimeBaseGetInfo_log(\"ENTRY: timebase_id=%u, timebase_prop=%p\", (unsigned)timebase_id, (void *)timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimeBaseGetInfo_log(\"Object type of caller = %d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBaseGetInfo_log(\"Early return: caller is a timebase (incorrect obj state)\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    OS_TimeBaseGetInfo_log(\"Cleared output structure at %p (size=%zu)\", (void *)timebase_prop, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    OS_TimeBaseGetInfo_log(\"OS_ObjectIdGetById returned %d, token at %p\", (int)return_code, (void *)&token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log addresses and some contents. Use safe copy for strings. */\n        if (record != NULL)\n        {\n            char namebuf[sizeof(timebase_prop->name)];\n            (void)strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n            namebuf[sizeof(namebuf) - 1] = '\\0';\n            OS_TimeBaseGetInfo_log(\"record=%p, record->name_entry=\\\"%s\\\", record->creator=%u\",\n                                   (void *)record, namebuf, (unsigned)record->creator);\n        }\n        else\n        {\n            OS_TimeBaseGetInfo_log(\"record is NULL\");\n        }\n\n        if (timebase != NULL)\n        {\n            OS_TimeBaseGetInfo_log(\"timebase=%p, nominal_interval_time=%llu, freerun_time=%llu, accuracy_usec=%u\",\n                                   (void *)timebase,\n                                   (unsigned long long)timebase->nominal_interval_time,\n                                   (unsigned long long)timebase->freerun_time,\n                                   (unsigned)timebase->accuracy_usec);\n        }\n        else\n        {\n            OS_TimeBaseGetInfo_log(\"timebase is NULL\");\n        }\n\n        /* Preserve original behavior: copy values into output structure. */\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        OS_TimeBaseGetInfo_log(\"Copied to timebase_prop: name=\\\"%s\\\", creator=%u, nominal_interval_time=%llu, freerun_time=%llu, accuracy=%u\",\n                               timebase_prop->name,\n                               (unsigned)timebase_prop->creator,\n                               (unsigned long long)timebase_prop->nominal_interval_time,\n                               (unsigned long long)timebase_prop->freerun_time,\n                               (unsigned)timebase_prop->accuracy);\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n        OS_TimeBaseGetInfo_log(\"OS_TimeBaseGetInfo_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_TimeBaseGetInfo_log(\"Released token at %p\", (void *)&token);\n    }\n\n    OS_TimeBaseGetInfo_log(\"EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}