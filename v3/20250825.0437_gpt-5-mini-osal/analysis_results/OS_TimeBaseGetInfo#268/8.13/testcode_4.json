{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration declares a const pointer to a mutable OS_common_record_t: 'extern OS_common_record_t *const OS_global_timebase_table'. MISRA R8.13 requires pointers to point to const-qualified types whenever possible. In OS_TimeBaseGetInfo the table is only read (record->name_entry, record->creator, etc.), so the pointee could be const. The declaration should be 'extern const OS_common_record_t *const OS_global_timebase_table' (or at least 'const OS_common_record_t *') if the table contents are not modified elsewhere. As written the pointer does not point to a const-qualified type, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logging helper - appends human readable logs to /tmp/logs/2683.txt */\nstatic void log_probe_2683(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2683.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    log_probe_2683(\"ENTER: OS_TimeBaseGetInfo id=%lu, timebase_prop=%p\", (unsigned long)timebase_id, (void *)timebase_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    log_probe_2683(\"Context check: current objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        log_probe_2683(\"ERROR: incorrect context - called from a timebase (timer) callback\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Clear output struct and log that we zeroed it */\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    log_probe_2683(\"Cleared timebase_prop at %p (size=%zu)\", (void *)timebase_prop, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    log_probe_2683(\"OS_ObjectIdGetById returned %ld, token=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log pointers fetched from object tables */\n        log_probe_2683(\"Fetched record=%p, timebase=%p\", (void *)record, (void *)timebase);\n\n        /* Defensive logs - log available fields that are read below. Guard checks avoid deref if pointers are NULL */\n        if (record != NULL)\n        {\n            const char *rname = record->name_entry ? record->name_entry : \"(null)\";\n            log_probe_2683(\"Record fields: name_entry='%s', creator=%lu\", rname, (unsigned long)record->creator);\n        }\n        else\n        {\n            log_probe_2683(\"Record is NULL\");\n        }\n\n        if (timebase != NULL)\n        {\n            log_probe_2683(\"Timebase fields: nominal_interval_time=%lu, freerun_time=%lu, accuracy_usec=%lu\",\n                           (unsigned long)timebase->nominal_interval_time,\n                           (unsigned long)timebase->freerun_time,\n                           (unsigned long)timebase->accuracy_usec);\n        }\n        else\n        {\n            log_probe_2683(\"Timebase record is NULL\");\n        }\n\n        /* Preserve original behavior: copy fields into output structure */\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        /* Log values copied into the output structure */\n        log_probe_2683(\"Copied into timebase_prop: name='%s', creator=%lu, nominal_interval_time=%lu, freerun_time=%lu, accuracy=%lu\",\n                       timebase_prop->name,\n                       (unsigned long)timebase_prop->creator,\n                       (unsigned long)timebase_prop->nominal_interval_time,\n                       (unsigned long)timebase_prop->freerun_time,\n                       (unsigned long)timebase_prop->accuracy);\n\n        /* Call implementation hook and log its return value */\n        log_probe_2683(\"Calling OS_TimeBaseGetInfo_Impl with token=%p\", (void *)&token);\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n        log_probe_2683(\"OS_TimeBaseGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        log_probe_2683(\"Released token %p\", (void *)&token);\n    }\n    else\n    {\n        log_probe_2683(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    log_probe_2683(\"EXIT: OS_TimeBaseGetInfo returning %ld\", (long)return_code);\n    return return_code;\n}\n"
}