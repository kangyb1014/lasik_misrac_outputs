{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code does not validate the source pointer or its accessible size before calling memcpy. If BufferPtr is NULL (with BufferSize>0) or BufferPtr actually points to a buffer smaller than BufferSize, the call memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize) will read beyond the bounds of the source object. For example, passing a 4-byte source buffer with BufferSize==8 will cause an out-of-bounds read.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToReturnValue:\n```c\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL)\n    {\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToReturnValue code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = fopen(\"/tmp/logs/3189.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"--- UT_Stub_CopyToReturnValue ENTRY ---\\n\");\n        /* Do not attempt to dereference BufferPtr here; only log its value */\n        fprintf(log, \"BufferPtr=%p, BufferSize=%zu\\n\", BufferPtr, BufferSize);\n        fflush(log);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (log)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    if (StubPtr != NULL)\n    {\n        size_t expected = StubPtr->Data.Buff.TotalSize;\n        void *baseptr = StubPtr->Data.Buff.BasePtr;\n        size_t position = StubPtr->Data.Buff.Position;\n\n        if (log)\n        {\n            fprintf(log, \"StubBuf: BasePtr=%p, TotalSize=%zu, Position=%zu\\n\",\n                    baseptr, expected, position);\n            fflush(log);\n        }\n\n        /* If the size does not match, there is a bug */\n        if (expected != BufferSize)\n        {\n            if (log)\n            {\n                fprintf(log, \"Size mismatch in setting return value: expected=%zu, provided=%zu\\n\",\n                        expected, BufferSize);\n                fflush(log);\n                fclose(log);\n            }\n\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            if (log)\n            {\n                /* Log special note if source pointer is NULL while size>0 (likely UB) */\n                if (BufferPtr == NULL && BufferSize > 0)\n                {\n                    fprintf(log, \"WARNING: BufferPtr is NULL while BufferSize=%zu > 0 - memcpy will read from NULL and cause UB\\n\",\n                            BufferSize);\n                }\n                fprintf(log, \"About to memcpy dest=%p, src=%p, n=%zu\\n\", baseptr, BufferPtr, BufferSize);\n                fflush(log);\n            }\n\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n\n            if (log)\n            {\n                fprintf(log, \"memcpy completed. New Position=%zu\\n\", StubPtr->Data.Buff.Position);\n                fprintf(log, \"--- UT_Stub_CopyToReturnValue EXIT ---\\n\\n\");\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"No stub entry found for provided FuncKey. Exiting without action.\\n\");\n            fprintf(log, \"--- UT_Stub_CopyToReturnValue EXIT (no stub) ---\\n\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n}\n"
}