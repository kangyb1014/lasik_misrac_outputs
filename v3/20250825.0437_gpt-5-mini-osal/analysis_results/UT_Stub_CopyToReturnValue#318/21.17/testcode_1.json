{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function checks the destination buffer size against BufferSize but does not validate the source pointer. If BufferPtr is NULL or points to an object smaller than BufferSize, the call memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize) can read beyond the bounds of the source object (or dereference NULL) causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3189.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToReturnValue:\n```c\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL)\n    {\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToReturnValue code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Helper logging function that appends records to the log file. */\nstatic void UT_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3189.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    UT_Log(\"ENTRY: UT_Stub_CopyToReturnValue called: FuncKey=%lu, BufferPtr=%p, BufferSize=%zu\",\n           (unsigned long)FuncKey, BufferPtr, BufferSize);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    UT_Log(\"UT_GetStubEntry returned: StubPtr=%p\", (void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Log current stub buffer state (do not dereference BufferPtr) */\n        UT_Log(\"Stub buffer state: BasePtr=%p, TotalSize=%zu, Position=%zu\",\n               (void *)StubPtr->Data.Buff.BasePtr,\n               StubPtr->Data.Buff.TotalSize,\n               StubPtr->Data.Buff.Position);\n\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UT_Log(\"ERROR: Size mismatch in setting return value - Stub TotalSize=%zu, BufferSize=%zu\",\n                   StubPtr->Data.Buff.TotalSize,\n                   BufferSize);\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            UT_Log(\"About to perform memcpy: dest=%p, src=%p, size=%zu\",\n                   (void *)StubPtr->Data.Buff.BasePtr,\n                   BufferPtr,\n                   BufferSize);\n\n            /* Preserve original behavior: perform copy as before. */\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n\n            UT_Log(\"After memcpy: Position=%zu\", StubPtr->Data.Buff.Position);\n        }\n    }\n    else\n    {\n        UT_Log(\"No stub entry found (StubPtr is NULL). No action taken.\");\n    }\n}\n"
}