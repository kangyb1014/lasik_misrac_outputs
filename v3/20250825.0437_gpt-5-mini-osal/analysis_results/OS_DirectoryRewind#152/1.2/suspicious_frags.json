{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryRewind:\n```c\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRewind_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_DirectoryRewind:\ntypedef int32_t   int32\n...\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_DirRewind_Impl(const OS_object_token_t *token)\n{\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    rewinddir(impl->dp);\n    return OS_SUCCESS;\n}\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed the provided code and did not find any explicitly compiler-specific language extensions (for example: __attribute__, __asm__/__asm__, __declspec, typeof (GCC), statement-expressions ({...}) used as expressions, inline assembly, nested functions, or other documented compiler extensions). The constructs present are standard C: typedefs, forward declarations, pointer usage, function calls, macros and macros invocations, return statements, and standard library/POSIX call rewinddir().\n\nSpecific notes explaining why fragments were not flagged:\n- Typedefs (int32, osal_id_t, OS_object_token_t) and the forward declaration of the struct are standard C and not compiler extensions.\n- Function definitions and prototypes (OS_DirectoryRewind, OS_ObjectIdGetById, OS_DirRewind_Impl) use standard C syntax.\n- The use of the macro invocation OS_OBJECT_TABLE_GET(...) in OS_DirRewind_Impl is itself not a language extension; the macro definition is not provided in the snippets, so there is no evidence here that it expands to a compiler extension. If the macro definition (not provided) uses compiler-specific extensions, that definition should be inspected \u2014 but the invocation in the shown code is not sufficient grounds to report an extension.\n- The call to rewinddir() is a POSIX library function, not a language extension.\n\nIf you want exhaustive verification against Rule 1.2, provide the definitions of any macros used (for example OS_OBJECT_TABLE_GET) and the implementations of referenced functions and headers; those could contain compiler-specific extensions. Based on the code shown, no language extensions are used, so no code fragments are flagged for investigation."
}