{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment passes &token (type OS_object_token_t *) to OS_DirRewind_Impl. If the prototype of OS_DirRewind_Impl is non-const, e.g. int32 OS_DirRewind_Impl(OS_object_token_t *token), and the function does not modify the pointed-to object, then a pointer to a non-const type is used when a const-qualified pointer could be used \u2014 this violates MISRA C 2023 Rule 8.13. To fix, declare the parameter as const OS_object_token_t *token (and update the implementation accordingly). If, however, OS_DirRewind_Impl legitimately modifies *token (i.e. its API requires a mutable pointer), then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryRewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryRewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryRewind:\n```c\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRewind_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryRewind code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helpers to log control flow and token state for debugging the\n * potential MISRA Rule 8.13 violation. Logs are appended to\n * \"/tmp/logs/1523.txt\" so that other agents can reproduce and inspect\n * the behavior. These helpers do not change the original logic.\n */\nstatic void OS_DirectoryRewind_LogState(const char *phase, const void *token_ptr, size_t token_size, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1523.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: return_code=%ld, token_ptr=%p, token_size=%zu\\n\",\n            phase, (long)return_code, token_ptr, token_size);\n\n    if (token_ptr != NULL && token_size > 0)\n    {\n        const unsigned char *p = (const unsigned char *)token_ptr;\n        fprintf(f, \"%s: token_bytes=\", phase);\n        for (size_t i = 0; i < token_size; ++i)\n        {\n            fprintf(f, \"%02X\", p[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic void OS_DirectoryRewind_LogMessage(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1523.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n\n    /* Log result of lookup and token state (if available) */\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token bytes after successful lookup */\n        OS_DirectoryRewind_LogState(\"after_getbyid\", &token, sizeof(token), return_code);\n\n        /* Make a local copy to detect whether the implementation modifies the token */\n        OS_object_token_t token_before;\n        memcpy(&token_before, &token, sizeof(token_before));\n\n        /* Call the implementation (preserve original logic) */\n        return_code = OS_DirRewind_Impl(&token);\n\n        /* Log token bytes after implementation call */\n        OS_DirectoryRewind_LogState(\"after_impl\", &token, sizeof(token), return_code);\n\n        /* Compare pre/post to determine if the implementation mutated the token */\n        if (memcmp(&token_before, &token, sizeof(token)) == 0)\n        {\n            OS_DirectoryRewind_LogMessage(\"token_unchanged: OS_DirRewind_Impl did not modify the token contents\");\n        }\n        else\n        {\n            OS_DirectoryRewind_LogMessage(\"token_changed: OS_DirRewind_Impl modified the token contents\");\n        }\n    }\n    else\n    {\n        /* Log failure to retrieve object id; token contents are not considered valid */\n        OS_DirectoryRewind_LogState(\"getbyid_failed\", NULL, 0, return_code);\n    }\n\n    return return_code;\n}\n"
}