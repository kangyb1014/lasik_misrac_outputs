{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_GetFsInfo:\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_GetFsInfo:\ntypedef struct\n{\n    uint32 MaxFds;      /**< @brief Total number of file descriptors */\n    uint32 FreeFds;     /**< @brief Total number that are free */\n    uint32 MaxVolumes;  /**< @brief Maximum number of volumes */\n    uint32 FreeVolumes; /**< @brief Total number of volumes free */\n} os_fsinfo_t\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_MAX_NUM_OPEN_FILES 50\n...\n#define OS_MAX_FILE_SYSTEMS 14\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmemset(filesys_info, 0, sizeof(*filesys_info));\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "In normal use (caller passes a pointer to a genuine os_fsinfo_t object) this memset writes sizeof(os_fsinfo_t) bytes and is safe. A violation would occur if the caller passed a non-null pointer to an object smaller than os_fsinfo_t (for example a pointer to a single uint32_t, or a pointer into an array where the remaining bytes are less than sizeof(os_fsinfo_t)), in which case memset(filesys_info, 0, sizeof(*filesys_info)) would write beyond the target object\u2019s bounds."
}