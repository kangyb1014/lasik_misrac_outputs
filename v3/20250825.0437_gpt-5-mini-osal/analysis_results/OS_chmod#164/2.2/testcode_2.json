{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment \"SysMountPointLen = 0;\" is redundant. In OS_TranslatePath the variable SysMountPointLen is only used later when return_code == OS_SUCCESS; in that case the code path that leads to success always assigns SysMountPointLen from filesys->system_mountpt before any use. In error paths where SysMountPointLen would remain 0 (or uninitialized) the subsequent code that would use it is not executed because return_code != OS_SUCCESS. Therefore removing the statement would not change program behaviour, so the assignment is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1642.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chmod as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chmod code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Provide integer typedefs used by the OSAL API. */\ntypedef int32_t int32;\ntypedef uint32_t uint32;\n\n/* Provide a compile-time constant for the local path buffer length. */\nenum { OS_MAX_LOCAL_PATH_LEN = 256 };\n\n/* Declarations for external functions implemented elsewhere. */\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_FileChmod_Impl(const char *local_path, uint32 access_mode);\n\n/*\n * Simple probe logger that appends messages to /tmp/logs/1642.txt.\n * This captures control flow and state needed to reproduce the reported scenario.\n */\nstatic void OS_Chmod_Probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1642.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    /* Log entry and input state */\n    OS_Chmod_Probe(\"OS_chmod: entry; path=%s; access_mode=%u\",\n                   (path != NULL) ? path : \"(null)\", (unsigned)access_mode);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log the result of translation and the translated path if available */\n    if (return_code == 0)\n    {\n        /* Assuming OS_SUCCESS == 0 in typical OSAL; make the log explicit */\n        OS_Chmod_Probe(\"OS_chmod: OS_TranslatePath returned OS_SUCCESS; local_path=%s\", local_path);\n    }\n    else\n    {\n        OS_Chmod_Probe(\"OS_chmod: OS_TranslatePath returned error code=%d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_Chmod_Probe(\"OS_chmod: calling OS_FileChmod_Impl with local_path=%s; access_mode=%u\",\n                       local_path, (unsigned)access_mode);\n\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n\n        OS_Chmod_Probe(\"OS_chmod: OS_FileChmod_Impl returned code=%d\", (int)return_code);\n    }\n    else\n    {\n        OS_Chmod_Probe(\"OS_chmod: skipping OS_FileChmod_Impl due to translate error\");\n    }\n\n    OS_Chmod_Probe(\"OS_chmod: exit; returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}