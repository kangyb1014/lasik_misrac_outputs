{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment VirtPathBegin = VirtPathLen; is redundant. In OS_TranslatePath VirtPathBegin is only used later inside the block guarded by if (return_code == OS_SUCCESS). That condition can only be true when OS_ObjectIdGetBySearch returned OS_SUCCESS and the code path that leaves return_code == OS_SUCCESS always sets VirtPathBegin to OS_strnlen(filesys->virtual_mountpt, ...), overwriting the earlier assignment. In the other paths (OS_ObjectIdGetBySearch failure or filesys not mounted) return_code != OS_SUCCESS and VirtPathBegin is not used. Therefore the earlier assignment is executed but has no effect on program behaviour and is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1642.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chmod as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chmod code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/*\n * Probe/logging helper for OS_chmod to capture control flow and state.\n * Appends human-readable logs to /tmp/logs/1642.txt. Does not change\n * the behavior of OS_chmod; only records parameter values, return\n * codes and control branches taken.\n */\nstatic void OS_chmod_log_state(const char *stage,\n                              const char *path,\n                              const char *local_path,\n                              int32 return_code,\n                              uint32 access_mode)\n{\n    FILE *f = fopen(\"/tmp/logs/1642.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is not possible, silently continue to preserve behavior. */\n        return;\n    }\n\n    if (path == NULL)\n    {\n        fprintf(f, \"%s: path=NULL, \", stage);\n    }\n    else\n    {\n        fprintf(f, \"%s: path=\\\"%s\\\", \", stage, path);\n    }\n\n    if (local_path == NULL)\n    {\n        fprintf(f, \"local_path=NULL, \");\n    }\n    else\n    {\n        /* local_path may be uninitialized before OS_TranslatePath; print safely */\n        fprintf(f, \"local_path=\\\"%s\\\", \", local_path);\n    }\n\n    fprintf(f, \"return_code=%ld, access_mode=%lu\\n\", (long)return_code, (unsigned long)access_mode);\n    fclose(f);\n}\n\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    /* Log state before calling OS_TranslatePath */\n    /* local_path may contain indeterminate data here; pass an empty string for safety */\n    local_path[0] = '\\0';\n    OS_chmod_log_state(\"before_translate\", path, local_path, -1, access_mode);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation */\n    OS_chmod_log_state(\"after_translate\", path, local_path, return_code, access_mode);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before delegating to implementation-specific chmod */\n        OS_chmod_log_state(\"before_impl\", path, local_path, return_code, access_mode);\n\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n\n        /* Log result after calling implementation */\n        OS_chmod_log_state(\"after_impl\", path, local_path, return_code, access_mode);\n    }\n\n    /* Final return state */\n    OS_chmod_log_state(\"final_return\", path, local_path, return_code, access_mode);\n\n    return return_code;\n}\n"
}