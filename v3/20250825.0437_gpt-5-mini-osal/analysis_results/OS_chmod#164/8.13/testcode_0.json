{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_FileChmod_Impl is declared to take a non-const pointer (e.g. int32 OS_FileChmod_Impl(char *path, uint32 access_mode)) but does not actually modify the path buffer, then Rule 8.13 is violated because the pointer parameter should be const-qualified (const char *). In other words, passing the local_path (char array) to a callee that could accept a const char * but is instead declared to take char * is a violation. (If, however, OS_FileChmod_Impl legitimately modifies the path buffer, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1643.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chmod as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chmod code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    /* Log entry and input state */\n    {\n        FILE *fp = fopen(\"/tmp/logs/1643.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_chmod ENTRY: path=%p\", (const void *)path);\n            if (path != NULL)\n            {\n                fprintf(fp, \" ('%s')\", path);\n            }\n            fprintf(fp, \", access_mode=%u\\n\", (unsigned)access_mode);\n            fclose(fp);\n        }\n    }\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and the translated path */\n    {\n        FILE *fp = fopen(\"/tmp/logs/1643.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_TranslatePath returned %d\\n\", (int)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                fprintf(fp, \"local_path address=%p, content_before_call='%s'\\n\", (void *)local_path, local_path);\n            }\n            else\n            {\n                fprintf(fp, \"local_path not valid (translation failed)\\n\");\n            }\n            fclose(fp);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Save a copy of the local_path so we can detect modifications by the callee */\n        char saved_path[OS_MAX_LOCAL_PATH_LEN];\n\n        /* Use strncpy and guarantee null termination */\n        strncpy(saved_path, local_path, OS_MAX_LOCAL_PATH_LEN);\n        saved_path[OS_MAX_LOCAL_PATH_LEN - 1] = '\\0';\n\n        /* Log just before calling the implementation */\n        {\n            FILE *fp = fopen(\"/tmp/logs/1643.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"Calling OS_FileChmod_Impl(local_path=%p, access_mode=%u)\\n\", (void *)local_path, (unsigned)access_mode);\n                fprintf(fp, \"local_path (saved)='%s'\\n\", saved_path);\n                fclose(fp);\n            }\n        }\n\n        /* Call the underlying implementation (preserve original logic) */\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n\n        /* Log after call and detect whether the callee modified the path buffer */\n        {\n            FILE *fp = fopen(\"/tmp/logs/1643.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"OS_FileChmod_Impl returned %d\\n\", (int)return_code);\n                fprintf(fp, \"local_path after call address=%p, content_after_call='%s'\\n\", (void *)local_path, local_path);\n\n                if (strcmp(saved_path, local_path) == 0)\n                {\n                    fprintf(fp, \"DETECTION: local_path UNCHANGED by OS_FileChmod_Impl\\n\");\n                }\n                else\n                {\n                    fprintf(fp, \"DETECTION: local_path MODIFIED by OS_FileChmod_Impl\\n\");\n                    fprintf(fp, \"before='%s' after='%s'\\n\", saved_path, local_path);\n                }\n\n                fclose(fp);\n            }\n        }\n    }\n\n    /* Final return logging */\n    {\n        FILE *fp = fopen(\"/tmp/logs/1643.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_chmod EXIT returning %d\\n\", (int)return_code);\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}