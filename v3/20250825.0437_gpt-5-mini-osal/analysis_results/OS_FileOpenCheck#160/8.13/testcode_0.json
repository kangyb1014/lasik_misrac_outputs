{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro expands to &tbl[OS_ObjectIndexFromToken(&(tok))], yielding a pointer to the element type of tbl without const qualification. In OS_FileOpenCheck this is used as: stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token); stream is non-const (OS_stream_internal_record_t *), but the function only reads fields (strcmp and socket_domain check). Therefore a pointer that only observes data should be const-qualified (e.g. const OS_stream_internal_record_t *stream). The macro thus facilitates obtaining a non-const pointer for read-only access and leads to a violation of MISRA C 2023 Rule 8.13 in this usage scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - appends human-readable traces to /tmp/logs/1603.txt */\nstatic void OS_FileOpenCheck_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    unsigned int                 iter_count = 0U;\n\n    /* Log entry and parameter state */\n    OS_FileOpenCheck_Log(\"ENTRY: OS_FileOpenCheck Filename=\\\"%s\\\"\", Filename ? Filename : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    OS_FileOpenCheck_Log(\"Iterator initialized for LOCAL_OBJID_TYPE\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++iter_count;\n\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log iterator token and pointer returned by table macro */\n        OS_FileOpenCheck_Log(\"Iteration %u: token=%llu stream_ptr=%p\", iter_count, (unsigned long long)iter.token, (void *)stream);\n\n        if (stream == NULL)\n        {\n            /* Preserve original logic: skip null entries but log for diagnostics */\n            OS_FileOpenCheck_Log(\"Iteration %u: stream is NULL, continue\", iter_count);\n            continue;\n        }\n\n        /* Log fields used in the check (do not call strcmp unless socket_domain check passes) */\n        OS_FileOpenCheck_Log(\"Iteration %u: socket_domain=%d stream_name=\\\"%s\\\"\", iter_count, (int)stream->socket_domain, stream->stream_name ? stream->stream_name : \"(null)\");\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Only compare names when socket domain indicates a regular file-like stream (preserve original short-circuit order) */\n            int cmp = strcmp(stream->stream_name, Filename);\n            OS_FileOpenCheck_Log(\"Iteration %u: strcmp(stream->stream_name, Filename) = %d\", iter_count, cmp);\n\n            if (cmp == 0)\n            {\n                return_code = OS_SUCCESS;\n                OS_FileOpenCheck_Log(\"Iteration %u: match found, setting return_code=OS_SUCCESS and breaking\", iter_count);\n                break;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n    OS_FileOpenCheck_Log(\"Iterator destroyed, total_iterations=%u return_code=%d\", iter_count, return_code);\n\n    OS_FileOpenCheck_Log(\"EXIT: OS_FileOpenCheck return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}