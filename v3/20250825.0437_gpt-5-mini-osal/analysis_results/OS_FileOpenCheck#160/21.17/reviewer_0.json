{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call strcmp(stream->stream_name, Filename) can read bytes until it finds a NUL terminator. OS_CHECK_POINTER(Filename) only ensures Filename is non-NULL, not that it points to a NUL-terminated buffer or that the buffer sizes are sufficient. If stream->stream_name is a fixed-size array that is not NUL-terminated (for example it was filled completely without a terminator) or if Filename points to a non-terminated/malformed buffer (or an object shorter than the expected string), strcmp will read past the bounds of the referenced objects. Therefore this use can violate Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent's report is correct given the code shown. MISRA C 2023 Rule 21.17 requires that calls to <string.h> functions must not be able to access beyond the bounds of the objects referenced by their pointer parameters. strcmp reads both arguments until it finds a NUL terminator; OS_CHECK_POINTER(Filename) only checks for non-NULL and does not guarantee Filename is NUL-terminated or that the buffer is large enough. Likewise, nothing in this function ensures that stream->stream_name is NUL-terminated. Therefore, as written this call to strcmp can potentially read past the bounds of one or both buffers, which is a violation of Rule 21.17 unless there is an external, provable invariant (not shown) that both buffers are NUL-terminated and sized appropriately. Remediations include using length-limited comparisons (e.g., strncmp with a documented size), maintaining explicit length fields, or ensuring and documenting NUL-termination on buffer population."
}