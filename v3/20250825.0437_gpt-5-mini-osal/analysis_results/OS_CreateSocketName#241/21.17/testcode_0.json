{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf sock->stream_name does not contain a NUL within sizeof(sock->stream_name) then len == sizeof(sock->stream_name). The code then passes &sock->stream_name[len] (a pointer one-past-the-end of the array) and a size of zero to snprintf. Although C permits creating a one-past-the-end pointer, passing it as the destination to a formatting/string function risks the function accessing memory beyond the object bounds (some implementations could still dereference the pointer or otherwise access it), so this can result in out-of-bounds accesses. Therefore the usage can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CreateSocketName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CreateSocketName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CreateSocketName:\n```c\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        sock->stream_name[0] = 0;\n    }\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CreateSocketName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/2419.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    probe_log(\"OS_CreateSocketName: entry token=%p sock=%p Addr=%p parent_name=%p\",\n              (const void *)token, (const void *)sock, (const void *)Addr, (const void *)parent_name);\n\n    /* Log initial contents of stream_name (first up to 64 bytes as characters and hex) */\n    {\n        size_t i;\n        size_t max_dump = (sizeof(sock->stream_name) < 64u) ? sizeof(sock->stream_name) : 64u;\n        /* print as characters, not assuming NUL termination */\n        probe_log(\"stream_name initial (first %zu bytes):\", max_dump);\n        for (i = 0; i < max_dump; ++i)\n        {\n            /* Print each char as ASCII or '.' for non-printable */\n            unsigned char ch = (unsigned char)sock->stream_name[i];\n            if (ch >= 32u && ch < 127u)\n            {\n                /* printable */\n                char buf[8] = {0};\n                buf[0] = (char)ch;\n                probe_log(\"  [%02zu] '%s' (0x%02x)\", i, buf, (unsigned int)ch);\n            }\n            else\n            {\n                probe_log(\"  [%02zu] '.' (0x%02x)\", i, (unsigned int)ch);\n            }\n        }\n    }\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        probe_log(\"OS_SocketAddrToString_Impl failed: setting stream_name[0]=0\");\n        sock->stream_name[0] = 0;\n    }\n    else\n    {\n        probe_log(\"OS_SocketAddrToString_Impl succeeded. stream_name after conversion (up to 128 chars):\");\n        /* Use OS_strnlen to avoid scanning beyond buffer */\n        size_t post_len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        probe_log(\"  reported length after conversion: %zu (buffer size: %zu)\", post_len, sizeof(sock->stream_name));\n        /* Print the string up to post_len safely */\n        {\n            size_t i;\n            size_t dump = (post_len < 128u) ? post_len : 128u;\n            for (i = 0; i < dump; ++i)\n            {\n                unsigned char ch = (unsigned char)sock->stream_name[i];\n                if (ch >= 32u && ch < 127u)\n                {\n                    char buf[2] = { (char)ch, '\\0' };\n                    probe_log(\"  [%02zu] '%s' (0x%02x)\", i, buf, (unsigned int)ch);\n                }\n                else\n                {\n                    probe_log(\"  [%02zu] '.' (0x%02x)\", i, (unsigned int)ch);\n                }\n            }\n        }\n    }\n\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        probe_log(\"Preparing to append port: computed len=%zu buffer_size=%zu\", len, sizeof(sock->stream_name));\n\n        if (len == sizeof(sock->stream_name))\n        {\n            probe_log(\"WARNING: len == sizeof(stream_name) -> destination pointer will be one-past-the-end: %p\",\n                      (const void *)&sock->stream_name[len]);\n        }\n        else\n        {\n            probe_log(\"destination pointer for snprintf: %p available_space=%zu\",\n                      (const void *)&sock->stream_name[len], (size_t)(sizeof(sock->stream_name) - len));\n        }\n\n        probe_log(\"calling snprintf to append :%u\", (unsigned int)port);\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n\n        /* Log result of append using safe bounds */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        probe_log(\"After port append: new len=%zu\", len);\n    }\n    else\n    {\n        probe_log(\"OS_SocketAddrGetPort_Impl failed; not appending port\");\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        probe_log(\"Preparing to append parent_name='%s' computed len=%zu buffer_size=%zu\", parent_name, len, sizeof(sock->stream_name));\n\n        if (len == sizeof(sock->stream_name))\n        {\n            probe_log(\"WARNING: len == sizeof(stream_name) before parent append -> destination pointer one-past-end: %p\",\n                      (const void *)&sock->stream_name[len]);\n        }\n        else\n        {\n            probe_log(\"destination pointer for snprintf (parent append): %p available_space=%zu\",\n                      (const void *)&sock->stream_name[len], (size_t)(sizeof(sock->stream_name) - len));\n        }\n\n        probe_log(\"calling snprintf to append -%s\", parent_name);\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        probe_log(\"After parent append: new len=%zu\", len);\n    }\n\n    probe_log(\"OS_CreateSocketName: exit\");\n}\n"
}