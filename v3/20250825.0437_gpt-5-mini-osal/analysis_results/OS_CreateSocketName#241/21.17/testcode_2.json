{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf sock->stream_name contains no NUL within sizeof(sock->stream_name) (OS_strnlen returns sizeof(sock->stream_name)), then &sock->stream_name[len] is a pointer one-past-the-end and the remaining size becomes 0. Passing that pointer/size to snprintf can result in accesses beyond the bounds of the stream_name buffer (undefined behavior). Even though OS_SocketAddrToString_Impl normally NUL-terminates or sets [0]=0, the code as written allows the len==sizeof case and thus can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CreateSocketName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CreateSocketName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CreateSocketName:\n```c\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        sock->stream_name[0] = 0;\n    }\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CreateSocketName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper: append detailed state to /tmp/logs/2419.txt */\nstatic void OS_CreateSocketName_LogProbe(const void *stream_name_buf, size_t bufsize, size_t len, const void *ptr_after_len, int addrstr_res, int got_port, unsigned int port, const char *parent_name, const char *stage)\n{\n    FILE *f;\n\n    /* Ensure the directory exists (ignore errors) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2419.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"---- OS_CreateSocketName Log (%s) ----\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"addrstr_res=%d, got_port=%d, port=%u, parent_name=%s\\n\", addrstr_res, got_port, port, parent_name ? parent_name : \"(null)\");\n    fprintf(f, \"bufsize=%zu, len=%zu, remaining=%zu\\n\", bufsize, len, (len <= bufsize) ? (bufsize - len) : 0);\n    fprintf(f, \"ptr_after_len=%p\\n\", ptr_after_len);\n\n    /* Dump the buffer contents in hex (up to bufsize bytes) and also as a quoted string up to the first NUL. */\n    fprintf(f, \"stream_name (hex up to bufsize):\");\n    const unsigned char *b = (const unsigned char *)stream_name_buf;\n    for (size_t i = 0; i < bufsize; ++i)\n    {\n        fprintf(f, \" %02x\", (unsigned int)b[i]);\n    }\n    fprintf(f, \"\\n\");\n\n    /* Show a safe visible representation: print up to bufsize bytes or until NUL */\n    size_t visible_len = 0;\n    while (visible_len < bufsize && b[visible_len] != '\\0')\n        ++visible_len;\n\n    fprintf(f, \"stream_name (visible, up to first NUL or bufsize): \\\"\");\n    for (size_t i = 0; i < visible_len; ++i)\n    {\n        int c = b[i];\n        /* print printable characters or escape */\n        if (c >= 32 && c < 127 && c != '\\\\' && c != '\"')\n            fputc(c, f);\n        else if (c == '\\\\')\n            fputs(\"\\\\\\\\\", f);\n        else if (c == '\"')\n            fputs(\"\\\\\\\"\", f);\n        else\n            fprintf(f, \"\\\\x%02x\", (unsigned int)c);\n    }\n    if (visible_len < bufsize)\n        fprintf(f, \"\\\" (NUL at pos %zu)\\n\", visible_len);\n    else\n        fprintf(f, \"\\\" (no NUL within bufsize)\\n\");\n\n    fprintf(f, \"---- end log ----\\n\\n\");\n\n    fclose(f);\n}\n\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    /* Log entry state before attempting to stringify the address */\n    OS_CreateSocketName_LogProbe(sock->stream_name, sizeof(sock->stream_name), 0, (void *)sock->stream_name, -1, 0, 0, parent_name, \"entry\");\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        sock->stream_name[0] = 0;\n        /* Log that address-to-string failed and buffer was zeroed */\n        OS_CreateSocketName_LogProbe(sock->stream_name, sizeof(sock->stream_name), 0, (void *)sock->stream_name, 0, 0, 0, parent_name, \"addrstr-failed\");\n    }\n    else\n    {\n        /* Log the state after successful address-to-string */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        OS_CreateSocketName_LogProbe(sock->stream_name, sizeof(sock->stream_name), len, (void *)&sock->stream_name[len], 0, 0, 0, parent_name, \"addrstr-success-before-port\");\n    }\n\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n\n        /* Log just before appending the port, including the computed pointer and remaining size. */\n        OS_CreateSocketName_LogProbe(sock->stream_name, sizeof(sock->stream_name), len, (void *)&sock->stream_name[len], 0, 1, (unsigned int)port, parent_name, \"before-snprintf-port\");\n\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n\n        /* Log after attempting to append the port */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        OS_CreateSocketName_LogProbe(sock->stream_name, sizeof(sock->stream_name), len, (void *)&sock->stream_name[len], 0, 1, (unsigned int)port, parent_name, \"after-snprintf-port\");\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n\n        /* Log before appending parent name */\n        OS_CreateSocketName_LogProbe(sock->stream_name, sizeof(sock->stream_name), len, (void *)&sock->stream_name[len], 0, 0, 0, parent_name, \"before-snprintf-parent\");\n\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n\n        /* Log after appending parent name */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        OS_CreateSocketName_LogProbe(sock->stream_name, sizeof(sock->stream_name), len, (void *)&sock->stream_name[len], 0, 0, 0, parent_name, \"after-snprintf-parent\");\n    }\n}\n"
}