{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the switch default label within OS_SocketAddrToString_Impl and OS_SocketAddrGetPort_Impl the 'break;' statement immediately following 'return OS_ERR_BAD_ADDRESS;' is unreachable (dead code). The 'break;' can never be executed because control returns from the function before it; this constitutes unreachable code and thus violates MISRA C:2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CreateSocketName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2411.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CreateSocketName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CreateSocketName:\n```c\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        sock->stream_name[0] = 0;\n    }\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CreateSocketName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/*\n * Probe logging helper: append human-readable traces to /tmp/logs/2411.txt\n * Keeps the original logic of OS_CreateSocketName intact while emitting\n * information that helps reproduce the control flow and state relevant to\n * the reported unreachable-code violation in the socket address helper\n * functions.\n */\nstatic void OS_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2411.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    OS_probe_log(\"OS_CreateSocketName: entry token=%p Addr=%p parent_name=%p\", (const void *)token, (const void *)Addr, (const void *)parent_name);\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n    OS_probe_log(\"OS_CreateSocketName: got sock=%p (stream_name before=\\\"%s\\\")\", (const void *)sock, sock ? sock->stream_name : (const char *)\"<null>\");\n\n    /* Call to OS_SocketAddrToString_Impl - log return code and resulting string */\n    int rc_str = OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr);\n    OS_probe_log(\"OS_CreateSocketName: OS_SocketAddrToString_Impl returned %d\", rc_str);\n    OS_probe_log(\"OS_CreateSocketName: stream_name after ToString=\\\"%s\\\"\", sock->stream_name);\n\n    if (rc_str != OS_SUCCESS)\n    {\n        /* Preserve original behavior: clear the string on error. */\n        sock->stream_name[0] = 0;\n        OS_probe_log(\"OS_CreateSocketName: ToString failed, cleared stream_name\");\n    }\n\n    /* Call to OS_SocketAddrGetPort_Impl - log return code and port value */\n    int rc_port = OS_SocketAddrGetPort_Impl(&port, Addr);\n    OS_probe_log(\"OS_CreateSocketName: OS_SocketAddrGetPort_Impl returned %d port=%u\", rc_port, (unsigned)port);\n\n    if (rc_port == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        OS_probe_log(\"OS_CreateSocketName: appending port: current_len=%zu remaining_space=%zu\", len, (size_t)(sizeof(sock->stream_name) - len));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n        OS_probe_log(\"OS_CreateSocketName: stream_name after appending port=\\\"%s\\\"\", sock->stream_name);\n    }\n    else\n    {\n        OS_probe_log(\"OS_CreateSocketName: port not appended because GetPort returned %d\", rc_port);\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        OS_probe_log(\"OS_CreateSocketName: appending parent_name '%s' at position %zu\", parent_name, len);\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n        OS_probe_log(\"OS_CreateSocketName: stream_name after appending parent=\\\"%s\\\"\", sock->stream_name);\n    }\n\n    OS_probe_log(\"OS_CreateSocketName: exit stream_name=\\\"%s\\\"\", sock->stream_name);\n}\n"
}