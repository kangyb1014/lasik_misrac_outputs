{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2736.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm = localtime_r(&t, &tm_buf);\n    if (tm != NULL)\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] pid=%d: \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec,\n                (int)getpid());\n    }\n    else\n    {\n        fprintf(f, \"[unknown-time] pid=%d: \", (int)getpid());\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    /* Log entry and initial state */\n    os_log_probe(\"Enter OS_TimerDelete: timer_id=%lu\", (unsigned long)timer_id);\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    os_log_probe(\"Context check: current objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        os_log_probe(\"Abort: called from timebase callback context\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    os_log_probe(\"OS_ObjectIdGetById returned %d for timer_id=%lu; timecb_token_ptr=%p\", return_code, (unsigned long)timer_id, (void *)&timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        os_log_probe(\"Located timecb=%p, timebase=%p, timecb->flags=0x%08x\", (void *)timecb, (void *)timebase, (unsigned int)timecb->flags);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n        os_log_probe(\"Transferred timebase token: timecb->timebase_token_ptr=%p, timebase_token_ptr=%p\", (void *)&timecb->timebase_token, (void *)&timebase_token);\n\n        os_log_probe(\"Locking timebase (token_ptr=%p)\", (void *)&timecb->timebase_token);\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n        os_log_probe(\"Timebase locked (token_ptr=%p)\", (void *)&timecb->timebase_token);\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n            os_log_probe(\"Timer uses dedicated timebase: dedicated_timebase_id=%lu\", (unsigned long)dedicated_timebase_id);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        os_log_probe(\"Ring before removal: timebase->first_cb=%lu, timecb_token_id=%lu, timecb->next_cb=%lu\", (unsigned long)timebase->first_cb, (unsigned long)OS_ObjectIdFromToken(&timecb_token), (unsigned long)timecb->next_cb);\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n                os_log_probe(\"Removed only callback: set timebase->first_cb=UNDEFINED\");\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n                os_log_probe(\"Removed head callback: set timebase->first_cb=%lu\", (unsigned long)timebase->first_cb);\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n            os_log_probe(\"Patched prev callback (id=%lu) next_cb=%lu\", (unsigned long)timecb->prev_cb, (unsigned long)list_timecb->next_cb);\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n            os_log_probe(\"Patched next callback (id=%lu) prev_cb=%lu\", (unsigned long)timecb->next_cb, (unsigned long)list_timecb->prev_cb);\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        os_log_probe(\"Reinitialized removed timecb links to self: next_cb=%lu, prev_cb=%lu\", (unsigned long)timecb->next_cb, (unsigned long)timecb->prev_cb);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n        os_log_probe(\"Timebase unlocked (token_ptr=%p)\", (void *)&timecb->timebase_token);\n\n        /* Complete the operation via the common routine */\n        os_log_probe(\"Calling OS_ObjectIdFinalizeDelete for timecb_token_ptr=%p\", (void *)&timecb_token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n        os_log_probe(\"OS_ObjectIdFinalizeDelete returned %d\", return_code);\n    }\n    else\n    {\n        os_log_probe(\"OS_ObjectIdGetById failed, skipping delete steps. return_code=%d\", return_code);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    os_log_probe(\"Releasing timebase token (token_ptr=%p)\", (void *)&timebase_token);\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        os_log_probe(\"About to delete dedicated timebase id=%lu\", (unsigned long)dedicated_timebase_id);\n        OS_TimeBaseDelete(dedicated_timebase_id);\n        os_log_probe(\"Returned from OS_TimeBaseDelete dedicated id=%lu\", (unsigned long)dedicated_timebase_id);\n    }\n\n    os_log_probe(\"Exit OS_TimerDelete: return_code=%d\", return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c: In function 'os_log_probe':\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:381:15: error: storage size of 'tm_buf' isn't known\n  381 |     struct tm tm_buf;\n      |               ^~~~~~\nIn file included from /tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:1:\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:386:19: error: invalid use of undefined type 'struct tm'\n  386 |                 tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n      |                   ^~\n/tmp/tmp713j3i9w/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:386:39: error: invalid use of undefined type 'struct tm'\n  386 |                 tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n      |                                       ^~\n/tmp/tmp713j3i9w/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:386:55: error: invalid use of undefined type 'struct tm'\n  386 |                 tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n      |                                                       ^~\n/tmp/tmp713j3i9w/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:387:19: error: invalid use of undefined type 'struct tm'\n  387 |                 tm->tm_hour, tm->tm_min, tm->tm_sec,\n      |                   ^~\n/tmp/tmp713j3i9w/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:387:32: error: invalid use of undefined type 'struct tm'\n  387 |                 tm->tm_hour, tm->tm_min, tm->tm_sec,\n      |                                ^~\n/tmp/tmp713j3i9w/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:387:44: error: invalid use of undefined type 'struct tm'\n  387 |                 tm->tm_hour, tm->tm_min, tm->tm_sec,\n      |                                            ^~\n/tmp/tmp713j3i9w/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp713j3i9w/src/src/os/shared/src/osapi-time.c:397:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  397 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/__/__/os/shared/src/osapi-time.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4407: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TimerDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdarg.h>\n#include <unistd.h>\n#include <string.h>\n\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2736.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm = localtime_r(&t, &tm_buf);\n    if (tm != NULL)\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] pid=%d: \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec,\n                (int)getpid());\n    }\n    else\n    {\n        fprintf(f, \"[unknown-time] pid=%d: \", (int)getpid());\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    /* Log entry and initial state */\n    os_log_probe(\"Enter OS_TimerDelete: timer_id=%lu\", (unsigned long)timer_id);\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    os_log_probe(\"Context check: current objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        os_log_probe(\"Abort: called from timebase callback context\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    os_log_probe(\"OS_ObjectIdGetById returned %d for timer_id=%lu; timecb_token_ptr=%p\", return_code, (unsigned long)timer_id, (void *)&timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        os_log_probe(\"Located timecb=%p, timebase=%p, timecb->flags=0x%08x\", (void *)timecb, (void *)timebase, (unsigned int)timecb->flags);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n        os_log_probe(\"Transferred timebase token: timecb->timebase_token_ptr=%p, timebase_token_ptr=%p\", (void *)&timecb->timebase_token, (void *)&timebase_token);\n\n        os_log_probe(\"Locking timebase (token_ptr=%p)\", (void *)&timecb->timebase_token);\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n        os_log_probe(\"Timebase locked (token_ptr=%p)\", (void *)&timecb->timebase_token);\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n            os_log_probe(\"Timer uses dedicated timebase: dedicated_timebase_id=%lu\", (unsigned long)dedicated_timebase_id);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        os_log_probe(\"Ring before removal: timebase->first_cb=%lu, timecb_token_id=%lu, timecb->next_cb=%lu\", (unsigned long)timebase->first_cb, (unsigned long)OS_ObjectIdFromToken(&timecb_token), (unsigned long)timecb->next_cb);\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n                os_log_probe(\"Removed only callback: set timebase->first_cb=UNDEFINED\");\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n                os_log_probe(\"Removed head callback: set timebase->first_cb=%lu\", (unsigned long)timebase->first_cb);\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n            os_log_probe(\"Patched prev callback (id=%lu) next_cb=%lu\", (unsigned long)timecb->prev_cb, (unsigned long)list_timecb->next_cb);\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n            os_log_probe(\"Patched next callback (id=%lu) prev_cb=%lu\", (unsigned long)timecb->next_cb, (unsigned long)list_timecb->prev_cb);\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        os_log_probe(\"Reinitialized removed timecb links to self: next_cb=%lu, prev_cb=%lu\", (unsigned long)timecb->next_cb, (unsigned long)timecb->prev_cb);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n        os_log_probe(\"Timebase unlocked (token_ptr=%p)\", (void *)&timecb->timebase_token);\n\n        /* Complete the operation via the common routine */\n        os_log_probe(\"Calling OS_ObjectIdFinalizeDelete for timecb_token_ptr=%p\", (void *)&timecb_token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n        os_log_probe(\"OS_ObjectIdFinalizeDelete returned %d\", return_code);\n    }\n    else\n    {\n        os_log_probe(\"OS_ObjectIdGetById failed, skipping delete steps. return_code=%d\", return_code);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    os_log_probe(\"Releasing timebase token (token_ptr=%p)\", (void *)&timebase_token);\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        os_log_probe(\"About to delete dedicated timebase id=%lu\", (unsigned long)dedicated_timebase_id);\n        OS_TimeBaseDelete(dedicated_timebase_id);\n        os_log_probe(\"Returned from OS_TimeBaseDelete dedicated id=%lu\", (unsigned long)dedicated_timebase_id);\n    }\n\n    os_log_probe(\"Exit OS_TimerDelete: return_code=%d\", return_code);\n    return return_code;\n}\n",
  "explanation": "I added the appropriate standard headers at the top of the file: <stdio.h>, <time.h>, <stdarg.h>, <unistd.h>, and <string.h>. Including <time.h> provides a complete definition for struct tm (fixing the 'storage size of tm_buf' and 'invalid use of undefined type struct tm' errors). Including <stdarg.h> ensures va_list is properly defined and matches the vfprintf prototype (fixing the va_list/vfprintf mismatch). <unistd.h> brings in getpid(). No logic in OS_TimerDelete was changed; only the necessary includes were added to allow the code to compile."
}