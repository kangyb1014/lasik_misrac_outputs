{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr without regard to the actual remaining size of the VirtualPath buffer. Although VirtPathLen was computed earlier, it is not used to bound this memchr call. If the caller supplied a VirtualPath whose total allocated size is exactly VirtPathLen+1 (the string plus NUL) and the filename portion (name_ptr) is close to the end, then the remaining bytes from name_ptr to the end of the object may be less than OS_MAX_FILE_NAME. For example, with OS_MAX_FILE_NAME = 255 and a VirtualPath of length 10 (allocated 11 bytes including NUL) where name_ptr points at offset 5, memchr will attempt to read up to 255 bytes starting at offset 5, which overruns the 6-byte object remainder and thus accesses beyond the bounds of the VirtualPath object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/929.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append logging information to /tmp/logs/929.txt */\nstatic void OS_DirOpen_LogProbe_Pre(const char *local_path, const void *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/929.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_DirOpen_Impl ENTER ---\\n\");\n    fprintf(f, \"token_ptr=%p\\n\", token_ptr);\n\n    if (local_path == NULL)\n    {\n        fprintf(f, \"local_path=NULL\\n\");\n        fprintf(f, \"--- OS_DirOpen_Impl PRE DONE ---\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Safe introspection only: use strlen to find the NUL terminator (safe when local_path is a proper C string) */\n    size_t total_len = strlen(local_path);\n    fprintf(f, \"local_path_ptr=%p\\n\", (const void *)local_path);\n    fprintf(f, \"local_path_str=\\\"%s\\\"\\n\", local_path);\n    fprintf(f, \"local_path_strlen=%zu\\n\", total_len);\n\n    /* Find filename portion: last slash if present. This is safe and only inspects within the string up to the NUL. */\n    const char *name_ptr = strrchr(local_path, '/');\n    if (name_ptr == NULL)\n    {\n        name_ptr = local_path;\n        fprintf(f, \"name_ptr: (no slash found) -> start of string\\n\");\n    }\n    else\n    {\n        /* name_ptr points to the slash; move past it for filename */\n        name_ptr++;\n        fprintf(f, \"name_ptr: (after last slash)\\n\");\n    }\n\n    size_t name_offset = (size_t)(name_ptr - local_path);\n    size_t name_len = strlen(name_ptr); /* number of bytes up to NUL for filename */\n\n    fprintf(f, \"name_ptr=%p\\n\", (const void *)name_ptr);\n    fprintf(f, \"name_offset=%zu\\n\", name_offset);\n    fprintf(f, \"name_strlen=%zu\\n\", name_len);\n\n    /* Log the first up to 64 characters of the filename to avoid huge logs; bounded by name_len. */\n    size_t dump_len = name_len < 64 ? name_len : 64;\n    fprintf(f, \"name_prefix_len=%zu\\n\", dump_len);\n    if (dump_len > 0)\n    {\n        /* Print bytes in a safe way (as characters); do not read beyond the NUL. */\n        fprintf(f, \"name_prefix=\\\"\");\n        for (size_t i = 0; i < dump_len; ++i)\n        {\n            unsigned char c = (unsigned char)name_ptr[i];\n            /* print non-printable bytes as hex to preserve information */\n            if (c >= 32 && c <= 126)\n                fputc((int)c, f);\n            else\n                fprintf(f, \"\\\\x%02X\", c);\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n\n    fprintf(f, \"Note: remaining_bytes_to_NUL_from_name_ptr=%zu\\n\", name_len + 1U); /* +1 to include the NUL */\n    fprintf(f, \"(This indicates how many bytes remain in the C string from name_ptr to the NUL; if an external call reads up to a larger constant such as OS_MAX_FILE_NAME, it may overrun the actual allocated object.)\\n\");\n\n    fprintf(f, \"--- OS_DirOpen_Impl PRE DONE ---\\n\\n\");\n    fclose(f);\n}\n\nstatic void OS_DirOpen_LogProbe_Post(const char *local_path, const void *token_ptr, int32_t result, void *dp_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/929.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_DirOpen_Impl EXIT ---\\n\");\n    fprintf(f, \"token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"local_path_ptr=%p\\n\", (const void *)local_path);\n    fprintf(f, \"opendir_result_ptr=%p\\n\", dp_ptr);\n    fprintf(f, \"return_code=%d\\n\", (int)result);\n    fprintf(f, \"--- OS_DirOpen_Impl POST DONE ---\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    /* Insert pre-call probe to capture pointer, lengths, and filename offset information. */\n    OS_DirOpen_LogProbe_Pre(local_path, (const void *)token);\n\n    DIR *dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        /* Log failure path */\n        OS_DirOpen_LogProbe_Post(local_path, (const void *)token, (int32_t)OS_ERROR, (void *)dp);\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    /* Log success path */\n    OS_DirOpen_LogProbe_Post(local_path, (const void *)token, (int32_t)OS_SUCCESS, (void *)dp);\n\n    return OS_SUCCESS;\n}\n"
}