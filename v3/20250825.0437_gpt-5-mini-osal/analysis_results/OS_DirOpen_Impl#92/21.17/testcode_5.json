{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen(VirtualPath, OS_MAX_PATH_LEN) may scan up to OS_MAX_PATH_LEN bytes. The code only checks that VirtualPath != NULL (OS_CHECK_POINTER) and does not verify that the underlying object is at least OS_MAX_PATH_LEN bytes or contains a NUL within that bound. If a caller passes a pointer to a smaller buffer (or a non-terminated string) the call can read past the object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/929.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <dirent.h>\n\n/* Probe helper: append a single line of diagnostic information to the log file.\n * This function intentionally only prints pointer values and simple status text\n * (it does NOT dereference or attempt to read the content of the path string)\n * to avoid introducing additional out-of-bounds accesses.\n */\nstatic void OS_DirOpen_Probe(const char *event, const void *token_ptr, const char *path_ptr, void *dp_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/929.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"%ld: %s\\n\", (long)t, event);\n    fprintf(f, \"    token=%p\\n\", token_ptr);\n    fprintf(f, \"    path_ptr=%p\\n\", (const void *) path_ptr);\n    if (path_ptr == NULL)\n    {\n        fprintf(f, \"    path_is_null=1\\n\");\n    }\n    else\n    {\n        fprintf(f, \"    path_is_null=0\\n\");\n        fprintf(f, \"    NOTE=This probe does NOT attempt to read the path contents.\\n\");\n        fprintf(f, \"    NOTE=If other code calls OS_strnlen(path, OS_MAX_PATH_LEN) without verifying the object size,\\n\");\n        fprintf(f, \"         that call may scan up to OS_MAX_PATH_LEN bytes and read beyond the actual object bounds.\\n\");\n    }\n    fprintf(f, \"    dp=%p\\n\", dp_ptr);\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    /* Log entry and the pointers we received. Do NOT dereference local_path here. */\n    OS_DirOpen_Probe(\"ENTRY: OS_DirOpen_Impl called\", token, local_path, NULL);\n\n    DIR *                          dp = opendir(local_path);\n\n    /* Log result of opendir: dp may be NULL on failure. */\n    OS_DirOpen_Probe(\"AFTER_OPENDIR: opendir returned\", token, local_path, (void *)dp);\n\n    if (dp == NULL)\n    {\n        OS_DirOpen_Probe(\"OPENDIR_FAILED: returning OS_ERROR\", token, local_path, (void *)dp);\n        return OS_ERROR;\n    }\n\n    OS_impl_dir_internal_record_t *impl;\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    OS_DirOpen_Probe(\"BEFORE_ASSIGN_IMPL: assigning impl->dp\", token, local_path, (void *)dp);\n\n    impl->dp = dp;\n\n    OS_DirOpen_Probe(\"SUCCESS: returning OS_SUCCESS\", token, local_path, (void *)dp);\n\n    return OS_SUCCESS;\n}\n"
}