{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn the UT_STUBCONTEXT_ARG_TYPE_DIRECT branch the code does Result = &ContextPtr->ArgPtr[i]; ArgPtr is declared as const void * ArgPtr[] so &ContextPtr->ArgPtr[i] has type const void ** (a pointer to the array element, i.e. a pointer to a non-const pointer). That address is being used as a const void * result (losing a level of indirection and referring to an object that itself is not const-qualified). Because the pointer produced points at a non-const-qualified object (the ArgPtr element) instead of a const-qualified target, this violates MISRA C 2023 Rule 8.13. Note also that there is an incompatible pointer type/implicit conversion (const void ** -> const void *) in this assignment.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Hook_GetArgPtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Hook_GetArgPtr:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n</target_code>\nPlease provide the modified UT_Hook_GetArgPtr code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper: appends diagnostic information to /tmp/logs/3093.txt */\nstatic void UT_Hook_LogProbe(const UT_StubContext_t *ContextPtr,\n                             uint32 i,\n                             const UT_StubArgMetaData_t *MetaPtr,\n                             const char *stage,\n                             const void *ResultCandidate,\n                             const char *Name,\n                             size_t ExpectedTypeSize)\n{\n    FILE *fp = fopen(\"/tmp/logs/3093.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"[UT_Hook_GetArgPtr] stage=%s Context=%p i=%lu Name=%s ExpectedTypeSize=%lu\\n\",\n            stage,\n            (const void *)ContextPtr,\n            (unsigned long)i,\n            (Name != NULL) ? Name : \"(null)\",\n            (unsigned long)ExpectedTypeSize);\n\n    if (MetaPtr != NULL)\n    {\n        fprintf(fp, \"  MetaPtr=%p Meta.Name=%s Meta.Size=%lu Meta.Type=%u\\n\",\n                (const void *)MetaPtr,\n                (MetaPtr->Name != NULL) ? MetaPtr->Name : \"(null)\",\n                (unsigned long)MetaPtr->Size,\n                (unsigned)MetaPtr->Type);\n    }\n    else\n    {\n        fprintf(fp, \"  MetaPtr=(null)\\n\");\n    }\n\n    if (ContextPtr != NULL && i < ContextPtr->ArgCount)\n    {\n        /* Print the stored pointer value for this argument slot and the address of that slot */\n        fprintf(fp, \"  ArgPtr[%lu] value=%p address_of_slot=%p\\n\",\n                (unsigned long)i,\n                (const void *)ContextPtr->ArgPtr[i],\n                (const void *)&ContextPtr->ArgPtr[i]);\n    }\n\n    if (ResultCandidate != NULL)\n    {\n        fprintf(fp, \"  ResultCandidate=%p\\n\", ResultCandidate);\n    }\n    else\n    {\n        fprintf(fp, \"  ResultCandidate=(null)\\n\");\n    }\n\n    fclose(fp);\n}\n\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    UT_Hook_LogProbe(ContextPtr, 0, NULL, \"entry\", NULL, Name, ExpectedTypeSize);\n\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n\n        /* Log the inspected meta and argument slot for each iteration */\n        UT_Hook_LogProbe(ContextPtr, i, MetaPtr, \"iter\", NULL, Name, ExpectedTypeSize);\n\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    /* Log the direct branch and the exact pointer/address involved */\n                    UT_Hook_LogProbe(ContextPtr, i, MetaPtr, \"match_direct_before_assign\", &ContextPtr->ArgPtr[i], Name, ExpectedTypeSize);\n\n                    Result = &ContextPtr->ArgPtr[i];\n\n                    UT_Hook_LogProbe(ContextPtr, i, MetaPtr, \"match_direct_after_assign\", Result, Name, ExpectedTypeSize);\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    /* Log the indirect branch and the pointer value returned */\n                    UT_Hook_LogProbe(ContextPtr, i, MetaPtr, \"match_indirect_before_assign\", ContextPtr->ArgPtr[i], Name, ExpectedTypeSize);\n\n                    Result = ContextPtr->ArgPtr[i];\n\n                    UT_Hook_LogProbe(ContextPtr, i, MetaPtr, \"match_indirect_after_assign\", Result, Name, ExpectedTypeSize);\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UT_Hook_LogProbe(ContextPtr, (uint32)-1, NULL, \"no_result_before_assert\", Result, Name, ExpectedTypeSize);\n\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n            UT_Hook_LogProbe(ContextPtr, (uint32)-1, NULL, \"using_default_zero_value\", Result, Name, ExpectedTypeSize);\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UT_Hook_LogProbe(ContextPtr, (uint32)-1, NULL, \"abort_no_value\", Result, Name, ExpectedTypeSize);\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    UT_Hook_LogProbe(ContextPtr, 0, NULL, \"exit\", Result, Name, ExpectedTypeSize);\n\n    return Result;\n}\n"
}