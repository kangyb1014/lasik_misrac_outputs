{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nMetaPtr->Name = Name stores the pointer to the input string rather than copying its contents. If the supplied Name does not refer to a valid null-terminated object that remains alive for the lifetime of the stub metadata, later calls to string.h functions (e.g. strcmp(MetaPtr->Name, Name) or the while(*MetaPtr->Name) loop) can read past the bounds of the object. Example violating scenario: the caller passes a pointer to a stack buffer (char buf[] = \"x\";) or a non-null-terminated substring; UT_Stub_RegisterContextWithMetaData returns, the stack buffer goes out of scope, and later UT_Hook_GetArgPtr calls strcmp on MetaPtr->Name \u2014 strcmp will dereference an invalid pointer and may access beyond object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Hook_GetArgPtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3099.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Hook_GetArgPtr:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n</target_code>\nPlease provide the modified UT_Hook_GetArgPtr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append messages to /tmp/logs/3099.txt */\nstatic void UT_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3099.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_C_SOURCE)\n    localtime_r(&t, &tm_buf);\n    fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \", tm_buf.tm_year + 1900, tm_buf.tm_mon + 1,\n            tm_buf.tm_mday, tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n#else\n    {\n        struct tm *lt = localtime(&t);\n        if (lt != NULL)\n        {\n            fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \", lt->tm_year + 1900, lt->tm_mon + 1,\n                    lt->tm_mday, lt->tm_hour, lt->tm_min, lt->tm_sec);\n        }\n    }\n#endif\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    /* Log entry and key parameters */\n    UT_Probe_Log(\"ENTER UT_Hook_GetArgPtr: ContextPtr=%p, Name=%p, ExpectedTypeSize=%lu, ArgCount=%u\",\n                 (void *)ContextPtr, (void *)Name, (unsigned long)ExpectedTypeSize,\n                 (unsigned)ContextPtr->ArgCount);\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n\n        /* Log iteration-specific state without dereferencing string pointers */\n        UT_Probe_Log(\"iter=%u: MetaPtr=%p, MetaPtr->Name=%p, Name=%p, MetaPtr->Size=%lu, ExpectedTypeSize=%lu, MetaPtr->Type=%u\",\n                     (unsigned)i, (void *)MetaPtr, (void *)MetaPtr->Name, (void *)Name,\n                     (unsigned long)MetaPtr->Size, (unsigned long)ExpectedTypeSize,\n                     (unsigned)MetaPtr->Type);\n\n        if (MetaPtr->Name != NULL)\n        {\n            /* Perform strcmp as in original logic but capture result for logging */\n            int cmp_result = strcmp(MetaPtr->Name, Name);\n\n            UT_Probe_Log(\"strcmp(MetaPtr->Name=%p, Name=%p) -> %d\",\n                         (void *)MetaPtr->Name, (void *)Name, cmp_result);\n\n            if (cmp_result == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                    UT_Probe_Log(\"Matched DIRECT: returning &ContextPtr->ArgPtr[%u] = %p\", (unsigned)i, (void *)&ContextPtr->ArgPtr[i]);\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                    UT_Probe_Log(\"Matched INDIRECT: returning ContextPtr->ArgPtr[%u] = %p\", (unsigned)i, (void *)ContextPtr->ArgPtr[i]);\n                }\n                break;\n            }\n            else\n            {\n                UT_Probe_Log(\"Name matched? %s; size match? %s\",\n                             (cmp_result == 0) ? \"yes\" : \"no\",\n                             (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize) ? \"yes\" : \"no\");\n            }\n        }\n        else\n        {\n            UT_Probe_Log(\"MetaPtr->Name is NULL for iter=%u\", (unsigned)i);\n        }\n    }\n\n    /* Log whether a result was found before assertions */\n    UT_Probe_Log(\"Search complete: Result=%p\", (void *)Result);\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UT_Probe_Log(\"No suitable result found for Name=%p (\" /* Name printed as pointer only */\n                     \") ExpectedTypeSize=%lu\", (void *)Name, (unsigned long)ExpectedTypeSize);\n\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n            UT_Probe_Log(\"Returning ARG_DEFAULT_ZERO_VALUE at %p because expected size fits\", (void *)&ARG_DEFAULT_ZERO_VALUE);\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UT_Probe_Log(\"Aborting because no value for parameter and expected size too large: %lu\", (unsigned long)ExpectedTypeSize);\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    UT_Probe_Log(\"EXIT UT_Hook_GetArgPtr: returning %p\", (void *)Result);\n    return Result;\n}\n"
}