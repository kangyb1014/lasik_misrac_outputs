{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(MetaPtr->Name, Name) without checking that the input parameter Name is non-NULL and points to a valid NUL-terminated string. Although MetaPtr->Name is guarded by MetaPtr->Name != NULL, Name is not validated; if UT_Hook_GetArgPtr is called with Name == NULL (or with a non-NUL-terminated buffer), strcmp will dereference beyond the object bounds (NULL or past the buffer), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Hook_GetArgPtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3099.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Hook_GetArgPtr:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n</target_code>\nPlease provide the modified UT_Hook_GetArgPtr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper: append messages to /tmp/logs/3099.txt. */\nstatic void UT_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3099.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    /* Entry log: do not dereference Name (it may be NULL) */\n    UT_Probe_Log(\"ENTER UT_Hook_GetArgPtr: ContextPtr=%p Name=%p ExpectedTypeSize=%zu\",\n                 (const void *)ContextPtr, (const void *)Name, ExpectedTypeSize);\n\n    Result = NULL;\n    for (i = 0; i < (ContextPtr ? ContextPtr->ArgCount : 0); ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n\n        /* Log metadata pointers and simple scalar state (do not dereference Name) */\n        UT_Probe_Log(\"LOOP i=%u MetaPtr=%p MetaPtr->Name=%p MetaPtr->Size=%zu MetaPtr->Type=%u\",\n                     (unsigned)i, (const void *)MetaPtr, (const void *)MetaPtr->Name,\n                     (size_t)(MetaPtr ? MetaPtr->Size : 0), (unsigned)(MetaPtr ? MetaPtr->Type : 0));\n\n        if (MetaPtr->Name != NULL)\n        {\n            /* Record that we are about to call strcmp with these pointers. Do NOT treat Name as a C-string here. */\n            UT_Probe_Log(\"ABOUT_TO_STRCMP MetaPtr->Name=%p Name=%p (strcmp will be invoked)\", (const void *)MetaPtr->Name,\n                         (const void *)Name);\n\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                UT_Probe_Log(\"STRCMP_MATCH at i=%u (MetaPtr->Name=%p Name=%p). Size check: Meta=%zu Expected=%zu\",\n                             (unsigned)i, (const void *)MetaPtr->Name, (const void *)Name,\n                             (size_t)MetaPtr->Size, ExpectedTypeSize);\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                    UT_Probe_Log(\"ASSIGN Result (DIRECT)=%p from &ArgPtr[%u]\", Result, (unsigned)i);\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                    UT_Probe_Log(\"ASSIGN Result (INDIRECT)=%p from ArgPtr[%u]\", Result, (unsigned)i);\n                }\n                break;\n            }\n            else\n            {\n                UT_Probe_Log(\"NO_MATCH at i=%u after strcmp or size check (MetaPtr->Name=%p Name=%p)\", (unsigned)i,\n                             (const void *)MetaPtr->Name, (const void *)Name);\n            }\n        }\n        else\n        {\n            UT_Probe_Log(\"MetaPtr->Name is NULL at i=%u; skipping strcmp\", (unsigned)i);\n        }\n    }\n\n    UT_Probe_Log(\"POST_LOOP Result=%p\", Result);\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UT_Probe_Log(\"RESULT_NULL: calling UtAssert_Failed with Name=%p ExpectedTypeSize=%zu\",\n                     (const void *)Name, ExpectedTypeSize);\n\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n            UT_Probe_Log(\"FALLBACK: returning address of ARG_DEFAULT_ZERO_VALUE=%p\", Result);\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UT_Probe_Log(\"ABORTING via UtAssert_Abort: no value for parameter (Name=%p)\", (const void *)Name);\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    UT_Probe_Log(\"EXIT UT_Hook_GetArgPtr: returning Result=%p\", Result);\n\n    return Result;\n}\n"
}