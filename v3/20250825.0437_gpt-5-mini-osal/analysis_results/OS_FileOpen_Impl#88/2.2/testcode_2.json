{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_IMPL_REGULAR_FILE_FLAGS is a compile-time constant with value 0 (or otherwise evaluates to 0 at runtime), the statement 'os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;' has no effect \u2014 removing it would not change program behaviour. In that situation the operation is executed but redundant and therefore constitutes dead code, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/882.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: appends structured runtime information to /tmp/logs/882.txt.\n * Implemented as a static function so it does not change linkage or behavior.\n */\nstatic void OS_FileOpen_Impl_probe(const OS_object_token_t *token, const char *local_path,\n                                   int32 flags, int32 access_mode,\n                                   int os_perm_before, int os_perm_after,\n                                   int fd, int selectable, const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/882.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_FileOpen_Impl probe: token=%p path=\\\"%s\\\" flags=%d access_mode=%d \"\n                   \"os_perm_before=0x%X os_perm_after=0x%X fd=%d selectable=%d note=\\\"%s\\\"\\n\",\n                (void *)token,\n                (local_path != NULL) ? local_path : \"(null)\",\n                (int)flags,\n                (int)access_mode,\n                (unsigned int)os_perm_before,\n                (unsigned int)os_perm_after,\n                fd,\n                selectable,\n                (note != NULL) ? note : \"(null)\");\n        fclose(f);\n    }\n}\n\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    /* Log state after resolving access_mode */\n    OS_FileOpen_Impl_probe(token, local_path, flags, access_mode, os_perm, os_perm, -1, 0, \"after_access_mode\");\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    /* Log state after handling CREATE/TRUNCATE flags */\n    OS_FileOpen_Impl_probe(token, local_path, flags, access_mode, /*before*/ os_perm, /*after*/ os_perm, -1, 0, \"after_create_truncate\");\n\n    /* Capture value before applying OS_IMPL_REGULAR_FILE_FLAGS so we can detect no-op */\n    {\n        int os_perm_pre_impl_flags = os_perm;\n        int impl_flags_value = (int)OS_IMPL_REGULAR_FILE_FLAGS; /* may be compile-time constant */\n\n        /* Log the value that will be ORed in */\n        {\n            char notebuf[64];\n            snprintf(notebuf, sizeof(notebuf), \"impl_flags_value=0x%X\", impl_flags_value);\n            OS_FileOpen_Impl_probe(token, local_path, flags, access_mode, os_perm_pre_impl_flags, os_perm_pre_impl_flags, -1, 0, notebuf);\n        }\n\n        os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n        /* Log result and indicate if it changed */\n        if (os_perm == os_perm_pre_impl_flags)\n        {\n            OS_FileOpen_Impl_probe(token, local_path, flags, access_mode, os_perm_pre_impl_flags, os_perm, -1, 0, \"after_impl_flags (UNCHANGED)\");\n        }\n        else\n        {\n            OS_FileOpen_Impl_probe(token, local_path, flags, access_mode, os_perm_pre_impl_flags, os_perm, -1, 0, \"after_impl_flags (CHANGED)\");\n        }\n    }\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        /* Log failure details */\n        OS_FileOpen_Impl_probe(token, local_path, flags, access_mode, os_perm, os_perm, impl->fd, 0, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    /* Log final state */\n    OS_FileOpen_Impl_probe(token, local_path, flags, access_mode, os_perm, os_perm, impl->fd, impl->selectable, \"final_state\");\n\n    return OS_SUCCESS;\n}\n"
}