{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) can read up to OS_MAX_PATH_LEN bytes from VirtualPath. If VirtualPath points to an object smaller than OS_MAX_PATH_LEN and there is no NUL byte within the first OS_MAX_PATH_LEN bytes (for example, a 10-byte buffer without a terminator but OS_MAX_PATH_LEN == 64), the underlying strnlen implementation will access memory beyond the bounds of the object. This is a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/889.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe/logging helper - writes a single line message to /tmp/logs/889.txt */\nstatic void fileopen_probe(const char *stage, const void *token_ptr, const void *path_ptr,\n                           int flags, int access_mode, int os_perm, int fd_val, int err_val)\n{\n    char buf[512];\n    int n = 0;\n    int lf;\n\n    /* Format a compact single-line log message. Do NOT print the path contents (%s)\n       to avoid reading beyond the caller-provided buffer. Print pointer values instead. */\n    n = snprintf(buf, sizeof(buf),\n                 \"STAGE=%s token=%p path=%p flags=0x%08x access_mode=%d os_perm=0x%08x fd=%d errno=%d\\n\",\n                 stage,\n                 token_ptr,\n                 path_ptr,\n                 (unsigned)flags,\n                 access_mode,\n                 (unsigned)os_perm,\n                 fd_val,\n                 err_val);\n\n    if (n <= 0)\n    {\n        return;\n    }\n    if (n >= (int)sizeof(buf))\n    {\n        n = (int)sizeof(buf) - 1;\n    }\n\n    lf = open(\"/tmp/logs/889.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (lf >= 0)\n    {\n        ssize_t w = write(lf, buf, (size_t)n);\n        (void)w; /* ignore write errors for probe logging */\n        close(lf);\n    }\n}\n\nint32_t OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32_t flags, int32_t access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Probe: entry with parameter pointers and values */\n    fileopen_probe(\"ENTRY\", (const void *)token, (const void *)local_path,\n                   (int)flags, (int)access_mode, 0, -1, 0);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            /* Probe: invalid access_mode branch */\n            fileopen_probe(\"INVALID_ACCESS_MODE\", (const void *)token, (const void *)local_path,\n                           (int)flags, (int)access_mode, 0, -1, 0);\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    /* Probe: before calling open */\n    fileopen_probe(\"BEFORE_OPEN\", (const void *)token, (const void *)local_path,\n                   (int)flags, (int)access_mode, os_perm, -1, 0);\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        /* Log the failure with errno so the reproducer can see the error code */\n        fileopen_probe(\"OPEN_FAILED\", (const void *)token, (const void *)local_path,\n                       (int)flags, (int)access_mode, os_perm, impl->fd, errno);\n\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /* Probe: open succeeded */\n    fileopen_probe(\"OPEN_SUCCESS\", (const void *)token, (const void *)local_path,\n                   (int)flags, (int)access_mode, os_perm, impl->fd, 0);\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    /* Probe: final state before return */\n    fileopen_probe(\"EXIT\", (const void *)token, (const void *)local_path,\n                   (int)flags, (int)access_mode, os_perm, impl->fd, 0);\n\n    return OS_SUCCESS;\n}\n"
}