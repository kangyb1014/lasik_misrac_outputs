{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nAlthough the pointer increment itself is a simple pointer arithmetic and not a string.h call, it is used as the pointer argument to memchr(name_ptr, 0, OS_MAX_FILE_NAME) immediately afterwards. If the remaining bytes from name_ptr to the end of the VirtualPath object are fewer than OS_MAX_FILE_NAME, memchr will attempt to read beyond the bounds of the VirtualPath buffer. Concretely: if strrchr returned the index p of '/' and name_ptr = &VirtualPath[p+1], and (OS_MAX_FILE_NAME > (VirtPathLen - (p+1) + 1)), then memchr will access bytes past the end of VirtualPath, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/889.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpen_Impl code.\n",
  "test_code": "int32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Helper probes - keep static to limit external visibility */\n    static void probe_log(const char *fmt, ...)\n    {\n        FILE *fp = fopen(\"/tmp/logs/889.txt\", \"a\");\n        if (fp == NULL)\n        {\n            return;\n        }\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(fp, fmt, ap);\n        va_end(ap);\n        fclose(fp);\n    }\n\n    /* Safe bounded strlen to avoid reads past an unexpected buffer */\n    static size_t safe_strnlen(const char *s, size_t maxlen)\n    {\n        size_t i = 0;\n        if (s == NULL)\n            return 0;\n        for (i = 0; i < maxlen && s[i] != '\\0'; ++i)\n        {\n            /* nothing */\n        }\n        return i;\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log entry and basic parameters */\n    probe_log(\"OS_FileOpen_Impl ENTER token=%p impl=%p local_path=%p flags=0x%08x access_mode=%d\\n\",\n              (const void *)token, (const void *)impl, (const void *)local_path, (unsigned)flags, (int)access_mode);\n\n    if (local_path != NULL)\n    {\n        /* Measure the local_path length with an explicit upper bound to prevent over-reads */\n        const size_t MAX_SCAN = 4096;\n        size_t len = safe_strnlen(local_path, MAX_SCAN);\n        size_t print_len = (len > 256) ? 256 : len; /* limit printed data */\n\n        probe_log(\"  local_path (len=%zu) first-%zu-chars='%.*s'\\n\", len, print_len, (int)print_len, local_path);\n\n        /* Find last '/' position safely within the measured length */\n        ssize_t last_slash = -1;\n        for (size_t i = 0; i < len; ++i)\n        {\n            if (local_path[i] == '/')\n            {\n                last_slash = (ssize_t)i;\n            }\n        }\n\n        if (last_slash >= 0)\n        {\n            /* remaining_bytes: number of bytes from name_ptr (p+1) including terminating '\\0' */\n            size_t remaining_bytes = len - (size_t)last_slash; /* equals (len - last_slash) -> includes null when counting as len+1 - (last_slash+1) */\n            const char *name_ptr = local_path + (last_slash + 1);\n\n            probe_log(\"  last_slash_index=%zd name_ptr=%p name_ptr_preview='%.*s' remaining_bytes_including_null=%zu\\n\",\n                      last_slash, (const void *)name_ptr, (int)((remaining_bytes > 128) ? 128 : remaining_bytes), name_ptr, remaining_bytes);\n\n            probe_log(\"  NOTE: If any subsequent memchr/memcpy/memmove uses a fixed length > %zu starting at name_ptr, it may read past the end of the local_path buffer.\\n\",\n                      remaining_bytes);\n        }\n        else\n        {\n            /* No slash found: name_ptr would be local_path */\n            size_t remaining_bytes = len + 1; /* include terminating '\\0' */\n            probe_log(\"  no slash found; name_ptr == local_path (%p) remaining_bytes_including_null=%zu\\n\",\n                      (const void *)local_path, remaining_bytes);\n            probe_log(\"  NOTE: If any subsequent memchr/memcpy/memmove uses a fixed length > %zu starting at local_path, it may read past the end of the buffer.\\n\",\n                      remaining_bytes);\n        }\n    }\n    else\n    {\n        probe_log(\"  local_path == NULL\\n\");\n    }\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            probe_log(\"OS_FileOpen_Impl EXIT early: invalid access_mode=%d\\n\", (int)access_mode);\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n        probe_log(\"  flag: CREATE set\\n\");\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n        probe_log(\"  flag: TRUNCATE set\\n\");\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    probe_log(\"  calling open(local_path=%p, os_perm=0x%08x, os_mode=0%o)\\n\", (const void *)local_path, (unsigned)os_perm, os_mode);\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        probe_log(\"  open(%p) failed: errno=%d (%s)\\n\", (const void *)local_path, errno, strerror(errno));\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    probe_log(\"  open succeeded, fd=%d\\n\", impl->fd);\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    probe_log(\"OS_FileOpen_Impl EXIT success impl=%p fd=%d selectable=%d\\n\", (const void *)impl, impl->fd, impl->selectable);\n\n    return OS_SUCCESS;\n}\n"
}