{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe while loop uses the invariant controlling expression \"true\" (while (true)) but is not intended as an unconditional infinite loop \u2014 it relies on internal break conditions (ObjectCount == 0 || TryCount > 4) to exit. This does not fall under the allowed exception for invariants used to create infinite loops, so Rule 14.3 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Teardown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Teardown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Teardown:\n```c\nvoid OS_API_Teardown(void)\n{\n    /*\n     * This should delete any remaining user-created objects/tasks\n     */\n    OS_DeleteAllObjects();\n\n    /*\n     * This should cause the \"internal\" objects (e.g. console utility task)\n     * to exit, and will prevent any new objects from being created.\n     */\n    OS_ApplicationShutdown(true);\n}\n```\n</target_code>\nPlease provide the modified OS_API_Teardown code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <time.h>\n#include <sys/stat.h>\n\n/* Forward declarations to preserve original linkage and allow standalone compilation */\nextern void OS_DeleteAllObjects(void);\nextern void OS_ApplicationShutdown(bool shutdown);\n\nvoid OS_API_Teardown(void)\n{\n    /* Ensure log directory exists; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *log = fopen(\"/tmp/logs/1255.txt\", \"a\");\n    if (log != NULL)\n    {\n        time_t now = time(NULL);\n        fprintf(log, \"\\n===== OS_API_Teardown ENTRY: %ld =====\\n\", (long)now);\n        fflush(log);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_API_Teardown: Calling OS_DeleteAllObjects()\\n\");\n        fflush(log);\n    }\n\n    /* preserve original behavior */\n    OS_DeleteAllObjects();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_API_Teardown: Returned from OS_DeleteAllObjects()\\n\");\n        fflush(log);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_API_Teardown: Calling OS_ApplicationShutdown(true)\\n\");\n        fflush(log);\n    }\n\n    /* preserve original behavior */\n    OS_ApplicationShutdown(true);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_API_Teardown: Returned from OS_ApplicationShutdown(true)\\n\");\n        fprintf(log, \"===== OS_API_Teardown EXIT =====\\n\");\n        fclose(log);\n    }\n}\n"
}