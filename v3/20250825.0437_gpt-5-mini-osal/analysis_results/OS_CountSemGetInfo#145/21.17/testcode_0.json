{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1) can read up to (sizeof(count_prop->name)-1) bytes from record->name_entry. If record->name_entry does not have at least that many addressable bytes (for example, record->name_entry is char name_entry[8] but OS_MAX_API_NAME is 16, or record->name_entry is a pointer to a shorter/unterminated buffer), strncpy may read beyond the bounds of record->name_entry and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1459.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper - writes control flow and state to /tmp/logs/1459.txt */\nstatic void OS_CountSemGetInfo_Log(const char *stage,\n                                   osal_id_t sem_id,\n                                   OS_count_sem_prop_t *count_prop,\n                                   OS_common_record_t *record,\n                                   const OS_object_token_t *token,\n                                   int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1459.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log basic call/site information */\n        fprintf(f, \"[OS_CountSemGetInfo] %s: sem_id=%lu count_prop=%p return_code=%ld\\n\",\n                stage,\n                (unsigned long)sem_id,\n                (void *)count_prop,\n                (long)return_code);\n\n        /* Log token and record pointers and sizes used for strncpy call. Do not dereference name buffer contents. */\n        fprintf(f, \"  token_ptr=%p record_ptr=%p name_entry_ptr=%p sizeof(count_prop->name)=%zu copy_len=%zu\\n\",\n                (void *)token,\n                (void *)record,\n                (void *)(record ? record->name_entry : NULL),\n                sizeof(count_prop->name),\n                (sizeof(count_prop->name) > 0 ? (sizeof(count_prop->name) - 1) : 0));\n\n        /* If record is available, log creator field (if accessible) for extra state info */\n        if (record != NULL)\n        {\n            /* Print creator in a generic way; cast to unsigned long to avoid format mismatch.\n               This only reads the creator field from the record structure itself, not the name buffer. */\n            fprintf(f, \"  record->creator=%lu\\n\", (unsigned long)record->creator);\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    /* Log entry and parameter state */\n    OS_CountSemGetInfo_Log(\"entry (after pointer check)\", sem_id, count_prop, NULL, NULL, 0);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Log after zeroing the output structure */\n    OS_CountSemGetInfo_Log(\"after memset\", sem_id, count_prop, NULL, NULL, 0);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object-id lookup */\n    OS_CountSemGetInfo_Log(\"after ObjectIdGetById\", sem_id, count_prop, NULL, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Log record and planned copy parameters before invoking strncpy (do not read source contents) */\n        OS_CountSemGetInfo_Log(\"before strncpy\", sem_id, count_prop, record, &token, return_code);\n\n        /* Original logic preserved: potential problematic strncpy left intact to reproduce scenario */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        /* Log after strncpy and field copy */\n        OS_CountSemGetInfo_Log(\"after strncpy & creator copy\", sem_id, count_prop, record, &token, return_code);\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        /* Log result of implementation call */\n        OS_CountSemGetInfo_Log(\"after Impl\", sem_id, count_prop, record, &token, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release */\n        OS_CountSemGetInfo_Log(\"after ObjectIdRelease\", sem_id, count_prop, record, &token, return_code);\n    }\n\n    /* Final return-state log */\n    OS_CountSemGetInfo_Log(\"exit\", sem_id, count_prop, (return_code == OS_SUCCESS) ? record : NULL, &token, return_code);\n\n    return return_code;\n}\n"
}