{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_CountSemGetInfo the local variable 'record' is declared as OS_common_record_t *record; but it is only used to read fields (record->name_entry and record->creator) and is never used to modify the object. Therefore it could be declared as const OS_common_record_t *record; so it should be const-qualified to satisfy MISRA C 2023 Rule 8.13. Assignment from OS_OBJECT_TABLE_GET (which yields OS_common_record_t *) to a const-qualified pointer is allowed; no writes occur through 'record'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helpers. These functions write trace logs to /tmp/logs/1453.txt\n * They are added to capture control flow and state for the reported violation\n * scenario. They do not change the logic of OS_CountSemGetInfo. */\nstatic void probe_log_message(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1453.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Log a snapshot of the record state. The record pointer is taken as const\n * because the probe only reads fields for logging and must not modify the\n * object. Passing a non-const pointer to this function implicitly converts to\n * const, which is safe. */\nstatic void probe_record_state(const void *record_ptr, const void *token_addr)\n{\n    if (record_ptr == NULL)\n    {\n        probe_log_message(\"probe_record_state: record == NULL, token_addr=%p\", token_addr);\n        return;\n    }\n\n    /* We don't depend on exact type layout here beyond the fields we read in\n     * the original function. Construct safe copies for logging. */\n    /* Note: The following accesses mirror those in OS_CountSemGetInfo and are\n     * read-only. */\n\n    /* Try to read name_entry and creator fields assuming the original type\n     * provides them at the expected offsets. This matches the usage in the\n     * original function and only performs reads. */\n    const char *name_entry = ((const char *)record_ptr);\n\n    /* Attempt to copy a reasonable amount of bytes for logging; this is a\n     * bounded read for safety. If the actual name_entry is at a different\n     * offset in the real type, this best-effort logging still avoids writes. */\n    char namebuf[64] = {0};\n    /* strncpy is used to avoid overruns; ensure NUL-termination. */\n    strncpy(namebuf, name_entry, sizeof(namebuf) - 1);\n\n    /* For creator, we cannot reliably know its offset in a generic void *.\n     * To avoid making incorrect assumptions, log that we observed a record\n     * pointer and the extracted name. The original function reads 'creator'\n     * via the real typed pointer; we intentionally avoid guessing offsets\n     * here to prevent invalid reads. */\n    probe_log_message(\"probe_record_state: token_addr=%p, record_ptr=%p, name_preview=\\\"%s\\\"\",\n                      token_addr, record_ptr, namebuf);\n}\n\n/* Original function with inserted probes. Logic preserved; only logging added. */\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    /* Log entry and parameters */\n    probe_log_message(\"OS_CountSemGetInfo: entry sem_id=%lu, count_prop=%p\",\n                      (unsigned long)sem_id, (void *)count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log_message(\"OS_CountSemGetInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Probe the record state before using it. We pass the address of\n         * the token variable so the probe can correlate the record to the\n         * token in the logs. */\n        probe_record_state((const void *)record, (const void *)&token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        probe_log_message(\"OS_CountSemGetInfo: copied name=\\\"%s\\\", creator=%u\",\n                          count_prop->name, (unsigned)count_prop->creator);\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n        probe_log_message(\"OS_CountSemGetInfo: OS_CountSemGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        probe_log_message(\"OS_CountSemGetInfo: token released\");\n    }\n\n    probe_log_message(\"OS_CountSemGetInfo: exit return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}