{
  "user_message": "Target function code is:\n```c\nint32 OS_Milli2Ticks(uint32 milli_seconds, int *ticks)\n{\n    uint64 num_of_ticks;\n    int32  return_code = OS_SUCCESS;\n\n    num_of_ticks = (((uint64)milli_seconds * OS_SharedGlobalVars.TicksPerSecond) + 999) / 1000;\n\n    /* Check against maximum int32 (limit from some OS's) */\n    if (num_of_ticks <= INT_MAX)\n    {\n        *ticks = (int)num_of_ticks;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n        *ticks      = 0;\n    }\n\n    return return_code;\n}\n```\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "uint32",
    "uint64",
    "int32",
    "OS_SharedGlobalVars",
    "OS_SharedGlobalVars.TicksPerSecond",
    "OS_SUCCESS",
    "OS_ERROR",
    "INT_MAX"
  ],
  "explanation": "To decide whether the function uses any language/compiler extensions you must inspect how the identifiers/types/macros used in the function are defined (they might themselves be implemented using compiler-specific extensions). For each symbol:\n\n- uint32, uint64, int32: These are non-standard typedef names (not the C99 uint32_t/etc. names). You need their typedef/declaration to confirm they are standard typedefs (e.g. typedef unsigned long) and not defined via compiler-specific extensions (e.g. __int64, __attribute__, builtin types or compiler-specific pragma/keywords).\n\n- OS_SharedGlobalVars: The global variable's declaration may include storage-class specifiers, compiler attributes, or be declared via macros that use extensions. You need the full definition/declaration to check for any extension usage.\n\n- OS_SharedGlobalVars.TicksPerSecond: The member's type is required to determine what arithmetic operators and promotions are actually performed and to inspect whether the member's declaration or any macros used to declare it use compiler extensions (packed/attribute/bitfield extensions, etc.).\n\n- OS_SUCCESS, OS_ERROR: These status constants may be macros or enum values. Their definitions must be checked to ensure they are not implemented using compiler-specific extensions (for example, enums with nonstandard underlying-type extensions, or macros that expand to compiler builtins or attributes).\n\n- INT_MAX: Although standard from <limits.h>, verify whether the project redefines it or provides a nonstandard replacement via macros that use extensions.\n\nCollecting the definitions (headers/typedefs/macros/structs) for these symbols is sufficient to determine whether any compiler-specific language extensions are being used by this function's referenced symbols."
}