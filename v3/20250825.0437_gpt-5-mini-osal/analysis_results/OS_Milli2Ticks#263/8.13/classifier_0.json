{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_Milli2Ticks:\n```c\nint32 OS_Milli2Ticks(uint32 milli_seconds, int *ticks)\n{\n    uint64 num_of_ticks;\n    int32  return_code = OS_SUCCESS;\n\n    num_of_ticks = (((uint64)milli_seconds * OS_SharedGlobalVars.TicksPerSecond) + 999) / 1000;\n\n    /* Check against maximum int32 (limit from some OS's) */\n    if (num_of_ticks <= INT_MAX)\n    {\n        *ticks = (int)num_of_ticks;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n        *ticks      = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_Milli2Ticks:\nextern OS_SharedGlobalVars_t OS_SharedGlobalVars\n...\ntypedef int32_t   int32\n...\ntypedef uint32_t  uint32\n...\ntypedef uint64_t  uint64\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n*ticks = (int)num_of_ticks;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the pointer parameter 'ticks' is used to store the computed value via '*ticks = (int)num_of_ticks;', so it must be a pointer to a non-const int. A violation of Rule 8.13 would occur if the function only read from 'ticks' (never assigned to *ticks) yet declared it as 'int *ticks' instead of 'const int *ticks', or if the function could be rewritten to avoid modifying the pointed-to object but still used a non-const pointer."
}