{
  "user_message": "An agent A claimed that the following UtPrintx code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UtPrintx.\n```c\nvoid UtPrintx(const void *Memory, uint32 Length)\n{\n    uint32       i;\n    uint32       j;\n    const uint8 *Byte_ptr = Memory;\n    char         OutputLine[80];\n    char *       OutPtr;\n\n    i = 0;\n    while (i < Length)\n    {\n        snprintf(OutputLine, sizeof(OutputLine), \"%16lx: \", (unsigned long)&Byte_ptr[i]);\n        OutPtr = OutputLine;\n        OutPtr += strlen(OutputLine);\n        for (j = 0; j < 16 && i < Length; j++, i++)\n        {\n            sprintf(OutPtr, \"%02X  \", Byte_ptr[i]);\n            OutPtr += 3;\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_INFO, OutputLine);\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the prototype of UT_BSP_DoText is declared to take a non-const pointer (e.g. void UT_BSP_DoText(int, char *text)) and the function does not modify the text, then Rule 8.13 is violated \u2014 the parameter should be declared as const char * so that pointers which are not modified point to const-qualified types.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The UtPrintx function itself does not violate MISRA C:2023 Rule 8.13. Byte_ptr is correctly declared as const uint8 * (it points to read-only data), and OutPtr points to a mutable local buffer (OutputLine) that UtPrintx does modify, so it should not be const. The only possible 8.13 issue in the scenario is with the declaration of UT_BSP_DoText: if that function\u2019s prototype is declared as taking a non-const char * but the function does not modify the pointed-at characters, then UT_BSP_DoText\u2019s parameter should indeed be declared as const char * and that prototype would violate Rule 8.13. That is a violation in the UT_BSP_DoText declaration, not in UtPrintx. Because the report attributes the violation to UtPrintx, the report as stated is not correct."
}