{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TranslatePath the assignments \"SysMountPointLen = 0;\" and \"VirtPathBegin = VirtPathLen;\" are executed but never used: the only code that reads these variables later is inside the block guarded by \"if (return_code == OS_SUCCESS)\". That block can only be reached when OS_ObjectIdGetBySearch returned OS_SUCCESS and the found filesys has OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM set, and in that case both SysMountPointLen and VirtPathBegin are overwritten from filesys (via OS_strnlen) before any use. In all other paths where the initial values would matter the function returns or skips the final section. Thus those two assignments are operations whose removal would not affect program behaviour (dead code), violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1712.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append a log entry describing control flow and key state.\n   Writes to /tmp/logs/1712.txt. Keeps behaviour unchanged if logging fails. */\nstatic void OS_stat_log(const char *stage, const char *path, const char *local_path, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1712.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, input path, translated local path (if any) and return code */\n        fprintf(f, \"OS_stat: stage=%s, path=%s, local_path=%s, return_code=%ld\\n\",\n                stage != NULL ? stage : \"(null)\",\n                path != NULL ? path : \"(null)\",\n                local_path != NULL && local_path[0] != '\\0' ? local_path : \"(empty)\",\n                (long)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    /* Reset output structure as original logic */\n    memset(filestats, 0, sizeof(*filestats));\n\n    /* Log before attempting translation */\n    local_path[0] = '\\0';\n    OS_stat_log(\"before_translate\", path, local_path, 0);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation attempt and the local_path buffer */\n    OS_stat_log(\"after_translate\", path, local_path, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log right before delegating to the platform-specific stat implementation */\n        OS_stat_log(\"before_filestat_impl\", path, local_path, return_code);\n\n        return_code = OS_FileStat_Impl(local_path, filestats);\n\n        /* Log result of OS_FileStat_Impl */\n        OS_stat_log(\"after_filestat_impl\", path, local_path, return_code);\n    }\n\n    /* Log final return value */\n    OS_stat_log(\"return\", path, local_path, return_code);\n\n    return return_code;\n}\n"
}