{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_TranslatePath(path, local_path);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call itself does not directly invoke any <string.h> functions, so the fragment as shown does not by itself violate Rule 21.17. A violation can occur if OS_TranslatePath copies 'path' into 'local_path' using an unbounded string function (e.g. strcpy, memcpy, strcat) or otherwise does not limit the number of bytes written and 'path' can be longer than OS_MAX_LOCAL_PATH_LEN-1. Example violating scenario: OS_TranslatePath internally does strcpy(local_path, path) or memcpy(local_path, path, strlen(path)+1) without checking that strlen(path) < OS_MAX_LOCAL_PATH_LEN, allowing a buffer overflow and therefore breaching Rule 21.17."
}