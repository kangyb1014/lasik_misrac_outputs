{
  "user_message": "An agent A claimed that the following OS_ModuleGetInfo_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleGetInfo_Impl.\n```c\nint32 OS_ModuleGetInfo_Impl(const OS_object_token_t *token, OS_module_prop_t *module_prop)\n{\n    /*\n     * Limiting strictly to POSIX-defined API means there is no defined\n     * method to get information about a module contents.\n     *\n     * The \"dlinfo()\" function might return some interesting information\n     * but this is actually a non-posix extension / platform-defined API.\n     *\n     * This returns success - although there is no information to add here,\n     * the parent/shared layer information is still valid.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf OS_module_internal_record_t::file_name is declared as a non-const character array or pointer (for example: char file_name[OS_MAX_PATH] or char *file_name), this is a violation of MISRA C 2023 Rule 8.13 because the code only uses module->file_name for read-only purposes (passed to strncpy which takes a const char *). The pointer/field should be const-qualified (e.g. const char file_name[...] or const char *file_name) whenever possible. If, however, file_name is modified elsewhere and cannot be const, then no violation occurs.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleGetInfo_Impl:\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C:2023 Rule 8.13 concerns pointer declarations that could point to a const-qualified type. The code shown for OS_ModuleGetInfo_Impl only has parameters const OS_object_token_t *token and OS_module_prop_t *module_prop \u2014 these are correctly qualified and there is no pointer declared in this function that should be made const. The call in OS_ModuleInfo that passes module->file_name to strncpy is passing a source string to a function taking a const char *; passing a char[] or char * to a parameter typed const char * is allowed and does not in itself violate 8.13.\n\nThe only place a potential 8.13 issue could exist is in the declaration of OS_module_internal_record_t::file_name itself: if it is declared as char * (and it is never modified anywhere), then MISRA 8.13 would recommend declaring it const char * instead. If file_name is an array (char file_name[...]) then it is not a pointer type and rule 8.13 does not apply. Also if file_name is modified elsewhere, it must remain non-const. Based on the provided code there is no evidence of a rule 8.13 violation in OS_ModuleGetInfo_Impl, so the report is not correct."
}