{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdConvertToken the local variable 'return_code' is initialized at declaration with \"int32 return_code = OS_ERROR;\". Every control path that can reach the later uses of 'return_code' assigns it a new value before it is read (all break/return points inside the while loop set return_code, and there is an early return on invalid ID). Therefore the initial assignment to OS_ERROR is executed but has no effect on program behaviour and could be removed \u2014 i.e. it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetById code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1982.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetById:\n```c\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetById code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Probe/logging helpers: write control-flow and state information to\n * /tmp/logs/1982.txt. These helpers are lightweight and do not change\n * the logic or return values of the wrapped functions.\n */\nstatic void ensure_log_dir(void)\n{\n    struct stat st;\n    if (stat(\"/tmp/logs\", &st) != 0)\n    {\n        /* ignore errors; if mkdir fails, logging will simply not occur */\n        (void)mkdir(\"/tmp/logs\", 0755);\n    }\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/1982.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* cannot log, but must not affect program flow */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Wrapper for OS_ObjectIdConvertToken so we can capture its invocation\n * and result. This preserves the original behavior by returning the\n * exact return code from the real function.\n */\nstatic int32 probe_OS_ObjectIdConvertToken(OS_object_token_t *token)\n{\n    int32 rc;\n\n    probe_log(\"[probe] OS_ObjectIdConvertToken called: token=%p, token->obj_idx=%d, token->obj_id=%u\",\n              (void *)token,\n              (int)token->obj_idx,\n              (unsigned)token->obj_id);\n\n    rc = OS_ObjectIdConvertToken(token);\n\n    probe_log(\"[probe] OS_ObjectIdConvertToken returned: rc=%d, token=%p, token->obj_idx=%d, token->obj_id=%u\",\n              (int)rc,\n              (void *)token,\n              (int)token->obj_idx,\n              (unsigned)token->obj_id);\n\n    return rc;\n}\n\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    probe_log(\"[probe] Enter OS_ObjectIdGetById: lock_mode=%d, idtype=%d, id=%u, token=%p\",\n              (int)lock_mode,\n              (int)idtype,\n              (unsigned)id,\n              (void *)token);\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    probe_log(\"[probe] After OS_ObjectIdTransactionInit: return_code=%d\", (int)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"[probe] Early return from OS_ObjectIdGetById due to transaction init failure: return_code=%d\", (int)return_code);\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    probe_log(\"[probe] After OS_ObjectIdToArrayIndex: return_code=%d, token->obj_idx=%d\", (int)return_code, (int)token->obj_idx);\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n        probe_log(\"[probe] token->obj_id set to %u\", (unsigned)token->obj_id);\n\n        /*\n         * Call the probe wrapper so we can capture the control path and\n         * return value from the ConvertToken routine without changing behavior.\n         */\n        return_code = probe_OS_ObjectIdConvertToken(token);\n        probe_log(\"[probe] After ConvertToken (probe): return_code=%d\", (int)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"[probe] Convert or prior operation failed, invoking OS_ObjectIdTransactionCancel: return_code=%d\", (int)return_code);\n        OS_ObjectIdTransactionCancel(token);\n        probe_log(\"[probe] After OS_ObjectIdTransactionCancel\");\n    }\n\n    probe_log(\"[probe] Exit OS_ObjectIdGetById: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}