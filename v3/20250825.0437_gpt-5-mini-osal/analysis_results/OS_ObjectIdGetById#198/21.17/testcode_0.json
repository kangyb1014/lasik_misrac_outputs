{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function calls memset(token, 0, sizeof(*token)) without first validating that token is a valid non-NULL pointer. If a caller passes token == NULL (or an otherwise invalid pointer or a pointer to a smaller allocation), memset will attempt to write sizeof(*token) bytes through that pointer (e.g. writing to address 0 for NULL), producing an out-of-bounds access and undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetById code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1989.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetById:\n```c\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetById code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends human-readable trace lines to /tmp/logs/1989.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1989.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry and key input state (do not dereference token here) */\n    OS_ProbeLog(\"ENTER: OS_ObjectIdGetById lock_mode=%d idtype=%d id=%llu token=%p\",\n                (int)lock_mode, (int)idtype, (unsigned long long)id, (void *)token);\n\n    /* Call initialization routine (may perform memset on token). We log before and after to capture the scenario where token is invalid/NULL. */\n    OS_ProbeLog(\"CALL: OS_ObjectIdTransactionInit(token=%p)\", (void *)token);\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    OS_ProbeLog(\"RET  : OS_ObjectIdTransactionInit -> return_code=%d token=%p\", (int)return_code, (void *)token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ProbeLog(\"EXIT : OS_ObjectIdGetById (init failed) return %d\", (int)return_code);\n        return return_code;\n    }\n\n    OS_ProbeLog(\"CALL: OS_ObjectIdToArrayIndex(idtype=%d, id=%llu)\", (int)idtype, (unsigned long long)id);\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    OS_ProbeLog(\"RET  : OS_ObjectIdToArrayIndex -> return_code=%d token=%p\", (int)return_code, (void *)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Preserve original assignment logic */\n        token->obj_id = id;\n        OS_ProbeLog(\"ASSIGN: token->obj_idx=%d token->obj_id=%llu\", (int)token->obj_idx, (unsigned long long)token->obj_id);\n\n        OS_ProbeLog(\"CALL: OS_ObjectIdConvertToken(token=%p)\", (void *)token);\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_ProbeLog(\"RET  : OS_ObjectIdConvertToken -> return_code=%d token=%p\", (int)return_code, (void *)token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ProbeLog(\"CALL: OS_ObjectIdTransactionCancel(token=%p) due to return_code=%d\", (void *)token, (int)return_code);\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    OS_ProbeLog(\"EXIT : OS_ObjectIdGetById return %d token=%p\", (int)return_code, (void *)token);\n    return return_code;\n}\n"
}