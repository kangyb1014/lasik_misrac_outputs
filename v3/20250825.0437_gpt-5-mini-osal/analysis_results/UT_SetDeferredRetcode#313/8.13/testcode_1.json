{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if UT_ConfigureGenericStubReturnValue accepts a non-const pointer (e.g. void *value). In that case the call &Retcode yields a pointer to a non-const type being passed where a const-qualified pointer should be used (the function appears to only read the data), so Rule 8.13 is violated. To fix, the function prototype should take a pointer to const (e.g. const void * or const UT_IntReturn_t *) or the call should otherwise ensure the pointed-to type is const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDeferredRetcode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDeferredRetcode:\n```c\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDeferredRetcode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logger: records control flow and state to /tmp/logs/3133.txt\n * The pointer parameter is const-qualified to avoid introducing new non-const pointer violations. */\nstatic void UT_LogDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, const UT_IntReturn_t *RetcodePtr, size_t size)\n{\n    FILE *f = fopen(\"/tmp/logs/3133.txt\", \"a\");\n    if (f)\n    {\n        /* Log key pieces of state so other agents can reproduce the scenario */\n        fprintf(f, \"UT_SetDeferredRetcode called:\\n\");\n        /* FuncKey may be an integer or pointer type; print as uintptr for best effort */\n        fprintf(f, \"  FuncKey=0x%\" PRIxPTR \"\\n\", (uintptr_t)FuncKey);\n        fprintf(f, \"  Count=%ld\\n\", (long)Count);\n        fprintf(f, \"  Retcode_addr=%p\\n\", (const void *)RetcodePtr);\n        /* Print the value; cast to long for a generic integer representation */\n        fprintf(f, \"  Retcode_value=%ld\\n\", (long)(*RetcodePtr));\n        fprintf(f, \"  Retcode_size=%zu\\n\", size);\n        fprintf(f, \"  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\\n\");\n        fprintf(f, \"------------------------------------------------------------\\n\");\n        fclose(f);\n    }\n}\n\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        /* Log state before making the call that is reported to violate MISRA C 2023 Rule 8.13. */\n        UT_LogDeferredRetcode(FuncKey, Count, &Retcode, sizeof(Retcode));\n\n        /* Original logic preserved: pass address of Retcode (non-const) to the generic stub return configurator. */\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n"
}