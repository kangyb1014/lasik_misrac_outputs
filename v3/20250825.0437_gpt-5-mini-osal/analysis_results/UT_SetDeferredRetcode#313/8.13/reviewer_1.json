{
  "user_message": "An agent A claimed that the following UT_SetDeferredRetcode code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UT_SetDeferredRetcode.\n```c\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if UT_ConfigureGenericStubReturnValue accepts a non-const pointer (e.g. void *value). In that case the call &Retcode yields a pointer to a non-const type being passed where a const-qualified pointer should be used (the function appears to only read the data), so Rule 8.13 is violated. To fix, the function prototype should take a pointer to const (e.g. const void * or const UT_IntReturn_t *) or the call should otherwise ensure the pointed-to type is const-qualified.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nUT_SetDeferredRetcode called:\n  FuncKey=0x55cfeacdb22e\n  Count=2\n  Retcode_addr=0x7ffc8f07cd38\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x55cfeacd853f\n  Count=1\n  Retcode_addr=0x7ffc8f07cd38\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x5572ff1135cc\n  Count=1\n  Retcode_addr=0x7ffe65b96728\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x5644f3c19f6f\n  Count=2\n  Retcode_addr=0x7fffee8c6388\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x5644f3c15ac3\n  Count=1\n  Retcode_addr=0x7fffee8c6388\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x5618bf8689b6\n  Count=1\n  Retcode_addr=0x7fffc9692518\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x5618bf86dc16\n  Count=1\n  Retcode_addr=0x7fffc9692518\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x5618bf86d7b8\n  Count=1\n  Retcode_addr=0x7fffc9692518\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x55bd94d6e7f4\n  Count=1\n  Retcode_addr=0x7fffe31ef1f8\n  Retcode_value=-4\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x55bd94d6e7f4\n  Count=1\n  Retcode_addr=0x7fffe31ef1f8\n  Retcode_value=-4\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x56509c6e0479\n  Count=1\n  Retcode_addr=0x7ffe8b07fb28\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x56509c6e0479\n  Count=1\n  Retcode_addr=0x7ffe8b07fb28\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x56509c6e0479\n  Count=1\n  Retcode_addr=0x7ffe8b07fb28\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to UT_ConfigureGenericStubReturnValue is the address above (non-const in the call site)\n------------------------------------------------------------\nUT_SetDeferredRetcode called:\n  FuncKey=0x56509c6e079e\n  Count=1\n  Retcode_addr=0x7ffe8b07fb28\n  Retcode_value=-1\n  Retcode_size=8\n  Note: pointer passed to \n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C:2023 Rule 8.13 is about how pointer types are declared \u2014 pointers should point to const-qualified types when that is feasible. In the code shown, UT_SetDeferredRetcode does not declare any pointer parameter or pointer object whose type could/should be const-qualified; it merely takes the address of a local object (&Retcode) and passes it to another function. If there is a violation, it would be in the declaration of UT_ConfigureGenericStubReturnValue (i.e. its parameter should be declared const void * or const UT_IntReturn_t * if the function only reads the data). The caller itself does not violate 8.13. Therefore Agent A's claim that UT_SetDeferredRetcode violates Rule 8.13 is incorrect."
}