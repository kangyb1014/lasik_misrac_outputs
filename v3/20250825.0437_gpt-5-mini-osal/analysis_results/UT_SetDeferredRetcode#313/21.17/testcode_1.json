{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The assignment StubPtr->Data.Rvc.ActualSz = ValueSize sets the stored size without any bounds checking. Later, for non-opaque genres the code calls UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre), which typically uses memcpy/memmove to copy ValueSize bytes into the internal buffer. If ValueSize is larger than the destination buffer in StubPtr->Data.Rvc.Buf (or larger than the actual object pointed to by ValuePtr), the subsequent string.h-based copy will access beyond object bounds. Example: ValueGenre != UT_ValueGenre_OPAQUE, ValuePtr points to a small buffer but ValueSize is larger than Buf capacity \u2014 memcpy(ValuePtr, Buf, ValueSize) would overflow and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDeferredRetcode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3139.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDeferredRetcode:\n```c\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDeferredRetcode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <unistd.h>\n\n/* Probe logging helper: append logs to /tmp/logs/3139.txt */\nstatic void UT_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3139.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        pid_t pid = getpid();\n\n        fprintf(f, \"[%ld] PID:%d \", (long)t, (int)pid);\n\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* Log entry and parameters */\n    UT_Probe_Log(\"Entered UT_SetDeferredRetcode: FuncKey=%\" PRIuPTR \", Count=%ld, Retcode_size=%zu\",\n                 (uintptr_t)FuncKey, (long)Count, sizeof(Retcode));\n\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UT_Probe_Log(\"Invalid Count (%ld) passed to UT_SetDeferredRetcode - invoking UtAssert_Failed\", (long)Count);\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_Probe_Log(\"About to call UT_ConfigureGenericStubReturnValue: FuncKey=%\" PRIuPTR \", Retcode(@%p) size=%zu, Genre=INTEGER, Count=%ld\",\n                     (uintptr_t)FuncKey, (const void *)&Retcode, sizeof(Retcode), (long)Count);\n\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n\n        UT_Probe_Log(\"Returned from UT_ConfigureGenericStubReturnValue: FuncKey=%\" PRIuPTR \", Count=%ld\",\n                     (uintptr_t)FuncKey, (long)Count);\n    }\n}\n"
}