{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code stores the TypeName pointer directly into the stub table (StubPtr->Data.Rvc.TypeName = TypeName) without copying it. If the caller passes a pointer to a temporary/stack buffer or to a non-null-terminated buffer, and later code uses a <string.h> routine (e.g. strlen, strcpy, strcat, strcmp) on StubPtr->Data.Rvc.TypeName, that string function can access beyond the lifetime or bounds of the original object and therefore violate MISRA C 2023 Rule 21.17. For example: a caller creates a local char name[16]; fills it; calls UT_SetDeferredRetcode(..., name); the local name goes out of scope; later code calls strlen(StubPtr->Data.Rvc.TypeName) \u2014 this may read out-of-bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDeferredRetcode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3139.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDeferredRetcode:\n```c\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDeferredRetcode code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <sys/stat.h>\n#include <stdint.h>\n\n/* External functions/types are defined elsewhere in the project. */\nextern void UtAssert_Failed(const char *Spec, ...);\nextern void UT_ConfigureGenericStubReturnValue(void *FuncKey, const void *ValuePtr, size_t ValueSize, int ValueGenre, int Count, const char *TypeName);\n\n/* Keep the same typedef names used by the original code. These are expected\n   to be provided by the wider test framework/build. We only refer to them\n   in the function signature below so the original code compiles in context. */\n\n/* Probe/logger utility: append log entries to /tmp/logs/3139.txt. */\nstatic void UT_LogProbe(const char *stage, void *funcKey, long count, const void *valuePtr, long long valueVal)\n{\n    FILE *f = NULL;\n    time_t t = time(NULL);\n    /* Ensure the directory exists; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/3139.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    /* Write timestamp, pid, thread id, the stage, and key state information. */\n    fprintf(f, \"[%ld] PID=%d TID=%llu STAGE=%s FuncKey=0x%0llx Count=%ld ValuePtr=%p ValueVal=%lld\\n\",\n            (long)t,\n            (int)getpid(),\n            (unsigned long long)(uintptr_t)pthread_self(),\n            stage,\n            (unsigned long long)(uintptr_t)funcKey,\n            count,\n            valuePtr,\n            valueVal);\n    fclose(f);\n}\n\n/* Modified UT_SetDeferredRetcode with lightweight probes inserted.\n   The original control flow and behavior are preserved. */\nvoid UT_SetDeferredRetcode(void *FuncKey, int32_t Count, long long Retcode)\n{\n    /* Log entry with initial parameter state */\n    UT_LogProbe(\"ENTRY\", FuncKey, (long)Count, &Retcode, (long long)Retcode);\n\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        /* Log the failure path before asserting */\n        UT_LogProbe(\"INVALID_COUNT\", FuncKey, (long)Count, &Retcode, (long long)Retcode);\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        /* Log before calling the underlying configuration helper. */\n        UT_LogProbe(\"BEFORE_CONFIGURE\", FuncKey, (long)Count, &Retcode, (long long)Retcode);\n\n        /* Preserve original logic: configure the stub to return the specified value.\n           Note: The signature of UT_ConfigureGenericStubReturnValue is external to this\n           translation unit; we call it with the same parameters as the original code. */\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n\n        /* Log after the configuration call so callers can correlate the event. */\n        UT_LogProbe(\"AFTER_CONFIGURE\", FuncKey, (long)Count, &Retcode, (long long)Retcode);\n    }\n\n    /* Log exit */\n    UT_LogProbe(\"EXIT\", FuncKey, (long)Count, &Retcode, (long long)Retcode);\n}\n"
}