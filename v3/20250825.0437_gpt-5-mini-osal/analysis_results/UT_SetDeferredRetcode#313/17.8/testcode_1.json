{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe address of the parameter Retcode is passed to UT_ConfigureGenericStubReturnValue. If that callee has a non-const pointer parameter and writes to the pointed object (e.g. copies into or modifies it), it will modify the function parameter Retcode inside UT_SetDeferredRetcode, which violates MISRA C 2023 Rule 17.8. To avoid the violation the code must ensure the callee does not modify the pointed object (use a const pointer) or pass a separate local copy instead of &Retcode.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDeferredRetcode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3137.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDeferredRetcode:\n```c\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDeferredRetcode code.\n",
  "test_code": "#include <stdio.h>\n\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* Log entry and parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/3137.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: UT_SetDeferredRetcode: FuncKey=%ld, Count=%ld, Retcode(before)=%ld, &Retcode=%p, sizeof(Retcode)=%zu\\n\",\n                    (long)FuncKey, (long)Count, (long)Retcode, (void *)&Retcode, sizeof(Retcode));\n            fclose(log);\n        }\n    }\n\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        FILE *log = fopen(\"/tmp/logs/3137.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"BRANCH: Count <= 0 (%ld). Calling UtAssert_Failed.\\n\", (long)Count);\n            fclose(log);\n        }\n\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        /* Log right before calling the callee that receives &Retcode */\n        {\n            FILE *log = fopen(\"/tmp/logs/3137.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"BEFORE_CALL: UT_ConfigureGenericStubReturnValue(FuncKey=%ld, &Retcode=%p, sizeof=%zu, Count=%ld) - Retcode=%ld\\n\",\n                        (long)FuncKey, (void *)&Retcode, sizeof(Retcode), (long)Count, (long)Retcode);\n                fclose(log);\n            }\n        }\n\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n\n        /* Log right after the call to detect if the callee modified the pointed-to object */\n        {\n            FILE *log = fopen(\"/tmp/logs/3137.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"AFTER_CALL: UT_ConfigureGenericStubReturnValue returned. Retcode(after)=%ld, &Retcode=%p\\n\",\n                        (long)Retcode, (void *)&Retcode);\n                fclose(log);\n            }\n        }\n    }\n}\n"
}