{
  "user_message": "An agent A claimed that the following OS_FdSet_ConvertIn_Impl code violates the MISRA C 2023 rule 14.3.\n<misra_rule>\nMISRA C 2023 Rule 14.3 is Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FdSet_ConvertIn_Impl.\n```c\nstatic int32 OS_FdSet_ConvertIn_Impl(int *os_maxfd, fd_set *os_set, const OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n    int32        status;\n\n    status = OS_SUCCESS;\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd >= 0)\n                {\n                    if (osfd >= FD_SETSIZE || !OS_impl_filehandle_table[id].selectable)\n                    {\n                        /* out of range of select() implementation */\n                        status = OS_ERR_OPERATION_NOT_SUPPORTED;\n                    }\n                    else\n                    {\n                        FD_SET(osfd, os_set);\n                        if (osfd > *os_maxfd)\n                        {\n                            *os_maxfd = osfd;\n                        }\n                    }\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    return status;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for-loop controlling expression uses sizeof(OSAL_set->object_ids):\nfor (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n\nThe value of sizeof(OSAL_set->object_ids) is invariant (a compile-time size of the array member) and does not change during loop execution. This makes the loop's controlling expression invariant and therefore violates MISRA C 2023 Rule 14.3. Neither exception (an intentional infinite loop, nor the allowed do-while constant-false case) applies here.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nOS_FdSet_ConvertIn_Impl ENTER: sizeof(OSAL_set->object_ids)=7\nfor-loop offset start: offset=0\n  initial objids (byte) = 0x00\nfor-loop offset end: offset=0\nfor-loop offset start: offset=1\n  initial objids (byte) = 0x00\nfor-loop offset end: offset=1\nfor-loop offset start: offset=2\n  initial objids (byte) = 0x00\nfor-loop offset end: offset=2\nfor-loop offset start: offset=3\n  initial objids (byte) = 0x00\nfor-loop offset end: offset=3\nfor-loop offset start: offset=4\n  initial objids (byte) = 0x00\nfor-loop offset end: offset=4\nfor-loop offset start: offset=5\n  initial objids (byte) = 0x00\nfor-loop offset end: offset=5\nfor-loop offset start: offset=6\n  initial objids (byte) = 0x00\nfor-loop offset end: offset=6\nOS_FdSet_ConvertIn_Impl EXIT: status=0\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA Rule 14.3 forbids controlling expressions that are invariant (i.e., evaluate to the same value on every loop iteration). The loop here uses the controlling expression \"offset < sizeof(OSAL_set->object_ids)\". Although sizeof(OSAL_set->object_ids) is a compile-time constant, the overall controlling expression depends on the loop variable offset, which is modified each iteration. Therefore the controlling expression is not invariant and does not violate Rule 14.3. The provided execution log also shows the loop iterating with offset changing from 0 to 6, confirming the expression is not invariant at runtime. The exceptions listed in the rule (infinite loops or the do-while constant-false case) are not needed here because the expression is not constant."
}