{
  "user_message": "An agent A claimed that the following UT_Stub_GetReturnValuePtr code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UT_Stub_GetReturnValuePtr.\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn UT_Stub_GetReturnValuePtr the local pointer StubPtr is only used to read members (BasePtr, Position, ContentTypeStr) and is never used to modify the pointed-to object. Therefore it should be declared to point to a const-qualified type (e.g. const UT_StubTableEntry_t *StubPtr). The current declaration 'UT_StubTableEntry_t *StubPtr;' fails to apply const where possible and thus violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nUT_Stub_GetReturnValuePtr called: FuncKey=94314430250496 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x55c74a1e55c0\nReturnPtr (BasePtr) = 0x55c77048fcb0\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x55c77048fcb0\nUT_Stub_GetReturnValuePtr called: FuncKey=94314430250496 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x55c74a1e55c0\nReturnPtr (BasePtr) = 0x55c77048fcb0\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x55c77048fcb0\nUT_Stub_GetReturnValuePtr called: FuncKey=94314430250496 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x55c74a1e55c0\nReturnPtr (BasePtr) = 0x55c77048fcb0\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x55c77048fcb0\nUT_Stub_GetReturnValuePtr called: FuncKey=94541524636991 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x55fc2a004ec0\nReturnPtr (BasePtr) = 0x55fc471d4a80\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x55fc471d4a80\nUT_Stub_GetReturnValuePtr called: FuncKey=94541524636991 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x55fc2a004ec0\nReturnPtr (BasePtr) = 0x55fc471d4a80\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x55fc471d4a80\nUT_Stub_GetReturnValuePtr called: FuncKey=94541524636991 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x55fc2a004ec0\nReturnPtr (BasePtr) = 0x55fc471d4a80\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x55fc471d4a80\nUT_Stub_GetReturnValuePtr called: FuncKey=94220170189217 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x55b157c83440\nReturnPtr (BasePtr) = 0x55b1712abc40\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x55b1712abc40\nUT_Stub_GetReturnValuePtr called: FuncKey=94220170189217 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x55b157c83440\nReturnPtr (BasePtr) = 0x55b1712abc40\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x55b1712abc40\nUT_Stub_GetReturnValuePtr called: FuncKey=94903877443366 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x565087e8f320\nReturnPtr (BasePtr) = 0x565096b4ebd0\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x565096b4ebd0\nUT_Stub_GetReturnValuePtr called: FuncKey=94903877443366 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x565087e8f320\nReturnPtr (BasePtr) = 0x565096b4ebd0\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x565096b4ebd0\nUT_Stub_GetReturnValuePtr called: FuncKey=93868564122471 ReturnSize=4 TypeName=osal_id_t\nUT_GetStubEntry returned StubPtr=0x555f7a6dbc80\nReturnPtr (BasePtr) = 0x555fa4d1c9a0\nStored Position = 4, Stored ContentTypeStr = osal_id_t\nReturn value validated, returning pointer 0x555fa4d1c9a0\nUT_Stub_GetReturnValuePtr called: FuncKey=93868564114115 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x555f7a6dbfe0\nReturnPtr (BasePtr) = 0x555fa4d1c9c0\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x555fa4d1c9c0\nUT_Stub_GetReturnValuePtr called: FuncKey=93868564102740 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x555f7a6d9ac0\nReturnPtr (BasePtr) = 0x555fa4d1c9e0\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x555fa4d1c9e0\nUT_Stub_GetReturnValuePtr called: FuncKey=93868564118041 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x555f7a6d8200\nReturnPtr (BasePtr) = 0x555fa4d1ca00\nStored Position = 4, Stored ContentTypeStr = int32\nReturn value validated, returning pointer 0x555fa4d1ca00\nUT_Stub_GetReturnValuePtr called: FuncKey=93868564116201 ReturnSize=4 TypeName=int32\nUT_GetStubEntry returned StubPtr=0x555f7a6d4ae0\nReturnPtr (BasePtr) = 0x555fa4d1ca20\nStored Position = 4, Store\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In UT_Stub_GetReturnValuePtr the local pointer StubPtr is only used to inspect members (read operations) and is not used to modify the pointed-to UT_StubTableEntry_t object. According to MISRA C 2023 Rule 8.13 a pointer should be const-qualified where possible, so StubPtr could reasonably be declared as const UT_StubTableEntry_t *StubPtr. Converting the result of UT_GetStubEntry (UT_StubTableEntry_t *) to const UT_StubTableEntry_t * is allowed, and accessing the member BasePtr from a pointer-to-const yields a const-qualified lvalue of the member type (in this case effectively a const pointer-to-void), which can still be read and assigned to the function's void * ReturnPtr without losing the intended semantics. Therefore the reported omission of const is a valid violation of Rule 8.13."
}