{
  "user_message": "An agent A claimed that the following UT_Stub_GetReturnValuePtr code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of UT_Stub_GetReturnValuePtr.\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf StubPtr->Data.Buff.BasePtr is declared with a const-qualified type (for example: const void * or const uint8_t *), then the assignment to the non-const void *ReturnPtr discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. (If BasePtr is actually declared as a non-const void * then no Rule 8.13 violation occurs.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94098372509216\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94583367464287\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94152654883265\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94533595438918\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94335589763975\n  Requested ReturnSize=4\n  Requested TypeName=osal_id_t\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94538908682658\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94065773463256\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94462376740884\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=93946323976219\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94468848602191\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94636559226692\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94513172139204\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94869245262217\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=93953914353879\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94273662234745\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94722343217778\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94099113100366\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94344116865886\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=93945772488918\n  Requested ReturnSize=4\n  Requested TypeName=osal_id_t\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94748326893417\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94405829949990\n  Requested ReturnSize=4\n  Requested TypeName=int32\n  StubPtr (raw) = (nil)\n  ReturnPtr (raw) = (nil)\nUT_Stub_GetReturnValuePtr EXIT\n\nUT_Stub_GetReturnValuePtr ENTRY\n  FuncKey=94082881118949\n  Requested ReturnSi\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's reasoning is technically correct in principle but incomplete in practice. The shown function itself does not show the declaration of StubPtr->Data.Buff.BasePtr. If BasePtr is declared as a const-qualified pointer (e.g. const void * or const uint8_t *), then assigning it to a non-const void *ReturnPtr discards the const qualifier and would violate MISRA C 2023 Rule 8.13 (and in fact the C type system without a cast). If, however, BasePtr is declared as a non-const pointer, no 8.13 violation occurs. In other words the report is only correct conditionally \u2014 there is a violation only when the underlying BasePtr is const-qualified. Recommended fixes: (a) if the returned buffer is not to be modified, change the function return type to const void *ReturnPtr (and callers accordingly) to satisfy 8.13; (b) if the buffer must be writable, ensure BasePtr is declared as non-const; (c) avoid casting away const without a documented justification (that would itself conflict with MISRA requirements)."
}