{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.BasePtr is declared with a const-qualified type (for example: const void * or const uint8_t *), then the assignment to the non-const void *ReturnPtr discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. (If BasePtr is actually declared as a non-const void * then no Rule 8.13 violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: log control flow and state to /tmp/logs/3203.txt */\nstatic void UT_Stub_LogReturnProbe(unsigned long long FuncKey, size_t ReturnSize, const char *TypeName,\n                                   void *StubPtrVoid, void *ReturnPtr)\n{\n    FILE *f = fopen(\"/tmp/logs/3203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not interfere with normal behavior */\n    }\n\n    fprintf(f, \"UT_Stub_GetReturnValuePtr ENTRY\\n\");\n    fprintf(f, \"  FuncKey=%llu\\n\", FuncKey);\n    fprintf(f, \"  Requested ReturnSize=%zu\\n\", ReturnSize);\n    fprintf(f, \"  Requested TypeName=%s\\n\", (TypeName != NULL) ? TypeName : \"(null)\");\n    fprintf(f, \"  StubPtr (raw) = %p\\n\", StubPtrVoid);\n    fprintf(f, \"  ReturnPtr (raw) = %p\\n\", ReturnPtr);\n\n    /* If StubPtr is available, try to log details from the structure.\n     * The pointer is passed in as void* to avoid requiring the full type here\n     * at the prototype level; the caller will pass the real pointer.\n     */\n    if (StubPtrVoid != NULL)\n    {\n        /* We don't know the exact type here in the prototype context, but\n         * the caller passes the actual typed pointer. Reinterpret it to a\n         * common layout that matches the usage below. This local struct\n         * mirrors only the fields we access for logging purposes.\n         */\n        struct _LogBuffView\n        {\n            void *BasePtr;\n            size_t Position;\n            const char *ContentTypeStr;\n        } *view = (struct _LogBuffView *)StubPtrVoid;\n\n        fprintf(f, \"  Stub->Data.Buff.BasePtr = %p\\n\", view->BasePtr);\n        fprintf(f, \"  Stub->Data.Buff.Position = %zu\\n\", view->Position);\n        fprintf(f, \"  Stub->Data.Buff.ContentTypeStr = %s\\n\", (view->ContentTypeStr != NULL) ? view->ContentTypeStr : \"(null)\");\n\n        /* Use _Generic to attempt to detect compile-time pointer qualifier/type\n         * of the BasePtr expression. This helps provide evidence if the\n         * actual declaration of BasePtr is const-qualified (one of the\n         * common variants). Note: this is a best-effort detection and will\n         * report 'other/unknown' for types not listed below.\n         */\n        const char *type_desc = _Generic((view->BasePtr),\n                                        const void *: \"const void *\",\n                                        void *: \"void *\",\n                                        const uint8_t *: \"const uint8_t *\",\n                                        uint8_t *: \"uint8_t *\",\n                                        const char *: \"const char *\",\n                                        char *: \"char *\",\n                                        default: \"other/unknown\");\n\n        fprintf(f, \"  Deduced compile-time BasePtr type: %s\\n\", type_desc);\n\n        /* If we have a small return size, try to dump a few bytes for inspection.\n         * This is done carefully and only when BasePtr is non-NULL and Position\n         * indicates a reasonable size. Do not attempt to read large or invalid\n         * memory areas; this is only exploratory logging.\n         */\n        if (view->BasePtr != NULL && view->Position > 0 && view->Position <= 64U)\n        {\n            unsigned char *p = (unsigned char *)view->BasePtr;\n            fprintf(f, \"  First up to %zu bytes of BasePtr: \", view->Position);\n            for (size_t i = 0; i < view->Position; ++i)\n            {\n                fprintf(f, \"%02X\", (unsigned)p[i]);\n                if (i + 1 < view->Position)\n                    fprintf(f, \" \");\n            }\n            fprintf(f, \"\\n\");\n        }\n    }\n\n    fprintf(f, \"UT_Stub_GetReturnValuePtr EXIT\\n\\n\");\n    fclose(f);\n}\n\n/* Modified function with inserted probes. Original logic preserved. */\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n\n    /* Probe: log entry with initial parameters */\n    UT_Stub_LogReturnProbe((unsigned long long)FuncKey, ReturnSize, TypeName, NULL, NULL);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* Log the unexpected NULL stub pointer before aborting */\n        UT_Stub_LogReturnProbe((unsigned long long)FuncKey, ReturnSize, TypeName, NULL, NULL);\n\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        /* Log the stub pointer and its buffer fields (probe will re-interpret) */\n        UT_Stub_LogReturnProbe((unsigned long long)FuncKey, ReturnSize, TypeName, (void *)StubPtr, NULL);\n\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /* Log after performing the assignment of BasePtr to ReturnPtr. This\n         * captures the value assigned (and gives evidence if BasePtr was\n         * const-qualified at compile time via the earlier probe).\n         */\n        UT_Stub_LogReturnProbe((unsigned long long)FuncKey, ReturnSize, TypeName, (void *)StubPtr, ReturnPtr);\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            /* Log mismatch details before failing */\n            UT_Stub_LogReturnProbe((unsigned long long)FuncKey, ReturnSize, TypeName, (void *)StubPtr, ReturnPtr);\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n"
}