{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) with no checks that either pointer is non-NULL or that both point to valid NUL-terminated strings. Since ContentTypeStr is assigned directly from the caller in UT_Stub_RegisterReturnType (no copy or termination check), a malicious/erroneous caller could pass NULL, a non-NUL-terminated buffer, or a pointer to storage that has gone out of scope/been freed. In that case strcmp can read past the object bounds (or dereference NULL), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3209.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n",
  "test_code": "void *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    /* Local includes to ensure logging symbols are available in this translation unit\n     * placed inside the function to avoid modifying file-scope includes elsewhere. */\n    #include <stdio.h>\n    #include <stdint.h>\n\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n    FILE *               _ut_log = NULL;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    /* Open log in append mode. Best-effort; do not fail the function if logging isn't available. */\n    _ut_log = fopen(\"/tmp/logs/3209.txt\", \"a\");\n    if (_ut_log != NULL)\n    {\n        /* Log entry with non-dereferencing information only to avoid introducing extra UB.\n         * Cast FuncKey to uintptr_t to print its numeric representation regardless of underlying type. */\n        fprintf(_ut_log, \"[UT_STUB] Enter UT_Stub_GetReturnValuePtr: FuncKey=0x%lx ReturnSize=%zu TypeName_ptr=%p\\n\",\n                (unsigned long)(uintptr_t)FuncKey, ReturnSize, (const void *)TypeName);\n        fflush(_ut_log);\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (_ut_log != NULL)\n        {\n            fprintf(_ut_log, \"[UT_STUB] StubPtr is NULL -> aborting.\\n\");\n            fflush(_ut_log);\n            fclose(_ut_log);\n            _ut_log = NULL;\n        }\n\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /* Log the relevant pointers and sizes without dereferencing strings. */\n        if (_ut_log != NULL)\n        {\n            fprintf(_ut_log,\n                    \"[UT_STUB] StubPtr=%p BasePtr=%p Position=%zu ContentTypeStr_ptr=%p\\n\",\n                    (void *)StubPtr, (void *)StubPtr->Data.Buff.BasePtr,\n                    (size_t)StubPtr->Data.Buff.Position,\n                    (const void *)StubPtr->Data.Buff.ContentTypeStr);\n            fflush(_ut_log);\n        }\n\n        /* Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        /* Call strcmp as in original logic, but log the fact that the call is about to happen.\n         * NOTE: strcmp itself is the original potential point of UB; we do not change that behavior.\n         */\n        if (_ut_log != NULL)\n        {\n            fprintf(_ut_log, \"[UT_STUB] About to compare TypeName_ptr=%p with ContentTypeStr_ptr=%p using strcmp\\n\",\n                    (const void *)TypeName, (const void *)StubPtr->Data.Buff.ContentTypeStr);\n            fflush(_ut_log);\n        }\n\n        int _cmp = strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr);\n\n        if (_ut_log != NULL)\n        {\n            fprintf(_ut_log, \"[UT_STUB] strcmp returned %d\\n\", _cmp);\n            fflush(_ut_log);\n        }\n\n        if (StubPtr->Data.Buff.Position != ReturnSize || _cmp != 0)\n        {\n            /* Log mismatch occurrence with pointer and size details only (no %s on possibly unterminated strings).\n             * The original UtAssert_Failed call still reports the strings as before. */\n            if (_ut_log != NULL)\n            {\n                fprintf(_ut_log,\n                        \"[UT_STUB] Return value mismatch detected: expected TypeName_ptr=%p size=%lu got ContentTypeStr_ptr=%p size=%lu\\n\",\n                        (const void *)TypeName, (unsigned long)ReturnSize,\n                        (const void *)StubPtr->Data.Buff.ContentTypeStr,\n                        (unsigned long)StubPtr->Data.Buff.Position);\n                fflush(_ut_log);\n                fclose(_ut_log);\n                _ut_log = NULL;\n            }\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    if (_ut_log != NULL)\n    {\n        fprintf(_ut_log, \"[UT_STUB] Exiting UT_Stub_GetReturnValuePtr with ReturnPtr=%p\\n\", ReturnPtr);\n        fflush(_ut_log);\n        fclose(_ut_log);\n    }\n\n    return ReturnPtr;\n}\n"
}