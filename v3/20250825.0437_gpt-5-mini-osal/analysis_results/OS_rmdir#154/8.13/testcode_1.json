{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'filesys' is declared as a mutable pointer (OS_filesys_internal_record_t *filesys;) but it is only used to read fields (flags, system_mountpt, virtual_mountpt) and not to modify the pointed object. Therefore it should be declared as a pointer to const (const OS_filesys_internal_record_t *filesys) to reflect read-only usage and prevent accidental modification. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging function: append formatted messages to /tmp/logs/1543.txt */\nstatic void os_rmdir_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1543.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect original logic */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input state */\n    os_rmdir_log(\"OS_rmdir ENTRY: path=%s\", (path != NULL) ? path : \"(null)\");\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and the translated path buffer */\n    /* Cast return_code to long for printing in a portable manner */\n    os_rmdir_log(\"OS_TranslatePath returned=%ld, local_path=%s\", (long)return_code, local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the call to the implementation and record its result */\n        os_rmdir_log(\"Calling OS_DirRemove_Impl with local_path=%s\", local_path);\n        return_code = OS_DirRemove_Impl(local_path);\n        os_rmdir_log(\"OS_DirRemove_Impl returned=%ld\", (long)return_code);\n    }\n    else\n    {\n        os_rmdir_log(\"OS_DirRemove_Impl not called due to translate failure (code=%ld)\", (long)return_code);\n    }\n\n    /* Log exit state */\n    os_rmdir_log(\"OS_rmdir EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}"
}