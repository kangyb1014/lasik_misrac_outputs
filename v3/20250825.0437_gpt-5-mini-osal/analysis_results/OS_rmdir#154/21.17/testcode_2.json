{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(s, 0, maxlen) can read up to maxlen bytes starting at s. If the object pointed to by s is smaller than maxlen (for example VirtualPath is a pointer to a buffer of size 16 but OS_strnlen is called with maxlen = OS_MAX_PATH_LEN = 255), memchr may access memory beyond the bounds of that object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1549.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Local typedef to match original environment */\ntypedef int32_t int32;\n\n/* Use enum constants instead of macros to avoid defining macros */\nenum { OS_MAX_LOCAL_PATH_LEN = 256 };\nenum { OS_MAX_PATH_LEN = 255 };\nenum { OS_SUCCESS = 0 };\n\n/* External implementations are expected to exist in the real environment. */\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_DirRemove_Impl(const char *local_path);\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1549.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1549.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Additional probe that documents the memchr risk without performing the unsafe access.\n   This function purposely does NOT dereference the `s` pointer; it only logs the pointer value\n   and the maxlen that would be used in a memchr/strnlen-like call. */\nstatic void probe_log_memchr_risk(const void *s, size_t maxlen)\n{\n    probe_log(\"[RISK] memchr/strnlen usage: pointer=%p, maxlen=%zu. \"\n              \"Note: memchr(s, 0, maxlen) may read up to maxlen bytes starting at s and \"\n              \"therefore may access beyond the bounds of the object pointed to by s.\",\n              s, maxlen);\n}\n\n/* Modified OS_rmdir with logging probes inserted. The original control flow and logic\n   are preserved as much as possible. */\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and key state without dereferencing `path`. */\n    probe_log(\"OS_rmdir ENTER: path_ptr=%p\", (const void *)path);\n    probe_log(\"Configuration: OS_MAX_LOCAL_PATH_LEN=%d, OS_MAX_PATH_LEN=%d\",\n              OS_MAX_LOCAL_PATH_LEN, OS_MAX_PATH_LEN);\n\n    /* Log the potential memchr/strnlen risk for callers that may use a large maxlen\n       (e.g. OS_MAX_PATH_LEN). We DON'T call memchr or strnlen here to avoid introducing\n       unsafe reads; this is only evidence/logging for the scenario. */\n    probe_log_memchr_risk(path, (size_t)OS_MAX_PATH_LEN);\n\n    /* Original translation step. We preserve the call order and logic. */\n    return_code = OS_TranslatePath(path, local_path);\n    probe_log(\"OS_TranslatePath returned %d; local_path_buffer_addr=%p\",\n              return_code, (void *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Calling OS_DirRemove_Impl with local_path=%p\", (void *)local_path);\n        return_code = OS_DirRemove_Impl(local_path);\n        probe_log(\"OS_DirRemove_Impl returned %d\", return_code);\n    }\n    else\n    {\n        probe_log(\"Skipping OS_DirRemove_Impl due to translate failure: %d\", return_code);\n    }\n\n    probe_log(\"OS_rmdir EXIT: returning %d\", return_code);\n    return return_code;\n}\n"
}