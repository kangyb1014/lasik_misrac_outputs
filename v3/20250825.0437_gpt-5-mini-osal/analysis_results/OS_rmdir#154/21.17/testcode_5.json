{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr without ensuring that that many bytes exist in the object behind VirtualPath. For example, if VirtualPath is an array of size OS_MAX_PATH_LEN and the last '/' is near the end (so name_ptr points to within a few bytes of the array end) and OS_MAX_FILE_NAME is larger than the remaining bytes in the array (e.g. OS_MAX_PATH_LEN = 64, name_ptr at offset 60, OS_MAX_FILE_NAME = 32), memchr will attempt to access bytes beyond the VirtualPath buffer. The code does not constrain the memchr length to the remaining bytes of the VirtualPath object, so this violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1549.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/*\n * Probe / logging helpers for OS_rmdir.\n * These functions append traces to /tmp/logs/1549.txt and are intended\n * to capture control flow and buffer contents to reproduce the reported\n * memchr out-of-bounds scenario.\n *\n * NOTE: This file intentionally does not redefine types such as int32 or\n * OS_MAX_LOCAL_PATH_LEN which are expected to be provided by the surrounding\n * project. The original logic of OS_rmdir is preserved; only logging is added.\n */\n\nstatic void OS_rmdir_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1549.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\n/*\n * Write a bounded representation of a buffer to the log. This prints\n * up to maxlen bytes or until a NUL byte, whichever comes first. Non-printable\n * bytes are represented as hex escapes so the exact contents (and potential\n * lack of NUL terminator) can be inspected.\n */\nstatic void OS_rmdir_log_buffer(const char *label, const char *buf, size_t maxlen)\n{\n    FILE *f = fopen(\"/tmp/logs/1549.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    (void)fprintf(f, \"%s: \", label);\n    if (buf == NULL)\n    {\n        (void)fprintf(f, \"(null)\\n\");\n        (void)fclose(f);\n        return;\n    }\n\n    size_t i;\n    for (i = 0U; i < maxlen; ++i)\n    {\n        unsigned char c = (unsigned char)buf[i];\n        if (c == 0U)\n        {\n            break; /* terminated */\n        }\n\n        if ((c >= 32U) && (c <= 126U))\n        {\n            (void)fputc((int)c, f);\n        }\n        else if (c == '\\n')\n        {\n            (void)fputs(\"\\\\n\", f);\n        }\n        else if (c == '\\r')\n        {\n            (void)fputs(\"\\\\r\", f);\n        }\n        else if (c == '\\t')\n        {\n            (void)fputs(\"\\\\t\", f);\n        }\n        else\n        {\n            (void)fprintf(f, \"\\\\x%02X\", c);\n        }\n    }\n\n    if (i == maxlen)\n    {\n        (void)fprintf(f, \" [truncated to %zu bytes]\", maxlen);\n    }\n\n    (void)fprintf(f, \"\\n\");\n    (void)fclose(f);\n}\n\n/* Modified OS_rmdir with logging probes. Original logic preserved. */\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input argument */\n    OS_rmdir_log_printf(\"OS_rmdir: entered\");\n    OS_rmdir_log_printf(\"OS_rmdir: path pointer=%p\", (const void *)path);\n    OS_rmdir_log_buffer(\"OS_rmdir: path (bounded)\", path, (size_t)OS_MAX_LOCAL_PATH_LEN);\n\n    /* Keep original behavior: translate path then attempt removal */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and contents of local_path buffer up to the\n       known maximum local path length so callers can inspect where a\n       name_ptr might point into the buffer. This helps reproduce memchr\n       scenarios where the subsequent search length exceeds the remaining\n       bytes in local_path. */\n    OS_rmdir_log_printf(\"OS_rmdir: OS_TranslatePath returned %ld\", (long)return_code);\n    OS_rmdir_log_buffer(\"OS_rmdir: local_path (bounded)\", local_path, (size_t)OS_MAX_LOCAL_PATH_LEN);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_rmdir_log_printf(\"OS_rmdir: calling OS_DirRemove_Impl with local_path pointer=%p\",\n                            (const void *)local_path);\n        return_code = OS_DirRemove_Impl(local_path);\n        OS_rmdir_log_printf(\"OS_rmdir: OS_DirRemove_Impl returned %ld\", (long)return_code);\n    }\n    else\n    {\n        OS_rmdir_log_printf(\"OS_rmdir: skipping OS_DirRemove_Impl due to translate failure\");\n    }\n\n    OS_rmdir_log_printf(\"OS_rmdir: exiting with code %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}