{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(VirtualPath, 0, OS_MAX_PATH_LEN). memchr may read up to OS_MAX_PATH_LEN bytes from VirtualPath regardless of the actual size of the object pointed to. If the caller passes a pointer to a shorter object (for example a small char array or a string literal that does not occupy OS_MAX_PATH_LEN bytes) this memchr invocation can access bytes beyond the bounds of that object. OS_CHECK_POINTER only tests for NULL, not object size, so the call can violate Rule 21.17 (e.g. VirtualPath = \"abc\" stored in 4 bytes while OS_MAX_PATH_LEN is much larger).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1549.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmdir code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n/* The types and constants such as int32, OS_MAX_LOCAL_PATH_LEN, and OS_MAX_PATH_LEN\n   are expected to be defined elsewhere in the project as in the original code. */\n\n/* Probe/log helper: append human-readable logs to /tmp/logs/1549.txt.\n   This function purposely avoids dereferencing the `path` pointer beyond checking for NULL\n   to avoid introducing any new out-of-bounds accesses. */\nstatic void OS_rmdir_probe_log(const char *stage, const char *path, int32 return_code, const char *local_path)\n{\n    FILE *f = fopen(\"/tmp/logs/1549.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect main logic. */\n    }\n\n    /* Log the control stage and the pointer value for the caller-provided path. */\n    fprintf(f, \"[OS_rmdir] stage=%s\\n\", stage);\n    fprintf(f, \"[OS_rmdir] path_ptr=%p\\n\", (void *)path);\n\n    /* Only probe the first byte of path (if non-NULL) to avoid reading beyond the caller object.\n       This avoids creating new potential out-of-bounds reads while still providing useful state. */\n    if (path == NULL)\n    {\n        fprintf(f, \"[OS_rmdir] path_is_NULL\\n\");\n    }\n    else\n    {\n        /* Print the first byte as hex and as a printable char if reasonable. */\n        unsigned char first = (unsigned char)path[0];\n        if (first >= 0x20 && first <= 0x7e)\n            fprintf(f, \"[OS_rmdir] path_first_byte=0x%02x ('%c')\\n\", first, (char)first);\n        else\n            fprintf(f, \"[OS_rmdir] path_first_byte=0x%02x\\n\", first);\n\n        /* Also record the constant that is relevant to the reported violation: how many bytes\n           OS_strnlen/memchr might read when called with OS_MAX_PATH_LEN. We don't call memchr here. */\n#ifdef OS_MAX_PATH_LEN\n        fprintf(f, \"[OS_rmdir] OS_MAX_PATH_LEN=%d\\n\", (int)OS_MAX_PATH_LEN);\n#else\n        fprintf(f, \"[OS_rmdir] OS_MAX_PATH_LEN=(unknown)\\n\");\n#endif\n    }\n\n    /* Log return code if available. A caller of this probe may pass the return code -1 or OS_SUCCESS. */\n    fprintf(f, \"[OS_rmdir] return_code=%d\\n\", (int)return_code);\n\n    /* If local_path is provided (only after a successful translate), it's safe to log it because\n       local_path is an array owned by this function and thus within-bounds to read. */\n    if (local_path != NULL)\n    {\n        /* Print the translated local path up to the known buffer length if available. */\n#ifdef OS_MAX_LOCAL_PATH_LEN\n        /* Ensure we don't accidentally print garbage by using a precision bound. */\n        fprintf(f, \"[OS_rmdir] local_path=\\\"\");\n        /* Print as many chars as the maximum buffer (safe, local array), but stop at NUL if present. */\n        for (int i = 0; i < (int)OS_MAX_LOCAL_PATH_LEN && local_path[i] != '\\0'; ++i)\n            fputc(local_path[i], f);\n        fprintf(f, \"\\\"\\n\");\n#else\n        fprintf(f, \"[OS_rmdir] local_path=(unknown-size) '%s'\\n\", local_path);\n#endif\n    }\n\n    fprintf(f, \"[OS_rmdir] ----\\n\");\n    fclose(f);\n}\n\n/* Original function preserved with inserted probes. */\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry into OS_rmdir and the incoming pointer state. */\n    OS_rmdir_probe_log(\"entry\", path, -1, NULL);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and (if successful) the translated local path. */\n    if (return_code == OS_SUCCESS)\n    {\n        OS_rmdir_probe_log(\"after_translate_success\", path, return_code, local_path);\n\n        return_code = OS_DirRemove_Impl(local_path);\n\n        /* Log after attempting to remove the directory. */\n        OS_rmdir_probe_log(\"after_dirremove_impl\", path, return_code, local_path);\n    }\n    else\n    {\n        /* Log translation failure. Do not log local_path contents in this branch. */\n        OS_rmdir_probe_log(\"after_translate_failure\", path, return_code, NULL);\n    }\n\n    return return_code;\n}\n"
}