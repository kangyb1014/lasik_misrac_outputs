{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization \"int32 return_code = OS_ERROR;\" in OS_ObjectIdConvertToken is redundant (dead) \u2014 the function either returns early on invalid ID, or the while-loop always assigns return_code (OS_SUCCESS, OS_ERR_INVALID_ID or OS_ERR_OBJECT_IN_USE) before any subsequent use. Therefore the initial assignment is executed but its removal would not affect program behaviour, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1992.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\n/*\n * Probe helper: append a formatted log line to /tmp/logs/1992.txt.\n * Attempt to create the directory if it does not exist so logs are more likely to be captured.\n */\nstatic void OS_ObjectIdGetBySearch_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1992.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory and reopen. Ignore errors if creation fails. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1992.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdGetBySearch_probe(\"ENTRY: OS_ObjectIdGetBySearch(lock_mode=%d, idtype=%d, MatchFunc=%p, arg=%p, token=%p)\",\n                                 (int)lock_mode, (int)idtype, (void *)MatchFunc, arg, (void *)token);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    OS_ObjectIdGetBySearch_probe(\"Called: OS_ObjectIdTransactionInit(lock_mode=%d, idtype=%d, token=%p)\", (int)lock_mode, (int)idtype,\n                                 (void *)token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n    OS_ObjectIdGetBySearch_probe(\"Returned: OS_ObjectIdFindNextMatch -> return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        OS_ObjectIdGetBySearch_probe(\"OS_ObjectIdFindNextMatch succeeded; calling OS_ObjectIdConvertToken(token=%p)\", (void *)token);\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_ObjectIdGetBySearch_probe(\"Returned: OS_ObjectIdConvertToken -> return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OS_ObjectIdGetBySearch_probe(\"OS_ObjectIdFindNextMatch did not succeed (return_code=%ld); calling OS_ObjectIdTransactionCancel(token=%p)\",\n                                     (long)return_code, (void *)token);\n        OS_ObjectIdTransactionCancel(token);\n        OS_ObjectIdGetBySearch_probe(\"Called: OS_ObjectIdTransactionCancel(token=%p)\", (void *)token);\n    }\n\n    OS_ObjectIdGetBySearch_probe(\"EXIT: OS_ObjectIdGetBySearch returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}