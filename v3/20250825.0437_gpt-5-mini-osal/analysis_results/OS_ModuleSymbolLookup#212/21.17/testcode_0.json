{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: if a static symbol entry has StaticSym->Module == NULL and OS_SymbolLookup_Static is called with a non-NULL ModuleName, the expression (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0) will evaluate the right-hand strcmp and invoke strcmp(NULL, ModuleName), causing an out-of-bounds/undefined access. (Note: in the shown caller OS_ModuleSymbolLookup the SymbolName argument is validated so the first strcmp is safe in that call path, but OS_SymbolLookup_Static itself does not guard StaticSym->Module or SymbolName, so a call with a NULL pointer can violate Rule 21.17.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2129.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Probe: log entry into function and basic parameters\n    */\n    {\n        FILE *f = fopen(\"/tmp/logs/2129.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_ModuleSymbolLookup ENTRY: module_id=%u symbol_address=%p symbol_name=%p\\n\",\n                    (unsigned)module_id, (void *)symbol_address, (const void *)symbol_name);\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        /*\n        ** Probe: log record and module name pointer before calling impl\n        */\n        {\n            FILE *f = fopen(\"/tmp/logs/2129.txt\", \"a\");\n            if (f)\n            {\n                const void *modname_ptr = NULL;\n                if (record != NULL)\n                {\n                    /* record->name_entry may be NULL; do not dereference it */\n                    modname_ptr = (const void *)record->name_entry;\n                }\n                fprintf(f, \"OS_ModuleSymbolLookup: after lookup token=%p record=%p record->name_entry=%p\\n\",\n                        (void *)&token, (void *)record, modname_ptr);\n                fflush(f);\n                fclose(f);\n            }\n        }\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n\n            /*\n            ** Probe: log that we are about to call OS_SymbolLookup_Static and the pointers passed\n            ** This captures the key state for reproducing the reported strcmp(NULL, ModuleName) scenario.\n            */\n            {\n                FILE *f = fopen(\"/tmp/logs/2129.txt\", \"a\");\n                if (f)\n                {\n                    const void *modname_ptr = NULL;\n                    if (record != NULL)\n                    {\n                        modname_ptr = (const void *)record->name_entry;\n                    }\n\n                    fprintf(f, \"OS_ModuleSymbolLookup: calling OS_SymbolLookup_Static with symbol_address=%p symbol_name=%p ModuleName=%p\\n\",\n                            (void *)symbol_address, (const void *)symbol_name, modname_ptr);\n\n                    /* flush and close so logs are available even if the called function crashes */\n                    fflush(f);\n                    fclose(f);\n                }\n            }\n\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n\n            /*\n            ** Probe: log result of static lookup\n            */\n            {\n                FILE *f = fopen(\"/tmp/logs/2129.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"OS_ModuleSymbolLookup: OS_SymbolLookup_Static returned %d, final return_code=%d\\n\",\n                            (int)staticsym_status, (int)return_code);\n                    fflush(f);\n                    fclose(f);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /*\n    ** Probe: log exit and return code\n    */\n    {\n        FILE *f = fopen(\"/tmp/logs/2129.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_ModuleSymbolLookup EXIT: return_code=%d\\n\", (int)return_code);\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}