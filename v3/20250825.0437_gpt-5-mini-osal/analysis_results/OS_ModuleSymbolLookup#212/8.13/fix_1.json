{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_modsym_log_probe(const char *fmt, ...)\n{\n    const char *logdir = \"/tmp/logs\";\n    const char *logpath = \"/tmp/logs/2123.txt\";\n    FILE *f = fopen(logpath, \"a\");\n    if (f == NULL)\n    {\n        /* Try to create directory and reopen */\n        (void)mkdir(logdir, 0755);\n        f = fopen(logpath, \"a\");\n        if (f == NULL)\n        {\n            /* Give up silently if logging is not possible */\n            return;\n        }\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_VERSION)\n    (void)localtime_r(&t, &tm_buf);\n    char timebuf[64];\n    (void)strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n    fprintf(f, \"%s - \", timebuf);\n#else\n    fprintf(f, \"ts=%ld - \", (long)t);\n#endif\n\n    /* Print the user message */\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /* Log entry and incoming parameters */\n    os_modsym_log_probe(\"ENTER OS_ModuleSymbolLookup: module_id=%lu, symbol_address_ptr=%p, symbol_name_ptr=%p, symbol_name='%s'\",\n                        (unsigned long)module_id, (void *)symbol_address, (const void *)symbol_name,\n                        (symbol_name != NULL) ? symbol_name : \"(null)\");\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    os_modsym_log_probe(\"OS_ObjectIdGetById returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        os_modsym_log_probe(\"OS_OBJECT_TABLE_GET returned record_ptr=%p, record_name_entry=%p, record_name='%s'\",\n                            (void *)record,\n                            (void *)(record != NULL ? record->name_entry : NULL),\n                            (record != NULL && record->name_entry != NULL) ? record->name_entry : \"(null)\");\n\n        /* Call into the implementation - preserve original call and semantics */\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        os_modsym_log_probe(\"OS_ModuleSymbolLookup_Impl returned %ld, symbol_address_value=0x%llx\",\n                            (long)return_code,\n                            (unsigned long long)(symbol_address != NULL ? (unsigned long long)*symbol_address : 0ULL));\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n            os_modsym_log_probe(\"OS_SymbolLookup_Static returned %ld, symbol_address_value=0x%llx, record_name='%s'\",\n                                (long)staticsym_status,\n                                (unsigned long long)(symbol_address != NULL ? (unsigned long long)*symbol_address : 0ULL),\n                                (record != NULL && record->name_entry != NULL) ? record->name_entry : \"(null)\");\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                os_modsym_log_probe(\"Static lookup succeeded, overwriting return_code from %ld to %ld\", (long)return_code, (long)staticsym_status);\n                return_code = staticsym_status;\n            }\n            else\n            {\n                os_modsym_log_probe(\"Static lookup failed, keeping return_code=%ld\", (long)return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_modsym_log_probe(\"Released token at addr=%p\", (void *)&token);\n    }\n    else\n    {\n        os_modsym_log_probe(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    os_modsym_log_probe(\"EXIT OS_ModuleSymbolLookup: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp81icdamy/src/src/os/shared/src/osapi-module.c: In function 'os_modsym_log_probe':\n/tmp/tmp81icdamy/src/src/os/shared/src/osapi-module.c:407:15: error: storage size of 'tm_buf' isn't known\n  407 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmp81icdamy/src/src/os/shared/src/osapi-module.c:420:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  420 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/__/__/os/shared/src/osapi-module.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3849: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\nstatic void os_modsym_log_probe(const char *fmt, ...)\n{\n    const char *logdir = \"/tmp/logs\";\n    const char *logpath = \"/tmp/logs/2123.txt\";\n    FILE *f = fopen(logpath, \"a\");\n    if (f == NULL)\n    {\n        /* Try to create directory and reopen */\n        (void)mkdir(logdir, 0755);\n        f = fopen(logpath, \"a\");\n        if (f == NULL)\n        {\n            /* Give up silently if logging is not possible */\n            return;\n        }\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n#if defined(_POSIX_VERSION)\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n    char timebuf[64];\n    (void)strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n    fprintf(f, \"%s - \", timebuf);\n#else\n    fprintf(f, \"ts=%ld - \", (long)t);\n#endif\n\n    /* Print the user message */\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to va_list in case the build environment uses a different internal typedef */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /* Log entry and incoming parameters */\n    os_modsym_log_probe(\"ENTER OS_ModuleSymbolLookup: module_id=%lu, symbol_address_ptr=%p, symbol_name_ptr=%p, symbol_name='%s'\",\n                        (unsigned long)module_id, (void *)symbol_address, (const void *)symbol_name,\n                        (symbol_name != NULL) ? symbol_name : \"(null)\");\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    os_modsym_log_probe(\"OS_ObjectIdGetById returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        os_modsym_log_probe(\"OS_OBJECT_TABLE_GET returned record_ptr=%p, record_name_entry=%p, record_name='%s'\",\n                            (void *)record,\n                            (void *)(record != NULL ? record->name_entry : NULL),\n                            (record != NULL && record->name_entry != NULL) ? record->name_entry : \"(null)\");\n\n        /* Call into the implementation - preserve original call and semantics */\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        os_modsym_log_probe(\"OS_ModuleSymbolLookup_Impl returned %ld, symbol_address_value=0x%llx\",\n                            (long)return_code,\n                            (unsigned long long)(symbol_address != NULL ? (unsigned long long)*symbol_address : 0ULL));\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n            os_modsym_log_probe(\"OS_SymbolLookup_Static returned %ld, symbol_address_value=0x%llx, record_name='%s'\",\n                                (long)staticsym_status,\n                                (unsigned long long)(symbol_address != NULL ? (unsigned long long)*symbol_address : 0ULL),\n                                (record != NULL && record->name_entry != NULL) ? record->name_entry : \"(null)\");\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                os_modsym_log_probe(\"Static lookup succeeded, overwriting return_code from %ld to %ld\", (long)return_code, (long)staticsym_status);\n                return_code = staticsym_status;\n            }\n            else\n            {\n                os_modsym_log_probe(\"Static lookup failed, keeping return_code=%ld\", (long)return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_modsym_log_probe(\"Released token at addr=%p\", (void *)&token);\n    }\n    else\n    {\n        os_modsym_log_probe(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    os_modsym_log_probe(\"EXIT OS_ModuleSymbolLookup: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n",
  "explanation": "I added the appropriate standard headers (<stdio.h>, <time.h>, <stdarg.h>, and <sys/stat.h>) so struct tm, time functions, va_list, fopen, and mkdir are properly declared. I moved the struct tm declaration into the POSIX branch and left the original timestamp logic intact. To address the va_list mismatch reported by the compiler, I explicitly cast the va_list when calling vfprintf: vfprintf(f, fmt, (va_list)ap); \u2014 this ensures the argument type matches the expected function signature across different build environments. No logic of OS_ModuleSymbolLookup was changed."
}