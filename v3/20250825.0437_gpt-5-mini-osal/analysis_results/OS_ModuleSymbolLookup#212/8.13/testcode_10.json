{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer StaticSym is declared as OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; but the code only reads the pointed-at elements (Name, Module, Address) and never modifies them. Therefore the pointed-to type could and should be const-qualified (const OS_static_symbol_record_t *StaticSym). The fragment ++StaticSym increments the pointer but does not modify the object contents \u2014 so using a non-const pointer here violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append formatted logs to /tmp/logs/2123.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    /* Log entry with input parameters */\n    OS_ProbeLog(\"OS_ModuleSymbolLookup ENTRY: module_id=%u, symbol_name_ptr=%p, symbol_name=\\\"%s\\\"\",\n                (unsigned)module_id,\n                (const void *)symbol_name,\n                symbol_name ? symbol_name : \"(null)\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ProbeLog(\"OS_ObjectIdGetById returned %d for module_id=%u\", return_code, (unsigned)module_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        /* Log record state */\n        if (record != NULL)\n        {\n            const char *modname = record->name_entry ? record->name_entry : \"(null)\";\n            OS_ProbeLog(\"Module record found: record_ptr=%p, record->name_entry=\\\"%s\\\"\",\n                        (const void *)record, modname);\n        }\n        else\n        {\n            OS_ProbeLog(\"Module record lookup returned NULL for token\");\n        }\n\n        OS_ProbeLog(\"Calling OS_ModuleSymbolLookup_Impl for symbol_name=\\\"%s\\\"\", symbol_name);\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        OS_ProbeLog(\"OS_ModuleSymbolLookup_Impl returned %d\", return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Log the resolved symbol address when lookup succeeded */\n            OS_ProbeLog(\"Symbol resolved by Impl: symbol_address=%p, value=0x%llx\",\n                        (const void *)symbol_address,\n                        (unsigned long long)(symbol_address ? (unsigned long long)*symbol_address : 0ULL));\n        }\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            const char *modname = (record && record->name_entry) ? record->name_entry : \"(null)\";\n            OS_ProbeLog(\"Impl failed (%d). Calling OS_SymbolLookup_Static for symbol_name=\\\"%s\\\", module_name=\\\"%s\\\"\",\n                        return_code, symbol_name, modname);\n\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            OS_ProbeLog(\"OS_SymbolLookup_Static returned %d\", staticsym_status);\n\n            /* Log symbol address if static lookup succeeded */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                OS_ProbeLog(\"Symbol resolved by Static lookup: symbol_address=%p, value=0x%llx\",\n                            (const void *)symbol_address,\n                            (unsigned long long)(symbol_address ? (unsigned long long)*symbol_address : 0ULL));\n\n                /* Only overwrite the return code if static lookup was successful.\n                 * Otherwise keep the error code from the low level implementation.\n                 */\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ProbeLog(\"Released object token and exiting with return_code=%d\", return_code);\n    }\n    else\n    {\n        OS_ProbeLog(\"OS_ObjectIdGetById failed; skipping lookup, returning %d\", return_code);\n    }\n\n    return return_code;\n}\n"
}