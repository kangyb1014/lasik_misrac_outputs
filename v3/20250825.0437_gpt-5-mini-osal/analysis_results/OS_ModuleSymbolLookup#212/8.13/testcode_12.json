{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as a non-const pointer (OS_common_record_t *record) but is only used for read-only access (only record->name_entry is read and no modifications are performed). Under MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (const OS_common_record_t *record). Note: the OS_OBJECT_TABLE_GET macro yields a non-const pointer, but assigning that to a pointer-to-const is allowed; the current code therefore violates the guideline by not qualifying 'record' as const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Helper logging function to record control flow and state to a persistent file.\n * This function is intentionally lightweight and avoids changing program logic.\n */\nstatic void OS_ModuleSymbolLookup_Log(const char *stage,\n                                      unsigned long module_id,\n                                      const char *symbol_name,\n                                      const void *record_ptr,\n                                      const char *record_name,\n                                      int32 return_code,\n                                      int32 staticsym_status)\n{\n    FILE *fp = fopen(\"/tmp/logs/2123.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging, do not affect control flow */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm_buf.tm_year + 1900,\n                tm_buf.tm_mon + 1,\n                tm_buf.tm_mday,\n                tm_buf.tm_hour,\n                tm_buf.tm_min,\n                tm_buf.tm_sec);\n    }\n    else\n    {\n        fprintf(fp, \"[time-unavailable] \");\n    }\n\n    fprintf(fp,\n            \"OS_ModuleSymbolLookup: stage=%s module_id=%lu symbol_name=%s record_ptr=%p record_name=%s return_code=%d staticsym_status=%d\\n\",\n            stage,\n            module_id,\n            (symbol_name != NULL) ? symbol_name : \"(null)\",\n            record_ptr,\n            (record_name != NULL) ? record_name : \"(null)\",\n            (int)return_code,\n            (int)staticsym_status);\n\n    fclose(fp);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    /* Log entry with initial parameters. record_ptr and record_name are unknown yet. */\n    OS_ModuleSymbolLookup_Log(\"entry_before_object_get\", (unsigned long)module_id, symbol_name, NULL, NULL, 0, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        /* Log after obtaining the record pointer so we capture the pointer value and name_entry (read-only). */\n        OS_ModuleSymbolLookup_Log(\"after_record_get\",\n                                  (unsigned long)module_id,\n                                  symbol_name,\n                                  (const void *)record,\n                                  (record != NULL) ? record->name_entry : NULL,\n                                  return_code,\n                                  0);\n\n        OS_ModuleSymbolLookup_Log(\"before_impl_call\",\n                                  (unsigned long)module_id,\n                                  symbol_name,\n                                  (const void *)record,\n                                  (record != NULL) ? record->name_entry : NULL,\n                                  return_code,\n                                  0);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n\n        /* Log result from the low-level implementation. */\n        OS_ModuleSymbolLookup_Log(\"after_impl_call\",\n                                  (unsigned long)module_id,\n                                  symbol_name,\n                                  (const void *)record,\n                                  (record != NULL) ? record->name_entry : NULL,\n                                  return_code,\n                                  0);\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            OS_ModuleSymbolLookup_Log(\"before_static_lookup\",\n                                      (unsigned long)module_id,\n                                      symbol_name,\n                                      (const void *)record,\n                                      (record != NULL) ? record->name_entry : NULL,\n                                      return_code,\n                                      0);\n\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /* Log the outcome of the static lookup and the name_entry passed in (evidence of read-only usage). */\n            OS_ModuleSymbolLookup_Log(\"after_static_lookup\",\n                                      (unsigned long)module_id,\n                                      symbol_name,\n                                      (const void *)record,\n                                      (record != NULL) ? record->name_entry : NULL,\n                                      return_code,\n                                      staticsym_status);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ModuleSymbolLookup_Log(\"before_release\",\n                                  (unsigned long)module_id,\n                                  symbol_name,\n                                  (const void *)record,\n                                  (record != NULL) ? record->name_entry : NULL,\n                                  return_code,\n                                  0);\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log failure to get the object id */\n        OS_ModuleSymbolLookup_Log(\"object_get_failed\",\n                                  (unsigned long)module_id,\n                                  symbol_name,\n                                  NULL,\n                                  NULL,\n                                  return_code,\n                                  0);\n    }\n\n    /* Final exit log with the return code. */\n    OS_ModuleSymbolLookup_Log(\"exit\", (unsigned long)module_id, symbol_name, NULL, NULL, return_code, 0);\n\n    return return_code;\n}\n"
}