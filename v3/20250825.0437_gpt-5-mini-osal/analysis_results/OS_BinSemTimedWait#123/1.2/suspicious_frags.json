{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTimedWait:\n```c\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BinSemTimedWait:\ntypedef int32_t   int32\n...\ntypedef uint32_t  uint32\n...\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed the provided function and the related type/macro definitions. None of the code uses compiler-specific language extensions. Specifically:\n\n- All types shown (int32, uint32, int32_t, uint32_t, osal_id_t) are standard typedefs based on stdint.h types; typedefs themselves are standard C.\n- The forward declaration typedef struct OS_object_token OS_object_token_t is standard C.\n- The macro OS_SUCCESS (0) is a standard preprocessor macro use.\n- The function uses ordinary declarations, function calls, pointer passing, and return statements only \u2014 no inline assembly, __attribute__ or __declspec, statement expressions ({ ... }), typeof, nested functions, labels-as-values, inline keyword extensions, or other compiler-specific extensions are present.\n\nTherefore there are no fragments that need investigation for MISRA C:2023 Rule 1.2 (no language extensions used). If there are other files or unseen macros/impls (e.g., definitions of OS_BinSemTimedWait_Impl, OS_ObjectIdGetById, or the macros OS_LOCK_MODE_NONE/LOCAL_OBJID_TYPE) that use compiler-specific extensions, those should be provided for review; based on the submitted code alone, nothing suspicious is found."
}