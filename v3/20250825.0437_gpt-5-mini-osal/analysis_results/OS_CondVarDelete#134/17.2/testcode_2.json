{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function dereferences a function pointer (OS_SharedGlobalVars.EventHandler) and invokes it. If that pointer is registered to point to OS_NotifyEvent (e.g. via OS_RegisterEventHandler(OS_NotifyEvent)), then calling OS_NotifyEvent would indirectly call itself and cause infinite recursion. Thus the code allows indirect self-call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1346.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete:\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe logging helper - writes control-flow and state info to /tmp/logs/1346.txt */\nstatic void OS_CondVarDelete_Log(const char *stage, unsigned long var_id, const void *token_addr, long code)\n{\n    FILE *f = fopen(\"/tmp/logs/1346.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Format: STAGE var_id=<id> token_addr=<addr> code=<code>\\n */\n        fprintf(f, \"%s var_id=%lu token_addr=%p code=%ld\\n\", stage, var_id, token_addr, code);\n        fclose(f);\n    }\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry probe: record function entry and token address (uninitialized at this point) */\n    OS_CondVarDelete_Log(\"ENTRY\", (unsigned long)var_id, &token, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of GetById and the token address (token content is implementation-defined) */\n    OS_CondVarDelete_Log(\"After_GetById\", (unsigned long)var_id, &token, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Log after implementation-specific delete */\n        OS_CondVarDelete_Log(\"After_Impl\", (unsigned long)var_id, &token, (long)return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_CondVarDelete_Log(\"After_Finalize\", (unsigned long)var_id, &token, (long)return_code);\n    }\n    else\n    {\n        /* Log early-exit due to GetById failure */\n        OS_CondVarDelete_Log(\"GetById_Failed\", (unsigned long)var_id, &token, (long)return_code);\n    }\n\n    /* Exit probe: final return code */\n    OS_CondVarDelete_Log(\"EXIT\", (unsigned long)var_id, &token, (long)return_code);\n\n    return return_code;\n}\n"
}