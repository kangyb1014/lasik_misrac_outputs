{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) can write sizeof(OS_object_token_t) bytes through the pointer parameter 'token' without first ensuring that 'token' is valid and points to an object at least that large. If a caller mistakenly passes NULL (e.g. OS_ObjectIdTransactionInit(lock_mode, idtype, NULL)) or a pointer to a smaller buffer (or to a sub-object), memset will access memory beyond the bounds of the referenced object causing undefined behavior. Therefore the use of memset here can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete:\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarDelete code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log control flow and state information to /tmp/logs/1349.txt */\nstatic void OS_CondVarDelete_Log(const char *stage, unsigned long long var_id, const void *token_ptr, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1349.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, var_id, token pointer value and return code. */\n        fprintf(f, \"%s: var_id=%llu, token_ptr=%p, return_code=%d\\n\", stage, var_id, token_ptr, return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry into function and the address of the local token object. */\n    OS_CondVarDelete_Log(\"entry\", (unsigned long long)var_id, (const void *)&token, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of GetById and whether token should be considered valid (only when OS_SUCCESS). */\n    OS_CondVarDelete_Log(\"after_OS_ObjectIdGetById\", (unsigned long long)var_id, (return_code == OS_SUCCESS) ? (const void *)&token : NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling the implementation-specific delete. */\n        OS_CondVarDelete_Log(\"before_Impl\", (unsigned long long)var_id, (const void *)&token, return_code);\n\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Log after implementation-specific delete. */\n        OS_CondVarDelete_Log(\"after_Impl\", (unsigned long long)var_id, (const void *)&token, return_code);\n\n        /* Complete the operation via the common routine */\n        OS_CondVarDelete_Log(\"before_FinalizeDelete\", (unsigned long long)var_id, (const void *)&token, return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_CondVarDelete_Log(\"after_FinalizeDelete\", (unsigned long long)var_id, (const void *)&token, return_code);\n    }\n    else\n    {\n        /* Log that we are exiting early due to failure in GetById. */\n        OS_CondVarDelete_Log(\"exit_early\", (unsigned long long)var_id, NULL, return_code);\n    }\n\n    /* Final return log */\n    OS_CondVarDelete_Log(\"exit\", (unsigned long long)var_id, (const void *)&token, return_code);\n\n    return return_code;\n}\n"
}