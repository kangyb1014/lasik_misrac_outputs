{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization 'int32 return_code = OS_ERROR;' at function entry is redundant. The function either returns early (return OS_ERR_INCORRECT_OBJ_STATE) before using return_code or always assigns return_code to a definite value within the while(true) loop (OS_SUCCESS, OS_ERR_INVALID_ID or OS_ERR_OBJECT_IN_USE) before it is later inspected/returned. Therefore the initial assignment is an operation that can be removed without changing program behavior, i.e. dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1342.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete:\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probe logging for OS_CondVarDelete.\n * Appends control-flow diagnostic messages to /tmp/logs/1342.txt so other\n * agents can observe the sequence of assignments and returns.\n *\n * This helper preserves the original function logic and only records\n * the state after each relevant operation.\n */\nstatic void OS_CondVarDelete_Log(const char *stage, unsigned long var_id, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1342.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* timestamp is optional; keep logs concise and deterministic */\n        fprintf(f, \"OS_CondVarDelete: stage=%s, var_id=%lu, return_code=%d\\n\",\n                stage, var_id, (int)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry (no read of return_code before assignment to avoid UB) */\n    OS_CondVarDelete_Log(\"entry\", (unsigned long)var_id, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVarDelete_Log(\"after_getbyid\", (unsigned long)var_id, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n        OS_CondVarDelete_Log(\"after_impl\", (unsigned long)var_id, return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_CondVarDelete_Log(\"after_finalize\", (unsigned long)var_id, return_code);\n    }\n    else\n    {\n        /* Log the early-failure path explicitly */\n        OS_CondVarDelete_Log(\"early_exit_getbyid_failed\", (unsigned long)var_id, return_code);\n    }\n\n    OS_CondVarDelete_Log(\"exit\", (unsigned long)var_id, return_code);\n    return return_code;\n}\n"
}