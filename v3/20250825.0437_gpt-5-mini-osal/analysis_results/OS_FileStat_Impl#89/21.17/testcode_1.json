{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_TranslatePath(path, local_path) can lead to out-of-bounds accesses if OS_TranslatePath copies or moves the input string into local_path without bounds checking. For example, if OS_TranslatePath internally does strcpy(local_path, path) or memcpy(local_path, path, strlen(path)+1) and strlen(path)+1 > OS_MAX_LOCAL_PATH_LEN, this will write past the local_path buffer and violate MISRA C 2023 Rule 21.17. There is no shown pre-check of path length before the call, so a too-long path is a realistic violation scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileStat_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileStat_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileStat_Impl:\n```c\nint32 OS_FileStat_Impl(const char *local_path, os_fstat_t *FileStats)\n{\n    struct stat     st;\n    mode_t          readbits;\n    mode_t          writebits;\n    mode_t          execbits;\n    struct timespec filetime;\n\n    if (stat(local_path, &st) < 0)\n    {\n        return OS_ERROR;\n    }\n\n    FileStats->FileSize = st.st_size;\n\n    /*\n     * NOTE: Traditional timestamps are only a whole number of seconds (time_t)\n     * POSIX.1-2008 expands this to have a full \"struct timespec\" with nanosecond\n     * resolution.\n     *\n     * GLIBC (and likely other C libraries that use similar feature selection)\n     * will expose this value based on _POSIX_C_SOURCE or _XOPEN_SOURCE minimum\n     * values.  Otherwise this just falls back to standard 1-second resolution\n     * available via the \"st_mtime\" member.\n     */\n#if (_POSIX_C_SOURCE >= 200809L) || (_XOPEN_SOURCE >= 700)\n    /*\n     * Better - use the full resolution (seconds + nanoseconds) as specified in POSIX.1-2008\n     */\n    filetime = st.st_mtim;\n#else\n    /*\n     * Fallback - every POSIX-compliant implementation must expose \"st_mtime\" field.\n     */\n    filetime.tv_sec  = st.st_mtime;\n    filetime.tv_nsec = 0;\n#endif\n\n    FileStats->FileTime = OS_TimeAssembleFromNanoseconds(filetime.tv_sec, filetime.tv_nsec);\n\n    /* note that the \"fst_mode\" member is already zeroed by the caller */\n    if (S_ISDIR(st.st_mode))\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_DIR;\n    }\n\n    /* always check world bits */\n    readbits  = S_IROTH;\n    writebits = S_IWOTH;\n    execbits  = S_IXOTH;\n\n    if (OS_IMPL_SELF_EUID == st.st_uid)\n    {\n        /* we own the file so use user bits for simplified perms */\n        readbits |= S_IRUSR;\n        writebits |= S_IWUSR;\n        execbits |= S_IXUSR;\n    }\n\n    if (OS_IMPL_SELF_EGID == st.st_gid)\n    {\n        /* our group owns the file so use group bits for simplified perms */\n        readbits |= S_IRGRP;\n        writebits |= S_IWGRP;\n        execbits |= S_IXGRP;\n    }\n\n    if (st.st_mode & readbits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_READ;\n    }\n    if (st.st_mode & writebits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_WRITE;\n    }\n    if (st.st_mode & execbits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_EXEC;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileStat_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <time.h>\n#include <sys/stat.h>\n\n/* Probe helpers inserted to capture control flow and state for debugging */\nstatic size_t OS_FileStat_SafeStrnlen(const char *s, size_t max)\n{\n    size_t i = 0;\n    if (s == NULL)\n    {\n        return 0;\n    }\n    for (; i < max && s[i] != '\\0'; ++i)\n    {\n        /* nothing */\n    }\n    return i;\n}\n\nstatic void OS_FileStat_LogProbe(const char *local_path, os_fstat_t *FileStats, const struct stat *st, int stat_ret, const char *note)\n{\n    FILE *fp = fopen(\"/tmp/logs/899.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not affect program behavior */\n        return;\n    }\n\n    /* Timestamp for each log entry */\n    time_t now = time(NULL);\n    fprintf(fp, \"--- OS_FileStat_Impl Probe (%s) ---\\n\", note ? note : \"(null)\");\n    fprintf(fp, \"time = %ld\\n\", (long)now);\n\n    /* local_path pointer and length (capped) and a short prefix of the path */\n    size_t plen = OS_FileStat_SafeStrnlen(local_path, 4096);\n    fprintf(fp, \"local_path ptr = %p, length (capped at 4096) = %zu\\n\", (const void *)local_path, plen);\n    if (local_path != NULL)\n    {\n        /* print up to 200 chars of the path to avoid huge logs */\n        size_t show = plen > 200 ? 200U : plen;\n        fprintf(fp, \"local_path[0..%zu] = '%.*s'%s\\n\", show, (int)show, local_path, plen > show ? \"...\" : \"\");\n    }\n    else\n    {\n        fprintf(fp, \"local_path is NULL\\n\");\n    }\n\n    fprintf(fp, \"FileStats ptr = %p\\n\", (void *)FileStats);\n\n    /* If stat() was performed, print details from struct stat */\n    if (st != NULL)\n    {\n        fprintf(fp, \"stat() returned st_size=%lld, st_mode=0%o, st_uid=%u, st_gid=%u, st_mtime=%ld\\n\",\n                (long long)st->st_size,\n                (unsigned int)st->st_mode,\n                (unsigned int)st->st_uid,\n                (unsigned int)st->st_gid,\n                (long)st->st_mtime);\n#if (_POSIX_C_SOURCE >= 200809L) || (_XOPEN_SOURCE >= 700)\n        /* If the platform has nanosecond resolution, try to log it as well */\n        /* Use conditional compilation same as the original code to avoid build issues */\n        fprintf(fp, \"stat() st_mtim.tv_sec=%ld, st_mtim.tv_nsec=%ld\\n\",\n                (long)st->st_mtim.tv_sec, (long)st->st_mtim.tv_nsec);\n#endif\n    }\n    else\n    {\n        fprintf(fp, \"stat() was not performed yet or failed. stat_ret = %d, errno = %d\\n\", stat_ret, errno);\n    }\n\n    /* If FileStats is writable, log what fields are present at this time */\n    if (FileStats != NULL)\n    {\n        /* Attempt to print known members used by the implementation */\n        fprintf(fp, \"FileStats->FileSize = %lld\\n\", (long long)FileStats->FileSize);\n        fprintf(fp, \"FileStats->FileModeBits = 0x%08x\\n\", (unsigned int)FileStats->FileModeBits);\n        fprintf(fp, \"(Note: other FileStats fields may exist but are not printed here)\\n\");\n    }\n\n    fprintf(fp, \"--- end probe ---\\n\\n\");\n    fclose(fp);\n}\n\nint32 OS_FileStat_Impl(const char *local_path, os_fstat_t *FileStats)\n{\n    struct stat     st;\n    mode_t          readbits;\n    mode_t          writebits;\n    mode_t          execbits;\n    struct timespec filetime;\n\n    /* Probe: entry with current inputs */\n    OS_FileStat_LogProbe(local_path, FileStats, NULL, 0, \"entry\");\n\n    if (stat(local_path, &st) < 0)\n    {\n        /* Probe: stat failed - record errno and inputs */\n        OS_FileStat_LogProbe(local_path, FileStats, NULL, -1, \"stat_failed\");\n        return OS_ERROR;\n    }\n\n    /* Probe: stat succeeded - record details from stat before continuing */\n    OS_FileStat_LogProbe(local_path, FileStats, &st, 0, \"stat_succeeded_before_assign\");\n\n    FileStats->FileSize = st.st_size;\n\n    /*\n     * NOTE: Traditional timestamps are only a whole number of seconds (time_t)\n     * POSIX.1-2008 expands this to have a full \"struct timespec\" with nanosecond\n     * resolution.\n     *\n     * GLIBC (and likely other C libraries that use similar feature selection)\n     * will expose this value based on _POSIX_C_SOURCE or _XOPEN_SOURCE minimum\n     * values.  Otherwise this just falls back to standard 1-second resolution\n     * available via the \"st_mtime\" member.\n     */\n#if (_POSIX_C_SOURCE >= 200809L) || (_XOPEN_SOURCE >= 700)\n    /*\n     * Better - use the full resolution (seconds + nanoseconds) as specified in POSIX.1-2008\n     */\n    filetime = st.st_mtim;\n#else\n    /*\n     * Fallback - every POSIX-compliant implementation must expose \"st_mtime\" field.\n     */\n    filetime.tv_sec  = st.st_mtime;\n    filetime.tv_nsec = 0;\n#endif\n\n    FileStats->FileTime = OS_TimeAssembleFromNanoseconds(filetime.tv_sec, filetime.tv_nsec);\n\n    /* note that the \"fst_mode\" member is already zeroed by the caller */\n    if (S_ISDIR(st.st_mode))\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_DIR;\n    }\n\n    /* always check world bits */\n    readbits  = S_IROTH;\n    writebits = S_IWOTH;\n    execbits  = S_IXOTH;\n\n    if (OS_IMPL_SELF_EUID == st.st_uid)\n    {\n        /* we own the file so use user bits for simplified perms */\n        readbits |= S_IRUSR;\n        writebits |= S_IWUSR;\n        execbits |= S_IXUSR;\n    }\n\n    if (OS_IMPL_SELF_EGID == st.st_gid)\n    {\n        /* our group owns the file so use group bits for simplified perms */\n        readbits |= S_IRGRP;\n        writebits |= S_IWGRP;\n        execbits |= S_IXGRP;\n    }\n\n    if (st.st_mode & readbits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_READ;\n    }\n    if (st.st_mode & writebits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_WRITE;\n    }\n    if (st.st_mode & execbits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_EXEC;\n    }\n\n    /* Final probe: record final FileStats values and stat details */\n    OS_FileStat_LogProbe(local_path, FileStats, &st, 0, \"exit_success\");\n\n    return OS_SUCCESS;\n}\n"
}