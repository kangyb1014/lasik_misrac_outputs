{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) can read up to 9 bytes from RefText. If RefText is NULL or refers to a buffer that is not NUL-terminated within the first 9 bytes (for example a short/non-terminated string or an object smaller than 9 bytes), strncmp may access memory beyond the bounds of the object referenced by RefText, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetValueText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2879.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetValueText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetValueText:\n```c\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    return TempBuf;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetValueText code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: records control flow and state to /tmp/logs/2879.txt */\nstatic void UtAssert_LogProbe(const char *stage, char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                              UtAssert_Radix_t RadixType, const char *branch)\n{\n    FILE *f = fopen(\"/tmp/logs/2879.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* Log pointer values and key primitive state */\n    fprintf(f, \"Stage=%s, TempBuf=%p, TempSz=%zu, InValue=%lld, IsUnsigned=%d, RadixType=%d, Branch=%s\\n\",\n            stage, (void *)TempBuf, TempSz, (long long)InValue, (int)IsUnsigned, (int)RadixType,\n            (branch != NULL) ? branch : \"<null>\");\n\n    /* Attempt a safe preview of the buffer contents if TempBuf appears valid. Do not assume NUL-termination. */\n    if (TempBuf != NULL && TempSz > 0)\n    {\n        /* Limit preview to a small number of bytes to avoid large reads */\n        size_t peek = (TempSz < 64) ? TempSz : 64;\n        char preview[65];\n\n        /* Use snprintf to ensure preview is NUL-terminated. This will read at most 'peek' bytes from TempBuf. */\n        /* Note: reading TempBuf is only safe if TempBuf truly points to TempSz bytes as intended by the caller. */\n        memset(preview, 0, sizeof(preview));\n        /* Use %.*s to limit how many characters are read for formatting (but the underlying printf family will still read up to 'peek' bytes). */\n        snprintf(preview, sizeof(preview), \"%.*s\", (int)peek, TempBuf);\n        fprintf(f, \"Preview(first %zu bytes): '%s'\\n\", peek, preview);\n    }\n    else\n    {\n        fprintf(f, \"Preview: <no buffer or zero size>\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    const char *branch = NULL;\n\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        branch = \"BOOLEAN\";\n        UtAssert_LogProbe(\"before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType, branch);\n\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        branch = \"OCTAL\";\n        UtAssert_LogProbe(\"before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType, branch);\n\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        branch = \"HEX\";\n        UtAssert_LogProbe(\"before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType, branch);\n\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        branch = \"UNSIGNED\";\n        UtAssert_LogProbe(\"before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType, branch);\n\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        branch = \"SIGNED\";\n        UtAssert_LogProbe(\"before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType, branch);\n\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    /* Log the resulting buffer after formatting */\n    UtAssert_LogProbe(\"after\", TempBuf, TempSz, InValue, IsUnsigned, RadixType, branch);\n\n    return TempBuf;\n}"
}