{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) can read beyond the bounds of ActualText if ActualText is NULL or points to a buffer that does not contain at least (sizeof(UTASSERT_PREFIX)-1) accessible characters (for example a shorter/non\u2011NUL\u2011terminated string). In those cases strncmp will access memory past the object and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetValueText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2879.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetValueText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetValueText:\n```c\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    return TempBuf;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetValueText code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe helper that logs state before and after value formatting.\n * Writes to /tmp/logs/2879.txt. Does not change the original logic.\n */\nstatic void UtAssert_LogProbe(const char *stage, char *TempBuf, size_t TempSz, long long InValue, bool IsUnsigned, int RadixType)\n{\n    FILE *f = fopen(\"/tmp/logs/2879.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log basic metadata (do not dereference TempBuf yet) */\n    fprintf(f, \"[%s] Radix=%d IsUnsigned=%d InValue=%lld TempBuf=%p TempSz=%zu\\n\",\n            stage, RadixType, IsUnsigned ? 1 : 0, InValue, (void *)TempBuf, TempSz);\n\n    /* If buffer is present and non-zero size, safely print its content up to TempSz-1\n     * We only read up to TempSz-1 characters, matching how snprintf will NUL-terminate when TempSz>0.\n     */\n    if (TempBuf != NULL && TempSz > 0)\n    {\n        size_t max = (TempSz > 0) ? (TempSz - 1) : 0;\n        size_t i;\n\n        /* Determine actual printable length without overrunning the bound max. */\n        for (i = 0; i < max; ++i)\n        {\n            if (TempBuf[i] == '\\0')\n                break;\n        }\n\n        fprintf(f, \"[%s] TempBufContent(len=%zu): '\", stage, i);\n        if (i > 0)\n        {\n            (void)fwrite(TempBuf, 1, i, f);\n        }\n        fprintf(f, \"'\\n\");\n    }\n    else\n    {\n        fprintf(f, \"[%s] TempBufContent: <NULL or zero size>\\n\", stage);\n    }\n\n    fclose(f);\n}\n\n/* Preserve the original signature and logic as much as possible.\n * Note: UT_IntCheck_t and UtAssert_Radix_t are not redefined here; the function\n * uses compatible casts to log values. The probes use conservative reads to\n * avoid introducing new out-of-bounds accesses.\n */\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, /* UT_IntCheck_t */ long long InValue, bool IsUnsigned,\n                                         /* UtAssert_Radix_t */ int RadixType)\n{\n    /* Log pre-state (do not read TempBuf contents here) */\n    UtAssert_LogProbe(\"before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n\n    if (RadixType == /* UtAssert_Radix_BOOLEAN */ 0)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == /* UtAssert_Radix_OCTAL */ 1)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == /* UtAssert_Radix_HEX */ 2)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    /* Log post-state including the formatted buffer content (safe if TempSz>0 and TempBuf not NULL)\n     * This provides evidence for callers that might perform operations like strncmp on the returned text.\n     */\n    UtAssert_LogProbe(\"after\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n\n    return TempBuf;\n}\n"
}