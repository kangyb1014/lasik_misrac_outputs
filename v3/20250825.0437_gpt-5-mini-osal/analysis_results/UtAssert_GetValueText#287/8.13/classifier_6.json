{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetValueText:\n```c\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    return TempBuf;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nsnprintf(TempBuf, TempSz, \"true\");\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: TempBuf is used as a writable destination in snprintf, so it must be a non-const char *. Rule 8.13 requires pointers to be const-qualified when they can be, but here the buffer is intentionally modified, so using char * is appropriate. Returning the buffer as a const char * is also acceptable (adding const), and the string literal \"true\" is used as the format string. Therefore this fragment does not violate MISRA C 2023 Rule 8.13."
}