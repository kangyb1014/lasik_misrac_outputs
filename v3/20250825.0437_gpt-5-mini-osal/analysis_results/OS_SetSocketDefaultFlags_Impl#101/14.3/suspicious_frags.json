{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SetSocketDefaultFlags_Impl:\n```c\nvoid OS_SetSocketDefaultFlags_Impl(const OS_object_token_t *token)\n{\n    OS_impl_file_internal_record_t *impl;\n    int                             os_flags;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_flags = fcntl(impl->fd, F_GETFL);\n    if (os_flags == -1)\n    {\n        /* No recourse if F_GETFL fails - just report the error and move on. */\n        OS_DEBUG(\"fcntl(F_GETFL): %s\\n\", strerror(errno));\n    }\n    else\n    {\n        os_flags |= OS_IMPL_SOCKET_FLAGS;\n        if (fcntl(impl->fd, F_SETFL, os_flags) == -1)\n        {\n            /* No recourse if F_SETFL fails - just report the error and move on. */\n            OS_DEBUG(\"fcntl(F_SETFL): %s\\n\", strerror(errno));\n        }\n    }\n\n    impl->selectable = true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SetSocketDefaultFlags_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_IMPL_SOCKET_FLAGS O_NONBLOCK\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No invariant controlling expressions were found in the provided function. The only control statements are:\n- if (os_flags == -1)\n- if (fcntl(impl->fd, F_SETFL, os_flags) == -1)\nThese depend on the runtime return value of fcntl and the runtime variable os_flags, so they are not invariant. There are no while/for/do-while loops or other conditionals that use compile-time constants or otherwise invariant expressions. The macro OS_IMPL_SOCKET_FLAGS (O_NONBLOCK) is used only to set flags (a data expression), not as a controlling expression. The OS_OBJECT_TABLE_GET macro and token usage affect data indexing but do not introduce invariant control expressions. Therefore no code fragments require investigation for MISRA C 2023 Rule 14.3 in this function."
}