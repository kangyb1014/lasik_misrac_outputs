{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator field is declared as void *arg, which discards const-qualification when a caller wants to pass a pointer to immutable data (for example a const char * Filename or other const context pointer). Because the code never needs to modify the object pointed to by arg (it is only forwarded to callback functions), the pointer could/should be declared const void *arg (and the callback prototypes adjusted to accept const void *). As written, assigning a const-qualified pointer to iter.arg would implicitly discard const, violating the intent of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1583.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - writes to /tmp/logs/1583.txt */\nstatic void os_close_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1583.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Don't affect original logic if logging fails */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    os_close_log(\"OS_CloseFileByName ENTRY: Filename=%p (%s)\", (const void *)Filename, Filename ? Filename : \"(null)\");\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    os_close_log(\"initial return_code=%d\", return_code);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    os_close_log(\"Iterator initialized: iter@%p token=%u\", (void *)&iter, (unsigned int)iter.token);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        os_close_log(\"Iterator advanced: token=%u stream=%p\", (unsigned int)iter.token, (void *)stream);\n\n        /* Log stream fields used in the decision */\n        os_close_log(\"stream fields: stream_name=\\\"%s\\\" socket_domain=%d\", stream->stream_name ? stream->stream_name : \"(null)\", stream->socket_domain);\n\n        /* compute strcmp result in order to log it without changing logic */\n        int strcmp_result = 1; /* non-zero by default */\n        if (stream->stream_name != NULL && Filename != NULL)\n        {\n            strcmp_result = strcmp(stream->stream_name, Filename);\n        }\n\n        os_close_log(\"strcmp(stream->stream_name, Filename) => %d\", strcmp_result);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp_result == 0))\n        {\n            os_close_log(\"MATCH found for token=%u name=\\\"%s\\\" - invoking OS_ObjectIdIteratorProcessEntry\", (unsigned int)iter.token, stream->stream_name ? stream->stream_name : \"(null)\");\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            os_close_log(\"OS_ObjectIdIteratorProcessEntry returned close_code=%d\", close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                os_close_log(\"Updating return_code from %d to %d\", return_code, close_code);\n                return_code = close_code;\n            }\n            else\n            {\n                os_close_log(\"Keeping return_code=%d (no update needed)\", return_code);\n            }\n        }\n        else\n        {\n            os_close_log(\"No match for token=%u (socket_domain=%d strcmp=%d)\", (unsigned int)iter.token, stream->socket_domain, strcmp_result);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    os_close_log(\"Iterator destroyed. Final return_code=%d\", return_code);\n    os_close_log(\"OS_CloseFileByName EXIT: return %d\", return_code);\n\n    return return_code;\n}\n"
}