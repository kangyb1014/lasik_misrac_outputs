{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(stream->stream_name, Filename) can read beyond the bounds of the stream_name array (and/or beyond Filename) if either string is not NUL-terminated. In particular, if stream->stream_name contains OS_MAX_PATH_LEN non-NUL characters (no terminating '\\0' within the array), strcmp will continue reading past the OS_stream_table entry into adjacent memory, causing an out-of-bounds access and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1589.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe/helper function to log stream and Filename related state to a file.\n * This function is intentionally conservative about what it reads:\n * - It copies exactly OS_MAX_PATH_LEN bytes from stream->stream_name (this is\n *   expected to be the declared size of that array in the system) and examines\n *   those bytes for a terminating NUL. This avoids reading beyond the\n *   stream_name object if it is declared as OS_MAX_PATH_LEN.\n * - It does NOT attempt to read arbitrary amounts from Filename to avoid\n *   introducing additional out-of-bounds reads beyond the original strcmp.\n */\nstatic void OS_CloseFileByName_Log(const OS_object_iter_t *iter,\n                                   const OS_stream_internal_record_t *stream,\n                                   const char *Filename,\n                                   const char *phase,\n                                   int cmp_res)\n{\n    FILE *fp = fopen(\"/tmp/logs/1589.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not change program behavior */\n    }\n\n    /* Basic context information */\n    fprintf(fp, \"[OS_CloseFileByName] phase=%s, iter.token=%lu, stream_ptr=%p, stream_name_ptr=%p, Filename_ptr=%p, socket_domain=%d\\n\",\n            phase,\n            (unsigned long)iter->token,\n            (const void *)stream,\n            (const void *)stream->stream_name,\n            (const void *)Filename,\n            (int)stream->socket_domain);\n\n    /* Safely copy and inspect the stream_name buffer up to OS_MAX_PATH_LEN bytes */\n    {\n        /* Local buffer to hold a snapshot of the stream_name bytes */\n        char snap[OS_MAX_PATH_LEN];\n        size_t i;\n\n        /* Copy exactly OS_MAX_PATH_LEN bytes from the stream_name object */\n        memcpy(snap, stream->stream_name, OS_MAX_PATH_LEN);\n\n        /* Search for a NUL within the snapshot */\n        void *nulp = memchr(snap, '\\0', OS_MAX_PATH_LEN);\n        if (nulp != NULL)\n        {\n            size_t slen = (size_t)((char *)nulp - snap);\n            fprintf(fp, \"  stream_name: NUL found within first %d bytes, length=%zu, content=\\\"%.*s\\\"\\n\",\n                    OS_MAX_PATH_LEN, slen, (int)slen, snap);\n        }\n        else\n        {\n            fprintf(fp, \"  stream_name: NO NUL within first %d bytes. Dumping first %d bytes as hex:\\n\",\n                    OS_MAX_PATH_LEN, OS_MAX_PATH_LEN);\n            for (i = 0; i < (size_t)OS_MAX_PATH_LEN; ++i)\n            {\n                fprintf(fp, \"%02X%s\", (unsigned char)snap[i], (i + 1u) % 16u == 0u ? \"\\n\" : \" \");\n            }\n            if ((OS_MAX_PATH_LEN % 16) != 0)\n            {\n                fprintf(fp, \"\\n\");\n            }\n        }\n    }\n\n    /* Log result of strcmp if available (-2 indicates not executed) */\n    if (cmp_res != -2)\n    {\n        fprintf(fp, \"  strcmp result = %d\\n\", cmp_res);\n    }\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Preserve original short-circuit behavior: only call strcmp when socket_domain indicates a file stream */\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Log state just before performing strcmp */\n            OS_CloseFileByName_Log(&iter, stream, Filename, \"pre-strcmp\", -2);\n\n            /* Perform strcmp once and capture result so we can log it and reuse it */\n            int cmp_res = strcmp(stream->stream_name, Filename);\n\n            /* Log the result and the relevant state after strcmp */\n            OS_CloseFileByName_Log(&iter, stream, Filename, \"post-strcmp\", cmp_res);\n\n            if (cmp_res == 0)\n            {\n                /* call OS_close() on the entry referred to by the iterator */\n                close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n                if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n                {\n                    return_code = close_code;\n                }\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n"
}