{
  "user_message": "Target function code is:\n```c\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_DoSelect': {'callees': [], 'callers': ['OS_SelectSingle_Impl', 'OS_SelectMultiple_Impl']}, 'OS_SelectSingle_Impl': {'callees': ['OS_ObjectIndexFromToken', 'OS_DoSelect'], 'callers': ['OS_GenericRead_Impl', 'OS_GenericWrite_Impl', 'OS_SocketConnect_Impl', 'OS_SocketAccept_Impl', 'OS_SocketRecvFrom_Impl', 'OS_SelectSingle']}, 'OS_SelectMultiple_Impl': {'callees': ['OS_FdSet_ConvertIn_Impl', 'OS_DoSelect', 'OS_FdSet_ConvertOut_Impl'], 'callers': ['OS_SelectMultiple']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA for loop shall be well-formed. The three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "select",
    "clock_gettime",
    "memset",
    "errno",
    "EINTR",
    "EAGAIN",
    "struct timeval",
    "struct timespec",
    "fd_set",
    "int32",
    "OS_ERROR",
    "OS_ERROR_TIMEOUT",
    "OS_SUCCESS",
    "CLOCK_MONOTONIC"
  ],
  "explanation": "Rationale for each required symbol (concise):\n\n- select\n  - OS_DoSelect calls select(). MISRA\u2019s for-loop rule treats the behaviour of called functions as part of a for-loop body; to be certain there are no hidden for-loops or side-effects in select (or that select is not a macro expanding to a for) you need the declaration/definition (or knowledge that it is a library call). Also needed to interpret return values and error handling.\n\n- clock_gettime\n  - Called twice in OS_DoSelect. Need its prototype/definition (or confirmation it is a library call) to ensure it is not a macro/function containing for-loops or side effects that would affect the for-loop rule if invoked inside a for loop.\n\n- memset\n  - Called to zero ts_end in one branch. Could be a macro or inline implementation; must confirm it contains no for-loops or side-effects relevant to MISRA rule.\n\n- errno\n  - Used in the do/while retry condition (errno == EINTR || errno == EAGAIN). Need to know how errno is provided (macro/extern) to ensure the condition has no hidden side effects and to correctly reason about the loop condition semantics.\n\n- EINTR, EAGAIN\n  - Error macros/constants used in the retry condition. Required to interpret the do/while condition and to determine whether the loop condition uses objects with side effects (they are constants, but must be known).\n\n- struct timeval\n  - OS_DoSelect reads/writes tv.tv_sec and tv.tv_usec. Need the struct definition (types of fields, signedness/width) to reason about arithmetic and checks that affect loop control or potential side effects (e.g., if accessor macros existed that had side effects).\n\n- struct timespec\n  - Fields ts_now and ts_end are used in arithmetic. Need the definition (tv_sec/tv_nsec types) to reason about differences, sign handling, and to ensure no macros hide loop-like behaviour.\n\n- fd_set\n  - Parameter type passed to select. Knowing its definition (or that standard FD macros are used elsewhere) ensures no unexpected macro expansions or for-loops are introduced through fd_set operations.\n\n- int32\n  - The function uses int32 as a return/parameter type. Need the typedef to confirm signedness/width for correct semantic reasoning (not directly about for-loops but relevant to interpreting loop counters if any were present).\n\n- OS_ERROR, OS_ERROR_TIMEOUT, OS_SUCCESS\n  - Return codes produced by OS_DoSelect. Needed to interpret the function\u2019s observable behaviour. If analyzing for compliance, we must know these macros/enum values and whether their definitions introduce macros with side effects or expansion containing loops.\n\n- CLOCK_MONOTONIC\n  - Symbol passed to clock_gettime; include to ensure it is a simple macro/constant and not a complex macro with side effects.\n\nNote on scope: OS_DoSelect itself contains no for-loops (only a do/while). MISRA rule about well-formed for-loops requires inspecting any functions called from the body of a for-loop. For completeness we include the external functions/macros used by OS_DoSelect so the next analyser can (a) confirm they are library calls or simple macros, (b) check they do not expand to or call code with for-loops that would violate the rule if OS_DoSelect were used inside a for-loop. If you confirm these symbols are standard library calls/macros (no hidden for-loops or side-effects), then OS_DoSelect contains no for-loops and therefore does not itself violate the MISRA C for-loop well-formedness rule."
}