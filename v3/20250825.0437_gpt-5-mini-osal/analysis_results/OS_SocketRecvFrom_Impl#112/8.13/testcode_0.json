{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'impl' is only used for reading fields (impl->selectable, impl->fd) and is not modified in this function, so it could and should be declared as pointing to a const-qualified type (const OS_impl_file_internal_record_t *impl). Declaring it non-const therefore violates MISRA C 2023 Rule 8.13. Note: if other code (or the macro OS_OBJECT_TABLE_GET) requires a modifiable pointer or the object is intentionally mutated, then const would not be possible; based on the shown usage it can be const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom_Impl:\n```c\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n\n/* Helper logging function to append diagnostic information to /tmp/logs/1123.txt */\nstatic void OS_SocketRecvFrom_Impl_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1123.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log initial values: token pointer, impl pointer and impl fields if available */\n    OS_SocketRecvFrom_Impl_Log(\"[entry] token=%p impl=%p timeout=%d buffer=%p buflen=%zu RemoteAddr=%p\\n\",\n                               (const void *)token, (const void *)impl, (int)timeout, buffer, buflen, (const void *)RemoteAddr);\n\n    if (impl != NULL)\n    {\n        OS_SocketRecvFrom_Impl_Log(\"[entry] impl->selectable=%d impl->fd=%d\\n\", (int)impl->selectable, (int)impl->fd);\n    }\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n        OS_SocketRecvFrom_Impl_Log(\"[addr] RemoteAddr==NULL -> sa=%p addrlen=%u\\n\", (const void *)sa, (unsigned)addrlen);\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n        OS_SocketRecvFrom_Impl_Log(\"[addr] RemoteAddr!=NULL -> sa=%p addrlen=%u (OS_SOCKADDR_MAX_LEN)\\n\", (const void *)sa, (unsigned)addrlen);\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        OS_SocketRecvFrom_Impl_Log(\"[flow] impl->selectable true -> calling OS_SelectSingle_Impl (timeout=%d)\\n\", (int)timeout);\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        OS_SocketRecvFrom_Impl_Log(\"[flow] after select: return_code=%d operation=0x%08x waitflags=%d\\n\",\n                                   (int)return_code, (unsigned)operation, waitflags);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n            OS_SocketRecvFrom_Impl_Log(\"[flow] impl->selectable false && timeout==0 -> waitflags=MSG_DONTWAIT\\n\");\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n            OS_SocketRecvFrom_Impl_Log(\"[flow] impl->selectable false && timeout!=0 -> waitflags=0 (timeout not honored)\\n\");\n        }\n        return_code = OS_SUCCESS;\n        OS_SocketRecvFrom_Impl_Log(\"[flow] set return_code=OS_SUCCESS\\n\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            OS_SocketRecvFrom_Impl_Log(\"[flow] operation indicates NOT readable (operation=0x%08x) -> timeout\\n\", (unsigned)operation);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            /* Log before calling recvfrom */\n            OS_SocketRecvFrom_Impl_Log(\"[recv] calling recvfrom(fd=%d, buffer=%p, buflen=%zu, flags=%d, sa=%p, &addrlen=%u)\\n\",\n                                       (int)impl->fd, buffer, buflen, waitflags, (const void *)sa, (unsigned)addrlen);\n\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n\n            OS_SocketRecvFrom_Impl_Log(\"[recv] recvfrom returned %d errno=%d (%s) addrlen=%u\\n\",\n                                       os_result, errno, strerror(errno), (unsigned)addrlen);\n\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    OS_SocketRecvFrom_Impl_Log(\"[recv] would block -> OS_QUEUE_EMPTY\\n\");\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    OS_SocketRecvFrom_Impl_Log(\"[recv] error -> OS_ERROR (errno=%d %s)\\n\", errno, strerror(errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                    OS_SocketRecvFrom_Impl_Log(\"[recv] success -> return_code=%d RemoteAddr->ActualLength=%u\\n\",\n                                               (int)return_code, (unsigned)RemoteAddr->ActualLength);\n                }\n                else\n                {\n                    OS_SocketRecvFrom_Impl_Log(\"[recv] success -> return_code=%d RemoteAddr==NULL\\n\", (int)return_code);\n                }\n            }\n        }\n    }\n\n    OS_SocketRecvFrom_Impl_Log(\"[exit] returning %d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}