{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_CondVarTimedWait_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1399.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameter pointer state (do not dereference) */\n    OS_CondVarTimedWait_LogProbe(\"ENTRY: OS_CondVarTimedWait var_id=0x%\" PRIxPTR \", abs_wakeup_time=%p\",\n                                 (uintptr_t)var_id, (const void *)abs_wakeup_time);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    OS_CondVarTimedWait_LogProbe(\"After OS_CHECK_POINTER: abs_wakeup_time=%p\",\n                                 (const void *)abs_wakeup_time);\n\n    /* Check Parameters */\n    OS_CondVarTimedWait_LogProbe(\"Calling OS_ObjectIdGetById: lock_mode=%d, object_type=%d, var_id=0x%\" PRIxPTR,\n                                 (int)OS_LOCK_MODE_NONE, (int)OS_OBJECT_TYPE_OS_CONDVAR, (uintptr_t)var_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById returned: return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token location (do not access token internals) */\n        OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById success: token_address=%p\", (void *)&token);\n\n        OS_CondVarTimedWait_LogProbe(\"Calling OS_CondVarTimedWait_Impl with token_address=%p and abs_wakeup_time=%p\",\n                                     (void *)&token, (const void *)abs_wakeup_time);\n\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n\n        OS_CondVarTimedWait_LogProbe(\"OS_CondVarTimedWait_Impl returned: return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById failed: skip Impl, returning return_code=%ld\", (long)return_code);\n    }\n\n    OS_CondVarTimedWait_LogProbe(\"EXIT: OS_CondVarTimedWait returning return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmplezd2aqs/src/src/os/shared/src/osapi-condvar.c: In function 'OS_CondVarTimedWait_LogProbe':\n/tmp/tmplezd2aqs/src/src/os/shared/src/osapi-condvar.c:261:23: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  261 |     vfprintf(fp, fmt, ap);\n      |                       ^~\n/tmp/tmplezd2aqs/src/src/os/shared/src/osapi-condvar.c: In function 'OS_CondVarTimedWait':\n/tmp/tmplezd2aqs/src/src/os/shared/src/osapi-condvar.c:275:73: error: expected ')' before 'PRIxPTR'\n  275 |     OS_CondVarTimedWait_LogProbe(\"ENTRY: OS_CondVarTimedWait var_id=0x%\" PRIxPTR \", abs_wakeup_time=%p\",\n      |                                 ~                                       ^~~~~~~~\n      |                                                                         )\n/tmp/tmplezd2aqs/src/src/os/shared/src/osapi-condvar.c:55:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   54 | #include \"osapi-task.h\"\n  +++ |+#include <inttypes.h>\n   55 | \n/tmp/tmplezd2aqs/src/src/os/shared/src/osapi-condvar.c:285:104: error: expected ')' before 'PRIxPTR'\n  285 |     OS_CondVarTimedWait_LogProbe(\"Calling OS_ObjectIdGetById: lock_mode=%d, object_type=%d, var_id=0x%\" PRIxPTR,\n      |                                 ~                                                                      ^~~~~~~~\n      |                                                                                                        )\n/tmp/tmplezd2aqs/src/src/os/shared/src/osapi-condvar.c:285:105: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  285 |     OS_CondVarTimedWait_LogProbe(\"Calling OS_ObjectIdGetById: lock_mode=%d, object_type=%d, var_id=0x%\" PRIxPTR,\n      |                                                                                                         ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/__/__/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3353: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarTimedWait as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Minimal type and constant definitions to allow compilation of these functions\n * in a standalone test environment. These mirror the names used in the original\n * code and are intentionally lightweight (no behavior/mocks provided). */\n\ntypedef uintptr_t osal_id_t;\n\ntypedef struct\n{\n    /* placeholder for real OS_time_t members; callers only pass pointer here */\n    int dummy;\n} OS_time_t;\n\ntypedef struct\n{\n    /* opaque token representation for compilation only */\n    void *opaque;\n} OS_object_token_t;\n\ntypedef int32_t int32;\n\nenum\n{\n    OS_SUCCESS = 0,\n    OS_LOCK_MODE_NONE = 0,\n    OS_OBJECT_TYPE_OS_CONDVAR = 1,\n    OS_INVALID_POINTER = -1\n};\n\n/* External functions - declared but not defined here (no mocks) */\nint32 OS_ObjectIdGetById(int lock_mode, int object_type, osal_id_t id, OS_object_token_t *token);\nint32 OS_CondVarTimedWait_Impl(OS_object_token_t *token, const OS_time_t *abs_wakeup_time);\n\n/* Simple logging probe - best-effort, does not affect logic */\nstatic void OS_CondVarTimedWait_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1399.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameter pointer state (do not dereference) */\n    OS_CondVarTimedWait_LogProbe(\"ENTRY: OS_CondVarTimedWait var_id=0x%\" PRIxPTR \", abs_wakeup_time=%p\",\n                                 (uintptr_t)var_id, (const void *)abs_wakeup_time);\n\n    /* Check parameters (inline check instead of macro) */\n    if (abs_wakeup_time == NULL)\n    {\n        OS_CondVarTimedWait_LogProbe(\"OS_CondVarTimedWait: abs_wakeup_time is NULL, returning error\");\n        return OS_INVALID_POINTER;\n    }\n\n    OS_CondVarTimedWait_LogProbe(\"After pointer check: abs_wakeup_time=%p\",\n                                 (const void *)abs_wakeup_time);\n\n    /* Check Parameters */\n    OS_CondVarTimedWait_LogProbe(\"Calling OS_ObjectIdGetById: lock_mode=%d, object_type=%d, var_id=0x%\" PRIxPTR,\n                                 (int)OS_LOCK_MODE_NONE, (int)OS_OBJECT_TYPE_OS_CONDVAR, (uintptr_t)var_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById returned: return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token location (do not access token internals) */\n        OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById success: token_address=%p\", (void *)&token);\n\n        OS_CondVarTimedWait_LogProbe(\"Calling OS_CondVarTimedWait_Impl with token_address=%p and abs_wakeup_time=%p\",\n                                     (void *)&token, (const void *)abs_wakeup_time);\n\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n\n        OS_CondVarTimedWait_LogProbe(\"OS_CondVarTimedWait_Impl returned: return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById failed: skip Impl, returning return_code=%ld\", (long)return_code);\n    }\n\n    OS_CondVarTimedWait_LogProbe(\"EXIT: OS_CondVarTimedWait returning return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Fixed compilation errors by:\n- Including the required headers (<stdarg.h> for va_list and <inttypes.h> for PRIxPTR) and <stdint.h> for uintptr_t.\n- Replacing the undefined OS_CHECK_POINTER macro with an explicit null-pointer check that logs and returns an error code.\n- Providing minimal typedefs and constant enums (osal_id_t, OS_time_t, OS_object_token_t, int32, OS_SUCCESS, etc.) so the file compiles standalone without changing the original control flow.\n- Declaring external functions OS_ObjectIdGetById and OS_CondVarTimedWait_Impl (not mocked or defined here) so linkage can be provided by the larger project.\n\nThese changes preserve the original logic and logging behavior while ensuring the code compiles successfully."
}