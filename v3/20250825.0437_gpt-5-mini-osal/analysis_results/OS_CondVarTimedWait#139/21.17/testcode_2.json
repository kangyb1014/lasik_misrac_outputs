{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) is made without validating either pointer or guaranteeing a NUL terminator. If TypeName or StubPtr->Data.Buff.ContentTypeStr is NULL (e.g. a caller passed NULL) strcmp will dereference a NULL pointer, and if either points to a non-NUL-terminated buffer strcmp can read past the allocated object. Both cases can result in accesses beyond object bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarTimedWait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait:\n```c\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarTimedWait code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/1399.txt */\nstatic void OS_CondVarTimedWait_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1399.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameter pointer state (do not dereference) */\n    OS_CondVarTimedWait_LogProbe(\"ENTRY: OS_CondVarTimedWait var_id=0x%\" PRIxPTR \", abs_wakeup_time=%p\",\n                                 (uintptr_t)var_id, (const void *)abs_wakeup_time);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    OS_CondVarTimedWait_LogProbe(\"After OS_CHECK_POINTER: abs_wakeup_time=%p\",\n                                 (const void *)abs_wakeup_time);\n\n    /* Check Parameters */\n    OS_CondVarTimedWait_LogProbe(\"Calling OS_ObjectIdGetById: lock_mode=%d, object_type=%d, var_id=0x%\" PRIxPTR,\n                                 (int)OS_LOCK_MODE_NONE, (int)OS_OBJECT_TYPE_OS_CONDVAR, (uintptr_t)var_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById returned: return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token location (do not access token internals) */\n        OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById success: token_address=%p\", (void *)&token);\n\n        OS_CondVarTimedWait_LogProbe(\"Calling OS_CondVarTimedWait_Impl with token_address=%p and abs_wakeup_time=%p\",\n                                     (void *)&token, (const void *)abs_wakeup_time);\n\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n\n        OS_CondVarTimedWait_LogProbe(\"OS_CondVarTimedWait_Impl returned: return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OS_CondVarTimedWait_LogProbe(\"OS_ObjectIdGetById failed: skip Impl, returning return_code=%ld\", (long)return_code);\n    }\n\n    OS_CondVarTimedWait_LogProbe(\"EXIT: OS_CondVarTimedWait returning return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}