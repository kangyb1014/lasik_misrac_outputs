{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) uses the pointer parameter 'token' without a prior NULL check. If OS_ObjectIdTransactionInit is ever called with token == NULL, the memset will attempt to write through a NULL pointer (access beyond the object bounds). Although sizeof(*token) is computed at compile time, the runtime buffer pointer passed to memset may be invalid. This can result in out-of-bounds access and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarTimedWait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait:\n```c\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarTimedWait code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/1399.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1399.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try fallback location if directory doesn't exist (best-effort, do not alter logic) */\n        f = fopen(\"/tmp/1399_fallback_1399.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic void probe_dump_bytes(const void *ptr, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)ptr;\n    FILE *f = fopen(\"/tmp/logs/1399.txt\", \"a\");\n    if (f == NULL)\n    {\n        f = fopen(\"/tmp/1399_fallback_1399.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n    }\n\n    for (size_t i = 0; i < len; ++i)\n    {\n        fprintf(f, \"%02X\", (unsigned) p[i]);\n        if ((i + 1) % 16 == 0)\n            fprintf(f, \"\\n\");\n        else if (i + 1 < len)\n            fprintf(f, \" \");\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Forward declarations of external types and functions used in the original code.\n   These are declared only to allow this file to compile as a translation unit\n   in isolation for testing the probes. In the real project these come from headers. */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\ntypedef struct OS_time_t_tag OS_time_t;\ntypedef struct OS_object_token_tag OS_object_token_t;\n\n/* External functions - keep signatures so original logic is preserved. */\nextern int32 OS_ObjectIdGetById(int lock_mode, int object_type, osal_id_t id, OS_object_token_t *token);\nextern int32 OS_CondVarTimedWait_Impl(const OS_object_token_t *token, const OS_time_t *abs_wakeup_time);\nextern void OS_CHECK_POINTER(const void *ptr);\n\n/* Keep original function, but add probes for logging. */\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameters (pointer values only; never dereference abs_wakeup_time) */\n    probe_log(\"OS_CondVarTimedWait: entry var_id=%llu abs_wakeup_time=%p\", (unsigned long long)var_id, (const void *)abs_wakeup_time);\n\n    /* Check parameters */\n    /* Log before pointer check so callers that pass NULL are captured in logs */\n    probe_log(\"OS_CondVarTimedWait: about to check abs_wakeup_time pointer\");\n    OS_CHECK_POINTER(abs_wakeup_time);\n    probe_log(\"OS_CondVarTimedWait: abs_wakeup_time pointer passed check\");\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    probe_log(\"OS_CondVarTimedWait: OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Dump the token bytes to capture the runtime token state (safe: token is a local object)\n           This helps reproduce scenarios where later code may operate on the token (e.g. passing\n           a pointer derived from it) that could lead to violations in other functions. */\n        probe_log(\"OS_CondVarTimedWait: dumping token bytes (size=%zu)\", sizeof(token));\n        probe_dump_bytes(&token, sizeof(token));\n\n        probe_log(\"OS_CondVarTimedWait: calling OS_CondVarTimedWait_Impl with token @%p abs_wakeup_time=%p\", (void*)&token, (const void*)abs_wakeup_time);\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n        probe_log(\"OS_CondVarTimedWait: OS_CondVarTimedWait_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"OS_CondVarTimedWait: skipping impl due to previous error %d\", (int)return_code);\n    }\n\n    probe_log(\"OS_CondVarTimedWait: exit returning %d\", (int)return_code);\n    return return_code;\n}\n"
}