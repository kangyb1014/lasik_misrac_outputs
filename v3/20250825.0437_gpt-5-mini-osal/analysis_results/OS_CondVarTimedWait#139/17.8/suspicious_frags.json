{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait:\n```c\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarTimedWait:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_CondVarTimedWait_Impl(const OS_object_token_t *token, const OS_time_t *abs_wakeup_time)\n{\n    struct timespec                    limit;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);\n    limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);\n\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);\n    pthread_cleanup_pop(false);\n\n    if (status == ETIMEDOUT)\n    {\n        return OS_ERROR_TIMEOUT;\n    }\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\ntypedef struct\n{\n    int64 ticks; /**< Ticks elapsed since reference point */\n} OS_time_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment in the provided code path appears to modify a function parameter itself. Reasons:\n- OS_CondVarTimedWait receives abs_wakeup_time as const OS_time_t * and never assigns to abs_wakeup_time; it is only checked for NULL via OS_CHECK_POINTER (which expands to a null-check) and then passed unchanged to OS_CondVarTimedWait_Impl.\n- The local variable token is a local object; passing &token to OS_CondVarTimedWait_Impl does not modify any function parameter of OS_CondVarTimedWait.\n- OS_CondVarTimedWait_Impl declares its parameters as const pointers (const OS_object_token_t *token, const OS_time_t *abs_wakeup_time) and does not perform any assignment to the pointer parameters themselves \u2014 it only dereferences them to access the pointed-to objects, which is allowed by the rule.\n- Macro usage (OS_CHECK_POINTER) and calls (OS_ObjectIdGetById, OS_TimeGetTotalSeconds, OS_TimeGetNanosecondsPart, pthread_cond_timedwait, pthread_cleanup_push/pop) are all used without assigning to the pointer parameters; there is no evidence the macros/functions modify the pointer variables.\n- The code only modifies local variables (limit, status, impl) and the objects referred to by pointers where allowed; it does not reassign pointer parameters.\nGiven the above, there are no fragments that need further investigation for violation of MISRA C 2023 Rule 17.8 in the supplied code."
}