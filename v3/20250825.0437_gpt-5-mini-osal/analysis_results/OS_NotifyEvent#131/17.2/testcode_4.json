{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via the event callback: OS_ObjectIdFinalizeNew calls OS_NotifyEvent, which invokes the application EventHandler callback. If that callback calls into OS services such as OS_ObjectIdAllocateNew (or even OS_NotifyEvent itself), the chain can reach OS_ObjectIdFinalizeNew again (e.g. OS_ObjectIdFinalizeNew -> OS_NotifyEvent -> EventHandler -> OS_ObjectIdAllocateNew -> \u2026 -> OS_ObjectIdFinalizeNew), producing indirect recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NotifyEvent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1316.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NotifyEvent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_NotifyEvent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logger for OS_NotifyEvent. Appends human-readable traces to /tmp/logs/1316.txt\n * This helper is intentionally lightweight and keeps the original logic intact.\n */\nstatic void os_notify_event_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1316.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    /* Log function entry and state. Casts use uintptr_t to avoid assumptions about underlying osal_id_t. */\n    os_notify_event_log(\"ENTER OS_NotifyEvent: event=%d, object_id=0x%\" PRIxPTR \", data=%p\",\n                        (int)event, (uintptr_t)object_id, data);\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        os_notify_event_log(\"EventHandler present: calling callback (event=%d)\", (int)event);\n\n        /* Call the real event handler exactly as before, preserving behavior. */\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        os_notify_event_log(\"Returned from EventHandler: status=%ld\", (long)status);\n    }\n    else\n    {\n        os_notify_event_log(\"No EventHandler installed; returning OS_SUCCESS\");\n        status = OS_SUCCESS;\n    }\n\n    os_notify_event_log(\"EXIT OS_NotifyEvent: status=%ld\", (long)status);\n\n    return status;\n}\n"
}