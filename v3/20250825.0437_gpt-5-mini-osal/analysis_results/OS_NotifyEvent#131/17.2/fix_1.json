{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_notify_event_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1316.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    /* Log function entry and state. Casts use uintptr_t to avoid assumptions about underlying osal_id_t. */\n    os_notify_event_log(\"ENTER OS_NotifyEvent: event=%d, object_id=0x%\" PRIxPTR \", data=%p\",\n                        (int)event, (uintptr_t)object_id, data);\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        os_notify_event_log(\"EventHandler present: calling callback (event=%d)\", (int)event);\n\n        /* Call the real event handler exactly as before, preserving behavior. */\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        os_notify_event_log(\"Returned from EventHandler: status=%ld\", (long)status);\n    }\n    else\n    {\n        os_notify_event_log(\"No EventHandler installed; returning OS_SUCCESS\");\n        status = OS_SUCCESS;\n    }\n\n    os_notify_event_log(\"EXIT OS_NotifyEvent: status=%ld\", (long)status);\n\n    return status;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpb8em7jak/src/src/os/shared/src/osapi-common.c: In function 'os_notify_event_log':\n/tmp/tmpb8em7jak/src/src/os/shared/src/osapi-common.c:94:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n   94 |     vfprintf(f, fmt, ap);\n      |                      ^~\n/tmp/tmpb8em7jak/src/src/os/shared/src/osapi-common.c: In function 'OS_NotifyEvent':\n/tmp/tmpb8em7jak/src/src/os/shared/src/osapi-common.c:107:72: error: expected ')' before 'PRIxPTR'\n  107 |     os_notify_event_log(\"ENTER OS_NotifyEvent: event=%d, object_id=0x%\" PRIxPTR \", data=%p\",\n      |                        ~                                               ^~~~~~~~\n      |                                                                        )\n/tmp/tmpb8em7jak/src/src/os/shared/src/osapi-common.c:67:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   66 | #include \"os-shared-time.h\"\n  +++ |+#include <inttypes.h>\n   67 | \ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-common.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-common.dir/__/__/os/shared/src/osapi-common.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3291: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-common.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_NotifyEvent as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Minimal type definitions to allow this compilation unit to build. */\ntypedef int32_t int32;\ntypedef uintptr_t osal_id_t;\ntypedef int OS_Event_t;\n\n/* Shared global structure with an EventHandler callback pointer. */\nstruct OS_SharedGlobalVars_t\n{\n    int32 (*EventHandler)(OS_Event_t event, osal_id_t object_id, void *data);\n};\n\n/* Define the global variable. Leave EventHandler NULL by default. */\nstruct OS_SharedGlobalVars_t OS_SharedGlobalVars = { NULL };\n\n/* Use a const instead of a macro for OS_SUCCESS to satisfy the constraint. */\nconst int32 OS_SUCCESS = 0;\n\nstatic void os_notify_event_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1316.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    /* Log function entry and state. Casts use uintptr_t to avoid assumptions about underlying osal_id_t. */\n    os_notify_event_log(\"ENTER OS_NotifyEvent: event=%d, object_id=0x%\" PRIxPTR \", data=%p\",\n                        (int)event, (uintptr_t)object_id, data);\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        os_notify_event_log(\"EventHandler present: calling callback (event=%d)\", (int)event);\n\n        /* Call the real event handler exactly as before, preserving behavior. */\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        os_notify_event_log(\"Returned from EventHandler: status=%ld\", (long)status);\n    }\n    else\n    {\n        os_notify_event_log(\"No EventHandler installed; returning OS_SUCCESS\");\n        status = OS_SUCCESS;\n    }\n\n    os_notify_event_log(\"EXIT OS_NotifyEvent: status=%ld\", (long)status);\n\n    return status;\n}\n",
  "explanation": "I added the necessary standard headers (<stdarg.h>, <inttypes.h>, <stdint.h>, <stdio.h>) so va_list and the PRIxPTR macro are defined. I also provided minimal type definitions (int32, osal_id_t, OS_Event_t) and a declaration/definition for OS_SharedGlobalVars (with an EventHandler function pointer) so the code compiles standalone. OS_SUCCESS is provided as a const int32 instead of a macro to respect the constraint against defining macros. The original logic and flow of OS_NotifyEvent and os_notify_event_log are preserved."
}