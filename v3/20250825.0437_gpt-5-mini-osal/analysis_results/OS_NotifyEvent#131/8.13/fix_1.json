{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_NotifyEvent_Log(const char *stage, OS_Event_t event, osal_id_t object_id, void *data, int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/1313.txt\", \"a\");\n    if (f != NULL)\n    {\n        /*\n         * Log the stage, event and object identifiers (as integer types),\n         * the raw pointer value for 'data' (do NOT dereference it), and the status.\n         * Casting to uintmax_t is intended to be safe for typical integral event/id types.\n         */\n        fprintf(f, \"[OS_NotifyEvent] %s: event=%\" PRIuMAX \", object_id=%\" PRIuMAX \", data_ptr=%p, status=%d\\n\",\n                stage,\n                (uintmax_t)event,\n                (uintmax_t)object_id,\n                data,\n                status);\n        fclose(f);\n    }\n}\n\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    /* Log function entry and the pointer value for 'data' to capture the violation scenario. */\n    OS_NotifyEvent_Log(\"enter\", event, object_id, data, -1);\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        OS_NotifyEvent_Log(\"handler_present_before_call\", event, object_id, data, -1);\n\n        /* Preserve original logic: invoke the event handler with the same parameters. */\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        /* Log the outcome after the handler returns. */\n        OS_NotifyEvent_Log(\"after_handler_call\", event, object_id, data, status);\n    }\n    else\n    {\n        /* Log that no handler was present and the default success status used. */\n        OS_NotifyEvent_Log(\"no_handler\", event, object_id, data, (int32)OS_SUCCESS);\n\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmp8vxx7giy/src/src/os/shared/src/osapi-common.c:1:\n/tmp/tmp8vxx7giy/src/src/os/shared/src/osapi-common.c: In function 'OS_NotifyEvent_Log':\n/tmp/tmp8vxx7giy/src/src/os/shared/src/osapi-common.c:93:51: error: expected ')' before 'PRIuMAX'\n   93 |         fprintf(f, \"[OS_NotifyEvent] %s: event=%\" PRIuMAX \", object_id=%\" PRIuMAX \", data_ptr=%p, status=%d\\n\",\n      |                                                   ^~~~~~~\n/tmp/tmp8vxx7giy/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp8vxx7giy/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmp8vxx7giy/src/src/os/shared/src/osapi-common.c:93:9: note: in expansion of macro 'fprintf'\n   93 |         fprintf(f, \"[OS_NotifyEvent] %s: event=%\" PRIuMAX \", object_id=%\" PRIuMAX \", data_ptr=%p, status=%d\\n\",\n      |         ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-common.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-common.dir/__/__/os/shared/src/osapi-common.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3291: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-common.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_NotifyEvent as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <inttypes.h>\n\nstatic void OS_NotifyEvent_Log(const char *stage, OS_Event_t event, osal_id_t object_id, void *data, int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/1313.txt\", \"a\");\n    if (f != NULL)\n    {\n        /*\n         * Log the stage, event and object identifiers (as integer types),\n         * the raw pointer value for 'data' (do NOT dereference it), and the status.\n         * Use the %ju format with a uintmax_t cast to avoid relying on PRIuMAX\n         * token concatenation which can interfere with some stdio macro overrides.\n         */\n        fprintf(f, \"[OS_NotifyEvent] %s: event=%ju, object_id=%ju, data_ptr=%p, status=%d\\n\",\n                stage,\n                (uintmax_t)event,\n                (uintmax_t)object_id,\n                data,\n                status);\n        fclose(f);\n    }\n}\n\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    /* Log function entry and the pointer value for 'data' to capture the violation scenario. */\n    OS_NotifyEvent_Log(\"enter\", event, object_id, data, -1);\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        OS_NotifyEvent_Log(\"handler_present_before_call\", event, object_id, data, -1);\n\n        /* Preserve original logic: invoke the event handler with the same parameters. */\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        /* Log the outcome after the handler returns. */\n        OS_NotifyEvent_Log(\"after_handler_call\", event, object_id, data, status);\n    }\n    else\n    {\n        /* Log that no handler was present and the default success status used. */\n        OS_NotifyEvent_Log(\"no_handler\", event, object_id, data, (int32)OS_SUCCESS);\n\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n",
  "explanation": "The compile error was caused by the use of the token-concatenated PRIuMAX macro inside the fprintf format string, which conflicted with a project-local fprintf macro override. To avoid preprocessor/tokenization issues I replaced the \"%\" PRIuMAX construct with the equivalent \"%ju\" format and kept the cast to (uintmax_t). I also included <inttypes.h> to ensure uintmax_t and the %ju semantics are available. The original logic of OS_NotifyEvent and the logging behavior are preserved."
}