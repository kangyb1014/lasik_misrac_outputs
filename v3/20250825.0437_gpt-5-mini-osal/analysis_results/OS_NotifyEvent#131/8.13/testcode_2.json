{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the parameter 'data' declared as void * (non-const) to OS_SharedGlobalVars.EventHandler. If the event handler does not need to modify the pointed-to object, the pointer should be const-qualified (e.g. const void *), so both OS_NotifyEvent's parameter and the EventHandler prototype should use const. As written, the lack of const qualification on 'data' (and on the EventHandler parameter) violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NotifyEvent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NotifyEvent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_NotifyEvent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe/log helper for OS_NotifyEvent. Writes concise control-flow and state info\n * to /tmp/logs/1313.txt so other agents can reproduce/evidence the call path\n * where a non-const void * 'data' is forwarded to the EventHandler.\n */\nstatic void OS_NotifyEvent_LogState(const char *tag, OS_Event_t event, osal_id_t object_id, void *data, int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/1313.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the tag describing the control point, the numeric values of event\n         * and object_id (cast to long long for broad compatibility), the\n         * pointer value for data, and the status when available.\n         */\n        fprintf(f, \"%s: event=%lld object_id=%lld data=%p status=%ld\\n\",\n                tag,\n                (long long) event,\n                (long long) object_id,\n                data,\n                (long) status);\n        fclose(f);\n    }\n}\n\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        /* Log just before invoking the handler so the log shows the branch\n         * where a non-const void * is passed into the handler.\n         */\n        OS_NotifyEvent_LogState(\"OS_NotifyEvent PRE - calling handler\", event, object_id, data, 0);\n\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        /* Log immediately after return to capture the returned status. */\n        OS_NotifyEvent_LogState(\"OS_NotifyEvent POST - handler returned\", event, object_id, data, status);\n    }\n    else\n    {\n        /* Log the path where no handler is registered. */\n        OS_NotifyEvent_LogState(\"OS_NotifyEvent ELSE - no handler\", event, object_id, data, OS_SUCCESS);\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n"
}